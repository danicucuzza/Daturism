import { HttpClient } from '@wix/sdk-types';
import { LoginCallbackOptions, LoginId, LoginV2Options, LoginWithIdpConnectionCallbackOptions, LoginWithIdpConnectionIdentifiers, LoginWithIdpConnectionOptions, LoginWithIdpConnectionTokenParamsOptions, LogoutOptions, RawHttpResponse, RawHttpResponseNonNullableFields, RegisterV2Options, SignOnOptions, SignOnResponse, SignOnResponseNonNullableFields, StateMachineResponse, StateMachineResponseNonNullableFields, TenantType } from './iam-authentication-v1-authentication-authentication.universal';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function registerV2(httpClient: HttpClient): RegisterV2Signature;
interface RegisterV2Signature {
    /**
     * Registers a new member.
     *
     * Typically, after a sucessful registration, you generate and use member tokens for the
     * registered member so that subsequent API calls are called as part of a member session.
     *
     * If the email used to register the member already exists as a contact email, the registering
     * member need to verify the email address using a code that is sent to the address.
     * @param - Identifier of registering member.
     */
    (loginId: LoginId, options?: RegisterV2Options | undefined): Promise<StateMachineResponse & StateMachineResponseNonNullableFields>;
}
export declare function loginV2(httpClient: HttpClient): LoginV2Signature;
interface LoginV2Signature {
    /**
     * Logs in an existing user.
     *
     * Typically, after a sucessful login, you generate and use member tokens for the
     * logged-in member so that subsequent API calls are called as part of a member session.
     * @param - Identifier of identity logging in.
     */
    (loginId: LoginId, options?: LoginV2Options | undefined): Promise<StateMachineResponse & StateMachineResponseNonNullableFields>;
}
export declare function changePassword(httpClient: HttpClient): ChangePasswordSignature;
interface ChangePasswordSignature {
    /**
     * Changes the password of a logged in user.
     * @param - The new password to set for the logged in user
     */
    (newPassword: string): Promise<void>;
}
export declare function loginWithIdpConnection(httpClient: HttpClient): LoginWithIdpConnectionSignature;
interface LoginWithIdpConnectionSignature {
    /** @param - The type of the tenant the caller wants to login into */
    (identifiers: LoginWithIdpConnectionIdentifiers, tenantType: TenantType, options?: LoginWithIdpConnectionOptions | undefined): Promise<RawHttpResponse & RawHttpResponseNonNullableFields>;
}
export declare function loginWithIdpConnectionCallback(httpClient: HttpClient): LoginWithIdpConnectionCallbackSignature;
interface LoginWithIdpConnectionCallbackSignature {
    /**
     * REQUIRES path params `tenant_type`, `tenant_id` and `idp_connection_id`
     */
    (options?: LoginWithIdpConnectionCallbackOptions | undefined): Promise<RawHttpResponse & RawHttpResponseNonNullableFields>;
}
export declare function loginCallback(httpClient: HttpClient): LoginCallbackSignature;
interface LoginCallbackSignature {
    /** */
    (options?: LoginCallbackOptions | undefined): Promise<RawHttpResponse & RawHttpResponseNonNullableFields>;
}
export declare function loginWithIdpConnectionTokenParams(httpClient: HttpClient): LoginWithIdpConnectionTokenParamsSignature;
interface LoginWithIdpConnectionTokenParamsSignature {
    /** */
    (options?: LoginWithIdpConnectionTokenParamsOptions | undefined): Promise<StateMachineResponse & StateMachineResponseNonNullableFields>;
}
export declare function signOn(httpClient: HttpClient): SignOnSignature;
interface SignOnSignature {
    /** @param - the identifier of the identity */
    (loginId: LoginId, options?: SignOnOptions | undefined): Promise<SignOnResponse & SignOnResponseNonNullableFields>;
}
export declare function logout(httpClient: HttpClient): LogoutSignature;
interface LogoutSignature {
    /**
     * Logs out a member.
     */
    (options?: LogoutOptions | undefined): Promise<RawHttpResponse & RawHttpResponseNonNullableFields>;
}
export { Address, AddressTag, AddressWrapper, Authentication, AuthenticatorConnection, CaptchaToken, CaptchaTokenTokenOneOf, ChangePasswordRequest, ChangePasswordResponse, Connection, ConnectionTypeOneOf, CustomField, CustomValue, CustomValueValueOneOf, Email, EmailTag, Factor, FactorType, HeadersEntry, Identifier, IdentifierValueOneOf, Identity, IdentityProfile, IdpConnection, ListValue, LoginCallbackOptions, LoginCallbackRequest, LoginId, LoginIdTypeOneOf, LoginV2Options, LoginV2Request, LoginWithIdpConnectionCallbackOptions, LoginWithIdpConnectionIdentifiers, LoginWithIdpConnectionOptions, LoginWithIdpConnectionRequest, LoginWithIdpConnectionTokenParamsOptions, LoginWithIdpConnectionTokenParamsRequest, LogoutOptions, LogoutRequest, MapValue, Metadata, PathParametersEntry, Phone, PhoneTag, PrivacyStatus, QueryParametersEntry, RawHttpRequest, RawHttpResponse, RawHttpResponseNonNullableFields, Reason, RegisterV2Options, RegisterV2Request, SecondaryEmail, SignOnOptions, SignOnRequest, SignOnResponse, SignOnResponseNonNullableFields, StateMachineResponse, StateMachineResponseNonNullableFields, StateType, Status, StatusName, StatusV2, TenantType, V1CustomValue, V1CustomValueValueOneOf, V1ListValue, V1MapValue, } from './iam-authentication-v1-authentication-authentication.universal';
