interface ShippoConfiguration$1 {
    /**
     * ShippoConfiguration ID.
     * @readonly
     */
    id?: string | null;
    /** @readonly */
    revision?: string | null;
    /**
     * Date and time the ShippoConfiguration was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the ShippoConfiguration was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Associated delivery region ID. */
    deliveryRegionId?: string | null;
    /** Settings of USPS domestic services. */
    domesticServices?: DomesticServiceSettings$1[];
    /** Settings of USPS international services. */
    internationalServices?: InternationalServiceSettings$1[];
    /** Package type. */
    packageType?: PackageType$1;
    /** Package details. */
    packageDetails?: PackageDetails$1;
    /** Location ID from OS location service. */
    osLocationId?: string | null;
    /**
     * Ship from address materialized from OS location.
     * @readonly
     */
    shipFromAddress?: Address$1;
    /** Backup weight. */
    backupWeight?: string | null;
    /** Data extensions. */
    extendedFields?: ExtendedFields$1;
}
interface DomesticServiceSettings$1 {
    /** USPS domestic service. */
    service?: DomesticService$1;
    /** Service settings. */
    serviceSettings?: ServiceSettings$1;
}
declare enum DomesticService$1 {
    UNKNOWN_DOMESTIC_SERVICE = "UNKNOWN_DOMESTIC_SERVICE",
    GROUND_ADVANTAGE = "GROUND_ADVANTAGE",
    PRIORITY_MAIL = "PRIORITY_MAIL",
    PRIORITY_MAIL_EXPRESS = "PRIORITY_MAIL_EXPRESS"
}
interface ServiceSettings$1 {
    /** Estimated delivery time. */
    estimatedDeliveryTime?: string | null;
    /** Handling fee. */
    handlingFee?: HandlingFee$1;
    /** Amount above which free delivery is offered. */
    freeDeliveryMinimumAmount?: string | null;
}
interface HandlingFee$1 {
    /** Value that will be used to calculate the fee. For example, percentage fee with value 5% to calculate the fee. */
    value?: string;
    /** How to calculate the fee: fixed amount or by percentage. */
    calculationType?: CalculationType$1;
}
declare enum CalculationType$1 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    FIXED = "FIXED",
    PERCENTAGE = "PERCENTAGE"
}
interface InternationalServiceSettings$1 {
    /** USPS international service. */
    service?: InternationalService$1;
    /** Service settings. */
    serviceSettings?: ServiceSettings$1;
}
declare enum InternationalService$1 {
    UNKNOWN_INTERNATIONAL_SERVICE = "UNKNOWN_INTERNATIONAL_SERVICE",
    FIRST_CLASS_PACKAGE_INTERNATIONAL = "FIRST_CLASS_PACKAGE_INTERNATIONAL",
    PRIORITY_MAIL_INTERNATIONAL = "PRIORITY_MAIL_INTERNATIONAL",
    PRIORITY_MAIL_EXPRESS_INTERNATIONAL = "PRIORITY_MAIL_EXPRESS_INTERNATIONAL"
}
declare enum PackageType$1 {
    UNKNOWN_PACKAGE_TYPE = "UNKNOWN_PACKAGE_TYPE",
    CUSTOM = "CUSTOM",
    FLAT_RATE_ENVELOPE = "FLAT_RATE_ENVELOPE",
    PADDED_FLAT_RATE_ENVELOPE = "PADDED_FLAT_RATE_ENVELOPE",
    SMALL_FLAT_RATE_BOX = "SMALL_FLAT_RATE_BOX",
    MEDIUM_FLAT_RATE_BOX_1 = "MEDIUM_FLAT_RATE_BOX_1",
    MEDIUM_FLAT_RATE_BOX_2 = "MEDIUM_FLAT_RATE_BOX_2",
    LARGE_FLAT_RATE_BOX = "LARGE_FLAT_RATE_BOX"
}
interface PackageDetails$1 {
    /**
     * Package name. Must be set when package type is CUSTOM.
     * For other package types, it is read-only, and an exception will be thrown
     * if it set when creating a ShippoConfiguration.
     */
    name?: string | null;
    /**
     * Package dimensions. Can only be set when package type is CUSTOM.
     * For other package types, it is read-only, and an exception will be thrown
     * if it set when creating a ShippoConfiguration.
     */
    dimensions?: PackageDimensions$1;
    /**
     * Maximum number of products. Must be set when package type is NOT CUSTOM.
     * Otherwise, if the package type is CUSTOM, this field cannot be set and an
     * exception will be thrown if it is set when creating a ShippoConfiguration.
     */
    maxNumberOfProducts?: string | null;
}
interface PackageDimensions$1 {
    /** Package length. */
    length?: string;
    /** Package width. */
    width?: string;
    /** Package height. */
    height?: string;
}
/** Physical address */
interface Address$1 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$1;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress$1 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface ExtendedFields$1 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateShippoConfigurationRequest$1 {
    /** ShippoConfiguration to be created. */
    shippoConfiguration: ShippoConfiguration$1;
    backupRate?: string | null;
}
interface CreateShippoConfigurationResponse$1 {
    /** The created ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration$1;
}
interface GetShippoConfigurationRequest$1 {
    /** ID of the ShippoConfiguration to retrieve. */
    shippoConfigurationId: string;
}
interface GetShippoConfigurationResponse$1 {
    /** The requested ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration$1;
}
interface UpdateShippoConfigurationRequest$1 {
    /** ShippoConfiguration to be updated, may be partial. */
    shippoConfiguration: ShippoConfiguration$1;
}
interface UpdateShippoConfigurationResponse$1 {
    /** Updated ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration$1;
}
interface DeleteShippoConfigurationRequest$1 {
    /** ID of the ShippoConfiguration to delete. */
    shippoConfigurationId: string;
}
interface DeleteShippoConfigurationResponse$1 {
}
interface QueryShippoConfigurationsRequest$1 {
    /** WQL expression. */
    query?: CursorQuery$1;
}
interface CursorQuery$1 extends CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$1[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryShippoConfigurationsResponse$1 {
    /** List of ShippoConfigurations. */
    shippoConfigurations?: ShippoConfiguration$1[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$1;
}
interface CursorPagingMetadata$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$1;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateExtendedFieldsRequest$1 {
    /** ID of the entity to update. */
    id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse$1 {
    /** Updated ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration$1;
}
interface HandlingFeeNonNullableFields$1 {
    value: string;
    calculationType: CalculationType$1;
}
interface ServiceSettingsNonNullableFields$1 {
    handlingFee?: HandlingFeeNonNullableFields$1;
}
interface DomesticServiceSettingsNonNullableFields$1 {
    service: DomesticService$1;
    serviceSettings?: ServiceSettingsNonNullableFields$1;
}
interface InternationalServiceSettingsNonNullableFields$1 {
    service: InternationalService$1;
    serviceSettings?: ServiceSettingsNonNullableFields$1;
}
interface PackageDimensionsNonNullableFields$1 {
    length: string;
    width: string;
    height: string;
}
interface PackageDetailsNonNullableFields$1 {
    dimensions?: PackageDimensionsNonNullableFields$1;
}
interface StreetAddressNonNullableFields$1 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$1 {
    streetAddress?: StreetAddressNonNullableFields$1;
}
interface ShippoConfigurationNonNullableFields$1 {
    domesticServices: DomesticServiceSettingsNonNullableFields$1[];
    internationalServices: InternationalServiceSettingsNonNullableFields$1[];
    packageType: PackageType$1;
    packageDetails?: PackageDetailsNonNullableFields$1;
    shipFromAddress?: AddressNonNullableFields$1;
}
interface CreateShippoConfigurationResponseNonNullableFields$1 {
    shippoConfiguration?: ShippoConfigurationNonNullableFields$1;
}
interface GetShippoConfigurationResponseNonNullableFields$1 {
    shippoConfiguration?: ShippoConfigurationNonNullableFields$1;
}
interface UpdateShippoConfigurationResponseNonNullableFields$1 {
    shippoConfiguration?: ShippoConfigurationNonNullableFields$1;
}
interface QueryShippoConfigurationsResponseNonNullableFields$1 {
    shippoConfigurations: ShippoConfigurationNonNullableFields$1[];
}
interface UpdateExtendedFieldsResponseNonNullableFields$1 {
    shippoConfiguration?: ShippoConfigurationNonNullableFields$1;
}

interface ShippoConfiguration {
    /**
     * ShippoConfiguration ID.
     * @readonly
     */
    _id?: string | null;
    /** @readonly */
    revision?: string | null;
    /**
     * Date and time the ShippoConfiguration was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the ShippoConfiguration was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Associated delivery region ID. */
    deliveryRegionId?: string | null;
    /** Settings of USPS domestic services. */
    domesticServices?: DomesticServiceSettings[];
    /** Settings of USPS international services. */
    internationalServices?: InternationalServiceSettings[];
    /** Package type. */
    packageType?: PackageType;
    /** Package details. */
    packageDetails?: PackageDetails;
    /** Location ID from OS location service. */
    osLocationId?: string | null;
    /**
     * Ship from address materialized from OS location.
     * @readonly
     */
    shipFromAddress?: Address;
    /** Backup weight. */
    backupWeight?: string | null;
    /** Data extensions. */
    extendedFields?: ExtendedFields;
}
interface DomesticServiceSettings {
    /** USPS domestic service. */
    service?: DomesticService;
    /** Service settings. */
    serviceSettings?: ServiceSettings;
}
declare enum DomesticService {
    UNKNOWN_DOMESTIC_SERVICE = "UNKNOWN_DOMESTIC_SERVICE",
    GROUND_ADVANTAGE = "GROUND_ADVANTAGE",
    PRIORITY_MAIL = "PRIORITY_MAIL",
    PRIORITY_MAIL_EXPRESS = "PRIORITY_MAIL_EXPRESS"
}
interface ServiceSettings {
    /** Estimated delivery time. */
    estimatedDeliveryTime?: string | null;
    /** Handling fee. */
    handlingFee?: HandlingFee;
    /** Amount above which free delivery is offered. */
    freeDeliveryMinimumAmount?: string | null;
}
interface HandlingFee {
    /** Value that will be used to calculate the fee. For example, percentage fee with value 5% to calculate the fee. */
    value?: string;
    /** How to calculate the fee: fixed amount or by percentage. */
    calculationType?: CalculationType;
}
declare enum CalculationType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    FIXED = "FIXED",
    PERCENTAGE = "PERCENTAGE"
}
interface InternationalServiceSettings {
    /** USPS international service. */
    service?: InternationalService;
    /** Service settings. */
    serviceSettings?: ServiceSettings;
}
declare enum InternationalService {
    UNKNOWN_INTERNATIONAL_SERVICE = "UNKNOWN_INTERNATIONAL_SERVICE",
    FIRST_CLASS_PACKAGE_INTERNATIONAL = "FIRST_CLASS_PACKAGE_INTERNATIONAL",
    PRIORITY_MAIL_INTERNATIONAL = "PRIORITY_MAIL_INTERNATIONAL",
    PRIORITY_MAIL_EXPRESS_INTERNATIONAL = "PRIORITY_MAIL_EXPRESS_INTERNATIONAL"
}
declare enum PackageType {
    UNKNOWN_PACKAGE_TYPE = "UNKNOWN_PACKAGE_TYPE",
    CUSTOM = "CUSTOM",
    FLAT_RATE_ENVELOPE = "FLAT_RATE_ENVELOPE",
    PADDED_FLAT_RATE_ENVELOPE = "PADDED_FLAT_RATE_ENVELOPE",
    SMALL_FLAT_RATE_BOX = "SMALL_FLAT_RATE_BOX",
    MEDIUM_FLAT_RATE_BOX_1 = "MEDIUM_FLAT_RATE_BOX_1",
    MEDIUM_FLAT_RATE_BOX_2 = "MEDIUM_FLAT_RATE_BOX_2",
    LARGE_FLAT_RATE_BOX = "LARGE_FLAT_RATE_BOX"
}
interface PackageDetails {
    /**
     * Package name. Must be set when package type is CUSTOM.
     * For other package types, it is read-only, and an exception will be thrown
     * if it set when creating a ShippoConfiguration.
     */
    name?: string | null;
    /**
     * Package dimensions. Can only be set when package type is CUSTOM.
     * For other package types, it is read-only, and an exception will be thrown
     * if it set when creating a ShippoConfiguration.
     */
    dimensions?: PackageDimensions;
    /**
     * Maximum number of products. Must be set when package type is NOT CUSTOM.
     * Otherwise, if the package type is CUSTOM, this field cannot be set and an
     * exception will be thrown if it is set when creating a ShippoConfiguration.
     */
    maxNumberOfProducts?: string | null;
}
interface PackageDimensions {
    /** Package length. */
    length?: string;
    /** Package width. */
    width?: string;
    /** Package height. */
    height?: string;
}
/** Physical address */
interface Address {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateShippoConfigurationRequest {
    /** ShippoConfiguration to be created. */
    shippoConfiguration: ShippoConfiguration;
    backupRate?: string | null;
}
interface CreateShippoConfigurationResponse {
    /** The created ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface GetShippoConfigurationRequest {
    /** ID of the ShippoConfiguration to retrieve. */
    shippoConfigurationId: string;
}
interface GetShippoConfigurationResponse {
    /** The requested ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface UpdateShippoConfigurationRequest {
    /** ShippoConfiguration to be updated, may be partial. */
    shippoConfiguration: ShippoConfiguration;
}
interface UpdateShippoConfigurationResponse {
    /** Updated ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface DeleteShippoConfigurationRequest {
    /** ID of the ShippoConfiguration to delete. */
    shippoConfigurationId: string;
}
interface DeleteShippoConfigurationResponse {
}
interface QueryShippoConfigurationsRequest {
    /** WQL expression. */
    query?: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryShippoConfigurationsResponse {
    /** List of ShippoConfigurations. */
    shippoConfigurations?: ShippoConfiguration[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateExtendedFieldsRequest {
    /** ID of the entity to update. */
    _id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse {
    /** Updated ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface HandlingFeeNonNullableFields {
    value: string;
    calculationType: CalculationType;
}
interface ServiceSettingsNonNullableFields {
    handlingFee?: HandlingFeeNonNullableFields;
}
interface DomesticServiceSettingsNonNullableFields {
    service: DomesticService;
    serviceSettings?: ServiceSettingsNonNullableFields;
}
interface InternationalServiceSettingsNonNullableFields {
    service: InternationalService;
    serviceSettings?: ServiceSettingsNonNullableFields;
}
interface PackageDimensionsNonNullableFields {
    length: string;
    width: string;
    height: string;
}
interface PackageDetailsNonNullableFields {
    dimensions?: PackageDimensionsNonNullableFields;
}
interface StreetAddressNonNullableFields {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields;
}
interface ShippoConfigurationNonNullableFields {
    domesticServices: DomesticServiceSettingsNonNullableFields[];
    internationalServices: InternationalServiceSettingsNonNullableFields[];
    packageType: PackageType;
    packageDetails?: PackageDetailsNonNullableFields;
    shipFromAddress?: AddressNonNullableFields;
}
interface CreateShippoConfigurationResponseNonNullableFields {
    shippoConfiguration?: ShippoConfigurationNonNullableFields;
}
interface GetShippoConfigurationResponseNonNullableFields {
    shippoConfiguration?: ShippoConfigurationNonNullableFields;
}
interface UpdateShippoConfigurationResponseNonNullableFields {
    shippoConfiguration?: ShippoConfigurationNonNullableFields;
}
interface QueryShippoConfigurationsResponseNonNullableFields {
    shippoConfigurations: ShippoConfigurationNonNullableFields[];
}
interface UpdateExtendedFieldsResponseNonNullableFields {
    shippoConfiguration?: ShippoConfigurationNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createShippoConfiguration(): __PublicMethodMetaInfo<'POST', {}, CreateShippoConfigurationRequest, CreateShippoConfigurationRequest$1, CreateShippoConfigurationResponse & CreateShippoConfigurationResponseNonNullableFields, CreateShippoConfigurationResponse$1 & CreateShippoConfigurationResponseNonNullableFields$1>;
declare function getShippoConfiguration(): __PublicMethodMetaInfo<'GET', {
    shippoConfigurationId: string;
}, GetShippoConfigurationRequest, GetShippoConfigurationRequest$1, GetShippoConfigurationResponse & GetShippoConfigurationResponseNonNullableFields, GetShippoConfigurationResponse$1 & GetShippoConfigurationResponseNonNullableFields$1>;
declare function updateShippoConfiguration(): __PublicMethodMetaInfo<'PATCH', {
    shippoConfigurationId: string;
}, UpdateShippoConfigurationRequest, UpdateShippoConfigurationRequest$1, UpdateShippoConfigurationResponse & UpdateShippoConfigurationResponseNonNullableFields, UpdateShippoConfigurationResponse$1 & UpdateShippoConfigurationResponseNonNullableFields$1>;
declare function deleteShippoConfiguration(): __PublicMethodMetaInfo<'DELETE', {
    shippoConfigurationId: string;
}, DeleteShippoConfigurationRequest, DeleteShippoConfigurationRequest$1, DeleteShippoConfigurationResponse, DeleteShippoConfigurationResponse$1>;
declare function queryShippoConfigurations(): __PublicMethodMetaInfo<'GET', {}, QueryShippoConfigurationsRequest, QueryShippoConfigurationsRequest$1, QueryShippoConfigurationsResponse & QueryShippoConfigurationsResponseNonNullableFields, QueryShippoConfigurationsResponse$1 & QueryShippoConfigurationsResponseNonNullableFields$1>;
declare function updateExtendedFields(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, UpdateExtendedFieldsRequest, UpdateExtendedFieldsRequest$1, UpdateExtendedFieldsResponse & UpdateExtendedFieldsResponseNonNullableFields, UpdateExtendedFieldsResponse$1 & UpdateExtendedFieldsResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, createShippoConfiguration, deleteShippoConfiguration, getShippoConfiguration, queryShippoConfigurations, updateExtendedFields, updateShippoConfiguration };
