interface ListEligibleMembershipsRequest {
    /** The line items for which to list eligible memberships. */
    lineItems: LineItem[];
    /**
     * Member ID.
     *
     * Do not retrieve this from the request context. In some cases the caller is not a member, but a user who is using the membership on behalf of a member.
     */
    memberId: string;
    /**
     * The selected payment memberships and which line items they apply to.
     *
     * When not provided, your implementation is expected to return the default selection.
     * When provided, your implementation is expected to validate and return it.
     */
    selectedMemberships?: SelectedMemberships;
}
interface LineItem {
    /** Line item ID. */
    _id?: string;
    /** Catalog and item reference info. */
    catalogReference?: CatalogReference;
    /** Properties of the service. When relevant, contains information such as date and number of participants. */
    serviceProperties?: ServiceProperties;
    /**
     * Root catalog item ID.
     *
     * The value will usually be the same as `catalogReference.catalogItemId`.
     * In cases when these are not the same, this field will return the actual ID of the item in the catalog.
     * For example, for Wix bookings, the value of `catalogReference.catalogItemId` is the booking ID, but `rootCatalogItemId` is set to the service ID.
     */
    rootCatalogItemId?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ServiceProperties {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface SelectedMemberships {
    /** Selected memberships. */
    memberships?: SelectedMembership[];
}
interface SelectedMembership {
    /** Membership ID. */
    _id?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface ListEligibleMembershipsResponse {
    /** List of memberships that are eligible for the given member and line items. */
    eligibleMemberships?: Membership[];
    /** List of memberships owned by the member, but cannot be used due to the reason provided. */
    invalidMemberships?: InvalidMembership[];
    /** List of selected memberships and which line items they apply to. */
    selectedMemberships?: SelectedMembership[];
}
interface Membership {
    /** Membership ID. */
    _id?: string;
    /** Membership name. */
    name?: MembershipName;
    /** Line item IDs this membership applies to. */
    lineItemIds?: string[];
    /** Total and remaining membership credits. */
    credits?: MembershipPaymentCredits;
    /** Membership expiration date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface MembershipPaymentCredits {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership {
    /** The membership that is invalid and cannot be used. */
    membership?: Membership;
    /** Reason why this membership is invalid. */
    reason?: string;
}
interface MembershipInvalidSelectionErrors {
    /** Error details for invalid memberships. */
    membershipInvalidSelectionErrors?: MembershipInvalidSelectionError[];
}
interface MembershipInvalidSelectionError extends MembershipInvalidSelectionErrorErrorDataOneOf {
    /** Line item IDs that were missing. */
    lineItemNotFoundInfo?: LineItemNotFoundInfo;
    /** Error details for line items that cannot be used with this membership. */
    membershipCannotBeUsedForLineItemsInfo?: MembershipCannotBeUsedForLineItemsInfo;
    /** Reason why this membership selection is invalid. */
    membershipSelectionInvalidReason?: string | null;
    /** Membership ID. */
    membershipId?: string;
    /**
     * Error type.
     *
     * + MEMBERSHIP_NOT_FOUND: Membership not found.
     * + LINE_ITEM_NOT_FOUND: The selection points to a line item ID that wasn't provided.
     * + MEMBERSHIP_CANNOT_BE_USED_FOR_LINE_ITEMS: The membership cannot be used for the specific line items provided.
     * + MEMBERSHIP_SELECTION_INVALID: The membership can be used for each individual line item, but combining all of them is invalid.
     */
    errorType?: MembershipErrorType;
}
/** @oneof */
interface MembershipInvalidSelectionErrorErrorDataOneOf {
    /** Line item IDs that were missing. */
    lineItemNotFoundInfo?: LineItemNotFoundInfo;
    /** Error details for line items that cannot be used with this membership. */
    membershipCannotBeUsedForLineItemsInfo?: MembershipCannotBeUsedForLineItemsInfo;
    /** Reason why this membership selection is invalid. */
    membershipSelectionInvalidReason?: string | null;
}
declare enum MembershipErrorType {
    UNKNOWN = "UNKNOWN",
    MEMBERSHIP_NOT_FOUND = "MEMBERSHIP_NOT_FOUND",
    /** which line item ids */
    LINE_ITEM_NOT_FOUND = "LINE_ITEM_NOT_FOUND",
    /** which ids and why */
    MEMBERSHIP_CANNOT_BE_USED_FOR_LINE_ITEMS = "MEMBERSHIP_CANNOT_BE_USED_FOR_LINE_ITEMS",
    /** reason */
    MEMBERSHIP_SELECTION_INVALID = "MEMBERSHIP_SELECTION_INVALID"
}
interface LineItemNotFoundInfo {
    /** Line item IDs that were missing. */
    lineItemIds?: string[];
}
interface MembershipCannotBeUsedForLineItemsInfo {
    /** Line items that cannot be used with this membership, and the reason why. */
    lineItems?: MembershipCannotBeUsedForLineItemInfo[];
}
interface MembershipCannotBeUsedForLineItemInfo {
    /** Line item ID. */
    lineItemId?: string;
    /** Reason why this line item cannot be used with this membership. */
    reason?: string;
}
interface ChargeMembershipRequest {
    /**
     * Member ID.
     *
     * Do not retrieve this from the request context. In some cases the caller is not a member, but a user who is using the membership on behalf of a member.
     */
    memberId: string;
    /** Membership ID, as returned from the List Eligible Memberships call. */
    membershipId: string;
    /**
     * Idempotency key to avoid duplicate charge.
     * The value will usually would be the same as `membershipId` + `orderId` + `rootCatalogItemId`.
     */
    idempotencyKey: string;
    /**
     * Service properties.
     *
     * When relevant, this contains information such as date and number of participants.
     */
    serviceProperties?: ServiceProperties;
    /** Catalog and item reference info. */
    catalogReference: CatalogReference;
    /**
     * Root catalog item ID.
     *
     * The value will usually be the same as `catalogReference.catalogItemId`.
     * In cases when these are not the same, this field will return the actual ID of the item in the catalog.
     * For example, for Wix bookings, the value of `catalogReference.catalogItemId` is the booking ID, but `rootCatalogItemId` is set to the service ID.
     */
    rootCatalogItemId?: string | null;
    /** Additional data about this charge. */
    additionalData?: Record<string, any> | null;
}
interface ChargeMembershipResponse {
    /**
     * The transaction ID for this charge.
     *
     * Use this ID to void the charge.
     */
    transactionId?: string;
}
interface MembershipCannotBeChargedError extends MembershipCannotBeChargedErrorErrorDataOneOf {
    /** Membership is out of credits. For example, 5 are required, but only 4 remain. */
    outOfCredits?: OutOfCredits;
    /** Membership has not become active yet. */
    notStartedYet?: NotStartedYet;
    /** Membership has expired or ended. */
    ended?: Ended;
    /** Error type. */
    errorType?: MembershipCannotBeChargedType;
}
/** @oneof */
interface MembershipCannotBeChargedErrorErrorDataOneOf {
    /** Membership is out of credits. For example, 5 are required, but only 4 remain. */
    outOfCredits?: OutOfCredits;
    /** Membership has not become active yet. */
    notStartedYet?: NotStartedYet;
    /** Membership has expired or ended. */
    ended?: Ended;
}
declare enum MembershipCannotBeChargedType {
    OUT_OF_CREDITS = "OUT_OF_CREDITS",
    NOT_STARTED_YET = "NOT_STARTED_YET",
    ENDED = "ENDED",
    NOT_APPLICABLE_FOR_MULTIPLE_PARTICIPANTS = "NOT_APPLICABLE_FOR_MULTIPLE_PARTICIPANTS"
}
interface OutOfCredits {
    /** Required amount of credits. */
    required?: number;
    /** Remaining amount of credits. */
    remaining?: number;
}
interface NotStartedYet {
    /** Start date of the membership. */
    membershipStartDate?: Date | null;
}
interface Ended {
    /** End date of the membership. */
    endDate?: Date | null;
}
interface MembershipAlreadyChargedError {
    /** ID of the transaction that was already used for membership charge. */
    transactionId?: string;
}
interface GetMembershipVoidabilityRequest {
    /** Transaction ID to check if it can be voided. */
    transactionId: string;
}
interface GetMembershipVoidabilityResponse {
    /** Whether the membership charge can be voided. */
    voidable?: boolean;
    /** Reason why the membership charge cannot be voided. */
    reason?: string | null;
}
interface VoidMembershipChargeRequest {
    /** Transaction ID to void. */
    transactionId: string;
}
interface VoidMembershipChargeResponse {
}
interface MembershipsSPIConfig {
    /**
     * The base URI where the endpoints are called. Wix eCommerce appends the endpoint path to the base URI.
     * For example, to call the Charge Membership endpoint at https://my-memberships.com/v1/charge-membership, the base URI you provide here is https://my-memberships.com/.
     */
    deploymentUri?: string;
    /** The app IDs of the catalogs your app supports. */
    catalogAppDefIds?: string[];
}
/**
 * this message is not directly used by any service,
 * it exists to describe the expected parameters that SHOULD be provided to invoked Velo methods as part of open-platform.
 * e.g. SPIs, event-handlers, etc..
 * NOTE: this context object MUST be provided as the last argument in each Velo method signature.
 *
 * Example:
 * ```typescript
 * export function wixStores_onOrderCanceled({ event, metadata }: OrderCanceledEvent) {
 * ...
 * }
 * ```
 */
interface Context {
    /** A unique identifier of the request. You may print this ID to your logs to help with future debugging and easier correlation with Wix's logs. */
    requestId?: string | null;
    /** [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) 3-letter currency code. */
    currency?: string | null;
    /** An object that describes the identity that triggered this request. */
    identity?: IdentificationData;
    /** A string representing a language and region in the format of `"xx-XX"`. First 2 letters represent the language code according to ISO 639-1. This is followed by a dash "-", and then a by 2 capital letters representing the region according to ISO 3166-2. For example, `"en-US"`. */
    languages?: string[];
    /** The service provider app's instance ID. */
    instanceId?: string | null;
}
declare enum IdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: IdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}

type ServicePluginMethodInput = {
    request: any;
    metadata: any;
};
type ServicePluginContract = Record<string, (payload: ServicePluginMethodInput) => unknown | Promise<unknown>>;
type ServicePluginMethodMetadata = {
    name: string;
    primaryHttpMappingPath: string;
    transformations: {
        fromREST: (...args: unknown[]) => ServicePluginMethodInput;
        toREST: (...args: unknown[]) => unknown;
    };
};
type ServicePluginDefinition<Contract extends ServicePluginContract> = {
    __type: 'service-plugin-definition';
    componentType: string;
    methods: ServicePluginMethodMetadata[];
    __contract: Contract;
};
declare function ServicePluginDefinition<Contract extends ServicePluginContract>(componentType: string, methods: ServicePluginMethodMetadata[]): ServicePluginDefinition<Contract>;
type BuildServicePluginDefinition<T extends ServicePluginDefinition<any>> = (implementation: T['__contract']) => void;

declare global {
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- It has to be an `interface` so that it can be merged.
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}

declare global {
    interface ContextualClient {
    }
}

interface ListEligibleMembershipsEnvelope {
    request: ListEligibleMembershipsRequest;
    metadata: Context;
}
interface ChargeMembershipEnvelope {
    request: ChargeMembershipRequest;
    metadata: Context;
}
interface GetMembershipVoidabilityEnvelope {
    request: GetMembershipVoidabilityRequest;
    metadata: Context;
}
interface VoidMembershipChargeEnvelope {
    request: VoidMembershipChargeRequest;
    metadata: Context;
}
declare const provideHandlers$1: ServicePluginDefinition<{
    /**
     *
     * This method retrieves eligible memberships from your app. */
    listEligibleMemberships(payload: ListEligibleMembershipsEnvelope): ListEligibleMembershipsResponse | Promise<ListEligibleMembershipsResponse>;
    /**
     *
     * This method requests that a membership be charged by your app. */
    chargeMembership(payload: ChargeMembershipEnvelope): ChargeMembershipResponse | Promise<ChargeMembershipResponse>;
    /**
     *
     * This method retrieves from your app whether a membership can be voided. */
    getMembershipVoidability(payload: GetMembershipVoidabilityEnvelope): GetMembershipVoidabilityResponse | Promise<GetMembershipVoidabilityResponse>;
    /**
     *
     * This method requests that a membership charge be voided by your app. */
    voidMembershipCharge(payload: VoidMembershipChargeEnvelope): VoidMembershipChargeResponse | Promise<VoidMembershipChargeResponse>;
}>;

declare function createServicePluginModule<T extends ServicePluginDefinition<any>>(servicePluginDefinition: T): BuildServicePluginDefinition<T> & T;

type _publicProvideHandlersType = typeof provideHandlers$1;
declare const provideHandlers: ReturnType<typeof createServicePluginModule<_publicProvideHandlersType>>;

/**
 * The provided membership selection is invalid
 */
declare class InvalidSelectionWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorSchemaName: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    data: MembershipInvalidSelectionErrors;
    constructor(data: MembershipInvalidSelectionErrors);
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * The membership was found, but does not apply for the provided item
 */
declare class MembershipDoesNotApplyToItemWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * The membership was found, applied to the provided item but cannot be charged. For example because a limited membership doesn't have enough credits
 */
declare class MembershipCannotBeUsedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorSchemaName: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    data: MembershipCannotBeChargedError;
    constructor(data: MembershipCannotBeChargedError);
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * This charge was already done, per the idempotency key of membershipId + orderId + rootCatalogItemId
 */
declare class MembershipAlreadyChargedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorSchemaName: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    data: MembershipAlreadyChargedError;
    constructor(data: MembershipAlreadyChargedError);
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Transaction not found
 */
declare class TransactionNotFoundWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Transaction exists but cannot be voided
 */
declare class TransactionCannotBeVoidedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Transaction was already voided
 */
declare class TransactionAlreadyVoidedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}

export { type CatalogReference, type ChargeMembershipRequest, type ChargeMembershipResponse, type Context, type Ended, type GetMembershipVoidabilityRequest, type GetMembershipVoidabilityResponse, type IdentificationData, type IdentificationDataIdOneOf, IdentityType, type InvalidMembership, InvalidSelectionWixError, type LineItem, type LineItemNotFoundInfo, type ListEligibleMembershipsRequest, type ListEligibleMembershipsResponse, type Membership, type MembershipAlreadyChargedError, MembershipAlreadyChargedWixError, type MembershipCannotBeChargedError, type MembershipCannotBeChargedErrorErrorDataOneOf, MembershipCannotBeChargedType, type MembershipCannotBeUsedForLineItemInfo, type MembershipCannotBeUsedForLineItemsInfo, MembershipCannotBeUsedWixError, MembershipDoesNotApplyToItemWixError, MembershipErrorType, type MembershipInvalidSelectionError, type MembershipInvalidSelectionErrorErrorDataOneOf, type MembershipInvalidSelectionErrors, type MembershipName, type MembershipPaymentCredits, type MembershipsSPIConfig, type NotStartedYet, type OutOfCredits, type SelectedMembership, type SelectedMemberships, type ServiceProperties, TransactionAlreadyVoidedWixError, TransactionCannotBeVoidedWixError, TransactionNotFoundWixError, type VoidMembershipChargeRequest, type VoidMembershipChargeResponse, type _publicProvideHandlersType, provideHandlers, provideHandlers$1 as publicProvideHandlers };
