"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteTipSettings = exports.createDefaultTipSettings = exports.createTipSettings = exports.updateTipSettings = exports.queryTipSettings = exports.WebhookIdentityType = exports.SortOrder = exports.StaffDistributionMethod = exports.TipType = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const query_builder_1 = require("@wix/sdk-runtime/query-builder");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixTipsSettingsV1TipSettings = __importStar(require("./tips-settings-v1-tip-settings-tip-settings.http"));
var TipType;
(function (TipType) {
    /** There is no information about the tip type. */
    TipType["UNKNOWN_TIP_TYPE"] = "UNKNOWN_TIP_TYPE";
    /** The tip is calculated as a percentage of the subtotal of all related line items. */
    TipType["PERCENTAGE"] = "PERCENTAGE";
    /** The tip is a fixed amount. */
    TipType["AMOUNT"] = "AMOUNT";
})(TipType || (exports.TipType = TipType = {}));
var StaffDistributionMethod;
(function (StaffDistributionMethod) {
    /** There is no information about the staff distribution method. */
    StaffDistributionMethod["UNKNOWN_SPLIT_METHOD"] = "UNKNOWN_SPLIT_METHOD";
    /** All staff receive an equal amount of the tip. */
    StaffDistributionMethod["EQUAL"] = "EQUAL";
    /** Staff receive a proportional amount of the tip. */
    StaffDistributionMethod["PROPORTIONAL"] = "PROPORTIONAL";
})(StaffDistributionMethod || (exports.StaffDistributionMethod = StaffDistributionMethod = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Retrieves a list of tip of up to 100 tip settings, given the provided paging, filtering, and sorting.
 *
 * Query Tip Settings runs with these defaults, which you can override:
 * - `cursorPaging.limit` is `50`.
 * - Sorted by `id` in ascending order.
 *
 * For field support for filters and sorting, see
 * [Tip Settings: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tip-settings/supported-filters).
 *
 * Use [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time)
 * when setting a filter for dates.
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language),
 * [Sorting and Paging](https://dev.wix.com/api/rest/getting-started/sorting-and-paging),
 * and [Field Projection](https://dev.wix.com/api/rest/getting-started/field-projection).
 * @public
 * @documentationMaturity preview
 * @permissionId WIX_TIPS.TIP_SETTINGS_READ
 * @applicableIdentity VISITOR
 */
function queryTipSettings() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return (0, query_builder_1.queryBuilder)({
        func: async (payload) => {
            const reqOpts = ambassadorWixTipsSettingsV1TipSettings.queryTipSettings(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(data);
            return {
                items: transformedData?.tipSettings,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = (0, transform_error_1.transformError)(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
exports.queryTipSettings = queryTipSettings;
/**
 * Updates a `tipSettings` object.
 *
 *
 * You can't update the `default` field.
 * @param tipSettings - Tip settings to update.
 * @public
 * @documentationMaturity preview
 * @requiredField tipSettings
 * @permissionId WIX_TIPS.TIP_SETTINGS_UPDATE
 * @returns Updated tip settings.
 */
async function updateTipSettings(tipSettings) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        tipSettings: tipSettings,
    });
    const reqOpts = ambassadorWixTipsSettingsV1TipSettings.updateTipSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.tipSettings;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { tipSettings: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['tipSettings']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateTipSettings = updateTipSettings;
/**
 * Creates a `tipSettings` object.
 *
 *
 * You can't create a `tipSettings` object with `{"default": true}`.
 * @param tipSettings - Tip settings to create.
 * @public
 * @documentationMaturity preview
 * @requiredField tipSettings
 * @permissionId WIX_TIPS.TIP_SETTINGS_CREATE
 * @returns Created tip settings.
 */
async function createTipSettings(tipSettings) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        tipSettings: tipSettings,
    });
    const reqOpts = ambassadorWixTipsSettingsV1TipSettings.createTipSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.tipSettings;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { tipSettings: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['tipSettings']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createTipSettings = createTipSettings;
/**
 * Creates a default `tipSettings` object.
 *
 *
 * The call fails if there is already an existing default `tipSettings` object.
 * @param tipSettings - Dafault tip settings to create.
 * @public
 * @documentationMaturity preview
 * @requiredField tipSettings
 * @permissionId WIX_TIPS.TIP_SETTINGS_CREATE
 */
async function createDefaultTipSettings(tipSettings) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        tipSettings: tipSettings,
    });
    const reqOpts = ambassadorWixTipsSettingsV1TipSettings.createDefaultTipSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { tipSettings: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['tipSettings']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createDefaultTipSettings = createDefaultTipSettings;
/**
 * Deletes a `tipSettings` object.
 *
 *
 * You can't delete the default `tipSettings` object.
 * @param tipSettingsId - ID of the `tipSettings` object to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField tipSettingsId
 * @permissionId WIX_TIPS.TIP_SETTINGS_DELETE
 */
async function deleteTipSettings(tipSettingsId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        tipSettingsId: tipSettingsId,
    });
    const reqOpts = ambassadorWixTipsSettingsV1TipSettings.deleteTipSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { tipSettingsId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['tipSettingsId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteTipSettings = deleteTipSettings;
//# sourceMappingURL=tips-settings-v1-tip-settings-tip-settings.universal.js.map