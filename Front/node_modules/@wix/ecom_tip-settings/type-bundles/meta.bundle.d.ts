/**
 * Tip settings define how tips are calculated and distributed among staff. When
 * Wix Tips is installed, default settings are automatically created. You can't
 * delete these default settings but you can update them. Creating additional
 * settings allows business owners to customize tip screens for different payment
 * terminals or set specific presets for various products or services.
 */
interface TipSettings$1 extends TipSettingsIdentifierOneOf$1 {
    /**
     * ID of the [location](https://dev.wix.com/docs/rest/business-management/locations/location-object)
     * for which the tip settings apply.
     */
    locationId?: string | null;
    /**
     * ID of the payment terminal for which the tip settings apply. Wix Tips doesn't
     * validate the ID you provide.
     *
     * Max: 30 characters
     */
    paymentTerminalId?: string | null;
    /**
     * ID of the Wix user for whom the tip settings apply. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    userId?: string | null;
    /**
     * ID of the tip settings.
     * @readonly
     */
    id?: string | null;
    /**
     * Tip type.
     *
     * Supported values:
     * + `UNKNOWN_TIP_TYPE`: There is no information about the tip type.
     * + `PERCENTAGE`: The tip is calculated as a percentage of the subtotal for all related line items.
     * + `AMOUNT`: The tip is a fixed amount.
     */
    tipType?: TipType$1;
    /**
     * Information about the tip choices that Wix Tips displays to customers during the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     *
     * Min: `1` preset
     * Max: `3` presets
     */
    presets?: Preset$1[];
    /**
     * Whether customer are allowed to tip during the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     *
     * Default: `true`
     */
    allowCustomerTip?: boolean | null;
    /**
     * Whether the business owners are given the option to add a tip during the
     * payment collection flow in their dashboard.
     *
     * Default: `true`
     */
    allowBusinessTipAtPayment?: boolean | null;
    /**
     * Whether customers can enter a custom tip amount. If set to `false`, customers
     * can only select a tip value from the available `presets` and can't enter a
     * custom amount.
     *
     * Default: `true`
     */
    allowCustomAmount?: boolean | null;
    /**
     * Whether business owners are allowed to edit tip distributions. If set to
     * `false`, owners can't edit distributions after they were created.
     *
     * Default: `true`
     */
    allowEditDistribution?: boolean | null;
    /**
     * How the tip is distributed among staff.
     *
     * Supported values:
     * `UNKNOWN_SPLIT_METHOD`: There is no information about the staff distribution method.
     * `EQUAL`: The tip is distributed equally among all staff.
     * `PROPORTIONAL`: The tip is distributed proportionally among staff.
     */
    staffDistributionMethod?: StaffDistributionMethod$1;
    /**
     * Revision number, which increments by 1 each time `tipSettings` object is
     * updated. To prevent conflicting changes, the current revision must be passed
     * when updating `tipSettings`. Ignored when creating a `tipSettings` object.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the tip settings were created in
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the tip settings were last updated
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Whether these are the default tip settings. Wix Tips automatically creates
     * the default settings during the app's installation. You can't delete these
     * default settings but you can update them. Wix Tips uses the default settings
     * to calculate tips, unless you specify other settings.
     * @readonly
     */
    default?: boolean | null;
    /**
     * ID of the app that has created the settings. See the list of app IDs for
     * [Wix business solutions](https://dev.wix.com/docs/rest/articles/getting-started/wix-business-solutions).
     */
    appId?: string | null;
    /**
     * Custom field data for the `tipSettings` object. Extended fields must be
     * configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$1;
}
/** @oneof */
interface TipSettingsIdentifierOneOf$1 {
    /**
     * ID of the [location](https://dev.wix.com/docs/rest/business-management/locations/location-object)
     * for which the tip settings apply.
     */
    locationId?: string | null;
    /**
     * ID of the payment terminal for which the tip settings apply. Wix Tips doesn't
     * validate the ID you provide.
     *
     * Max: 30 characters
     */
    paymentTerminalId?: string | null;
    /**
     * ID of the Wix user for whom the tip settings apply. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    userId?: string | null;
}
declare enum TipType$1 {
    /** There is no information about the tip type. */
    UNKNOWN_TIP_TYPE = "UNKNOWN_TIP_TYPE",
    /** The tip is calculated as a percentage of the subtotal of all related line items. */
    PERCENTAGE = "PERCENTAGE",
    /** The tip is a fixed amount. */
    AMOUNT = "AMOUNT"
}
interface Preset$1 {
    /**
     * Value of the preset tip choice that's displayed to customers in the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     * For example, `5`, `10`, and `15` percent or `1`, `3`, and `5` USD.
     *
     * Min: `0`
     */
    value?: number | null;
    /**
     * Whether this tip choice value is the dafault preset that's highlighted automatically in the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     *
     * Default: `false`
     */
    default?: boolean | null;
}
declare enum StaffDistributionMethod$1 {
    /** There is no information about the staff distribution method. */
    UNKNOWN_SPLIT_METHOD = "UNKNOWN_SPLIT_METHOD",
    /** All staff receive an equal amount of the tip. */
    EQUAL = "EQUAL",
    /** Staff receive a proportional amount of the tip. */
    PROPORTIONAL = "PROPORTIONAL"
}
interface ExtendedFields$1 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface QueryTipSettingsRequest$1 {
    /** WQL expression */
    query: QueryV2$1;
}
interface QueryV2$1 extends QueryV2PagingMethodOneOf$1 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$1;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$1[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf$1 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$1;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryTipSettingsResponse$1 {
    /** Retrieved `tipSettings` objects. */
    tipSettings?: TipSettings$1[];
    /** Metadate for the paged set of retrieved `tipSettings` objects. */
    pagingMetadata?: PagingMetadataV2$1;
}
interface PagingMetadataV2$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors$1;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateTipSettingsRequest$1 {
    /** Tip settings to update. */
    tipSettings: TipSettings$1;
}
interface UpdateTipSettingsResponse$1 {
    /** Updated tip settings. */
    tipSettings?: TipSettings$1;
}
interface CreateTipSettingsRequest$1 {
    /** Tip settings to create. */
    tipSettings: TipSettings$1;
}
interface CreateTipSettingsResponse$1 {
    /** Created tip settings. */
    tipSettings?: TipSettings$1;
}
interface CreateDefaultTipSettingsRequest$1 {
    /** Dafault tip settings to create. */
    tipSettings: TipSettings$1;
}
interface CreateDefaultTipSettingsResponse$1 {
    /** Created default tip settings. */
    tipSettings?: TipSettings$1;
}
interface DeleteTipSettingsRequest$1 {
    /** ID of the `tipSettings` object to delete. */
    tipSettingsId: string | null;
}
interface DeleteTipSettingsResponse$1 {
}
interface TipSettingsNonNullableFields$1 {
    tipType: TipType$1;
    staffDistributionMethod: StaffDistributionMethod$1;
}
interface QueryTipSettingsResponseNonNullableFields$1 {
    tipSettings: TipSettingsNonNullableFields$1[];
}
interface UpdateTipSettingsResponseNonNullableFields$1 {
    tipSettings?: TipSettingsNonNullableFields$1;
}
interface CreateTipSettingsResponseNonNullableFields$1 {
    tipSettings?: TipSettingsNonNullableFields$1;
}
interface CreateDefaultTipSettingsResponseNonNullableFields$1 {
    tipSettings?: TipSettingsNonNullableFields$1;
}

/**
 * Tip settings define how tips are calculated and distributed among staff. When
 * Wix Tips is installed, default settings are automatically created. You can't
 * delete these default settings but you can update them. Creating additional
 * settings allows business owners to customize tip screens for different payment
 * terminals or set specific presets for various products or services.
 */
interface TipSettings extends TipSettingsIdentifierOneOf {
    /**
     * ID of the [location](https://dev.wix.com/docs/rest/business-management/locations/location-object)
     * for which the tip settings apply.
     */
    locationId?: string | null;
    /**
     * ID of the payment terminal for which the tip settings apply. Wix Tips doesn't
     * validate the ID you provide.
     *
     * Max: 30 characters
     */
    paymentTerminalId?: string | null;
    /**
     * ID of the Wix user for whom the tip settings apply. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    userId?: string | null;
    /**
     * ID of the tip settings.
     * @readonly
     */
    _id?: string | null;
    /**
     * Tip type.
     *
     * Supported values:
     * + `UNKNOWN_TIP_TYPE`: There is no information about the tip type.
     * + `PERCENTAGE`: The tip is calculated as a percentage of the subtotal for all related line items.
     * + `AMOUNT`: The tip is a fixed amount.
     */
    tipType?: TipType;
    /**
     * Information about the tip choices that Wix Tips displays to customers during the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     *
     * Min: `1` preset
     * Max: `3` presets
     */
    presets?: Preset[];
    /**
     * Whether customer are allowed to tip during the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     *
     * Default: `true`
     */
    allowCustomerTip?: boolean | null;
    /**
     * Whether the business owners are given the option to add a tip during the
     * payment collection flow in their dashboard.
     *
     * Default: `true`
     */
    allowBusinessTipAtPayment?: boolean | null;
    /**
     * Whether customers can enter a custom tip amount. If set to `false`, customers
     * can only select a tip value from the available `presets` and can't enter a
     * custom amount.
     *
     * Default: `true`
     */
    allowCustomAmount?: boolean | null;
    /**
     * Whether business owners are allowed to edit tip distributions. If set to
     * `false`, owners can't edit distributions after they were created.
     *
     * Default: `true`
     */
    allowEditDistribution?: boolean | null;
    /**
     * How the tip is distributed among staff.
     *
     * Supported values:
     * `UNKNOWN_SPLIT_METHOD`: There is no information about the staff distribution method.
     * `EQUAL`: The tip is distributed equally among all staff.
     * `PROPORTIONAL`: The tip is distributed proportionally among staff.
     */
    staffDistributionMethod?: StaffDistributionMethod;
    /**
     * Revision number, which increments by 1 each time `tipSettings` object is
     * updated. To prevent conflicting changes, the current revision must be passed
     * when updating `tipSettings`. Ignored when creating a `tipSettings` object.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the tip settings were created in
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the tip settings were last updated
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Whether these are the default tip settings. Wix Tips automatically creates
     * the default settings during the app's installation. You can't delete these
     * default settings but you can update them. Wix Tips uses the default settings
     * to calculate tips, unless you specify other settings.
     * @readonly
     */
    default?: boolean | null;
    /**
     * ID of the app that has created the settings. See the list of app IDs for
     * [Wix business solutions](https://dev.wix.com/docs/rest/articles/getting-started/wix-business-solutions).
     */
    appId?: string | null;
    /**
     * Custom field data for the `tipSettings` object. Extended fields must be
     * configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
/** @oneof */
interface TipSettingsIdentifierOneOf {
    /**
     * ID of the [location](https://dev.wix.com/docs/rest/business-management/locations/location-object)
     * for which the tip settings apply.
     */
    locationId?: string | null;
    /**
     * ID of the payment terminal for which the tip settings apply. Wix Tips doesn't
     * validate the ID you provide.
     *
     * Max: 30 characters
     */
    paymentTerminalId?: string | null;
    /**
     * ID of the Wix user for whom the tip settings apply. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    userId?: string | null;
}
declare enum TipType {
    /** There is no information about the tip type. */
    UNKNOWN_TIP_TYPE = "UNKNOWN_TIP_TYPE",
    /** The tip is calculated as a percentage of the subtotal of all related line items. */
    PERCENTAGE = "PERCENTAGE",
    /** The tip is a fixed amount. */
    AMOUNT = "AMOUNT"
}
interface Preset {
    /**
     * Value of the preset tip choice that's displayed to customers in the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     * For example, `5`, `10`, and `15` percent or `1`, `3`, and `5` USD.
     *
     * Min: `0`
     */
    value?: number | null;
    /**
     * Whether this tip choice value is the dafault preset that's highlighted automatically in the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     *
     * Default: `false`
     */
    default?: boolean | null;
}
declare enum StaffDistributionMethod {
    /** There is no information about the staff distribution method. */
    UNKNOWN_SPLIT_METHOD = "UNKNOWN_SPLIT_METHOD",
    /** All staff receive an equal amount of the tip. */
    EQUAL = "EQUAL",
    /** Staff receive a proportional amount of the tip. */
    PROPORTIONAL = "PROPORTIONAL"
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface QueryTipSettingsRequest {
    /** WQL expression */
    query: QueryV2;
}
interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryTipSettingsResponse {
    /** Retrieved `tipSettings` objects. */
    tipSettings?: TipSettings[];
    /** Metadate for the paged set of retrieved `tipSettings` objects. */
    pagingMetadata?: PagingMetadataV2;
}
interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateTipSettingsRequest {
    /** Tip settings to update. */
    tipSettings: TipSettings;
}
interface UpdateTipSettingsResponse {
    /** Updated tip settings. */
    tipSettings?: TipSettings;
}
interface CreateTipSettingsRequest {
    /** Tip settings to create. */
    tipSettings: TipSettings;
}
interface CreateTipSettingsResponse {
    /** Created tip settings. */
    tipSettings?: TipSettings;
}
interface CreateDefaultTipSettingsRequest {
    /** Dafault tip settings to create. */
    tipSettings: TipSettings;
}
interface CreateDefaultTipSettingsResponse {
    /** Created default tip settings. */
    tipSettings?: TipSettings;
}
interface DeleteTipSettingsRequest {
    /** ID of the `tipSettings` object to delete. */
    tipSettingsId: string | null;
}
interface DeleteTipSettingsResponse {
}
interface TipSettingsNonNullableFields {
    tipType: TipType;
    staffDistributionMethod: StaffDistributionMethod;
}
interface QueryTipSettingsResponseNonNullableFields {
    tipSettings: TipSettingsNonNullableFields[];
}
interface UpdateTipSettingsResponseNonNullableFields {
    tipSettings?: TipSettingsNonNullableFields;
}
interface CreateTipSettingsResponseNonNullableFields {
    tipSettings?: TipSettingsNonNullableFields;
}
interface CreateDefaultTipSettingsResponseNonNullableFields {
    tipSettings?: TipSettingsNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function queryTipSettings(): __PublicMethodMetaInfo<'POST', {}, QueryTipSettingsRequest, QueryTipSettingsRequest$1, QueryTipSettingsResponse & QueryTipSettingsResponseNonNullableFields, QueryTipSettingsResponse$1 & QueryTipSettingsResponseNonNullableFields$1>;
declare function updateTipSettings(): __PublicMethodMetaInfo<'PATCH', {}, UpdateTipSettingsRequest, UpdateTipSettingsRequest$1, UpdateTipSettingsResponse & UpdateTipSettingsResponseNonNullableFields, UpdateTipSettingsResponse$1 & UpdateTipSettingsResponseNonNullableFields$1>;
declare function createTipSettings(): __PublicMethodMetaInfo<'POST', {}, CreateTipSettingsRequest, CreateTipSettingsRequest$1, CreateTipSettingsResponse & CreateTipSettingsResponseNonNullableFields, CreateTipSettingsResponse$1 & CreateTipSettingsResponseNonNullableFields$1>;
declare function createDefaultTipSettings(): __PublicMethodMetaInfo<'POST', {}, CreateDefaultTipSettingsRequest, CreateDefaultTipSettingsRequest$1, CreateDefaultTipSettingsResponse & CreateDefaultTipSettingsResponseNonNullableFields, CreateDefaultTipSettingsResponse$1 & CreateDefaultTipSettingsResponseNonNullableFields$1>;
declare function deleteTipSettings(): __PublicMethodMetaInfo<'DELETE', {
    tipSettingsId: string;
}, DeleteTipSettingsRequest, DeleteTipSettingsRequest$1, DeleteTipSettingsResponse, DeleteTipSettingsResponse$1>;

export { type __PublicMethodMetaInfo, createDefaultTipSettings, createTipSettings, deleteTipSettings, queryTipSettings, updateTipSettings };
