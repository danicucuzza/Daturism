interface LocalDeliveryOption$1 extends LocalDeliveryOptionConfigOneOf$1 {
    zipConfig?: ZipCodeConfig$1;
    radiusConfig?: RadiusConfig$1;
    customAreaConfig?: CustomAreaConfig$1;
    /** LocalDeliveryOptionId - unique identifier of local delivery option */
    id?: string | null;
    /** Area name of Local Delivery Option */
    areaName?: string | null;
    /**
     * Flat price of local delivery
     * @deprecated Flat price of local delivery
     * @targetRemovalDate 2025-01-12
     */
    rate?: string | null;
    /** Estimated delivery time description text */
    estimatedDeliveryTime?: string | null;
    /**
     * Minimum order total to be eligible for free delivery
     * @deprecated Minimum order total to be eligible for free delivery
     * @targetRemovalDate 2025-01-12
     */
    minimumFreeDeliveryOrderAmount?: number | null;
    /** List of countries with subdivisions */
    destinations?: Destination$1[];
    /**
     * Database revision of LocalDeliveryOption entity. Incremented on each modification
     * @readonly
     */
    revision?: string | null;
    scheduledDeliveryConfig?: ScheduledDelivery$1;
    /** at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates$1[];
    /**
     * Date and time the LocalDeliveryOption was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the LocalDeliveryOption was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** This local delivery is active for the following delivery regions. */
    deliveryRegionIds?: string[];
}
/** @oneof */
interface LocalDeliveryOptionConfigOneOf$1 {
    zipConfig?: ZipCodeConfig$1;
    radiusConfig?: RadiusConfig$1;
    customAreaConfig?: CustomAreaConfig$1;
}
interface Destination$1 {
    /** Country ISO code */
    code?: string;
    /** List of subdivisions, empty means all */
    subdivisions?: string[];
}
interface ZipCodeConfig$1 {
    /** List of ZipCodes and ZipCode regexes. Examples: 10001, 10002 or 1000* */
    zipCodes?: string[];
}
interface RadiusConfig$1 {
    /** Delivery-from address */
    address?: LocalDeliveryAddress$1;
    /** Delivery circle's radius */
    radius?: number;
    /**
     * Radius' unit, taken from site properties
     * @readonly
     */
    lengthUnit?: LengthUnit$1;
}
interface LocalDeliveryAddress$1 {
    /** A string containing the human-readable address of this location */
    formattedAddress?: string | null;
    /** coordinates of the physical address */
    geocode?: AddressLocation$1;
}
interface AddressLocation$1 {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
declare enum LengthUnit$1 {
    /** Length unit can't be classified, due to an error */
    UNSPECIFIED_LENGTH_UNIT = "UNSPECIFIED_LENGTH_UNIT",
    /** Kilometers */
    KM = "KM",
    /** Miles */
    MI = "MI"
}
interface CustomAreaConfig$1 {
    /** Geocodes of the polygon defining the delivery area. */
    geocodes?: AddressLocation$1[];
}
interface ScheduledDelivery$1 {
    /**
     * Days config which contain days when delivery is enabled with it's time slots
     * @deprecated Days config which contain days when delivery is enabled with it's time slots
     * @replacedBy time_windows
     * @targetRemovalDate 2025-01-01
     */
    days?: Days$1;
    /** Amount of days before first delivery option date */
    handlingDays?: number | null;
    /** Cut off time after which first delivery option would be for next day */
    cutOffTime?: TimePoint$1;
    /** availability times configuration. */
    timeWindows?: TimeWindow$1[];
}
interface Days$1 {
    monday?: DaySlot$1;
    tuesday?: DaySlot$1;
    wednesday?: DaySlot$1;
    thursday?: DaySlot$1;
    friday?: DaySlot$1;
    saturday?: DaySlot$1;
    sunday?: DaySlot$1;
}
interface DaySlot$1 {
    /** Shows whether this day slot is enabled for delivery */
    enabledForDelivery?: boolean | null;
    /** Time slots for scheduled delivery during day */
    timeSlots?: TimeSlot$1[];
}
interface TimeSlot$1 {
    /** Starting time point of time slot */
    from?: TimePoint$1;
    /** End time point of time slot */
    to?: TimePoint$1;
}
interface TimePoint$1 {
    /** Hours in format 0-23 */
    hours?: number | null;
    /** Minutes 0-59 */
    minutes?: number | null;
}
interface TimeWindow$1 {
    /** The day of week this availability relates to. */
    day?: DayOfWeek$1;
    /** The start time in time of day representation. */
    start?: TimeOfDay$1;
    /** The end time in time of day representation. */
    end?: TimeOfDay$1;
}
declare enum DayOfWeek$1 {
    /** Monday. */
    MON = "MON",
    /** Tuesday. */
    TUE = "TUE",
    /** Wednesday. */
    WED = "WED",
    /** Thursday. */
    THU = "THU",
    /** Friday. */
    FRI = "FRI",
    /** Saturday. */
    SAT = "SAT",
    /** Sunday. */
    SUN = "SUN"
}
interface TimeOfDay$1 {
    /** Hours */
    hours?: number;
    /** Minutes */
    minutes?: number;
}
interface ConditionalRates$1 {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition$1[];
    amount?: string;
}
interface Condition$1 {
    type?: ConditionType$1;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator$1;
}
declare enum ConditionType$1 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
declare enum LogicalOperator$1 {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
interface CreateLocalDeliveryOptionRequest$1 {
    localDeliveryOption: LocalDeliveryOption$1;
}
interface CreateLocalDeliveryOptionResponse$1 {
    localDeliveryOption?: LocalDeliveryOption$1;
}
interface GetLocalDeliveryOptionRequest$1 {
    /**
     * @deprecated
     * @targetRemovalDate 2025-01-12
     */
    id?: string;
    localDeliveryOptionId: string;
}
interface GetLocalDeliveryOptionResponse$1 {
    localDeliveryOption?: LocalDeliveryOption$1;
}
interface ListLocalDeliveryOptionsRequest$1 {
    externalId: string;
}
interface ListLocalDeliveryOptionsResponse$1 {
    localDeliveryOptions?: LocalDeliveryOption$1[];
}
interface QueryLocalDeliveryOptionsRequest$1 {
    /** WQL expression */
    query: QueryV2$1;
}
interface QueryV2$1 extends QueryV2PagingMethodOneOf$1 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$1;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$1[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf$1 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$1;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryLocalDeliveryOptionsResponse$1 {
    /** Retrieved local delivery options. */
    localDeliveryOptions?: LocalDeliveryOption$1[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$1;
}
interface CursorPagingMetadata$1 {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$1;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateLocalDeliveryOptionRequest$1 {
    localDeliveryOption: LocalDeliveryOption$1;
}
interface UpdateLocalDeliveryOptionResponse$1 {
    localDeliveryOption?: LocalDeliveryOption$1;
}
interface DeleteLocalDeliveryOptionRequest$1 {
    /**
     * @deprecated
     * @targetRemovalDate 2025-01-12
     */
    id?: string;
    localDeliveryOptionId: string;
}
interface DeleteLocalDeliveryOptionResponse$1 {
}
interface BulkCreateLocalDeliveryOptionRequest$1 {
    localDeliveryOptions: LocalDeliveryOption$1[];
}
interface BulkCreateLocalDeliveryOptionResponse$1 {
    localDeliveryOptions?: LocalDeliveryOption$1[];
    errors?: LocalDeliveryOptionError$1[];
}
interface LocalDeliveryOptionError$1 {
    id?: string;
    error?: string;
}
interface BulkUpdateLocalDeliveryOptionRequest$1 {
    localDeliveryOptions: LocalDeliveryOption$1[];
}
interface BulkUpdateLocalDeliveryOptionResponse$1 {
    localDeliveryOptions?: LocalDeliveryOption$1[];
    errors?: LocalDeliveryOptionError$1[];
}
interface BulkDeleteLocalDeliveryOptionRequest$1 {
    ids: string[];
}
interface BulkDeleteLocalDeliveryOptionResponse$1 {
}
interface AddDeliveryRegionRequest$1 {
    deliveryRegionId: string;
    localDeliveryOptionId: string;
    /** Revision of the PickupLocation */
    revision?: string | null;
}
interface AddDeliveryRegionResponse$1 {
    localDeliveryOption?: LocalDeliveryOption$1;
}
interface RemoveDeliveryRegionRequest$1 {
    deliveryRegionId: string;
    localDeliveryOptionId: string;
    /** Revision of the PickupLocation */
    revision?: string | null;
}
interface RemoveDeliveryRegionResponse$1 {
    localDeliveryOption?: LocalDeliveryOption$1;
}
interface ZipCodeConfigNonNullableFields$1 {
    zipCodes: string[];
}
interface RadiusConfigNonNullableFields$1 {
    radius: number;
    lengthUnit: LengthUnit$1;
}
interface DestinationNonNullableFields$1 {
    code: string;
    subdivisions: string[];
}
interface TimeOfDayNonNullableFields$1 {
    hours: number;
    minutes: number;
}
interface TimeWindowNonNullableFields$1 {
    day: DayOfWeek$1;
    start?: TimeOfDayNonNullableFields$1;
    end?: TimeOfDayNonNullableFields$1;
}
interface ScheduledDeliveryNonNullableFields$1 {
    timeWindows: TimeWindowNonNullableFields$1[];
}
interface ConditionNonNullableFields$1 {
    type: ConditionType$1;
    value: string;
    operator: LogicalOperator$1;
}
interface ConditionalRatesNonNullableFields$1 {
    conditions: ConditionNonNullableFields$1[];
    amount: string;
}
interface LocalDeliveryOptionNonNullableFields$1 {
    zipConfig?: ZipCodeConfigNonNullableFields$1;
    radiusConfig?: RadiusConfigNonNullableFields$1;
    destinations: DestinationNonNullableFields$1[];
    scheduledDeliveryConfig?: ScheduledDeliveryNonNullableFields$1;
    rates: ConditionalRatesNonNullableFields$1[];
    deliveryRegionIds: string[];
}
interface CreateLocalDeliveryOptionResponseNonNullableFields$1 {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields$1;
}
interface GetLocalDeliveryOptionResponseNonNullableFields$1 {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields$1;
}
interface ListLocalDeliveryOptionsResponseNonNullableFields$1 {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields$1[];
}
interface QueryLocalDeliveryOptionsResponseNonNullableFields$1 {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields$1[];
}
interface UpdateLocalDeliveryOptionResponseNonNullableFields$1 {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields$1;
}
interface LocalDeliveryOptionErrorNonNullableFields$1 {
    id: string;
    error: string;
}
interface BulkCreateLocalDeliveryOptionResponseNonNullableFields$1 {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields$1[];
    errors: LocalDeliveryOptionErrorNonNullableFields$1[];
}
interface BulkUpdateLocalDeliveryOptionResponseNonNullableFields$1 {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields$1[];
    errors: LocalDeliveryOptionErrorNonNullableFields$1[];
}
interface AddDeliveryRegionResponseNonNullableFields$1 {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields$1;
}
interface RemoveDeliveryRegionResponseNonNullableFields$1 {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields$1;
}

interface LocalDeliveryOption extends LocalDeliveryOptionConfigOneOf {
    zipConfig?: ZipCodeConfig;
    radiusConfig?: RadiusConfig;
    customAreaConfig?: CustomAreaConfig;
    /** LocalDeliveryOptionId - unique identifier of local delivery option */
    _id?: string | null;
    /** Area name of Local Delivery Option */
    areaName?: string | null;
    /**
     * Flat price of local delivery
     * @deprecated Flat price of local delivery
     * @targetRemovalDate 2025-01-12
     */
    rate?: string | null;
    /** Estimated delivery time description text */
    estimatedDeliveryTime?: string | null;
    /**
     * Minimum order total to be eligible for free delivery
     * @deprecated Minimum order total to be eligible for free delivery
     * @targetRemovalDate 2025-01-12
     */
    minimumFreeDeliveryOrderAmount?: number | null;
    /** List of countries with subdivisions */
    destinations?: Destination[];
    /**
     * Database revision of LocalDeliveryOption entity. Incremented on each modification
     * @readonly
     */
    revision?: string | null;
    scheduledDeliveryConfig?: ScheduledDelivery;
    /** at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates[];
    /**
     * Date and time the LocalDeliveryOption was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the LocalDeliveryOption was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** This local delivery is active for the following delivery regions. */
    deliveryRegionIds?: string[];
}
/** @oneof */
interface LocalDeliveryOptionConfigOneOf {
    zipConfig?: ZipCodeConfig;
    radiusConfig?: RadiusConfig;
    customAreaConfig?: CustomAreaConfig;
}
interface Destination {
    /** Country ISO code */
    code?: string;
    /** List of subdivisions, empty means all */
    subdivisions?: string[];
}
interface ZipCodeConfig {
    /** List of ZipCodes and ZipCode regexes. Examples: 10001, 10002 or 1000* */
    zipCodes?: string[];
}
interface RadiusConfig {
    /** Delivery-from address */
    address?: LocalDeliveryAddress;
    /** Delivery circle's radius */
    radius?: number;
    /**
     * Radius' unit, taken from site properties
     * @readonly
     */
    lengthUnit?: LengthUnit;
}
interface LocalDeliveryAddress {
    /** A string containing the human-readable address of this location */
    formatted?: string | null;
    /** coordinates of the physical address */
    location?: AddressLocation;
}
interface AddressLocation {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
declare enum LengthUnit {
    /** Length unit can't be classified, due to an error */
    UNSPECIFIED_LENGTH_UNIT = "UNSPECIFIED_LENGTH_UNIT",
    /** Kilometers */
    KM = "KM",
    /** Miles */
    MI = "MI"
}
interface CustomAreaConfig {
    /** Geocodes of the polygon defining the delivery area. */
    geocodes?: AddressLocation[];
}
interface ScheduledDelivery {
    /**
     * Days config which contain days when delivery is enabled with it's time slots
     * @deprecated Days config which contain days when delivery is enabled with it's time slots
     * @replacedBy time_windows
     * @targetRemovalDate 2025-01-01
     */
    days?: Days;
    /** Amount of days before first delivery option date */
    handlingDays?: number | null;
    /** Cut off time after which first delivery option would be for next day */
    cutOffTime?: TimePoint;
    /** availability times configuration. */
    timeWindows?: TimeWindow[];
}
interface Days {
    monday?: DaySlot;
    tuesday?: DaySlot;
    wednesday?: DaySlot;
    thursday?: DaySlot;
    friday?: DaySlot;
    saturday?: DaySlot;
    sunday?: DaySlot;
}
interface DaySlot {
    /** Shows whether this day slot is enabled for delivery */
    enabledForDelivery?: boolean | null;
    /** Time slots for scheduled delivery during day */
    timeSlots?: TimeSlot[];
}
interface TimeSlot {
    /** Starting time point of time slot */
    from?: TimePoint;
    /** End time point of time slot */
    to?: TimePoint;
}
interface TimePoint {
    /** Hours in format 0-23 */
    hours?: number | null;
    /** Minutes 0-59 */
    minutes?: number | null;
}
interface TimeWindow {
    /** The day of week this availability relates to. */
    day?: DayOfWeek;
    /** The start time in time of day representation. */
    start?: TimeOfDay;
    /** The end time in time of day representation. */
    end?: TimeOfDay;
}
declare enum DayOfWeek {
    /** Monday. */
    MON = "MON",
    /** Tuesday. */
    TUE = "TUE",
    /** Wednesday. */
    WED = "WED",
    /** Thursday. */
    THU = "THU",
    /** Friday. */
    FRI = "FRI",
    /** Saturday. */
    SAT = "SAT",
    /** Sunday. */
    SUN = "SUN"
}
interface TimeOfDay {
    /** Hours */
    hours?: number;
    /** Minutes */
    minutes?: number;
}
interface ConditionalRates {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition[];
    amount?: string;
}
interface Condition {
    type?: ConditionType;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator;
}
declare enum ConditionType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
declare enum LogicalOperator {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
interface CreateLocalDeliveryOptionRequest {
    localDeliveryOption: LocalDeliveryOption;
}
interface CreateLocalDeliveryOptionResponse {
    localDeliveryOption?: LocalDeliveryOption;
}
interface GetLocalDeliveryOptionRequest {
    /**
     * @deprecated
     * @targetRemovalDate 2025-01-12
     */
    _id?: string;
    localDeliveryOptionId: string;
}
interface GetLocalDeliveryOptionResponse {
    localDeliveryOption?: LocalDeliveryOption;
}
interface ListLocalDeliveryOptionsRequest {
    externalId: string;
}
interface ListLocalDeliveryOptionsResponse {
    localDeliveryOptions?: LocalDeliveryOption[];
}
interface QueryLocalDeliveryOptionsRequest {
    /** WQL expression */
    query: QueryV2;
}
interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryLocalDeliveryOptionsResponse {
    /** Retrieved local delivery options. */
    localDeliveryOptions?: LocalDeliveryOption[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateLocalDeliveryOptionRequest {
    localDeliveryOption: LocalDeliveryOption;
}
interface UpdateLocalDeliveryOptionResponse {
    localDeliveryOption?: LocalDeliveryOption;
}
interface DeleteLocalDeliveryOptionRequest {
    /**
     * @deprecated
     * @targetRemovalDate 2025-01-12
     */
    _id?: string;
    localDeliveryOptionId: string;
}
interface DeleteLocalDeliveryOptionResponse {
}
interface BulkCreateLocalDeliveryOptionRequest {
    localDeliveryOptions: LocalDeliveryOption[];
}
interface BulkCreateLocalDeliveryOptionResponse {
    localDeliveryOptions?: LocalDeliveryOption[];
    errors?: LocalDeliveryOptionError[];
}
interface LocalDeliveryOptionError {
    _id?: string;
    error?: string;
}
interface BulkUpdateLocalDeliveryOptionRequest {
    localDeliveryOptions: LocalDeliveryOption[];
}
interface BulkUpdateLocalDeliveryOptionResponse {
    localDeliveryOptions?: LocalDeliveryOption[];
    errors?: LocalDeliveryOptionError[];
}
interface BulkDeleteLocalDeliveryOptionRequest {
    ids: string[];
}
interface BulkDeleteLocalDeliveryOptionResponse {
}
interface AddDeliveryRegionRequest {
    deliveryRegionId: string;
    localDeliveryOptionId: string;
    /** Revision of the PickupLocation */
    revision?: string | null;
}
interface AddDeliveryRegionResponse {
    localDeliveryOption?: LocalDeliveryOption;
}
interface RemoveDeliveryRegionRequest {
    deliveryRegionId: string;
    localDeliveryOptionId: string;
    /** Revision of the PickupLocation */
    revision?: string | null;
}
interface RemoveDeliveryRegionResponse {
    localDeliveryOption?: LocalDeliveryOption;
}
interface ZipCodeConfigNonNullableFields {
    zipCodes: string[];
}
interface RadiusConfigNonNullableFields {
    radius: number;
    lengthUnit: LengthUnit;
}
interface DestinationNonNullableFields {
    code: string;
    subdivisions: string[];
}
interface TimeOfDayNonNullableFields {
    hours: number;
    minutes: number;
}
interface TimeWindowNonNullableFields {
    day: DayOfWeek;
    start?: TimeOfDayNonNullableFields;
    end?: TimeOfDayNonNullableFields;
}
interface ScheduledDeliveryNonNullableFields {
    timeWindows: TimeWindowNonNullableFields[];
}
interface ConditionNonNullableFields {
    type: ConditionType;
    value: string;
    operator: LogicalOperator;
}
interface ConditionalRatesNonNullableFields {
    conditions: ConditionNonNullableFields[];
    amount: string;
}
interface LocalDeliveryOptionNonNullableFields {
    zipConfig?: ZipCodeConfigNonNullableFields;
    radiusConfig?: RadiusConfigNonNullableFields;
    destinations: DestinationNonNullableFields[];
    scheduledDeliveryConfig?: ScheduledDeliveryNonNullableFields;
    rates: ConditionalRatesNonNullableFields[];
    deliveryRegionIds: string[];
}
interface CreateLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface GetLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface ListLocalDeliveryOptionsResponseNonNullableFields {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields[];
}
interface QueryLocalDeliveryOptionsResponseNonNullableFields {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields[];
}
interface UpdateLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface LocalDeliveryOptionErrorNonNullableFields {
    _id: string;
    error: string;
}
interface BulkCreateLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields[];
    errors: LocalDeliveryOptionErrorNonNullableFields[];
}
interface BulkUpdateLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields[];
    errors: LocalDeliveryOptionErrorNonNullableFields[];
}
interface AddDeliveryRegionResponseNonNullableFields {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface RemoveDeliveryRegionResponseNonNullableFields {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createLocalDeliveryOption(): __PublicMethodMetaInfo<'POST', {}, CreateLocalDeliveryOptionRequest, CreateLocalDeliveryOptionRequest$1, CreateLocalDeliveryOptionResponse & CreateLocalDeliveryOptionResponseNonNullableFields, CreateLocalDeliveryOptionResponse$1 & CreateLocalDeliveryOptionResponseNonNullableFields$1>;
declare function getLocalDeliveryOption(): __PublicMethodMetaInfo<'GET', {
    localDeliveryOptionId: string;
}, GetLocalDeliveryOptionRequest, GetLocalDeliveryOptionRequest$1, GetLocalDeliveryOptionResponse & GetLocalDeliveryOptionResponseNonNullableFields, GetLocalDeliveryOptionResponse$1 & GetLocalDeliveryOptionResponseNonNullableFields$1>;
declare function listLocalDeliveryOptions(): __PublicMethodMetaInfo<'GET', {}, ListLocalDeliveryOptionsRequest, ListLocalDeliveryOptionsRequest$1, ListLocalDeliveryOptionsResponse & ListLocalDeliveryOptionsResponseNonNullableFields, ListLocalDeliveryOptionsResponse$1 & ListLocalDeliveryOptionsResponseNonNullableFields$1>;
declare function queryLocalDeliveryOptions(): __PublicMethodMetaInfo<'POST', {}, QueryLocalDeliveryOptionsRequest, QueryLocalDeliveryOptionsRequest$1, QueryLocalDeliveryOptionsResponse & QueryLocalDeliveryOptionsResponseNonNullableFields, QueryLocalDeliveryOptionsResponse$1 & QueryLocalDeliveryOptionsResponseNonNullableFields$1>;
declare function updateLocalDeliveryOption(): __PublicMethodMetaInfo<'PATCH', {
    localDeliveryOptionId: string;
}, UpdateLocalDeliveryOptionRequest, UpdateLocalDeliveryOptionRequest$1, UpdateLocalDeliveryOptionResponse & UpdateLocalDeliveryOptionResponseNonNullableFields, UpdateLocalDeliveryOptionResponse$1 & UpdateLocalDeliveryOptionResponseNonNullableFields$1>;
declare function deleteLocalDeliveryOption(): __PublicMethodMetaInfo<'DELETE', {
    localDeliveryOptionId: string;
}, DeleteLocalDeliveryOptionRequest, DeleteLocalDeliveryOptionRequest$1, DeleteLocalDeliveryOptionResponse, DeleteLocalDeliveryOptionResponse$1>;
declare function bulkCreateLocalDeliveryOption(): __PublicMethodMetaInfo<'POST', {}, BulkCreateLocalDeliveryOptionRequest, BulkCreateLocalDeliveryOptionRequest$1, BulkCreateLocalDeliveryOptionResponse & BulkCreateLocalDeliveryOptionResponseNonNullableFields, BulkCreateLocalDeliveryOptionResponse$1 & BulkCreateLocalDeliveryOptionResponseNonNullableFields$1>;
declare function bulkUpdateLocalDeliveryOption(): __PublicMethodMetaInfo<'PATCH', {}, BulkUpdateLocalDeliveryOptionRequest, BulkUpdateLocalDeliveryOptionRequest$1, BulkUpdateLocalDeliveryOptionResponse & BulkUpdateLocalDeliveryOptionResponseNonNullableFields, BulkUpdateLocalDeliveryOptionResponse$1 & BulkUpdateLocalDeliveryOptionResponseNonNullableFields$1>;
declare function bulkDeleteLocalDeliveryOption(): __PublicMethodMetaInfo<'DELETE', {}, BulkDeleteLocalDeliveryOptionRequest, BulkDeleteLocalDeliveryOptionRequest$1, BulkDeleteLocalDeliveryOptionResponse, BulkDeleteLocalDeliveryOptionResponse$1>;
declare function addDeliveryRegion(): __PublicMethodMetaInfo<'POST', {}, AddDeliveryRegionRequest, AddDeliveryRegionRequest$1, AddDeliveryRegionResponse & AddDeliveryRegionResponseNonNullableFields, AddDeliveryRegionResponse$1 & AddDeliveryRegionResponseNonNullableFields$1>;
declare function removeDeliveryRegion(): __PublicMethodMetaInfo<'POST', {}, RemoveDeliveryRegionRequest, RemoveDeliveryRegionRequest$1, RemoveDeliveryRegionResponse & RemoveDeliveryRegionResponseNonNullableFields, RemoveDeliveryRegionResponse$1 & RemoveDeliveryRegionResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, addDeliveryRegion, bulkCreateLocalDeliveryOption, bulkDeleteLocalDeliveryOption, bulkUpdateLocalDeliveryOption, createLocalDeliveryOption, deleteLocalDeliveryOption, getLocalDeliveryOption, listLocalDeliveryOptions, queryLocalDeliveryOptions, removeDeliveryRegion, updateLocalDeliveryOption };
