type HostModule<T, H extends Host> = {
    __type: 'host';
    create(host: H): T;
};
type HostModuleAPI<T extends HostModule<any, any>> = T extends HostModule<infer U, any> ? U : never;
type Host<Environment = unknown> = {
    channel: {
        observeState(callback: (props: unknown, environment: Environment) => unknown): {
            disconnect: () => void;
        } | Promise<{
            disconnect: () => void;
        }>;
    };
    environment?: Environment;
    /**
     * Optional name of the environment, use for logging
     */
    name?: string;
    /**
     * Optional bast url to use for API requests, for example `www.wixapis.com`
     */
    apiBaseUrl?: string;
    /**
     * Possible data to be provided by every host, for cross cutting concerns
     * like internationalization, billing, etc.
     */
    essentials?: {
        /**
         * The language of the currently viewed session
         */
        language?: string;
        /**
         * The locale of the currently viewed session
         */
        locale?: string;
        /**
         * Any headers that should be passed through to the API requests
         */
        passThroughHeaders?: Record<string, string>;
    };
};

type RESTFunctionDescriptor<T extends (...args: any[]) => any = (...args: any[]) => any> = (httpClient: HttpClient) => T;
interface HttpClient {
    request<TResponse, TData = any>(req: RequestOptionsFactory<TResponse, TData>): Promise<HttpResponse<TResponse>>;
    fetchWithAuth: typeof fetch;
    wixAPIFetch: (relativeUrl: string, options: RequestInit) => Promise<Response>;
    getActiveToken?: () => string | undefined;
}
type RequestOptionsFactory<TResponse = any, TData = any> = (context: any) => RequestOptions<TResponse, TData>;
type HttpResponse<T = any> = {
    data: T;
    status: number;
    statusText: string;
    headers: any;
    request?: any;
};
type RequestOptions<_TResponse = any, Data = any> = {
    method: 'POST' | 'GET' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS';
    url: string;
    data?: Data;
    params?: URLSearchParams;
} & APIMetadata;
type APIMetadata = {
    methodFqn?: string;
    entityFqdn?: string;
    packageName?: string;
};
type BuildRESTFunction<T extends RESTFunctionDescriptor> = T extends RESTFunctionDescriptor<infer U> ? U : never;
type EventDefinition<Payload = unknown, Type extends string = string> = {
    __type: 'event-definition';
    type: Type;
    isDomainEvent?: boolean;
    transformations?: (envelope: unknown) => Payload;
    __payload: Payload;
};
declare function EventDefinition<Type extends string>(type: Type, isDomainEvent?: boolean, transformations?: (envelope: any) => unknown): <Payload = unknown>() => EventDefinition<Payload, Type>;
type EventHandler<T extends EventDefinition> = (payload: T['__payload']) => void | Promise<void>;
type BuildEventDefinition<T extends EventDefinition<any, string>> = (handler: EventHandler<T>) => void;

type ServicePluginMethodInput = {
    request: any;
    metadata: any;
};
type ServicePluginContract = Record<string, (payload: ServicePluginMethodInput) => unknown | Promise<unknown>>;
type ServicePluginMethodMetadata = {
    name: string;
    primaryHttpMappingPath: string;
    transformations: {
        fromREST: (...args: unknown[]) => ServicePluginMethodInput;
        toREST: (...args: unknown[]) => unknown;
    };
};
type ServicePluginDefinition<Contract extends ServicePluginContract> = {
    __type: 'service-plugin-definition';
    componentType: string;
    methods: ServicePluginMethodMetadata[];
    __contract: Contract;
};
declare function ServicePluginDefinition<Contract extends ServicePluginContract>(componentType: string, methods: ServicePluginMethodMetadata[]): ServicePluginDefinition<Contract>;
type BuildServicePluginDefinition<T extends ServicePluginDefinition<any>> = (implementation: T['__contract']) => void;
declare const SERVICE_PLUGIN_ERROR_TYPE = "wix_spi_error";

type RequestContext = {
    isSSR: boolean;
    host: string;
    protocol?: string;
};
type ResponseTransformer = (data: any, headers?: any) => any;
/**
 * Ambassador request options types are copied mostly from AxiosRequestConfig.
 * They are copied and not imported to reduce the amount of dependencies (to reduce install time).
 * https://github.com/axios/axios/blob/3f53eb6960f05a1f88409c4b731a40de595cb825/index.d.ts#L307-L315
 */
type Method = 'get' | 'GET' | 'delete' | 'DELETE' | 'head' | 'HEAD' | 'options' | 'OPTIONS' | 'post' | 'POST' | 'put' | 'PUT' | 'patch' | 'PATCH' | 'purge' | 'PURGE' | 'link' | 'LINK' | 'unlink' | 'UNLINK';
type AmbassadorRequestOptions<T = any> = {
    _?: T;
    url?: string;
    method?: Method;
    params?: any;
    data?: any;
    transformResponse?: ResponseTransformer | ResponseTransformer[];
};
type AmbassadorFactory<Request, Response> = (payload: Request) => ((context: RequestContext) => AmbassadorRequestOptions<Response>) & {
    __isAmbassador: boolean;
};
type AmbassadorFunctionDescriptor<Request = any, Response = any> = AmbassadorFactory<Request, Response>;
type BuildAmbassadorFunction<T extends AmbassadorFunctionDescriptor> = T extends AmbassadorFunctionDescriptor<infer Request, infer Response> ? (req: Request) => Promise<Response> : never;

declare global {
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- It has to be an `interface` so that it can be merged.
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}

declare const emptyObjectSymbol: unique symbol;

/**
Represents a strictly empty plain object, the `{}` value.

When you annotate something as the type `{}`, it can be anything except `null` and `undefined`. This means that you cannot use `{}` to represent an empty plain object ([read more](https://stackoverflow.com/questions/47339869/typescript-empty-object-and-any-difference/52193484#52193484)).

@example
```
import type {EmptyObject} from 'type-fest';

// The following illustrates the problem with `{}`.
const foo1: {} = {}; // Pass
const foo2: {} = []; // Pass
const foo3: {} = 42; // Pass
const foo4: {} = {a: 1}; // Pass

// With `EmptyObject` only the first case is valid.
const bar1: EmptyObject = {}; // Pass
const bar2: EmptyObject = 42; // Fail
const bar3: EmptyObject = []; // Fail
const bar4: EmptyObject = {a: 1}; // Fail
```

Unfortunately, `Record<string, never>`, `Record<keyof any, never>` and `Record<never, never>` do not work. See {@link https://github.com/sindresorhus/type-fest/issues/395 #395}.

@category Object
*/
type EmptyObject = {[emptyObjectSymbol]?: never};

/**
Returns a boolean for whether the two given types are equal.

@link https://github.com/microsoft/TypeScript/issues/27024#issuecomment-421529650
@link https://stackoverflow.com/questions/68961864/how-does-the-equals-work-in-typescript/68963796#68963796

Use-cases:
- If you want to make a conditional branch based on the result of a comparison of two types.

@example
```
import type {IsEqual} from 'type-fest';

// This type returns a boolean for whether the given array includes the given item.
// `IsEqual` is used to compare the given array at position 0 and the given item and then return true if they are equal.
type Includes<Value extends readonly any[], Item> =
	Value extends readonly [Value[0], ...infer rest]
		? IsEqual<Value[0], Item> extends true
			? true
			: Includes<rest, Item>
		: false;
```

@category Type Guard
@category Utilities
*/
type IsEqual<A, B> =
	(<G>() => G extends A ? 1 : 2) extends
	(<G>() => G extends B ? 1 : 2)
		? true
		: false;

/**
Filter out keys from an object.

Returns `never` if `Exclude` is strictly equal to `Key`.
Returns `never` if `Key` extends `Exclude`.
Returns `Key` otherwise.

@example
```
type Filtered = Filter<'foo', 'foo'>;
//=> never
```

@example
```
type Filtered = Filter<'bar', string>;
//=> never
```

@example
```
type Filtered = Filter<'bar', 'foo'>;
//=> 'bar'
```

@see {Except}
*/
type Filter<KeyType, ExcludeType> = IsEqual<KeyType, ExcludeType> extends true ? never : (KeyType extends ExcludeType ? never : KeyType);

type ExceptOptions = {
	/**
	Disallow assigning non-specified properties.

	Note that any omitted properties in the resulting type will be present in autocomplete as `undefined`.

	@default false
	*/
	requireExactProps?: boolean;
};

/**
Create a type from an object type without certain keys.

We recommend setting the `requireExactProps` option to `true`.

This type is a stricter version of [`Omit`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-5.html#the-omit-helper-type). The `Omit` type does not restrict the omitted keys to be keys present on the given type, while `Except` does. The benefits of a stricter type are avoiding typos and allowing the compiler to pick up on rename refactors automatically.

This type was proposed to the TypeScript team, which declined it, saying they prefer that libraries implement stricter versions of the built-in types ([microsoft/TypeScript#30825](https://github.com/microsoft/TypeScript/issues/30825#issuecomment-523668235)).

@example
```
import type {Except} from 'type-fest';

type Foo = {
	a: number;
	b: string;
};

type FooWithoutA = Except<Foo, 'a'>;
//=> {b: string}

const fooWithoutA: FooWithoutA = {a: 1, b: '2'};
//=> errors: 'a' does not exist in type '{ b: string; }'

type FooWithoutB = Except<Foo, 'b', {requireExactProps: true}>;
//=> {a: number} & Partial<Record<"b", never>>

const fooWithoutB: FooWithoutB = {a: 1, b: '2'};
//=> errors at 'b': Type 'string' is not assignable to type 'undefined'.
```

@category Object
*/
type Except<ObjectType, KeysType extends keyof ObjectType, Options extends ExceptOptions = {requireExactProps: false}> = {
	[KeyType in keyof ObjectType as Filter<KeyType, KeysType>]: ObjectType[KeyType];
} & (Options['requireExactProps'] extends true
	? Partial<Record<KeysType, never>>
	: {});

/**
Returns a boolean for whether the given type is `never`.

@link https://github.com/microsoft/TypeScript/issues/31751#issuecomment-498526919
@link https://stackoverflow.com/a/53984913/10292952
@link https://www.zhenghao.io/posts/ts-never

Useful in type utilities, such as checking if something does not occur.

@example
```
import type {IsNever, And} from 'type-fest';

// https://github.com/andnp/SimplyTyped/blob/master/src/types/strings.ts
type AreStringsEqual<A extends string, B extends string> =
	And<
		IsNever<Exclude<A, B>> extends true ? true : false,
		IsNever<Exclude<B, A>> extends true ? true : false
	>;

type EndIfEqual<I extends string, O extends string> =
	AreStringsEqual<I, O> extends true
		? never
		: void;

function endIfEqual<I extends string, O extends string>(input: I, output: O): EndIfEqual<I, O> {
	if (input === output) {
		process.exit(0);
	}
}

endIfEqual('abc', 'abc');
//=> never

endIfEqual('abc', '123');
//=> void
```

@category Type Guard
@category Utilities
*/
type IsNever<T> = [T] extends [never] ? true : false;

/**
An if-else-like type that resolves depending on whether the given type is `never`.

@see {@link IsNever}

@example
```
import type {IfNever} from 'type-fest';

type ShouldBeTrue = IfNever<never>;
//=> true

type ShouldBeBar = IfNever<'not never', 'foo', 'bar'>;
//=> 'bar'
```

@category Type Guard
@category Utilities
*/
type IfNever<T, TypeIfNever = true, TypeIfNotNever = false> = (
	IsNever<T> extends true ? TypeIfNever : TypeIfNotNever
);

/**
Extract the keys from a type where the value type of the key extends the given `Condition`.

Internally this is used for the `ConditionalPick` and `ConditionalExcept` types.

@example
```
import type {ConditionalKeys} from 'type-fest';

interface Example {
	a: string;
	b: string | number;
	c?: string;
	d: {};
}

type StringKeysOnly = ConditionalKeys<Example, string>;
//=> 'a'
```

To support partial types, make sure your `Condition` is a union of undefined (for example, `string | undefined`) as demonstrated below.

@example
```
import type {ConditionalKeys} from 'type-fest';

type StringKeysAndUndefined = ConditionalKeys<Example, string | undefined>;
//=> 'a' | 'c'
```

@category Object
*/
type ConditionalKeys<Base, Condition> =
{
	// Map through all the keys of the given base type.
	[Key in keyof Base]-?:
	// Pick only keys with types extending the given `Condition` type.
	Base[Key] extends Condition
	// Retain this key
	// If the value for the key extends never, only include it if `Condition` also extends never
		? IfNever<Base[Key], IfNever<Condition, Key, never>, Key>
	// Discard this key since the condition fails.
		: never;
	// Convert the produced object into a union type of the keys which passed the conditional test.
}[keyof Base];

/**
Exclude keys from a shape that matches the given `Condition`.

This is useful when you want to create a new type with a specific set of keys from a shape. For example, you might want to exclude all the primitive properties from a class and form a new shape containing everything but the primitive properties.

@example
```
import type {Primitive, ConditionalExcept} from 'type-fest';

class Awesome {
	name: string;
	successes: number;
	failures: bigint;

	run() {}
}

type ExceptPrimitivesFromAwesome = ConditionalExcept<Awesome, Primitive>;
//=> {run: () => void}
```

@example
```
import type {ConditionalExcept} from 'type-fest';

interface Example {
	a: string;
	b: string | number;
	c: () => void;
	d: {};
}

type NonStringKeysOnly = ConditionalExcept<Example, string>;
//=> {b: string | number; c: () => void; d: {}}
```

@category Object
*/
type ConditionalExcept<Base, Condition> = Except<
Base,
ConditionalKeys<Base, Condition>
>;

/**
 * Descriptors are objects that describe the API of a module, and the module
 * can either be a REST module or a host module.
 * This type is recursive, so it can describe nested modules.
 */
type Descriptors = RESTFunctionDescriptor | AmbassadorFunctionDescriptor | HostModule<any, any> | EventDefinition<any> | ServicePluginDefinition<any> | {
    [key: string]: Descriptors | PublicMetadata | any;
};
/**
 * This type takes in a descriptors object of a certain Host (including an `unknown` host)
 * and returns an object with the same structure, but with all descriptors replaced with their API.
 * Any non-descriptor properties are removed from the returned object, including descriptors that
 * do not match the given host (as they will not work with the given host).
 */
type BuildDescriptors<T extends Descriptors, H extends Host<any> | undefined, Depth extends number = 5> = {
    done: T;
    recurse: T extends {
        __type: typeof SERVICE_PLUGIN_ERROR_TYPE;
    } ? never : T extends AmbassadorFunctionDescriptor ? BuildAmbassadorFunction<T> : T extends RESTFunctionDescriptor ? BuildRESTFunction<T> : T extends EventDefinition<any> ? BuildEventDefinition<T> : T extends ServicePluginDefinition<any> ? BuildServicePluginDefinition<T> : T extends HostModule<any, any> ? HostModuleAPI<T> : ConditionalExcept<{
        [Key in keyof T]: T[Key] extends Descriptors ? BuildDescriptors<T[Key], H, [
            -1,
            0,
            1,
            2,
            3,
            4,
            5
        ][Depth]> : never;
    }, EmptyObject>;
}[Depth extends -1 ? 'done' : 'recurse'];
type PublicMetadata = {
    PACKAGE_NAME?: string;
};

declare global {
    interface ContextualClient {
    }
}
/**
 * A type used to create concerete types from SDK descriptors in
 * case a contextual client is available.
 */
type MaybeContext<T extends Descriptors> = globalThis.ContextualClient extends {
    host: Host;
} ? BuildDescriptors<T, globalThis.ContextualClient['host']> : T;

interface LocalDeliveryOption extends LocalDeliveryOptionConfigOneOf {
    zipConfig?: ZipCodeConfig;
    radiusConfig?: RadiusConfig;
    customAreaConfig?: CustomAreaConfig;
    /** LocalDeliveryOptionId - unique identifier of local delivery option */
    _id?: string | null;
    /** Area name of Local Delivery Option */
    areaName?: string | null;
    /**
     * Flat price of local delivery
     * @deprecated Flat price of local delivery
     * @targetRemovalDate 2025-01-12
     */
    rate?: string | null;
    /** Estimated delivery time description text */
    estimatedDeliveryTime?: string | null;
    /**
     * Minimum order total to be eligible for free delivery
     * @deprecated Minimum order total to be eligible for free delivery
     * @targetRemovalDate 2025-01-12
     */
    minimumFreeDeliveryOrderAmount?: number | null;
    /** List of countries with subdivisions */
    destinations?: Destination[];
    /**
     * Database revision of LocalDeliveryOption entity. Incremented on each modification
     * @readonly
     */
    revision?: string | null;
    scheduledDeliveryConfig?: ScheduledDelivery;
    /** at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates[];
    /**
     * Date and time the LocalDeliveryOption was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the LocalDeliveryOption was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** This local delivery is active for the following delivery regions. */
    deliveryRegionIds?: string[];
}
/** @oneof */
interface LocalDeliveryOptionConfigOneOf {
    zipConfig?: ZipCodeConfig;
    radiusConfig?: RadiusConfig;
    customAreaConfig?: CustomAreaConfig;
}
interface Destination {
    /** Country ISO code */
    code?: string;
    /** List of subdivisions, empty means all */
    subdivisions?: string[];
}
interface ZipCodeConfig {
    /** List of ZipCodes and ZipCode regexes. Examples: 10001, 10002 or 1000* */
    zipCodes?: string[];
}
interface RadiusConfig {
    /** Delivery-from address */
    address?: LocalDeliveryAddress;
    /** Delivery circle's radius */
    radius?: number;
    /**
     * Radius' unit, taken from site properties
     * @readonly
     */
    lengthUnit?: LengthUnit;
}
interface LocalDeliveryAddress {
    /** A string containing the human-readable address of this location */
    formatted?: string | null;
    /** coordinates of the physical address */
    location?: AddressLocation;
}
interface AddressLocation {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
declare enum LengthUnit {
    /** Length unit can't be classified, due to an error */
    UNSPECIFIED_LENGTH_UNIT = "UNSPECIFIED_LENGTH_UNIT",
    /** Kilometers */
    KM = "KM",
    /** Miles */
    MI = "MI"
}
interface CustomAreaConfig {
    /** Geocodes of the polygon defining the delivery area. */
    geocodes?: AddressLocation[];
}
interface ScheduledDelivery {
    /**
     * Days config which contain days when delivery is enabled with it's time slots
     * @deprecated Days config which contain days when delivery is enabled with it's time slots
     * @replacedBy time_windows
     * @targetRemovalDate 2025-01-01
     */
    days?: Days;
    /** Amount of days before first delivery option date */
    handlingDays?: number | null;
    /** Cut off time after which first delivery option would be for next day */
    cutOffTime?: TimePoint;
    /** availability times configuration. */
    timeWindows?: TimeWindow[];
}
interface Days {
    monday?: DaySlot;
    tuesday?: DaySlot;
    wednesday?: DaySlot;
    thursday?: DaySlot;
    friday?: DaySlot;
    saturday?: DaySlot;
    sunday?: DaySlot;
}
interface DaySlot {
    /** Shows whether this day slot is enabled for delivery */
    enabledForDelivery?: boolean | null;
    /** Time slots for scheduled delivery during day */
    timeSlots?: TimeSlot[];
}
interface TimeSlot {
    /** Starting time point of time slot */
    from?: TimePoint;
    /** End time point of time slot */
    to?: TimePoint;
}
interface TimePoint {
    /** Hours in format 0-23 */
    hours?: number | null;
    /** Minutes 0-59 */
    minutes?: number | null;
}
interface TimeWindow {
    /** The day of week this availability relates to. */
    day?: DayOfWeek;
    /** The start time in time of day representation. */
    start?: TimeOfDay;
    /** The end time in time of day representation. */
    end?: TimeOfDay;
}
declare enum DayOfWeek {
    /** Monday. */
    MON = "MON",
    /** Tuesday. */
    TUE = "TUE",
    /** Wednesday. */
    WED = "WED",
    /** Thursday. */
    THU = "THU",
    /** Friday. */
    FRI = "FRI",
    /** Saturday. */
    SAT = "SAT",
    /** Sunday. */
    SUN = "SUN"
}
interface TimeOfDay {
    /** Hours */
    hours?: number;
    /** Minutes */
    minutes?: number;
}
interface ConditionalRates {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition[];
    amount?: string;
}
interface Condition {
    type?: ConditionType;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator;
}
declare enum ConditionType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
declare enum LogicalOperator {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
interface CreateLocalDeliveryOptionRequest {
    localDeliveryOption: LocalDeliveryOption;
}
interface CreateLocalDeliveryOptionResponse {
    localDeliveryOption?: LocalDeliveryOption;
}
interface GetLocalDeliveryOptionRequest {
    /**
     * @deprecated
     * @targetRemovalDate 2025-01-12
     */
    _id?: string;
    localDeliveryOptionId: string;
}
interface GetLocalDeliveryOptionResponse {
    localDeliveryOption?: LocalDeliveryOption;
}
interface ListLocalDeliveryOptionsRequest {
    externalId: string;
}
interface ListLocalDeliveryOptionsResponse {
    localDeliveryOptions?: LocalDeliveryOption[];
}
interface QueryLocalDeliveryOptionsRequest {
    /** WQL expression */
    query: QueryV2;
}
interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryLocalDeliveryOptionsResponse {
    /** Retrieved local delivery options. */
    localDeliveryOptions?: LocalDeliveryOption[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateLocalDeliveryOptionRequest {
    localDeliveryOption: LocalDeliveryOption;
}
interface UpdateLocalDeliveryOptionResponse {
    localDeliveryOption?: LocalDeliveryOption;
}
interface DeleteLocalDeliveryOptionRequest {
    /**
     * @deprecated
     * @targetRemovalDate 2025-01-12
     */
    _id?: string;
    localDeliveryOptionId: string;
}
interface DeleteLocalDeliveryOptionResponse {
}
interface BulkCreateLocalDeliveryOptionRequest {
    localDeliveryOptions: LocalDeliveryOption[];
}
interface BulkCreateLocalDeliveryOptionResponse {
    localDeliveryOptions?: LocalDeliveryOption[];
    errors?: LocalDeliveryOptionError[];
}
interface LocalDeliveryOptionError {
    _id?: string;
    error?: string;
}
interface BulkUpdateLocalDeliveryOptionRequest {
    localDeliveryOptions: LocalDeliveryOption[];
}
interface BulkUpdateLocalDeliveryOptionResponse {
    localDeliveryOptions?: LocalDeliveryOption[];
    errors?: LocalDeliveryOptionError[];
}
interface BulkDeleteLocalDeliveryOptionRequest {
    ids: string[];
}
interface BulkDeleteLocalDeliveryOptionResponse {
}
interface Empty {
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface AddDeliveryRegionRequest {
    deliveryRegionId: string;
    localDeliveryOptionId: string;
    /** Revision of the PickupLocation */
    revision?: string | null;
}
interface AddDeliveryRegionResponse {
    localDeliveryOption?: LocalDeliveryOption;
}
interface RemoveDeliveryRegionRequest {
    deliveryRegionId: string;
    localDeliveryOptionId: string;
    /** Revision of the PickupLocation */
    revision?: string | null;
}
interface RemoveDeliveryRegionResponse {
    localDeliveryOption?: LocalDeliveryOption;
}
interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface ZipCodeConfigNonNullableFields {
    zipCodes: string[];
}
interface RadiusConfigNonNullableFields {
    radius: number;
    lengthUnit: LengthUnit;
}
interface DestinationNonNullableFields {
    code: string;
    subdivisions: string[];
}
interface TimeOfDayNonNullableFields {
    hours: number;
    minutes: number;
}
interface TimeWindowNonNullableFields {
    day: DayOfWeek;
    start?: TimeOfDayNonNullableFields;
    end?: TimeOfDayNonNullableFields;
}
interface ScheduledDeliveryNonNullableFields {
    timeWindows: TimeWindowNonNullableFields[];
}
interface ConditionNonNullableFields {
    type: ConditionType;
    value: string;
    operator: LogicalOperator;
}
interface ConditionalRatesNonNullableFields {
    conditions: ConditionNonNullableFields[];
    amount: string;
}
interface LocalDeliveryOptionNonNullableFields {
    zipConfig?: ZipCodeConfigNonNullableFields;
    radiusConfig?: RadiusConfigNonNullableFields;
    destinations: DestinationNonNullableFields[];
    scheduledDeliveryConfig?: ScheduledDeliveryNonNullableFields;
    rates: ConditionalRatesNonNullableFields[];
    deliveryRegionIds: string[];
}
interface CreateLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface GetLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface ListLocalDeliveryOptionsResponseNonNullableFields {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields[];
}
interface QueryLocalDeliveryOptionsResponseNonNullableFields {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields[];
}
interface UpdateLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface LocalDeliveryOptionErrorNonNullableFields {
    _id: string;
    error: string;
}
interface BulkCreateLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields[];
    errors: LocalDeliveryOptionErrorNonNullableFields[];
}
interface BulkUpdateLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields[];
    errors: LocalDeliveryOptionErrorNonNullableFields[];
}
interface AddDeliveryRegionResponseNonNullableFields {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface RemoveDeliveryRegionResponseNonNullableFields {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface GetLocalDeliveryOptionOptions {
    /**
     * @deprecated
     * @targetRemovalDate 2025-01-12
     */
    _id?: string;
}
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface LocalDeliveryOptionsQueryResult extends QueryCursorResult {
    items: LocalDeliveryOption[];
    query: LocalDeliveryOptionsQueryBuilder;
    next: () => Promise<LocalDeliveryOptionsQueryResult>;
    prev: () => Promise<LocalDeliveryOptionsQueryResult>;
}
interface LocalDeliveryOptionsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'areaName' | 'estimatedDeliveryTime' | 'deliveryRegionIds', value: any) => LocalDeliveryOptionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'areaName' | 'estimatedDeliveryTime' | 'deliveryRegionIds', value: any) => LocalDeliveryOptionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'areaName' | 'estimatedDeliveryTime', value: string) => LocalDeliveryOptionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'areaName' | 'estimatedDeliveryTime' | 'deliveryRegionIds', value: any[]) => LocalDeliveryOptionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasAll: (propertyName: 'deliveryRegionIds', value: any[]) => LocalDeliveryOptionsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'areaName' | 'estimatedDeliveryTime' | 'deliveryRegionIds', value: any) => LocalDeliveryOptionsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'areaName' | 'estimatedDeliveryTime' | 'deliveryRegionIds', value: boolean) => LocalDeliveryOptionsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => LocalDeliveryOptionsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => LocalDeliveryOptionsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<LocalDeliveryOptionsQueryResult>;
}
interface UpdateLocalDeliveryOption {
    zipConfig?: ZipCodeConfig;
    radiusConfig?: RadiusConfig;
    customAreaConfig?: CustomAreaConfig;
    /** LocalDeliveryOptionId - unique identifier of local delivery option */
    _id?: string | null;
    /** Area name of Local Delivery Option */
    areaName?: string | null;
    /**
     * Flat price of local delivery
     * @deprecated Flat price of local delivery
     * @targetRemovalDate 2025-01-12
     */
    rate?: string | null;
    /** Estimated delivery time description text */
    estimatedDeliveryTime?: string | null;
    /**
     * Minimum order total to be eligible for free delivery
     * @deprecated Minimum order total to be eligible for free delivery
     * @targetRemovalDate 2025-01-12
     */
    minimumFreeDeliveryOrderAmount?: number | null;
    /** List of countries with subdivisions */
    destinations?: Destination[];
    /**
     * Database revision of LocalDeliveryOption entity. Incremented on each modification
     * @readonly
     */
    revision?: string | null;
    scheduledDeliveryConfig?: ScheduledDelivery;
    /** at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates[];
    /**
     * Date and time the LocalDeliveryOption was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the LocalDeliveryOption was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** This local delivery is active for the following delivery regions. */
    deliveryRegionIds?: string[];
}
interface DeleteLocalDeliveryOptionOptions {
    /**
     * @deprecated
     * @targetRemovalDate 2025-01-12
     */
    _id?: string;
}
interface AddDeliveryRegionOptions {
    localDeliveryOptionId: string;
    /** Revision of the PickupLocation */
    revision?: string | null;
}
interface RemoveDeliveryRegionOptions {
    localDeliveryOptionId: string;
    /** Revision of the PickupLocation */
    revision?: string | null;
}

declare function createLocalDeliveryOption$1(httpClient: HttpClient): CreateLocalDeliveryOptionSignature;
interface CreateLocalDeliveryOptionSignature {
    /** */
    (localDeliveryOption: LocalDeliveryOption): Promise<LocalDeliveryOption & LocalDeliveryOptionNonNullableFields>;
}
declare function getLocalDeliveryOption$1(httpClient: HttpClient): GetLocalDeliveryOptionSignature;
interface GetLocalDeliveryOptionSignature {
    /** */
    (localDeliveryOptionId: string, options?: GetLocalDeliveryOptionOptions | undefined): Promise<LocalDeliveryOption & LocalDeliveryOptionNonNullableFields>;
}
declare function listLocalDeliveryOptions$1(httpClient: HttpClient): ListLocalDeliveryOptionsSignature;
interface ListLocalDeliveryOptionsSignature {
    /** @deprecated method is deprecated due to the fact that external_id is deprecated */
    (externalId: string): Promise<ListLocalDeliveryOptionsResponse & ListLocalDeliveryOptionsResponseNonNullableFields>;
}
declare function queryLocalDeliveryOptions$1(httpClient: HttpClient): QueryLocalDeliveryOptionsSignature;
interface QueryLocalDeliveryOptionsSignature {
    /**
     * Retrieves a list of local delivery options, given the provided paging, filtering, and sorting.
     *
     * For field support for filters and sorting, see [Local Delivery: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-management/payments/tax/tax-regions/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language),
     * [Sorting and Paging](https://dev.wix.com/api/rest/getting-started/sorting-and-paging),
     * and [Field Projection](https://dev.wix.com/api/rest/getting-started/field-projection).
     */
    (): LocalDeliveryOptionsQueryBuilder;
}
declare function updateLocalDeliveryOption$1(httpClient: HttpClient): UpdateLocalDeliveryOptionSignature;
interface UpdateLocalDeliveryOptionSignature {
    /** @param - LocalDeliveryOptionId - unique identifier of local delivery option */
    (_id: string | null, localDeliveryOption: UpdateLocalDeliveryOption): Promise<LocalDeliveryOption & LocalDeliveryOptionNonNullableFields>;
}
declare function deleteLocalDeliveryOption$1(httpClient: HttpClient): DeleteLocalDeliveryOptionSignature;
interface DeleteLocalDeliveryOptionSignature {
    /** */
    (localDeliveryOptionId: string, options?: DeleteLocalDeliveryOptionOptions | undefined): Promise<void>;
}
declare function bulkCreateLocalDeliveryOption$1(httpClient: HttpClient): BulkCreateLocalDeliveryOptionSignature;
interface BulkCreateLocalDeliveryOptionSignature {
    /** */
    (localDeliveryOptions: LocalDeliveryOption[]): Promise<BulkCreateLocalDeliveryOptionResponse & BulkCreateLocalDeliveryOptionResponseNonNullableFields>;
}
declare function bulkUpdateLocalDeliveryOption$1(httpClient: HttpClient): BulkUpdateLocalDeliveryOptionSignature;
interface BulkUpdateLocalDeliveryOptionSignature {
    /** */
    (localDeliveryOptions: LocalDeliveryOption[]): Promise<BulkUpdateLocalDeliveryOptionResponse & BulkUpdateLocalDeliveryOptionResponseNonNullableFields>;
}
declare function bulkDeleteLocalDeliveryOption$1(httpClient: HttpClient): BulkDeleteLocalDeliveryOptionSignature;
interface BulkDeleteLocalDeliveryOptionSignature {
    /** */
    (ids: string[]): Promise<void>;
}
declare function addDeliveryRegion$1(httpClient: HttpClient): AddDeliveryRegionSignature;
interface AddDeliveryRegionSignature {
    /** */
    (deliveryRegionId: string, options?: AddDeliveryRegionOptions | undefined): Promise<AddDeliveryRegionResponse & AddDeliveryRegionResponseNonNullableFields>;
}
declare function removeDeliveryRegion$1(httpClient: HttpClient): RemoveDeliveryRegionSignature;
interface RemoveDeliveryRegionSignature {
    /** */
    (deliveryRegionId: string, options?: RemoveDeliveryRegionOptions | undefined): Promise<RemoveDeliveryRegionResponse & RemoveDeliveryRegionResponseNonNullableFields>;
}

declare const createLocalDeliveryOption: MaybeContext<BuildRESTFunction<typeof createLocalDeliveryOption$1> & typeof createLocalDeliveryOption$1>;
declare const getLocalDeliveryOption: MaybeContext<BuildRESTFunction<typeof getLocalDeliveryOption$1> & typeof getLocalDeliveryOption$1>;
declare const listLocalDeliveryOptions: MaybeContext<BuildRESTFunction<typeof listLocalDeliveryOptions$1> & typeof listLocalDeliveryOptions$1>;
declare const queryLocalDeliveryOptions: MaybeContext<BuildRESTFunction<typeof queryLocalDeliveryOptions$1> & typeof queryLocalDeliveryOptions$1>;
declare const updateLocalDeliveryOption: MaybeContext<BuildRESTFunction<typeof updateLocalDeliveryOption$1> & typeof updateLocalDeliveryOption$1>;
declare const deleteLocalDeliveryOption: MaybeContext<BuildRESTFunction<typeof deleteLocalDeliveryOption$1> & typeof deleteLocalDeliveryOption$1>;
declare const bulkCreateLocalDeliveryOption: MaybeContext<BuildRESTFunction<typeof bulkCreateLocalDeliveryOption$1> & typeof bulkCreateLocalDeliveryOption$1>;
declare const bulkUpdateLocalDeliveryOption: MaybeContext<BuildRESTFunction<typeof bulkUpdateLocalDeliveryOption$1> & typeof bulkUpdateLocalDeliveryOption$1>;
declare const bulkDeleteLocalDeliveryOption: MaybeContext<BuildRESTFunction<typeof bulkDeleteLocalDeliveryOption$1> & typeof bulkDeleteLocalDeliveryOption$1>;
declare const addDeliveryRegion: MaybeContext<BuildRESTFunction<typeof addDeliveryRegion$1> & typeof addDeliveryRegion$1>;
declare const removeDeliveryRegion: MaybeContext<BuildRESTFunction<typeof removeDeliveryRegion$1> & typeof removeDeliveryRegion$1>;

export { type ActionEvent, type AddDeliveryRegionOptions, type AddDeliveryRegionRequest, type AddDeliveryRegionResponse, type AddDeliveryRegionResponseNonNullableFields, type AddressLocation, type BulkCreateLocalDeliveryOptionRequest, type BulkCreateLocalDeliveryOptionResponse, type BulkCreateLocalDeliveryOptionResponseNonNullableFields, type BulkDeleteLocalDeliveryOptionRequest, type BulkDeleteLocalDeliveryOptionResponse, type BulkUpdateLocalDeliveryOptionRequest, type BulkUpdateLocalDeliveryOptionResponse, type BulkUpdateLocalDeliveryOptionResponseNonNullableFields, type Condition, ConditionType, type ConditionalRates, type CreateLocalDeliveryOptionRequest, type CreateLocalDeliveryOptionResponse, type CreateLocalDeliveryOptionResponseNonNullableFields, type CursorPaging, type CursorPagingMetadata, type Cursors, type CustomAreaConfig, DayOfWeek, type DaySlot, type Days, type DeleteLocalDeliveryOptionOptions, type DeleteLocalDeliveryOptionRequest, type DeleteLocalDeliveryOptionResponse, type Destination, type DomainEvent, type DomainEventBodyOneOf, type Empty, type EntityCreatedEvent, type EntityDeletedEvent, type EntityUpdatedEvent, type GetLocalDeliveryOptionOptions, type GetLocalDeliveryOptionRequest, type GetLocalDeliveryOptionResponse, type GetLocalDeliveryOptionResponseNonNullableFields, type IdentificationData, type IdentificationDataIdOneOf, LengthUnit, type ListLocalDeliveryOptionsRequest, type ListLocalDeliveryOptionsResponse, type ListLocalDeliveryOptionsResponseNonNullableFields, type LocalDeliveryAddress, type LocalDeliveryOption, type LocalDeliveryOptionConfigOneOf, type LocalDeliveryOptionError, type LocalDeliveryOptionNonNullableFields, type LocalDeliveryOptionsQueryBuilder, type LocalDeliveryOptionsQueryResult, LogicalOperator, type MessageEnvelope, type Paging, type QueryLocalDeliveryOptionsRequest, type QueryLocalDeliveryOptionsResponse, type QueryLocalDeliveryOptionsResponseNonNullableFields, type QueryV2, type QueryV2PagingMethodOneOf, type RadiusConfig, type RemoveDeliveryRegionOptions, type RemoveDeliveryRegionRequest, type RemoveDeliveryRegionResponse, type RemoveDeliveryRegionResponseNonNullableFields, type RestoreInfo, type ScheduledDelivery, SortOrder, type Sorting, type TimeOfDay, type TimePoint, type TimeSlot, type TimeWindow, type UpdateLocalDeliveryOption, type UpdateLocalDeliveryOptionRequest, type UpdateLocalDeliveryOptionResponse, type UpdateLocalDeliveryOptionResponseNonNullableFields, WebhookIdentityType, type ZipCodeConfig, addDeliveryRegion, bulkCreateLocalDeliveryOption, bulkDeleteLocalDeliveryOption, bulkUpdateLocalDeliveryOption, createLocalDeliveryOption, deleteLocalDeliveryOption, getLocalDeliveryOption, listLocalDeliveryOptions, queryLocalDeliveryOptions, removeDeliveryRegion, updateLocalDeliveryOption };
