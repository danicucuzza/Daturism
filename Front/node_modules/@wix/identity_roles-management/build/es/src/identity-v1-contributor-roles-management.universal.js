import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixIdentityV1Contributor from './identity-v1-contributor-roles-management.http';
export var ResourceType;
(function (ResourceType) {
    ResourceType["UNKNOWN_RESOURCE_TYPE"] = "UNKNOWN_RESOURCE_TYPE";
    ResourceType["SITE"] = "SITE";
})(ResourceType || (ResourceType = {}));
export var ConditionAttributeType;
(function (ConditionAttributeType) {
    ConditionAttributeType["UNKNOWN_CONDITION_TYPE"] = "UNKNOWN_CONDITION_TYPE";
    ConditionAttributeType["FOLDER"] = "FOLDER";
})(ConditionAttributeType || (ConditionAttributeType = {}));
export var SubjectType;
(function (SubjectType) {
    SubjectType["UNKNOWN"] = "UNKNOWN";
    SubjectType["ACCOUNT"] = "ACCOUNT";
    SubjectType["USER"] = "USER";
    SubjectType["USER_GROUP"] = "USER_GROUP";
    SubjectType["MEMBER_GROUP"] = "MEMBER_GROUP";
    SubjectType["VISITOR_GROUP"] = "VISITOR_GROUP";
    SubjectType["EXTERNAL_APP"] = "EXTERNAL_APP";
    SubjectType["ACCOUNT_GROUP"] = "ACCOUNT_GROUP";
    SubjectType["WIX_APP"] = "WIX_APP";
})(SubjectType || (SubjectType = {}));
export var SubjectContextType;
(function (SubjectContextType) {
    SubjectContextType["UNKNOWN_CTX"] = "UNKNOWN_CTX";
    SubjectContextType["ORG_CTX"] = "ORG_CTX";
    SubjectContextType["ACCOUNT_CTX"] = "ACCOUNT_CTX";
})(SubjectContextType || (SubjectContextType = {}));
/** Invite status stating whether the invite was accepted, waiting to be accepted, deleted etc.. */
export var InviteStatus;
(function (InviteStatus) {
    InviteStatus["Pending"] = "Pending";
    InviteStatus["Used"] = "Used";
    InviteStatus["Deleted"] = "Deleted";
    InviteStatus["Declined"] = "Declined";
    InviteStatus["Expired"] = "Expired";
})(InviteStatus || (InviteStatus = {}));
/** Enum to represent different types of contributors quota. */
export var Type;
(function (Type) {
    Type["UNKNOWN"] = "UNKNOWN";
    Type["LIMITED"] = "LIMITED";
    Type["UNLIMITED"] = "UNLIMITED";
})(Type || (Type = {}));
export var FieldSet;
(function (FieldSet) {
    FieldSet["UNKNOWN"] = "UNKNOWN";
    /** Include only `account_id` and `account_owner_id` fields. */
    FieldSet["META_DATA"] = "META_DATA";
})(FieldSet || (FieldSet = {}));
/**
 * Overrides all the roles of a contributor for the specified site.
 * @param accountId - Contributor's account ID.
 * @public
 * @documentationMaturity preview
 * @requiredField accountId
 * @requiredField options
 * @requiredField options.newRoles
 * @permissionId SITE_ROLES.CHANGE_ROLE
 */
export async function changeRole(accountId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        accountId: accountId,
        newRoles: options?.newRoles,
    });
    const reqOpts = ambassadorWixIdentityV1Contributor.changeRole(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                accountId: '$[0]',
                newRoles: '$[1].newRoles',
            },
            singleArgumentUnchanged: false,
        }, ['accountId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of contributors for the specified site, given the provided filters.
 * @public
 * @documentationMaturity preview
 * @permissionId site-users.view-users
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Portfolio
 * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @applicableIdentity APP
 */
export async function querySiteContributors(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        filter: options?.filter,
    });
    const reqOpts = ambassadorWixIdentityV1Contributor.querySiteContributors(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { filter: '$[0].filter' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=identity-v1-contributor-roles-management.universal.js.map