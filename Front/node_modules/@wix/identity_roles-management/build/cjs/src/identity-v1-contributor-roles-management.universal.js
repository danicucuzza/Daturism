"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.querySiteContributors = exports.changeRole = exports.FieldSet = exports.Type = exports.InviteStatus = exports.SubjectContextType = exports.SubjectType = exports.ConditionAttributeType = exports.ResourceType = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixIdentityV1Contributor = __importStar(require("./identity-v1-contributor-roles-management.http"));
var ResourceType;
(function (ResourceType) {
    ResourceType["UNKNOWN_RESOURCE_TYPE"] = "UNKNOWN_RESOURCE_TYPE";
    ResourceType["SITE"] = "SITE";
})(ResourceType || (exports.ResourceType = ResourceType = {}));
var ConditionAttributeType;
(function (ConditionAttributeType) {
    ConditionAttributeType["UNKNOWN_CONDITION_TYPE"] = "UNKNOWN_CONDITION_TYPE";
    ConditionAttributeType["FOLDER"] = "FOLDER";
})(ConditionAttributeType || (exports.ConditionAttributeType = ConditionAttributeType = {}));
var SubjectType;
(function (SubjectType) {
    SubjectType["UNKNOWN"] = "UNKNOWN";
    SubjectType["ACCOUNT"] = "ACCOUNT";
    SubjectType["USER"] = "USER";
    SubjectType["USER_GROUP"] = "USER_GROUP";
    SubjectType["MEMBER_GROUP"] = "MEMBER_GROUP";
    SubjectType["VISITOR_GROUP"] = "VISITOR_GROUP";
    SubjectType["EXTERNAL_APP"] = "EXTERNAL_APP";
    SubjectType["ACCOUNT_GROUP"] = "ACCOUNT_GROUP";
    SubjectType["WIX_APP"] = "WIX_APP";
})(SubjectType || (exports.SubjectType = SubjectType = {}));
var SubjectContextType;
(function (SubjectContextType) {
    SubjectContextType["UNKNOWN_CTX"] = "UNKNOWN_CTX";
    SubjectContextType["ORG_CTX"] = "ORG_CTX";
    SubjectContextType["ACCOUNT_CTX"] = "ACCOUNT_CTX";
})(SubjectContextType || (exports.SubjectContextType = SubjectContextType = {}));
/** Invite status stating whether the invite was accepted, waiting to be accepted, deleted etc.. */
var InviteStatus;
(function (InviteStatus) {
    InviteStatus["Pending"] = "Pending";
    InviteStatus["Used"] = "Used";
    InviteStatus["Deleted"] = "Deleted";
    InviteStatus["Declined"] = "Declined";
    InviteStatus["Expired"] = "Expired";
})(InviteStatus || (exports.InviteStatus = InviteStatus = {}));
/** Enum to represent different types of contributors quota. */
var Type;
(function (Type) {
    Type["UNKNOWN"] = "UNKNOWN";
    Type["LIMITED"] = "LIMITED";
    Type["UNLIMITED"] = "UNLIMITED";
})(Type || (exports.Type = Type = {}));
var FieldSet;
(function (FieldSet) {
    FieldSet["UNKNOWN"] = "UNKNOWN";
    /** Include only `account_id` and `account_owner_id` fields. */
    FieldSet["META_DATA"] = "META_DATA";
})(FieldSet || (exports.FieldSet = FieldSet = {}));
/**
 * Overrides all the roles of a contributor for the specified site.
 * @param accountId - Contributor's account ID.
 * @public
 * @documentationMaturity preview
 * @requiredField accountId
 * @requiredField options
 * @requiredField options.newRoles
 * @permissionId SITE_ROLES.CHANGE_ROLE
 */
async function changeRole(accountId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        accountId: accountId,
        newRoles: options?.newRoles,
    });
    const reqOpts = ambassadorWixIdentityV1Contributor.changeRole(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                accountId: '$[0]',
                newRoles: '$[1].newRoles',
            },
            singleArgumentUnchanged: false,
        }, ['accountId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.changeRole = changeRole;
/**
 * Retrieves a list of contributors for the specified site, given the provided filters.
 * @public
 * @documentationMaturity preview
 * @permissionId site-users.view-users
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Portfolio
 * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @applicableIdentity APP
 */
async function querySiteContributors(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        filter: options?.filter,
    });
    const reqOpts = ambassadorWixIdentityV1Contributor.querySiteContributors(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { filter: '$[0].filter' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.querySiteContributors = querySiteContributors;
//# sourceMappingURL=identity-v1-contributor-roles-management.universal.js.map