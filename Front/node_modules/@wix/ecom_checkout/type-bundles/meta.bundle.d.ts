interface Checkout$1 {
    /**
     * Checkout ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Line items.
     *
     * Max: 300 items
     * @readonly
     */
    lineItems?: LineItem$1[];
    /** Billing information. */
    billingInfo?: AddressWithContact$1;
    /** Shipping information. */
    shippingInfo?: ShippingInfo$1;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo$1;
    /**
     * All converted prices are displayed in this currency in three-letter [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Calculated price summary for the checkout.
     * @readonly
     */
    priceSummary?: PriceSummary$1;
    /**
     * Errors when calculating totals.
     * @readonly
     */
    calculationErrors?: CalculationErrors$1;
    /**
     * Applied gift card details.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     * @readonly
     */
    giftCard?: GiftCard$1;
    /**
     * Applied discounts.
     * @readonly
     */
    appliedDiscounts?: AppliedDiscount$1[];
    /** Custom fields. */
    customFields?: CustomField$1[];
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit$1;
    /**
     * Tax summary.
     * @readonly
     */
    taxSummary?: TaxSummary$1;
    /**
     * The currency used when submitting the order.
     * @readonly
     */
    currency?: string;
    /**
     * Sales channel that submitted the order.
     * + `"UNSPECIFIED"`: Unspecified sales channel. This value is not supported.
     * + `"WEB"`: A web client.
     * + `"POS"`: [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395)
     * + `"EBAY"`: [eBay](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop)
     * + `"AMAZON"`: [Amazon](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop)
     * + `"WISH"`: [Wish](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-a-wish-shop)
     * + `"WIX_INVOICES"`: Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings)
     * + `"WIX_APP_STORE"`: [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview)
     * + `"BACKOFFICE_MERCHANT"`: Wix merchant backoffice
     * + `"OTHER_PLATFORM"`: Other sales platform.
     * @readonly
     */
    channelType?: ChannelType$1;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string;
    /**
     * Whether an order was successfully created from this checkout.
     * For an order to be successful, it must be successfully paid for (unless the total is 0).
     * @readonly
     */
    completed?: boolean;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrice?: boolean;
    /**
     * ID of the checkout's initiator.
     * @readonly
     */
    createdBy?: CreatedBy$1;
    /**
     * Date and time the checkout was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the checkout was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary$1;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary$1;
    /** Memberships to apply when creating the order. */
    membershipOptions?: MembershipOptions$1;
    /** Additional Fees. */
    additionalFees?: AdditionalFee$1[];
    /** Cart ID that this checkout was created from. Empty if this checkout wasn't created from a cart. */
    cartId?: string | null;
    /**
     * List of validation violations raised by the [Validations service plugin](https://dev.wix.com/api/rest/wix-ecommerce/validations-integration-spi/introduction).
     * @readonly
     */
    violations?: Violation$1[];
    /**
     * Custom field data for the checkout object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$1;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /**
     * Additional settings for customization of the checkout process.
     *
     * > **Notes:**
     * > * Custom settings can only be set when [creating a checkout](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/checkout/create-checkout).
     * > * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions". Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customSettings?: CustomSettings$1;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference$1;
}
interface LineItem$1 {
    /**
     * Line item ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Item quantity.
     *
     * Min: `"1"`
     * Max: `"100000"`
     */
    quantity?: number;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$1;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName$1;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: PageUrlV2;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice$1;
    /**
     * Total line item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    lineItemPrice?: MultiCurrencyPrice$1;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice$1;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice$1;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: MultiCurrencyPrice$1;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: MultiCurrencyPrice$1;
    /**
     * Tax details for this line item.
     * @readonly
     */
    taxDetails?: ItemTaxFullDetails$1;
    /**
     * Discount for this line item's entire quantity.
     * @readonly
     */
    discount?: MultiCurrencyPrice$1;
    /**
     * Line item description lines. Used for display purposes for the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine$1[];
    /**
     * Line item image details.
     * @readonly
     */
    media?: CommonImage;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo$1;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties$1;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType$1;
    /**
     * Subscription option information.
     * @readonly
     */
    subscriptionOptionInfo?: SubscriptionOptionInfo$1;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is defined by `lineItem.deposit`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be performed by using a membership and must be manually redeemed in the dashboard by the site owner. When this option is used, `lineItem.price.amount` is `0`.
     * @readonly
     */
    paymentOption?: PaymentOptionType$1;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties$1;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field has the same value as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription$1;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice$1;
    /**
     * Whether the line item is a custom line item. Custom line items don't trigger the Catalog service plugin.
     * @readonly
     */
    customLineItem?: boolean;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields$1;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$1 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ProductName$1 {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PageUrlV2 {
    /** The relative path for the page within the site. For example, `/product-page/a-product`. */
    relativePath?: string;
    /** The page's full URL. For example, `https://mysite.com/product-page/a-product`. */
    url?: string | null;
}
interface MultiCurrencyPrice$1 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface ItemTaxFullDetails$1 {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice$1;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice$1;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown$1[];
}
interface TaxRateBreakdown$1 {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice$1;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$1 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DescriptionLine$1 extends DescriptionLineValueOneOf$1, DescriptionLineDescriptionLineValueOneOf$1 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$1;
    /** Description line color value. */
    colorInfo?: Color$1;
    /** Description line name. */
    name?: DescriptionLineName$1;
}
/** @oneof */
interface DescriptionLineValueOneOf$1 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$1;
    /** Description line color value. */
    colorInfo?: Color$1;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$1 {
}
interface DescriptionLineName$1 {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$1 {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$1 {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$1 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface CommonImage {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface ItemAvailabilityInfo$1 {
    /**
     * Item availability status.
     * + `"NOT_FOUND"`: Item does not exist
     * + `"NOT_AVAILABLE"`: Item not in stock
     * + `"PARTIALLY_AVAILABLE"`: Available quantity is less than requested
     */
    status?: ItemAvailabilityStatus$1;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus$1 {
    AVAILABLE = "AVAILABLE",
    NOT_FOUND = "NOT_FOUND",
    /** Not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
interface PhysicalProperties$1 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$1 extends ItemTypeItemTypeDataOneOf$1 {
    /** Preset item type. */
    preset?: ItemTypeItemType$1;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$1 {
    /** Preset item type. */
    preset?: ItemTypeItemType$1;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$1 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
interface SubscriptionOptionInfo$1 {
    /** Subscription option settings. */
    subscriptionSettings?: SubscriptionSettings$1;
    /** Subscription option title. */
    title?: Title$1;
    /** Subscription option description. */
    description?: Description$1;
}
interface SubscriptionSettings$1 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$1;
    /**
     * Interval of recurring payment.
     *
     * Default: `1`.
     * If SubscriptionFrequency is Day the minimum interval is 7
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal` is `true`. */
    billingCycles?: number | null;
    /**
     * Period until first cycle starts. If applied payNow will be 0
     * If None => no free trial
     */
    freeTrialPeriod?: FreeTrialPeriod$1;
    /** The date the subscription will start. The subscription will be charged either now or according to freeTrialDays. */
    startDate?: Date | null;
    /**
     * Whether to generate an order each billing cycle. An order will always be generated for the first billing cycle.
     * Default None => will behave like true
     */
    generateOrderEachBillingCycle?: boolean | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$1 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface FreeTrialPeriod$1 {
    /** Frequency of priod. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequency$1;
    /** interval of period */
    interval?: number;
}
interface Title$1 {
    /** Subscription option name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Subscription option name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Description$1 {
    /** Subscription option description. */
    original?: string;
    /** Translated subscription option description. */
    translated?: string | null;
}
declare enum FileType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$1 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties$1 {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface PriceDescription$1 {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface CatalogOverrideFields$1 {
    /** Item name. */
    productName?: ProductName$1;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine$1[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$1;
    /** Item image. */
    image?: Image;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption$1;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface Image {
    /** WixMedia image ID. */
    id?: string;
    /** Original image height. */
    height?: number;
    /** Original image width. */
    width?: number;
    /** Image alt text. Optional. */
    altText?: string | null;
    /** Image filename. Optional. */
    filename?: string | null;
}
interface PaymentOption$1 {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType$1;
}
declare enum TaxableAddressType$1 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
interface ExtendedFields$1 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
/** Billing Info and shipping details */
interface AddressWithContact$1 {
    /** Address. */
    address?: ApiAddress$1;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$1;
}
/** Physical address */
interface ApiAddress$1 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$1;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress$1 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$1 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: CommonVatId$1;
}
interface CommonVatId$1 {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: CommonVatType$1;
}
/** tax info types */
declare enum CommonVatType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface ShippingInfo$1 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$1;
    /** Selected option out of the options allowed for the `region`. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption$1;
    /**
     * Shipping region. Based on the address provided.
     * @readonly
     */
    region?: ShippingRegion$1;
    /**
     * All carrier options for this shipping rule.
     * @readonly
     */
    carrierServiceOptions?: CarrierServiceOption$1[];
}
interface SelectedCarrierServiceOption$1 {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics$1;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices$1;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge$1[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface DeliveryLogistics$1 {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails$1;
}
interface PickupDetails$1 {
    /** Pickup address. */
    address?: ApiAddress$1;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod$1;
}
declare enum PickupMethod$1 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface SelectedCarrierServiceOptionPrices$1 {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$1;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$1;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$1;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice$1;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice$1;
}
interface SelectedCarrierServiceOptionOtherCharge$1 {
    /** Type of additional cost. */
    type?: ChargeType$1;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices$1;
}
declare enum ChargeType$1 {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface ShippingRegion$1 {
    /**
     * Shipping region ID.
     * @readonly
     */
    id?: string;
    /** Shipping region name. */
    name?: string;
}
interface CarrierServiceOption$1 {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption$1[];
}
interface ShippingOption$1 {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics$1;
    /** Sipping price information. */
    cost?: ShippingPrice$1;
}
interface ShippingPrice$1 {
    /** Shipping price. */
    price?: MultiCurrencyPrice$1;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge$1[];
}
interface OtherCharge$1 {
    /** Type of additional cost. */
    type?: ChargeType$1;
    /** Price of added cost. */
    price?: MultiCurrencyPrice$1;
}
interface BuyerInfo$1 extends BuyerInfoIdOneOf$1 {
    /**
     * Visitor ID (if site visitor is **not** a member).
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID (if site visitor is a site member).
     * @readonly
     */
    memberId?: string;
    /**
     * Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction).
     * @readonly
     */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$1 {
    /**
     * Visitor ID (if site visitor is **not** a member).
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID (if site visitor is a site member).
     * @readonly
     */
    memberId?: string;
}
interface PriceSummary$1 {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice$1;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice$1;
    /** Total tax. */
    tax?: MultiCurrencyPrice$1;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice$1;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice$1;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice$1;
}
interface CalculationErrors$1 extends CalculationErrorsShippingCalculationErrorOneOf$1 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$1;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$1;
    /** Tax calculation error. */
    taxCalculationError?: Details$1;
    /** Coupon calculation error. */
    couponCalculationError?: Details$1;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details$1;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$1[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details$1;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details$1;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$1 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$1;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$1;
}
interface Details$1 extends DetailsKindOneOf$1 {
    applicationError?: ApplicationError$1;
    validationError?: ValidationError$1;
    systemError?: SystemError$1;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$1 {
    applicationError?: ApplicationError$1;
    validationError?: ValidationError$1;
    systemError?: SystemError$1;
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$1 {
    fieldViolations?: FieldViolation$1[];
}
declare enum RuleType$1 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$1 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$1;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$1 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$1 {
    /** Carrier errors. */
    errors?: CarrierError$1[];
}
interface CarrierError$1 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$1;
}
interface GiftCard$1 {
    /**
     * Gift Card ID.
     * @deprecated
     */
    id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice$1;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface AppliedDiscount$1 extends AppliedDiscountDiscountSourceOneOf$1 {
    /** Coupon details. */
    coupon?: Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$1;
    /** Discount rule */
    discountRule?: DiscountRule$1;
    /** Discount type. */
    discountType?: DiscountType$1;
    /**
     * IDs of line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$1 {
    /** Coupon details. */
    coupon?: Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$1;
    /** Discount rule */
    discountRule?: DiscountRule$1;
}
declare enum DiscountType$1 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$1 {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice$1;
    /** Coupon name. */
    name?: string;
}
interface MerchantDiscount$1 {
    /** Discount value. */
    amount?: MultiCurrencyPrice$1;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule$1 {
    /** Discount rule ID */
    id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$1;
    /** Discount value. */
    amount?: MultiCurrencyPrice$1;
}
interface DiscountRuleName$1 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface CustomField$1 {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
declare enum WeightUnit$1 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface TaxSummary$1 {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice$1;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice$1;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails$1;
}
interface TaxCalculationDetails$1 extends TaxCalculationDetailsCalculationDetailsOneOf$1 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$1;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$1;
    /** Rate calculation type. */
    rateType?: RateType$1;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf$1 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$1;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$1;
}
declare enum RateType$1 {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason$1 {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails$1 {
    /** reason for fallback */
    fallbackReason?: FallbackReason$1;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError$1;
}
declare enum FallbackReason$1 {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
declare enum ChannelType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CreatedBy$1 extends CreatedByIdOneOf$1 {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** @oneof */
interface CreatedByIdOneOf$1 {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** Reserved for internal use. */
interface MembershipOptions$1 {
    /**
     * Reserved for internal use.
     * @readonly
     */
    eligibleMemberships?: Membership$1[];
    /**
     * Reserved for internal use.
     * @readonly
     */
    invalidMemberships?: InvalidMembership$1[];
    /** Selected membership to apply to this checkout. */
    selectedMemberships?: SelectedMemberships$1;
}
interface Membership$1 {
    /** Membership ID. */
    id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName$1;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits$1;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName$1 {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface MembershipPaymentCredits$1 {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership$1 {
    /** Membership details. */
    membership?: Membership$1;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface SelectedMemberships$1 {
    /** Selected memberships. */
    memberships?: SelectedMembership$1[];
}
interface SelectedMembership$1 {
    /** Membership ID. */
    id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface AdditionalFee$1 {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice$1;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$1;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice$1;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice$1;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface Violation$1 {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity$1;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target$1;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity$1 {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target$1 extends TargetTargetTypeOneOf$1 {
    /** General (other) violation. */
    other?: Other$1;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$1;
}
/** @oneof */
interface TargetTargetTypeOneOf$1 {
    /** General (other) violation. */
    other?: Other$1;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$1;
}
/** Available locations on the webpage */
declare enum NameInOther$1 {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem$1 {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix$1 {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other$1 {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther$1;
}
/** Specific line item violation. */
interface TargetLineItem$1 {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem$1;
    /** ID of the line item containing the violation. */
    id?: string | null;
}
interface CustomSettings$1 {
    /**
     * Whether to restrict the option to add or remove a gift card on the checkout page.
     *
     * Default: `false`
     */
    lockGiftCard?: boolean;
    /**
     * Whether to restrict the option to add or remove a coupon code on the checkout page.
     *
     * Default: `false`
     */
    lockCouponCode?: boolean;
    /**
     * Whether to disable policy agreement checkout in the checkout page
     *
     * Default: `false`
     */
    disabledPolicyAgreementCheckbox?: boolean;
    /**
     * Whether to disable manual payment option for this checkout.
     *
     * Default: `false`
     */
    disabledManualPayment?: boolean;
}
interface CustomContentReference$1 {
    /**
     * ID of the app providing the content.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    appId?: string;
    /**
     * ID of the component within the app it belongs to.
     *
     * You can get your component's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    componentId?: string;
}
interface CreateCheckoutRequest$1 {
    /** Checkout information. */
    checkoutInfo?: Checkout$1;
    /** Coupon code. */
    couponCode?: string | null;
    /** Catalog line items to add to the checkout. */
    lineItems?: LineItem$1[];
    /**
     * Custom line items to add to the checkout. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$1[];
    /**
     * Sales channel that submitted the order.
     * + `"UNSPECIFIED"`: Unspecified sales channel. This value is not supported.
     * + `"WEB"`: A web client.
     * + `"POS"`: [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395)
     * + `"EBAY"`: [eBay](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop)
     * + `"AMAZON"`: [Amazon](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop)
     * + `"WISH"`: [Wish](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-a-wish-shop)
     * + `"WIX_INVOICES"`: Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings)
     * + `"WIX_APP_STORE"`: [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview)
     * + `"BACKOFFICE_MERCHANT"`: Wix merchant backoffice
     * + `"OTHER_PLATFORM"`: Other sales platform.
     */
    channelType: ChannelType$1;
    /**
     * Gift card code.
     *
     * The checkout can only hold 1 `giftCardCode` at a time. If an additional `giftCardCode` is added, it will override the existing `giftCardCode`.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     */
    giftCardCode?: string | null;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used in the [Abandoned Checkout API](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/abandoned-checkout/introduction)
     * to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a
     * standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
}
interface CustomLineItem$1 {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$1;
    /** Custom line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine$1[];
    /** Custom line item's media. */
    media?: Image;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName$1;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: PageUrlV2;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$1;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$1;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$1;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties$1;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$1;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface CreateCheckoutResponse$1 {
    /** Newly created checkout. */
    checkout?: Checkout$1;
}
interface GetCheckoutRequest$1 {
    /** Checkout ID. */
    id: string;
}
interface GetCheckoutResponse$1 {
    /** The requested checkout. */
    checkout?: Checkout$1;
}
interface GetCheckoutByCartIdRequest$1 {
    /** Cart ID. */
    id: string;
}
interface GetCheckoutByCartIdResponse$1 {
    /** The requested checkout. */
    checkout?: Checkout$1;
}
interface GetCheckoutURLRequest$1 {
    /** Checkout ID. */
    id: string;
}
interface GetCheckoutURLResponse$1 {
    /** Checkout URL. */
    checkoutUrl?: string;
}
interface UpdateCheckoutRequest$1 {
    /** Checkout information. */
    checkout: Checkout$1;
    /**
     * Coupon code.
     *
     * The checkout can only hold 1 `couponCode` at a time. If an additional `couponCode` is added, it will override the existing `couponCode`.
     */
    couponCode?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used in the [Abandoned Checkout API](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/abandoned-checkout/introduction)
     * to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a
     * standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /** Catalog line items. */
    lineItems?: LineItem$1[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$1[];
}
interface UpdateCheckoutResponse$1 {
    /** Updated checkout. */
    checkout?: Checkout$1;
}
interface RemoveCouponRequest$1 {
    /** ID of the checkout to remove the coupon from. */
    id: string;
}
interface RemoveCouponResponse$1 {
    /** Updated checkout after removal of coupon. */
    checkout?: Checkout$1;
}
interface RemoveGiftCardRequest$1 {
    /** ID of the checkout to remove the gift card from. */
    id: string;
}
interface RemoveGiftCardResponse$1 {
    /** Updated checkout after removal of gift card. */
    checkout?: Checkout$1;
}
interface RemoveOverrideCheckoutUrlRequest$1 {
    /** ID of the checkout to remove the override checkout url from. */
    id: string;
}
interface RemoveOverrideCheckoutUrlResponse$1 {
    /** Updated checkout after removal of override checkout url. */
    checkout?: Checkout$1;
}
interface AddToCheckoutRequest$1 {
    /** Checkout ID. */
    id: string;
    /** Catalog line items. */
    lineItems?: LineItem$1[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$1[];
}
interface AddToCheckoutResponse$1 {
    /** Updated checkout. */
    checkout?: Checkout$1;
}
interface RemoveLineItemsRequest$1 {
    /** ID of the checkout to remove line items from. */
    id: string;
    /** IDs of the line items to remove from the checkout. */
    lineItemIds: string[];
}
interface RemoveLineItemsResponse$1 {
    /** Updated checkout after removal of line items. */
    checkout?: Checkout$1;
}
interface CreateOrderRequest$1 {
    /** Checkout ID. */
    id: string;
    /** Indicates the payment method should be saved on the order */
    savePaymentMethod?: boolean;
    /** Indicates whether to authorize the payment and delay the capture */
    delayCapture?: boolean;
}
interface CreateOrderResponse$1 extends CreateOrderResponseIdOneOf$1 {
    /** ID of newly created order. */
    orderId?: string;
    /** ID of newly created subscription. Learn more about your site's [Subscriptions](https://support.wix.com/en/article/wix-stores-managing-product-subscriptions). */
    subscriptionId?: string;
    /**
     * Payment gateway order ID.
     *
     * For online orders, pass this value as the `paymentId` parameter to the Wix Pay [`startPayment()`](https://www.wix.com/velo/reference/wix-pay-frontend/startpayment) function so your customer can pay for the order.
     * `paymentGatewayOrderId` will be returned if money needs to be charged.
     *
     * In some cases, money cannot be charged:
     * + When the total price (the `priceSummary.total.amount` field in the checkout/order objects) is 0. For example, in the case of a free item or an item with a 100% discount.
     * + If the total price is not 0, but the payment is covered by alternative payment methods, such as a gift card.
     */
    paymentGatewayOrderId?: string | null;
}
/** @oneof */
interface CreateOrderResponseIdOneOf$1 {
    /** ID of newly created order. */
    orderId?: string;
    /** ID of newly created subscription. Learn more about your site's [Subscriptions](https://support.wix.com/en/article/wix-stores-managing-product-subscriptions). */
    subscriptionId?: string;
}
interface MarkCheckoutAsCompletedRequest$1 {
    /** Checkout ID. */
    id: string;
}
interface MarkCheckoutAsCompletedResponse$1 {
}
interface UpdateLineItemsQuantityRequest$1 {
    /** Checkout ID. */
    id: string;
    /** Line item info to update. */
    lineItems: LineItemQuantityUpdate$1[];
}
interface LineItemQuantityUpdate$1 {
    /** ID of the line item to update. */
    id?: string;
    /**
     * New total amount of the line item,
     * not the amount to add to the current `quantity`.
     *
     * Min: `1`
     *
     * Max: `100000`
     */
    quantity?: number;
}
interface UpdateLineItemsQuantityResponse$1 {
    /** Updated checkout. */
    checkout?: Checkout$1;
}
interface GetCheckoutPaymentSettingsRequest$1 {
    /** Checkout ID. */
    id: string;
}
interface GetCheckoutPaymentSettingsResponse$1 {
    blockedPaymentOptions?: GetCheckoutPaymentSettingsResponsePaymentOption$1[];
}
declare enum GetCheckoutPaymentSettingsResponsePaymentOption$1 {
    UNKNOWN_PAYMENT_OPTION = "UNKNOWN_PAYMENT_OPTION",
    MANUAL = "MANUAL"
}
interface CatalogReferenceNonNullableFields$1 {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields$1 {
    original: string;
}
interface PageUrlV2NonNullableFields {
    relativePath: string;
}
interface MultiCurrencyPriceNonNullableFields$1 {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface TaxRateBreakdownNonNullableFields$1 {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields$1;
    exemptAmount?: MultiCurrencyPriceNonNullableFields$1;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields$1;
}
interface TaxBreakdownNonNullableFields$1 {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields$1;
    taxAmount?: MultiCurrencyPriceNonNullableFields$1;
    taxableAmount?: MultiCurrencyPriceNonNullableFields$1;
    jurisdictionType: JurisdictionType$1;
}
interface ItemTaxFullDetailsNonNullableFields$1 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$1;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields$1;
    rateBreakdown: TaxRateBreakdownNonNullableFields$1[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields$1;
    taxBreakdown: TaxBreakdownNonNullableFields$1[];
}
interface PlainTextValueNonNullableFields$1 {
    original: string;
}
interface ColorNonNullableFields$1 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$1 {
    original: string;
}
interface DescriptionLineNonNullableFields$1 {
    plainText?: PlainTextValueNonNullableFields$1;
    colorInfo?: ColorNonNullableFields$1;
    plainTextValue?: PlainTextValueNonNullableFields$1;
    color: string;
    name?: DescriptionLineNameNonNullableFields$1;
    lineType: DescriptionLineType$1;
}
interface CommonImageNonNullableFields {
    id: string;
    url: string;
    height: number;
    width: number;
}
interface ItemAvailabilityInfoNonNullableFields$1 {
    status: ItemAvailabilityStatus$1;
}
interface PhysicalPropertiesNonNullableFields$1 {
    shippable: boolean;
}
interface GroupNonNullableFields$1 {
    name: string;
}
interface ScopeNonNullableFields$1 {
    namespace: string;
    group?: GroupNonNullableFields$1;
}
interface ItemTypeNonNullableFields$1 {
    preset: ItemTypeItemType$1;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields$1 {
    frequency: SubscriptionFrequency$1;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields$1 {
    frequency: SubscriptionFrequency$1;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields$1;
}
interface TitleNonNullableFields$1 {
    original: string;
}
interface DescriptionNonNullableFields$1 {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields$1 {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$1;
    title?: TitleNonNullableFields$1;
    description?: DescriptionNonNullableFields$1;
}
interface SecuredMediaNonNullableFields$1 {
    id: string;
    fileName: string;
    fileType: FileType$1;
}
interface PriceDescriptionNonNullableFields$1 {
    original: string;
}
interface ImageNonNullableFields {
    id: string;
    height: number;
    width: number;
}
interface PaymentOptionNonNullableFields$1 {
    value: PaymentOptionType$1;
}
interface CatalogOverrideFieldsNonNullableFields$1 {
    productName?: ProductNameNonNullableFields$1;
    descriptionLines: DescriptionLineNonNullableFields$1[];
    physicalProperties?: PhysicalPropertiesNonNullableFields$1;
    image?: ImageNonNullableFields;
    paymentOption?: PaymentOptionNonNullableFields$1;
}
interface TaxableAddressNonNullableFields$1 {
    addressType: TaxableAddressType$1;
}
interface PolicyNonNullableFields$1 {
    title: string;
    content: string;
}
interface LineItemNonNullableFields$1 {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields$1;
    productName?: ProductNameNonNullableFields$1;
    url?: PageUrlV2NonNullableFields;
    price?: MultiCurrencyPriceNonNullableFields$1;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields$1;
    fullPrice?: MultiCurrencyPriceNonNullableFields$1;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$1;
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$1;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$1;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$1;
    discount?: MultiCurrencyPriceNonNullableFields$1;
    descriptionLines: DescriptionLineNonNullableFields$1[];
    media?: CommonImageNonNullableFields;
    availability?: ItemAvailabilityInfoNonNullableFields$1;
    physicalProperties?: PhysicalPropertiesNonNullableFields$1;
    couponScopes: ScopeNonNullableFields$1[];
    itemType?: ItemTypeNonNullableFields$1;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields$1;
    digitalFile?: SecuredMediaNonNullableFields$1;
    paymentOption: PaymentOptionType$1;
    priceDescription?: PriceDescriptionNonNullableFields$1;
    depositAmount?: MultiCurrencyPriceNonNullableFields$1;
    customLineItem: boolean;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields$1;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    savePaymentMethod: boolean;
    taxableAddress?: TaxableAddressNonNullableFields$1;
    policies: PolicyNonNullableFields$1[];
}
interface StreetAddressNonNullableFields$1 {
    number: string;
    name: string;
    apt: string;
}
interface ApiAddressNonNullableFields$1 {
    streetAddress?: StreetAddressNonNullableFields$1;
}
interface CommonVatIdNonNullableFields$1 {
    id: string;
    type: CommonVatType$1;
}
interface FullAddressContactDetailsNonNullableFields$1 {
    vatId?: CommonVatIdNonNullableFields$1;
}
interface AddressWithContactNonNullableFields$1 {
    address?: ApiAddressNonNullableFields$1;
    contactDetails?: FullAddressContactDetailsNonNullableFields$1;
}
interface PickupDetailsNonNullableFields$1 {
    address?: ApiAddressNonNullableFields$1;
    businessLocation: boolean;
    pickupMethod: PickupMethod$1;
}
interface DeliveryLogisticsNonNullableFields$1 {
    pickupDetails?: PickupDetailsNonNullableFields$1;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields$1 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$1;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$1;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$1;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$1;
    price?: MultiCurrencyPriceNonNullableFields$1;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields$1 {
    type: ChargeType$1;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$1;
}
interface SelectedCarrierServiceOptionNonNullableFields$1 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$1;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$1;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields$1[];
}
interface ShippingRegionNonNullableFields$1 {
    id: string;
    name: string;
}
interface OtherChargeNonNullableFields$1 {
    type: ChargeType$1;
    price?: MultiCurrencyPriceNonNullableFields$1;
}
interface ShippingPriceNonNullableFields$1 {
    price?: MultiCurrencyPriceNonNullableFields$1;
    otherCharges: OtherChargeNonNullableFields$1[];
}
interface ShippingOptionNonNullableFields$1 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$1;
    cost?: ShippingPriceNonNullableFields$1;
}
interface CarrierServiceOptionNonNullableFields$1 {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields$1[];
}
interface ShippingInfoNonNullableFields$1 {
    shippingDestination?: AddressWithContactNonNullableFields$1;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields$1;
    region?: ShippingRegionNonNullableFields$1;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields$1[];
}
interface BuyerInfoNonNullableFields$1 {
    visitorId: string;
    memberId: string;
    openAccess: boolean;
}
interface PriceSummaryNonNullableFields$1 {
    subtotal?: MultiCurrencyPriceNonNullableFields$1;
    shipping?: MultiCurrencyPriceNonNullableFields$1;
    tax?: MultiCurrencyPriceNonNullableFields$1;
    discount?: MultiCurrencyPriceNonNullableFields$1;
    total?: MultiCurrencyPriceNonNullableFields$1;
    additionalFees?: MultiCurrencyPriceNonNullableFields$1;
}
interface ApplicationErrorNonNullableFields$1 {
    code: string;
    description: string;
}
interface FieldViolationNonNullableFields$1 {
    field: string;
    description: string;
    violatedRule: RuleType$1;
}
interface ValidationErrorNonNullableFields$1 {
    fieldViolations: FieldViolationNonNullableFields$1[];
}
interface DetailsNonNullableFields$1 {
    applicationError?: ApplicationErrorNonNullableFields$1;
    validationError?: ValidationErrorNonNullableFields$1;
}
interface CarrierErrorNonNullableFields$1 {
    carrierId: string;
    error?: DetailsNonNullableFields$1;
}
interface CarrierErrorsNonNullableFields$1 {
    errors: CarrierErrorNonNullableFields$1[];
}
interface CalculationErrorsNonNullableFields$1 {
    generalShippingCalculationError?: DetailsNonNullableFields$1;
    carrierErrors?: CarrierErrorsNonNullableFields$1;
    taxCalculationError?: DetailsNonNullableFields$1;
    couponCalculationError?: DetailsNonNullableFields$1;
    giftCardCalculationError?: DetailsNonNullableFields$1;
    orderValidationErrors: ApplicationErrorNonNullableFields$1[];
    membershipError?: DetailsNonNullableFields$1;
    discountsCalculationError?: DetailsNonNullableFields$1;
}
interface GiftCardNonNullableFields$1 {
    id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields$1;
    appId: string;
}
interface CouponNonNullableFields$1 {
    id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields$1;
    name: string;
    couponType: string;
}
interface MerchantDiscountNonNullableFields$1 {
    amount?: MultiCurrencyPriceNonNullableFields$1;
}
interface DiscountRuleNameNonNullableFields$1 {
    original: string;
}
interface DiscountRuleNonNullableFields$1 {
    id: string;
    name?: DiscountRuleNameNonNullableFields$1;
    amount?: MultiCurrencyPriceNonNullableFields$1;
}
interface LineItemDiscountNonNullableFields$1 {
    id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields$1;
}
interface AppliedDiscountNonNullableFields$1 {
    coupon?: CouponNonNullableFields$1;
    merchantDiscount?: MerchantDiscountNonNullableFields$1;
    discountRule?: DiscountRuleNonNullableFields$1;
    discountType: DiscountType$1;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$1[];
}
interface CustomFieldNonNullableFields$1 {
    title: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields$1 {
    fallbackReason: FallbackReason$1;
    error?: ApplicationErrorNonNullableFields$1;
}
interface TaxCalculationDetailsNonNullableFields$1 {
    manualRateReason: ManualCalculationReason$1;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields$1;
    rateType: RateType$1;
}
interface AggregatedTaxBreakdownNonNullableFields$1 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType$1;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields$1;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields$1;
}
interface TaxSummaryNonNullableFields$1 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$1;
    totalTax?: MultiCurrencyPriceNonNullableFields$1;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields$1;
    totalExempt?: MultiCurrencyPriceNonNullableFields$1;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields$1[];
}
interface CreatedByNonNullableFields$1 {
    userId: string;
    memberId: string;
    visitorId: string;
    appId: string;
}
interface MembershipNameNonNullableFields$1 {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields$1 {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields$1 {
    id: string;
    appId: string;
    name?: MembershipNameNonNullableFields$1;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields$1;
}
interface InvalidMembershipNonNullableFields$1 {
    membership?: MembershipNonNullableFields$1;
    reason: string;
}
interface SelectedMembershipNonNullableFields$1 {
    id: string;
    appId: string;
    lineItemIds: string[];
}
interface SelectedMembershipsNonNullableFields$1 {
    memberships: SelectedMembershipNonNullableFields$1[];
}
interface MembershipOptionsNonNullableFields$1 {
    eligibleMemberships: MembershipNonNullableFields$1[];
    invalidMemberships: InvalidMembershipNonNullableFields$1[];
    selectedMemberships?: SelectedMembershipsNonNullableFields$1;
}
interface AdditionalFeeNonNullableFields$1 {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields$1;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$1;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields$1;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields$1;
    lineItemIds: string[];
}
interface ConversionInfoNonNullableFields$1 {
    siteCurrency: string;
    conversionRate: string;
}
interface OtherNonNullableFields$1 {
    name: NameInOther$1;
}
interface TargetLineItemNonNullableFields$1 {
    name: NameInLineItem$1;
    suggestedFix: SuggestedFix$1;
}
interface TargetNonNullableFields$1 {
    other?: OtherNonNullableFields$1;
    lineItem?: TargetLineItemNonNullableFields$1;
}
interface ViolationNonNullableFields$1 {
    severity: Severity$1;
    target?: TargetNonNullableFields$1;
}
interface CustomSettingsNonNullableFields$1 {
    lockGiftCard: boolean;
    lockCouponCode: boolean;
    disabledPolicyAgreementCheckbox: boolean;
    disabledManualPayment: boolean;
}
interface CustomContentReferenceNonNullableFields$1 {
    appId: string;
    componentId: string;
}
interface ExternalReferenceNonNullableFields$1 {
    appId: string;
}
interface CheckoutNonNullableFields$1 {
    lineItems: LineItemNonNullableFields$1[];
    billingInfo?: AddressWithContactNonNullableFields$1;
    shippingInfo?: ShippingInfoNonNullableFields$1;
    buyerInfo?: BuyerInfoNonNullableFields$1;
    conversionCurrency: string;
    priceSummary?: PriceSummaryNonNullableFields$1;
    calculationErrors?: CalculationErrorsNonNullableFields$1;
    giftCard?: GiftCardNonNullableFields$1;
    appliedDiscounts: AppliedDiscountNonNullableFields$1[];
    customFields: CustomFieldNonNullableFields$1[];
    weightUnit: WeightUnit$1;
    taxSummary?: TaxSummaryNonNullableFields$1;
    currency: string;
    channelType: ChannelType$1;
    siteLanguage: string;
    buyerLanguage: string;
    completed: boolean;
    taxIncludedInPrice: boolean;
    createdBy?: CreatedByNonNullableFields$1;
    payNow?: PriceSummaryNonNullableFields$1;
    payLater?: PriceSummaryNonNullableFields$1;
    membershipOptions?: MembershipOptionsNonNullableFields$1;
    additionalFees: AdditionalFeeNonNullableFields$1[];
    conversionInfo?: ConversionInfoNonNullableFields$1;
    payNowTotalAfterGiftCard?: MultiCurrencyPriceNonNullableFields$1;
    violations: ViolationNonNullableFields$1[];
    totalAfterGiftCard?: MultiCurrencyPriceNonNullableFields$1;
    customSettings?: CustomSettingsNonNullableFields$1;
    customContentReference?: CustomContentReferenceNonNullableFields$1;
    externalReference?: ExternalReferenceNonNullableFields$1;
}
interface CreateCheckoutResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface GetCheckoutResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface GetCheckoutByCartIdResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface GetCheckoutURLResponseNonNullableFields$1 {
    checkoutUrl: string;
}
interface UpdateCheckoutResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface RemoveCouponResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface RemoveGiftCardResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface RemoveOverrideCheckoutUrlResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface AddToCheckoutResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface RemoveLineItemsResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface CreateOrderResponseNonNullableFields$1 {
    orderId: string;
    subscriptionId: string;
}
interface UpdateLineItemsQuantityResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface GetCheckoutPaymentSettingsResponseNonNullableFields$1 {
    blockedPaymentOptions: GetCheckoutPaymentSettingsResponsePaymentOption$1[];
}

interface Checkout {
    /**
     * Checkout ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Line items.
     *
     * Max: 300 items
     * @readonly
     */
    lineItems?: LineItem[];
    /** Billing information. */
    billingInfo?: AddressWithContact;
    /** Shipping information. */
    shippingInfo?: ShippingInfo;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /**
     * All converted prices are displayed in this currency in three-letter [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Calculated price summary for the checkout.
     * @readonly
     */
    priceSummary?: PriceSummary;
    /**
     * Errors when calculating totals.
     * @readonly
     */
    calculationErrors?: CalculationErrors;
    /**
     * Applied gift card details.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     * @readonly
     */
    giftCard?: GiftCard;
    /**
     * Applied discounts.
     * @readonly
     */
    appliedDiscounts?: AppliedDiscount[];
    /** Custom fields. */
    customFields?: CustomField[];
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit;
    /**
     * Tax summary.
     * @readonly
     */
    taxSummary?: TaxSummary;
    /**
     * The currency used when submitting the order.
     * @readonly
     */
    currency?: string;
    /**
     * Sales channel that submitted the order.
     * + `"UNSPECIFIED"`: Unspecified sales channel. This value is not supported.
     * + `"WEB"`: A web client.
     * + `"POS"`: [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395)
     * + `"EBAY"`: [eBay](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop)
     * + `"AMAZON"`: [Amazon](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop)
     * + `"WISH"`: [Wish](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-a-wish-shop)
     * + `"WIX_INVOICES"`: Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings)
     * + `"WIX_APP_STORE"`: [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview)
     * + `"BACKOFFICE_MERCHANT"`: Wix merchant backoffice
     * + `"OTHER_PLATFORM"`: Other sales platform.
     * @readonly
     */
    channelType?: ChannelType;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string;
    /**
     * Whether an order was successfully created from this checkout.
     * For an order to be successful, it must be successfully paid for (unless the total is 0).
     * @readonly
     */
    completed?: boolean;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrice?: boolean;
    /**
     * ID of the checkout's initiator.
     * @readonly
     */
    createdBy?: CreatedBy;
    /**
     * Date and time the checkout was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the checkout was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary;
    /** Memberships to apply when creating the order. */
    membershipOptions?: MembershipOptions;
    /** Additional Fees. */
    additionalFees?: AdditionalFee[];
    /** Cart ID that this checkout was created from. Empty if this checkout wasn't created from a cart. */
    cartId?: string | null;
    /**
     * List of validation violations raised by the [Validations Custom Extension SPI](https://www.wix.com/velo/reference/spis/wix-ecom/ecom-validations/introduction).
     * @readonly
     */
    violations?: Violation[];
    /**
     * Custom field data for the checkout object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /**
     * Additional settings for customization of the checkout process.
     *
     * Custom settings can only be defined when [creating a checkout](https://www.wix.com/velo/reference/wix-ecom-backend/checkout/createcheckout).
     */
    customSettings?: CustomSettings;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference;
}
interface LineItem {
    /**
     * Line item ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Item quantity.
     *
     * Min: `"1"`
     * Max: `"100000"`
     */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: string;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice;
    /**
     * Total line item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    lineItemPrice?: MultiCurrencyPrice;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /**
     * Tax details for this line item.
     * @readonly
     */
    taxDetails?: ItemTaxFullDetails;
    /**
     * Discount for this line item's entire quantity.
     * @readonly
     */
    discount?: MultiCurrencyPrice;
    /**
     * Line item description lines. Used for displaying the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine[];
    /**
     * Line item image details.
     * @readonly
     */
    media?: string;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType;
    /**
     * Subscription option information.
     * @readonly
     */
    subscriptionOptionInfo?: SubscriptionOptionInfo;
    /**
     * Type of selected payment option for current item. Defaults to `"FULL_PAYMENT_ONLINE"`.
     * + `"FULL_PAYMENT_ONLINE"`: The entire payment for this item happens as part of the checkout.
     * + `"FULL_PAYMENT_OFFLINE"`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `"MEMBERSHIP"`: Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `"DEPOSIT_ONLINE"`: Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     * @readonly
     */
    paymentOption?: PaymentOptionType;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field has the same value as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice;
    /**
     * Whether the line item is a custom line item. Custom line items don't trigger the Catalog service plugin.
     * @readonly
     */
    customLineItem?: boolean;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs.
     *
     * Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from your Wix Stores catalog, learn more about [eCommerce integration](https://www.wix.com/velo/reference/wix-stores-backend/ecommerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ProductName {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface MultiCurrencyPrice {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface ItemTaxFullDetails {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown[];
}
interface TaxRateBreakdown {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DescriptionLine extends DescriptionLineValueOneOf, DescriptionLineDescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
    /** Description line name. */
    name?: DescriptionLineName;
}
/** @oneof */
interface DescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf {
}
interface DescriptionLineName {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface ItemAvailabilityInfo {
    /**
     * Item availability status.
     * + `"NOT_FOUND"`: Item does not exist
     * + `"NOT_AVAILABLE"`: Item not in stock
     * + `"PARTIALLY_AVAILABLE"`: Available quantity is less than requested
     */
    status?: ItemAvailabilityStatus;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus {
    AVAILABLE = "AVAILABLE",
    NOT_FOUND = "NOT_FOUND",
    /** Not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
interface PhysicalProperties {
    /** Line item weight. Measurement unit (`"KG"` or `"LB"`) is taken from `order.weightUnit`. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
interface SubscriptionOptionInfo {
    /** Subscription option settings. */
    subscriptionSettings?: SubscriptionSettings;
    /** Subscription option title. */
    title?: Title;
    /** Subscription option description. */
    description?: Description;
}
interface SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency;
    /**
     * Interval of recurring payment.
     *
     * Default: `1`.
     * If SubscriptionFrequency is Day the minimum interval is 7
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal` is `true`. */
    billingCycles?: number | null;
    /**
     * Period until first cycle starts. If applied payNow will be 0
     * If None => no free trial
     */
    freeTrialPeriod?: FreeTrialPeriod;
    /** The date the subscription will start. The subscription will be charged either now or according to freeTrialDays. */
    startDate?: Date | null;
    /**
     * Whether to generate an order each billing cycle. An order will always be generated for the first billing cycle.
     * Default None => will behave like true
     */
    generateOrderEachBillingCycle?: boolean | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface FreeTrialPeriod {
    /** Frequency of priod. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequency;
    /** interval of period */
    interval?: number;
}
interface Title {
    /** Subscription option name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Subscription option name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Description {
    /** Subscription option description. */
    original?: string;
    /** Translated subscription option description. */
    translated?: string | null;
}
declare enum FileType {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface PriceDescription {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface CatalogOverrideFields {
    /** Item name. */
    productName?: ProductName;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /** Item image. */
    image?: string;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface PaymentOption {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType;
}
declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
/** Billing Info and shipping details */
interface AddressWithContact {
    /** Address. */
    address?: ApiAddress;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
}
/** Physical address */
interface ApiAddress {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: CommonVatId;
}
interface CommonVatId {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: CommonVatType;
}
/** tax info types */
declare enum CommonVatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface ShippingInfo {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Selected option out of the options allowed for the `region`. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption;
    /**
     * Shipping region. Based on the address provided.
     * @readonly
     */
    region?: ShippingRegion;
    /**
     * All carrier options for this shipping rule.
     * @readonly
     */
    carrierServiceOptions?: CarrierServiceOption[];
}
interface SelectedCarrierServiceOption {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface DeliveryLogistics {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails;
}
interface PickupDetails {
    /** Pickup address. */
    address?: ApiAddress;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod;
}
declare enum PickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface SelectedCarrierServiceOptionPrices {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice;
}
interface SelectedCarrierServiceOptionOtherCharge {
    /** Type of additional cost. */
    type?: ChargeType;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices;
}
declare enum ChargeType {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface ShippingRegion {
    /**
     * Shipping region ID.
     * @readonly
     */
    _id?: string;
    /** Shipping region name. */
    name?: string;
}
interface CarrierServiceOption {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption[];
}
interface ShippingOption {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics;
    /** Sipping price information. */
    cost?: ShippingPrice;
}
interface ShippingPrice {
    /** Shipping price. */
    price?: MultiCurrencyPrice;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge[];
}
interface OtherCharge {
    /** Type of additional cost. */
    type?: ChargeType;
    /** Price of added cost. */
    price?: MultiCurrencyPrice;
}
interface BuyerInfo extends BuyerInfoIdOneOf {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - If the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * Contact ID. For more information, see the Contacts API.
     * @readonly
     */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - If the buyer is a site member.
     * @readonly
     */
    memberId?: string;
}
interface PriceSummary {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice;
    /** Total tax. */
    tax?: MultiCurrencyPrice;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice;
}
interface CalculationErrors extends CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
    /** Tax calculation error. */
    taxCalculationError?: Details;
    /** Coupon calculation error. */
    couponCalculationError?: Details;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
}
interface Details extends DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError {
    fieldViolations?: FieldViolation[];
}
declare enum RuleType {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation {
    field?: string;
    description?: string;
    violatedRule?: RuleType;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors {
    /** Carrier errors. */
    errors?: CarrierError[];
}
interface CarrierError {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details;
}
interface GiftCard {
    /**
     * Gift Card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule;
    /** Discount type. */
    discountType?: DiscountType;
    /**
     * IDs of the line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule;
}
declare enum DiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice;
    /** Coupon name. */
    name?: string;
}
interface MerchantDiscount {
    /** Discount value. */
    amount?: MultiCurrencyPrice;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName;
    /** Discount value. */
    amount?: MultiCurrencyPrice;
}
interface DiscountRuleName {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface CustomField {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
declare enum WeightUnit {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface TaxSummary {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails;
}
interface TaxCalculationDetails extends TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
    /** Rate calculation type. */
    rateType?: RateType;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
}
declare enum RateType {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails {
    /** reason for fallback */
    fallbackReason?: FallbackReason;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError;
}
declare enum FallbackReason {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
declare enum ChannelType {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CreatedBy extends CreatedByIdOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** @oneof */
interface CreatedByIdOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** Reserved for internal use. */
interface MembershipOptions {
    /**
     * Reserved for internal use.
     * @readonly
     */
    eligibleMemberships?: Membership[];
    /**
     * Reserved for internal use.
     * @readonly
     */
    invalidMemberships?: InvalidMembership[];
    /** Selected membership to apply to this checkout. */
    selectedMemberships?: SelectedMemberships;
}
interface Membership {
    /** Membership ID. */
    _id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName;
    /** Line item IDs which are "paid for" by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface MembershipPaymentCredits {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership {
    /** Membership details. */
    membership?: Membership;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface SelectedMemberships {
    /** Selected memberships. */
    memberships?: SelectedMembership[];
}
interface SelectedMembership {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface AdditionalFee {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface Violation {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target extends TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** @oneof */
interface TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** Available locations on the webpage */
declare enum NameInOther {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther;
}
/** Specific line item violation. */
interface TargetLineItem {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem;
    /** ID of the line item containing the violation. */
    _id?: string | null;
}
interface CustomSettings {
    /**
     * Whether to restrict the option to add or remove a gift card on the checkout page.
     *
     * Default: `false`
     */
    lockGiftCard?: boolean;
    /**
     * Whether to restrict the option to add or remove a coupon code on the checkout page.
     *
     * Default: `false`
     */
    lockCouponCode?: boolean;
    /**
     * Whether to disable policy agreement checkout in the checkout page
     *
     * Default: `false`
     */
    disabledPolicyAgreementCheckbox?: boolean;
    /**
     * Whether to disable manual payment option for this checkout.
     *
     * Default: `false`
     */
    disabledManualPayment?: boolean;
}
interface CustomContentReference {
    /**
     * ID of the app providing the content.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    appId?: string;
    /**
     * ID of the component within the app it belongs to.
     *
     * You can get your component's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    componentId?: string;
}
interface CreateCheckoutRequest {
    /** Checkout information. */
    checkoutInfo?: Checkout;
    /** The code of an existing coupon to apply to checkout. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Catalog line items to add to the checkout. */
    lineItems?: LineItem[];
    /**
     * Custom line items to add to the checkout. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
    /**
     * **Required**
     *  Sales channel type.
     */
    channelType: ChannelType;
    /**
     * Gift card code.
     *
     * The checkout can only hold 1 `giftCardCode` at a time. If an additional `giftCardCode` is added, it will override the existing `giftCardCode`.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     */
    giftCardCode?: string | null;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
}
interface CustomLineItem {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /** Custom line item price. For security reasons, the `price` field should come from backend Velo code, and not be passed from the frontend. */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /** Custom line item description lines. Used for displaying the cart, checkout and order. */
    descriptionLines?: DescriptionLine[];
    /**
     * Custom line item media.
     * + Link to an image/video from the [Wix Media Manager](https://support.wix.com/en/article/wix-media-about-the-media-manager) - `"wix:image://v1/3c76e2_c53...4ea4~mv2.jpg#originWidth=1000&originHeight=1000"`.
     * + An image from the web - `"http(s)://<image url>"`.
     */
    media?: string;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    _id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: string;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface CreateCheckoutResponse {
    /** Newly created checkout. */
    checkout?: Checkout;
}
interface GetCheckoutRequest {
    /** Checkout ID. */
    _id: string;
}
interface GetCheckoutResponse {
    /** The requested checkout. */
    checkout?: Checkout;
}
interface GetCheckoutByCartIdRequest {
    /** Cart ID. */
    _id: string;
}
interface GetCheckoutByCartIdResponse {
    /** The requested checkout. */
    checkout?: Checkout;
}
interface GetCheckoutURLRequest {
    /** Checkout ID. */
    _id: string;
}
interface GetCheckoutURLResponse {
    /** Checkout URL. */
    checkoutUrl?: string;
}
interface UpdateCheckoutRequest {
    /** Checkout information. */
    checkout: Checkout;
    /** The code of an existing coupon to apply to checkout. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
}
interface UpdateCheckoutResponse {
    /** Updated checkout. */
    checkout?: Checkout;
}
interface RemoveCouponRequest {
    /** ID of the checkout to remove the coupon from. */
    _id: string;
}
interface RemoveCouponResponse {
    /** Updated checkout after removal of coupon. */
    checkout?: Checkout;
}
interface RemoveGiftCardRequest {
    /** ID of the checkout to remove the gift card from. */
    _id: string;
}
interface RemoveGiftCardResponse {
    /** Updated checkout after removal of gift card. */
    checkout?: Checkout;
}
interface RemoveOverrideCheckoutUrlRequest {
    /** ID of the checkout to remove the override checkout url from. */
    _id: string;
}
interface RemoveOverrideCheckoutUrlResponse {
    /** Updated checkout after removal of override checkout url. */
    checkout?: Checkout;
}
interface AddToCheckoutRequest {
    /** Checkout ID. */
    _id: string;
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
}
interface AddToCheckoutResponse {
    /** Updated checkout. */
    checkout?: Checkout;
}
interface RemoveLineItemsRequest {
    /** ID of the checkout to remove line items from. */
    _id: string;
    /** IDs of the line items to remove from the checkout. */
    lineItemIds: string[];
}
interface RemoveLineItemsResponse {
    /** Updated checkout after removal of line items. */
    checkout?: Checkout;
}
interface CreateOrderRequest {
    /** Checkout ID. */
    _id: string;
    /** Indicates the payment method should be saved on the order */
    savePaymentMethod?: boolean;
    /** Indicates whether to authorize the payment and delay the capture */
    delayCapture?: boolean;
}
interface CreateOrderResponse extends CreateOrderResponseIdOneOf {
    /** ID of the newly created order. */
    orderId?: string;
    /** ID of newly created subscription. Learn more about your site's [Subscriptions](https://support.wix.com/en/article/wix-stores-managing-product-subscriptions). */
    subscriptionId?: string;
    /**
     * Payment gateway order ID.
     *
     * For online orders, pass this value as the `paymentId` parameter to the Wix Pay [`startPayment()`](https://www.wix.com/velo/reference/wix-pay-frontend/startpayment) function so your customer can pay for the order.
     *
     * This field will be returned if money needs to be charged. In some cases, money cannot be charged:
     * + When the total price (the `priceSummary.total.amount` field in the checkout/order objects) is 0. For example, in the case of a free item or an item with a 100% discount.
     * + If the total price is not 0, but the payment is covered by alternative payment methods, such as a gift card.
     */
    paymentGatewayOrderId?: string | null;
}
/** @oneof */
interface CreateOrderResponseIdOneOf {
    /** ID of newly created order. */
    orderId?: string;
    /** ID of newly created subscription. Learn more about your site's [Subscriptions](https://support.wix.com/en/article/wix-stores-managing-product-subscriptions). */
    subscriptionId?: string;
}
interface MarkCheckoutAsCompletedRequest {
    /** Checkout ID. */
    _id: string;
}
interface MarkCheckoutAsCompletedResponse {
}
interface UpdateLineItemsQuantityRequest {
    /** Checkout ID. */
    _id: string;
    /** Line item info to update. */
    lineItems: LineItemQuantityUpdate[];
}
interface LineItemQuantityUpdate {
    /** ID of the line item to update. */
    _id?: string;
    /**
     * New total amount of the line item,
     * not the amount to add to the current `quantity`.
     *
     * Min: `1`
     *
     * Max: `100000`
     */
    quantity?: number;
}
interface UpdateLineItemsQuantityResponse {
    /** Updated checkout. */
    checkout?: Checkout;
}
interface GetCheckoutPaymentSettingsRequest {
    /** Checkout ID. */
    _id: string;
}
interface GetCheckoutPaymentSettingsResponse {
    blockedPaymentOptions?: GetCheckoutPaymentSettingsResponsePaymentOption[];
}
declare enum GetCheckoutPaymentSettingsResponsePaymentOption {
    UNKNOWN_PAYMENT_OPTION = "UNKNOWN_PAYMENT_OPTION",
    MANUAL = "MANUAL"
}
interface CatalogReferenceNonNullableFields {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields {
    original: string;
}
interface MultiCurrencyPriceNonNullableFields {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface TaxRateBreakdownNonNullableFields {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields;
    exemptAmount?: MultiCurrencyPriceNonNullableFields;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
}
interface TaxBreakdownNonNullableFields {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields;
    taxAmount?: MultiCurrencyPriceNonNullableFields;
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    jurisdictionType: JurisdictionType;
}
interface ItemTaxFullDetailsNonNullableFields {
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields;
    rateBreakdown: TaxRateBreakdownNonNullableFields[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields;
    taxBreakdown: TaxBreakdownNonNullableFields[];
}
interface PlainTextValueNonNullableFields {
    original: string;
}
interface ColorNonNullableFields {
    original: string;
}
interface DescriptionLineNameNonNullableFields {
    original: string;
}
interface DescriptionLineNonNullableFields {
    plainText?: PlainTextValueNonNullableFields;
    colorInfo?: ColorNonNullableFields;
    plainTextValue?: PlainTextValueNonNullableFields;
    color: string;
    name?: DescriptionLineNameNonNullableFields;
    lineType: DescriptionLineType;
}
interface ItemAvailabilityInfoNonNullableFields {
    status: ItemAvailabilityStatus;
}
interface PhysicalPropertiesNonNullableFields {
    shippable: boolean;
}
interface GroupNonNullableFields {
    name: string;
}
interface ScopeNonNullableFields {
    namespace: string;
    group?: GroupNonNullableFields;
}
interface ItemTypeNonNullableFields {
    preset: ItemTypeItemType;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields {
    frequency: SubscriptionFrequency;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields {
    frequency: SubscriptionFrequency;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields;
}
interface TitleNonNullableFields {
    original: string;
}
interface DescriptionNonNullableFields {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields;
    title?: TitleNonNullableFields;
    description?: DescriptionNonNullableFields;
}
interface SecuredMediaNonNullableFields {
    _id: string;
    fileName: string;
    fileType: FileType;
}
interface PriceDescriptionNonNullableFields {
    original: string;
}
interface PaymentOptionNonNullableFields {
    value: PaymentOptionType;
}
interface CatalogOverrideFieldsNonNullableFields {
    productName?: ProductNameNonNullableFields;
    descriptionLines: DescriptionLineNonNullableFields[];
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    image: string;
    paymentOption?: PaymentOptionNonNullableFields;
}
interface TaxableAddressNonNullableFields {
    addressType: TaxableAddressType;
}
interface PolicyNonNullableFields {
    title: string;
    content: string;
}
interface LineItemNonNullableFields {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields;
    productName?: ProductNameNonNullableFields;
    url: string;
    price?: MultiCurrencyPriceNonNullableFields;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields;
    fullPrice?: MultiCurrencyPriceNonNullableFields;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields;
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    discount?: MultiCurrencyPriceNonNullableFields;
    descriptionLines: DescriptionLineNonNullableFields[];
    media: string;
    availability?: ItemAvailabilityInfoNonNullableFields;
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    couponScopes: ScopeNonNullableFields[];
    itemType?: ItemTypeNonNullableFields;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields;
    digitalFile?: SecuredMediaNonNullableFields;
    paymentOption: PaymentOptionType;
    priceDescription?: PriceDescriptionNonNullableFields;
    depositAmount?: MultiCurrencyPriceNonNullableFields;
    customLineItem: boolean;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    savePaymentMethod: boolean;
    taxableAddress?: TaxableAddressNonNullableFields;
    policies: PolicyNonNullableFields[];
}
interface StreetAddressNonNullableFields {
    number: string;
    name: string;
    apt: string;
}
interface ApiAddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields;
}
interface CommonVatIdNonNullableFields {
    _id: string;
    type: CommonVatType;
}
interface FullAddressContactDetailsNonNullableFields {
    vatId?: CommonVatIdNonNullableFields;
}
interface AddressWithContactNonNullableFields {
    address?: ApiAddressNonNullableFields;
    contactDetails?: FullAddressContactDetailsNonNullableFields;
}
interface PickupDetailsNonNullableFields {
    address?: ApiAddressNonNullableFields;
    businessLocation: boolean;
    pickupMethod: PickupMethod;
}
interface DeliveryLogisticsNonNullableFields {
    pickupDetails?: PickupDetailsNonNullableFields;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    totalDiscount?: MultiCurrencyPriceNonNullableFields;
    price?: MultiCurrencyPriceNonNullableFields;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields {
    type: ChargeType;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields;
}
interface SelectedCarrierServiceOptionNonNullableFields {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields[];
}
interface ShippingRegionNonNullableFields {
    _id: string;
    name: string;
}
interface OtherChargeNonNullableFields {
    type: ChargeType;
    price?: MultiCurrencyPriceNonNullableFields;
}
interface ShippingPriceNonNullableFields {
    price?: MultiCurrencyPriceNonNullableFields;
    otherCharges: OtherChargeNonNullableFields[];
}
interface ShippingOptionNonNullableFields {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields;
    cost?: ShippingPriceNonNullableFields;
}
interface CarrierServiceOptionNonNullableFields {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields[];
}
interface ShippingInfoNonNullableFields {
    shippingDestination?: AddressWithContactNonNullableFields;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields;
    region?: ShippingRegionNonNullableFields;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields[];
}
interface BuyerInfoNonNullableFields {
    visitorId: string;
    memberId: string;
    openAccess: boolean;
}
interface PriceSummaryNonNullableFields {
    subtotal?: MultiCurrencyPriceNonNullableFields;
    shipping?: MultiCurrencyPriceNonNullableFields;
    tax?: MultiCurrencyPriceNonNullableFields;
    discount?: MultiCurrencyPriceNonNullableFields;
    total?: MultiCurrencyPriceNonNullableFields;
    additionalFees?: MultiCurrencyPriceNonNullableFields;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface FieldViolationNonNullableFields {
    field: string;
    description: string;
    violatedRule: RuleType;
}
interface ValidationErrorNonNullableFields {
    fieldViolations: FieldViolationNonNullableFields[];
}
interface DetailsNonNullableFields {
    applicationError?: ApplicationErrorNonNullableFields;
    validationError?: ValidationErrorNonNullableFields;
}
interface CarrierErrorNonNullableFields {
    carrierId: string;
    error?: DetailsNonNullableFields;
}
interface CarrierErrorsNonNullableFields {
    errors: CarrierErrorNonNullableFields[];
}
interface CalculationErrorsNonNullableFields {
    generalShippingCalculationError?: DetailsNonNullableFields;
    carrierErrors?: CarrierErrorsNonNullableFields;
    taxCalculationError?: DetailsNonNullableFields;
    couponCalculationError?: DetailsNonNullableFields;
    giftCardCalculationError?: DetailsNonNullableFields;
    orderValidationErrors: ApplicationErrorNonNullableFields[];
    membershipError?: DetailsNonNullableFields;
    discountsCalculationError?: DetailsNonNullableFields;
}
interface GiftCardNonNullableFields {
    _id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields;
    appId: string;
}
interface CouponNonNullableFields {
    _id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields;
    name: string;
    couponType: string;
}
interface MerchantDiscountNonNullableFields {
    amount?: MultiCurrencyPriceNonNullableFields;
}
interface DiscountRuleNameNonNullableFields {
    original: string;
}
interface DiscountRuleNonNullableFields {
    _id: string;
    name?: DiscountRuleNameNonNullableFields;
    amount?: MultiCurrencyPriceNonNullableFields;
}
interface LineItemDiscountNonNullableFields {
    _id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields;
}
interface AppliedDiscountNonNullableFields {
    coupon?: CouponNonNullableFields;
    merchantDiscount?: MerchantDiscountNonNullableFields;
    discountRule?: DiscountRuleNonNullableFields;
    discountType: DiscountType;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields[];
}
interface CustomFieldNonNullableFields {
    title: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields {
    fallbackReason: FallbackReason;
    error?: ApplicationErrorNonNullableFields;
}
interface TaxCalculationDetailsNonNullableFields {
    manualRateReason: ManualCalculationReason;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields;
    rateType: RateType;
}
interface AggregatedTaxBreakdownNonNullableFields {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields;
}
interface TaxSummaryNonNullableFields {
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    totalTax?: MultiCurrencyPriceNonNullableFields;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields;
    totalExempt?: MultiCurrencyPriceNonNullableFields;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields[];
}
interface CreatedByNonNullableFields {
    userId: string;
    memberId: string;
    visitorId: string;
    appId: string;
}
interface MembershipNameNonNullableFields {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields {
    _id: string;
    appId: string;
    name?: MembershipNameNonNullableFields;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields;
}
interface InvalidMembershipNonNullableFields {
    membership?: MembershipNonNullableFields;
    reason: string;
}
interface SelectedMembershipNonNullableFields {
    _id: string;
    appId: string;
    lineItemIds: string[];
}
interface SelectedMembershipsNonNullableFields {
    memberships: SelectedMembershipNonNullableFields[];
}
interface MembershipOptionsNonNullableFields {
    eligibleMemberships: MembershipNonNullableFields[];
    invalidMemberships: InvalidMembershipNonNullableFields[];
    selectedMemberships?: SelectedMembershipsNonNullableFields;
}
interface AdditionalFeeNonNullableFields {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields;
    lineItemIds: string[];
}
interface ConversionInfoNonNullableFields {
    siteCurrency: string;
    conversionRate: string;
}
interface OtherNonNullableFields {
    name: NameInOther;
}
interface TargetLineItemNonNullableFields {
    name: NameInLineItem;
    suggestedFix: SuggestedFix;
}
interface TargetNonNullableFields {
    other?: OtherNonNullableFields;
    lineItem?: TargetLineItemNonNullableFields;
}
interface ViolationNonNullableFields {
    severity: Severity;
    target?: TargetNonNullableFields;
}
interface CustomSettingsNonNullableFields {
    lockGiftCard: boolean;
    lockCouponCode: boolean;
    disabledPolicyAgreementCheckbox: boolean;
    disabledManualPayment: boolean;
}
interface CustomContentReferenceNonNullableFields {
    appId: string;
    componentId: string;
}
interface ExternalReferenceNonNullableFields {
    appId: string;
}
interface CheckoutNonNullableFields {
    lineItems: LineItemNonNullableFields[];
    billingInfo?: AddressWithContactNonNullableFields;
    shippingInfo?: ShippingInfoNonNullableFields;
    buyerInfo?: BuyerInfoNonNullableFields;
    conversionCurrency: string;
    priceSummary?: PriceSummaryNonNullableFields;
    calculationErrors?: CalculationErrorsNonNullableFields;
    giftCard?: GiftCardNonNullableFields;
    appliedDiscounts: AppliedDiscountNonNullableFields[];
    customFields: CustomFieldNonNullableFields[];
    weightUnit: WeightUnit;
    taxSummary?: TaxSummaryNonNullableFields;
    currency: string;
    channelType: ChannelType;
    siteLanguage: string;
    buyerLanguage: string;
    completed: boolean;
    taxIncludedInPrice: boolean;
    createdBy?: CreatedByNonNullableFields;
    payNow?: PriceSummaryNonNullableFields;
    payLater?: PriceSummaryNonNullableFields;
    membershipOptions?: MembershipOptionsNonNullableFields;
    additionalFees: AdditionalFeeNonNullableFields[];
    conversionInfo?: ConversionInfoNonNullableFields;
    payNowTotalAfterGiftCard?: MultiCurrencyPriceNonNullableFields;
    violations: ViolationNonNullableFields[];
    totalAfterGiftCard?: MultiCurrencyPriceNonNullableFields;
    customSettings?: CustomSettingsNonNullableFields;
    customContentReference?: CustomContentReferenceNonNullableFields;
    externalReference?: ExternalReferenceNonNullableFields;
}
interface CreateCheckoutResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface GetCheckoutResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface GetCheckoutByCartIdResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface GetCheckoutURLResponseNonNullableFields {
    checkoutUrl: string;
}
interface UpdateCheckoutResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface RemoveCouponResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface RemoveGiftCardResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface RemoveOverrideCheckoutUrlResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface AddToCheckoutResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface RemoveLineItemsResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface CreateOrderResponseNonNullableFields {
    orderId: string;
    subscriptionId: string;
}
interface UpdateLineItemsQuantityResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface GetCheckoutPaymentSettingsResponseNonNullableFields {
    blockedPaymentOptions: GetCheckoutPaymentSettingsResponsePaymentOption[];
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createCheckout(): __PublicMethodMetaInfo<'POST', {}, CreateCheckoutRequest, CreateCheckoutRequest$1, CreateCheckoutResponse & CreateCheckoutResponseNonNullableFields, CreateCheckoutResponse$1 & CreateCheckoutResponseNonNullableFields$1>;
declare function getCheckout(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetCheckoutRequest, GetCheckoutRequest$1, GetCheckoutResponse & GetCheckoutResponseNonNullableFields, GetCheckoutResponse$1 & GetCheckoutResponseNonNullableFields$1>;
declare function getCheckoutByCartId(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetCheckoutByCartIdRequest, GetCheckoutByCartIdRequest$1, GetCheckoutByCartIdResponse & GetCheckoutByCartIdResponseNonNullableFields, GetCheckoutByCartIdResponse$1 & GetCheckoutByCartIdResponseNonNullableFields$1>;
declare function getCheckoutUrl(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetCheckoutURLRequest, GetCheckoutURLRequest$1, GetCheckoutURLResponse & GetCheckoutURLResponseNonNullableFields, GetCheckoutURLResponse$1 & GetCheckoutURLResponseNonNullableFields$1>;
declare function updateCheckout(): __PublicMethodMetaInfo<'PATCH', {
    checkoutId: string;
}, UpdateCheckoutRequest, UpdateCheckoutRequest$1, UpdateCheckoutResponse & UpdateCheckoutResponseNonNullableFields, UpdateCheckoutResponse$1 & UpdateCheckoutResponseNonNullableFields$1>;
declare function removeCoupon(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, RemoveCouponRequest, RemoveCouponRequest$1, RemoveCouponResponse & RemoveCouponResponseNonNullableFields, RemoveCouponResponse$1 & RemoveCouponResponseNonNullableFields$1>;
declare function removeGiftCard(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, RemoveGiftCardRequest, RemoveGiftCardRequest$1, RemoveGiftCardResponse & RemoveGiftCardResponseNonNullableFields, RemoveGiftCardResponse$1 & RemoveGiftCardResponseNonNullableFields$1>;
declare function removeOverrideCheckoutUrl(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, RemoveOverrideCheckoutUrlRequest, RemoveOverrideCheckoutUrlRequest$1, RemoveOverrideCheckoutUrlResponse & RemoveOverrideCheckoutUrlResponseNonNullableFields, RemoveOverrideCheckoutUrlResponse$1 & RemoveOverrideCheckoutUrlResponseNonNullableFields$1>;
declare function addToCheckout(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, AddToCheckoutRequest, AddToCheckoutRequest$1, AddToCheckoutResponse & AddToCheckoutResponseNonNullableFields, AddToCheckoutResponse$1 & AddToCheckoutResponseNonNullableFields$1>;
declare function removeLineItems(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, RemoveLineItemsRequest, RemoveLineItemsRequest$1, RemoveLineItemsResponse & RemoveLineItemsResponseNonNullableFields, RemoveLineItemsResponse$1 & RemoveLineItemsResponseNonNullableFields$1>;
declare function createOrder(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, CreateOrderRequest, CreateOrderRequest$1, CreateOrderResponse & CreateOrderResponseNonNullableFields, CreateOrderResponse$1 & CreateOrderResponseNonNullableFields$1>;
declare function markCheckoutAsCompleted(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, MarkCheckoutAsCompletedRequest, MarkCheckoutAsCompletedRequest$1, MarkCheckoutAsCompletedResponse, MarkCheckoutAsCompletedResponse$1>;
declare function updateLineItemsQuantity(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, UpdateLineItemsQuantityRequest, UpdateLineItemsQuantityRequest$1, UpdateLineItemsQuantityResponse & UpdateLineItemsQuantityResponseNonNullableFields, UpdateLineItemsQuantityResponse$1 & UpdateLineItemsQuantityResponseNonNullableFields$1>;
declare function getCheckoutPaymentSettings(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetCheckoutPaymentSettingsRequest, GetCheckoutPaymentSettingsRequest$1, GetCheckoutPaymentSettingsResponse & GetCheckoutPaymentSettingsResponseNonNullableFields, GetCheckoutPaymentSettingsResponse$1 & GetCheckoutPaymentSettingsResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, addToCheckout, createCheckout, createOrder, getCheckout, getCheckoutByCartId, getCheckoutPaymentSettings, getCheckoutUrl, markCheckoutAsCompleted, removeCoupon, removeGiftCard, removeLineItems, removeOverrideCheckoutUrl, updateCheckout, updateLineItemsQuantity };
