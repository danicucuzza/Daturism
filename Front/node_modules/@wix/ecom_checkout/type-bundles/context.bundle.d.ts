type HostModule<T, H extends Host> = {
    __type: 'host';
    create(host: H): T;
};
type HostModuleAPI<T extends HostModule<any, any>> = T extends HostModule<infer U, any> ? U : never;
type Host<Environment = unknown> = {
    channel: {
        observeState(callback: (props: unknown, environment: Environment) => unknown): {
            disconnect: () => void;
        } | Promise<{
            disconnect: () => void;
        }>;
    };
    environment?: Environment;
    /**
     * Optional name of the environment, use for logging
     */
    name?: string;
    /**
     * Optional bast url to use for API requests, for example `www.wixapis.com`
     */
    apiBaseUrl?: string;
    /**
     * Possible data to be provided by every host, for cross cutting concerns
     * like internationalization, billing, etc.
     */
    essentials?: {
        /**
         * The language of the currently viewed session
         */
        language?: string;
        /**
         * The locale of the currently viewed session
         */
        locale?: string;
        /**
         * Any headers that should be passed through to the API requests
         */
        passThroughHeaders?: Record<string, string>;
    };
};

type RESTFunctionDescriptor<T extends (...args: any[]) => any = (...args: any[]) => any> = (httpClient: HttpClient) => T;
interface HttpClient {
    request<TResponse, TData = any>(req: RequestOptionsFactory<TResponse, TData>): Promise<HttpResponse<TResponse>>;
    fetchWithAuth: typeof fetch;
    wixAPIFetch: (relativeUrl: string, options: RequestInit) => Promise<Response>;
    getActiveToken?: () => string | undefined;
}
type RequestOptionsFactory<TResponse = any, TData = any> = (context: any) => RequestOptions<TResponse, TData>;
type HttpResponse<T = any> = {
    data: T;
    status: number;
    statusText: string;
    headers: any;
    request?: any;
};
type RequestOptions<_TResponse = any, Data = any> = {
    method: 'POST' | 'GET' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS';
    url: string;
    data?: Data;
    params?: URLSearchParams;
} & APIMetadata;
type APIMetadata = {
    methodFqn?: string;
    entityFqdn?: string;
    packageName?: string;
};
type BuildRESTFunction<T extends RESTFunctionDescriptor> = T extends RESTFunctionDescriptor<infer U> ? U : never;
type EventDefinition<Payload = unknown, Type extends string = string> = {
    __type: 'event-definition';
    type: Type;
    isDomainEvent?: boolean;
    transformations?: (envelope: unknown) => Payload;
    __payload: Payload;
};
declare function EventDefinition<Type extends string>(type: Type, isDomainEvent?: boolean, transformations?: (envelope: any) => unknown): <Payload = unknown>() => EventDefinition<Payload, Type>;
type EventHandler<T extends EventDefinition> = (payload: T['__payload']) => void | Promise<void>;
type BuildEventDefinition<T extends EventDefinition<any, string>> = (handler: EventHandler<T>) => void;

type ServicePluginMethodInput = {
    request: any;
    metadata: any;
};
type ServicePluginContract = Record<string, (payload: ServicePluginMethodInput) => unknown | Promise<unknown>>;
type ServicePluginMethodMetadata = {
    name: string;
    primaryHttpMappingPath: string;
    transformations: {
        fromREST: (...args: unknown[]) => ServicePluginMethodInput;
        toREST: (...args: unknown[]) => unknown;
    };
};
type ServicePluginDefinition<Contract extends ServicePluginContract> = {
    __type: 'service-plugin-definition';
    componentType: string;
    methods: ServicePluginMethodMetadata[];
    __contract: Contract;
};
declare function ServicePluginDefinition<Contract extends ServicePluginContract>(componentType: string, methods: ServicePluginMethodMetadata[]): ServicePluginDefinition<Contract>;
type BuildServicePluginDefinition<T extends ServicePluginDefinition<any>> = (implementation: T['__contract']) => void;
declare const SERVICE_PLUGIN_ERROR_TYPE = "wix_spi_error";

type RequestContext = {
    isSSR: boolean;
    host: string;
    protocol?: string;
};
type ResponseTransformer = (data: any, headers?: any) => any;
/**
 * Ambassador request options types are copied mostly from AxiosRequestConfig.
 * They are copied and not imported to reduce the amount of dependencies (to reduce install time).
 * https://github.com/axios/axios/blob/3f53eb6960f05a1f88409c4b731a40de595cb825/index.d.ts#L307-L315
 */
type Method = 'get' | 'GET' | 'delete' | 'DELETE' | 'head' | 'HEAD' | 'options' | 'OPTIONS' | 'post' | 'POST' | 'put' | 'PUT' | 'patch' | 'PATCH' | 'purge' | 'PURGE' | 'link' | 'LINK' | 'unlink' | 'UNLINK';
type AmbassadorRequestOptions<T = any> = {
    _?: T;
    url?: string;
    method?: Method;
    params?: any;
    data?: any;
    transformResponse?: ResponseTransformer | ResponseTransformer[];
};
type AmbassadorFactory<Request, Response> = (payload: Request) => ((context: RequestContext) => AmbassadorRequestOptions<Response>) & {
    __isAmbassador: boolean;
};
type AmbassadorFunctionDescriptor<Request = any, Response = any> = AmbassadorFactory<Request, Response>;
type BuildAmbassadorFunction<T extends AmbassadorFunctionDescriptor> = T extends AmbassadorFunctionDescriptor<infer Request, infer Response> ? (req: Request) => Promise<Response> : never;

declare global {
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- It has to be an `interface` so that it can be merged.
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}

declare const emptyObjectSymbol: unique symbol;

/**
Represents a strictly empty plain object, the `{}` value.

When you annotate something as the type `{}`, it can be anything except `null` and `undefined`. This means that you cannot use `{}` to represent an empty plain object ([read more](https://stackoverflow.com/questions/47339869/typescript-empty-object-and-any-difference/52193484#52193484)).

@example
```
import type {EmptyObject} from 'type-fest';

// The following illustrates the problem with `{}`.
const foo1: {} = {}; // Pass
const foo2: {} = []; // Pass
const foo3: {} = 42; // Pass
const foo4: {} = {a: 1}; // Pass

// With `EmptyObject` only the first case is valid.
const bar1: EmptyObject = {}; // Pass
const bar2: EmptyObject = 42; // Fail
const bar3: EmptyObject = []; // Fail
const bar4: EmptyObject = {a: 1}; // Fail
```

Unfortunately, `Record<string, never>`, `Record<keyof any, never>` and `Record<never, never>` do not work. See {@link https://github.com/sindresorhus/type-fest/issues/395 #395}.

@category Object
*/
type EmptyObject = {[emptyObjectSymbol]?: never};

/**
Returns a boolean for whether the two given types are equal.

@link https://github.com/microsoft/TypeScript/issues/27024#issuecomment-421529650
@link https://stackoverflow.com/questions/68961864/how-does-the-equals-work-in-typescript/68963796#68963796

Use-cases:
- If you want to make a conditional branch based on the result of a comparison of two types.

@example
```
import type {IsEqual} from 'type-fest';

// This type returns a boolean for whether the given array includes the given item.
// `IsEqual` is used to compare the given array at position 0 and the given item and then return true if they are equal.
type Includes<Value extends readonly any[], Item> =
	Value extends readonly [Value[0], ...infer rest]
		? IsEqual<Value[0], Item> extends true
			? true
			: Includes<rest, Item>
		: false;
```

@category Type Guard
@category Utilities
*/
type IsEqual<A, B> =
	(<G>() => G extends A ? 1 : 2) extends
	(<G>() => G extends B ? 1 : 2)
		? true
		: false;

/**
Filter out keys from an object.

Returns `never` if `Exclude` is strictly equal to `Key`.
Returns `never` if `Key` extends `Exclude`.
Returns `Key` otherwise.

@example
```
type Filtered = Filter<'foo', 'foo'>;
//=> never
```

@example
```
type Filtered = Filter<'bar', string>;
//=> never
```

@example
```
type Filtered = Filter<'bar', 'foo'>;
//=> 'bar'
```

@see {Except}
*/
type Filter<KeyType, ExcludeType> = IsEqual<KeyType, ExcludeType> extends true ? never : (KeyType extends ExcludeType ? never : KeyType);

type ExceptOptions = {
	/**
	Disallow assigning non-specified properties.

	Note that any omitted properties in the resulting type will be present in autocomplete as `undefined`.

	@default false
	*/
	requireExactProps?: boolean;
};

/**
Create a type from an object type without certain keys.

We recommend setting the `requireExactProps` option to `true`.

This type is a stricter version of [`Omit`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-5.html#the-omit-helper-type). The `Omit` type does not restrict the omitted keys to be keys present on the given type, while `Except` does. The benefits of a stricter type are avoiding typos and allowing the compiler to pick up on rename refactors automatically.

This type was proposed to the TypeScript team, which declined it, saying they prefer that libraries implement stricter versions of the built-in types ([microsoft/TypeScript#30825](https://github.com/microsoft/TypeScript/issues/30825#issuecomment-523668235)).

@example
```
import type {Except} from 'type-fest';

type Foo = {
	a: number;
	b: string;
};

type FooWithoutA = Except<Foo, 'a'>;
//=> {b: string}

const fooWithoutA: FooWithoutA = {a: 1, b: '2'};
//=> errors: 'a' does not exist in type '{ b: string; }'

type FooWithoutB = Except<Foo, 'b', {requireExactProps: true}>;
//=> {a: number} & Partial<Record<"b", never>>

const fooWithoutB: FooWithoutB = {a: 1, b: '2'};
//=> errors at 'b': Type 'string' is not assignable to type 'undefined'.
```

@category Object
*/
type Except<ObjectType, KeysType extends keyof ObjectType, Options extends ExceptOptions = {requireExactProps: false}> = {
	[KeyType in keyof ObjectType as Filter<KeyType, KeysType>]: ObjectType[KeyType];
} & (Options['requireExactProps'] extends true
	? Partial<Record<KeysType, never>>
	: {});

/**
Returns a boolean for whether the given type is `never`.

@link https://github.com/microsoft/TypeScript/issues/31751#issuecomment-498526919
@link https://stackoverflow.com/a/53984913/10292952
@link https://www.zhenghao.io/posts/ts-never

Useful in type utilities, such as checking if something does not occur.

@example
```
import type {IsNever, And} from 'type-fest';

// https://github.com/andnp/SimplyTyped/blob/master/src/types/strings.ts
type AreStringsEqual<A extends string, B extends string> =
	And<
		IsNever<Exclude<A, B>> extends true ? true : false,
		IsNever<Exclude<B, A>> extends true ? true : false
	>;

type EndIfEqual<I extends string, O extends string> =
	AreStringsEqual<I, O> extends true
		? never
		: void;

function endIfEqual<I extends string, O extends string>(input: I, output: O): EndIfEqual<I, O> {
	if (input === output) {
		process.exit(0);
	}
}

endIfEqual('abc', 'abc');
//=> never

endIfEqual('abc', '123');
//=> void
```

@category Type Guard
@category Utilities
*/
type IsNever<T> = [T] extends [never] ? true : false;

/**
An if-else-like type that resolves depending on whether the given type is `never`.

@see {@link IsNever}

@example
```
import type {IfNever} from 'type-fest';

type ShouldBeTrue = IfNever<never>;
//=> true

type ShouldBeBar = IfNever<'not never', 'foo', 'bar'>;
//=> 'bar'
```

@category Type Guard
@category Utilities
*/
type IfNever<T, TypeIfNever = true, TypeIfNotNever = false> = (
	IsNever<T> extends true ? TypeIfNever : TypeIfNotNever
);

/**
Extract the keys from a type where the value type of the key extends the given `Condition`.

Internally this is used for the `ConditionalPick` and `ConditionalExcept` types.

@example
```
import type {ConditionalKeys} from 'type-fest';

interface Example {
	a: string;
	b: string | number;
	c?: string;
	d: {};
}

type StringKeysOnly = ConditionalKeys<Example, string>;
//=> 'a'
```

To support partial types, make sure your `Condition` is a union of undefined (for example, `string | undefined`) as demonstrated below.

@example
```
import type {ConditionalKeys} from 'type-fest';

type StringKeysAndUndefined = ConditionalKeys<Example, string | undefined>;
//=> 'a' | 'c'
```

@category Object
*/
type ConditionalKeys<Base, Condition> =
{
	// Map through all the keys of the given base type.
	[Key in keyof Base]-?:
	// Pick only keys with types extending the given `Condition` type.
	Base[Key] extends Condition
	// Retain this key
	// If the value for the key extends never, only include it if `Condition` also extends never
		? IfNever<Base[Key], IfNever<Condition, Key, never>, Key>
	// Discard this key since the condition fails.
		: never;
	// Convert the produced object into a union type of the keys which passed the conditional test.
}[keyof Base];

/**
Exclude keys from a shape that matches the given `Condition`.

This is useful when you want to create a new type with a specific set of keys from a shape. For example, you might want to exclude all the primitive properties from a class and form a new shape containing everything but the primitive properties.

@example
```
import type {Primitive, ConditionalExcept} from 'type-fest';

class Awesome {
	name: string;
	successes: number;
	failures: bigint;

	run() {}
}

type ExceptPrimitivesFromAwesome = ConditionalExcept<Awesome, Primitive>;
//=> {run: () => void}
```

@example
```
import type {ConditionalExcept} from 'type-fest';

interface Example {
	a: string;
	b: string | number;
	c: () => void;
	d: {};
}

type NonStringKeysOnly = ConditionalExcept<Example, string>;
//=> {b: string | number; c: () => void; d: {}}
```

@category Object
*/
type ConditionalExcept<Base, Condition> = Except<
Base,
ConditionalKeys<Base, Condition>
>;

/**
 * Descriptors are objects that describe the API of a module, and the module
 * can either be a REST module or a host module.
 * This type is recursive, so it can describe nested modules.
 */
type Descriptors = RESTFunctionDescriptor | AmbassadorFunctionDescriptor | HostModule<any, any> | EventDefinition<any> | ServicePluginDefinition<any> | {
    [key: string]: Descriptors | PublicMetadata | any;
};
/**
 * This type takes in a descriptors object of a certain Host (including an `unknown` host)
 * and returns an object with the same structure, but with all descriptors replaced with their API.
 * Any non-descriptor properties are removed from the returned object, including descriptors that
 * do not match the given host (as they will not work with the given host).
 */
type BuildDescriptors<T extends Descriptors, H extends Host<any> | undefined, Depth extends number = 5> = {
    done: T;
    recurse: T extends {
        __type: typeof SERVICE_PLUGIN_ERROR_TYPE;
    } ? never : T extends AmbassadorFunctionDescriptor ? BuildAmbassadorFunction<T> : T extends RESTFunctionDescriptor ? BuildRESTFunction<T> : T extends EventDefinition<any> ? BuildEventDefinition<T> : T extends ServicePluginDefinition<any> ? BuildServicePluginDefinition<T> : T extends HostModule<any, any> ? HostModuleAPI<T> : ConditionalExcept<{
        [Key in keyof T]: T[Key] extends Descriptors ? BuildDescriptors<T[Key], H, [
            -1,
            0,
            1,
            2,
            3,
            4,
            5
        ][Depth]> : never;
    }, EmptyObject>;
}[Depth extends -1 ? 'done' : 'recurse'];
type PublicMetadata = {
    PACKAGE_NAME?: string;
};

declare global {
    interface ContextualClient {
    }
}
/**
 * A type used to create concerete types from SDK descriptors in
 * case a contextual client is available.
 */
type MaybeContext<T extends Descriptors> = globalThis.ContextualClient extends {
    host: Host;
} ? BuildDescriptors<T, globalThis.ContextualClient['host']> : T;

interface Checkout {
    /**
     * Checkout ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Line items.
     *
     * Max: 300 items
     * @readonly
     */
    lineItems?: LineItem[];
    /** Billing information. */
    billingInfo?: AddressWithContact;
    /** Shipping information. */
    shippingInfo?: ShippingInfo;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /**
     * All converted prices are displayed in this currency in three-letter [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Calculated price summary for the checkout.
     * @readonly
     */
    priceSummary?: PriceSummary;
    /**
     * Errors when calculating totals.
     * @readonly
     */
    calculationErrors?: CalculationErrors;
    /**
     * Applied gift card details.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     * @readonly
     */
    giftCard?: GiftCard;
    /**
     * Applied discounts.
     * @readonly
     */
    appliedDiscounts?: AppliedDiscount[];
    /** Custom fields. */
    customFields?: CustomField[];
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit;
    /**
     * Tax summary.
     * @readonly
     */
    taxSummary?: TaxSummary;
    /**
     * The currency used when submitting the order.
     * @readonly
     */
    currency?: string;
    /**
     * Sales channel that submitted the order.
     * + `"UNSPECIFIED"`: Unspecified sales channel. This value is not supported.
     * + `"WEB"`: A web client.
     * + `"POS"`: [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395)
     * + `"EBAY"`: [eBay](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop)
     * + `"AMAZON"`: [Amazon](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop)
     * + `"WISH"`: [Wish](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-a-wish-shop)
     * + `"WIX_INVOICES"`: Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings)
     * + `"WIX_APP_STORE"`: [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview)
     * + `"BACKOFFICE_MERCHANT"`: Wix merchant backoffice
     * + `"OTHER_PLATFORM"`: Other sales platform.
     * @readonly
     */
    channelType?: ChannelType;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string;
    /**
     * Whether an order was successfully created from this checkout.
     * For an order to be successful, it must be successfully paid for (unless the total is 0).
     * @readonly
     */
    completed?: boolean;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrice?: boolean;
    /**
     * ID of the checkout's initiator.
     * @readonly
     */
    createdBy?: CreatedBy;
    /**
     * Date and time the checkout was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the checkout was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary;
    /** Memberships to apply when creating the order. */
    membershipOptions?: MembershipOptions;
    /** Additional Fees. */
    additionalFees?: AdditionalFee[];
    /** Cart ID that this checkout was created from. Empty if this checkout wasn't created from a cart. */
    cartId?: string | null;
    /**
     * List of validation violations raised by the [Validations Custom Extension SPI](https://www.wix.com/velo/reference/spis/wix-ecom/ecom-validations/introduction).
     * @readonly
     */
    violations?: Violation[];
    /**
     * Custom field data for the checkout object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /**
     * Additional settings for customization of the checkout process.
     *
     * Custom settings can only be defined when [creating a checkout](https://www.wix.com/velo/reference/wix-ecom-backend/checkout/createcheckout).
     */
    customSettings?: CustomSettings;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference;
}
interface LineItem {
    /**
     * Line item ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Item quantity.
     *
     * Min: `"1"`
     * Max: `"100000"`
     */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: string;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice;
    /**
     * Total line item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    lineItemPrice?: MultiCurrencyPrice;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /**
     * Tax details for this line item.
     * @readonly
     */
    taxDetails?: ItemTaxFullDetails;
    /**
     * Discount for this line item's entire quantity.
     * @readonly
     */
    discount?: MultiCurrencyPrice;
    /**
     * Line item description lines. Used for displaying the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine[];
    /**
     * Line item image details.
     * @readonly
     */
    media?: string;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType;
    /**
     * Subscription option information.
     * @readonly
     */
    subscriptionOptionInfo?: SubscriptionOptionInfo;
    /**
     * Type of selected payment option for current item. Defaults to `"FULL_PAYMENT_ONLINE"`.
     * + `"FULL_PAYMENT_ONLINE"`: The entire payment for this item happens as part of the checkout.
     * + `"FULL_PAYMENT_OFFLINE"`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `"MEMBERSHIP"`: Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `"DEPOSIT_ONLINE"`: Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     * @readonly
     */
    paymentOption?: PaymentOptionType;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field has the same value as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice;
    /**
     * Whether the line item is a custom line item. Custom line items don't trigger the Catalog service plugin.
     * @readonly
     */
    customLineItem?: boolean;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs.
     *
     * Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from your Wix Stores catalog, learn more about [eCommerce integration](https://www.wix.com/velo/reference/wix-stores-backend/ecommerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ProductName {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface MultiCurrencyPrice {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface ItemTaxFullDetails {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown[];
}
interface TaxRateBreakdown {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice;
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface TaxBreakdown {
    /** The name of the jurisdiction to which this tax detail applies. For example, "New York" or "Quebec". */
    jurisdiction?: string | null;
    /** The amount of this line item price that was considered nontaxable. (Decimal value) */
    nonTaxableAmount?: MultiCurrencyPrice;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.0000 signifies 200% tax. (Decimal value) */
    rate?: string | null;
    /** The amount of tax estimated for this line item. (Decimal value) */
    taxAmount?: MultiCurrencyPrice;
    /** The taxable amount of this line item. */
    taxableAmount?: MultiCurrencyPrice;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** The type of the jurisdiction in which this tax detail applies. */
    jurisdictionType?: JurisdictionType;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DescriptionLine extends DescriptionLineValueOneOf, DescriptionLineDescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
    /** Description line name. */
    name?: DescriptionLineName;
}
/** @oneof */
interface DescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf {
}
interface DescriptionLineName {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface ItemAvailabilityInfo {
    /**
     * Item availability status.
     * + `"NOT_FOUND"`: Item does not exist
     * + `"NOT_AVAILABLE"`: Item not in stock
     * + `"PARTIALLY_AVAILABLE"`: Available quantity is less than requested
     */
    status?: ItemAvailabilityStatus;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus {
    AVAILABLE = "AVAILABLE",
    NOT_FOUND = "NOT_FOUND",
    /** Not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
interface PhysicalProperties {
    /** Line item weight. Measurement unit (`"KG"` or `"LB"`) is taken from `order.weightUnit`. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface Scope {
    /** Scope namespace (Wix Stores, Wix Bookings, Wix Events, Wix Pricing Plans) */
    namespace?: string;
    /** Coupon scope's applied group (e.g., event or ticket in Wix Events) */
    group?: Group;
}
interface Group {
    /** Coupon scope's group (e.g., product or collection in Wix Stores). See [valid scope values](https://dev.wix.com/api/rest/coupons/coupons/valid-scope-values). */
    name?: string;
    /** Item ID (when the coupon scope is limited to just one item). */
    entityId?: string | null;
}
interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
interface SubscriptionOptionInfo {
    /** Subscription option settings. */
    subscriptionSettings?: SubscriptionSettings;
    /** Subscription option title. */
    title?: Title;
    /** Subscription option description. */
    description?: Description;
}
interface SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency;
    /**
     * Interval of recurring payment.
     *
     * Default: `1`.
     * If SubscriptionFrequency is Day the minimum interval is 7
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal` is `true`. */
    billingCycles?: number | null;
    /**
     * Period until first cycle starts. If applied payNow will be 0
     * If None => no free trial
     */
    freeTrialPeriod?: FreeTrialPeriod;
    /** The date the subscription will start. The subscription will be charged either now or according to freeTrialDays. */
    startDate?: Date | null;
    /**
     * Whether to generate an order each billing cycle. An order will always be generated for the first billing cycle.
     * Default None => will behave like true
     */
    generateOrderEachBillingCycle?: boolean | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface FreeTrialPeriod {
    /** Frequency of priod. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequency;
    /** interval of period */
    interval?: number;
}
interface Title {
    /** Subscription option name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Subscription option name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Description {
    /** Subscription option description. */
    original?: string;
    /** Translated subscription option description. */
    translated?: string | null;
}
interface SecuredMedia {
    /** Media ID in Wix Media Manager. */
    _id?: string;
    /** Original filename. */
    fileName?: string;
    /** File type. */
    fileType?: FileType;
}
declare enum FileType {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface PriceDescription {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface CatalogOverrideFields {
    /** Item name. */
    productName?: ProductName;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /** Item image. */
    image?: string;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface PaymentOption {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType;
}
interface TaxableAddress extends TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType;
}
/** @oneof */
interface TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType;
}
declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface Policy {
    /** Policy title - should be translated */
    title?: string;
    /** Policy content - should be translated */
    content?: string;
}
/** Billing Info and shipping details */
interface AddressWithContact {
    /** Address. */
    address?: ApiAddress;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
}
/** Physical address */
interface ApiAddress {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
/** Full contact details for an address */
interface FullAddressContactDetails {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: CommonVatId;
}
interface CommonVatId {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: CommonVatType;
}
/** tax info types */
declare enum CommonVatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface ShippingInfo {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Selected option out of the options allowed for the `region`. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption;
    /**
     * Shipping region. Based on the address provided.
     * @readonly
     */
    region?: ShippingRegion;
    /**
     * All carrier options for this shipping rule.
     * @readonly
     */
    carrierServiceOptions?: CarrierServiceOption[];
}
interface SelectedCarrierServiceOption {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface DeliveryLogistics {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails;
}
interface PickupDetails {
    /** Pickup address. */
    address?: ApiAddress;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod;
}
declare enum PickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
interface SelectedCarrierServiceOptionPrices {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice;
}
interface SelectedCarrierServiceOptionOtherCharge {
    /** Type of additional cost. */
    type?: ChargeType;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices;
}
declare enum ChargeType {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface ShippingRegion {
    /**
     * Shipping region ID.
     * @readonly
     */
    _id?: string;
    /** Shipping region name. */
    name?: string;
}
interface CarrierServiceOption {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption[];
}
interface ShippingOption {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics;
    /** Sipping price information. */
    cost?: ShippingPrice;
}
interface ShippingPrice {
    /** Shipping price. */
    price?: MultiCurrencyPrice;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge[];
}
interface OtherCharge {
    /** Type of additional cost. */
    type?: ChargeType;
    /** Price of added cost. */
    price?: MultiCurrencyPrice;
}
interface BuyerInfo extends BuyerInfoIdOneOf {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - If the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * Contact ID. For more information, see the Contacts API.
     * @readonly
     */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - If the buyer is a site member.
     * @readonly
     */
    memberId?: string;
}
interface PriceSummary {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice;
    /** Total tax. */
    tax?: MultiCurrencyPrice;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice;
}
interface CalculationErrors extends CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
    /** Tax calculation error. */
    taxCalculationError?: Details;
    /** Coupon calculation error. */
    couponCalculationError?: Details;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
}
interface Details extends DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError {
    fieldViolations?: FieldViolation[];
}
declare enum RuleType {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation {
    field?: string;
    description?: string;
    violatedRule?: RuleType;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors {
    /** Carrier errors. */
    errors?: CarrierError[];
}
interface CarrierError {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details;
}
interface GiftCard {
    /**
     * Gift Card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule;
    /** Discount type. */
    discountType?: DiscountType;
    /**
     * IDs of the line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule;
}
declare enum DiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice;
    /** Coupon name. */
    name?: string;
}
interface MerchantDiscount {
    /** Discount value. */
    amount?: MultiCurrencyPrice;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName;
    /** Discount value. */
    amount?: MultiCurrencyPrice;
}
interface DiscountRuleName {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface LineItemDiscount {
    /** ID of line item the discount applies to. */
    _id?: string;
    /** Discount value. */
    totalDiscountAmount?: MultiCurrencyPrice;
}
interface CustomField {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
declare enum WeightUnit {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface TaxSummary {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails;
}
interface TaxCalculationDetails extends TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
    /** Rate calculation type. */
    rateType?: RateType;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
}
declare enum RateType {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails {
    /** reason for fallback */
    fallbackReason?: FallbackReason;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError;
}
declare enum FallbackReason {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface AggregatedTaxBreakdown {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionTypeEnum?: JurisdictionType;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.000 signifies 200% tax. (Decimal value) */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: MultiCurrencyPrice;
}
declare enum ChannelType {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CreatedBy extends CreatedByIdOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** @oneof */
interface CreatedByIdOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** Reserved for internal use. */
interface MembershipOptions {
    /**
     * Reserved for internal use.
     * @readonly
     */
    eligibleMemberships?: Membership[];
    /**
     * Reserved for internal use.
     * @readonly
     */
    invalidMemberships?: InvalidMembership[];
    /** Selected membership to apply to this checkout. */
    selectedMemberships?: SelectedMemberships;
}
interface Membership {
    /** Membership ID. */
    _id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName;
    /** Line item IDs which are "paid for" by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface MembershipPaymentCredits {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership {
    /** Membership details. */
    membership?: Membership;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface SelectedMemberships {
    /** Selected memberships. */
    memberships?: SelectedMembership[];
}
interface SelectedMembership {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface AdditionalFee {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface ConversionInfo {
    /**
     * The site currency.
     * @readonly
     */
    siteCurrency?: string;
    /**
     * The rate used when converting from the site currency to the checkout currency.
     * @readonly
     */
    conversionRate?: string;
}
interface Violation {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target extends TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** @oneof */
interface TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** Available locations on the webpage */
declare enum NameInOther {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther;
}
/** Specific line item violation. */
interface TargetLineItem {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem;
    /** ID of the line item containing the violation. */
    _id?: string | null;
}
interface CustomSettings {
    /**
     * Whether to restrict the option to add or remove a gift card on the checkout page.
     *
     * Default: `false`
     */
    lockGiftCard?: boolean;
    /**
     * Whether to restrict the option to add or remove a coupon code on the checkout page.
     *
     * Default: `false`
     */
    lockCouponCode?: boolean;
    /**
     * Whether to disable policy agreement checkout in the checkout page
     *
     * Default: `false`
     */
    disabledPolicyAgreementCheckbox?: boolean;
    /**
     * Whether to disable manual payment option for this checkout.
     *
     * Default: `false`
     */
    disabledManualPayment?: boolean;
}
interface CustomContentReference {
    /**
     * ID of the app providing the content.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    appId?: string;
    /**
     * ID of the component within the app it belongs to.
     *
     * You can get your component's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    componentId?: string;
}
interface ExternalReference {
    /**
     * ID of the app associated with the purchase flow.
     * For example, the Wix Pay Links app ID.
     */
    appId?: string;
    /**
     * Reference to an external resource ID. Used to link the purchase flow to a specific entity in an external system.
     * For example, a Wix Pay Link ID.
     */
    resourceId?: string | null;
}
interface UpdatedCheckoutMessage {
    /** Previous checkout. */
    oldCheckout?: Checkout;
    /** Updated checkout. */
    updatedCheckout?: Checkout;
}
interface CreateCheckoutRequest {
    /** Checkout information. */
    checkoutInfo?: Checkout;
    /** The code of an existing coupon to apply to checkout. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Catalog line items to add to the checkout. */
    lineItems?: LineItem[];
    /**
     * Custom line items to add to the checkout. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
    /**
     * **Required**
     *  Sales channel type.
     */
    channelType: ChannelType;
    /**
     * Gift card code.
     *
     * The checkout can only hold 1 `giftCardCode` at a time. If an additional `giftCardCode` is added, it will override the existing `giftCardCode`.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     */
    giftCardCode?: string | null;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
}
interface CustomLineItem {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /** Custom line item price. For security reasons, the `price` field should come from backend Velo code, and not be passed from the frontend. */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /** Custom line item description lines. Used for displaying the cart, checkout and order. */
    descriptionLines?: DescriptionLine[];
    /**
     * Custom line item media.
     * + Link to an image/video from the [Wix Media Manager](https://support.wix.com/en/article/wix-media-about-the-media-manager) - `"wix:image://v1/3c76e2_c53...4ea4~mv2.jpg#originWidth=1000&originHeight=1000"`.
     * + An image from the web - `"http(s)://<image url>"`.
     */
    media?: string;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    _id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: string;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface MerchantDiscountInput {
    /** Discount amount. */
    amount?: string;
    /** IDs of the line items the discount applies to. */
    lineItemIds?: string[];
}
interface CreateCheckoutResponse {
    /** Newly created checkout. */
    checkout?: Checkout;
}
interface ShippingCalculationErrorData extends ShippingCalculationErrorDataShippingCalculationErrorOneOf {
    generalShippingCalculationError?: Details;
    carrierErrors?: CarrierErrors;
}
/** @oneof */
interface ShippingCalculationErrorDataShippingCalculationErrorOneOf {
    generalShippingCalculationError?: Details;
    carrierErrors?: CarrierErrors;
}
interface GetCheckoutRequest {
    /** Checkout ID. */
    _id: string;
}
interface GetCheckoutResponse {
    /** The requested checkout. */
    checkout?: Checkout;
}
interface GetCheckoutWithAllExtendedFieldsRequest {
    /** Checkout ID. */
    _id?: string;
}
interface GetCheckoutWithAllExtendedFieldsResponse {
    /** The requested checkout. */
    checkout?: Checkout;
}
interface GetCheckoutByCartIdRequest {
    /** Cart ID. */
    _id: string;
}
interface GetCheckoutByCartIdResponse {
    /** The requested checkout. */
    checkout?: Checkout;
}
interface GetWixCheckoutURLRequest {
    /** Checkout ID. */
    _id?: string;
}
interface GetWixCheckoutURLResponse {
    /** Checkout URL. */
    checkoutUrl?: string;
}
interface GetCheckoutURLRequest {
    /** Checkout ID. */
    _id: string;
}
interface GetCheckoutURLResponse {
    /** Checkout URL. */
    checkoutUrl?: string;
}
interface UpdateCheckoutRequest {
    /** Checkout information. */
    checkout: Checkout;
    /** The code of an existing coupon to apply to checkout. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
}
interface UpdateCheckoutResponse {
    /** Updated checkout. */
    checkout?: Checkout;
}
interface RemoveCouponRequest {
    /** ID of the checkout to remove the coupon from. */
    _id: string;
}
interface RemoveCouponResponse {
    /** Updated checkout after removal of coupon. */
    checkout?: Checkout;
}
interface RemoveGiftCardRequest {
    /** ID of the checkout to remove the gift card from. */
    _id: string;
}
interface RemoveGiftCardResponse {
    /** Updated checkout after removal of gift card. */
    checkout?: Checkout;
}
interface RemoveOverrideCheckoutUrlRequest {
    /** ID of the checkout to remove the override checkout url from. */
    _id: string;
}
interface RemoveOverrideCheckoutUrlResponse {
    /** Updated checkout after removal of override checkout url. */
    checkout?: Checkout;
}
interface AddToCheckoutRequest {
    /** Checkout ID. */
    _id: string;
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
}
interface AddToCheckoutResponse {
    /** Updated checkout. */
    checkout?: Checkout;
}
interface RemoveLineItemsRequest {
    /** ID of the checkout to remove line items from. */
    _id: string;
    /** IDs of the line items to remove from the checkout. */
    lineItemIds: string[];
}
interface RemoveLineItemsResponse {
    /** Updated checkout after removal of line items. */
    checkout?: Checkout;
}
interface CreateOrderRequest {
    /** Checkout ID. */
    _id: string;
    /** Indicates the payment method should be saved on the order */
    savePaymentMethod?: boolean;
    /** Indicates whether to authorize the payment and delay the capture */
    delayCapture?: boolean;
}
interface CreateOrderResponse extends CreateOrderResponseIdOneOf {
    /** ID of the newly created order. */
    orderId?: string;
    /** ID of newly created subscription. Learn more about your site's [Subscriptions](https://support.wix.com/en/article/wix-stores-managing-product-subscriptions). */
    subscriptionId?: string;
    /**
     * Payment gateway order ID.
     *
     * For online orders, pass this value as the `paymentId` parameter to the Wix Pay [`startPayment()`](https://www.wix.com/velo/reference/wix-pay-frontend/startpayment) function so your customer can pay for the order.
     *
     * This field will be returned if money needs to be charged. In some cases, money cannot be charged:
     * + When the total price (the `priceSummary.total.amount` field in the checkout/order objects) is 0. For example, in the case of a free item or an item with a 100% discount.
     * + If the total price is not 0, but the payment is covered by alternative payment methods, such as a gift card.
     */
    paymentGatewayOrderId?: string | null;
}
/** @oneof */
interface CreateOrderResponseIdOneOf {
    /** ID of newly created order. */
    orderId?: string;
    /** ID of newly created subscription. Learn more about your site's [Subscriptions](https://support.wix.com/en/article/wix-stores-managing-product-subscriptions). */
    subscriptionId?: string;
}
interface PaymentErrorResponseData {
    paymentResponseToken?: string | null;
    transactionStatus?: string;
    failureDetails?: string | null;
}
interface DoublePaymentErrorData extends DoublePaymentErrorDataIdOneOf {
    orderId?: string;
    subscriptionId?: string;
}
/** @oneof */
interface DoublePaymentErrorDataIdOneOf {
    orderId?: string;
    subscriptionId?: string;
}
interface RedeemErrorData {
    reason?: string;
}
interface ViolationsList {
    /** Violations risen by ValidationsSPI implementers. */
    violations?: Violation[];
}
interface CreateOrderAndChargeRequest {
    /** Checkout ID. */
    _id?: string;
    /** Payment token. */
    paymentToken?: string | null;
    /** Indicates the payment method should be saved on the order */
    savePaymentMethod?: boolean;
    /** Indicates whether to authorize the payment and delay the capture */
    delayCapture?: boolean;
}
interface CreateOrderAndChargeResponse extends CreateOrderAndChargeResponseIdOneOf {
    /** ID of newly created order. */
    orderId?: string;
    /** ID of newly created subscription. */
    subscriptionId?: string;
    /** Payment response token. */
    paymentResponseToken?: string | null;
    /**
     * For online orders, send this value as a parameter to the Wix Pay [`startPayment()`](https://www.wix.com/velo/reference/wix-pay/startpayment) function to enable your buyer to pay for the order.
     * `paymentGatewayOrderId` will be returned if money needs to be charged.
     *
     * In some cases, money should not be charged:
     * + If the total price is 0. For example, in the case of a free item or an item with 100% discount.
     * + If the total price is not 0, but the payment is covered by alternative payment methods, such as a gift card.
     */
    paymentGatewayOrderId?: string | null;
}
/** @oneof */
interface CreateOrderAndChargeResponseIdOneOf {
    /** ID of newly created order. */
    orderId?: string;
    /** ID of newly created subscription. */
    subscriptionId?: string;
}
interface MarkCheckoutAsCompletedRequest {
    /** Checkout ID. */
    _id: string;
}
interface MarkCheckoutAsCompletedResponse {
}
/** Triggered when buyer successfully completed checkout flow */
interface CheckoutMarkedAsCompleted {
    checkout?: Checkout;
}
interface UpdateLineItemsQuantityRequest {
    /** Checkout ID. */
    _id: string;
    /** Line item info to update. */
    lineItems: LineItemQuantityUpdate[];
}
interface LineItemQuantityUpdate {
    /** ID of the line item to update. */
    _id?: string;
    /**
     * New total amount of the line item,
     * not the amount to add to the current `quantity`.
     *
     * Min: `1`
     *
     * Max: `100000`
     */
    quantity?: number;
}
interface UpdateLineItemsQuantityResponse {
    /** Updated checkout. */
    checkout?: Checkout;
}
interface GetCheckoutPaymentSettingsRequest {
    /** Checkout ID. */
    _id: string;
}
interface GetCheckoutPaymentSettingsResponse {
    blockedPaymentOptions?: GetCheckoutPaymentSettingsResponsePaymentOption[];
}
declare enum GetCheckoutPaymentSettingsResponsePaymentOption {
    UNKNOWN_PAYMENT_OPTION = "UNKNOWN_PAYMENT_OPTION",
    MANUAL = "MANUAL"
}
interface SubscriptionCreated {
    subscription?: Subscription;
}
interface Subscription {
    /**
     * Subscription id (auto-generated upon subscription creation)
     * @readonly
     */
    _id?: string;
    /** id of subscription in external system */
    externalId?: string | null;
    /**
     * Subscription creation date
     * @readonly
     */
    dateCreated?: Date | null;
    /** The id of the cart this order was created from */
    cartId?: string | null;
    /** The id of the checkout this subscriptions was created from */
    checkoutId?: string | null;
    /** member or contact */
    buyerInfo?: V1BuyerInfo;
    /** Line items ordered */
    lineItems?: V1LineItem[];
    /** Totals for subscription's line items */
    totals?: Totals;
    /** site settings at the moment when subscription created */
    storeSettings?: StoreSettings;
    /** Full billing address */
    billingAddress?: Address;
    /** Delivery information */
    shippingInfo?: V1ShippingInfo;
    /** Coupon that was applied to subscription */
    appliedCoupon?: AppliedCoupon;
    /** Message from the customer (e.g., customization request) */
    buyerNote?: string | null;
    /** Custom field */
    customField?: V1CustomField;
    /** Information about subscription option from which subscription was created */
    subscriptionOptionInfo?: V1SubscriptionOptionInfo;
    /** Sales channel that submitted this subscription */
    channelInfo?: ChannelInfo;
    /** defines when subscriber will be charged: for frequency=MONTH, billingCycles=6, interval=2 payment will be done every 2 month during one year */
    subscriptionSettings?: V1SubscriptionSettings;
    /**
     * information about first subscription payment
     * @readonly
     */
    billingInfo?: BillingInfo;
}
/** Buyer Info */
interface V1BuyerInfo {
    /** Wix customer ID */
    _id?: string;
    /** Customer type */
    identityType?: IdentityType;
}
declare enum IdentityType {
    UNSPECIFIED_IDENTITY_TYPE = "UNSPECIFIED_IDENTITY_TYPE",
    /** Site member */
    MEMBER = "MEMBER",
    /** Contact */
    CONTACT = "CONTACT"
}
interface V1LineItem {
    /** Line item ID (auto-generated) */
    index?: number;
    /** Line item quantity */
    quantity?: number;
    /** Line item variantId (from Stores Catalog) */
    variantId?: string | null;
    /** Line item options ordered */
    options?: OptionSelection[];
    /** Line item custom text field selections */
    customTextFields?: CustomTextFieldSelection[];
    /** Charges details */
    chargeDetails?: ChargeDetails;
    /** Product details */
    productDetails?: ProductDetails;
}
interface OptionSelection {
    /** Option name */
    option?: string;
    /** Selected choice for this option */
    selection?: string;
}
interface CustomTextFieldSelection {
    /** Custom text field name */
    title?: string;
    /** Custom text field value */
    value?: string;
}
interface ChargeDetails {
    /** price of line item (depends on subscription option) */
    price?: number;
    /** Total price charged to the customer (for this line items) after computation of quantity and discount */
    totalPrice?: number | null;
    /** Discount applied for this line item */
    discount?: number | null;
    /** Tax applied for this line item */
    tax?: number | null;
    /** Is tax applied for this line item */
    taxIncludedInPrice?: boolean;
    /** Tax rate %, as a decimal point >= 0 */
    taxRate?: string | null;
}
interface ProductDetails {
    /** Line item product ID (optional for POS orders) */
    productId?: string | null;
    /** Line item name */
    name?: string;
    /** Line item name translated to buyer's language */
    translatedName?: string | null;
    /** Line item type (may be extended) */
    lineItemType?: LineItemType;
    /** Line item primary media for preview */
    mediaItem?: MediaItem;
    /** Line item SKU */
    sku?: string | null;
    /** Line item weight */
    weight?: number | null;
    /** Line item notes */
    notes?: string | null;
    /** Line item fulfillerId from stores fulfillers. No value means self fulfilled */
    fulfillerId?: string | null;
    /** Tax group id */
    taxGroupId?: string | null;
    /** App id from the catalog reference */
    appId?: string | null;
}
declare enum LineItemType {
    /** Line item type can't be classified, due to an error */
    UNSPECIFIED_LINE_ITEM_TYPE = "UNSPECIFIED_LINE_ITEM_TYPE",
    /** Physical item type */
    PHYSICAL = "PHYSICAL",
    /** Digital item type */
    DIGITAL = "DIGITAL",
    /** Custom item price */
    CUSTOM_AMOUNT_ITEM = "CUSTOM_AMOUNT_ITEM"
}
interface MediaItem {
    /**
     * Media type
     * @readonly
     */
    mediaType?: MediaItemType;
    /**
     * Media URL
     * @readonly
     */
    url?: string;
    /**
     * Media item width
     * @readonly
     */
    width?: number;
    /**
     * Media item height
     * @readonly
     */
    height?: number;
    /** Media ID (for media items previously saved in Wix Media) */
    _id?: string | null;
    /** Media external URL */
    externalImageUrl?: string | null;
    /** Alternative text for presentation when media cannot be displayed */
    altText?: string | null;
}
declare enum MediaItemType {
    /** Media item type can't be classified, due to an error */
    UNSPECIFIED_MEDIA_TYPE_ITEM = "UNSPECIFIED_MEDIA_TYPE_ITEM",
    /** Image item type */
    IMAGE = "IMAGE"
}
interface Totals {
    /** Subtotal of all line items, before tax */
    subtotal?: number;
    /** Total shipping price, including tax */
    shipping?: number;
    /** Total tax */
    tax?: number;
    /** Total calculated discount value */
    discount?: number;
    /** Total price */
    total?: number;
    /** Total weight */
    weight?: number | null;
    /**
     * Total line items quantity
     * @readonly
     */
    quantity?: number;
}
interface StoreSettings {
    /** Currency used for pricing in this store */
    currency?: string | null;
    /** Weight unit used in this store */
    weightUnit?: WeightUnit;
    /**
     * The language to be used when communicating with the buyer
     * For a site that support multiple languages, this would be the language the buyer selected
     * Otherwise this would be the site language
     */
    buyerLanguage?: string | null;
}
interface Address extends AddressAddressLine1OptionsOneOf {
    /** Address line 1 (free text) */
    addressLine1?: string;
    /** Address line 1 (street) */
    street?: Street;
    /** Addressee name */
    fullName?: FullName;
    /** Country code (2 letters) */
    country?: string | null;
    /** State or district */
    subdivision?: string | null;
    /** City name */
    city?: string | null;
    /** ZIP/postal code */
    zipCode?: string | null;
    /** Phone number */
    phone?: string | null;
    /** Company name */
    company?: string | null;
    /** Email address */
    email?: string | null;
    /** address line */
    addressLine2?: string | null;
    /** Tax information (for Brazil only) */
    vatId?: VatId;
}
/** @oneof */
interface AddressAddressLine1OptionsOneOf {
    /** Address line 1 (free text) */
    addressLine1?: string;
    /** Address line 1 (street) */
    street?: Street;
}
interface FullName {
    /** Customer's first name */
    firstName?: string;
    /** Customer's last name */
    lastName?: string;
}
interface Street {
    /** Street number */
    number?: string;
    /** Street name */
    name?: string;
}
interface VatId {
    /** Customer's tax ID. */
    number?: string;
    /**
     * Tax type.
     * + `CPF`: For individual tax payers.
     * + `CNPJ`: For corporations.
     */
    type?: VatType;
}
/** Brazilian tax info types */
declare enum VatType {
    /** When the tax info type can't be classified, due to an error */
    UNSPECIFIED_TAX_TYPE = "UNSPECIFIED_TAX_TYPE",
    /** CPF - for individual tax payers */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface V1ShippingInfo extends V1ShippingInfoDetailsOneOf {
    /** Shipment details (when this object describes shipment) */
    shipmentDetails?: ShipmentDetails;
    /** Pickup details (when this object describes pickup) */
    pickupDetails?: V1PickupDetails;
    /** Delivery option name */
    deliveryOption?: string;
    /** Delivery option delivery time */
    estimatedDeliveryTime?: string | null;
}
/** @oneof */
interface V1ShippingInfoDetailsOneOf {
    /** Shipment details (when this object describes shipment) */
    shipmentDetails?: ShipmentDetails;
    /** Pickup details (when this object describes pickup) */
    pickupDetails?: V1PickupDetails;
}
interface ShipmentDetails {
    /** Shipping destination address */
    address?: Address;
    /** Discount applied for shipping */
    discount?: number | null;
    /** Tax applied for shipping */
    tax?: number | null;
    /** Whether tax is included in the price */
    taxIncludedInPrice?: boolean;
    /** Tax rate % for shipping, as a decimal point >= 0 */
    taxRate?: string | null;
}
interface V1PickupDetails {
    /** Pickup address */
    address?: PickupAddress;
    /** Store owner's pickup instructions */
    pickupInstructions?: string | null;
}
interface PickupAddress {
    /** Country code (2 letters) */
    country?: string;
    /** State/District */
    subdivision?: string | null;
    /** Address */
    addressLine?: string;
    /** City */
    city?: string;
    /** ZIP/postal code */
    zipCode?: string;
}
interface AppliedCoupon {
    /** Coupon ID */
    couponId?: string;
    /** Coupon name */
    name?: string;
    /** Coupon code */
    code?: string;
}
/** Custom field */
interface V1CustomField {
    /** Free text that the customer entered in the custom field during the checkout process */
    value?: string;
    /** Title for the custom field */
    title?: string;
    /** The title translated according to the buyer language */
    translatedTitle?: string;
}
interface V1SubscriptionOptionInfo {
    _id?: string | null;
    title?: string;
    description?: string | null;
    discount?: Discount;
}
interface Discount {
    /** Discount type. */
    type?: DiscountDiscountType;
    /** Discount value. */
    value?: number;
}
declare enum DiscountDiscountType {
    UNDEFINED = "UNDEFINED",
    /** No discount */
    AMOUNT = "AMOUNT",
    PERCENT = "PERCENT"
}
interface ChannelInfo {
    /** Sales channel that submitted the subscription */
    type?: ChannelInfoChannelType;
}
declare enum ChannelInfoChannelType {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE"
}
interface V1SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
interface BillingInfo {
    /** Payment method used for this order */
    paymentMethod?: string | null;
    /** Transaction ID from payment gateway (e.g., Wix Payments) */
    paymentGatewayTransactionId?: string | null;
    /** Order ID from payment gateway (e.g., Wix Payments) */
    paymentGatewayOrderId?: string | null;
}
interface Empty {
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface CatalogReferenceNonNullableFields {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields {
    original: string;
}
interface MultiCurrencyPriceNonNullableFields {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface TaxRateBreakdownNonNullableFields {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields;
    exemptAmount?: MultiCurrencyPriceNonNullableFields;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
}
interface TaxBreakdownNonNullableFields {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields;
    taxAmount?: MultiCurrencyPriceNonNullableFields;
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    jurisdictionType: JurisdictionType;
}
interface ItemTaxFullDetailsNonNullableFields {
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields;
    rateBreakdown: TaxRateBreakdownNonNullableFields[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields;
    taxBreakdown: TaxBreakdownNonNullableFields[];
}
interface PlainTextValueNonNullableFields {
    original: string;
}
interface ColorNonNullableFields {
    original: string;
}
interface DescriptionLineNameNonNullableFields {
    original: string;
}
interface DescriptionLineNonNullableFields {
    plainText?: PlainTextValueNonNullableFields;
    colorInfo?: ColorNonNullableFields;
    plainTextValue?: PlainTextValueNonNullableFields;
    color: string;
    name?: DescriptionLineNameNonNullableFields;
    lineType: DescriptionLineType;
}
interface ItemAvailabilityInfoNonNullableFields {
    status: ItemAvailabilityStatus;
}
interface PhysicalPropertiesNonNullableFields {
    shippable: boolean;
}
interface GroupNonNullableFields {
    name: string;
}
interface ScopeNonNullableFields {
    namespace: string;
    group?: GroupNonNullableFields;
}
interface ItemTypeNonNullableFields {
    preset: ItemTypeItemType;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields {
    frequency: SubscriptionFrequency;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields {
    frequency: SubscriptionFrequency;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields;
}
interface TitleNonNullableFields {
    original: string;
}
interface DescriptionNonNullableFields {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields;
    title?: TitleNonNullableFields;
    description?: DescriptionNonNullableFields;
}
interface SecuredMediaNonNullableFields {
    _id: string;
    fileName: string;
    fileType: FileType;
}
interface PriceDescriptionNonNullableFields {
    original: string;
}
interface PaymentOptionNonNullableFields {
    value: PaymentOptionType;
}
interface CatalogOverrideFieldsNonNullableFields {
    productName?: ProductNameNonNullableFields;
    descriptionLines: DescriptionLineNonNullableFields[];
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    image: string;
    paymentOption?: PaymentOptionNonNullableFields;
}
interface TaxableAddressNonNullableFields {
    addressType: TaxableAddressType;
}
interface PolicyNonNullableFields {
    title: string;
    content: string;
}
interface LineItemNonNullableFields {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields;
    productName?: ProductNameNonNullableFields;
    url: string;
    price?: MultiCurrencyPriceNonNullableFields;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields;
    fullPrice?: MultiCurrencyPriceNonNullableFields;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields;
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    discount?: MultiCurrencyPriceNonNullableFields;
    descriptionLines: DescriptionLineNonNullableFields[];
    media: string;
    availability?: ItemAvailabilityInfoNonNullableFields;
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    couponScopes: ScopeNonNullableFields[];
    itemType?: ItemTypeNonNullableFields;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields;
    digitalFile?: SecuredMediaNonNullableFields;
    paymentOption: PaymentOptionType;
    priceDescription?: PriceDescriptionNonNullableFields;
    depositAmount?: MultiCurrencyPriceNonNullableFields;
    customLineItem: boolean;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    savePaymentMethod: boolean;
    taxableAddress?: TaxableAddressNonNullableFields;
    policies: PolicyNonNullableFields[];
}
interface StreetAddressNonNullableFields {
    number: string;
    name: string;
    apt: string;
}
interface ApiAddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields;
}
interface CommonVatIdNonNullableFields {
    _id: string;
    type: CommonVatType;
}
interface FullAddressContactDetailsNonNullableFields {
    vatId?: CommonVatIdNonNullableFields;
}
interface AddressWithContactNonNullableFields {
    address?: ApiAddressNonNullableFields;
    contactDetails?: FullAddressContactDetailsNonNullableFields;
}
interface PickupDetailsNonNullableFields {
    address?: ApiAddressNonNullableFields;
    businessLocation: boolean;
    pickupMethod: PickupMethod;
}
interface DeliveryLogisticsNonNullableFields {
    pickupDetails?: PickupDetailsNonNullableFields;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    totalDiscount?: MultiCurrencyPriceNonNullableFields;
    price?: MultiCurrencyPriceNonNullableFields;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields {
    type: ChargeType;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields;
}
interface SelectedCarrierServiceOptionNonNullableFields {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields[];
}
interface ShippingRegionNonNullableFields {
    _id: string;
    name: string;
}
interface OtherChargeNonNullableFields {
    type: ChargeType;
    price?: MultiCurrencyPriceNonNullableFields;
}
interface ShippingPriceNonNullableFields {
    price?: MultiCurrencyPriceNonNullableFields;
    otherCharges: OtherChargeNonNullableFields[];
}
interface ShippingOptionNonNullableFields {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields;
    cost?: ShippingPriceNonNullableFields;
}
interface CarrierServiceOptionNonNullableFields {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields[];
}
interface ShippingInfoNonNullableFields {
    shippingDestination?: AddressWithContactNonNullableFields;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields;
    region?: ShippingRegionNonNullableFields;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields[];
}
interface BuyerInfoNonNullableFields {
    visitorId: string;
    memberId: string;
    openAccess: boolean;
}
interface PriceSummaryNonNullableFields {
    subtotal?: MultiCurrencyPriceNonNullableFields;
    shipping?: MultiCurrencyPriceNonNullableFields;
    tax?: MultiCurrencyPriceNonNullableFields;
    discount?: MultiCurrencyPriceNonNullableFields;
    total?: MultiCurrencyPriceNonNullableFields;
    additionalFees?: MultiCurrencyPriceNonNullableFields;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface FieldViolationNonNullableFields {
    field: string;
    description: string;
    violatedRule: RuleType;
}
interface ValidationErrorNonNullableFields {
    fieldViolations: FieldViolationNonNullableFields[];
}
interface DetailsNonNullableFields {
    applicationError?: ApplicationErrorNonNullableFields;
    validationError?: ValidationErrorNonNullableFields;
}
interface CarrierErrorNonNullableFields {
    carrierId: string;
    error?: DetailsNonNullableFields;
}
interface CarrierErrorsNonNullableFields {
    errors: CarrierErrorNonNullableFields[];
}
interface CalculationErrorsNonNullableFields {
    generalShippingCalculationError?: DetailsNonNullableFields;
    carrierErrors?: CarrierErrorsNonNullableFields;
    taxCalculationError?: DetailsNonNullableFields;
    couponCalculationError?: DetailsNonNullableFields;
    giftCardCalculationError?: DetailsNonNullableFields;
    orderValidationErrors: ApplicationErrorNonNullableFields[];
    membershipError?: DetailsNonNullableFields;
    discountsCalculationError?: DetailsNonNullableFields;
}
interface GiftCardNonNullableFields {
    _id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields;
    appId: string;
}
interface CouponNonNullableFields {
    _id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields;
    name: string;
    couponType: string;
}
interface MerchantDiscountNonNullableFields {
    amount?: MultiCurrencyPriceNonNullableFields;
}
interface DiscountRuleNameNonNullableFields {
    original: string;
}
interface DiscountRuleNonNullableFields {
    _id: string;
    name?: DiscountRuleNameNonNullableFields;
    amount?: MultiCurrencyPriceNonNullableFields;
}
interface LineItemDiscountNonNullableFields {
    _id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields;
}
interface AppliedDiscountNonNullableFields {
    coupon?: CouponNonNullableFields;
    merchantDiscount?: MerchantDiscountNonNullableFields;
    discountRule?: DiscountRuleNonNullableFields;
    discountType: DiscountType;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields[];
}
interface CustomFieldNonNullableFields {
    title: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields {
    fallbackReason: FallbackReason;
    error?: ApplicationErrorNonNullableFields;
}
interface TaxCalculationDetailsNonNullableFields {
    manualRateReason: ManualCalculationReason;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields;
    rateType: RateType;
}
interface AggregatedTaxBreakdownNonNullableFields {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields;
}
interface TaxSummaryNonNullableFields {
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    totalTax?: MultiCurrencyPriceNonNullableFields;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields;
    totalExempt?: MultiCurrencyPriceNonNullableFields;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields[];
}
interface CreatedByNonNullableFields {
    userId: string;
    memberId: string;
    visitorId: string;
    appId: string;
}
interface MembershipNameNonNullableFields {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields {
    _id: string;
    appId: string;
    name?: MembershipNameNonNullableFields;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields;
}
interface InvalidMembershipNonNullableFields {
    membership?: MembershipNonNullableFields;
    reason: string;
}
interface SelectedMembershipNonNullableFields {
    _id: string;
    appId: string;
    lineItemIds: string[];
}
interface SelectedMembershipsNonNullableFields {
    memberships: SelectedMembershipNonNullableFields[];
}
interface MembershipOptionsNonNullableFields {
    eligibleMemberships: MembershipNonNullableFields[];
    invalidMemberships: InvalidMembershipNonNullableFields[];
    selectedMemberships?: SelectedMembershipsNonNullableFields;
}
interface AdditionalFeeNonNullableFields {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields;
    lineItemIds: string[];
}
interface ConversionInfoNonNullableFields {
    siteCurrency: string;
    conversionRate: string;
}
interface OtherNonNullableFields {
    name: NameInOther;
}
interface TargetLineItemNonNullableFields {
    name: NameInLineItem;
    suggestedFix: SuggestedFix;
}
interface TargetNonNullableFields {
    other?: OtherNonNullableFields;
    lineItem?: TargetLineItemNonNullableFields;
}
interface ViolationNonNullableFields {
    severity: Severity;
    target?: TargetNonNullableFields;
}
interface CustomSettingsNonNullableFields {
    lockGiftCard: boolean;
    lockCouponCode: boolean;
    disabledPolicyAgreementCheckbox: boolean;
    disabledManualPayment: boolean;
}
interface CustomContentReferenceNonNullableFields {
    appId: string;
    componentId: string;
}
interface ExternalReferenceNonNullableFields {
    appId: string;
}
interface CheckoutNonNullableFields {
    lineItems: LineItemNonNullableFields[];
    billingInfo?: AddressWithContactNonNullableFields;
    shippingInfo?: ShippingInfoNonNullableFields;
    buyerInfo?: BuyerInfoNonNullableFields;
    conversionCurrency: string;
    priceSummary?: PriceSummaryNonNullableFields;
    calculationErrors?: CalculationErrorsNonNullableFields;
    giftCard?: GiftCardNonNullableFields;
    appliedDiscounts: AppliedDiscountNonNullableFields[];
    customFields: CustomFieldNonNullableFields[];
    weightUnit: WeightUnit;
    taxSummary?: TaxSummaryNonNullableFields;
    currency: string;
    channelType: ChannelType;
    siteLanguage: string;
    buyerLanguage: string;
    completed: boolean;
    taxIncludedInPrice: boolean;
    createdBy?: CreatedByNonNullableFields;
    payNow?: PriceSummaryNonNullableFields;
    payLater?: PriceSummaryNonNullableFields;
    membershipOptions?: MembershipOptionsNonNullableFields;
    additionalFees: AdditionalFeeNonNullableFields[];
    conversionInfo?: ConversionInfoNonNullableFields;
    payNowTotalAfterGiftCard?: MultiCurrencyPriceNonNullableFields;
    violations: ViolationNonNullableFields[];
    totalAfterGiftCard?: MultiCurrencyPriceNonNullableFields;
    customSettings?: CustomSettingsNonNullableFields;
    customContentReference?: CustomContentReferenceNonNullableFields;
    externalReference?: ExternalReferenceNonNullableFields;
}
interface CreateCheckoutResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface GetCheckoutResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface GetCheckoutByCartIdResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface GetCheckoutURLResponseNonNullableFields {
    checkoutUrl: string;
}
interface UpdateCheckoutResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface RemoveCouponResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface RemoveGiftCardResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface RemoveOverrideCheckoutUrlResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface AddToCheckoutResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface RemoveLineItemsResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface CreateOrderResponseNonNullableFields {
    orderId: string;
    subscriptionId: string;
}
interface UpdateLineItemsQuantityResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface GetCheckoutPaymentSettingsResponseNonNullableFields {
    blockedPaymentOptions: GetCheckoutPaymentSettingsResponsePaymentOption[];
}
interface BaseEventMetadata {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface CheckoutCreatedEnvelope {
    entity: Checkout;
    metadata: EventMetadata;
}
interface CheckoutUpdatedEnvelope {
    entity: Checkout;
    metadata: EventMetadata;
}
interface CheckoutCompletedEnvelope {
    data: CheckoutMarkedAsCompleted;
    metadata: EventMetadata;
}
interface CreateCheckoutOptions {
    /** Checkout information. */
    checkoutInfo?: Checkout;
    /** The code of an existing coupon to apply to checkout. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Catalog line items to add to the checkout. */
    lineItems?: LineItem[];
    /**
     * Custom line items to add to the checkout. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
    /**
     * **Required**
     *  Sales channel type.
     */
    channelType: ChannelType;
    /**
     * Gift card code.
     *
     * The checkout can only hold 1 `giftCardCode` at a time. If an additional `giftCardCode` is added, it will override the existing `giftCardCode`.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     */
    giftCardCode?: string | null;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
}
interface UpdateCheckout {
    /**
     * Checkout ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Line items.
     *
     * Max: 300 items
     * @readonly
     */
    lineItems?: LineItem[];
    /** Billing information. */
    billingInfo?: AddressWithContact;
    /** Shipping information. */
    shippingInfo?: ShippingInfo;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /**
     * All converted prices are displayed in this currency in three-letter [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Calculated price summary for the checkout.
     * @readonly
     */
    priceSummary?: PriceSummary;
    /**
     * Errors when calculating totals.
     * @readonly
     */
    calculationErrors?: CalculationErrors;
    /**
     * Applied gift card details.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     * @readonly
     */
    giftCard?: GiftCard;
    /**
     * Applied discounts.
     * @readonly
     */
    appliedDiscounts?: AppliedDiscount[];
    /** Custom fields. */
    customFields?: CustomField[];
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit;
    /**
     * Tax summary.
     * @readonly
     */
    taxSummary?: TaxSummary;
    /**
     * The currency used when submitting the order.
     * @readonly
     */
    currency?: string;
    /**
     * Sales channel that submitted the order.
     * + `"UNSPECIFIED"`: Unspecified sales channel. This value is not supported.
     * + `"WEB"`: A web client.
     * + `"POS"`: [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395)
     * + `"EBAY"`: [eBay](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop)
     * + `"AMAZON"`: [Amazon](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop)
     * + `"WISH"`: [Wish](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-a-wish-shop)
     * + `"WIX_INVOICES"`: Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings)
     * + `"WIX_APP_STORE"`: [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview)
     * + `"BACKOFFICE_MERCHANT"`: Wix merchant backoffice
     * + `"OTHER_PLATFORM"`: Other sales platform.
     * @readonly
     */
    channelType?: ChannelType;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string;
    /**
     * Whether an order was successfully created from this checkout.
     * For an order to be successful, it must be successfully paid for (unless the total is 0).
     * @readonly
     */
    completed?: boolean;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrice?: boolean;
    /**
     * ID of the checkout's initiator.
     * @readonly
     */
    createdBy?: CreatedBy;
    /**
     * Date and time the checkout was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the checkout was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary;
    /** Memberships to apply when creating the order. */
    membershipOptions?: MembershipOptions;
    /** Additional Fees. */
    additionalFees?: AdditionalFee[];
    /** Cart ID that this checkout was created from. Empty if this checkout wasn't created from a cart. */
    cartId?: string | null;
    /**
     * List of validation violations raised by the [Validations Custom Extension SPI](https://www.wix.com/velo/reference/spis/wix-ecom/ecom-validations/introduction).
     * @readonly
     */
    violations?: Violation[];
    /**
     * Custom field data for the checkout object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /**
     * Additional settings for customization of the checkout process.
     *
     * Custom settings can only be defined when [creating a checkout](https://www.wix.com/velo/reference/wix-ecom-backend/checkout/createcheckout).
     */
    customSettings?: CustomSettings;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference;
}
interface UpdateCheckoutOptions {
    /** The code of an existing coupon to apply to checkout. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
}
interface AddToCheckoutOptions {
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
}
interface CreateOrderOptions {
    /** Indicates the payment method should be saved on the order */
    savePaymentMethod?: boolean;
    /** Indicates whether to authorize the payment and delay the capture */
    delayCapture?: boolean;
}

declare function createCheckout$1(httpClient: HttpClient): CreateCheckoutSignature;
interface CreateCheckoutSignature {
    /**
     * Creates a checkout.
     *
     *
     * The `createCheckout()` function returns a Promise that resolves to the new checkout when it's created.
     *
     * > **Notes:**
     * > + Checkout must include at least 1 item in the `options.lineItems` array.
     * > + `options.channelType` is required.
     * > + If `_id` for `options.lineItems` is added, make sure that each `_id` is unique.
     * > + If `options.checkoutInfo.customFields` are added, then `options.checkoutInfo.customFields.value` is required.
     * @param - Checkout creation options.
     * @returns Fulfilled - the newly created checkout.
     */
    (options?: CreateCheckoutOptions | undefined): Promise<Checkout & CheckoutNonNullableFields>;
}
declare function getCheckout$1(httpClient: HttpClient): GetCheckoutSignature;
interface GetCheckoutSignature {
    /**
     * Retrieves a checkout.
     *
     *
     * The `getCheckout()` function returns a Promise that resolves when the specified checkout is retrieved.
     * @param - Checkout ID.
     * @returns Fulfilled - the requested checkout.
     */
    (_id: string): Promise<Checkout & CheckoutNonNullableFields>;
}
declare function getCheckoutByCartId$1(httpClient: HttpClient): GetCheckoutByCartIdSignature;
interface GetCheckoutByCartIdSignature {
    /**
     * Retrieves the checkout associated with a specified cart.
     * @param - Cart ID.
     */
    (_id: string): Promise<GetCheckoutByCartIdResponse & GetCheckoutByCartIdResponseNonNullableFields>;
}
declare function getCheckoutUrl$1(httpClient: HttpClient): GetCheckoutUrlSignature;
interface GetCheckoutUrlSignature {
    /**
     * Retrieves the checkout page URL of a specified checkout.
     *
     * By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page.
     * However, if `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     * @param - Checkout ID.
     */
    (_id: string): Promise<GetCheckoutURLResponse & GetCheckoutURLResponseNonNullableFields>;
}
declare function updateCheckout$1(httpClient: HttpClient): UpdateCheckoutSignature;
interface UpdateCheckoutSignature {
    /**
     * Updates a checkout.
     *
     *
     * The `updateCheckout()` function returns a Promise that resolves to the updated checkout when the specified properties are updated.
     *
     * >**Notes:**
     * > + If nothing is passed in the request, the call will fail.
     * > + The `checkout.buyerInfo.email` may not be removed once it is set.
     * @param - Checkout ID.
     * @param - Checkout update options.
     * @returns Updated checkout.
     */
    (_id: string | null, checkout: UpdateCheckout, options?: UpdateCheckoutOptions | undefined): Promise<Checkout & CheckoutNonNullableFields>;
}
declare function removeCoupon$1(httpClient: HttpClient): RemoveCouponSignature;
interface RemoveCouponSignature {
    /**
     * Removes the coupon from a specified checkout.
     *
     *
     * The `removeCoupon()` function returns a Promise that resolves to the updated checkout when the coupon is removed from the specified checkout.
     *
     * >**Note:** A checkout can only hold 1 coupon.
     * @param - ID of the checkout to remove the coupon from.
     */
    (_id: string): Promise<RemoveCouponResponse & RemoveCouponResponseNonNullableFields>;
}
declare function removeGiftCard$1(httpClient: HttpClient): RemoveGiftCardSignature;
interface RemoveGiftCardSignature {
    /**
     * Removes the gift card from a specified checkout.
     *
     *
     * The `removeGiftCard()` function returns a Promise that resolves to the updated checkout when the gift card is removed from the specified checkout.
     *
     * >**Note:** A checkout can only hold 1 gift card.
     * @param - ID of the checkout to remove the gift card from.
     */
    (_id: string): Promise<RemoveGiftCardResponse & RemoveGiftCardResponseNonNullableFields>;
}
declare function removeOverrideCheckoutUrl$1(httpClient: HttpClient): RemoveOverrideCheckoutUrlSignature;
interface RemoveOverrideCheckoutUrlSignature {
    /**
     * Removes the `overrideCheckoutUrl` from a specified checkout.
     *
     * When `overrideCheckoutUrl` is removed, the `checkoutUrl` will be set to the default, standard
     * Wix checkout page URL.
     * @param - ID of the checkout to remove the override checkout url from.
     */
    (_id: string): Promise<RemoveOverrideCheckoutUrlResponse & RemoveOverrideCheckoutUrlResponseNonNullableFields>;
}
declare function addToCheckout$1(httpClient: HttpClient): AddToCheckoutSignature;
interface AddToCheckoutSignature {
    /**
     * Adds catalog line items and/or custom line items to a checkout.
     *
     *
     * The `addToCheckout()` function returns a Promise that resolves to the updated checkout when the specified items have been added.
     * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
     * @param - Checkout ID.
     * @param - Items to be added to checkout.
     */
    (_id: string, options?: AddToCheckoutOptions | undefined): Promise<AddToCheckoutResponse & AddToCheckoutResponseNonNullableFields>;
}
declare function removeLineItems$1(httpClient: HttpClient): RemoveLineItemsSignature;
interface RemoveLineItemsSignature {
    /**
     * Removes line items from the specified checkout.
     *
     *
     * The `removeLineItems()` function returns a Promise that resolves to the updated checkout when the line items are removed from the specified checkout.
     * @param - ID of the checkout to remove line items from.
     * @param - IDs of the line items to be removed.
     * To find the IDs of the checkout line items you'd like to remove, pass the `checkout._id` to [getCheckout()](https://www.wix.com/velo/reference/wix-ecom-backend/checkout/getcheckout) and look for the IDs under `lineItems` and/or `customLineItems`.
     */
    (_id: string, lineItemIds: string[]): Promise<RemoveLineItemsResponse & RemoveLineItemsResponseNonNullableFields>;
}
declare function createOrder$1(httpClient: HttpClient): CreateOrderSignature;
interface CreateOrderSignature {
    /**
     * Creates an order from a specified checkout.
     *
     * The `createOrder()` function returns a Promise that resolves to the new order's ID and `paymentGatewayOrderID` when the order is created.
     * Pass the `paymentGatewayOrderId` as the `paymentId` param to the [`startPayment()`](https://www.wix.com/velo/reference/wix-pay-frontend/startpayment) function to allow a customer to pay for their order.
     *
     * > **Note:** The following requirements must be met for an order to be created from a checkout.
     * > + A checkout cannot have calculation errors. Pass the `checkout._id` to [Get Checkout](https://www.wix.com/velo/reference/wix-ecom-backend/checkout/getcheckout) and take a look at the `calculationErrors` field.
     * > + A checkout must have at least 1 line item.
     * > + All of the line Items have an `availability.status` of `"AVAILABLE"` or `"PARTIALLY_AVAILABLE"`.
     * > + If there is a payment to be made, meaning that `priceSummary.total` is greater than 0, the `billingInfo.address` field must be provided.
     * > + When a checkout has line items to be shipped, the `shippingInfo.shippingDestination.address` and `shippingInfo.selectedCarrierServiceOption` fields must be provided.
     * > + When a checkout has line items for pickup, the `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails` field must be provided.
     * @param - Checkout ID.
     * @param - Further order creation options.
     */
    (_id: string, options?: CreateOrderOptions | undefined): Promise<CreateOrderResponse & CreateOrderResponseNonNullableFields>;
}
declare function markCheckoutAsCompleted$1(httpClient: HttpClient): MarkCheckoutAsCompletedSignature;
interface MarkCheckoutAsCompletedSignature {
    /**
     * Marks a checkout as completed - `checkout.complete` boolean is set to `true`.
     *
     *
     * The `markCheckoutAsCompleted()` function returns a Promise that resolves when the specified checkout is marked as completed.
     * @param - Checkout ID.
     */
    (_id: string): Promise<void>;
}
declare function updateLineItemsQuantity$1(httpClient: HttpClient): UpdateLineItemsQuantitySignature;
interface UpdateLineItemsQuantitySignature {
    /**
     * Updates the quantity of one or more line items in a checkout.
     *
     * This endpoint is only for updating the quantity of line items. To entirely remove a line item from
     * the checkout, use [`removeLineItems()`](#removelineitems).
     * To add a new line item to the checkout, use [`addToCheckout()`](#addtocheckout).
     *
     * This endpoint checks the amount of stock remaining for this line item. If the specified `quantity`
     * is greater than the remaining stock, then the `quantity` returned in the response is the total amount
     * of remaining stock.
     * @param - Checkout ID.
     * @param - Line item info to update.
     */
    (_id: string, lineItems: LineItemQuantityUpdate[]): Promise<UpdateLineItemsQuantityResponse & UpdateLineItemsQuantityResponseNonNullableFields>;
}
declare function getCheckoutPaymentSettings$1(httpClient: HttpClient): GetCheckoutPaymentSettingsSignature;
interface GetCheckoutPaymentSettingsSignature {
    /** @param - Checkout ID. */
    (_id: string): Promise<GetCheckoutPaymentSettingsResponse & GetCheckoutPaymentSettingsResponseNonNullableFields>;
}
declare const onCheckoutCreated$1: EventDefinition<CheckoutCreatedEnvelope, "wix.ecom.v1.checkout_created">;
declare const onCheckoutUpdated$1: EventDefinition<CheckoutUpdatedEnvelope, "wix.ecom.v1.checkout_updated">;
declare const onCheckoutCompleted$1: EventDefinition<CheckoutCompletedEnvelope, "wix.ecom.v1.checkout_completed">;

declare function createEventModule<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createCheckout: MaybeContext<BuildRESTFunction<typeof createCheckout$1> & typeof createCheckout$1>;
declare const getCheckout: MaybeContext<BuildRESTFunction<typeof getCheckout$1> & typeof getCheckout$1>;
declare const getCheckoutByCartId: MaybeContext<BuildRESTFunction<typeof getCheckoutByCartId$1> & typeof getCheckoutByCartId$1>;
declare const getCheckoutUrl: MaybeContext<BuildRESTFunction<typeof getCheckoutUrl$1> & typeof getCheckoutUrl$1>;
declare const updateCheckout: MaybeContext<BuildRESTFunction<typeof updateCheckout$1> & typeof updateCheckout$1>;
declare const removeCoupon: MaybeContext<BuildRESTFunction<typeof removeCoupon$1> & typeof removeCoupon$1>;
declare const removeGiftCard: MaybeContext<BuildRESTFunction<typeof removeGiftCard$1> & typeof removeGiftCard$1>;
declare const removeOverrideCheckoutUrl: MaybeContext<BuildRESTFunction<typeof removeOverrideCheckoutUrl$1> & typeof removeOverrideCheckoutUrl$1>;
declare const addToCheckout: MaybeContext<BuildRESTFunction<typeof addToCheckout$1> & typeof addToCheckout$1>;
declare const removeLineItems: MaybeContext<BuildRESTFunction<typeof removeLineItems$1> & typeof removeLineItems$1>;
declare const createOrder: MaybeContext<BuildRESTFunction<typeof createOrder$1> & typeof createOrder$1>;
declare const markCheckoutAsCompleted: MaybeContext<BuildRESTFunction<typeof markCheckoutAsCompleted$1> & typeof markCheckoutAsCompleted$1>;
declare const updateLineItemsQuantity: MaybeContext<BuildRESTFunction<typeof updateLineItemsQuantity$1> & typeof updateLineItemsQuantity$1>;
declare const getCheckoutPaymentSettings: MaybeContext<BuildRESTFunction<typeof getCheckoutPaymentSettings$1> & typeof getCheckoutPaymentSettings$1>;

type _publicOnCheckoutCreatedType = typeof onCheckoutCreated$1;
/**
 * Triggered when a checkout is created.
 */
declare const onCheckoutCreated: ReturnType<typeof createEventModule<_publicOnCheckoutCreatedType>>;

type _publicOnCheckoutUpdatedType = typeof onCheckoutUpdated$1;
/**
 * Triggered when a checkout is updated.
 */
declare const onCheckoutUpdated: ReturnType<typeof createEventModule<_publicOnCheckoutUpdatedType>>;

type _publicOnCheckoutCompletedType = typeof onCheckoutCompleted$1;
/**
 * Triggered when an order created from this checkout is
 * successfully paid for or when a checkout is marked as completed.
 */
declare const onCheckoutCompleted: ReturnType<typeof createEventModule<_publicOnCheckoutCompletedType>>;

export { type ActionEvent, type AddToCheckoutOptions, type AddToCheckoutRequest, type AddToCheckoutResponse, type AddToCheckoutResponseNonNullableFields, type AdditionalFee, type Address, type AddressAddressLine1OptionsOneOf, type AddressLocation, type AddressWithContact, type AggregatedTaxBreakdown, type ApiAddress, type ApplicationError, type AppliedCoupon, type AppliedDiscount, type AppliedDiscountDiscountSourceOneOf, type AutoTaxFallbackCalculationDetails, type BaseEventMetadata, type BillingInfo, type BuyerInfo, type BuyerInfoIdOneOf, type CalculationErrors, type CalculationErrorsShippingCalculationErrorOneOf, type CarrierError, type CarrierErrors, type CarrierServiceOption, type CatalogOverrideFields, type CatalogReference, type ChannelInfo, ChannelInfoChannelType, ChannelType, type ChargeDetails, ChargeType, type Checkout, type CheckoutCompletedEnvelope, type CheckoutCreatedEnvelope, type CheckoutMarkedAsCompleted, type CheckoutNonNullableFields, type CheckoutUpdatedEnvelope, type Color, type CommonVatId, CommonVatType, type ConversionInfo, type Coupon, type CreateCheckoutOptions, type CreateCheckoutRequest, type CreateCheckoutResponse, type CreateCheckoutResponseNonNullableFields, type CreateOrderAndChargeRequest, type CreateOrderAndChargeResponse, type CreateOrderAndChargeResponseIdOneOf, type CreateOrderOptions, type CreateOrderRequest, type CreateOrderResponse, type CreateOrderResponseIdOneOf, type CreateOrderResponseNonNullableFields, type CreatedBy, type CreatedByIdOneOf, type CustomContentReference, type CustomField, type CustomLineItem, type CustomSettings, type CustomTextFieldSelection, type DeliveryLogistics, type DeliveryTimeSlot, type Description, type DescriptionLine, type DescriptionLineDescriptionLineValueOneOf, type DescriptionLineName, DescriptionLineType, type DescriptionLineValueOneOf, type Details, type DetailsKindOneOf, type Discount, DiscountDiscountType, type DiscountRule, type DiscountRuleName, DiscountType, type DomainEvent, type DomainEventBodyOneOf, type DoublePaymentErrorData, type DoublePaymentErrorDataIdOneOf, type Empty, type EntityCreatedEvent, type EntityDeletedEvent, type EntityUpdatedEvent, type EventMetadata, type ExtendedFields, type ExternalReference, FallbackReason, type FieldViolation, FileType, type FreeTrialPeriod, type FullAddressContactDetails, type FullName, type GetCheckoutByCartIdRequest, type GetCheckoutByCartIdResponse, type GetCheckoutByCartIdResponseNonNullableFields, type GetCheckoutPaymentSettingsRequest, type GetCheckoutPaymentSettingsResponse, type GetCheckoutPaymentSettingsResponseNonNullableFields, GetCheckoutPaymentSettingsResponsePaymentOption, type GetCheckoutRequest, type GetCheckoutResponse, type GetCheckoutResponseNonNullableFields, type GetCheckoutURLRequest, type GetCheckoutURLResponse, type GetCheckoutURLResponseNonNullableFields, type GetCheckoutWithAllExtendedFieldsRequest, type GetCheckoutWithAllExtendedFieldsResponse, type GetWixCheckoutURLRequest, type GetWixCheckoutURLResponse, type GiftCard, type Group, type IdentificationData, type IdentificationDataIdOneOf, IdentityType, type InvalidMembership, type ItemAvailabilityInfo, ItemAvailabilityStatus, type ItemTaxFullDetails, type ItemType, ItemTypeItemType, type ItemTypeItemTypeDataOneOf, JurisdictionType, type LineItem, type LineItemDiscount, type LineItemQuantityUpdate, LineItemType, ManualCalculationReason, type MarkCheckoutAsCompletedRequest, type MarkCheckoutAsCompletedResponse, type MediaItem, MediaItemType, type Membership, type MembershipName, type MembershipOptions, type MembershipPaymentCredits, type MerchantDiscount, type MerchantDiscountInput, type MessageEnvelope, type MultiCurrencyPrice, NameInLineItem, NameInOther, type OptionSelection, type Other, type OtherCharge, type PaymentErrorResponseData, type PaymentOption, PaymentOptionType, type PhysicalProperties, type PickupAddress, type PickupDetails, PickupMethod, type PlainTextValue, type Policy, type PriceDescription, type PriceSummary, type ProductDetails, type ProductName, RateType, type RedeemErrorData, type RemoveCouponRequest, type RemoveCouponResponse, type RemoveCouponResponseNonNullableFields, type RemoveGiftCardRequest, type RemoveGiftCardResponse, type RemoveGiftCardResponseNonNullableFields, type RemoveLineItemsRequest, type RemoveLineItemsResponse, type RemoveLineItemsResponseNonNullableFields, type RemoveOverrideCheckoutUrlRequest, type RemoveOverrideCheckoutUrlResponse, type RemoveOverrideCheckoutUrlResponseNonNullableFields, type RestoreInfo, RuleType, type Scope, type SecuredMedia, type SelectedCarrierServiceOption, type SelectedCarrierServiceOptionOtherCharge, type SelectedCarrierServiceOptionPrices, type SelectedMembership, type SelectedMemberships, type ServiceProperties, Severity, type ShipmentDetails, type ShippingCalculationErrorData, type ShippingCalculationErrorDataShippingCalculationErrorOneOf, type ShippingInfo, type ShippingOption, type ShippingPrice, type ShippingRegion, type StoreSettings, type Street, type StreetAddress, type Subscription, type SubscriptionCreated, SubscriptionFrequency, type SubscriptionOptionInfo, type SubscriptionSettings, SuggestedFix, type SystemError, type Target, type TargetLineItem, type TargetTargetTypeOneOf, type TaxBreakdown, type TaxCalculationDetails, type TaxCalculationDetailsCalculationDetailsOneOf, type TaxRateBreakdown, type TaxSummary, type TaxableAddress, type TaxableAddressTaxableAddressDataOneOf, TaxableAddressType, type Title, type Totals, type UpdateCheckout, type UpdateCheckoutOptions, type UpdateCheckoutRequest, type UpdateCheckoutResponse, type UpdateCheckoutResponseNonNullableFields, type UpdateLineItemsQuantityRequest, type UpdateLineItemsQuantityResponse, type UpdateLineItemsQuantityResponseNonNullableFields, type UpdatedCheckoutMessage, type V1BuyerInfo, type V1CustomField, type V1LineItem, type V1PickupDetails, type V1ShippingInfo, type V1ShippingInfoDetailsOneOf, type V1SubscriptionOptionInfo, type V1SubscriptionSettings, type ValidationError, type VatId, VatType, type Violation, type ViolationsList, WebhookIdentityType, WeightUnit, type _publicOnCheckoutCompletedType, type _publicOnCheckoutCreatedType, type _publicOnCheckoutUpdatedType, addToCheckout, createCheckout, createOrder, getCheckout, getCheckoutByCartId, getCheckoutPaymentSettings, getCheckoutUrl, markCheckoutAsCompleted, onCheckoutCompleted, onCheckoutCreated, onCheckoutUpdated, onCheckoutCompleted$1 as publicOnCheckoutCompleted, onCheckoutCreated$1 as publicOnCheckoutCreated, onCheckoutUpdated$1 as publicOnCheckoutUpdated, removeCoupon, removeGiftCard, removeLineItems, removeOverrideCheckoutUrl, updateCheckout, updateLineItemsQuantity };
