/** DraftOrder is the main entity of DraftOrders service. It represents a single edit order. */
interface DraftOrder$1 {
    /**
     * Draft order ID.
     * @readonly
     */
    id?: string | null;
    /** ID of the order this draft commits to. */
    orderId?: string | null;
    /**
     * Line items.
     * Includes details about changes when relevant.
     */
    lineItems?: ItemDetails$1[];
    /**
     * Shipping info.
     * Includes details about changes when relevant.
     */
    shippingInfo?: ShippingDetails$1;
    /**
     * Buyer information.
     * @deprecated Buyer information.
     * @replacedBy buyer_info_details
     * @targetRemovalDate 2024-08-30
     */
    buyerInfo?: BuyerInfo$1;
    /**
     * Billing address and contact details.
     * @deprecated Billing address and contact details.
     * @replacedBy billing_info_details
     * @targetRemovalDate 2024-08-30
     */
    billingInfo?: AddressWithContact$1;
    /**
     * Additional fees.
     * Includes details about the source, and whether the additional fee is applied to the order.
     */
    additionalFees?: AdditionalFeeDetails$1[];
    /**
     * Discounts.
     * Includes details about the source, and whether the discount is applied to the order.
     */
    discounts?: DiscountDetails$1[];
    /**
     * Date and time the draft order was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the draft order was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Identity of the draft order's initiator.
     * @readonly
     */
    createdBy?: CreatedBy$1;
    /**
     * Draft order status.
     * @readonly
     */
    status?: EditingStatus$1;
    /** Weight measurement unit. Defaults to the site's weight unit. */
    weightUnit?: WeightUnit$1;
    /** Currency used for pricing. */
    currency?: string | null;
    /**
     * Price summary.
     * @readonly
     */
    priceSummary?: PriceSummary$1;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax summary.
     * @readonly
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax summary.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary$1;
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: BalanceSummary$1;
    /** Side effects to perform on commit. */
    commitSettings?: DraftOrderCommitSettings$1;
    /** Member ID (if order created by a member). */
    memberId?: string | null;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    recipientInfo?: RecipientInfoDetails$1;
    /**
     * Custom field data for the draft order object.
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$1;
}
interface ItemDetails$1 extends ItemDetailsChangeTypeOneOf$1 {
    /** Whether the line item was added as part of the draft. */
    added?: boolean;
    /** Line item fields before the change. */
    changedDetails?: ItemChangedDetails$1;
    /** Whether the line item was removed as part of the draft. */
    removed?: boolean;
    /** Line item details after applied changes. */
    lineItem?: OrderLineItem$1;
}
/** @oneof */
interface ItemDetailsChangeTypeOneOf$1 {
    /** Whether the line item was added as part of the draft. */
    added?: boolean;
    /** Line item fields before the change. */
    changedDetails?: ItemChangedDetails$1;
    /** Whether the line item was removed as part of the draft. */
    removed?: boolean;
}
interface Price$1 {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface PriceDescription$1 {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface OrderLineItem$1 {
    /** Line item ID. */
    id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName$1;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference$1;
    /** Line item quantity. */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price$1;
    /** Line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine$1[];
    /** Line item image. */
    image?: Image;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties$1;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$1;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
     */
    fulfillerId?: string | null;
    /**
     * Number of items that were refunded.
     * @readonly
     */
    refundQuantity?: number | null;
    /**
     * Number of items restocked.
     * @readonly
     */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price$1;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price$1;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$1;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$1;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` - Partial payment for the given item to be paid upfront during the checkout. Eligible for catalog items with type `DEPOSIT_ONLINE` only.
     */
    paymentOption?: PaymentOptionType$1;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails$1;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo$1;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile$1;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo$1;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$1;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price$1;
}
interface ProductName$1 {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$1 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface DescriptionLine$1 extends DescriptionLineValueOneOf$1, DescriptionLineDescriptionLineValueOneOf$1 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$1;
    /** Description line color value. */
    colorInfo?: Color$1;
    /** Description line name. */
    name?: DescriptionLineName$1;
}
/** @oneof */
interface DescriptionLineValueOneOf$1 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$1;
    /** Description line color value. */
    colorInfo?: Color$1;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$1 {
}
interface DescriptionLineName$1 {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$1 {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$1 {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$1 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface Image {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface PhysicalProperties$1 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$1 extends ItemTypeItemTypeDataOneOf$1 {
    /** Preset item type. */
    preset?: ItemTypeItemType$1;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$1 {
    /** Preset item type. */
    preset?: ItemTypeItemType$1;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$1 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$1 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ItemTaxFullDetails$1 {
    /** Taxable amount of this line item. */
    taxableAmount?: Price$1;
    /** Tax rate percentage, as a decimal numeral between 0 and 1. For example, `"0.13"`. */
    taxRate?: string;
    /** The calculated tax, based on the `taxableAmount` and `taxRate`. */
    totalTax?: Price$1;
}
interface LineItemTaxInfo$1 {
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    taxAmount?: Price$1;
    /** Amount for which tax is calculated. */
    taxableAmount?: Price$1;
    /** Tax rate %, as a decimal point. */
    taxRate?: string | null;
    /**
     * Tax group ID.
     * Learn more about [Tax Groups](https://dev.wix.com/docs/rest/business-management/payments/tax/tax-groups/introduction).
     */
    taxGroupId?: string | null;
    /** Indicates whether the price already includes tax. */
    taxIncludedInPrice?: boolean;
    /** Tax information for a line item. */
    taxBreakdown?: LineItemTaxBreakdown$1[];
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface LineItemTaxBreakdown$1 {
    /** Jurisdiction that taxes were calculated for. For example, "New York", or "Quebec". */
    jurisdiction?: string | null;
    /** Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000. */
    rate?: string | null;
    /** Amount of tax calculated for this line item. */
    taxAmount?: Price$1;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** Type of jurisdiction that taxes were calculated for. */
    jurisdictionType?: JurisdictionType$1;
    /** Non-taxable amount of the line item price. */
    nonTaxableAmount?: Price$1;
    /** Taxable amount of the line item price. */
    taxableAmount?: Price$1;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$1 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DigitalFile$1 {
    /** ID of the secure file in media. */
    fileId?: string;
    /** Link will exist after the digital links have been generated on the order. */
    link?: string | null;
    /**
     * Link expiration time and date.
     * @readonly
     */
    expirationDate?: Date | null;
}
interface SubscriptionInfo$1 {
    /** Subscription ID. */
    id?: string | null;
    /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */
    cycleNumber?: number;
    /** Subscription option title. For example, `"Monthly coffee Subscription"`. */
    subscriptionOptionTitle?: string;
    /** Subscription option description. For example, `"1kg of selected coffee, once a month"`. */
    subscriptionOptionDescription?: string | null;
    /** Subscription detailed information. */
    subscriptionSettings?: SubscriptionSettings$1;
}
interface SubscriptionSettings$1 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$1;
    /** Interval of recurring payment. */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$1 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
declare enum TaxableAddressType$1 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
interface ItemChangedDetails$1 {
    /** Line item quantity before change. */
    quantityBeforeChange?: number | null;
    /** Line item price before change. */
    priceBeforeChange?: Price$1;
    /** Line item price description before change. */
    priceDescriptionBeforeChange?: PriceDescription$1;
}
interface ShippingDetails$1 extends ShippingDetailsChangeTypeOneOf$1 {
    /** Whether shipping info was added as part of the draft. */
    added?: boolean;
    /** Shipping info before the change. */
    changedDetails?: ShippingChangedDetails$1;
    /** Whether shipping info was removed as part of the draft. */
    removed?: boolean;
    /** Selected Shipping details. */
    shippingInfo?: V1ShippingInformation$1;
}
/** @oneof */
interface ShippingDetailsChangeTypeOneOf$1 {
    /** Whether shipping info was added as part of the draft. */
    added?: boolean;
    /** Shipping info before the change. */
    changedDetails?: ShippingChangedDetails$1;
    /** Whether shipping info was removed as part of the draft. */
    removed?: boolean;
}
interface V1ShippingInformation$1 {
    /** App Def Id of external provider which was a source of shipping info */
    carrierId?: string | null;
    /** Unique code (or ID) of selected shipping option. For example, `"usps_std_overnight"``. */
    code?: string | null;
    /**
     * Shipping option title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"` or `"First-Class Package International"`.
     */
    title?: string;
    /** Shipping logistics. */
    logistics?: V1DeliveryLogistics$1;
    /** Shipping costs. */
    cost?: V1ShippingPrice$1;
    /** Shipping region. */
    region?: ShippingRegion$1;
}
interface V1DeliveryLogistics$1 extends V1DeliveryLogisticsAddressOneOf$1 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$1;
    /** Pickup details. */
    pickupDetails?: V1PickupDetails$1;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /**
     * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Expected delivery time. */
    deliveryTimeSlot?: V1DeliveryTimeSlot$1;
}
/** @oneof */
interface V1DeliveryLogisticsAddressOneOf$1 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$1;
    /** Pickup details. */
    pickupDetails?: V1PickupDetails$1;
}
/** Billing Info and shipping details */
interface AddressWithContact$1 {
    /** Address. */
    address?: Address$1;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$1;
}
/** Physical address */
interface Address$1 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$1;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress$1 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$1 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$1;
}
interface VatId$1 {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$1;
}
/** tax info types */
declare enum VatType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface V1PickupDetails$1 {
    /** Pickup address. */
    address?: PickupAddress$1;
    /** Pickup method */
    pickupMethod?: PickupDetailsPickupMethod$1;
}
/** Physical address */
interface PickupAddress$1 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address object, with number, name, and apartment number in separate fields. */
    streetAddress?: StreetAddress$1;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
declare enum PickupDetailsPickupMethod$1 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface V1DeliveryTimeSlot$1 {
    /** Delivery slot starting time. */
    from?: Date | null;
    /** Delivery slot ending time. */
    to?: Date | null;
}
interface V1ShippingPrice$1 {
    /** Shipping price for display purposes. */
    price?: Price$1;
    /**
     * Total price of shipping after discounts (when relevant), and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$1;
    /**
     * Shipping price after all discounts (if any exist), and after tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$1;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$1;
    /**
     * Shipping discount before tax.
     * @readonly
     */
    discount?: Price$1;
}
interface ShippingRegion$1 {
    /** Name of shipping region. For example, `"Metropolitan London"`, or `"Outer Melbourne suburbs"`. */
    name?: string | null;
}
interface ShippingChangedDetails$1 {
    /** Shipping info before the change. */
    shippingInfoBeforeChange?: V1ShippingInformation$1;
}
/** Buyer Info */
interface BuyerInfo$1 extends BuyerInfoIdOneOf$1 {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
    /** Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction). */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$1 {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
}
interface AdditionalFeeDetails$1 {
    /** Additional fee. */
    additionalFee?: AdditionalFee$1;
    /** Tax details related to the additional fee. */
    taxDetails?: TaxDetails$1;
    /**
     * Source of the additional fee.
     *
     * Supported values:
     * + `ORIGINAL_ORDER`: This additional fee is part of the original order.
     * + `CUSTOM`: This additional fee was created by the [Create Custom Additional Fees](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/draft-orders/create-custom-additional-fees) API.
     */
    source?: SourceType$1;
    /** Whether this additional fee is applied to the order. */
    applied?: boolean;
}
interface AdditionalFee$1 {
    /** Additional fee's unique code for future processing. */
    code?: string | null;
    /** Name of additional fee. */
    name?: string;
    /** Additional fee's price. */
    price?: Price$1;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$1;
    /** SPI implementer's `appId`. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: Price$1;
    /** Additional fee's price after tax. */
    priceAfterTax?: Price$1;
    /** Additional fee's id. */
    id?: string;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface TaxDetails$1 {
    /** Indication if additional fee is taxable or not */
    taxable?: boolean;
    /** Optional tax group ID to use when calculating tax for this additional fee */
    taxGroupId?: string | null;
}
declare enum SourceType$1 {
    /** Part of the original order */
    ORIGINAL_ORDER = "ORIGINAL_ORDER",
    /** Added by estimate * */
    AUTOMATIC = "AUTOMATIC",
    /** Added manually to current draft order */
    CUSTOM = "CUSTOM"
}
interface DiscountDetails$1 {
    /** Discount details. */
    discount?: AppliedDiscount$1;
    /**
     * Source of the discount.
     *
     * Supported values:
     * + `ORIGINAL_ORDER`: This discount is part of the original order.
     * + `CUSTOM`: This discount was created by the [Create Custom Discounts](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/draft-orders/create-custom-discounts) API.
     */
    source?: SourceType$1;
    /** Whether this discount is applied to the order. */
    applied?: boolean;
}
interface AppliedDiscount$1 extends AppliedDiscountDiscountSourceOneOf$1 {
    /** Applied coupon info. */
    coupon?: Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$1;
    /** Automatic Discount */
    discountRule?: DiscountRule$1;
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to specific items.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: AppliedDiscountDiscountType$1;
    /**
     * IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @deprecated IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemIds?: string[];
    /** Discount id. */
    id?: string | null;
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$1 {
    /** Applied coupon info. */
    coupon?: Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$1;
    /** Automatic Discount */
    discountRule?: DiscountRule$1;
}
declare enum AppliedDiscountDiscountType$1 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$1 {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** Coupon value. */
    amount?: Price$1;
}
interface MerchantDiscount$1 extends MerchantDiscountMerchantDiscountReasonOneOf$1 {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason$1;
    /** Discount description as free text (optional). */
    description?: string | null;
    /** Discount amount. */
    amount?: Price$1;
}
/** @oneof */
interface MerchantDiscountMerchantDiscountReasonOneOf$1 {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason$1;
    /** Discount description as free text (optional). */
    description?: string | null;
}
declare enum DiscountReason$1 {
    UNSPECIFIED = "UNSPECIFIED",
    EXCHANGED_ITEMS = "EXCHANGED_ITEMS"
}
interface DiscountRule$1 {
    /** Discount rule ID */
    id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$1;
    /** Discount value. */
    amount?: Price$1;
}
interface DiscountRuleName$1 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface CreatedBy$1 extends CreatedByStringOneOf$1 {
    /** User ID. When the draft order was created by a Wix user. */
    userId?: string;
    /** App ID. When the draft order was created by an app. */
    appId?: string;
}
/** @oneof */
interface CreatedByStringOneOf$1 {
    /** User ID. When the draft order was created by a Wix user. */
    userId?: string;
    /** App ID. When the draft order was created by an app. */
    appId?: string;
}
declare enum EditingStatus$1 {
    /** DraftOrder is in draft state. */
    DRAFT = "DRAFT",
    /** DraftOrder is in committed state. */
    COMMITTED = "COMMITTED"
}
declare enum WeightUnit$1 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface PriceSummary$1 {
    /** Subtotal of all the line items, before discounts and before tax. */
    subtotal?: Price$1;
    /** Total shipping price, before discounts and before tax. */
    shipping?: Price$1;
    /** Total tax on this order. */
    tax?: Price$1;
    /** Total calculated discount value. */
    discount?: Price$1;
    /** Order’s total price after discounts and tax. */
    total?: Price$1;
    /** Total price of additional fees before tax. */
    totalAdditionalFees?: Price$1;
}
interface TaxSummary$1 {
    /**
     * Total tax.
     * @readonly
     */
    totalTax?: Price$1;
}
interface BalanceSummary$1 {
    /**
     * Amount left to pay for order to be considered paid.
     * @readonly
     */
    balance?: Balance$1;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price$1;
}
/**
 * Order balance. Reflects amount left to be paid on order and is calculated dynamically. Can be negative per balance definition.
 * `amount` field depends on order payment status:
 * + UNSPECIFIED, NOT_PAID: price_summary.total_price
 * + PARTIALLY_PAID : price_summary.total_price - pay_now.total_price
 * + PENDING, REFUNDED, PARTIALLY_REFUNDED, PAID : 0
 */
interface Balance$1 {
    /**
     * Balance amount.
     *
     * A negative `amount` represents the amount to be refunded. This can happen due to overcharging or the order being modified after a payment has been made.
     * @readonly
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
/** Side-effects upon committing a draft order. */
interface DraftOrderCommitSettings$1 {
    /**
     * Whether to send notifications to the buyer.
     *
     * Default: `true`
     */
    sendNotificationsToBuyer?: boolean | null;
    /**
     * Whether to send notifications to the business.
     *
     * Default: `true`
     */
    sendNotificationsToBusiness?: boolean | null;
    /**
     * Whether to add activities to the order.
     *
     * Default: `true`
     */
    addActivitiesToOrder?: boolean | null;
    /**
     * Whether to send email notifications to custom fulfillers when there is a change in the shippable items they fulfill.
     *
     * Default: `true`
     */
    sendNotificationsToCustomFulfillers?: boolean | null;
    /**
     * Line item IDs for which to perform an inventory change.
     * When not provided, inventory will not change.
     */
    updateInventory?: InventoryUpdate$1[];
}
interface InventoryUpdate$1 {
    /** Line item ID. */
    lineItemId?: string;
}
interface RecipientInfoDetails$1 extends RecipientInfoDetailsChangeTypeOneOf$1 {
    /** Indicates that recipient information was added during draft. */
    added?: boolean;
    /** Indicates that recipient information was changed. Contains recipient information before draft. */
    changedDetails?: RecipientInfoChangedDetails$1;
    /** Indicates that recipient information was removed during draft. */
    removed?: boolean;
    /** Order recipient address and contact details. */
    recipientInfo?: AddressWithContact$1;
}
/** @oneof */
interface RecipientInfoDetailsChangeTypeOneOf$1 {
    /** Indicates that recipient information was added during draft. */
    added?: boolean;
    /** Indicates that recipient information was changed. Contains recipient information before draft. */
    changedDetails?: RecipientInfoChangedDetails$1;
    /** Indicates that recipient information was removed during draft. */
    removed?: boolean;
}
interface RecipientInfoChangedDetails$1 {
    /** Order recipient address and contact details before draft. */
    recipientInfoBeforeChange?: AddressWithContact$1;
}
interface OrderTaxInfo$1 {
    /** Calculated tax, added from line items. */
    totalTax?: Price$1;
    /** The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate. */
    taxBreakdown?: OrderTaxBreakdown$1[];
    /**
     * Whether the draft order is exempt from tax calculations.
     *
     * Default: `false`
     * @readonly
     */
    taxExempt?: boolean | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface OrderTaxBreakdown$1 {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionType?: JurisdictionType$1;
    /** The rate at which this tax detail was calculated. */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: Price$1;
}
interface ExtendedFields$1 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateDraftOrderRequest$1 {
    /** To create a draft from existing order, provide its id. Otherwise, an empty draft will be created. */
    orderId: string | null;
}
interface CreateDraftOrderResponse$1 {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface CalculatedDraftOrder$1 {
    /**
     * The draft order full details with calculations based on it's content.
     * Discount and additional fee options are also included.
     */
    draftOrder?: DraftOrder$1;
    /** Shipping options for the order. */
    shippingOptions?: ShippingOption$1[];
    /** Errors that occurred during calculation. */
    calculationErrors?: CalculationErrors$1;
}
interface ShippingOption$1 {
    /** This carrier's unique ID */
    carrierId?: string | null;
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
    /** Shipping rate title. For example, `"USPS Standard Overnight Delivery"`, `"Standard"`, or `"First-Class Package International"`. */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics$1;
    /** Shipping cost. */
    cost?: ShippingPrice$1;
}
interface DeliveryLogistics$1 {
    /** When the item is expected to be delivered in free text, e.g "3-5 business days" */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Ensure to come during Opening Hours, and please don't park in disabled-spot" */
    instructions?: string | null;
    /** Additional pickup details if it's a pickup */
    pickupDetails?: PickupDetails$1;
    /** Expected delivery time slot (from and to time stamps representation) */
    deliveryTimeSlot?: DeliveryTimeSlot$1;
}
interface PickupDetails$1 {
    /** Pickup address */
    address?: Address$1;
    /**
     * Pickup method.
     *
     * Supported values:
     * + `"STORE_PICKUP"`
     * + `"PICKUP_POINT"`
     */
    pickupMethod?: PickupMethod$1;
}
declare enum PickupMethod$1 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$1 {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
interface ShippingPrice$1 {
    /** The shipping rate's price. Must align with the [currency's decimal separator](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). */
    price?: Price$1;
    /** Currency of the shipping rate price as a 3-letter [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217). Must align with the `currency` passed to the function. */
    currency?: string;
}
interface CalculationErrors$1 extends CalculationErrorsShippingCalculationErrorOneOf$1 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$1;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$1;
    /** Tax calculation error. */
    taxCalculationError?: Details$1;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$1[];
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$1 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$1;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$1;
}
interface Details$1 extends DetailsKindOneOf$1 {
    applicationError?: ApplicationError$1;
    validationError?: ValidationError$1;
    systemError?: SystemError$1;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$1 {
    applicationError?: ApplicationError$1;
    validationError?: ValidationError$1;
    systemError?: SystemError$1;
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$1 {
    fieldViolations?: FieldViolation$1[];
}
declare enum RuleType$1 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$1 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$1;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$1 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$1 {
    /** Carrier errors. */
    errors?: CarrierError$1[];
}
interface CarrierError$1 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$1;
}
interface CreateEmptyDraftOrderRequest$1 {
}
interface CreateEmptyDraftOrderResponse$1 {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface AddLineItemsToDraftOrderRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** Catalog line items to add to draft order. */
    catalogLineItems?: CatalogReferenceLineItem$1[];
    /** Custom line items to add to draft order. Custom line items don't trigger the Catalog service plugin. */
    customLineItems?: CustomLineItem$1[];
}
interface CatalogReferenceLineItem$1 {
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$1;
    /** Item quantity. */
    quantity?: number;
    /** Item price override. */
    price?: Price$1;
}
interface CustomLineItem$1 {
    /** Line item ID. */
    id?: string | null;
    /**
     * Item quantity.
     *
     * Min: `"1"`
     * Max: `"100000"`
     */
    quantity?: number;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$1;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName$1;
    /** URL to the item's page on the site. */
    url?: PageUrlV2;
    /** Item price **after** catalog-defined discount and line item discounts. */
    price?: Price$1;
    /** Total line item price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: Price$1;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: Price$1;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: Price$1;
    /** Line item description lines. Used for display purposes for order. */
    descriptionLines?: DescriptionLine$1[];
    /** Line item image details. */
    media?: Image;
    /** Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability. */
    physicalProperties?: PhysicalProperties$1;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$1;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$1;
    /** Delivery Profile Id for the product */
    deliveryProfileId?: string | null;
}
interface PageUrlV2 {
    /** The relative path for the page within the site. For example, `/product-page/a-product`. */
    relativePath?: string;
    /** The page's full URL. For example, `https://mysite.com/product-page/a-product`. */
    url?: string | null;
}
interface AddLineItemsToDraftOrderResponse$1 {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface UpdateLineItemsRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** Details of changes to apply per line item */
    lineItemChanges?: LineItemChangeDetails$1[];
}
interface LineItemChangeDetails$1 {
    /** The line item id to change */
    lineItemId?: string;
    /** The new quantity for the line item. quantity zero means to remove the line item. */
    newQuantity?: number | null;
    /** The new price for 1 unit of the line item */
    newPrice?: string | null;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    newPriceDescription?: PriceDescription$1;
}
interface UpdateLineItemsResponse$1 {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface SetDiscountsRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** The discount ids to opt-in. all existing discounts not listed are to be opted-out. */
    discounts: IdAndApplied$1[];
}
interface IdAndApplied$1 {
    /** Discount ID. */
    id?: string;
    /** Whether to apply the discount to the draft order. */
    applied?: boolean;
}
interface SetDiscountsResponse$1 {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface CreateCustomDiscountsRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** The discounts to add. */
    discounts?: DiscountOption$1[];
}
interface DiscountOption$1 extends DiscountOptionDiscountAmountOneOf$1 {
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to a specific item.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: DiscountType$1;
    /**
     * ID of line item discount applies to.
     * @deprecated ID of line item discount applies to.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemId?: string | null;
    /**
     * Discount amount.
     * @deprecated Discount amount.
     * @replacedBy price_amount and percentage
     * @targetRemovalDate 2024-08-30
     */
    amount?: Price$1;
    /** Discount description as free text (optional). */
    description?: string | null;
    /**
     * Should opt-in the added discount. default = false.
     * if not set or false, then to opt-in them, please call SetDiscounts with the added discounts ids
     */
    applyToDraftOrder?: boolean | null;
}
/** @oneof */
interface DiscountOptionDiscountAmountOneOf$1 {
}
declare enum DiscountType$1 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
interface CreateCustomDiscountsResponse$1 {
    /** The draft order details with the added discounts */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface DeleteCustomDiscountsRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** The discounts to remove */
    discountIds: string[];
}
interface DeleteCustomDiscountsResponse$1 {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface SetAdditionalFeesRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** The additional fees ids to opt-in. all existing additional fees not listed are to be opted-out */
    additionalFees: IdAndApplied$1[];
}
interface SetAdditionalFeesResponse$1 {
    /** The draft order details calculated with modified additional fees */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface CreateCustomAdditionalFeesRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** The additional fees to add. added with opted-out setting */
    customAdditionalFees?: AdditionalFeeOption$1[];
}
interface AdditionalFeeOption$1 {
    /** Translated additional fee's name */
    name?: string;
    /** Additional fee's price */
    price?: Price$1;
    /** Tax calculation details */
    taxDetails?: TaxDetails$1;
    /**
     * Should apply the additional fee. default = false.
     * if not set or false, then to apply them, please call ApplyAdditionalFees with the added additional fee ids
     */
    applyToDraftOrder?: boolean | null;
    /** Additional fee's unique code (or ID) for future processing */
    code?: string | null;
}
interface CreateCustomAdditionalFeesResponse$1 {
    /** The draft order details with added custom additional fees */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface DeleteCustomAdditionalFeesRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** The additional fees to remove */
    customAdditionalFees: string[];
}
interface DeleteCustomAdditionalFeesResponse$1 {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface SetShippingInfoRequest$1 {
}
interface SetShippingInfoResponse$1 {
}
interface SetBuyerInfoRequest$1 {
}
interface SetBuyerInfoResponse$1 {
}
interface SetRecipientInfoRequest$1 {
}
interface SetRecipientInfoResponse$1 {
}
interface SetBillingInfoRequest$1 {
}
interface SetBillingInfoResponse$1 {
}
interface GetDraftOrderRequest$1 {
    /** The draft order id */
    draftOrderId: string;
}
interface GetDraftOrderResponse$1 {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface GetOrderDraftabilityStatusRequest$1 {
    /** Order ID. */
    orderId: string;
}
interface GetOrderDraftabilityStatusResponse$1 {
    /** Order ID. */
    orderId?: string;
    /** Whether a draft can be created from this order */
    orderDraftable?: boolean;
    /** Reasons why the order is not draftable */
    nonDraftableReasons?: NonDraftableReason$1[];
}
declare enum NonDraftableReason$1 {
    UNSPECIFIED = "UNSPECIFIED",
    PARTIALLY_OR_FULLY_REFUNDED = "PARTIALLY_OR_FULLY_REFUNDED",
    UNSUPPORTED_CHANNEL_TYPE = "UNSUPPORTED_CHANNEL_TYPE",
    ORDER_STATUS_IS_NOT_SUPPORTED = "ORDER_STATUS_IS_NOT_SUPPORTED",
    ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT = "ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT",
    ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT = "ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT",
    AMOUNTS_DO_NOT_ADD_UP = "AMOUNTS_DO_NOT_ADD_UP",
    /** remove - this is not a reason, it's an error */
    ORDER_NOT_FOUND = "ORDER_NOT_FOUND",
    SUBSCRIPTION_LINE_ITEM_EXISTS = "SUBSCRIPTION_LINE_ITEM_EXISTS",
    UNSUPPORTED_CATALOG_ITEM = "UNSUPPORTED_CATALOG_ITEM",
    TAXABLE_EXISTING_ADDITIONAL_FEE = "TAXABLE_EXISTING_ADDITIONAL_FEE"
}
interface CommitDraftOrderRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** Optional side effects to trigger */
    commitSettings?: DraftOrderCommitSettings$1;
    /** Reason for edit, given by user (optional). */
    reason?: string | null;
}
interface CommitDraftOrderResponse$1 {
    /** The draft order after commit. */
    committedDraftOrder?: DraftOrder$1;
    /** The updated order after commit. */
    orderAfterCommit?: Order$1;
}
interface Order$1 {
    /**
     * Order ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Order number displayed in the site owner's dashboard (auto-generated).
     * @readonly
     */
    number?: string;
    /**
     * Date and time the order was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Order line items.
     * @readonly
     */
    lineItems?: OrderLineItem$1[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo$1;
    /**
     * Order payment status.
     * + `NOT_PAID` - This can be an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.
     * + This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.
     * + `PAID` - All payments associated with this order are paid. For online payments: [`payment.regularPaymentDetails.status: APPROVED`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object). For gift cards: [`payment.giftCardPaymentDetails.voided: false`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object).
     * + `PARTIALLY_REFUNDED` - Order was refunded, but refund amount is less than order total price.
     * + `FULLY_REFUNDED` - Order fully refunded. Refund amount equals total price.
     * + `PENDING` - Payments received but not yet confirmed by the payment provider.
     * + `PARTIALLY_PAID` -  At least one payment was received and approved, covering less than total price amount.
     */
    paymentStatus?: PaymentStatus$1;
    /**
     * Order fulfillment status.
     * @readonly
     */
    fulfillmentStatus?: FulfillmentStatus$1;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$1;
    /** Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format. */
    currency?: string | null;
    /** Whether tax is included in line item prices. */
    taxIncludedInPrices?: boolean;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary$1;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact$1;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: V1ShippingInformation$1;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /**
     * Order status.
     * + `INITIALIZED`: Order created, but not yet approved or canceled.
     * + `APPROVED`: Order approved. This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order). Offline orders (cash payment) are automatically approved.
     * + `CANCELED`: Order canceled by the user.
     */
    status?: OrderStatus$1;
    /** Whether order is archived. */
    archived?: boolean | null;
    /**
     * Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @deprecated Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary$1;
    /** Tax information. */
    taxInfo?: OrderTaxInfo$1;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$1[];
    /**
     * Order activities.
     * @readonly
     */
    activities?: Activity$1[];
    /** Order attribution source. */
    attributionSource?: AttributionSource$1;
    /**
     * ID of the order's initiator.
     * @readonly
     */
    createdBy?: V1CreatedBy$1;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo$1;
    /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */
    seenByAHuman?: boolean | null;
    /** Checkout ID. */
    checkoutId?: string | null;
    /** Custom fields. */
    customFields?: CustomField$1[];
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: V1BalanceSummary$1;
    /** Additional fees applied to the order. */
    additionalFees?: AdditionalFee$1[];
    /**
     * Custom field data for the order object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$1;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact$1;
    /**
     * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * Used for migration from external systems.
     */
    purchasedDate?: Date | null;
}
declare enum PaymentStatus$1 {
    UNSPECIFIED = "UNSPECIFIED",
    /** Order is not paid */
    NOT_PAID = "NOT_PAID",
    /** Order is paid */
    PAID = "PAID",
    /** Order was refunded, refund amount less than order total price */
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    /** Full order total price was refunded */
    FULLY_REFUNDED = "FULLY_REFUNDED",
    /** Payments received but not yet confirmed by the payment provider */
    PENDING = "PENDING",
    /** At least one payment was received and approved, covering less than total price amount */
    PARTIALLY_PAID = "PARTIALLY_PAID"
}
declare enum FulfillmentStatus$1 {
    /** none of the order items are fulfilled or order was manually marked as unfulfilled */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled or order was manually marked as fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FULFILLED = "FULFILLED",
    /** Some, but not all of the order items are fulfilled */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
declare enum OrderStatus$1 {
    INITIALIZED = "INITIALIZED",
    APPROVED = "APPROVED",
    CANCELED = "CANCELED"
}
interface Activity$1 extends ActivityContentOneOf$1 {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity$1;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment$1;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded$1;
    /**
     * Activity ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Activity author's email.
     * @readonly
     */
    authorEmail?: string | null;
    /**
     * Activity creation date and time.
     * @readonly
     */
    createdDate?: Date | null;
    /** Activity type. */
    type?: ActivityType$1;
}
/** @oneof */
interface ActivityContentOneOf$1 {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity$1;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment$1;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded$1;
}
interface CustomActivity$1 {
    /** ID of the app that created the custom activity. */
    appId?: string;
    /** Custom activity type. For example, `"Ticket number set"`. */
    type?: string;
    /** Additional data in key-value form. For example, `{ "Ticket number": "123456" }`. */
    additionalData?: Record<string, string>;
}
/** Store owner added a comment */
interface MerchantComment$1 {
    /** Merchant comment message. */
    message?: string;
}
interface OrderRefunded$1 {
    /** Whether order was refunded manually. For example, via payment provider or using cash. */
    manual?: boolean;
    /** Refund amount. */
    amount?: Price$1;
    /** Reason for refund. */
    reason?: string;
}
declare enum LineItemQuantityChangeType$1 {
    QUANTITY_INCREASED = "QUANTITY_INCREASED",
    QUANTITY_DECREASED = "QUANTITY_DECREASED"
}
declare enum ActivityType$1 {
    ORDER_REFUNDED = "ORDER_REFUNDED",
    ORDER_PLACED = "ORDER_PLACED",
    ORDER_PAID = "ORDER_PAID",
    ORDER_FULFILLED = "ORDER_FULFILLED",
    ORDER_NOT_FULFILLED = "ORDER_NOT_FULFILLED",
    ORDER_CANCELED = "ORDER_CANCELED",
    DOWNLOAD_LINK_SENT = "DOWNLOAD_LINK_SENT",
    TRACKING_NUMBER_ADDED = "TRACKING_NUMBER_ADDED",
    TRACKING_NUMBER_EDITED = "TRACKING_NUMBER_EDITED",
    TRACKING_LINK_ADDED = "TRACKING_LINK_ADDED",
    SHIPPING_CONFIRMATION_EMAIL_SENT = "SHIPPING_CONFIRMATION_EMAIL_SENT",
    INVOICE_ADDED = "INVOICE_ADDED",
    INVOICE_REMOVED = "INVOICE_REMOVED",
    INVOICE_SENT = "INVOICE_SENT",
    FULFILLER_EMAIL_SENT = "FULFILLER_EMAIL_SENT",
    SHIPPING_ADDRESS_EDITED = "SHIPPING_ADDRESS_EDITED",
    EMAIL_EDITED = "EMAIL_EDITED",
    PICKUP_READY_EMAIL_SENT = "PICKUP_READY_EMAIL_SENT",
    CUSTOM_ACTIVITY = "CUSTOM_ACTIVITY",
    MERCHANT_COMMENT = "MERCHANT_COMMENT",
    ORDER_CREATED_FROM_EXCHANGE = "ORDER_CREATED_FROM_EXCHANGE",
    NEW_EXCHANGE_ORDER_CREATED = "NEW_EXCHANGE_ORDER_CREATED",
    ORDER_PARTIALLY_PAID = "ORDER_PARTIALLY_PAID",
    DRAFT_ORDER_CHANGES_APPLIED = "DRAFT_ORDER_CHANGES_APPLIED",
    SAVED_PAYMENT_METHOD = "SAVED_PAYMENT_METHOD"
}
declare enum AttributionSource$1 {
    UNSPECIFIED = "UNSPECIFIED",
    FACEBOOK_ADS = "FACEBOOK_ADS"
}
interface V1CreatedBy$1 extends V1CreatedByStringOneOf$1 {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
/** @oneof */
interface V1CreatedByStringOneOf$1 {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
interface ChannelInfo$1 {
    /** Sales channel that submitted the order. */
    type?: ChannelType$1;
    /** Reference to an order ID from an external system. */
    externalOrderId?: string | null;
    /** URL to the order in the external system. */
    externalOrderUrl?: string | null;
}
declare enum ChannelType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CustomField$1 {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
interface V1BalanceSummary$1 {
    /**
     * Current amount left to pay.
     * @readonly
     */
    balance?: Balance$1;
    /**
     * Sum of all approved and successful payments.
     *
     * The value includes payments that have subsequently been fully or partially refunded.
     * @readonly
     */
    paid?: Price$1;
    /**
     * Sum of all successfully refunded payments.
     * @readonly
     */
    refunded?: Price$1;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price$1;
}
interface CreateOrderFromDraftRequest$1 {
}
interface CreateOrderFromDraftResponse$1 {
}
interface DeleteDraftOrderRequest$1 {
    /** The draft order id */
    draftOrderId: string;
}
interface DeleteDraftOrderResponse$1 {
}
interface QueryDraftOrdersRequest$1 {
    /** WQL expression */
    query?: CursorQuery$1;
}
interface CursorQuery$1 extends CursorQueryPagingMethodOneOf$1 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$1[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$1 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryDraftOrdersResponse$1 {
    /** list of edits per order */
    draftOrders?: DraftOrder$1[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$1;
}
interface CursorPagingMetadata$1 {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$1;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface PriceNonNullableFields$1 {
    amount: string;
    formattedAmount: string;
}
interface PriceDescriptionNonNullableFields$1 {
    original: string;
}
interface ItemChangedDetailsNonNullableFields$1 {
    priceBeforeChange?: PriceNonNullableFields$1;
    priceDescriptionBeforeChange?: PriceDescriptionNonNullableFields$1;
}
interface ProductNameNonNullableFields$1 {
    original: string;
}
interface CatalogReferenceNonNullableFields$1 {
    catalogItemId: string;
    appId: string;
}
interface PlainTextValueNonNullableFields$1 {
    original: string;
}
interface ColorNonNullableFields$1 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$1 {
    original: string;
}
interface DescriptionLineNonNullableFields$1 {
    plainText?: PlainTextValueNonNullableFields$1;
    colorInfo?: ColorNonNullableFields$1;
    plainTextValue?: PlainTextValueNonNullableFields$1;
    color: string;
    name?: DescriptionLineNameNonNullableFields$1;
    lineType: DescriptionLineType$1;
}
interface ImageNonNullableFields {
    id: string;
    url: string;
    height: number;
    width: number;
}
interface PhysicalPropertiesNonNullableFields$1 {
    shippable: boolean;
}
interface ItemTypeNonNullableFields$1 {
    preset: ItemTypeItemType$1;
    custom: string;
}
interface ItemTaxFullDetailsNonNullableFields$1 {
    taxableAmount?: PriceNonNullableFields$1;
    taxRate: string;
    totalTax?: PriceNonNullableFields$1;
}
interface LineItemTaxBreakdownNonNullableFields$1 {
    taxAmount?: PriceNonNullableFields$1;
    jurisdictionType: JurisdictionType$1;
    nonTaxableAmount?: PriceNonNullableFields$1;
    taxableAmount?: PriceNonNullableFields$1;
}
interface LineItemTaxInfoNonNullableFields$1 {
    taxAmount?: PriceNonNullableFields$1;
    taxableAmount?: PriceNonNullableFields$1;
    taxIncludedInPrice: boolean;
    taxBreakdown: LineItemTaxBreakdownNonNullableFields$1[];
}
interface DigitalFileNonNullableFields$1 {
    fileId: string;
}
interface SubscriptionSettingsNonNullableFields$1 {
    frequency: SubscriptionFrequency$1;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
}
interface SubscriptionInfoNonNullableFields$1 {
    cycleNumber: number;
    subscriptionOptionTitle: string;
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$1;
}
interface LocationAndQuantityNonNullableFields$1 {
    id: string;
    quantity: number;
}
interface TaxableAddressNonNullableFields$1 {
    addressType: TaxableAddressType$1;
}
interface OrderLineItemNonNullableFields$1 {
    id: string;
    productName?: ProductNameNonNullableFields$1;
    catalogReference?: CatalogReferenceNonNullableFields$1;
    quantity: number;
    totalDiscount?: PriceNonNullableFields$1;
    descriptionLines: DescriptionLineNonNullableFields$1[];
    image?: ImageNonNullableFields;
    physicalProperties?: PhysicalPropertiesNonNullableFields$1;
    itemType?: ItemTypeNonNullableFields$1;
    price?: PriceNonNullableFields$1;
    priceBeforeDiscounts?: PriceNonNullableFields$1;
    totalPriceBeforeTax?: PriceNonNullableFields$1;
    totalPriceAfterTax?: PriceNonNullableFields$1;
    paymentOption: PaymentOptionType$1;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$1;
    taxInfo?: LineItemTaxInfoNonNullableFields$1;
    digitalFile?: DigitalFileNonNullableFields$1;
    subscriptionInfo?: SubscriptionInfoNonNullableFields$1;
    priceDescription?: PriceDescriptionNonNullableFields$1;
    depositAmount?: PriceNonNullableFields$1;
    locations: LocationAndQuantityNonNullableFields$1[];
    lineItemPrice?: PriceNonNullableFields$1;
    taxableAddress?: TaxableAddressNonNullableFields$1;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
}
interface ItemDetailsNonNullableFields$1 {
    added: boolean;
    changedDetails?: ItemChangedDetailsNonNullableFields$1;
    removed: boolean;
    lineItem?: OrderLineItemNonNullableFields$1;
}
interface StreetAddressNonNullableFields$1 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$1 {
    streetAddress?: StreetAddressNonNullableFields$1;
}
interface VatIdNonNullableFields$1 {
    id: string;
    type: VatType$1;
}
interface FullAddressContactDetailsNonNullableFields$1 {
    vatId?: VatIdNonNullableFields$1;
}
interface AddressWithContactNonNullableFields$1 {
    address?: AddressNonNullableFields$1;
    contactDetails?: FullAddressContactDetailsNonNullableFields$1;
}
interface PickupAddressNonNullableFields$1 {
    streetAddress?: StreetAddressNonNullableFields$1;
}
interface V1PickupDetailsNonNullableFields$1 {
    address?: PickupAddressNonNullableFields$1;
    pickupMethod: PickupDetailsPickupMethod$1;
}
interface V1DeliveryLogisticsNonNullableFields$1 {
    shippingDestination?: AddressWithContactNonNullableFields$1;
    pickupDetails?: V1PickupDetailsNonNullableFields$1;
}
interface V1ShippingPriceNonNullableFields$1 {
    price?: PriceNonNullableFields$1;
    totalPriceBeforeTax?: PriceNonNullableFields$1;
    totalPriceAfterTax?: PriceNonNullableFields$1;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$1;
    discount?: PriceNonNullableFields$1;
}
interface V1ShippingInformationNonNullableFields$1 {
    title: string;
    logistics?: V1DeliveryLogisticsNonNullableFields$1;
    cost?: V1ShippingPriceNonNullableFields$1;
}
interface ShippingChangedDetailsNonNullableFields$1 {
    shippingInfoBeforeChange?: V1ShippingInformationNonNullableFields$1;
}
interface ShippingDetailsNonNullableFields$1 {
    added: boolean;
    changedDetails?: ShippingChangedDetailsNonNullableFields$1;
    removed: boolean;
    shippingInfo?: V1ShippingInformationNonNullableFields$1;
}
interface BuyerInfoNonNullableFields$1 {
    visitorId: string;
    memberId: string;
}
interface AdditionalFeeNonNullableFields$1 {
    name: string;
    price?: PriceNonNullableFields$1;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$1;
    priceBeforeTax?: PriceNonNullableFields$1;
    priceAfterTax?: PriceNonNullableFields$1;
    id: string;
    lineItemIds: string[];
}
interface TaxDetailsNonNullableFields$1 {
    taxable: boolean;
}
interface AdditionalFeeDetailsNonNullableFields$1 {
    additionalFee?: AdditionalFeeNonNullableFields$1;
    taxDetails?: TaxDetailsNonNullableFields$1;
    source: SourceType$1;
    applied: boolean;
}
interface CouponNonNullableFields$1 {
    id: string;
    code: string;
    name: string;
    amount?: PriceNonNullableFields$1;
}
interface MerchantDiscountNonNullableFields$1 {
    discountReason: DiscountReason$1;
    amount?: PriceNonNullableFields$1;
}
interface DiscountRuleNameNonNullableFields$1 {
    original: string;
}
interface DiscountRuleNonNullableFields$1 {
    id: string;
    name?: DiscountRuleNameNonNullableFields$1;
    amount?: PriceNonNullableFields$1;
}
interface LineItemDiscountNonNullableFields$1 {
    id: string;
    totalDiscount?: PriceNonNullableFields$1;
}
interface AppliedDiscountNonNullableFields$1 {
    coupon?: CouponNonNullableFields$1;
    merchantDiscount?: MerchantDiscountNonNullableFields$1;
    discountRule?: DiscountRuleNonNullableFields$1;
    discountType: AppliedDiscountDiscountType$1;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$1[];
}
interface DiscountDetailsNonNullableFields$1 {
    discount?: AppliedDiscountNonNullableFields$1;
    source: SourceType$1;
    applied: boolean;
}
interface CreatedByNonNullableFields$1 {
    userId: string;
    appId: string;
}
interface PriceSummaryNonNullableFields$1 {
    subtotal?: PriceNonNullableFields$1;
    shipping?: PriceNonNullableFields$1;
    tax?: PriceNonNullableFields$1;
    discount?: PriceNonNullableFields$1;
    totalPrice?: PriceNonNullableFields$1;
    total?: PriceNonNullableFields$1;
    totalWithGiftCard?: PriceNonNullableFields$1;
    totalWithoutGiftCard?: PriceNonNullableFields$1;
    totalAdditionalFees?: PriceNonNullableFields$1;
}
interface TaxSummaryNonNullableFields$1 {
    totalTax?: PriceNonNullableFields$1;
}
interface BalanceNonNullableFields$1 {
    amount: string;
    formattedAmount: string;
}
interface BalanceSummaryNonNullableFields$1 {
    balance?: BalanceNonNullableFields$1;
    paid?: PriceNonNullableFields$1;
    refunded?: PriceNonNullableFields$1;
    authorized?: PriceNonNullableFields$1;
}
interface InventoryUpdateNonNullableFields$1 {
    lineItemId: string;
}
interface DraftOrderCommitSettingsNonNullableFields$1 {
    updateInventory: InventoryUpdateNonNullableFields$1[];
}
interface RecipientInfoChangedDetailsNonNullableFields$1 {
    recipientInfoBeforeChange?: AddressWithContactNonNullableFields$1;
}
interface RecipientInfoDetailsNonNullableFields$1 {
    added: boolean;
    changedDetails?: RecipientInfoChangedDetailsNonNullableFields$1;
    removed: boolean;
    recipientInfo?: AddressWithContactNonNullableFields$1;
}
interface OrderTaxBreakdownNonNullableFields$1 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionType: JurisdictionType$1;
    rate: string;
    aggregatedTaxAmount?: PriceNonNullableFields$1;
    aggregatedTaxableAmount?: PriceNonNullableFields$1;
}
interface OrderTaxInfoNonNullableFields$1 {
    totalTax?: PriceNonNullableFields$1;
    taxBreakdown: OrderTaxBreakdownNonNullableFields$1[];
}
interface BuyerChangedDetailsNonNullableFields$1 {
    buyerInfoBeforeChange?: BuyerInfoNonNullableFields$1;
}
interface BuyerDetailsNonNullableFields$1 {
    added: boolean;
    changedDetails?: BuyerChangedDetailsNonNullableFields$1;
    removed: boolean;
    buyerInfo?: BuyerInfoNonNullableFields$1;
}
interface BillingChangedDetailsNonNullableFields$1 {
    billingInfoBeforeChange?: AddressWithContactNonNullableFields$1;
}
interface BillingDetailsNonNullableFields$1 {
    added: boolean;
    changedDetails?: BillingChangedDetailsNonNullableFields$1;
    removed: boolean;
    billingInfo?: AddressWithContactNonNullableFields$1;
}
interface DraftOrderNonNullableFields$1 {
    lineItems: ItemDetailsNonNullableFields$1[];
    shippingInfo?: ShippingDetailsNonNullableFields$1;
    buyerInfo?: BuyerInfoNonNullableFields$1;
    billingInfo?: AddressWithContactNonNullableFields$1;
    additionalFees: AdditionalFeeDetailsNonNullableFields$1[];
    discounts: DiscountDetailsNonNullableFields$1[];
    createdBy?: CreatedByNonNullableFields$1;
    status: EditingStatus$1;
    weightUnit: WeightUnit$1;
    priceSummary?: PriceSummaryNonNullableFields$1;
    taxSummary?: TaxSummaryNonNullableFields$1;
    balanceSummary?: BalanceSummaryNonNullableFields$1;
    commitSettings?: DraftOrderCommitSettingsNonNullableFields$1;
    recipientInfo?: RecipientInfoDetailsNonNullableFields$1;
    taxInfo?: OrderTaxInfoNonNullableFields$1;
    buyerDetails?: BuyerDetailsNonNullableFields$1;
    billingDetails?: BillingDetailsNonNullableFields$1;
}
interface PickupDetailsNonNullableFields$1 {
    address?: AddressNonNullableFields$1;
    pickupMethod: PickupMethod$1;
}
interface DeliveryLogisticsNonNullableFields$1 {
    pickupDetails?: PickupDetailsNonNullableFields$1;
}
interface ShippingPriceNonNullableFields$1 {
    price?: PriceNonNullableFields$1;
    currency: string;
}
interface ShippingOptionNonNullableFields$1 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$1;
    cost?: ShippingPriceNonNullableFields$1;
}
interface ApplicationErrorNonNullableFields$1 {
    code: string;
    description: string;
}
interface FieldViolationNonNullableFields$1 {
    field: string;
    description: string;
    violatedRule: RuleType$1;
}
interface ValidationErrorNonNullableFields$1 {
    fieldViolations: FieldViolationNonNullableFields$1[];
}
interface DetailsNonNullableFields$1 {
    applicationError?: ApplicationErrorNonNullableFields$1;
    validationError?: ValidationErrorNonNullableFields$1;
}
interface CarrierErrorNonNullableFields$1 {
    carrierId: string;
    error?: DetailsNonNullableFields$1;
}
interface CarrierErrorsNonNullableFields$1 {
    errors: CarrierErrorNonNullableFields$1[];
}
interface CalculationErrorsNonNullableFields$1 {
    generalShippingCalculationError?: DetailsNonNullableFields$1;
    carrierErrors?: CarrierErrorsNonNullableFields$1;
    taxCalculationError?: DetailsNonNullableFields$1;
    orderValidationErrors: ApplicationErrorNonNullableFields$1[];
}
interface CalculatedDraftOrderNonNullableFields$1 {
    draftOrder?: DraftOrderNonNullableFields$1;
    shippingOptions: ShippingOptionNonNullableFields$1[];
    calculationErrors?: CalculationErrorsNonNullableFields$1;
}
interface CreateDraftOrderResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface CreateEmptyDraftOrderResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface AddLineItemsToDraftOrderResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface UpdateLineItemsResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface SetDiscountsResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface CreateCustomDiscountsResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface DeleteCustomDiscountsResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface SetAdditionalFeesResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface CreateCustomAdditionalFeesResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface DeleteCustomAdditionalFeesResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface SetShippingInfoResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface SetBuyerInfoResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface SetRecipientInfoResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface SetBillingInfoResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface GetDraftOrderResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface GetOrderDraftabilityStatusResponseNonNullableFields$1 {
    orderId: string;
    orderDraftable: boolean;
    nonDraftableReasons: NonDraftableReason$1[];
}
interface CustomActivityNonNullableFields$1 {
    appId: string;
    type: string;
}
interface MerchantCommentNonNullableFields$1 {
    message: string;
}
interface OrderRefundedNonNullableFields$1 {
    manual: boolean;
    amount?: PriceNonNullableFields$1;
    reason: string;
}
interface OrderCreatedFromExchangeNonNullableFields$1 {
    originalOrderId: string;
}
interface LineItemExchangeDataNonNullableFields$1 {
    lineItemId: string;
    quantity: number;
}
interface NewExchangeOrderCreatedNonNullableFields$1 {
    exchangeOrderId: string;
    lineItems: LineItemExchangeDataNonNullableFields$1[];
}
interface LineItemQuantityChangeNonNullableFields$1 {
    originalQuantity: number;
    newQuantity: number;
    diff: number;
    deltaType: LineItemQuantityChangeType$1;
}
interface LineItemPriceChangeNonNullableFields$1 {
    originalPrice?: PriceNonNullableFields$1;
    newPrice?: PriceNonNullableFields$1;
}
interface LineItemChangesNonNullableFields$1 {
    id: string;
    name?: ProductNameNonNullableFields$1;
    quantity?: LineItemQuantityChangeNonNullableFields$1;
    price?: LineItemPriceChangeNonNullableFields$1;
}
interface ManagedLineItemNonNullableFields$1 {
    id: string;
    name?: ProductNameNonNullableFields$1;
    quantity: number;
}
interface TranslatedValueNonNullableFields$1 {
    original: string;
}
interface LineItemAmountNonNullableFields$1 {
    id: string;
    name?: ProductNameNonNullableFields$1;
    amount?: PriceNonNullableFields$1;
}
interface ManagedDiscountNonNullableFields$1 {
    id: string;
    name?: TranslatedValueNonNullableFields$1;
    affectedLineItems: LineItemAmountNonNullableFields$1[];
    totalAmount?: PriceNonNullableFields$1;
}
interface ManagedAdditionalFeeNonNullableFields$1 {
    id: string;
    name?: TranslatedValueNonNullableFields$1;
    affectedLineItems: LineItemAmountNonNullableFields$1[];
    totalAmount?: PriceNonNullableFields$1;
}
interface TotalPriceChangeNonNullableFields$1 {
    originalTotal?: PriceNonNullableFields$1;
    newTotal?: PriceNonNullableFields$1;
}
interface ShippingInformationNonNullableFields$1 {
    total?: PriceNonNullableFields$1;
    shippingTitle: string;
}
interface ShippingInformationChangeNonNullableFields$1 {
    originalShippingInfo?: ShippingInformationNonNullableFields$1;
    newShippingInfo?: ShippingInformationNonNullableFields$1;
}
interface OrderChangeNonNullableFields$1 {
    lineItemChanged?: LineItemChangesNonNullableFields$1;
    lineItemAdded?: ManagedLineItemNonNullableFields$1;
    lineItemRemoved?: ManagedLineItemNonNullableFields$1;
    discountAdded?: ManagedDiscountNonNullableFields$1;
    discountRemoved?: ManagedDiscountNonNullableFields$1;
    additionalFeeAdded?: ManagedAdditionalFeeNonNullableFields$1;
    additionalFeeRemoved?: ManagedAdditionalFeeNonNullableFields$1;
    totalPriceChanged?: TotalPriceChangeNonNullableFields$1;
    shippingInformationChanged?: ShippingInformationChangeNonNullableFields$1;
}
interface DraftOrderChangesAppliedNonNullableFields$1 {
    draftOrderId: string;
    changes: OrderChangeNonNullableFields$1[];
}
interface SavedPaymentMethodNonNullableFields$1 {
    name: string;
}
interface AuthorizedPaymentCreatedNonNullableFields$1 {
    paymentId: string;
    amount?: PriceNonNullableFields$1;
}
interface AuthorizedPaymentCapturedNonNullableFields$1 {
    paymentId: string;
    amount?: PriceNonNullableFields$1;
}
interface AuthorizedPaymentVoidedNonNullableFields$1 {
    paymentId: string;
    amount?: PriceNonNullableFields$1;
}
interface RegularPaymentRefundNonNullableFields$1 {
    amount?: PriceNonNullableFields$1;
}
interface GiftCardPaymentRefundNonNullableFields$1 {
    amount?: PriceNonNullableFields$1;
}
interface RefundedPaymentNonNullableFields$1 {
    regular?: RegularPaymentRefundNonNullableFields$1;
    giftCard?: GiftCardPaymentRefundNonNullableFields$1;
    paymentId: string;
    externalRefund: boolean;
}
interface RefundInitiatedNonNullableFields$1 {
    refundId: string;
    amount?: PriceNonNullableFields$1;
    payments: RefundedPaymentNonNullableFields$1[];
}
interface PaymentRefundedNonNullableFields$1 {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields$1;
}
interface PaymentRefundFailedNonNullableFields$1 {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields$1;
}
interface RefundedAsStoreCreditNonNullableFields$1 {
    amount?: PriceNonNullableFields$1;
}
interface RegularPaymentNonNullableFields$1 {
    amount?: PriceNonNullableFields$1;
}
interface PaymentPendingNonNullableFields$1 {
    regular?: RegularPaymentNonNullableFields$1;
    paymentId: string;
}
interface PaymentCanceledNonNullableFields$1 {
    regular?: RegularPaymentNonNullableFields$1;
    paymentId: string;
}
interface PaymentDeclinedNonNullableFields$1 {
    regular?: RegularPaymentNonNullableFields$1;
    paymentId: string;
}
interface ActivityNonNullableFields$1 {
    customActivity?: CustomActivityNonNullableFields$1;
    merchantComment?: MerchantCommentNonNullableFields$1;
    orderRefunded?: OrderRefundedNonNullableFields$1;
    orderCreatedFromExchange?: OrderCreatedFromExchangeNonNullableFields$1;
    newExchangeOrderCreated?: NewExchangeOrderCreatedNonNullableFields$1;
    draftOrderChangesApplied?: DraftOrderChangesAppliedNonNullableFields$1;
    savedPaymentMethod?: SavedPaymentMethodNonNullableFields$1;
    authorizedPaymentCreated?: AuthorizedPaymentCreatedNonNullableFields$1;
    authorizedPaymentCaptured?: AuthorizedPaymentCapturedNonNullableFields$1;
    authorizedPaymentVoided?: AuthorizedPaymentVoidedNonNullableFields$1;
    refundInitiated?: RefundInitiatedNonNullableFields$1;
    paymentRefunded?: PaymentRefundedNonNullableFields$1;
    paymentRefundFailed?: PaymentRefundFailedNonNullableFields$1;
    refundedAsStoreCredit?: RefundedAsStoreCreditNonNullableFields$1;
    paymentPending?: PaymentPendingNonNullableFields$1;
    paymentCanceled?: PaymentCanceledNonNullableFields$1;
    paymentDeclined?: PaymentDeclinedNonNullableFields$1;
    type: ActivityType$1;
}
interface V1CreatedByNonNullableFields$1 {
    userId: string;
    memberId: string;
    visitorId: string;
    appId: string;
}
interface ChannelInfoNonNullableFields$1 {
    type: ChannelType$1;
}
interface CustomFieldNonNullableFields$1 {
    title: string;
}
interface V1BalanceSummaryNonNullableFields$1 {
    balance?: BalanceNonNullableFields$1;
    paid?: PriceNonNullableFields$1;
    refunded?: PriceNonNullableFields$1;
    authorized?: PriceNonNullableFields$1;
    pendingRefund?: PriceNonNullableFields$1;
    pending?: PriceNonNullableFields$1;
}
interface TagListNonNullableFields$1 {
    tagIds: string[];
}
interface TagsNonNullableFields$1 {
    privateTags?: TagListNonNullableFields$1;
    tags?: TagListNonNullableFields$1;
}
interface OrderNonNullableFields$1 {
    number: string;
    lineItems: OrderLineItemNonNullableFields$1[];
    buyerInfo?: BuyerInfoNonNullableFields$1;
    paymentStatus: PaymentStatus$1;
    fulfillmentStatus: FulfillmentStatus$1;
    weightUnit: WeightUnit$1;
    taxIncludedInPrices: boolean;
    priceSummary?: PriceSummaryNonNullableFields$1;
    billingInfo?: AddressWithContactNonNullableFields$1;
    shippingInfo?: V1ShippingInformationNonNullableFields$1;
    status: OrderStatus$1;
    taxSummary?: TaxSummaryNonNullableFields$1;
    taxInfo?: OrderTaxInfoNonNullableFields$1;
    appliedDiscounts: AppliedDiscountNonNullableFields$1[];
    activities: ActivityNonNullableFields$1[];
    attributionSource: AttributionSource$1;
    createdBy?: V1CreatedByNonNullableFields$1;
    channelInfo?: ChannelInfoNonNullableFields$1;
    customFields: CustomFieldNonNullableFields$1[];
    isInternalOrderCreate: boolean;
    payNow?: PriceSummaryNonNullableFields$1;
    balanceSummary?: V1BalanceSummaryNonNullableFields$1;
    additionalFees: AdditionalFeeNonNullableFields$1[];
    recipientInfo?: AddressWithContactNonNullableFields$1;
    tags?: TagsNonNullableFields$1;
}
interface CommitDraftOrderResponseNonNullableFields$1 {
    committedDraftOrder?: DraftOrderNonNullableFields$1;
    orderAfterCommit?: OrderNonNullableFields$1;
}
interface CreateOrderFromDraftResponseNonNullableFields$1 {
    committedDraftOrder?: DraftOrderNonNullableFields$1;
    createdOrder?: OrderNonNullableFields$1;
}
interface QueryDraftOrdersResponseNonNullableFields$1 {
    draftOrders: DraftOrderNonNullableFields$1[];
}

/** DraftOrder is the main entity of DraftOrders service. It represents a single edit order. */
interface DraftOrder {
    /**
     * Draft order ID.
     * @readonly
     */
    _id?: string | null;
    /** ID of the order this draft commits to. */
    orderId?: string | null;
    /**
     * Line items.
     * Includes details about changes when relevant.
     */
    lineItems?: ItemDetails[];
    /**
     * Shipping info.
     * Includes details about changes when relevant.
     */
    shippingInfo?: ShippingDetails;
    /**
     * Buyer information.
     * @deprecated Buyer information.
     * @replacedBy buyer_info_details
     * @targetRemovalDate 2024-08-30
     */
    buyerInfo?: BuyerInfo;
    /**
     * Billing address and contact details.
     * @deprecated Billing address and contact details.
     * @replacedBy billing_info_details
     * @targetRemovalDate 2024-08-30
     */
    billingInfo?: AddressWithContact;
    /**
     * Additional fees.
     * Includes details about the source, and whether the additional fee is applied to the order.
     */
    additionalFees?: AdditionalFeeDetails[];
    /**
     * Discounts.
     * Includes details about the source, and whether the discount is applied to the order.
     */
    discounts?: DiscountDetails[];
    /**
     * Date and time the draft order was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the draft order was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Identity of the draft order's initiator.
     * @readonly
     */
    createdBy?: CreatedBy;
    /**
     * Draft order status.
     * @readonly
     */
    status?: EditingStatus;
    /** Weight measurement unit. Defaults to the site's weight unit. */
    weightUnit?: WeightUnit;
    /** Currency used for pricing. */
    currency?: string | null;
    /**
     * Price summary.
     * @readonly
     */
    priceSummary?: PriceSummary;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax summary.
     * @readonly
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax summary.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary;
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: BalanceSummary;
    /** Side effects to perform on commit. */
    commitSettings?: DraftOrderCommitSettings;
    /** Member ID (if order created by a member). */
    memberId?: string | null;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    recipientInfo?: RecipientInfoDetails;
    /**
     * Custom field data for the draft order object.
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
interface ItemDetails extends ItemDetailsChangeTypeOneOf {
    /** Whether the line item was added as part of the draft. */
    added?: boolean;
    /** Line item fields before the change. */
    changedDetails?: ItemChangedDetails;
    /** Whether the line item was removed as part of the draft. */
    removed?: boolean;
    /** Line item details after applied changes. */
    lineItem?: OrderLineItem;
}
/** @oneof */
interface ItemDetailsChangeTypeOneOf {
    /** Whether the line item was added as part of the draft. */
    added?: boolean;
    /** Line item fields before the change. */
    changedDetails?: ItemChangedDetails;
    /** Whether the line item was removed as part of the draft. */
    removed?: boolean;
}
interface Price {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface PriceDescription {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface OrderLineItem {
    /** Line item ID. */
    _id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference;
    /** Line item quantity. */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price;
    /** Line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine[];
    /** Line item image. */
    image?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
     */
    fulfillerId?: string | null;
    /**
     * Number of items that were refunded.
     * @readonly
     */
    refundQuantity?: number | null;
    /**
     * Number of items restocked.
     * @readonly
     */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` - Partial payment for the given item to be paid upfront during the checkout. Eligible for catalog items with type `DEPOSIT_ONLINE` only.
     */
    paymentOption?: PaymentOptionType;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price;
}
interface ProductName {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface DescriptionLine extends DescriptionLineValueOneOf, DescriptionLineDescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
    /** Description line name. */
    name?: DescriptionLineName;
}
/** @oneof */
interface DescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf {
}
interface DescriptionLineName {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface PhysicalProperties {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ItemTaxFullDetails {
    /** Taxable amount of this line item. */
    taxableAmount?: Price;
    /** Tax rate percentage, as a decimal numeral between 0 and 1. For example, `"0.13"`. */
    taxRate?: string;
    /** The calculated tax, based on the `taxableAmount` and `taxRate`. */
    totalTax?: Price;
}
interface LineItemTaxInfo {
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    taxAmount?: Price;
    /** Amount for which tax is calculated. */
    taxableAmount?: Price;
    /** Tax rate %, as a decimal point. */
    taxRate?: string | null;
    /**
     * Tax group ID.
     * Learn more about [Tax Groups](https://dev.wix.com/docs/rest/business-management/payments/tax/tax-groups/introduction).
     */
    taxGroupId?: string | null;
    /** Indicates whether the price already includes tax. */
    taxIncludedInPrice?: boolean;
    /** Tax information for a line item. */
    taxBreakdown?: LineItemTaxBreakdown[];
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface LineItemTaxBreakdown {
    /** Jurisdiction that taxes were calculated for. For example, "New York", or "Quebec". */
    jurisdiction?: string | null;
    /** Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000. */
    rate?: string | null;
    /** Amount of tax calculated for this line item. */
    taxAmount?: Price;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** Type of jurisdiction that taxes were calculated for. */
    jurisdictionType?: JurisdictionType;
    /** Non-taxable amount of the line item price. */
    nonTaxableAmount?: Price;
    /** Taxable amount of the line item price. */
    taxableAmount?: Price;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DigitalFile {
    /** ID of the secure file in media. */
    fileId?: string;
    /** Link will exist after the digital links have been generated on the order. */
    link?: string | null;
    /**
     * Link expiration time and date.
     * @readonly
     */
    expirationDate?: Date | null;
}
interface SubscriptionInfo {
    /** Subscription ID. */
    _id?: string | null;
    /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */
    cycleNumber?: number;
    /** Subscription option title. For example, `"Monthly coffee Subscription"`. */
    subscriptionOptionTitle?: string;
    /** Subscription option description. For example, `"1kg of selected coffee, once a month"`. */
    subscriptionOptionDescription?: string | null;
    /** Subscription detailed information. */
    subscriptionSettings?: SubscriptionSettings;
}
interface SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency;
    /** Interval of recurring payment. */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
interface ItemChangedDetails {
    /** Line item quantity before change. */
    quantityBeforeChange?: number | null;
    /** Line item price before change. */
    priceBeforeChange?: Price;
    /** Line item price description before change. */
    priceDescriptionBeforeChange?: PriceDescription;
}
interface ShippingDetails extends ShippingDetailsChangeTypeOneOf {
    /** Whether shipping info was added as part of the draft. */
    added?: boolean;
    /** Shipping info before the change. */
    changedDetails?: ShippingChangedDetails;
    /** Whether shipping info was removed as part of the draft. */
    removed?: boolean;
    /** Selected Shipping details. */
    shippingInfo?: V1ShippingInformation;
}
/** @oneof */
interface ShippingDetailsChangeTypeOneOf {
    /** Whether shipping info was added as part of the draft. */
    added?: boolean;
    /** Shipping info before the change. */
    changedDetails?: ShippingChangedDetails;
    /** Whether shipping info was removed as part of the draft. */
    removed?: boolean;
}
interface V1ShippingInformation {
    /** App Def Id of external provider which was a source of shipping info */
    carrierId?: string | null;
    /** Unique code (or ID) of selected shipping option. For example, `"usps_std_overnight"``. */
    code?: string | null;
    /**
     * Shipping option title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"` or `"First-Class Package International"`.
     */
    title?: string;
    /** Shipping logistics. */
    logistics?: V1DeliveryLogistics;
    /** Shipping costs. */
    cost?: V1ShippingPrice;
    /** Shipping region. */
    region?: ShippingRegion;
}
interface V1DeliveryLogistics extends V1DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Pickup details. */
    pickupDetails?: V1PickupDetails;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /**
     * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Expected delivery time. */
    deliveryTimeSlot?: V1DeliveryTimeSlot;
}
/** @oneof */
interface V1DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Pickup details. */
    pickupDetails?: V1PickupDetails;
}
/** Billing Info and shipping details */
interface AddressWithContact {
    /** Address. */
    address?: Address;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
}
/** Physical address */
interface Address {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId;
}
interface VatId {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType;
}
/** tax info types */
declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface V1PickupDetails {
    /** Pickup address. */
    address?: PickupAddress;
    /** Pickup method */
    pickupMethod?: PickupDetailsPickupMethod;
}
/** Physical address */
interface PickupAddress {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address object, with number, name, and apartment number in separate fields. */
    streetAddress?: StreetAddress;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
declare enum PickupDetailsPickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface V1DeliveryTimeSlot {
    /** Delivery slot starting time. */
    from?: Date | null;
    /** Delivery slot ending time. */
    to?: Date | null;
}
interface V1ShippingPrice {
    /** Shipping price for display purposes. */
    price?: Price;
    /**
     * Total price of shipping after discounts (when relevant), and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price;
    /**
     * Shipping price after all discounts (if any exist), and after tax.
     * @readonly
     */
    totalPriceAfterTax?: Price;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /**
     * Shipping discount before tax.
     * @readonly
     */
    discount?: Price;
}
interface ShippingRegion {
    /** Name of shipping region. For example, `"Metropolitan London"`, or `"Outer Melbourne suburbs"`. */
    name?: string | null;
}
interface ShippingChangedDetails {
    /** Shipping info before the change. */
    shippingInfoBeforeChange?: V1ShippingInformation;
}
/** Buyer Info */
interface BuyerInfo extends BuyerInfoIdOneOf {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
    /** Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction). */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
}
interface AdditionalFeeDetails {
    /** Additional fee. */
    additionalFee?: AdditionalFee;
    /** Tax details related to the additional fee. */
    taxDetails?: TaxDetails;
    /**
     * Source of the additional fee.
     *
     * Supported values:
     * + `ORIGINAL_ORDER`: This additional fee is part of the original order.
     * + `CUSTOM`: This additional fee was created by the [Create Custom Additional Fees](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/draft-orders/create-custom-additional-fees) API.
     */
    source?: SourceType;
    /** Whether this additional fee is applied to the order. */
    applied?: boolean;
}
interface AdditionalFee {
    /** Additional fee's unique code for future processing. */
    code?: string | null;
    /** Name of additional fee. */
    name?: string;
    /** Additional fee's price. */
    price?: Price;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** SPI implementer's `appId`. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: Price;
    /** Additional fee's price after tax. */
    priceAfterTax?: Price;
    /** Additional fee's id. */
    _id?: string;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface TaxDetails {
    /** Indication if additional fee is taxable or not */
    taxable?: boolean;
    /** Optional tax group ID to use when calculating tax for this additional fee */
    taxGroupId?: string | null;
}
declare enum SourceType {
    /** Part of the original order */
    ORIGINAL_ORDER = "ORIGINAL_ORDER",
    /** Added by estimate * */
    AUTOMATIC = "AUTOMATIC",
    /** Added manually to current draft order */
    CUSTOM = "CUSTOM"
}
interface DiscountDetails {
    /** Discount details. */
    discount?: AppliedDiscount;
    /**
     * Source of the discount.
     *
     * Supported values:
     * + `ORIGINAL_ORDER`: This discount is part of the original order.
     * + `CUSTOM`: This discount was created by the [Create Custom Discounts](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/draft-orders/create-custom-discounts) API.
     */
    source?: SourceType;
    /** Whether this discount is applied to the order. */
    applied?: boolean;
}
interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {
    /** Applied coupon info. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Automatic Discount */
    discountRule?: DiscountRule;
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to specific items.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: AppliedDiscountDiscountType;
    /**
     * IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @deprecated IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemIds?: string[];
    /** Discount id. */
    _id?: string | null;
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf {
    /** Applied coupon info. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Automatic Discount */
    discountRule?: DiscountRule;
}
declare enum AppliedDiscountDiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** Coupon value. */
    amount?: Price;
}
interface MerchantDiscount extends MerchantDiscountMerchantDiscountReasonOneOf {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason;
    /** Discount description as free text (optional). */
    description?: string | null;
    /** Discount amount. */
    amount?: Price;
}
/** @oneof */
interface MerchantDiscountMerchantDiscountReasonOneOf {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason;
    /** Discount description as free text (optional). */
    description?: string | null;
}
declare enum DiscountReason {
    UNSPECIFIED = "UNSPECIFIED",
    EXCHANGED_ITEMS = "EXCHANGED_ITEMS"
}
interface DiscountRule {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName;
    /** Discount value. */
    amount?: Price;
}
interface DiscountRuleName {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface CreatedBy extends CreatedByStringOneOf {
    /** User ID. When the draft order was created by a Wix user. */
    userId?: string;
    /** App ID. When the draft order was created by an app. */
    appId?: string;
}
/** @oneof */
interface CreatedByStringOneOf {
    /** User ID. When the draft order was created by a Wix user. */
    userId?: string;
    /** App ID. When the draft order was created by an app. */
    appId?: string;
}
declare enum EditingStatus {
    /** DraftOrder is in draft state. */
    DRAFT = "DRAFT",
    /** DraftOrder is in committed state. */
    COMMITTED = "COMMITTED"
}
declare enum WeightUnit {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface PriceSummary {
    /** Subtotal of all the line items, before discounts and before tax. */
    subtotal?: Price;
    /** Total shipping price, before discounts and before tax. */
    shipping?: Price;
    /** Total tax on this order. */
    tax?: Price;
    /** Total calculated discount value. */
    discount?: Price;
    /** Order’s total price after discounts and tax. */
    total?: Price;
    /** Total price of additional fees before tax. */
    totalAdditionalFees?: Price;
}
interface TaxSummary {
    /**
     * Total tax.
     * @readonly
     */
    totalTax?: Price;
}
interface BalanceSummary {
    /**
     * Amount left to pay for order to be considered paid.
     * @readonly
     */
    balance?: Balance;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price;
}
/**
 * Order balance. Reflects amount left to be paid on order and is calculated dynamically. Can be negative per balance definition.
 * `amount` field depends on order payment status:
 * + UNSPECIFIED, NOT_PAID: price_summary.total_price
 * + PARTIALLY_PAID : price_summary.total_price - pay_now.total_price
 * + PENDING, REFUNDED, PARTIALLY_REFUNDED, PAID : 0
 */
interface Balance {
    /**
     * Balance amount.
     *
     * A negative `amount` represents the amount to be refunded. This can happen due to overcharging or the order being modified after a payment has been made.
     * @readonly
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
/** Side-effects upon committing a draft order. */
interface DraftOrderCommitSettings {
    /**
     * Whether to send notifications to the buyer.
     *
     * Default: `true`
     */
    sendNotificationsToBuyer?: boolean | null;
    /**
     * Whether to send notifications to the business.
     *
     * Default: `true`
     */
    sendNotificationsToBusiness?: boolean | null;
    /**
     * Whether to add activities to the order.
     *
     * Default: `true`
     */
    addActivitiesToOrder?: boolean | null;
    /**
     * Whether to send email notifications to custom fulfillers when there is a change in the shippable items they fulfill.
     *
     * Default: `true`
     */
    sendNotificationsToCustomFulfillers?: boolean | null;
    /**
     * Line item IDs for which to perform an inventory change.
     * When not provided, inventory will not change.
     */
    updateInventory?: InventoryUpdate[];
}
interface InventoryUpdate {
    /** Line item ID. */
    lineItemId?: string;
}
interface RecipientInfoDetails extends RecipientInfoDetailsChangeTypeOneOf {
    /** Indicates that recipient information was added during draft. */
    added?: boolean;
    /** Indicates that recipient information was changed. Contains recipient information before draft. */
    changedDetails?: RecipientInfoChangedDetails;
    /** Indicates that recipient information was removed during draft. */
    removed?: boolean;
    /** Order recipient address and contact details. */
    recipientInfo?: AddressWithContact;
}
/** @oneof */
interface RecipientInfoDetailsChangeTypeOneOf {
    /** Indicates that recipient information was added during draft. */
    added?: boolean;
    /** Indicates that recipient information was changed. Contains recipient information before draft. */
    changedDetails?: RecipientInfoChangedDetails;
    /** Indicates that recipient information was removed during draft. */
    removed?: boolean;
}
interface RecipientInfoChangedDetails {
    /** Order recipient address and contact details before draft. */
    recipientInfoBeforeChange?: AddressWithContact;
}
interface OrderTaxInfo {
    /** Calculated tax, added from line items. */
    totalTax?: Price;
    /** The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate. */
    taxBreakdown?: OrderTaxBreakdown[];
    /**
     * Whether the draft order is exempt from tax calculations.
     *
     * Default: `false`
     * @readonly
     */
    taxExempt?: boolean | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface OrderTaxBreakdown {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionType?: JurisdictionType;
    /** The rate at which this tax detail was calculated. */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: Price;
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateDraftOrderRequest {
    /** To create a draft from existing order, provide its id. Otherwise, an empty draft will be created. */
    orderId: string | null;
}
interface CreateDraftOrderResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface CalculatedDraftOrder {
    /**
     * The draft order full details with calculations based on it's content.
     * Discount and additional fee options are also included.
     */
    draftOrder?: DraftOrder;
    /** Shipping options for the order. */
    shippingOptions?: ShippingOption[];
    /** Errors that occurred during calculation. */
    calculationErrors?: CalculationErrors;
}
interface ShippingOption {
    /** This carrier's unique ID */
    carrierId?: string | null;
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
    /** Shipping rate title. For example, `"USPS Standard Overnight Delivery"`, `"Standard"`, or `"First-Class Package International"`. */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics;
    /** Shipping cost. */
    cost?: ShippingPrice;
}
interface DeliveryLogistics {
    /** When the item is expected to be delivered in free text, e.g "3-5 business days" */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Ensure to come during Opening Hours, and please don't park in disabled-spot" */
    instructions?: string | null;
    /** Additional pickup details if it's a pickup */
    pickupDetails?: PickupDetails;
    /** Expected delivery time slot (from and to time stamps representation) */
    deliveryTimeSlot?: DeliveryTimeSlot;
}
interface PickupDetails {
    /** Pickup address */
    address?: Address;
    /**
     * Pickup method.
     *
     * Supported values:
     * + `"STORE_PICKUP"`
     * + `"PICKUP_POINT"`
     */
    pickupMethod?: PickupMethod;
}
declare enum PickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
interface ShippingPrice {
    /** The shipping rate's price. Must align with the [currency's decimal separator](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). */
    price?: Price;
    /** Currency of the shipping rate price as a 3-letter [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217). Must align with the `currency` passed to the function. */
    currency?: string;
}
interface CalculationErrors extends CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
    /** Tax calculation error. */
    taxCalculationError?: Details;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError[];
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
}
interface Details extends DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError {
    fieldViolations?: FieldViolation[];
}
declare enum RuleType {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation {
    field?: string;
    description?: string;
    violatedRule?: RuleType;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors {
    /** Carrier errors. */
    errors?: CarrierError[];
}
interface CarrierError {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details;
}
interface CreateEmptyDraftOrderRequest {
}
interface CreateEmptyDraftOrderResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface AddLineItemsToDraftOrderRequest {
    /** The draft order id */
    draftOrderId: string;
    /** Catalog line items to add to draft order. */
    catalogLineItems?: CatalogReferenceLineItem[];
    /** Custom line items to add to draft order. Custom line items don't trigger the Catalog service plugin. */
    customLineItems?: CustomLineItem[];
}
interface CatalogReferenceLineItem {
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /** Item quantity. */
    quantity?: number;
    /** Item price override. */
    price?: Price;
}
interface CustomLineItem {
    /** Line item ID. */
    _id?: string | null;
    /**
     * Item quantity.
     *
     * Min: `"1"`
     * Max: `"100000"`
     */
    quantity?: number;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName;
    /** URL to the item's page on the site. */
    url?: string;
    /** Item price **after** catalog-defined discount and line item discounts. */
    price?: Price;
    /** Total line item price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: Price;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: Price;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: Price;
    /** Line item description lines. Used for display purposes for order. */
    descriptionLines?: DescriptionLine[];
    /** Line item image details. */
    media?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability. */
    physicalProperties?: PhysicalProperties;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /** Delivery Profile Id for the product */
    deliveryProfileId?: string | null;
}
interface AddLineItemsToDraftOrderResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface UpdateLineItemsRequest {
    /** The draft order id */
    draftOrderId: string;
    /** Details of changes to apply per line item */
    lineItemChanges?: LineItemChangeDetails[];
}
interface LineItemChangeDetails {
    /** The line item id to change */
    lineItemId?: string;
    /** The new quantity for the line item. quantity zero means to remove the line item. */
    newQuantity?: number | null;
    /** The new price for 1 unit of the line item */
    newPrice?: string | null;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    newPriceDescription?: PriceDescription;
}
interface UpdateLineItemsResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface SetDiscountsRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The discount ids to opt-in. all existing discounts not listed are to be opted-out. */
    discounts: IdAndApplied[];
}
interface IdAndApplied {
    /** Discount ID. */
    _id?: string;
    /** Whether to apply the discount to the draft order. */
    applied?: boolean;
}
interface SetDiscountsResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface CreateCustomDiscountsRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The discounts to add. */
    discounts?: DiscountOption[];
}
interface DiscountOption extends DiscountOptionDiscountAmountOneOf {
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to a specific item.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: DiscountType;
    /**
     * ID of line item discount applies to.
     * @deprecated ID of line item discount applies to.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemId?: string | null;
    /**
     * Discount amount.
     * @deprecated Discount amount.
     * @replacedBy price_amount and percentage
     * @targetRemovalDate 2024-08-30
     */
    amount?: Price;
    /** Discount description as free text (optional). */
    description?: string | null;
    /**
     * Should opt-in the added discount. default = false.
     * if not set or false, then to opt-in them, please call SetDiscounts with the added discounts ids
     */
    applyToDraftOrder?: boolean | null;
}
/** @oneof */
interface DiscountOptionDiscountAmountOneOf {
}
declare enum DiscountType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
interface CreateCustomDiscountsResponse {
    /** The draft order details with the added discounts */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface DeleteCustomDiscountsRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The discounts to remove */
    discountIds: string[];
}
interface DeleteCustomDiscountsResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface SetAdditionalFeesRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The additional fees ids to opt-in. all existing additional fees not listed are to be opted-out */
    additionalFees: IdAndApplied[];
}
interface SetAdditionalFeesResponse {
    /** The draft order details calculated with modified additional fees */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface CreateCustomAdditionalFeesRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The additional fees to add. added with opted-out setting */
    customAdditionalFees?: AdditionalFeeOption[];
}
interface AdditionalFeeOption {
    /** Translated additional fee's name */
    name?: string;
    /** Additional fee's price */
    price?: Price;
    /** Tax calculation details */
    taxDetails?: TaxDetails;
    /**
     * Should apply the additional fee. default = false.
     * if not set or false, then to apply them, please call ApplyAdditionalFees with the added additional fee ids
     */
    applyToDraftOrder?: boolean | null;
    /** Additional fee's unique code (or ID) for future processing */
    code?: string | null;
}
interface CreateCustomAdditionalFeesResponse {
    /** The draft order details with added custom additional fees */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface DeleteCustomAdditionalFeesRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The additional fees to remove */
    customAdditionalFees: string[];
}
interface DeleteCustomAdditionalFeesResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface SetShippingInfoRequest {
}
interface SetShippingInfoResponse {
}
interface SetBuyerInfoRequest {
}
interface SetBuyerInfoResponse {
}
interface SetRecipientInfoRequest {
}
interface SetRecipientInfoResponse {
}
interface SetBillingInfoRequest {
}
interface SetBillingInfoResponse {
}
interface GetDraftOrderRequest {
    /** The draft order id */
    draftOrderId: string;
}
interface GetDraftOrderResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface GetOrderDraftabilityStatusRequest {
    /** Order ID. */
    orderId: string;
}
interface GetOrderDraftabilityStatusResponse {
    /** Order ID. */
    orderId?: string;
    /** Whether a draft can be created from this order */
    orderDraftable?: boolean;
    /** Reasons why the order is not draftable */
    nonDraftableReasons?: NonDraftableReason[];
}
declare enum NonDraftableReason {
    UNSPECIFIED = "UNSPECIFIED",
    PARTIALLY_OR_FULLY_REFUNDED = "PARTIALLY_OR_FULLY_REFUNDED",
    UNSUPPORTED_CHANNEL_TYPE = "UNSUPPORTED_CHANNEL_TYPE",
    ORDER_STATUS_IS_NOT_SUPPORTED = "ORDER_STATUS_IS_NOT_SUPPORTED",
    ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT = "ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT",
    ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT = "ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT",
    AMOUNTS_DO_NOT_ADD_UP = "AMOUNTS_DO_NOT_ADD_UP",
    /** remove - this is not a reason, it's an error */
    ORDER_NOT_FOUND = "ORDER_NOT_FOUND",
    SUBSCRIPTION_LINE_ITEM_EXISTS = "SUBSCRIPTION_LINE_ITEM_EXISTS",
    UNSUPPORTED_CATALOG_ITEM = "UNSUPPORTED_CATALOG_ITEM",
    TAXABLE_EXISTING_ADDITIONAL_FEE = "TAXABLE_EXISTING_ADDITIONAL_FEE"
}
interface CommitDraftOrderRequest {
    /** The draft order id */
    draftOrderId: string;
    /** Optional side effects to trigger */
    commitSettings?: DraftOrderCommitSettings;
    /** Reason for edit, given by user (optional). */
    reason?: string | null;
}
interface CommitDraftOrderResponse {
    /** The draft order after commit. */
    committedDraftOrder?: DraftOrder;
    /** The updated order after commit. */
    orderAfterCommit?: Order;
}
interface Order {
    /**
     * Order ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Order number displayed in the site owner's dashboard (auto-generated).
     * @readonly
     */
    number?: string;
    /**
     * Date and time the order was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Order line items.
     * @readonly
     */
    lineItems?: OrderLineItem[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /**
     * Order payment status.
     * + `NOT_PAID` - This can be an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.
     * + This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.
     * + `PAID` - All payments associated with this order are paid. For online payments: [`payment.regularPaymentDetails.status: APPROVED`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object). For gift cards: [`payment.giftCardPaymentDetails.voided: false`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object).
     * + `PARTIALLY_REFUNDED` - Order was refunded, but refund amount is less than order total price.
     * + `FULLY_REFUNDED` - Order fully refunded. Refund amount equals total price.
     * + `PENDING` - Payments received but not yet confirmed by the payment provider.
     * + `PARTIALLY_PAID` -  At least one payment was received and approved, covering less than total price amount.
     */
    paymentStatus?: PaymentStatus;
    /**
     * Order fulfillment status.
     * @readonly
     */
    fulfillmentStatus?: FulfillmentStatus;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit;
    /** Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format. */
    currency?: string | null;
    /** Whether tax is included in line item prices. */
    taxIncludedInPrices?: boolean;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: V1ShippingInformation;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /**
     * Order status.
     * + `INITIALIZED`: Order created, but not yet approved or canceled.
     * + `APPROVED`: Order approved. This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order). Offline orders (cash payment) are automatically approved.
     * + `CANCELED`: Order canceled by the user.
     */
    status?: OrderStatus;
    /** Whether order is archived. */
    archived?: boolean | null;
    /**
     * Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @deprecated Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary;
    /** Tax information. */
    taxInfo?: OrderTaxInfo;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount[];
    /**
     * Order activities.
     * @readonly
     */
    activities?: Activity[];
    /** Order attribution source. */
    attributionSource?: AttributionSource;
    /**
     * ID of the order's initiator.
     * @readonly
     */
    createdBy?: V1CreatedBy;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo;
    /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */
    seenByAHuman?: boolean | null;
    /** Checkout ID. */
    checkoutId?: string | null;
    /** Custom fields. */
    customFields?: CustomField[];
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: V1BalanceSummary;
    /** Additional fees applied to the order. */
    additionalFees?: AdditionalFee[];
    /**
     * Custom field data for the order object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact;
    /**
     * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * Used for migration from external systems.
     */
    purchasedDate?: Date | null;
}
declare enum PaymentStatus {
    UNSPECIFIED = "UNSPECIFIED",
    /** Order is not paid */
    NOT_PAID = "NOT_PAID",
    /** Order is paid */
    PAID = "PAID",
    /** Order was refunded, refund amount less than order total price */
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    /** Full order total price was refunded */
    FULLY_REFUNDED = "FULLY_REFUNDED",
    /** Payments received but not yet confirmed by the payment provider */
    PENDING = "PENDING",
    /** At least one payment was received and approved, covering less than total price amount */
    PARTIALLY_PAID = "PARTIALLY_PAID"
}
declare enum FulfillmentStatus {
    /** none of the order items are fulfilled or order was manually marked as unfulfilled */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled or order was manually marked as fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FULFILLED = "FULFILLED",
    /** Some, but not all of the order items are fulfilled */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
declare enum OrderStatus {
    INITIALIZED = "INITIALIZED",
    APPROVED = "APPROVED",
    CANCELED = "CANCELED"
}
interface Activity extends ActivityContentOneOf {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded;
    /**
     * Activity ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Activity author's email.
     * @readonly
     */
    authorEmail?: string | null;
    /**
     * Activity creation date and time.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Activity type. */
    type?: ActivityType;
}
/** @oneof */
interface ActivityContentOneOf {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded;
}
interface CustomActivity {
    /** ID of the app that created the custom activity. */
    appId?: string;
    /** Custom activity type. For example, `"Ticket number set"`. */
    type?: string;
    /** Additional data in key-value form. For example, `{ "Ticket number": "123456" }`. */
    additionalData?: Record<string, string>;
}
/** Store owner added a comment */
interface MerchantComment {
    /** Merchant comment message. */
    message?: string;
}
interface OrderRefunded {
    /** Whether order was refunded manually. For example, via payment provider or using cash. */
    manual?: boolean;
    /** Refund amount. */
    amount?: Price;
    /** Reason for refund. */
    reason?: string;
}
declare enum LineItemQuantityChangeType {
    QUANTITY_INCREASED = "QUANTITY_INCREASED",
    QUANTITY_DECREASED = "QUANTITY_DECREASED"
}
declare enum ActivityType {
    ORDER_REFUNDED = "ORDER_REFUNDED",
    ORDER_PLACED = "ORDER_PLACED",
    ORDER_PAID = "ORDER_PAID",
    ORDER_FULFILLED = "ORDER_FULFILLED",
    ORDER_NOT_FULFILLED = "ORDER_NOT_FULFILLED",
    ORDER_CANCELED = "ORDER_CANCELED",
    DOWNLOAD_LINK_SENT = "DOWNLOAD_LINK_SENT",
    TRACKING_NUMBER_ADDED = "TRACKING_NUMBER_ADDED",
    TRACKING_NUMBER_EDITED = "TRACKING_NUMBER_EDITED",
    TRACKING_LINK_ADDED = "TRACKING_LINK_ADDED",
    SHIPPING_CONFIRMATION_EMAIL_SENT = "SHIPPING_CONFIRMATION_EMAIL_SENT",
    INVOICE_ADDED = "INVOICE_ADDED",
    INVOICE_REMOVED = "INVOICE_REMOVED",
    INVOICE_SENT = "INVOICE_SENT",
    FULFILLER_EMAIL_SENT = "FULFILLER_EMAIL_SENT",
    SHIPPING_ADDRESS_EDITED = "SHIPPING_ADDRESS_EDITED",
    EMAIL_EDITED = "EMAIL_EDITED",
    PICKUP_READY_EMAIL_SENT = "PICKUP_READY_EMAIL_SENT",
    CUSTOM_ACTIVITY = "CUSTOM_ACTIVITY",
    MERCHANT_COMMENT = "MERCHANT_COMMENT",
    ORDER_CREATED_FROM_EXCHANGE = "ORDER_CREATED_FROM_EXCHANGE",
    NEW_EXCHANGE_ORDER_CREATED = "NEW_EXCHANGE_ORDER_CREATED",
    ORDER_PARTIALLY_PAID = "ORDER_PARTIALLY_PAID",
    DRAFT_ORDER_CHANGES_APPLIED = "DRAFT_ORDER_CHANGES_APPLIED",
    SAVED_PAYMENT_METHOD = "SAVED_PAYMENT_METHOD"
}
declare enum AttributionSource {
    UNSPECIFIED = "UNSPECIFIED",
    FACEBOOK_ADS = "FACEBOOK_ADS"
}
interface V1CreatedBy extends V1CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
/** @oneof */
interface V1CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
interface ChannelInfo {
    /** Sales channel that submitted the order. */
    type?: ChannelType;
    /** Reference to an order ID from an external system. */
    externalOrderId?: string | null;
    /** URL to the order in the external system. */
    externalOrderUrl?: string | null;
}
declare enum ChannelType {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CustomField {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
interface V1BalanceSummary {
    /**
     * Current amount left to pay.
     * @readonly
     */
    balance?: Balance;
    /**
     * Sum of all approved and successful payments.
     *
     * The value includes payments that have subsequently been fully or partially refunded.
     * @readonly
     */
    paid?: Price;
    /**
     * Sum of all successfully refunded payments.
     * @readonly
     */
    refunded?: Price;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price;
}
interface CreateOrderFromDraftRequest {
}
interface CreateOrderFromDraftResponse {
}
interface DeleteDraftOrderRequest {
    /** The draft order id */
    draftOrderId: string;
}
interface DeleteDraftOrderResponse {
}
interface QueryDraftOrdersRequest {
    /** WQL expression */
    query?: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryDraftOrdersResponse {
    /** list of edits per order */
    draftOrders?: DraftOrder[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface PriceNonNullableFields {
    amount: string;
    formattedAmount: string;
}
interface PriceDescriptionNonNullableFields {
    original: string;
}
interface ItemChangedDetailsNonNullableFields {
    priceBeforeChange?: PriceNonNullableFields;
    priceDescriptionBeforeChange?: PriceDescriptionNonNullableFields;
}
interface ProductNameNonNullableFields {
    original: string;
}
interface CatalogReferenceNonNullableFields {
    catalogItemId: string;
    appId: string;
}
interface PlainTextValueNonNullableFields {
    original: string;
}
interface ColorNonNullableFields {
    original: string;
}
interface DescriptionLineNameNonNullableFields {
    original: string;
}
interface DescriptionLineNonNullableFields {
    plainText?: PlainTextValueNonNullableFields;
    colorInfo?: ColorNonNullableFields;
    plainTextValue?: PlainTextValueNonNullableFields;
    color: string;
    name?: DescriptionLineNameNonNullableFields;
    lineType: DescriptionLineType;
}
interface PhysicalPropertiesNonNullableFields {
    shippable: boolean;
}
interface ItemTypeNonNullableFields {
    preset: ItemTypeItemType;
    custom: string;
}
interface ItemTaxFullDetailsNonNullableFields {
    taxableAmount?: PriceNonNullableFields;
    taxRate: string;
    totalTax?: PriceNonNullableFields;
}
interface LineItemTaxBreakdownNonNullableFields {
    taxAmount?: PriceNonNullableFields;
    jurisdictionType: JurisdictionType;
    nonTaxableAmount?: PriceNonNullableFields;
    taxableAmount?: PriceNonNullableFields;
}
interface LineItemTaxInfoNonNullableFields {
    taxAmount?: PriceNonNullableFields;
    taxableAmount?: PriceNonNullableFields;
    taxIncludedInPrice: boolean;
    taxBreakdown: LineItemTaxBreakdownNonNullableFields[];
}
interface DigitalFileNonNullableFields {
    fileId: string;
}
interface SubscriptionSettingsNonNullableFields {
    frequency: SubscriptionFrequency;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
}
interface SubscriptionInfoNonNullableFields {
    cycleNumber: number;
    subscriptionOptionTitle: string;
    subscriptionSettings?: SubscriptionSettingsNonNullableFields;
}
interface LocationAndQuantityNonNullableFields {
    _id: string;
    quantity: number;
}
interface TaxableAddressNonNullableFields {
    addressType: TaxableAddressType;
}
interface OrderLineItemNonNullableFields {
    _id: string;
    productName?: ProductNameNonNullableFields;
    catalogReference?: CatalogReferenceNonNullableFields;
    quantity: number;
    totalDiscount?: PriceNonNullableFields;
    descriptionLines: DescriptionLineNonNullableFields[];
    image: string;
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    itemType?: ItemTypeNonNullableFields;
    price?: PriceNonNullableFields;
    priceBeforeDiscounts?: PriceNonNullableFields;
    totalPriceBeforeTax?: PriceNonNullableFields;
    totalPriceAfterTax?: PriceNonNullableFields;
    paymentOption: PaymentOptionType;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    taxInfo?: LineItemTaxInfoNonNullableFields;
    digitalFile?: DigitalFileNonNullableFields;
    subscriptionInfo?: SubscriptionInfoNonNullableFields;
    priceDescription?: PriceDescriptionNonNullableFields;
    depositAmount?: PriceNonNullableFields;
    locations: LocationAndQuantityNonNullableFields[];
    lineItemPrice?: PriceNonNullableFields;
    taxableAddress?: TaxableAddressNonNullableFields;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
}
interface ItemDetailsNonNullableFields {
    added: boolean;
    changedDetails?: ItemChangedDetailsNonNullableFields;
    removed: boolean;
    lineItem?: OrderLineItemNonNullableFields;
}
interface StreetAddressNonNullableFields {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields;
}
interface VatIdNonNullableFields {
    _id: string;
    type: VatType;
}
interface FullAddressContactDetailsNonNullableFields {
    vatId?: VatIdNonNullableFields;
}
interface AddressWithContactNonNullableFields {
    address?: AddressNonNullableFields;
    contactDetails?: FullAddressContactDetailsNonNullableFields;
}
interface PickupAddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields;
}
interface V1PickupDetailsNonNullableFields {
    address?: PickupAddressNonNullableFields;
    pickupMethod: PickupDetailsPickupMethod;
}
interface V1DeliveryLogisticsNonNullableFields {
    shippingDestination?: AddressWithContactNonNullableFields;
    pickupDetails?: V1PickupDetailsNonNullableFields;
}
interface V1ShippingPriceNonNullableFields {
    price?: PriceNonNullableFields;
    totalPriceBeforeTax?: PriceNonNullableFields;
    totalPriceAfterTax?: PriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    discount?: PriceNonNullableFields;
}
interface V1ShippingInformationNonNullableFields {
    title: string;
    logistics?: V1DeliveryLogisticsNonNullableFields;
    cost?: V1ShippingPriceNonNullableFields;
}
interface ShippingChangedDetailsNonNullableFields {
    shippingInfoBeforeChange?: V1ShippingInformationNonNullableFields;
}
interface ShippingDetailsNonNullableFields {
    added: boolean;
    changedDetails?: ShippingChangedDetailsNonNullableFields;
    removed: boolean;
    shippingInfo?: V1ShippingInformationNonNullableFields;
}
interface BuyerInfoNonNullableFields {
    visitorId: string;
    memberId: string;
}
interface AdditionalFeeNonNullableFields {
    name: string;
    price?: PriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    priceBeforeTax?: PriceNonNullableFields;
    priceAfterTax?: PriceNonNullableFields;
    _id: string;
    lineItemIds: string[];
}
interface TaxDetailsNonNullableFields {
    taxable: boolean;
}
interface AdditionalFeeDetailsNonNullableFields {
    additionalFee?: AdditionalFeeNonNullableFields;
    taxDetails?: TaxDetailsNonNullableFields;
    source: SourceType;
    applied: boolean;
}
interface CouponNonNullableFields {
    _id: string;
    code: string;
    name: string;
    amount?: PriceNonNullableFields;
}
interface MerchantDiscountNonNullableFields {
    discountReason: DiscountReason;
    amount?: PriceNonNullableFields;
}
interface DiscountRuleNameNonNullableFields {
    original: string;
}
interface DiscountRuleNonNullableFields {
    _id: string;
    name?: DiscountRuleNameNonNullableFields;
    amount?: PriceNonNullableFields;
}
interface LineItemDiscountNonNullableFields {
    _id: string;
    totalDiscount?: PriceNonNullableFields;
}
interface AppliedDiscountNonNullableFields {
    coupon?: CouponNonNullableFields;
    merchantDiscount?: MerchantDiscountNonNullableFields;
    discountRule?: DiscountRuleNonNullableFields;
    discountType: AppliedDiscountDiscountType;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields[];
}
interface DiscountDetailsNonNullableFields {
    discount?: AppliedDiscountNonNullableFields;
    source: SourceType;
    applied: boolean;
}
interface CreatedByNonNullableFields {
    userId: string;
    appId: string;
}
interface PriceSummaryNonNullableFields {
    subtotal?: PriceNonNullableFields;
    shipping?: PriceNonNullableFields;
    tax?: PriceNonNullableFields;
    discount?: PriceNonNullableFields;
    totalPrice?: PriceNonNullableFields;
    total?: PriceNonNullableFields;
    totalWithGiftCard?: PriceNonNullableFields;
    totalWithoutGiftCard?: PriceNonNullableFields;
    totalAdditionalFees?: PriceNonNullableFields;
}
interface TaxSummaryNonNullableFields {
    totalTax?: PriceNonNullableFields;
}
interface BalanceNonNullableFields {
    amount: string;
    formattedAmount: string;
}
interface BalanceSummaryNonNullableFields {
    balance?: BalanceNonNullableFields;
    paid?: PriceNonNullableFields;
    refunded?: PriceNonNullableFields;
    authorized?: PriceNonNullableFields;
}
interface InventoryUpdateNonNullableFields {
    lineItemId: string;
}
interface DraftOrderCommitSettingsNonNullableFields {
    updateInventory: InventoryUpdateNonNullableFields[];
}
interface RecipientInfoChangedDetailsNonNullableFields {
    recipientInfoBeforeChange?: AddressWithContactNonNullableFields;
}
interface RecipientInfoDetailsNonNullableFields {
    added: boolean;
    changedDetails?: RecipientInfoChangedDetailsNonNullableFields;
    removed: boolean;
    recipientInfo?: AddressWithContactNonNullableFields;
}
interface OrderTaxBreakdownNonNullableFields {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionType: JurisdictionType;
    rate: string;
    aggregatedTaxAmount?: PriceNonNullableFields;
    aggregatedTaxableAmount?: PriceNonNullableFields;
}
interface OrderTaxInfoNonNullableFields {
    totalTax?: PriceNonNullableFields;
    taxBreakdown: OrderTaxBreakdownNonNullableFields[];
}
interface BuyerChangedDetailsNonNullableFields {
    buyerInfoBeforeChange?: BuyerInfoNonNullableFields;
}
interface BuyerDetailsNonNullableFields {
    added: boolean;
    changedDetails?: BuyerChangedDetailsNonNullableFields;
    removed: boolean;
    buyerInfo?: BuyerInfoNonNullableFields;
}
interface BillingChangedDetailsNonNullableFields {
    billingInfoBeforeChange?: AddressWithContactNonNullableFields;
}
interface BillingDetailsNonNullableFields {
    added: boolean;
    changedDetails?: BillingChangedDetailsNonNullableFields;
    removed: boolean;
    billingInfo?: AddressWithContactNonNullableFields;
}
interface DraftOrderNonNullableFields {
    lineItems: ItemDetailsNonNullableFields[];
    shippingInfo?: ShippingDetailsNonNullableFields;
    buyerInfo?: BuyerInfoNonNullableFields;
    billingInfo?: AddressWithContactNonNullableFields;
    additionalFees: AdditionalFeeDetailsNonNullableFields[];
    discounts: DiscountDetailsNonNullableFields[];
    createdBy?: CreatedByNonNullableFields;
    status: EditingStatus;
    weightUnit: WeightUnit;
    priceSummary?: PriceSummaryNonNullableFields;
    taxSummary?: TaxSummaryNonNullableFields;
    balanceSummary?: BalanceSummaryNonNullableFields;
    commitSettings?: DraftOrderCommitSettingsNonNullableFields;
    recipientInfo?: RecipientInfoDetailsNonNullableFields;
    taxInfo?: OrderTaxInfoNonNullableFields;
    buyerDetails?: BuyerDetailsNonNullableFields;
    billingDetails?: BillingDetailsNonNullableFields;
}
interface PickupDetailsNonNullableFields {
    address?: AddressNonNullableFields;
    pickupMethod: PickupMethod;
}
interface DeliveryLogisticsNonNullableFields {
    pickupDetails?: PickupDetailsNonNullableFields;
}
interface ShippingPriceNonNullableFields {
    price?: PriceNonNullableFields;
    currency: string;
}
interface ShippingOptionNonNullableFields {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields;
    cost?: ShippingPriceNonNullableFields;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface FieldViolationNonNullableFields {
    field: string;
    description: string;
    violatedRule: RuleType;
}
interface ValidationErrorNonNullableFields {
    fieldViolations: FieldViolationNonNullableFields[];
}
interface DetailsNonNullableFields {
    applicationError?: ApplicationErrorNonNullableFields;
    validationError?: ValidationErrorNonNullableFields;
}
interface CarrierErrorNonNullableFields {
    carrierId: string;
    error?: DetailsNonNullableFields;
}
interface CarrierErrorsNonNullableFields {
    errors: CarrierErrorNonNullableFields[];
}
interface CalculationErrorsNonNullableFields {
    generalShippingCalculationError?: DetailsNonNullableFields;
    carrierErrors?: CarrierErrorsNonNullableFields;
    taxCalculationError?: DetailsNonNullableFields;
    orderValidationErrors: ApplicationErrorNonNullableFields[];
}
interface CalculatedDraftOrderNonNullableFields {
    draftOrder?: DraftOrderNonNullableFields;
    shippingOptions: ShippingOptionNonNullableFields[];
    calculationErrors?: CalculationErrorsNonNullableFields;
}
interface CreateDraftOrderResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface CreateEmptyDraftOrderResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface AddLineItemsToDraftOrderResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface UpdateLineItemsResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetDiscountsResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface CreateCustomDiscountsResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface DeleteCustomDiscountsResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetAdditionalFeesResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface CreateCustomAdditionalFeesResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface DeleteCustomAdditionalFeesResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetShippingInfoResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetBuyerInfoResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetRecipientInfoResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetBillingInfoResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface GetDraftOrderResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface GetOrderDraftabilityStatusResponseNonNullableFields {
    orderId: string;
    orderDraftable: boolean;
    nonDraftableReasons: NonDraftableReason[];
}
interface CustomActivityNonNullableFields {
    appId: string;
    type: string;
}
interface MerchantCommentNonNullableFields {
    message: string;
}
interface OrderRefundedNonNullableFields {
    manual: boolean;
    amount?: PriceNonNullableFields;
    reason: string;
}
interface OrderCreatedFromExchangeNonNullableFields {
    originalOrderId: string;
}
interface LineItemExchangeDataNonNullableFields {
    lineItemId: string;
    quantity: number;
}
interface NewExchangeOrderCreatedNonNullableFields {
    exchangeOrderId: string;
    lineItems: LineItemExchangeDataNonNullableFields[];
}
interface LineItemQuantityChangeNonNullableFields {
    originalQuantity: number;
    newQuantity: number;
    diff: number;
    deltaType: LineItemQuantityChangeType;
}
interface LineItemPriceChangeNonNullableFields {
    originalPrice?: PriceNonNullableFields;
    newPrice?: PriceNonNullableFields;
}
interface LineItemChangesNonNullableFields {
    _id: string;
    name?: ProductNameNonNullableFields;
    quantity?: LineItemQuantityChangeNonNullableFields;
    price?: LineItemPriceChangeNonNullableFields;
}
interface ManagedLineItemNonNullableFields {
    _id: string;
    name?: ProductNameNonNullableFields;
    quantity: number;
}
interface TranslatedValueNonNullableFields {
    original: string;
}
interface LineItemAmountNonNullableFields {
    _id: string;
    name?: ProductNameNonNullableFields;
    amount?: PriceNonNullableFields;
}
interface ManagedDiscountNonNullableFields {
    _id: string;
    name?: TranslatedValueNonNullableFields;
    affectedLineItems: LineItemAmountNonNullableFields[];
    totalAmount?: PriceNonNullableFields;
}
interface ManagedAdditionalFeeNonNullableFields {
    _id: string;
    name?: TranslatedValueNonNullableFields;
    affectedLineItems: LineItemAmountNonNullableFields[];
    totalAmount?: PriceNonNullableFields;
}
interface TotalPriceChangeNonNullableFields {
    originalTotal?: PriceNonNullableFields;
    newTotal?: PriceNonNullableFields;
}
interface ShippingInformationNonNullableFields {
    total?: PriceNonNullableFields;
    shippingTitle: string;
}
interface ShippingInformationChangeNonNullableFields {
    originalShippingInfo?: ShippingInformationNonNullableFields;
    newShippingInfo?: ShippingInformationNonNullableFields;
}
interface OrderChangeNonNullableFields {
    lineItemChanged?: LineItemChangesNonNullableFields;
    lineItemAdded?: ManagedLineItemNonNullableFields;
    lineItemRemoved?: ManagedLineItemNonNullableFields;
    discountAdded?: ManagedDiscountNonNullableFields;
    discountRemoved?: ManagedDiscountNonNullableFields;
    additionalFeeAdded?: ManagedAdditionalFeeNonNullableFields;
    additionalFeeRemoved?: ManagedAdditionalFeeNonNullableFields;
    totalPriceChanged?: TotalPriceChangeNonNullableFields;
    shippingInformationChanged?: ShippingInformationChangeNonNullableFields;
}
interface DraftOrderChangesAppliedNonNullableFields {
    draftOrderId: string;
    changes: OrderChangeNonNullableFields[];
}
interface SavedPaymentMethodNonNullableFields {
    name: string;
}
interface AuthorizedPaymentCreatedNonNullableFields {
    paymentId: string;
    amount?: PriceNonNullableFields;
}
interface AuthorizedPaymentCapturedNonNullableFields {
    paymentId: string;
    amount?: PriceNonNullableFields;
}
interface AuthorizedPaymentVoidedNonNullableFields {
    paymentId: string;
    amount?: PriceNonNullableFields;
}
interface RegularPaymentRefundNonNullableFields {
    amount?: PriceNonNullableFields;
}
interface GiftCardPaymentRefundNonNullableFields {
    amount?: PriceNonNullableFields;
}
interface RefundedPaymentNonNullableFields {
    regular?: RegularPaymentRefundNonNullableFields;
    giftCard?: GiftCardPaymentRefundNonNullableFields;
    paymentId: string;
    externalRefund: boolean;
}
interface RefundInitiatedNonNullableFields {
    refundId: string;
    amount?: PriceNonNullableFields;
    payments: RefundedPaymentNonNullableFields[];
}
interface PaymentRefundedNonNullableFields {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields;
}
interface PaymentRefundFailedNonNullableFields {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields;
}
interface RefundedAsStoreCreditNonNullableFields {
    amount?: PriceNonNullableFields;
}
interface RegularPaymentNonNullableFields {
    amount?: PriceNonNullableFields;
}
interface PaymentPendingNonNullableFields {
    regular?: RegularPaymentNonNullableFields;
    paymentId: string;
}
interface PaymentCanceledNonNullableFields {
    regular?: RegularPaymentNonNullableFields;
    paymentId: string;
}
interface PaymentDeclinedNonNullableFields {
    regular?: RegularPaymentNonNullableFields;
    paymentId: string;
}
interface ActivityNonNullableFields {
    customActivity?: CustomActivityNonNullableFields;
    merchantComment?: MerchantCommentNonNullableFields;
    orderRefunded?: OrderRefundedNonNullableFields;
    orderCreatedFromExchange?: OrderCreatedFromExchangeNonNullableFields;
    newExchangeOrderCreated?: NewExchangeOrderCreatedNonNullableFields;
    draftOrderChangesApplied?: DraftOrderChangesAppliedNonNullableFields;
    savedPaymentMethod?: SavedPaymentMethodNonNullableFields;
    authorizedPaymentCreated?: AuthorizedPaymentCreatedNonNullableFields;
    authorizedPaymentCaptured?: AuthorizedPaymentCapturedNonNullableFields;
    authorizedPaymentVoided?: AuthorizedPaymentVoidedNonNullableFields;
    refundInitiated?: RefundInitiatedNonNullableFields;
    paymentRefunded?: PaymentRefundedNonNullableFields;
    paymentRefundFailed?: PaymentRefundFailedNonNullableFields;
    refundedAsStoreCredit?: RefundedAsStoreCreditNonNullableFields;
    paymentPending?: PaymentPendingNonNullableFields;
    paymentCanceled?: PaymentCanceledNonNullableFields;
    paymentDeclined?: PaymentDeclinedNonNullableFields;
    type: ActivityType;
}
interface V1CreatedByNonNullableFields {
    userId: string;
    memberId: string;
    visitorId: string;
    appId: string;
}
interface ChannelInfoNonNullableFields {
    type: ChannelType;
}
interface CustomFieldNonNullableFields {
    title: string;
}
interface V1BalanceSummaryNonNullableFields {
    balance?: BalanceNonNullableFields;
    paid?: PriceNonNullableFields;
    refunded?: PriceNonNullableFields;
    authorized?: PriceNonNullableFields;
    pendingRefund?: PriceNonNullableFields;
    pending?: PriceNonNullableFields;
}
interface TagListNonNullableFields {
    tagIds: string[];
}
interface TagsNonNullableFields {
    privateTags?: TagListNonNullableFields;
    tags?: TagListNonNullableFields;
}
interface OrderNonNullableFields {
    number: string;
    lineItems: OrderLineItemNonNullableFields[];
    buyerInfo?: BuyerInfoNonNullableFields;
    paymentStatus: PaymentStatus;
    fulfillmentStatus: FulfillmentStatus;
    weightUnit: WeightUnit;
    taxIncludedInPrices: boolean;
    priceSummary?: PriceSummaryNonNullableFields;
    billingInfo?: AddressWithContactNonNullableFields;
    shippingInfo?: V1ShippingInformationNonNullableFields;
    status: OrderStatus;
    taxSummary?: TaxSummaryNonNullableFields;
    taxInfo?: OrderTaxInfoNonNullableFields;
    appliedDiscounts: AppliedDiscountNonNullableFields[];
    activities: ActivityNonNullableFields[];
    attributionSource: AttributionSource;
    createdBy?: V1CreatedByNonNullableFields;
    channelInfo?: ChannelInfoNonNullableFields;
    customFields: CustomFieldNonNullableFields[];
    isInternalOrderCreate: boolean;
    payNow?: PriceSummaryNonNullableFields;
    balanceSummary?: V1BalanceSummaryNonNullableFields;
    additionalFees: AdditionalFeeNonNullableFields[];
    recipientInfo?: AddressWithContactNonNullableFields;
    tags?: TagsNonNullableFields;
}
interface CommitDraftOrderResponseNonNullableFields {
    committedDraftOrder?: DraftOrderNonNullableFields;
    orderAfterCommit?: OrderNonNullableFields;
}
interface CreateOrderFromDraftResponseNonNullableFields {
    committedDraftOrder?: DraftOrderNonNullableFields;
    createdOrder?: OrderNonNullableFields;
}
interface QueryDraftOrdersResponseNonNullableFields {
    draftOrders: DraftOrderNonNullableFields[];
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createDraftOrder(): __PublicMethodMetaInfo<'POST', {
    orderId: string;
}, CreateDraftOrderRequest, CreateDraftOrderRequest$1, CreateDraftOrderResponse & CreateDraftOrderResponseNonNullableFields, CreateDraftOrderResponse$1 & CreateDraftOrderResponseNonNullableFields$1>;
declare function createEmptyDraftOrder(): __PublicMethodMetaInfo<'POST', {}, CreateEmptyDraftOrderRequest, CreateEmptyDraftOrderRequest$1, CreateEmptyDraftOrderResponse & CreateEmptyDraftOrderResponseNonNullableFields, CreateEmptyDraftOrderResponse$1 & CreateEmptyDraftOrderResponseNonNullableFields$1>;
declare function addLineItemsToDraftOrder(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, AddLineItemsToDraftOrderRequest, AddLineItemsToDraftOrderRequest$1, AddLineItemsToDraftOrderResponse & AddLineItemsToDraftOrderResponseNonNullableFields, AddLineItemsToDraftOrderResponse$1 & AddLineItemsToDraftOrderResponseNonNullableFields$1>;
declare function updateLineItems(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, UpdateLineItemsRequest, UpdateLineItemsRequest$1, UpdateLineItemsResponse & UpdateLineItemsResponseNonNullableFields, UpdateLineItemsResponse$1 & UpdateLineItemsResponseNonNullableFields$1>;
declare function setDiscounts(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, SetDiscountsRequest, SetDiscountsRequest$1, SetDiscountsResponse & SetDiscountsResponseNonNullableFields, SetDiscountsResponse$1 & SetDiscountsResponseNonNullableFields$1>;
declare function createCustomDiscounts(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, CreateCustomDiscountsRequest, CreateCustomDiscountsRequest$1, CreateCustomDiscountsResponse & CreateCustomDiscountsResponseNonNullableFields, CreateCustomDiscountsResponse$1 & CreateCustomDiscountsResponseNonNullableFields$1>;
declare function deleteCustomDiscounts(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, DeleteCustomDiscountsRequest, DeleteCustomDiscountsRequest$1, DeleteCustomDiscountsResponse & DeleteCustomDiscountsResponseNonNullableFields, DeleteCustomDiscountsResponse$1 & DeleteCustomDiscountsResponseNonNullableFields$1>;
declare function setAdditionalFees(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, SetAdditionalFeesRequest, SetAdditionalFeesRequest$1, SetAdditionalFeesResponse & SetAdditionalFeesResponseNonNullableFields, SetAdditionalFeesResponse$1 & SetAdditionalFeesResponseNonNullableFields$1>;
declare function createCustomAdditionalFees(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, CreateCustomAdditionalFeesRequest, CreateCustomAdditionalFeesRequest$1, CreateCustomAdditionalFeesResponse & CreateCustomAdditionalFeesResponseNonNullableFields, CreateCustomAdditionalFeesResponse$1 & CreateCustomAdditionalFeesResponseNonNullableFields$1>;
declare function deleteCustomAdditionalFees(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, DeleteCustomAdditionalFeesRequest, DeleteCustomAdditionalFeesRequest$1, DeleteCustomAdditionalFeesResponse & DeleteCustomAdditionalFeesResponseNonNullableFields, DeleteCustomAdditionalFeesResponse$1 & DeleteCustomAdditionalFeesResponseNonNullableFields$1>;
declare function setShippingInfo(): __PublicMethodMetaInfo<'PUT', {}, SetShippingInfoRequest, SetShippingInfoRequest$1, SetShippingInfoResponse & SetShippingInfoResponseNonNullableFields, SetShippingInfoResponse$1 & SetShippingInfoResponseNonNullableFields$1>;
declare function setBuyerInfo(): __PublicMethodMetaInfo<'PUT', {}, SetBuyerInfoRequest, SetBuyerInfoRequest$1, SetBuyerInfoResponse & SetBuyerInfoResponseNonNullableFields, SetBuyerInfoResponse$1 & SetBuyerInfoResponseNonNullableFields$1>;
declare function setRecipientInfo(): __PublicMethodMetaInfo<'PUT', {}, SetRecipientInfoRequest, SetRecipientInfoRequest$1, SetRecipientInfoResponse & SetRecipientInfoResponseNonNullableFields, SetRecipientInfoResponse$1 & SetRecipientInfoResponseNonNullableFields$1>;
declare function setBillingInfo(): __PublicMethodMetaInfo<'PUT', {}, SetBillingInfoRequest, SetBillingInfoRequest$1, SetBillingInfoResponse & SetBillingInfoResponseNonNullableFields, SetBillingInfoResponse$1 & SetBillingInfoResponseNonNullableFields$1>;
declare function getDraftOrder(): __PublicMethodMetaInfo<'GET', {
    draftOrderId: string;
}, GetDraftOrderRequest, GetDraftOrderRequest$1, GetDraftOrderResponse & GetDraftOrderResponseNonNullableFields, GetDraftOrderResponse$1 & GetDraftOrderResponseNonNullableFields$1>;
declare function getOrderDraftabilityStatus(): __PublicMethodMetaInfo<'GET', {
    orderId: string;
}, GetOrderDraftabilityStatusRequest, GetOrderDraftabilityStatusRequest$1, GetOrderDraftabilityStatusResponse & GetOrderDraftabilityStatusResponseNonNullableFields, GetOrderDraftabilityStatusResponse$1 & GetOrderDraftabilityStatusResponseNonNullableFields$1>;
declare function commitDraftOrder(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, CommitDraftOrderRequest, CommitDraftOrderRequest$1, CommitDraftOrderResponse & CommitDraftOrderResponseNonNullableFields, CommitDraftOrderResponse$1 & CommitDraftOrderResponseNonNullableFields$1>;
declare function createOrderFromDraft(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, CreateOrderFromDraftRequest, CreateOrderFromDraftRequest$1, CreateOrderFromDraftResponse & CreateOrderFromDraftResponseNonNullableFields, CreateOrderFromDraftResponse$1 & CreateOrderFromDraftResponseNonNullableFields$1>;
declare function deleteDraftOrder(): __PublicMethodMetaInfo<'DELETE', {
    draftOrderId: string;
}, DeleteDraftOrderRequest, DeleteDraftOrderRequest$1, DeleteDraftOrderResponse, DeleteDraftOrderResponse$1>;
declare function queryDraftOrders(): __PublicMethodMetaInfo<'POST', {}, QueryDraftOrdersRequest, QueryDraftOrdersRequest$1, QueryDraftOrdersResponse & QueryDraftOrdersResponseNonNullableFields, QueryDraftOrdersResponse$1 & QueryDraftOrdersResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, addLineItemsToDraftOrder, commitDraftOrder, createCustomAdditionalFees, createCustomDiscounts, createDraftOrder, createEmptyDraftOrder, createOrderFromDraft, deleteCustomAdditionalFees, deleteCustomDiscounts, deleteDraftOrder, getDraftOrder, getOrderDraftabilityStatus, queryDraftOrders, setAdditionalFees, setBillingInfo, setBuyerInfo, setDiscounts, setRecipientInfo, setShippingInfo, updateLineItems };
