"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.revokeInvite = exports.resendInvite = exports.bulkInvite = exports.SortOrder = exports.InviteStatus = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixIdentityInvitesV1SiteInvite = __importStar(require("./identity-invites-v1-site-invite-site-invite.http"));
/** Invite status stating whether the invite was accepted, waiting to be accepted, deleted etc.. */
var InviteStatus;
(function (InviteStatus) {
    InviteStatus["Pending"] = "Pending";
    InviteStatus["Used"] = "Used";
    InviteStatus["Deleted"] = "Deleted";
    InviteStatus["Declined"] = "Declined";
    InviteStatus["Expired"] = "Expired";
})(InviteStatus || (exports.InviteStatus = InviteStatus = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
/**
 * Creates and sends emails inviting potential site contributors to become contributors in the requesting site.
 * > **Important**: This call requires an account level API key and cannot be authenticated with the standard authorization header. API keys are currently available to selected beta users only.
 * @param policyIds - Role IDs, referred to as policy IDs, to assign to the contributors.
 * @public
 * @documentationMaturity preview
 * @requiredField options.emails
 * @requiredField policyIds
 * @permissionId site-users.send-invite
 */
async function bulkInvite(policyIds, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        policyIds: policyIds,
        emails: options?.emails,
        invitePurpose: options?.invitePurpose,
        defaultEmailLanguage: options?.defaultEmailLanguage,
    });
    const reqOpts = ambassadorWixIdentityInvitesV1SiteInvite.bulkInvite(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                policyIds: '$[0]',
                emails: '$[1].emails',
                invitePurpose: '$[1].invitePurpose',
                defaultEmailLanguage: '$[1].defaultEmailLanguage',
            },
            singleArgumentUnchanged: false,
        }, ['policyIds', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkInvite = bulkInvite;
/**
 * Resends the email invitation to a potential site contributor.
 * > **Important**: This call requires an account level API key and cannot be authenticated with the standard authorization header. API keys are currently available to selected beta users only.
 * @param inviteId - Invite ID.
 * @public
 * @documentationMaturity preview
 * @requiredField inviteId
 * @permissionId site-users.send-invite
 */
async function resendInvite(inviteId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        inviteId: inviteId,
        defaultEmailLanguage: options?.defaultEmailLanguage,
    });
    const reqOpts = ambassadorWixIdentityInvitesV1SiteInvite.resendInvite(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                inviteId: '$[0]',
                defaultEmailLanguage: '$[1].defaultEmailLanguage',
            },
            singleArgumentUnchanged: false,
        }, ['inviteId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.resendInvite = resendInvite;
/**
 * Revokes a pending site contributor invite.
 * > **Important**: This call requires an account level API key and cannot be authenticated with the standard authorization header. API keys are currently available to selected beta users only.
 * @param inviteId - Invite ID.
 * @public
 * @documentationMaturity preview
 * @requiredField inviteId
 * @permissionId site-users.delete-invite
 */
async function revokeInvite(inviteId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ inviteId: inviteId });
    const reqOpts = ambassadorWixIdentityInvitesV1SiteInvite.revokeInvite(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { inviteId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['inviteId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.revokeInvite = revokeInvite;
//# sourceMappingURL=identity-invites-v1-site-invite-site-invite.universal.js.map