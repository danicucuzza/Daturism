interface Cart$1 {
    /** Cart ID. */
    id?: string | null;
    /**
     * Line items.
     * @readonly
     */
    lineItems?: LineItem$1[];
    /** Note left by the buyer/customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo$1;
    /**
     * Currency used for pricing.
     * @readonly
     */
    currency?: string;
    /**
     * Currency code used for all the converted prices that are returned.
     * For a site that supports multiple currencies, this is the currency the buyer selected.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string | null;
    /**
     * Site language in which original values are displayed.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrices?: boolean | null;
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit$1;
    /**
     * ID of the checkout that originated from this cart.
     * @readonly
     */
    checkoutId?: string | null;
    /**
     * Cart discounts.
     * @readonly
     */
    appliedDiscounts?: CartDiscount$1[];
    /**
     * Date and time the cart was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the cart was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Contact info. */
    contactInfo?: AddressWithContact$1;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used in the [Abandoned Checkout API](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/abandoned-checkout/introduction)
     * to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a
     * standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$1;
}
interface LineItem$1 {
    /**
     * Line item ID.
     * @readonly
     */
    id?: string | null;
    /** Item quantity. */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$1;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName$1;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: PageUrlV2;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice$1;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice$1;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice$1;
    /**
     * Line item description lines. Used for displaying the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine$1[];
    /**
     * Line item image details.
     * @readonly
     */
    image?: CommonImage;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo$1;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties$1;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType$1;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` - Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is defined by `lineItem.deposit`.
     * + `MEMBERSHIP_OFFLINE` - Payment for this item can only be performed by using a membership and must be manually redeemed in the dashboard by the site owner. When this option is used, `lineItem.price.amount` is 0.
     * @readonly
     */
    paymentOption?: PaymentOptionType$1;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties$1;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + in most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription$1;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice$1;
    /** Selected membership to be used as payment for this item. Must be used with `lineItem.paymentOption` set to `MEMBERSHIP` or `MEMBERSHIP_OFFLINE`. This field can be empty when `lineItem.paymentOption` is set to `MEMBERSHIP_OFFLINE`. */
    selectedMembership?: SelectedMembership$1;
    /**
     * Tax group ID for this line item.
     * @readonly
     */
    taxGroupId?: string | null;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields$1;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$1 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ProductName$1 {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PageUrlV2 {
    /** The relative path for the page within the site. For example, `/product-page/a-product`. */
    relativePath?: string;
    /** The page's full URL. For example, `https://mysite.com/product-page/a-product`. */
    url?: string | null;
}
interface MultiCurrencyPrice$1 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface DescriptionLine$1 extends DescriptionLineValueOneOf$1, DescriptionLineDescriptionLineValueOneOf$1 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$1;
    /** Description line color value. */
    colorInfo?: Color$1;
    /** Description line name. */
    name?: DescriptionLineName$1;
}
/** @oneof */
interface DescriptionLineValueOneOf$1 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$1;
    /** Description line color value. */
    colorInfo?: Color$1;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$1 {
}
interface DescriptionLineName$1 {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$1 {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$1 {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$1 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface CommonImage {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface ItemAvailabilityInfo$1 {
    /**
     * Item availability status.
     * + `"NOT_FOUND"`: Item does not exist
     * + `"NOT_AVAILABLE"`: Item not in stock
     * + `"PARTIALLY_AVAILABLE"`: Available quantity is less than requested
     */
    status?: ItemAvailabilityStatus$1;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus$1 {
    AVAILABLE = "AVAILABLE",
    NOT_FOUND = "NOT_FOUND",
    /** Not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
interface PhysicalProperties$1 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$1 extends ItemTypeItemTypeDataOneOf$1 {
    /** Preset item type. */
    preset?: ItemTypeItemType$1;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$1 {
    /** Preset item type. */
    preset?: ItemTypeItemType$1;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$1 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$1 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
declare enum FileType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$1 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties$1 {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface PriceDescription$1 {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
/** Selected Membership */
interface SelectedMembership$1 {
    /** Membership ID. */
    id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
}
interface CatalogOverrideFields$1 {
    /** Item name. */
    productName?: ProductName$1;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine$1[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$1;
    /** Item image. */
    image?: Image;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption$1;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface Image {
    /** WixMedia image ID. */
    id?: string;
    /** Original image height. */
    height?: number;
    /** Original image width. */
    width?: number;
    /** Image alt text. Optional. */
    altText?: string | null;
    /** Image filename. Optional. */
    filename?: string | null;
}
interface PaymentOption$1 {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType$1;
}
declare enum TaxableAddressType$1 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Buyer Info */
interface BuyerInfo$1 extends BuyerInfoIdOneOf$1 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the buyer (or cart owner) is a Wix user.
     * @readonly
     */
    userId?: string;
    /** Contact ID. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction). */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$1 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the buyer (or cart owner) is a Wix user.
     * @readonly
     */
    userId?: string;
}
declare enum WeightUnit$1 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface CartDiscount$1 extends CartDiscountDiscountSourceOneOf$1 {
    /** Coupon details. */
    coupon?: Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$1;
}
/** @oneof */
interface CartDiscountDiscountSourceOneOf$1 {
    /** Coupon details. */
    coupon?: Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$1;
}
interface Coupon$1 {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
}
interface MerchantDiscount$1 {
    /** Discount value. */
    amount?: MultiCurrencyPrice$1;
}
/** Billing Info and shipping details */
interface AddressWithContact$1 {
    /** Address. */
    address?: Address$1;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$1;
}
/** Physical address */
interface Address$1 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$1;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress$1 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$1 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$1;
}
interface VatId$1 {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$1;
}
/** tax info types */
declare enum VatType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface SelectedShippingOption$1 {
    /** Carrier ID. */
    carrierId?: string | null;
    /** Selected shipping option code. For example, "usps_std_overnight". */
    code?: string;
}
interface UpdateCartRequest$1 {
    /** Cart info. */
    cartInfo?: Cart$1;
    /** Coupon code. For more information, see [Coupons API](https://dev.wix.com/api/rest/wix-coupons/coupons/introduction). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput$1[];
    /** Catalog line items. */
    lineItems?: LineItem$1[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$1[];
}
interface MerchantDiscountInput$1 {
    /** Discount amount. */
    amount?: string;
    /** IDs of line items the discount applies to. */
    lineItemIds?: string[];
}
interface CustomLineItem$1 {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$1;
    /** Custom line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine$1[];
    /** Custom line item's media. */
    media?: Image;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName$1;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: PageUrlV2;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$1;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$1;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$1;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties$1;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$1;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface UpdateCartResponse$1 {
    /** Updated Cart. */
    cart?: Cart$1;
}
interface AddToCartResponse$1 {
    /** Updated cart. */
    cart?: Cart$1;
}
interface SelectedMemberships$1 {
    /** Selected memberships. */
    memberships?: HostSelectedMembership$1[];
}
interface HostSelectedMembership$1 {
    /** Membership ID. */
    id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface EstimateTotalsResponse$1 {
    /** Cart. */
    cart?: Cart$1;
    /** Calculated line items. */
    calculatedLineItems?: CalculatedLineItem$1[];
    /** Price summary. */
    priceSummary?: PriceSummary$1;
    /** Applied gift card. */
    giftCard?: GiftCard$1;
    /** Tax summary. */
    taxSummary?: TaxSummary$1;
    /** Shipping information. */
    shippingInfo?: ShippingInformation$1;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$1[];
    /** Calculation errors. */
    calculationErrors?: CalculationErrors$1;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$1;
    /** Currency used for pricing in this store. */
    currency?: string;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary$1;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary$1;
    /** Information about valid and invalid memberships, and which ones are selected for usage. */
    membershipOptions?: MembershipOptions$1;
    /** Additional fees */
    additionalFees?: AdditionalFee$1[];
    /**
     * List of validation violations raised by the [Validations service plugin](https://dev.wix.com/api/rest/wix-ecommerce/validations-integration-spi/introduction).
     * @readonly
     */
    violations?: Violation$1[];
}
interface CalculatedLineItem$1 {
    /** Line item ID. */
    lineItemId?: string;
    /** Price breakdown for this line item. */
    pricesBreakdown?: LineItemPricesData$1;
    /**
     * Type of selected payment option for current item. Supported values:
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item will happen as part of the checkout
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item will happen after the checkout
     * + `"MEMBERSHIP"` - This item cannot be paid via monetary payment options, only via non monetary option such membership. When this option is used, price must be set to 0
     * + `"DEPOSIT_ONLINE"` -  Partial payment of the given item will happen as part of the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$1;
}
interface LineItemPricesData$1 {
    /** Total price after discounts and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$1;
    /** Total price after discounts, and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$1;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$1;
    /** Total discount for all line items. */
    totalDiscount?: MultiCurrencyPrice$1;
    /** Catalog price after catalog discount and automatic discounts. */
    price?: MultiCurrencyPrice$1;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: MultiCurrencyPrice$1;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: MultiCurrencyPrice$1;
    /** Item price **before** line item discounts and **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: MultiCurrencyPrice$1;
}
interface ItemTaxFullDetails$1 {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice$1;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice$1;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown$1[];
}
interface TaxRateBreakdown$1 {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice$1;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$1 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface PriceSummary$1 {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice$1;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice$1;
    /** Total tax. */
    tax?: MultiCurrencyPrice$1;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice$1;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice$1;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice$1;
}
interface GiftCard$1 {
    /**
     * Gift Card ID.
     * @deprecated
     */
    id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice$1;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface TaxSummary$1 {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice$1;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice$1;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails$1;
}
interface TaxCalculationDetails$1 extends TaxCalculationDetailsCalculationDetailsOneOf$1 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$1;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$1;
    /** Rate calculation type. */
    rateType?: RateType$1;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf$1 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$1;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$1;
}
declare enum RateType$1 {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason$1 {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails$1 {
    /** reason for fallback */
    fallbackReason?: FallbackReason$1;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError$1;
}
declare enum FallbackReason$1 {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface ShippingInformation$1 {
    /** Shipping region. */
    region?: ShippingRegion$1;
    /** Selected shipping option. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption$1;
    /** All shipping options. */
    carrierServiceOptions?: CarrierServiceOption$1[];
}
interface ShippingRegion$1 {
    /**
     * Shipping region ID.
     * @readonly
     */
    id?: string;
    /** Shipping region name. */
    name?: string;
}
interface SelectedCarrierServiceOption$1 {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics$1;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices$1;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge$1[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface DeliveryLogistics$1 {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails$1;
}
interface PickupDetails$1 {
    /** Pickup address. */
    address?: Address$1;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod$1;
}
declare enum PickupMethod$1 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface SelectedCarrierServiceOptionPrices$1 {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$1;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$1;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$1;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice$1;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice$1;
}
interface SelectedCarrierServiceOptionOtherCharge$1 {
    /** Type of additional cost. */
    type?: ChargeType$1;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices$1;
}
declare enum ChargeType$1 {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface CarrierServiceOption$1 {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption$1[];
}
interface ShippingOption$1 {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics$1;
    /** Sipping price information. */
    cost?: ShippingPrice$1;
}
interface ShippingPrice$1 {
    /** Shipping price. */
    price?: MultiCurrencyPrice$1;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge$1[];
}
interface OtherCharge$1 {
    /** Type of additional cost. */
    type?: ChargeType$1;
    /** Price of added cost. */
    price?: MultiCurrencyPrice$1;
}
interface AppliedDiscount$1 extends AppliedDiscountDiscountSourceOneOf$1 {
    /** Coupon details. */
    coupon?: V1Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount$1;
    /** Discount rule */
    discountRule?: DiscountRule$1;
    /** Discount type. */
    discountType?: DiscountType$1;
    /**
     * IDs of line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$1 {
    /** Coupon details. */
    coupon?: V1Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount$1;
    /** Discount rule */
    discountRule?: DiscountRule$1;
}
declare enum DiscountType$1 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface V1Coupon$1 {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice$1;
    /** Coupon name. */
    name?: string;
}
interface V1MerchantDiscount$1 {
    /** Discount value. */
    amount?: MultiCurrencyPrice$1;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule$1 {
    /** Discount rule ID */
    id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$1;
    /** Discount value. */
    amount?: MultiCurrencyPrice$1;
}
interface DiscountRuleName$1 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface CalculationErrors$1 extends CalculationErrorsShippingCalculationErrorOneOf$1 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$1;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$1;
    /** Tax calculation error. */
    taxCalculationError?: Details$1;
    /** Coupon calculation error. */
    couponCalculationError?: Details$1;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details$1;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$1[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details$1;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details$1;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$1 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$1;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$1;
}
interface Details$1 extends DetailsKindOneOf$1 {
    applicationError?: ApplicationError$1;
    validationError?: ValidationError$1;
    systemError?: SystemError$1;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$1 {
    applicationError?: ApplicationError$1;
    validationError?: ValidationError$1;
    systemError?: SystemError$1;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$1 {
    fieldViolations?: FieldViolation$1[];
}
declare enum RuleType$1 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$1 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$1;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$1 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$1 {
    /** Carrier errors. */
    errors?: CarrierError$1[];
}
interface CarrierError$1 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$1;
}
interface MembershipOptions$1 {
    /** List of payment options that can be used. */
    eligibleMemberships?: Membership$1[];
    /** List of payment options that are owned by the member, but cannot be used due to reason provided. */
    invalidMemberships?: InvalidMembership$1[];
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: HostSelectedMembership$1[];
}
interface Membership$1 {
    /** Membership ID. */
    id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName$1;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits$1;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName$1 {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface MembershipPaymentCredits$1 {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership$1 {
    /** Membership details. */
    membership?: Membership$1;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface AdditionalFee$1 {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice$1;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$1;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice$1;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice$1;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface Violation$1 {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity$1;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target$1;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity$1 {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target$1 extends TargetTargetTypeOneOf$1 {
    /** General (other) violation. */
    other?: Other$1;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$1;
}
/** @oneof */
interface TargetTargetTypeOneOf$1 {
    /** General (other) violation. */
    other?: Other$1;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$1;
}
/** Available locations on the webpage */
declare enum NameInOther$1 {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem$1 {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix$1 {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other$1 {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther$1;
}
/** Specific line item violation. */
interface TargetLineItem$1 {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem$1;
    /** ID of the line item containing the violation. */
    id?: string | null;
}
interface RemoveLineItemsResponse$1 {
    /** Updated cart. */
    cart?: Cart$1;
}
declare enum ChannelType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CreateCheckoutResponse$1 {
    /** The newly created checkout's ID. */
    checkoutId?: string;
}
interface RemoveCouponResponse$1 {
    /** Updated cart. */
    cart?: Cart$1;
}
interface LineItemQuantityUpdate$1 {
    /** Line item ID. Required. */
    id?: string;
    /** New quantity. Number must be 1 or higher. Required. */
    quantity?: number;
}
interface UpdateLineItemsQuantityResponse$1 {
    /** Updated cart. */
    cart?: Cart$1;
}
interface DeleteCartResponse$1 {
}
interface CreateCartRequest$1 {
    /** Cart info. */
    cartInfo?: Cart$1;
    /** Code of an existing coupon to apply to cart. For more information, see the [Coupons API](https://dev.wix.com/api/rest/coupons/coupons/introduction). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput$1[];
    /** Catalog line items. */
    lineItems?: LineItem$1[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$1[];
}
interface CreateCartResponse$1 {
    /** Cart. */
    cart?: Cart$1;
}
interface GetCartRequest$1 {
    /** Cart ID. */
    id: string;
}
interface GetCartResponse$1 {
    /** The requested cart. */
    cart?: Cart$1;
}
interface AddToCartRequest$1 {
    /** Cart ID. */
    id: string;
    /** Catalog line items. */
    lineItems?: LineItem$1[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$1[];
}
interface RemoveLineItemsRequest$1 {
    /** Cart ID. */
    id: string;
    /** Line item IDs to remove from cart. */
    lineItemIds: string[];
}
interface CreateCheckoutRequest$1 {
    /** Cart ID. */
    id: string;
    /** __Required.__ Sales channel type. */
    channelType?: ChannelType$1;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$1;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$1;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$1;
    /** Required when setting a billing or shipping address if the site visitor isn't logged in. */
    email?: string | null;
}
interface RemoveCouponRequest$1 {
    /** Cart ID. */
    id: string;
}
interface UpdateLineItemsQuantityRequest$1 {
    /** Cart ID. */
    id: string;
    /** Line item IDs and their new quantity. */
    lineItems: LineItemQuantityUpdate$1[];
}
interface EstimateTotalsRequest$1 {
    /** Cart ID. */
    id: string;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$1;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$1;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$1;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships$1;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
interface DeleteCartRequest$1 {
    /** ID of the cart to delete. */
    id: string;
}
interface CatalogReferenceNonNullableFields$1 {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields$1 {
    original: string;
}
interface PageUrlV2NonNullableFields {
    relativePath: string;
}
interface MultiCurrencyPriceNonNullableFields$1 {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface PlainTextValueNonNullableFields$1 {
    original: string;
}
interface ColorNonNullableFields$1 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$1 {
    original: string;
}
interface DescriptionLineNonNullableFields$1 {
    plainText?: PlainTextValueNonNullableFields$1;
    colorInfo?: ColorNonNullableFields$1;
    plainTextValue?: PlainTextValueNonNullableFields$1;
    color: string;
    name?: DescriptionLineNameNonNullableFields$1;
    lineType: DescriptionLineType$1;
}
interface CommonImageNonNullableFields {
    id: string;
    url: string;
    height: number;
    width: number;
}
interface ItemAvailabilityInfoNonNullableFields$1 {
    status: ItemAvailabilityStatus$1;
}
interface PhysicalPropertiesNonNullableFields$1 {
    shippable: boolean;
}
interface GroupNonNullableFields$1 {
    name: string;
}
interface ScopeNonNullableFields$1 {
    namespace: string;
    group?: GroupNonNullableFields$1;
}
interface ItemTypeNonNullableFields$1 {
    preset: ItemTypeItemType$1;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields$1 {
    frequency: SubscriptionFrequency$1;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields$1 {
    frequency: SubscriptionFrequency$1;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields$1;
}
interface TitleNonNullableFields$1 {
    original: string;
}
interface DescriptionNonNullableFields$1 {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields$1 {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$1;
    title?: TitleNonNullableFields$1;
    description?: DescriptionNonNullableFields$1;
}
interface SecuredMediaNonNullableFields$1 {
    id: string;
    fileName: string;
    fileType: FileType$1;
}
interface PriceDescriptionNonNullableFields$1 {
    original: string;
}
interface SelectedMembershipNonNullableFields$1 {
    id: string;
    appId: string;
}
interface ImageNonNullableFields {
    id: string;
    height: number;
    width: number;
}
interface PaymentOptionNonNullableFields$1 {
    value: PaymentOptionType$1;
}
interface CatalogOverrideFieldsNonNullableFields$1 {
    productName?: ProductNameNonNullableFields$1;
    descriptionLines: DescriptionLineNonNullableFields$1[];
    physicalProperties?: PhysicalPropertiesNonNullableFields$1;
    image?: ImageNonNullableFields;
    paymentOption?: PaymentOptionNonNullableFields$1;
}
interface TaxableAddressNonNullableFields$1 {
    addressType: TaxableAddressType$1;
}
interface PolicyNonNullableFields$1 {
    title: string;
    content: string;
}
interface LineItemNonNullableFields$1 {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields$1;
    productName?: ProductNameNonNullableFields$1;
    url?: PageUrlV2NonNullableFields;
    price?: MultiCurrencyPriceNonNullableFields$1;
    fullPrice?: MultiCurrencyPriceNonNullableFields$1;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$1;
    descriptionLines: DescriptionLineNonNullableFields$1[];
    image?: CommonImageNonNullableFields;
    availability?: ItemAvailabilityInfoNonNullableFields$1;
    physicalProperties?: PhysicalPropertiesNonNullableFields$1;
    couponScopes: ScopeNonNullableFields$1[];
    itemType?: ItemTypeNonNullableFields$1;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields$1;
    digitalFile?: SecuredMediaNonNullableFields$1;
    paymentOption: PaymentOptionType$1;
    priceDescription?: PriceDescriptionNonNullableFields$1;
    depositAmount?: MultiCurrencyPriceNonNullableFields$1;
    selectedMembership?: SelectedMembershipNonNullableFields$1;
    customLineItem: boolean;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields$1;
    savePaymentMethod: boolean;
    taxableAddress?: TaxableAddressNonNullableFields$1;
    policies: PolicyNonNullableFields$1[];
}
interface BuyerInfoNonNullableFields$1 {
    visitorId: string;
    memberId: string;
    userId: string;
}
interface CouponNonNullableFields$1 {
    id: string;
    code: string;
}
interface MerchantDiscountNonNullableFields$1 {
    amount?: MultiCurrencyPriceNonNullableFields$1;
}
interface CartDiscountNonNullableFields$1 {
    coupon?: CouponNonNullableFields$1;
    merchantDiscount?: MerchantDiscountNonNullableFields$1;
}
interface StreetAddressNonNullableFields$1 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$1 {
    streetAddress?: StreetAddressNonNullableFields$1;
}
interface VatIdNonNullableFields$1 {
    id: string;
    type: VatType$1;
}
interface FullAddressContactDetailsNonNullableFields$1 {
    vatId?: VatIdNonNullableFields$1;
}
interface AddressWithContactNonNullableFields$1 {
    address?: AddressNonNullableFields$1;
    contactDetails?: FullAddressContactDetailsNonNullableFields$1;
}
interface SelectedShippingOptionNonNullableFields$1 {
    code: string;
}
interface CartNonNullableFields$1 {
    lineItems: LineItemNonNullableFields$1[];
    buyerInfo?: BuyerInfoNonNullableFields$1;
    currency: string;
    conversionCurrency: string;
    weightUnit: WeightUnit$1;
    subtotal?: MultiCurrencyPriceNonNullableFields$1;
    appliedDiscounts: CartDiscountNonNullableFields$1[];
    contactInfo?: AddressWithContactNonNullableFields$1;
    selectedShippingOption?: SelectedShippingOptionNonNullableFields$1;
}
interface UpdateCartResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
}
interface AddToCartResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
}
interface RemoveLineItemsResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
}
interface CreateCheckoutResponseNonNullableFields$1 {
    checkoutId: string;
}
interface RemoveCouponResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
}
interface UpdateLineItemsQuantityResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
}
interface TaxRateBreakdownNonNullableFields$1 {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields$1;
    exemptAmount?: MultiCurrencyPriceNonNullableFields$1;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields$1;
}
interface TaxBreakdownNonNullableFields$1 {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields$1;
    taxAmount?: MultiCurrencyPriceNonNullableFields$1;
    taxableAmount?: MultiCurrencyPriceNonNullableFields$1;
    jurisdictionType: JurisdictionType$1;
}
interface ItemTaxFullDetailsNonNullableFields$1 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$1;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields$1;
    rateBreakdown: TaxRateBreakdownNonNullableFields$1[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields$1;
    taxBreakdown: TaxBreakdownNonNullableFields$1[];
}
interface LineItemPricesDataNonNullableFields$1 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$1;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$1;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$1;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$1;
    price?: MultiCurrencyPriceNonNullableFields$1;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$1;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields$1;
    fullPrice?: MultiCurrencyPriceNonNullableFields$1;
}
interface CalculatedLineItemNonNullableFields$1 {
    lineItemId: string;
    pricesBreakdown?: LineItemPricesDataNonNullableFields$1;
    paymentOption: PaymentOptionType$1;
    taxableAddress?: TaxableAddressNonNullableFields$1;
}
interface PriceSummaryNonNullableFields$1 {
    subtotal?: MultiCurrencyPriceNonNullableFields$1;
    shipping?: MultiCurrencyPriceNonNullableFields$1;
    tax?: MultiCurrencyPriceNonNullableFields$1;
    discount?: MultiCurrencyPriceNonNullableFields$1;
    total?: MultiCurrencyPriceNonNullableFields$1;
    additionalFees?: MultiCurrencyPriceNonNullableFields$1;
}
interface GiftCardNonNullableFields$1 {
    id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields$1;
    appId: string;
}
interface ApplicationErrorNonNullableFields$1 {
    code: string;
    description: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields$1 {
    fallbackReason: FallbackReason$1;
    error?: ApplicationErrorNonNullableFields$1;
}
interface TaxCalculationDetailsNonNullableFields$1 {
    manualRateReason: ManualCalculationReason$1;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields$1;
    rateType: RateType$1;
}
interface AggregatedTaxBreakdownNonNullableFields$1 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType$1;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields$1;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields$1;
}
interface TaxSummaryNonNullableFields$1 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$1;
    totalTax?: MultiCurrencyPriceNonNullableFields$1;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields$1;
    totalExempt?: MultiCurrencyPriceNonNullableFields$1;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields$1[];
}
interface ShippingRegionNonNullableFields$1 {
    id: string;
    name: string;
}
interface PickupDetailsNonNullableFields$1 {
    address?: AddressNonNullableFields$1;
    businessLocation: boolean;
    pickupMethod: PickupMethod$1;
}
interface DeliveryLogisticsNonNullableFields$1 {
    pickupDetails?: PickupDetailsNonNullableFields$1;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields$1 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$1;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$1;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$1;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$1;
    price?: MultiCurrencyPriceNonNullableFields$1;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields$1 {
    type: ChargeType$1;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$1;
}
interface SelectedCarrierServiceOptionNonNullableFields$1 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$1;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$1;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields$1[];
}
interface OtherChargeNonNullableFields$1 {
    type: ChargeType$1;
    price?: MultiCurrencyPriceNonNullableFields$1;
}
interface ShippingPriceNonNullableFields$1 {
    price?: MultiCurrencyPriceNonNullableFields$1;
    otherCharges: OtherChargeNonNullableFields$1[];
}
interface ShippingOptionNonNullableFields$1 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$1;
    cost?: ShippingPriceNonNullableFields$1;
}
interface CarrierServiceOptionNonNullableFields$1 {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields$1[];
}
interface ShippingInformationNonNullableFields$1 {
    region?: ShippingRegionNonNullableFields$1;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields$1;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields$1[];
}
interface V1CouponNonNullableFields$1 {
    id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields$1;
    name: string;
    couponType: string;
}
interface V1MerchantDiscountNonNullableFields$1 {
    amount?: MultiCurrencyPriceNonNullableFields$1;
}
interface DiscountRuleNameNonNullableFields$1 {
    original: string;
}
interface DiscountRuleNonNullableFields$1 {
    id: string;
    name?: DiscountRuleNameNonNullableFields$1;
    amount?: MultiCurrencyPriceNonNullableFields$1;
}
interface LineItemDiscountNonNullableFields$1 {
    id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields$1;
}
interface AppliedDiscountNonNullableFields$1 {
    coupon?: V1CouponNonNullableFields$1;
    merchantDiscount?: V1MerchantDiscountNonNullableFields$1;
    discountRule?: DiscountRuleNonNullableFields$1;
    discountType: DiscountType$1;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$1[];
}
interface FieldViolationNonNullableFields$1 {
    field: string;
    description: string;
    violatedRule: RuleType$1;
}
interface ValidationErrorNonNullableFields$1 {
    fieldViolations: FieldViolationNonNullableFields$1[];
}
interface DetailsNonNullableFields$1 {
    applicationError?: ApplicationErrorNonNullableFields$1;
    validationError?: ValidationErrorNonNullableFields$1;
}
interface CarrierErrorNonNullableFields$1 {
    carrierId: string;
    error?: DetailsNonNullableFields$1;
}
interface CarrierErrorsNonNullableFields$1 {
    errors: CarrierErrorNonNullableFields$1[];
}
interface CalculationErrorsNonNullableFields$1 {
    generalShippingCalculationError?: DetailsNonNullableFields$1;
    carrierErrors?: CarrierErrorsNonNullableFields$1;
    taxCalculationError?: DetailsNonNullableFields$1;
    couponCalculationError?: DetailsNonNullableFields$1;
    giftCardCalculationError?: DetailsNonNullableFields$1;
    orderValidationErrors: ApplicationErrorNonNullableFields$1[];
    membershipError?: DetailsNonNullableFields$1;
    discountsCalculationError?: DetailsNonNullableFields$1;
}
interface MembershipNameNonNullableFields$1 {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields$1 {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields$1 {
    id: string;
    appId: string;
    name?: MembershipNameNonNullableFields$1;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields$1;
}
interface InvalidMembershipNonNullableFields$1 {
    membership?: MembershipNonNullableFields$1;
    reason: string;
}
interface HostSelectedMembershipNonNullableFields$1 {
    id: string;
    appId: string;
    lineItemIds: string[];
}
interface MembershipOptionsNonNullableFields$1 {
    eligibleMemberships: MembershipNonNullableFields$1[];
    invalidMemberships: InvalidMembershipNonNullableFields$1[];
    selectedMemberships: HostSelectedMembershipNonNullableFields$1[];
}
interface AdditionalFeeNonNullableFields$1 {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields$1;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$1;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields$1;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields$1;
    lineItemIds: string[];
}
interface OtherNonNullableFields$1 {
    name: NameInOther$1;
}
interface TargetLineItemNonNullableFields$1 {
    name: NameInLineItem$1;
    suggestedFix: SuggestedFix$1;
}
interface TargetNonNullableFields$1 {
    other?: OtherNonNullableFields$1;
    lineItem?: TargetLineItemNonNullableFields$1;
}
interface ViolationNonNullableFields$1 {
    severity: Severity$1;
    target?: TargetNonNullableFields$1;
}
interface EstimateTotalsResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
    calculatedLineItems: CalculatedLineItemNonNullableFields$1[];
    priceSummary?: PriceSummaryNonNullableFields$1;
    giftCard?: GiftCardNonNullableFields$1;
    taxSummary?: TaxSummaryNonNullableFields$1;
    shippingInfo?: ShippingInformationNonNullableFields$1;
    appliedDiscounts: AppliedDiscountNonNullableFields$1[];
    calculationErrors?: CalculationErrorsNonNullableFields$1;
    weightUnit: WeightUnit$1;
    currency: string;
    payNow?: PriceSummaryNonNullableFields$1;
    payLater?: PriceSummaryNonNullableFields$1;
    membershipOptions?: MembershipOptionsNonNullableFields$1;
    additionalFees: AdditionalFeeNonNullableFields$1[];
    violations: ViolationNonNullableFields$1[];
}
interface CreateCartResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
}
interface GetCartResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
}

interface Cart {
    /** Cart ID. */
    _id?: string | null;
    /**
     * Line items.
     * @readonly
     */
    lineItems?: LineItem[];
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /**
     * Currency used for pricing.
     * @readonly
     */
    currency?: string;
    /**
     * Currency code used for all the converted prices that are returned.
     * For a site that supports multiple currencies, this is the currency the buyer selected.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string | null;
    /**
     * Site language in which original values are displayed.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrices?: boolean | null;
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit;
    /**
     * ID of the checkout that originated from this cart.
     * @readonly
     */
    checkoutId?: string | null;
    /**
     * Cart discounts.
     * @readonly
     */
    appliedDiscounts?: CartDiscount[];
    /**
     * Date and time the cart was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the cart was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Contact info. */
    contactInfo?: AddressWithContact;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
}
interface LineItem {
    /**
     * Line item ID.
     * @readonly
     */
    _id?: string | null;
    /** Item quantity. */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: string;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice;
    /**
     * Line item description lines. Used for displaying the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine[];
    /**
     * Line item image details.
     * @readonly
     */
    image?: string;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType;
    /**
     * Type of selected payment option for current item. Defaults to `"FULL_PAYMENT_ONLINE"`.
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item happens as part of the checkout.
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `"MEMBERSHIP"` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` will be 0.
     * @readonly
     */
    paymentOption?: PaymentOptionType;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + in most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice;
    /** Selected membership to be used as payment for this item. Must be used with `lineItem.paymentOption` set to `MEMBERSHIP` or `MEMBERSHIP_OFFLINE`. This field can be empty when `lineItem.paymentOption` is set to `MEMBERSHIP_OFFLINE`. */
    selectedMembership?: SelectedMembership;
    /**
     * Tax group ID for this line item.
     * @readonly
     */
    taxGroupId?: string | null;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs.
     *
     * Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from your Wix Stores catalog, learn more about [eCommerce integration](https://www.wix.com/velo/reference/wix-stores-backend/ecommerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ProductName {
    /** **Required** - Original product name (in site's default language). */
    original?: string;
    /** Description product name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface MultiCurrencyPrice {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface DescriptionLine extends DescriptionLineValueOneOf, DescriptionLineDescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
    /** Description line name. */
    name?: DescriptionLineName;
}
/** @oneof */
interface DescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf {
}
interface DescriptionLineName {
    /** Description line name in site's default language. */
    original?: string;
    /** Description line name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface PlainTextValue {
    /** Description line plain text value in site's default language. */
    original?: string;
    /** Description line plain text value translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface Color {
    /** Description line color name in site's default language. */
    original?: string;
    /** Description line color name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
    /**
     * HEX or RGB color code for display.
     *
     */
    code?: string | null;
}
declare enum DescriptionLineType {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface ItemAvailabilityInfo {
    /**
     * Item availability status.
     *
     * NOT_FOUND - Item does not exist.
     * NOT_AVAILABLE - Not in stock.
     * PARTIALLY_AVAILABLE - Available quantity is less than requested.
     */
    status?: ItemAvailabilityStatus;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus {
    AVAILABLE = "AVAILABLE",
    NOT_FOUND = "NOT_FOUND",
    /** Not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
interface PhysicalProperties {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
declare enum FileType {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties {
    /** The date and time for which the service is supposed to be provided. For example, the time of the class. */
    scheduledDate?: Date | null;
    /** The number of people participating in this service. For example, the number of people attending the class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface PriceDescription {
    /**
     * **Required** - Original price description (in site's default language).
     *
     */
    original?: string;
    /** Product name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
/** Selected Membership */
interface SelectedMembership {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
}
interface CatalogOverrideFields {
    /** Item name. */
    productName?: ProductName;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /** Item image. */
    image?: string;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface PaymentOption {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType;
}
declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Buyer Info */
interface BuyerInfo extends BuyerInfoIdOneOf {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the cart owner is a Wix user.
     * @readonly
     */
    userId?: string;
    /** Contact ID. For more information, see the Contacts API. */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the cart owner is a Wix user.
     * @readonly
     */
    userId?: string;
}
declare enum WeightUnit {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface CartDiscount extends CartDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
}
/** @oneof */
interface CartDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
}
interface Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
}
interface MerchantDiscount {
    /** Discount value. */
    amount?: MultiCurrencyPrice;
}
/** Billing Info and shipping details */
interface AddressWithContact {
    /** Address. */
    address?: Address;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
}
/** Physical address */
interface Address {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId;
}
interface VatId {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType;
}
/** tax info types */
declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface SelectedShippingOption {
    /** Carrier ID. */
    carrierId?: string | null;
    /** Selected shipping option code. For example, "usps_std_overnight". */
    code?: string;
}
interface UpdateCartRequest {
    /** Cart info. */
    cartInfo?: Cart;
    /** The code of an existing coupon to apply to the cart. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput[];
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
}
interface MerchantDiscountInput {
    /** Discount amount. */
    amount?: string;
    /** IDs of the line items the discount applies to. */
    lineItemIds?: string[];
}
interface CustomLineItem {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /** Custom line item description lines. Used for displaying the cart, checkout and order. */
    descriptionLines?: DescriptionLine[];
    /**
     * Custom line item media. Supported formats:
     * + Link to an image/video from the [Wix Media Manager](https://support.wix.com/en/article/wix-media-about-the-media-manager) - `"wix:image://v1/3c76e2_c53...4ea4~mv2.jpg#originWidth=1000&originHeight=1000"`.
     * + An image from the web - `"http(s)://<image url>"`.
     */
    media?: string;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    _id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: string;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface UpdateCartResponse {
    /** Updated Cart. */
    cart?: Cart;
}
interface AddToCartResponse {
    /** Updated cart. */
    cart?: Cart;
}
interface SelectedMemberships {
    /** Selected memberships. */
    memberships?: HostSelectedMembership[];
}
interface HostSelectedMembership {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface EstimateTotalsResponse {
    /** Cart. */
    cart?: Cart;
    /** Calculated line items. */
    calculatedLineItems?: CalculatedLineItem[];
    /** Price summary. */
    priceSummary?: PriceSummary;
    /** Applied gift card. */
    giftCard?: GiftCard;
    /** Tax summary. */
    taxSummary?: TaxSummary;
    /** Shipping information. */
    shippingInfo?: ShippingInformation;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount[];
    /** Calculation errors. */
    calculationErrors?: CalculationErrors;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit;
    /** Currency used for pricing in this store. */
    currency?: string;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary;
    /** Information about valid and invalid memberships, and which ones are selected for usage. */
    membershipOptions?: MembershipOptions;
    /** Additional fees */
    additionalFees?: AdditionalFee[];
    /**
     * List of validation violations raised by the [Validations Custom Extension SPI](https://www.wix.com/velo/reference/spis/wix-ecom/ecom-validations/introduction).
     * @readonly
     */
    violations?: Violation[];
}
interface CalculatedLineItem {
    /** Line item ID. */
    lineItemId?: string;
    /** Price breakdown for this line item. */
    pricesBreakdown?: LineItemPricesData;
    /**
     * Type of selected payment option for current item. Defaults to `"FULL_PAYMENT_ONLINE"`.
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item happens as part of the checkout.
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `"MEMBERSHIP"` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` will be 0.
     */
    paymentOption?: PaymentOptionType;
}
interface LineItemPricesData {
    /** Total price after discounts and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price after discounts, and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Total discount for all line items. */
    totalDiscount?: MultiCurrencyPrice;
    /** Catalog price after catalog discount and automatic discounts. */
    price?: MultiCurrencyPrice;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: MultiCurrencyPrice;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: MultiCurrencyPrice;
    /** Item price **before** line item discounts and **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: MultiCurrencyPrice;
}
interface ItemTaxFullDetails {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown[];
}
interface TaxRateBreakdown {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface PriceSummary {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice;
    /** Total tax. */
    tax?: MultiCurrencyPrice;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice;
}
interface GiftCard {
    /**
     * Gift Card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface TaxSummary {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails;
}
interface TaxCalculationDetails extends TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Error details and reason for tax rate fallback. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
    /**
     * Rate calculation type. Supported values:
     * + `"AUTO_RATE"`
     * + `"FALLBACK_RATE"`
     * + `"MANUAL_RATE"`
     * + `"NO_TAX_COLLECTED"`
     */
    rateType?: RateType;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
}
declare enum RateType {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails {
    /**
     * Reason for fallback. Supported values:
     * + `"AUTO_TAX_FAILED"`
     * + `"AUTO_TAX_DEACTIVATED"`
     */
    fallbackReason?: FallbackReason;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError;
}
declare enum FallbackReason {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface ShippingInformation {
    /** Shipping region. */
    region?: ShippingRegion;
    /** Selected shipping option. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption;
    /** All shipping options. */
    carrierServiceOptions?: CarrierServiceOption[];
}
interface ShippingRegion {
    /**
     * Shipping region ID.
     * @readonly
     */
    _id?: string;
    /** Shipping region name. */
    name?: string;
}
interface SelectedCarrierServiceOption {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface DeliveryLogistics {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails;
}
interface PickupDetails {
    /** Pickup address. */
    address?: Address;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod;
}
declare enum PickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface SelectedCarrierServiceOptionPrices {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice;
}
interface SelectedCarrierServiceOptionOtherCharge {
    /** Type of additional cost. */
    type?: ChargeType;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices;
}
declare enum ChargeType {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface CarrierServiceOption {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption[];
}
interface ShippingOption {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics;
    /** Sipping price information. */
    cost?: ShippingPrice;
}
interface ShippingPrice {
    /** Shipping price. */
    price?: MultiCurrencyPrice;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge[];
}
interface OtherCharge {
    /** Type of additional cost. */
    type?: ChargeType;
    /** Price of added cost. */
    price?: MultiCurrencyPrice;
}
interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: V1Coupon;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule;
    /** Discount type. */
    discountType?: DiscountType;
    /**
     * IDs of the line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: V1Coupon;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule;
}
declare enum DiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface V1Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice;
    /** Coupon name. */
    name?: string;
}
interface V1MerchantDiscount {
    /** Discount value. */
    amount?: MultiCurrencyPrice;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName;
    /** Discount value. */
    amount?: MultiCurrencyPrice;
}
interface DiscountRuleName {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Discount rule name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface CalculationErrors extends CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
    /** Tax calculation error. */
    taxCalculationError?: Details;
    /** Coupon calculation error. */
    couponCalculationError?: Details;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
}
interface Details extends DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
    /**
     * Deprecated in APIs. Used to enable migration from rendering arbitrary tracing to rest response.
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError {
    fieldViolations?: FieldViolation[];
}
declare enum RuleType {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation {
    field?: string;
    description?: string;
    violatedRule?: RuleType;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors {
    /** Carrier errors. */
    errors?: CarrierError[];
}
interface CarrierError {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details;
}
interface MembershipOptions {
    /** List of payment options that can be used. */
    eligibleMemberships?: Membership[];
    /** List of payment options that are owned by the member, but cannot be used due to reason provided. */
    invalidMemberships?: InvalidMembership[];
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: HostSelectedMembership[];
}
interface Membership {
    /** Membership ID. */
    _id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName {
    /** Membership name. */
    original?: string;
    /** Membership name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface MembershipPaymentCredits {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership {
    /** Membership details. */
    membership?: Membership;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface AdditionalFee {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface Violation {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target extends TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** @oneof */
interface TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** Available locations on the webpage */
declare enum NameInOther {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther;
}
/** Specific line item violation. */
interface TargetLineItem {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem;
    /** ID of the line item containing the violation. */
    _id?: string | null;
}
interface RemoveLineItemsResponse {
    /** Updated cart. */
    cart?: Cart;
}
declare enum ChannelType {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CreateCheckoutResponse {
    /** The newly created checkout's ID. */
    checkoutId?: string;
}
interface RemoveCouponResponse {
    /** Updated cart. */
    cart?: Cart;
}
interface LineItemQuantityUpdate {
    /** Line item ID. Required. */
    _id?: string;
    /** New quantity. Number must be 1 or higher. Required. */
    quantity?: number;
}
interface UpdateLineItemsQuantityResponse {
    /** Updated cart. */
    cart?: Cart;
}
interface DeleteCartResponse {
}
interface CreateCartRequest {
    /** Cart info. */
    cartInfo?: Cart;
    /** The code of an existing coupon to apply to the cart. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will apply to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput[];
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
}
interface CreateCartResponse {
    /** Cart. */
    cart?: Cart;
}
interface GetCartRequest {
    /** ID of the cart to retrieve. */
    _id: string;
}
interface GetCartResponse {
    /** The requested cart. */
    cart?: Cart;
}
interface AddToCartRequest {
    /** Cart ID. */
    _id: string;
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
}
interface RemoveLineItemsRequest {
    /** Cart ID. */
    _id: string;
    /** IDs of the line items to remove from the cart. */
    lineItemIds: string[];
}
interface CreateCheckoutRequest {
    /** Cart ID. */
    _id: string;
    /** **Required**. Sales channel type. */
    channelType?: ChannelType;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /** Mandatory when setting a billing or shipping address if the site visitor isn't logged in. */
    email?: string | null;
}
interface RemoveCouponRequest {
    /** Cart ID. */
    _id: string;
}
interface UpdateLineItemsQuantityRequest {
    /** Cart ID. */
    _id: string;
    /** Line item IDs and their new quantity. */
    lineItems: LineItemQuantityUpdate[];
}
interface EstimateTotalsRequest {
    /** Cart ID. */
    _id: string;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
interface DeleteCartRequest {
    /** ID of the cart to delete. */
    _id: string;
}
interface CatalogReferenceNonNullableFields {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields {
    original: string;
}
interface MultiCurrencyPriceNonNullableFields {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface PlainTextValueNonNullableFields {
    original: string;
}
interface ColorNonNullableFields {
    original: string;
}
interface DescriptionLineNameNonNullableFields {
    original: string;
}
interface DescriptionLineNonNullableFields {
    plainText?: PlainTextValueNonNullableFields;
    colorInfo?: ColorNonNullableFields;
    plainTextValue?: PlainTextValueNonNullableFields;
    color: string;
    name?: DescriptionLineNameNonNullableFields;
    lineType: DescriptionLineType;
}
interface ItemAvailabilityInfoNonNullableFields {
    status: ItemAvailabilityStatus;
}
interface PhysicalPropertiesNonNullableFields {
    shippable: boolean;
}
interface GroupNonNullableFields {
    name: string;
}
interface ScopeNonNullableFields {
    namespace: string;
    group?: GroupNonNullableFields;
}
interface ItemTypeNonNullableFields {
    preset: ItemTypeItemType;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields {
    frequency: SubscriptionFrequency;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields {
    frequency: SubscriptionFrequency;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields;
}
interface TitleNonNullableFields {
    original: string;
}
interface DescriptionNonNullableFields {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields;
    title?: TitleNonNullableFields;
    description?: DescriptionNonNullableFields;
}
interface SecuredMediaNonNullableFields {
    _id: string;
    fileName: string;
    fileType: FileType;
}
interface PriceDescriptionNonNullableFields {
    original: string;
}
interface SelectedMembershipNonNullableFields {
    _id: string;
    appId: string;
}
interface PaymentOptionNonNullableFields {
    value: PaymentOptionType;
}
interface CatalogOverrideFieldsNonNullableFields {
    productName?: ProductNameNonNullableFields;
    descriptionLines: DescriptionLineNonNullableFields[];
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    image: string;
    paymentOption?: PaymentOptionNonNullableFields;
}
interface TaxableAddressNonNullableFields {
    addressType: TaxableAddressType;
}
interface PolicyNonNullableFields {
    title: string;
    content: string;
}
interface LineItemNonNullableFields {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields;
    productName?: ProductNameNonNullableFields;
    url: string;
    price?: MultiCurrencyPriceNonNullableFields;
    fullPrice?: MultiCurrencyPriceNonNullableFields;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields;
    descriptionLines: DescriptionLineNonNullableFields[];
    image: string;
    availability?: ItemAvailabilityInfoNonNullableFields;
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    couponScopes: ScopeNonNullableFields[];
    itemType?: ItemTypeNonNullableFields;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields;
    digitalFile?: SecuredMediaNonNullableFields;
    paymentOption: PaymentOptionType;
    priceDescription?: PriceDescriptionNonNullableFields;
    depositAmount?: MultiCurrencyPriceNonNullableFields;
    selectedMembership?: SelectedMembershipNonNullableFields;
    customLineItem: boolean;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields;
    savePaymentMethod: boolean;
    taxableAddress?: TaxableAddressNonNullableFields;
    policies: PolicyNonNullableFields[];
}
interface BuyerInfoNonNullableFields {
    visitorId: string;
    memberId: string;
    userId: string;
}
interface CouponNonNullableFields {
    _id: string;
    code: string;
}
interface MerchantDiscountNonNullableFields {
    amount?: MultiCurrencyPriceNonNullableFields;
}
interface CartDiscountNonNullableFields {
    coupon?: CouponNonNullableFields;
    merchantDiscount?: MerchantDiscountNonNullableFields;
}
interface StreetAddressNonNullableFields {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields;
}
interface VatIdNonNullableFields {
    _id: string;
    type: VatType;
}
interface FullAddressContactDetailsNonNullableFields {
    vatId?: VatIdNonNullableFields;
}
interface AddressWithContactNonNullableFields {
    address?: AddressNonNullableFields;
    contactDetails?: FullAddressContactDetailsNonNullableFields;
}
interface SelectedShippingOptionNonNullableFields {
    code: string;
}
interface CartNonNullableFields {
    lineItems: LineItemNonNullableFields[];
    buyerInfo?: BuyerInfoNonNullableFields;
    currency: string;
    conversionCurrency: string;
    weightUnit: WeightUnit;
    subtotal?: MultiCurrencyPriceNonNullableFields;
    appliedDiscounts: CartDiscountNonNullableFields[];
    contactInfo?: AddressWithContactNonNullableFields;
    selectedShippingOption?: SelectedShippingOptionNonNullableFields;
}
interface UpdateCartResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
interface AddToCartResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
interface RemoveLineItemsResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
interface CreateCheckoutResponseNonNullableFields {
    checkoutId: string;
}
interface RemoveCouponResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
interface UpdateLineItemsQuantityResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
interface TaxRateBreakdownNonNullableFields {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields;
    exemptAmount?: MultiCurrencyPriceNonNullableFields;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
}
interface TaxBreakdownNonNullableFields {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields;
    taxAmount?: MultiCurrencyPriceNonNullableFields;
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    jurisdictionType: JurisdictionType;
}
interface ItemTaxFullDetailsNonNullableFields {
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields;
    rateBreakdown: TaxRateBreakdownNonNullableFields[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields;
    taxBreakdown: TaxBreakdownNonNullableFields[];
}
interface LineItemPricesDataNonNullableFields {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    totalDiscount?: MultiCurrencyPriceNonNullableFields;
    price?: MultiCurrencyPriceNonNullableFields;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields;
    fullPrice?: MultiCurrencyPriceNonNullableFields;
}
interface CalculatedLineItemNonNullableFields {
    lineItemId: string;
    pricesBreakdown?: LineItemPricesDataNonNullableFields;
    paymentOption: PaymentOptionType;
    taxableAddress?: TaxableAddressNonNullableFields;
}
interface PriceSummaryNonNullableFields {
    subtotal?: MultiCurrencyPriceNonNullableFields;
    shipping?: MultiCurrencyPriceNonNullableFields;
    tax?: MultiCurrencyPriceNonNullableFields;
    discount?: MultiCurrencyPriceNonNullableFields;
    total?: MultiCurrencyPriceNonNullableFields;
    additionalFees?: MultiCurrencyPriceNonNullableFields;
}
interface GiftCardNonNullableFields {
    _id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields;
    appId: string;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields {
    fallbackReason: FallbackReason;
    error?: ApplicationErrorNonNullableFields;
}
interface TaxCalculationDetailsNonNullableFields {
    manualRateReason: ManualCalculationReason;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields;
    rateType: RateType;
}
interface AggregatedTaxBreakdownNonNullableFields {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields;
}
interface TaxSummaryNonNullableFields {
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    totalTax?: MultiCurrencyPriceNonNullableFields;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields;
    totalExempt?: MultiCurrencyPriceNonNullableFields;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields[];
}
interface ShippingRegionNonNullableFields {
    _id: string;
    name: string;
}
interface PickupDetailsNonNullableFields {
    address?: AddressNonNullableFields;
    businessLocation: boolean;
    pickupMethod: PickupMethod;
}
interface DeliveryLogisticsNonNullableFields {
    pickupDetails?: PickupDetailsNonNullableFields;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    totalDiscount?: MultiCurrencyPriceNonNullableFields;
    price?: MultiCurrencyPriceNonNullableFields;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields {
    type: ChargeType;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields;
}
interface SelectedCarrierServiceOptionNonNullableFields {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields[];
}
interface OtherChargeNonNullableFields {
    type: ChargeType;
    price?: MultiCurrencyPriceNonNullableFields;
}
interface ShippingPriceNonNullableFields {
    price?: MultiCurrencyPriceNonNullableFields;
    otherCharges: OtherChargeNonNullableFields[];
}
interface ShippingOptionNonNullableFields {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields;
    cost?: ShippingPriceNonNullableFields;
}
interface CarrierServiceOptionNonNullableFields {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields[];
}
interface ShippingInformationNonNullableFields {
    region?: ShippingRegionNonNullableFields;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields[];
}
interface V1CouponNonNullableFields {
    _id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields;
    name: string;
    couponType: string;
}
interface V1MerchantDiscountNonNullableFields {
    amount?: MultiCurrencyPriceNonNullableFields;
}
interface DiscountRuleNameNonNullableFields {
    original: string;
}
interface DiscountRuleNonNullableFields {
    _id: string;
    name?: DiscountRuleNameNonNullableFields;
    amount?: MultiCurrencyPriceNonNullableFields;
}
interface LineItemDiscountNonNullableFields {
    _id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields;
}
interface AppliedDiscountNonNullableFields {
    coupon?: V1CouponNonNullableFields;
    merchantDiscount?: V1MerchantDiscountNonNullableFields;
    discountRule?: DiscountRuleNonNullableFields;
    discountType: DiscountType;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields[];
}
interface FieldViolationNonNullableFields {
    field: string;
    description: string;
    violatedRule: RuleType;
}
interface ValidationErrorNonNullableFields {
    fieldViolations: FieldViolationNonNullableFields[];
}
interface DetailsNonNullableFields {
    applicationError?: ApplicationErrorNonNullableFields;
    validationError?: ValidationErrorNonNullableFields;
}
interface CarrierErrorNonNullableFields {
    carrierId: string;
    error?: DetailsNonNullableFields;
}
interface CarrierErrorsNonNullableFields {
    errors: CarrierErrorNonNullableFields[];
}
interface CalculationErrorsNonNullableFields {
    generalShippingCalculationError?: DetailsNonNullableFields;
    carrierErrors?: CarrierErrorsNonNullableFields;
    taxCalculationError?: DetailsNonNullableFields;
    couponCalculationError?: DetailsNonNullableFields;
    giftCardCalculationError?: DetailsNonNullableFields;
    orderValidationErrors: ApplicationErrorNonNullableFields[];
    membershipError?: DetailsNonNullableFields;
    discountsCalculationError?: DetailsNonNullableFields;
}
interface MembershipNameNonNullableFields {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields {
    _id: string;
    appId: string;
    name?: MembershipNameNonNullableFields;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields;
}
interface InvalidMembershipNonNullableFields {
    membership?: MembershipNonNullableFields;
    reason: string;
}
interface HostSelectedMembershipNonNullableFields {
    _id: string;
    appId: string;
    lineItemIds: string[];
}
interface MembershipOptionsNonNullableFields {
    eligibleMemberships: MembershipNonNullableFields[];
    invalidMemberships: InvalidMembershipNonNullableFields[];
    selectedMemberships: HostSelectedMembershipNonNullableFields[];
}
interface AdditionalFeeNonNullableFields {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields;
    lineItemIds: string[];
}
interface OtherNonNullableFields {
    name: NameInOther;
}
interface TargetLineItemNonNullableFields {
    name: NameInLineItem;
    suggestedFix: SuggestedFix;
}
interface TargetNonNullableFields {
    other?: OtherNonNullableFields;
    lineItem?: TargetLineItemNonNullableFields;
}
interface ViolationNonNullableFields {
    severity: Severity;
    target?: TargetNonNullableFields;
}
interface EstimateTotalsResponseNonNullableFields {
    cart?: CartNonNullableFields;
    calculatedLineItems: CalculatedLineItemNonNullableFields[];
    priceSummary?: PriceSummaryNonNullableFields;
    giftCard?: GiftCardNonNullableFields;
    taxSummary?: TaxSummaryNonNullableFields;
    shippingInfo?: ShippingInformationNonNullableFields;
    appliedDiscounts: AppliedDiscountNonNullableFields[];
    calculationErrors?: CalculationErrorsNonNullableFields;
    weightUnit: WeightUnit;
    currency: string;
    payNow?: PriceSummaryNonNullableFields;
    payLater?: PriceSummaryNonNullableFields;
    membershipOptions?: MembershipOptionsNonNullableFields;
    additionalFees: AdditionalFeeNonNullableFields[];
    violations: ViolationNonNullableFields[];
}
interface CreateCartResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
interface GetCartResponseNonNullableFields {
    cart?: CartNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createCart(): __PublicMethodMetaInfo<'POST', {}, CreateCartRequest, CreateCartRequest$1, CreateCartResponse & CreateCartResponseNonNullableFields, CreateCartResponse$1 & CreateCartResponseNonNullableFields$1>;
declare function updateCart(): __PublicMethodMetaInfo<'PATCH', {
    cartInfoId: string;
}, UpdateCartRequest, UpdateCartRequest$1, UpdateCartResponse & UpdateCartResponseNonNullableFields, UpdateCartResponse$1 & UpdateCartResponseNonNullableFields$1>;
declare function getCart(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetCartRequest, GetCartRequest$1, GetCartResponse & GetCartResponseNonNullableFields, GetCartResponse$1 & GetCartResponseNonNullableFields$1>;
declare function addToCart(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, AddToCartRequest, AddToCartRequest$1, AddToCartResponse & AddToCartResponseNonNullableFields, AddToCartResponse$1 & AddToCartResponseNonNullableFields$1>;
declare function removeLineItems(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, RemoveLineItemsRequest, RemoveLineItemsRequest$1, RemoveLineItemsResponse & RemoveLineItemsResponseNonNullableFields, RemoveLineItemsResponse$1 & RemoveLineItemsResponseNonNullableFields$1>;
declare function createCheckout(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, CreateCheckoutRequest, CreateCheckoutRequest$1, CreateCheckoutResponse & CreateCheckoutResponseNonNullableFields, CreateCheckoutResponse$1 & CreateCheckoutResponseNonNullableFields$1>;
declare function removeCoupon(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, RemoveCouponRequest, RemoveCouponRequest$1, RemoveCouponResponse & RemoveCouponResponseNonNullableFields, RemoveCouponResponse$1 & RemoveCouponResponseNonNullableFields$1>;
declare function updateLineItemsQuantity(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, UpdateLineItemsQuantityRequest, UpdateLineItemsQuantityRequest$1, UpdateLineItemsQuantityResponse & UpdateLineItemsQuantityResponseNonNullableFields, UpdateLineItemsQuantityResponse$1 & UpdateLineItemsQuantityResponseNonNullableFields$1>;
declare function estimateTotals(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, EstimateTotalsRequest, EstimateTotalsRequest$1, EstimateTotalsResponse & EstimateTotalsResponseNonNullableFields, EstimateTotalsResponse$1 & EstimateTotalsResponseNonNullableFields$1>;
declare function deleteCart(): __PublicMethodMetaInfo<'DELETE', {
    id: string;
}, DeleteCartRequest, DeleteCartRequest$1, DeleteCartResponse, DeleteCartResponse$1>;

export { type __PublicMethodMetaInfo, addToCart, createCart, createCheckout, deleteCart, estimateTotals, getCart, removeCoupon, removeLineItems, updateCart, updateLineItemsQuantity };
