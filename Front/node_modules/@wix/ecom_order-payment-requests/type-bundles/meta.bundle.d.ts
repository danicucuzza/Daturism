interface OrderPaymentRequest$1 {
    /**
     * Order payment request ID.
     * @readonly
     */
    id?: string | null;
    /** Additional parameters to identify the source of the order payment request. */
    source?: Source$1;
    /**
     * status.
     * @readonly
     */
    status?: Status$1;
    /** Order ID. */
    orderId?: string;
    /**
     * Order number.
     * @readonly
     */
    orderNumber?: string | null;
    /**
     * Amount to collect.
     * > **Note:** The amount can only be set once.
     */
    amount?: Price$1;
    /**
     * Currency code. The value will always match the currency used in the order.
     * @readonly
     */
    currency?: string;
    /**
     * Payment gateway order id which is associated with this payment request
     * @readonly
     */
    paymentGatewayOrderId?: string | null;
    /** Title to be displayed to the customer on the payment page. Provide a clear and descriptive title to inform the customer about what they are paying for. */
    title?: string;
    /** Description to be displayed to the customer on the payment page. Write a detailed description so the customer understands what they are paying for. */
    description?: string | null;
    /** Image to be displayed to the customer on the payment page. */
    image?: Image;
    /** Time and date the order payment request expires. */
    expirationDate?: Date | null;
    /** [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls. */
    extendedFields?: ExtendedFields$1;
    /**
     * Date and time the OrderPaymentRequest was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the OrderPaymentRequest was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
}
interface Source$1 {
    /** App Def ID that created the order payment request. */
    appId?: string | null;
    /** Reference to an ID from an external system, indicating the original source of the order payment request. */
    externalId?: string;
}
declare enum Status$1 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    UNPAID = "UNPAID",
    PAID = "PAID",
    EXPIRED = "EXPIRED"
}
interface Price$1 {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface Image {
    /** WixMedia image ID. */
    id?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface ExtendedFields$1 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateOrderPaymentRequestRequest$1 {
    /** OrderPaymentRequest to be created. */
    orderPaymentRequest?: OrderPaymentRequest$1;
}
interface CreateOrderPaymentRequestResponse$1 {
    /** The created OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest$1;
    /** Order payment request URL. */
    orderPaymentRequestUrl?: string;
}
interface GetOrderPaymentRequestRequest$1 {
    /** ID of the OrderPaymentRequest to retrieve. */
    orderPaymentRequestId: string;
}
interface GetOrderPaymentRequestResponse$1 {
    /** The requested OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest$1;
}
interface UpdateOrderPaymentRequestRequest$1 {
    /** OrderPaymentRequest to be updated, may be partial. */
    orderPaymentRequest: OrderPaymentRequest$1;
}
interface UpdateOrderPaymentRequestResponse$1 {
    /** Updated OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest$1;
}
interface DeleteOrderPaymentRequestRequest$1 {
    /** Id of the OrderPaymentRequest to delete. */
    orderPaymentRequestId: string;
}
interface DeleteOrderPaymentRequestResponse$1 {
}
interface QueryOrderPaymentRequestsRequest$1 {
    /** WQL expression. */
    query?: CursorQuery$1;
}
interface CursorQuery$1 extends CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$1[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryOrderPaymentRequestsResponse$1 {
    /** List of payment requests. */
    orderPaymentRequests?: OrderPaymentRequest$1[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$1;
}
interface CursorPagingMetadata$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$1;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetOrderPaymentRequestURLRequest$1 {
    /** Order Payment Request ID. */
    orderPaymentRequestId: string;
}
interface GetOrderPaymentRequestURLResponse$1 {
    /** Order Payment Request URL. */
    orderPaymentRequestUrl?: string;
}
interface UpdateExtendedFieldsRequest$1 {
    /** ID of the entity to update. */
    id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse$1 {
    /** Updated OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest$1;
}
interface SourceNonNullableFields$1 {
    externalId: string;
}
interface PriceNonNullableFields$1 {
    amount: string;
    formattedAmount: string;
}
interface ImageNonNullableFields {
    id: string;
    height: number;
    width: number;
}
interface OrderPaymentRequestNonNullableFields$1 {
    source?: SourceNonNullableFields$1;
    status: Status$1;
    orderId: string;
    amount?: PriceNonNullableFields$1;
    currency: string;
    title: string;
    image?: ImageNonNullableFields;
}
interface CreateOrderPaymentRequestResponseNonNullableFields$1 {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields$1;
    orderPaymentRequestUrl: string;
}
interface GetOrderPaymentRequestResponseNonNullableFields$1 {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields$1;
}
interface UpdateOrderPaymentRequestResponseNonNullableFields$1 {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields$1;
}
interface QueryOrderPaymentRequestsResponseNonNullableFields$1 {
    orderPaymentRequests: OrderPaymentRequestNonNullableFields$1[];
}
interface GetOrderPaymentRequestURLResponseNonNullableFields$1 {
    orderPaymentRequestUrl: string;
}
interface UpdateExtendedFieldsResponseNonNullableFields$1 {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields$1;
}

interface OrderPaymentRequest {
    /**
     * Order payment request ID.
     * @readonly
     */
    _id?: string | null;
    /** Additional parameters to identify the source of the order payment request. */
    source?: Source;
    /**
     * status.
     * @readonly
     */
    status?: Status;
    /** Order ID. */
    orderId?: string;
    /**
     * Order number.
     * @readonly
     */
    orderNumber?: string | null;
    /**
     * Amount to collect.
     * > **Note:** The amount can only be set once.
     */
    amount?: Price;
    /**
     * Currency code. The value will always match the currency used in the order.
     * @readonly
     */
    currency?: string;
    /**
     * Payment gateway order id which is associated with this payment request
     * @readonly
     */
    paymentGatewayOrderId?: string | null;
    /** Title to be displayed to the customer on the payment page. Provide a clear and descriptive title to inform the customer about what they are paying for. */
    title?: string;
    /** Description to be displayed to the customer on the payment page. Write a detailed description so the customer understands what they are paying for. */
    description?: string | null;
    /** Image to be displayed to the customer on the payment page. */
    image?: string;
    /** Time and date the order payment request expires. */
    expirationDate?: Date | null;
    /** [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls. */
    extendedFields?: ExtendedFields;
    /**
     * Date and time the OrderPaymentRequest was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the OrderPaymentRequest was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
}
interface Source {
    /** App Def ID that created the order payment request. */
    appId?: string | null;
    /** Reference to an ID from an external system, indicating the original source of the order payment request. */
    externalId?: string;
}
declare enum Status {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    UNPAID = "UNPAID",
    PAID = "PAID",
    EXPIRED = "EXPIRED"
}
interface Price {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateOrderPaymentRequestRequest {
    /** OrderPaymentRequest to be created. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface CreateOrderPaymentRequestResponse {
    /** The created OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
    /** Order payment request URL. */
    orderPaymentRequestUrl?: string;
}
interface GetOrderPaymentRequestRequest {
    /** ID of the OrderPaymentRequest to retrieve. */
    orderPaymentRequestId: string;
}
interface GetOrderPaymentRequestResponse {
    /** The requested OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface UpdateOrderPaymentRequestRequest {
    /** OrderPaymentRequest to be updated, may be partial. */
    orderPaymentRequest: OrderPaymentRequest;
}
interface UpdateOrderPaymentRequestResponse {
    /** Updated OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface DeleteOrderPaymentRequestRequest {
    /** Id of the OrderPaymentRequest to delete. */
    orderPaymentRequestId: string;
}
interface DeleteOrderPaymentRequestResponse {
}
interface QueryOrderPaymentRequestsRequest {
    /** WQL expression. */
    query?: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryOrderPaymentRequestsResponse {
    /** List of payment requests. */
    orderPaymentRequests?: OrderPaymentRequest[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetOrderPaymentRequestURLRequest {
    /** Order Payment Request ID. */
    orderPaymentRequestId: string;
}
interface GetOrderPaymentRequestURLResponse {
    /** Order Payment Request URL. */
    orderPaymentRequestUrl?: string;
}
interface UpdateExtendedFieldsRequest {
    /** ID of the entity to update. */
    _id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse {
    /** Updated OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface SourceNonNullableFields {
    externalId: string;
}
interface PriceNonNullableFields {
    amount: string;
    formattedAmount: string;
}
interface OrderPaymentRequestNonNullableFields {
    source?: SourceNonNullableFields;
    status: Status;
    orderId: string;
    amount?: PriceNonNullableFields;
    currency: string;
    title: string;
    image: string;
}
interface CreateOrderPaymentRequestResponseNonNullableFields {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields;
    orderPaymentRequestUrl: string;
}
interface GetOrderPaymentRequestResponseNonNullableFields {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields;
}
interface UpdateOrderPaymentRequestResponseNonNullableFields {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields;
}
interface QueryOrderPaymentRequestsResponseNonNullableFields {
    orderPaymentRequests: OrderPaymentRequestNonNullableFields[];
}
interface GetOrderPaymentRequestURLResponseNonNullableFields {
    orderPaymentRequestUrl: string;
}
interface UpdateExtendedFieldsResponseNonNullableFields {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createOrderPaymentRequest(): __PublicMethodMetaInfo<'POST', {}, CreateOrderPaymentRequestRequest, CreateOrderPaymentRequestRequest$1, CreateOrderPaymentRequestResponse & CreateOrderPaymentRequestResponseNonNullableFields, CreateOrderPaymentRequestResponse$1 & CreateOrderPaymentRequestResponseNonNullableFields$1>;
declare function getOrderPaymentRequest(): __PublicMethodMetaInfo<'GET', {
    orderPaymentRequestId: string;
}, GetOrderPaymentRequestRequest, GetOrderPaymentRequestRequest$1, GetOrderPaymentRequestResponse & GetOrderPaymentRequestResponseNonNullableFields, GetOrderPaymentRequestResponse$1 & GetOrderPaymentRequestResponseNonNullableFields$1>;
declare function updateOrderPaymentRequest(): __PublicMethodMetaInfo<'PATCH', {
    orderPaymentRequestId: string;
}, UpdateOrderPaymentRequestRequest, UpdateOrderPaymentRequestRequest$1, UpdateOrderPaymentRequestResponse & UpdateOrderPaymentRequestResponseNonNullableFields, UpdateOrderPaymentRequestResponse$1 & UpdateOrderPaymentRequestResponseNonNullableFields$1>;
declare function deleteOrderPaymentRequest(): __PublicMethodMetaInfo<'DELETE', {
    orderPaymentRequestId: string;
}, DeleteOrderPaymentRequestRequest, DeleteOrderPaymentRequestRequest$1, DeleteOrderPaymentRequestResponse, DeleteOrderPaymentRequestResponse$1>;
declare function queryOrderPaymentRequests(): __PublicMethodMetaInfo<'POST', {}, QueryOrderPaymentRequestsRequest, QueryOrderPaymentRequestsRequest$1, QueryOrderPaymentRequestsResponse & QueryOrderPaymentRequestsResponseNonNullableFields, QueryOrderPaymentRequestsResponse$1 & QueryOrderPaymentRequestsResponseNonNullableFields$1>;
declare function getOrderPaymentRequestUrl(): __PublicMethodMetaInfo<'POST', {}, GetOrderPaymentRequestURLRequest, GetOrderPaymentRequestURLRequest$1, GetOrderPaymentRequestURLResponse & GetOrderPaymentRequestURLResponseNonNullableFields, GetOrderPaymentRequestURLResponse$1 & GetOrderPaymentRequestURLResponseNonNullableFields$1>;
declare function updateExtendedFields(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, UpdateExtendedFieldsRequest, UpdateExtendedFieldsRequest$1, UpdateExtendedFieldsResponse & UpdateExtendedFieldsResponseNonNullableFields, UpdateExtendedFieldsResponse$1 & UpdateExtendedFieldsResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, createOrderPaymentRequest, deleteOrderPaymentRequest, getOrderPaymentRequest, getOrderPaymentRequestUrl, queryOrderPaymentRequests, updateExtendedFields, updateOrderPaymentRequest };
