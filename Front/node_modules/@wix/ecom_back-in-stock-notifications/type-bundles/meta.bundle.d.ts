/**
 * The back in stock notification request allows a customer to receive a notifiction when a specific item
 * is available again. The request includes information about the person making the request, the item
 * they want to receive a notification for, and the status of the notification.
 */
interface BackInStockNotificationRequest$1 {
    /**
     * Request ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Catalog and item reference that the notification request is for.
     *
     * Includes IDs for the catalog and item it came from, as well as additional, optional information.
     */
    catalogReference?: CatalogReference$1;
    /** Email address to send notification to about item being back in stock. */
    email?: string;
    /**
     * Contact ID for the contact with this `email`.
     *
     * If a contact does not already exist with the email address submitted when creating this request, then a new contact is created.
     * For more information about contacts, see the [Contacts API](https://dev.wix.com/docs/rest/api-reference/contacts/introduction).
     * @readonly
     */
    contactId?: string | null;
    /**
     * Status of the notification.
     *
     * `status` is set to `RECEIVED` when the notification request is created.
     * The `status` changes once a notification email is sent for this request object:
     * + When a notification email is sent through the site, either automatically or with [Report Items Back In Stock](/report-items-back-in-stock), then the `status` is briefly set to `PROCESSING` and then set to `NOTIFICATION_SENT` if the email is successul, and `FAILED` if it fails.
     * + When a notification email is sent offline, use [Mark As Notification Sent](/mark-as-notification-sent) to set `status` to `NOTIFICATION_SENT`.
     * @readonly
     */
    status?: Status$1;
    /**
     * Whether a notification was sent automatically.
     *
     * `autoNotified` is empty when the notification request is created and is not returned until
     * the field has a value. `autoNotified` receives a value when a notification email is sent for this request object.
     *
     * `autoNotified` sets to `TRUE` if the notification is sent through the site, either automatically or with [Report Items Back In Stock](/report-items-back-in-stock).
     * If the notification email is sent offline but the `status` is updated with [Mark As Notification Sent](/mark-as-notification-sent),
     * then `autoNotified` sets to `FALSE`.
     * @readonly
     */
    autoNotified?: boolean | null;
    /**
     * Date and time the notification request was created.
     * @readonly
     */
    createdDate?: Date | null;
    /** Item URL for this request. */
    itemUrl?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$1 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
declare enum Status$1 {
    UNSPECIFIED = "UNSPECIFIED",
    /** initial status of all new requests */
    RECEIVED = "RECEIVED",
    PROCESSING = "PROCESSING",
    NOTIFICATION_SENT = "NOTIFICATION_SENT",
    FAILED = "FAILED"
}
interface CreateBackInStockNotificationRequestRequest$1 {
    /**
     * Notification request information.
     *
     * Includes details for the out of stock item and the email address
     * requesting to be notified when it's back in stock.
     */
    request: BackInStockNotificationRequest$1;
    /** Item details to include in the notification when the item is back in stock. */
    itemDetails: BackInStockItemDetails$1;
}
interface BackInStockItemDetails$1 {
    /** Item name. */
    name?: string;
    /** Item price. */
    price?: string;
    /** Item image. */
    image?: Image;
}
interface Image {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface CreateBackInStockNotificationRequestResponse$1 {
    /** Created back in stock notification request. */
    request?: BackInStockNotificationRequest$1;
}
interface GetBackInStockNotificationRequestRequest$1 {
    /** ID of the notification request to retrieve. */
    id: string;
}
interface GetBackInStockNotificationRequestResponse$1 {
    /** Retrieved back in stock notification request. */
    request?: BackInStockNotificationRequest$1;
}
interface DeleteBackInStockNotificationRequestRequest$1 {
    /** ID of the notification request to delete. */
    id: string;
}
interface DeleteBackInStockNotificationRequestResponse$1 {
}
interface MarkAsNotificationSentRequest$1 {
    /** ID of the notification request to mark. */
    id: string;
}
interface MarkAsNotificationSentResponse$1 {
    /** Marked back in stock notification request. */
    request?: BackInStockNotificationRequest$1;
}
interface QueryBackInStockNotificationRequestsRequest$1 {
    /** Query options. */
    query: PlatformQuery$1;
}
interface PlatformQuery$1 extends PlatformQueryPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$1;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting$1[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$1;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface PlatformPaging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryBackInStockNotificationRequestsResponse$1 {
    /** Retrieved back in stock requests. */
    requests?: BackInStockNotificationRequest$1[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata$1;
}
interface PlatformPagingMetadata$1 {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors$1;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesRequest$1 {
    /** `catalogReference` items to retrieve the notification request for. */
    catalogReferences: CatalogReference$1[];
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesResponse$1 {
    /** Amount of back in stock notifications for each of the retrieved `catalogReference` items. */
    countsPerCatalogReference?: BackInStockNotificationRequestsCount$1[];
}
/** Maps each back in stock CatalogReference to the results (the number of unique occurrences). */
interface BackInStockNotificationRequestsCount$1 {
    /**
     * Catalog and item reference.
     *
     * Includes IDs and additional, optional information related to the item.
     */
    catalogReference?: CatalogReference$1;
    /** The number of unique back in stock requests for given `catalogReference`. */
    count?: number;
}
interface ReportItemsBackInStockRequest$1 {
    /**
     * `catalogReference` item to send notifications for.
     *
     * Cannot be used with `requestIds`.
     */
    catalogReference?: CatalogReference$1;
    /**
     * IDs of requests to send notifications for.
     *
     * Cannot be used with `catalogReference`.
     */
    requestIds?: string[];
    /**
     * Item details to use in notifications.
     *
     * `itemDetails` may populate dynamic valyes in the notification template, as follows:
     * + `itemDetails.name` passes to the template as `item.name`
     * + `itemDetails.price` passes to the template as `item.price`
     * + `itemDetails.image.url` passes to the template as `item.image.url`
     *
     * Use `extraAutomationTemplateParameters` to pass additional dynamic values.
     */
    itemDetails: BackInStockItemDetails$1;
    /** Additional key-value pairs to pass to the back in stock notification template. */
    extraAutomationTemplateParameters?: Record<string, string>;
}
interface ReportItemsBackInStockResponse$1 {
}
interface CatalogReferenceNonNullableFields$1 {
    catalogItemId: string;
    appId: string;
}
interface BackInStockNotificationRequestNonNullableFields$1 {
    catalogReference?: CatalogReferenceNonNullableFields$1;
    email: string;
    status: Status$1;
}
interface CreateBackInStockNotificationRequestResponseNonNullableFields$1 {
    request?: BackInStockNotificationRequestNonNullableFields$1;
}
interface GetBackInStockNotificationRequestResponseNonNullableFields$1 {
    request?: BackInStockNotificationRequestNonNullableFields$1;
}
interface MarkAsNotificationSentResponseNonNullableFields$1 {
    request?: BackInStockNotificationRequestNonNullableFields$1;
}
interface QueryBackInStockNotificationRequestsResponseNonNullableFields$1 {
    requests: BackInStockNotificationRequestNonNullableFields$1[];
}
interface BackInStockNotificationRequestsCountNonNullableFields$1 {
    catalogReference?: CatalogReferenceNonNullableFields$1;
    count: number;
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields$1 {
    countsPerCatalogReference: BackInStockNotificationRequestsCountNonNullableFields$1[];
}

/**
 * The back in stock notification request allows a customer to receive a notifiction when a specific item
 * is available again. The request includes information about the person making the request, the item
 * they want to receive a notification for, and the status of the notification.
 */
interface BackInStockNotificationRequest {
    /**
     * Request ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Catalog and item reference that the notification request is for.
     *
     * Includes IDs for the catalog and item it came from, as well as additional, optional information.
     */
    catalogReference?: CatalogReference;
    /** Email address to send notification to about item being back in stock. */
    email?: string;
    /**
     * Contact ID for the contact with this `email`.
     *
     * If a contact does not already exist with the email address submitted when creating this request, then a new contact is created.
     * For more information about contacts, see the Contacts API.
     * @readonly
     */
    contactId?: string | null;
    /**
     * Status of the notification.
     *
     * `status` is set to `RECEIVED` when the notification request is created. The `status` changes once a notification email is sent for this request object:
     * + When a notification email is sent through the site, either automatically or with the `reportItemsBackInStock()` function, then the `status` is briefly set to `PROCESSING` and then set to `NOTIFICATION_SENT` if the email is successul, and `FAILED` if it fails.
     * + When a notification email is sent offline, use the `markAsNotificationSent()` function to set `status` to `NOTIFICATION_SENT`.
     * @readonly
     */
    status?: Status;
    /**
     * Whether a notification was sent automatically.
     *
     * `autoNotified` is empty when the notification request is created and is not returned until the field has a value. `autoNotified` receives a value when a notification email is sent for this request object.
     *
     * `autoNotified` sets to `true` if the notification is sent through the site, either automatically or with the `reportItemsBackInStock()` function. If the notification email is sent offline but the `status` is updated with the `markAsNotificationSent()` function, then `autoNotified` sets to `false`.
     * @readonly
     */
    autoNotified?: boolean | null;
    /**
     * Date and time the notification request was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Item URL for this request. */
    itemUrl?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
declare enum Status {
    UNSPECIFIED = "UNSPECIFIED",
    /** initial status of all new requests */
    RECEIVED = "RECEIVED",
    PROCESSING = "PROCESSING",
    NOTIFICATION_SENT = "NOTIFICATION_SENT",
    FAILED = "FAILED"
}
interface CreateBackInStockNotificationRequestRequest {
    /**
     * Notification request information.
     *
     * Includes details for the out of stock item and the email address
     * requesting to be notified when it's back in stock.
     */
    request: BackInStockNotificationRequest;
    /** Item details to include in the notification when the item is back in stock. */
    itemDetails: BackInStockItemDetails;
}
interface BackInStockItemDetails {
    /** Item name. */
    name?: string;
    /** Item price. */
    price?: string;
    /** Item image. */
    image?: string;
}
interface CreateBackInStockNotificationRequestResponse {
    /** Created back in stock notification request. */
    request?: BackInStockNotificationRequest;
}
interface GetBackInStockNotificationRequestRequest {
    /** ID of the notification request to retrieve. */
    _id: string;
}
interface GetBackInStockNotificationRequestResponse {
    /** Retrieved back in stock notification request. */
    request?: BackInStockNotificationRequest;
}
interface DeleteBackInStockNotificationRequestRequest {
    /** ID of the notification request to delete. */
    _id: string;
}
interface DeleteBackInStockNotificationRequestResponse {
}
interface MarkAsNotificationSentRequest {
    /** ID of the notification request to mark. */
    _id: string;
}
interface MarkAsNotificationSentResponse {
    /** Marked back in stock notification request. */
    request?: BackInStockNotificationRequest;
}
interface QueryBackInStockNotificationRequestsRequest {
    /** Query options. */
    query: PlatformQuery;
}
interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface PlatformPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryBackInStockNotificationRequestsResponse {
    /** Retrieved back in stock requests. */
    requests?: BackInStockNotificationRequest[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata;
}
interface PlatformPagingMetadata {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesRequest {
    /** `catalogReference` items to retrieve the notification request for. */
    catalogReferences: CatalogReference[];
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesResponse {
    /** Amount of back in stock notifications for each of the retrieved `catalogReference` items. */
    countsPerCatalogReference?: BackInStockNotificationRequestsCount[];
}
/** Maps each back in stock CatalogReference to the results (the number of unique occurrences). */
interface BackInStockNotificationRequestsCount {
    /**
     * Catalog and item reference.
     *
     * Includes IDs and additional, optional information related to the item.
     */
    catalogReference?: CatalogReference;
    /** The number of unique back in stock requests for given `catalogReference`. */
    count?: number;
}
interface ReportItemsBackInStockRequest {
    /**
     * `catalogReference` item to send notifications for.
     *
     * Cannot be used with `requestIds`.
     */
    catalogReference?: CatalogReference;
    /**
     * IDs of requests to send notifications for.
     *
     * Cannot be used with `catalogReference`.
     */
    requestIds?: string[];
    /**
     * Item details to use in notifications.
     *
     * `itemDetails` may populate dynamic valyes in the notification template, as follows:
     * + `itemDetails.name` passes to the template as `item.name`
     * + `itemDetails.price` passes to the template as `item.price`
     * + `itemDetails.image.url` passes to the template as `item.image.url`
     *
     * Use `extraAutomationTemplateParameters` to pass additional dynamic values.
     */
    itemDetails: BackInStockItemDetails;
    /** Additional key-value pairs to pass to the back in stock notification template. */
    extraAutomationTemplateParameters?: Record<string, string>;
}
interface ReportItemsBackInStockResponse {
}
interface CatalogReferenceNonNullableFields {
    catalogItemId: string;
    appId: string;
}
interface BackInStockNotificationRequestNonNullableFields {
    catalogReference?: CatalogReferenceNonNullableFields;
    email: string;
    status: Status;
}
interface CreateBackInStockNotificationRequestResponseNonNullableFields {
    request?: BackInStockNotificationRequestNonNullableFields;
}
interface GetBackInStockNotificationRequestResponseNonNullableFields {
    request?: BackInStockNotificationRequestNonNullableFields;
}
interface MarkAsNotificationSentResponseNonNullableFields {
    request?: BackInStockNotificationRequestNonNullableFields;
}
interface QueryBackInStockNotificationRequestsResponseNonNullableFields {
    requests: BackInStockNotificationRequestNonNullableFields[];
}
interface BackInStockNotificationRequestsCountNonNullableFields {
    catalogReference?: CatalogReferenceNonNullableFields;
    count: number;
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields {
    countsPerCatalogReference: BackInStockNotificationRequestsCountNonNullableFields[];
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createBackInStockNotificationRequest(): __PublicMethodMetaInfo<'POST', {}, CreateBackInStockNotificationRequestRequest, CreateBackInStockNotificationRequestRequest$1, CreateBackInStockNotificationRequestResponse & CreateBackInStockNotificationRequestResponseNonNullableFields, CreateBackInStockNotificationRequestResponse$1 & CreateBackInStockNotificationRequestResponseNonNullableFields$1>;
declare function getBackInStockNotificationRequest(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetBackInStockNotificationRequestRequest, GetBackInStockNotificationRequestRequest$1, GetBackInStockNotificationRequestResponse & GetBackInStockNotificationRequestResponseNonNullableFields, GetBackInStockNotificationRequestResponse$1 & GetBackInStockNotificationRequestResponseNonNullableFields$1>;
declare function deleteBackInStockNotificationRequest(): __PublicMethodMetaInfo<'DELETE', {
    id: string;
}, DeleteBackInStockNotificationRequestRequest, DeleteBackInStockNotificationRequestRequest$1, DeleteBackInStockNotificationRequestResponse, DeleteBackInStockNotificationRequestResponse$1>;
declare function markAsNotificationSent(): __PublicMethodMetaInfo<'PUT', {
    id: string;
}, MarkAsNotificationSentRequest, MarkAsNotificationSentRequest$1, MarkAsNotificationSentResponse & MarkAsNotificationSentResponseNonNullableFields, MarkAsNotificationSentResponse$1 & MarkAsNotificationSentResponseNonNullableFields$1>;
declare function queryBackInStockNotificationRequests(): __PublicMethodMetaInfo<'GET', {}, QueryBackInStockNotificationRequestsRequest, QueryBackInStockNotificationRequestsRequest$1, QueryBackInStockNotificationRequestsResponse & QueryBackInStockNotificationRequestsResponseNonNullableFields, QueryBackInStockNotificationRequestsResponse$1 & QueryBackInStockNotificationRequestsResponseNonNullableFields$1>;
declare function getBackInStockNotificationRequestsCountByCatalogReferences(): __PublicMethodMetaInfo<'GET', {}, GetBackInStockNotificationRequestsCountByCatalogReferencesRequest, GetBackInStockNotificationRequestsCountByCatalogReferencesRequest$1, GetBackInStockNotificationRequestsCountByCatalogReferencesResponse & GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields, GetBackInStockNotificationRequestsCountByCatalogReferencesResponse$1 & GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields$1>;
declare function reportItemsBackInStock(): __PublicMethodMetaInfo<'POST', {}, ReportItemsBackInStockRequest, ReportItemsBackInStockRequest$1, ReportItemsBackInStockResponse, ReportItemsBackInStockResponse$1>;

export { type __PublicMethodMetaInfo, createBackInStockNotificationRequest, deleteBackInStockNotificationRequest, getBackInStockNotificationRequest, getBackInStockNotificationRequestsCountByCatalogReferences, markAsNotificationSent, queryBackInStockNotificationRequests, reportItemsBackInStock };
