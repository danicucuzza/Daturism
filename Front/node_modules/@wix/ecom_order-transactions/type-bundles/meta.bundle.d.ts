interface OrderTransactions$1 {
    /** Order ID. */
    orderId?: string;
    /** Record of payments made to the merchant. */
    payments?: Payment$1[];
    /** Record of refunds made to the buyer. */
    refunds?: Refund$1[];
}
interface Payment$1 extends PaymentPaymentDetailsOneOf$1 {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails$1;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails$1;
    /**
     * Payment ID.
     * @readonly
     */
    id?: string | null;
    /** Date and time the payment was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    createdDate?: Date | null;
    /**
     * Date and time the payment was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Payment amount. */
    amount?: Price$1;
    /**
     * Whether refunds for this payment are disabled.
     * + `true`: This payment is not refundable.
     * + `false`: This payment may be refunded. However, this ultimately depends on the payment provider.
     */
    refundDisabled?: boolean;
}
/** @oneof */
interface PaymentPaymentDetailsOneOf$1 {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails$1;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails$1;
}
interface RegularPaymentDetails$1 extends RegularPaymentDetailsPaymentMethodDetailsOneOf$1 {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails$1;
    /** Wix Payments order ID. */
    paymentOrderId?: string | null;
    /**
     * Payment gateway's transaction ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `offline_payment` is `false`.
     */
    gatewayTransactionId?: string | null;
    /**
     * Payment method. Non-exhaustive list of supported values:
     * + `CreditCard`, `Alipay`, `AstropayCash`, `AstropayDBT`, `AstropayMBT`, `Bitcoin`, `BitPay`, `Cash`, `ConvenienceStore`, `EPay`, `Fake`, `Giropay`, `IDeal`, `InPerson`, `Klarna`, `MercadoPago`, `Netpay`, `NordeaSolo`, `Offline`, `PagSeguro`, `PayEasy`, `PayPal`, `Paysafecard`, `Paysafecash`, `PointOfSale`, `Poli`, `Privat24`, `Przelewy24`, `RapidTransfer`, `Sepa`, `Skrill`, `Sofort`, `Trustly`, `Neteller`, `Unionpay`, `UniPay`, `Yandex`
     */
    paymentMethod?: string | null;
    /** Transaction ID in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for offline payments. */
    providerTransactionId?: string | null;
    /** Whether the payment was made offline. For example, when using cash or when marked as paid in the Business Manager. */
    offlinePayment?: boolean;
    /** Payment status. */
    status?: TransactionStatus$1;
    /** Whether there is a payment agreement that allows for future charges. */
    savedPaymentMethod?: boolean;
    /** Authorization details. */
    authorizationDetails?: AuthorizationDetails$1;
}
/** @oneof */
interface RegularPaymentDetailsPaymentMethodDetailsOneOf$1 {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails$1;
}
declare enum TransactionStatus$1 {
    UNDEFINED = "UNDEFINED",
    APPROVED = "APPROVED",
    PENDING = "PENDING",
    PENDING_MERCHANT = "PENDING_MERCHANT",
    CANCELED = "CANCELED",
    DECLINED = "DECLINED",
    REFUNDED = "REFUNDED",
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    AUTHORIZED = "AUTHORIZED",
    VOIDED = "VOIDED"
}
interface CreditCardPaymentMethodDetails$1 {
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface AuthorizationDetails$1 {
    /**
     * Whether the authorized payment is of a delayed capture.
     * @readonly
     */
    delayedCapture?: boolean;
    /** Date and time the payment was authorized in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    authorizedDate?: Date | null;
    /**
     * List of captures associated with payment
     * In case of failed it can be replaced with new one with PENDING or SUCCESS statuses
     */
    captures?: AuthorizationCapture$1[];
    /** Void associated with payment */
    void?: AuthorizationVoid$1;
    /** Scheduled action for this transaction */
    scheduledAction?: ScheduledAction$1;
}
interface AuthorizationCapture$1 {
    /**
     * Capture ID.
     * @readonly
     */
    id?: string | null;
    /** Status of this capture action */
    status?: AuthorizationCaptureStatus$1;
    /** Amount of this capture */
    amount?: Price$1;
    /** Date and time the capture was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    createdDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails$1;
}
declare enum AuthorizationCaptureStatus$1 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Whether capture operation still in progress */
    PENDING = "PENDING",
    /** The capture operation was succeeded */
    SUCCEEDED = "SUCCEEDED",
    /** The capture operation was failed */
    FAILED = "FAILED"
}
interface Price$1 {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface AuthorizationActionFailureDetails$1 {
    failureCode?: string;
}
interface AuthorizationVoid$1 {
    /** Status of this void action */
    status?: AuthorizationVoidStatus$1;
    /** Date and time the void was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    voidedDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails$1;
    /** Reason of void action */
    reason?: Reason$1;
}
declare enum AuthorizationVoidStatus$1 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Whether void operation still in progress */
    PENDING = "PENDING",
    /** The void operation was succeeded */
    SUCCEEDED = "SUCCEEDED",
    /** The void operation was failed */
    FAILED = "FAILED"
}
/**
 * Reason the authorization was voided.
 *
 * + `MANUAL`: Authorization was voided by user.
 * + `SCHEDULED`: Authorization passed execution date.
 */
declare enum Reason$1 {
    UNKNOWN_REASON = "UNKNOWN_REASON",
    MANUAL = "MANUAL",
    SCHEDULED = "SCHEDULED"
}
interface ScheduledAction$1 {
    /** type of the action */
    actionType?: ActionType$1;
    /** the date and time of the action */
    executionDate?: Date | null;
}
declare enum ActionType$1 {
    UNKNOWN_ACTION_TYPE = "UNKNOWN_ACTION_TYPE",
    VOID = "VOID",
    CAPTURE = "CAPTURE"
}
interface GiftCardPaymentDetails$1 {
    /** Gift card payment ID. */
    giftCardPaymentId?: string;
    /** ID of the app that created the gift card. */
    appId?: string;
    /**
     * Whether the gift card is voided.
     * @readonly
     */
    voided?: boolean;
}
declare enum MembershipPaymentStatus$1 {
    /** CHARGED - Payment was charged */
    CHARGED = "CHARGED",
    /** CHARGE_FAILED - The attempt to charge that payment have failed, for example due to lack of credits */
    CHARGE_FAILED = "CHARGE_FAILED"
}
interface Refund$1 {
    /**
     * Refund ID.
     * @readonly
     */
    id?: string;
    /** List of transactions. */
    transactions?: RefundTransaction$1[];
    /** Refund business details. */
    details?: RefundDetails$1;
    /** Date and time the refund was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    createdDate?: Date | null;
}
interface RefundTransaction$1 {
    /** ID of the payment associated with this refund. */
    paymentId?: string;
    /** Refund amount. */
    amount?: Price$1;
    /** Refund status. */
    refundStatus?: RefundStatus$1;
    /**
     * Payment gateway's refund ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `external_refund` is `false`.
     */
    gatewayRefundId?: string | null;
    /** ID of the refund in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for external refunds. */
    providerRefundId?: string | null;
    /** Whether refund was made externally and manually on the payment provider's side. */
    externalRefund?: boolean;
}
/**
 * Refund transaction status.
 * + `PENDING`: Refund was initiated on payment provider side. PENDING status was assigned by provider.
 * + `SUCCEEDED`: Refund transaction succeeded.
 * + `FAILED`: Refund transaction failed.
 * + `SCHEDULED`: Refund request acknowledged, and will be executed soon.
 * + `STARTED`: Refund was initiated on payment provider side.
 */
declare enum RefundStatus$1 {
    PENDING = "PENDING",
    SUCCEEDED = "SUCCEEDED",
    FAILED = "FAILED",
    SCHEDULED = "SCHEDULED",
    STARTED = "STARTED"
}
/** Business model of a refund request */
interface RefundDetails$1 {
    /** Order line item IDs and quantities that were refunded. */
    items?: RefundItem$1[];
    /** Whether the shipping fee was also refunded. */
    shippingIncluded?: boolean;
    /** Reason for the refund, provided by customer (optional). */
    reason?: string | null;
}
interface RefundItem$1 {
    /** Line item ID the refunded line item. */
    lineItemId?: string;
    /** Line item quantity refunded. */
    quantity?: number;
}
interface ListTransactionsForSingleOrderRequest$1 {
    /** Order ID. */
    orderId: string;
}
interface ListTransactionsForSingleOrderResponse$1 {
    /** Order ID and its associated transactions. */
    orderTransactions?: OrderTransactions$1;
}
interface ListTransactionsForMultipleOrdersRequest$1 {
    /** Order IDs for which to retrieve transactions. */
    orderIds: string[];
}
interface ListTransactionsForMultipleOrdersResponse$1 {
    /** List of order IDs and their associated transactions. */
    orderTransactions?: OrderTransactions$1[];
}
interface AddPaymentsRequest$1 {
    /** Order ID. */
    orderId: string;
    /** Payments to be added to order. */
    payments: Payment$1[];
}
interface AddPaymentsResponse$1 {
    /** Order ID and its associated transactions. */
    orderTransactions?: OrderTransactions$1;
    /** IDs of added order payments. */
    paymentsIds?: string[];
}
interface UpdatePaymentStatusRequest$1 {
    /** Order ID. */
    orderId: string;
    /** Payment ID. */
    paymentId: string;
    /** Payment status. */
    status?: TransactionStatus$1;
}
interface UpdatePaymentStatusResponse$1 {
    /** Order ID and its associated transactions after update. */
    orderTransactions?: OrderTransactions$1;
}
interface BulkUpdatePaymentStatusesRequest$1 {
    /** Order and payment IDs for which to update payment status. */
    paymentAndOrderIds: PaymentAndOrderId$1[];
    /** Whether to return the full payment entity (`results.item`) in the response. */
    returnFullEntity?: boolean;
    /** Payment status. */
    status?: TransactionStatus$1;
}
interface PaymentAndOrderId$1 {
    /** Order ID. */
    orderId?: string;
    /**
     * Payment ID.
     * todo: remove comment once UI will use BulkMarkOrderAsPaid
     */
    paymentId?: string;
}
interface BulkUpdatePaymentStatusesResponse$1 {
    /** Bulk operation results. */
    results?: BulkPaymentResult$1[];
    /** Bulk operation metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkPaymentResult$1 {
    /** Item metadata. */
    itemMetadata?: ItemMetadata$1;
    /** Updated payment. Returned if `return_full_entity` set to `true`. */
    item?: Payment$1;
}
interface ItemMetadata$1 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$1;
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$1 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface PriceNonNullableFields$1 {
    amount: string;
    formattedAmount: string;
}
interface AuthorizationActionFailureDetailsNonNullableFields$1 {
    failureCode: string;
}
interface AuthorizationCaptureNonNullableFields$1 {
    status: AuthorizationCaptureStatus$1;
    amount?: PriceNonNullableFields$1;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields$1;
}
interface AuthorizationVoidNonNullableFields$1 {
    status: AuthorizationVoidStatus$1;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields$1;
    reason: Reason$1;
}
interface ScheduledActionNonNullableFields$1 {
    actionType: ActionType$1;
}
interface AuthorizationDetailsNonNullableFields$1 {
    delayedCapture: boolean;
    captures: AuthorizationCaptureNonNullableFields$1[];
    void?: AuthorizationVoidNonNullableFields$1;
    scheduledAction?: ScheduledActionNonNullableFields$1;
}
interface RegularPaymentDetailsNonNullableFields$1 {
    offlinePayment: boolean;
    status: TransactionStatus$1;
    savedPaymentMethod: boolean;
    authorizationDetails?: AuthorizationDetailsNonNullableFields$1;
}
interface GiftCardPaymentDetailsNonNullableFields$1 {
    giftCardPaymentId: string;
    giftCardId: string;
    appId: string;
    voided: boolean;
}
interface MembershipNameNonNullableFields$1 {
    original: string;
}
interface MembershipPaymentDetailsNonNullableFields$1 {
    membershipId: string;
    lineItemId: string;
    status: MembershipPaymentStatus$1;
    name?: MembershipNameNonNullableFields$1;
    voided: boolean;
    providerAppId: string;
}
interface PaymentNonNullableFields$1 {
    regularPaymentDetails?: RegularPaymentDetailsNonNullableFields$1;
    giftcardPaymentDetails?: GiftCardPaymentDetailsNonNullableFields$1;
    membershipPaymentDetails?: MembershipPaymentDetailsNonNullableFields$1;
    amount?: PriceNonNullableFields$1;
    refundDisabled: boolean;
}
interface RefundTransactionNonNullableFields$1 {
    paymentId: string;
    amount?: PriceNonNullableFields$1;
    refundStatus: RefundStatus$1;
    externalRefund: boolean;
}
interface RefundItemNonNullableFields$1 {
    lineItemId: string;
    quantity: number;
}
interface LineItemRefundNonNullableFields$1 {
    lineItemId: string;
    quantity: number;
}
interface AdditionalFeeRefundNonNullableFields$1 {
    additionalFeeId: string;
    amount?: PriceNonNullableFields$1;
}
interface ShippingRefundNonNullableFields$1 {
    amount?: PriceNonNullableFields$1;
}
interface RefundDetailsNonNullableFields$1 {
    items: RefundItemNonNullableFields$1[];
    shippingIncluded: boolean;
    lineItems: LineItemRefundNonNullableFields$1[];
    additionalFees: AdditionalFeeRefundNonNullableFields$1[];
    shipping?: ShippingRefundNonNullableFields$1;
}
interface AggregatedRefundSummaryNonNullableFields$1 {
    requestedRefund?: PriceNonNullableFields$1;
    pendingRefund?: PriceNonNullableFields$1;
    refunded?: PriceNonNullableFields$1;
    failedRefundAmount?: PriceNonNullableFields$1;
    pending: boolean;
}
interface RefundNonNullableFields$1 {
    id: string;
    transactions: RefundTransactionNonNullableFields$1[];
    details?: RefundDetailsNonNullableFields$1;
    summary?: AggregatedRefundSummaryNonNullableFields$1;
}
interface OrderTransactionsNonNullableFields$1 {
    orderId: string;
    payments: PaymentNonNullableFields$1[];
    refunds: RefundNonNullableFields$1[];
}
interface ListTransactionsForSingleOrderResponseNonNullableFields$1 {
    orderTransactions?: OrderTransactionsNonNullableFields$1;
}
interface ListTransactionsForMultipleOrdersResponseNonNullableFields$1 {
    orderTransactions: OrderTransactionsNonNullableFields$1[];
}
interface AddPaymentsResponseNonNullableFields$1 {
    orderTransactions?: OrderTransactionsNonNullableFields$1;
    paymentsIds: string[];
}
interface UpdatePaymentStatusResponseNonNullableFields$1 {
    orderTransactions?: OrderTransactionsNonNullableFields$1;
}
interface ApplicationErrorNonNullableFields$1 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$1 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$1;
}
interface BulkPaymentResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$1;
    item?: PaymentNonNullableFields$1;
}
interface BulkActionMetadataNonNullableFields$1 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkUpdatePaymentStatusesResponseNonNullableFields$1 {
    results: BulkPaymentResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}

interface OrderTransactions {
    /** Order ID. */
    orderId?: string;
    /** Record of payments made to the merchant. */
    payments?: Payment[];
    /** Record of refunds made to the buyer. */
    refunds?: Refund[];
}
interface Payment extends PaymentPaymentDetailsOneOf {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails;
    /**
     * Payment ID.
     * @readonly
     */
    _id?: string | null;
    /** Date and time the payment was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    _createdDate?: Date | null;
    /**
     * Date and time the payment was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Payment amount. */
    amount?: Price;
    /**
     * Whether refunds for this payment are disabled.
     * + `true`: This payment is not refundable.
     * + `false`: This payment may be refunded. However, this ultimately depends on the payment provider.
     */
    refundDisabled?: boolean;
}
/** @oneof */
interface PaymentPaymentDetailsOneOf {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails;
}
interface RegularPaymentDetails extends RegularPaymentDetailsPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails;
    /** Wix Payments order ID. */
    paymentOrderId?: string | null;
    /**
     * Payment gateway's transaction ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `offline_payment` is `false`.
     */
    gatewayTransactionId?: string | null;
    /**
     * Payment method. Non-exhaustive list of supported values:
     * + `CreditCard`, `Alipay`, `AstropayCash`, `AstropayDBT`, `AstropayMBT`, `Bitcoin`, `BitPay`, `Cash`, `ConvenienceStore`, `EPay`, `Fake`, `Giropay`, `IDeal`, `InPerson`, `Klarna`, `MercadoPago`, `Netpay`, `NordeaSolo`, `Offline`, `PagSeguro`, `PayEasy`, `PayPal`, `Paysafecard`, `Paysafecash`, `PointOfSale`, `Poli`, `Privat24`, `Przelewy24`, `RapidTransfer`, `Sepa`, `Skrill`, `Sofort`, `Trustly`, `Neteller`, `Unionpay`, `UniPay`, `Yandex`
     */
    paymentMethod?: string | null;
    /** Transaction ID in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for offline payments. */
    providerTransactionId?: string | null;
    /** Whether the payment was made offline. For example, when using cash or when marked as paid in the Business Manager. */
    offlinePayment?: boolean;
    /** Payment status. */
    status?: TransactionStatus;
    /** Whether there is a payment agreement that allows for future charges. */
    savedPaymentMethod?: boolean;
    /** Authorization details. */
    authorizationDetails?: AuthorizationDetails;
}
/** @oneof */
interface RegularPaymentDetailsPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails;
}
declare enum TransactionStatus {
    UNDEFINED = "UNDEFINED",
    APPROVED = "APPROVED",
    PENDING = "PENDING",
    PENDING_MERCHANT = "PENDING_MERCHANT",
    CANCELED = "CANCELED",
    DECLINED = "DECLINED",
    REFUNDED = "REFUNDED",
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    AUTHORIZED = "AUTHORIZED",
    VOIDED = "VOIDED"
}
interface CreditCardPaymentMethodDetails {
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface AuthorizationDetails {
    /**
     * Whether the authorized payment is of a delayed capture.
     * @readonly
     */
    delayedCapture?: boolean;
    /** Date and time the payment was authorized in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    authorizedDate?: Date | null;
    /**
     * List of captures associated with payment
     * In case of failed it can be replaced with new one with PENDING or SUCCESS statuses
     */
    captures?: AuthorizationCapture[];
    /** Void associated with payment */
    void?: AuthorizationVoid;
    /** Scheduled action for this transaction */
    scheduledAction?: ScheduledAction;
}
interface AuthorizationCapture {
    /**
     * Capture ID.
     * @readonly
     */
    _id?: string | null;
    /** Status of this capture action */
    status?: AuthorizationCaptureStatus;
    /** Amount of this capture */
    amount?: Price;
    /** Date and time the capture was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    _createdDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails;
}
declare enum AuthorizationCaptureStatus {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Whether capture operation still in progress */
    PENDING = "PENDING",
    /** The capture operation was succeeded */
    SUCCEEDED = "SUCCEEDED",
    /** The capture operation was failed */
    FAILED = "FAILED"
}
interface Price {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface AuthorizationActionFailureDetails {
    failureCode?: string;
}
interface AuthorizationVoid {
    /** Status of this void action */
    status?: AuthorizationVoidStatus;
    /** Date and time the void was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    voidedDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails;
    /** Reason of void action */
    reason?: Reason;
}
declare enum AuthorizationVoidStatus {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Whether void operation still in progress */
    PENDING = "PENDING",
    /** The void operation was succeeded */
    SUCCEEDED = "SUCCEEDED",
    /** The void operation was failed */
    FAILED = "FAILED"
}
/**
 * Reason the authorization was voided.
 *
 * + `MANUAL`: Authorization was voided by user.
 * + `SCHEDULED`: Authorization passed execution date.
 */
declare enum Reason {
    UNKNOWN_REASON = "UNKNOWN_REASON",
    MANUAL = "MANUAL",
    SCHEDULED = "SCHEDULED"
}
interface ScheduledAction {
    /** type of the action */
    actionType?: ActionType;
    /** the date and time of the action */
    executionDate?: Date | null;
}
declare enum ActionType {
    UNKNOWN_ACTION_TYPE = "UNKNOWN_ACTION_TYPE",
    VOID = "VOID",
    CAPTURE = "CAPTURE"
}
interface GiftCardPaymentDetails {
    /** Gift card payment ID. */
    giftCardPaymentId?: string;
    /** ID of the app that created the gift card. */
    appId?: string;
    /**
     * Whether the gift card is voided.
     * @readonly
     */
    voided?: boolean;
}
declare enum MembershipPaymentStatus {
    /** CHARGED - Payment was charged */
    CHARGED = "CHARGED",
    /** CHARGE_FAILED - The attempt to charge that payment have failed, for example due to lack of credits */
    CHARGE_FAILED = "CHARGE_FAILED"
}
interface Refund {
    /**
     * Refund ID.
     * @readonly
     */
    _id?: string;
    /** List of transactions. */
    transactions?: RefundTransaction[];
    /** Refund business details. */
    details?: RefundDetails;
    /** Date and time the refund was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    _createdDate?: Date | null;
}
interface RefundTransaction {
    /** ID of the payment associated with this refund. */
    paymentId?: string;
    /** Refund amount. */
    amount?: Price;
    /** Refund status. */
    refundStatus?: RefundStatus;
    /**
     * Payment gateway's refund ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `external_refund` is `false`.
     */
    gatewayRefundId?: string | null;
    /** ID of the refund in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for external refunds. */
    providerRefundId?: string | null;
    /** Whether refund was made externally and manually on the payment provider's side. */
    externalRefund?: boolean;
}
/**
 * Refund transaction status.
 * + `PENDING`: Refund was initiated on payment provider side. PENDING status was assigned by provider.
 * + `SUCCEEDED`: Refund transaction succeeded.
 * + `FAILED`: Refund transaction failed.
 * + `SCHEDULED`: Refund request acknowledged, and will be executed soon.
 * + `STARTED`: Refund was initiated on payment provider side.
 */
declare enum RefundStatus {
    PENDING = "PENDING",
    SUCCEEDED = "SUCCEEDED",
    FAILED = "FAILED",
    SCHEDULED = "SCHEDULED",
    STARTED = "STARTED"
}
/** Business model of a refund request */
interface RefundDetails {
    /** Order line item IDs and quantities that were refunded. */
    items?: RefundItem[];
    /** Whether the shipping fee was also refunded. */
    shippingIncluded?: boolean;
    /** Reason for the refund, provided by customer (optional). */
    reason?: string | null;
}
interface RefundItem {
    /** Line item ID the refunded line item. */
    lineItemId?: string;
    /** Line item quantity refunded. */
    quantity?: number;
}
interface ListTransactionsForSingleOrderRequest {
    /** Order ID. */
    orderId: string;
}
interface ListTransactionsForSingleOrderResponse {
    /** Order ID and its associated transactions. */
    orderTransactions?: OrderTransactions;
}
interface ListTransactionsForMultipleOrdersRequest {
    /** Order IDs for which to retrieve transactions. */
    orderIds: string[];
}
interface ListTransactionsForMultipleOrdersResponse {
    /** List of order IDs and their associated transactions. */
    orderTransactions?: OrderTransactions[];
}
interface AddPaymentsRequest {
    /** Order ID. */
    orderId: string;
    /** Payments to be added to order. */
    payments: Payment[];
}
interface AddPaymentsResponse {
    /** Order ID and its associated transactions. */
    orderTransactions?: OrderTransactions;
    /** IDs of added order payments. */
    paymentsIds?: string[];
}
interface UpdatePaymentStatusRequest {
    /** Order ID. */
    orderId: string;
    /** Payment ID. */
    paymentId: string;
    /** Payment status. */
    status?: TransactionStatus;
}
interface UpdatePaymentStatusResponse {
    /** Order ID and its associated transactions after update. */
    orderTransactions?: OrderTransactions;
}
interface BulkUpdatePaymentStatusesRequest {
    /** Order and payment IDs for which to update payment status. */
    paymentAndOrderIds: PaymentAndOrderId[];
    /** Whether to return the full payment entity (`results.item`) in the response. */
    returnFullEntity?: boolean;
    /** Payment status. */
    status?: TransactionStatus;
}
interface PaymentAndOrderId {
    /** Order ID. */
    orderId?: string;
    /**
     * Payment ID.
     * todo: remove comment once UI will use BulkMarkOrderAsPaid
     */
    paymentId?: string;
}
interface BulkUpdatePaymentStatusesResponse {
    /** Bulk operation results. */
    results?: BulkPaymentResult[];
    /** Bulk operation metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkPaymentResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata;
    /** Updated payment. Returned if `return_full_entity` set to `true`. */
    item?: Payment;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface PriceNonNullableFields {
    amount: string;
    formattedAmount: string;
}
interface AuthorizationActionFailureDetailsNonNullableFields {
    failureCode: string;
}
interface AuthorizationCaptureNonNullableFields {
    status: AuthorizationCaptureStatus;
    amount?: PriceNonNullableFields;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields;
}
interface AuthorizationVoidNonNullableFields {
    status: AuthorizationVoidStatus;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields;
    reason: Reason;
}
interface ScheduledActionNonNullableFields {
    actionType: ActionType;
}
interface AuthorizationDetailsNonNullableFields {
    delayedCapture: boolean;
    captures: AuthorizationCaptureNonNullableFields[];
    void?: AuthorizationVoidNonNullableFields;
    scheduledAction?: ScheduledActionNonNullableFields;
}
interface RegularPaymentDetailsNonNullableFields {
    offlinePayment: boolean;
    status: TransactionStatus;
    savedPaymentMethod: boolean;
    authorizationDetails?: AuthorizationDetailsNonNullableFields;
}
interface GiftCardPaymentDetailsNonNullableFields {
    giftCardPaymentId: string;
    giftCardId: string;
    appId: string;
    voided: boolean;
}
interface MembershipNameNonNullableFields {
    original: string;
}
interface MembershipPaymentDetailsNonNullableFields {
    membershipId: string;
    lineItemId: string;
    status: MembershipPaymentStatus;
    name?: MembershipNameNonNullableFields;
    voided: boolean;
    providerAppId: string;
}
interface PaymentNonNullableFields {
    regularPaymentDetails?: RegularPaymentDetailsNonNullableFields;
    giftcardPaymentDetails?: GiftCardPaymentDetailsNonNullableFields;
    membershipPaymentDetails?: MembershipPaymentDetailsNonNullableFields;
    amount?: PriceNonNullableFields;
    refundDisabled: boolean;
}
interface RefundTransactionNonNullableFields {
    paymentId: string;
    amount?: PriceNonNullableFields;
    refundStatus: RefundStatus;
    externalRefund: boolean;
}
interface RefundItemNonNullableFields {
    lineItemId: string;
    quantity: number;
}
interface LineItemRefundNonNullableFields {
    lineItemId: string;
    quantity: number;
}
interface AdditionalFeeRefundNonNullableFields {
    additionalFeeId: string;
    amount?: PriceNonNullableFields;
}
interface ShippingRefundNonNullableFields {
    amount?: PriceNonNullableFields;
}
interface RefundDetailsNonNullableFields {
    items: RefundItemNonNullableFields[];
    shippingIncluded: boolean;
    lineItems: LineItemRefundNonNullableFields[];
    additionalFees: AdditionalFeeRefundNonNullableFields[];
    shipping?: ShippingRefundNonNullableFields;
}
interface AggregatedRefundSummaryNonNullableFields {
    requestedRefund?: PriceNonNullableFields;
    pendingRefund?: PriceNonNullableFields;
    refunded?: PriceNonNullableFields;
    failedRefundAmount?: PriceNonNullableFields;
    pending: boolean;
}
interface RefundNonNullableFields {
    _id: string;
    transactions: RefundTransactionNonNullableFields[];
    details?: RefundDetailsNonNullableFields;
    summary?: AggregatedRefundSummaryNonNullableFields;
}
interface OrderTransactionsNonNullableFields {
    orderId: string;
    payments: PaymentNonNullableFields[];
    refunds: RefundNonNullableFields[];
}
interface ListTransactionsForSingleOrderResponseNonNullableFields {
    orderTransactions?: OrderTransactionsNonNullableFields;
}
interface ListTransactionsForMultipleOrdersResponseNonNullableFields {
    orderTransactions: OrderTransactionsNonNullableFields[];
}
interface AddPaymentsResponseNonNullableFields {
    orderTransactions?: OrderTransactionsNonNullableFields;
    paymentsIds: string[];
}
interface UpdatePaymentStatusResponseNonNullableFields {
    orderTransactions?: OrderTransactionsNonNullableFields;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface BulkPaymentResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
    item?: PaymentNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkUpdatePaymentStatusesResponseNonNullableFields {
    results: BulkPaymentResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function listTransactionsForSingleOrder(): __PublicMethodMetaInfo<'GET', {
    orderId: string;
}, ListTransactionsForSingleOrderRequest, ListTransactionsForSingleOrderRequest$1, ListTransactionsForSingleOrderResponse & ListTransactionsForSingleOrderResponseNonNullableFields, ListTransactionsForSingleOrderResponse$1 & ListTransactionsForSingleOrderResponseNonNullableFields$1>;
declare function listTransactionsForMultipleOrders(): __PublicMethodMetaInfo<'POST', {}, ListTransactionsForMultipleOrdersRequest, ListTransactionsForMultipleOrdersRequest$1, ListTransactionsForMultipleOrdersResponse & ListTransactionsForMultipleOrdersResponseNonNullableFields, ListTransactionsForMultipleOrdersResponse$1 & ListTransactionsForMultipleOrdersResponseNonNullableFields$1>;
declare function addPayments(): __PublicMethodMetaInfo<'POST', {
    orderId: string;
}, AddPaymentsRequest, AddPaymentsRequest$1, AddPaymentsResponse & AddPaymentsResponseNonNullableFields, AddPaymentsResponse$1 & AddPaymentsResponseNonNullableFields$1>;
declare function updatePaymentStatus(): __PublicMethodMetaInfo<'POST', {
    paymentId: string;
    orderId: string;
}, UpdatePaymentStatusRequest, UpdatePaymentStatusRequest$1, UpdatePaymentStatusResponse & UpdatePaymentStatusResponseNonNullableFields, UpdatePaymentStatusResponse$1 & UpdatePaymentStatusResponseNonNullableFields$1>;
declare function bulkUpdatePaymentStatuses(): __PublicMethodMetaInfo<'POST', {}, BulkUpdatePaymentStatusesRequest, BulkUpdatePaymentStatusesRequest$1, BulkUpdatePaymentStatusesResponse & BulkUpdatePaymentStatusesResponseNonNullableFields, BulkUpdatePaymentStatusesResponse$1 & BulkUpdatePaymentStatusesResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, addPayments, bulkUpdatePaymentStatuses, listTransactionsForMultipleOrders, listTransactionsForSingleOrder, updatePaymentStatus };
