interface GiftCard$1 {
    /**
     * Gift card obfuscated code.
     *
     * For example: "****-****-****-1234".
     */
    obfuscatedCode?: string;
    /** Gift card balance. */
    balance?: Money$1;
    /**
     * Current gift card status. Supported values:
     * + **VALID**: Gift card is active and can be used for purchases.
     * + **EXPIRED**: Gift card expiration date has passed and can no longer be used.
     * + **DISABLED**: Gift card has been disabled by the merchant and can no longer be used.
     */
    status?: Status$1;
    /** App ID of the gift card provider, as returned in eCommerce Get Checkout or List Transactions for Single Order. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface Money$1 {
    /** Monetary amount. Decimal string with a period as a decimal separator (e.g., 3.99). Optionally, a single (-), to indicate that the amount is negative. */
    value?: string;
    /** Currency code. Must be valid ISO 4217 currency code (e.g., USD). */
    currency?: string;
}
declare enum Status$1 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    VALID = "VALID",
    EXPIRED = "EXPIRED",
    DISABLED = "DISABLED"
}
interface GetGiftCardRequest$1 {
    /** Gift card code. */
    code: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context$1;
}
interface Context$1 {
    /** Physical location ID. Can be based on the Locations API or an external provider. */
    locationId?: string | null;
}
interface GetGiftCardResponse$1 {
    /** Retrieved gift card. */
    giftCard?: GiftCard$1;
}
interface RedeemGiftCardRequest$1 {
    /** Gift card code. */
    code: string;
    /** Amount to redeem from the gift card. */
    amount: Money$1;
    /** Order ID to apply the gift card transaction, when applying a gift card after order creation. Order ID can be collected from the eCommerce Order Created webhook or by calling eCommerce Search Orders. */
    orderId?: string;
    /** App ID of the gift card provider. */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context$1;
}
interface RedeemGiftCardResponse$1 {
    /** Gift card transaction ID. */
    transactionId?: string;
}
interface VoidTransactionRequest$1 {
    /** Gift card transaction ID, as returned from Redeem Gift Card. */
    transactionId: string;
    /** App ID of the gift card provider. */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context$1;
}
interface VoidTransactionResponse$1 {
}
interface MoneyNonNullableFields$1 {
    value: string;
    currency: string;
}
interface GiftCardNonNullableFields$1 {
    obfuscatedCode: string;
    balance?: MoneyNonNullableFields$1;
    status: Status$1;
    appId: string;
}
interface GetGiftCardResponseNonNullableFields$1 {
    giftCard?: GiftCardNonNullableFields$1;
}
interface RedeemGiftCardResponseNonNullableFields$1 {
    transactionId: string;
}

interface GiftCard {
    /**
     * Gift card obfuscated code.
     *
     * For example: "****-****-****-1234".
     */
    obfuscatedCode?: string;
    /** Gift card balance. */
    balance?: Money;
    /**
     * Current gift card status. Supported values:
     * + **VALID**: Gift card is active and can be used for purchases.
     * + **EXPIRED**: Gift card expiration date has passed and can no longer be used.
     * + **DISABLED**: Gift card has been disabled by the merchant and can no longer be used.
     */
    status?: Status;
    /** App ID of the gift card provider, as returned in eCommerce Get Checkout or List Transactions for Single Order. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface Money {
    /** Monetary amount. Decimal string with a period as a decimal separator (e.g., 3.99). Optionally, a single (-), to indicate that the amount is negative. */
    value?: string;
    /** Currency code. Must be valid ISO 4217 currency code (e.g., USD). */
    currency?: string;
}
declare enum Status {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    VALID = "VALID",
    EXPIRED = "EXPIRED",
    DISABLED = "DISABLED"
}
interface GetGiftCardRequest {
    /** Gift card code. */
    code: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
}
interface Context {
    /** Physical location ID. Can be based on the Locations API or an external provider. */
    locationId?: string | null;
}
interface GetGiftCardResponse {
    /** Retrieved gift card. */
    giftCard?: GiftCard;
}
interface RedeemGiftCardRequest {
    /** Gift card code. */
    code: string;
    /** Amount to redeem from the gift card. */
    amount: Money;
    /** Order ID to apply the gift card transaction, when applying a gift card after order creation. Order ID can be collected from the eCommerce Order Created webhook or by calling eCommerce Search Orders. */
    orderId?: string;
    /** App ID of the gift card provider. */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
}
interface RedeemGiftCardResponse {
    /** Gift card transaction ID. */
    transactionId?: string;
}
interface VoidTransactionRequest {
    /** Gift card transaction ID, as returned from Redeem Gift Card. */
    transactionId: string;
    /** App ID of the gift card provider. */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
}
interface VoidTransactionResponse {
}
interface MoneyNonNullableFields {
    value: string;
    currency: string;
}
interface GiftCardNonNullableFields {
    obfuscatedCode: string;
    balance?: MoneyNonNullableFields;
    status: Status;
    appId: string;
}
interface GetGiftCardResponseNonNullableFields {
    giftCard?: GiftCardNonNullableFields;
}
interface RedeemGiftCardResponseNonNullableFields {
    transactionId: string;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getGiftCard(): __PublicMethodMetaInfo<'POST', {
    code: string;
}, GetGiftCardRequest, GetGiftCardRequest$1, GetGiftCardResponse & GetGiftCardResponseNonNullableFields, GetGiftCardResponse$1 & GetGiftCardResponseNonNullableFields$1>;
declare function redeemGiftCard(): __PublicMethodMetaInfo<'POST', {}, RedeemGiftCardRequest, RedeemGiftCardRequest$1, RedeemGiftCardResponse & RedeemGiftCardResponseNonNullableFields, RedeemGiftCardResponse$1 & RedeemGiftCardResponseNonNullableFields$1>;
declare function voidTransaction(): __PublicMethodMetaInfo<'POST', {}, VoidTransactionRequest, VoidTransactionRequest$1, VoidTransactionResponse, VoidTransactionResponse$1>;

export { type __PublicMethodMetaInfo, getGiftCard, redeemGiftCard, voidTransaction };
