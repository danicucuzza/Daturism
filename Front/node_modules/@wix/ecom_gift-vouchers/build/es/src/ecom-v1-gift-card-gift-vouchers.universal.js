import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomV1GiftCard from './ecom-v1-gift-card-gift-vouchers.http';
export var Status;
(function (Status) {
    Status["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    Status["VALID"] = "VALID";
    Status["EXPIRED"] = "EXPIRED";
    Status["DISABLED"] = "DISABLED";
})(Status || (Status = {}));
/**
 * Retrieves a gift card.
 * @param code - Gift card code.
 * @public
 * @documentationMaturity preview
 * @requiredField code
 * @param options - Field options.
 * @permissionId ECOM.GIFT_CARD_READ
 * @permissionScope Read Gift Cards
 * @permissionScopeId SCOPE.ECOM.READ-GIFT-CARDS
 * @applicableIdentity APP
 */
export async function getGiftCard(code, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        code: code,
        context: options?.context,
    });
    const reqOpts = ambassadorWixEcomV1GiftCard.getGiftCard(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { code: '$[0]', context: '$[1].context' },
            singleArgumentUnchanged: false,
        }, ['code', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Redeems a gift card.
 * Creates a transaction and lowers the card balance by the transaction amount.
 * @param code - Gift card code.
 * @public
 * @documentationMaturity preview
 * @requiredField code
 * @requiredField options.amount
 * @requiredField options.amount.value
 * @requiredField options.appId
 * @param options - Field options. `amount` and `appId` **must** be passed.
 * @permissionId ECOM.GIFT_CARD_REDEEM
 * @permissionScope Change Gift Card Balances
 * @permissionScopeId SCOPE.ECOM.CHANGE-GIFT-CARDS-BALANCE
 * @applicableIdentity APP
 */
export async function redeemGiftCard(code, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        code: code,
        amount: options?.amount,
        orderId: options?.orderId,
        appId: options?.appId,
        context: options?.context,
    });
    const reqOpts = ambassadorWixEcomV1GiftCard.redeemGiftCard(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                code: '$[0]',
                amount: '$[1].amount',
                orderId: '$[1].orderId',
                appId: '$[1].appId',
                context: '$[1].context',
            },
            singleArgumentUnchanged: false,
        }, ['code', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Voids a gift card transaction.
 * Transaction IDs are returned in Redeem Gift Card.
 * @param transactionId - Gift card transaction ID, as returned from Redeem Gift Card.
 * @public
 * @documentationMaturity preview
 * @requiredField options.appId
 * @requiredField transactionId
 * @param options - Field options. `appId` **must** be passed.
 * @permissionId ECOM.GIFT_CARD_TRANSACTION_VOID
 * @permissionScope Change Gift Card Balances
 * @permissionScopeId SCOPE.ECOM.CHANGE-GIFT-CARDS-BALANCE
 * @applicableIdentity APP
 */
export async function voidTransaction(transactionId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        transactionId: transactionId,
        appId: options?.appId,
        context: options?.context,
    });
    const reqOpts = ambassadorWixEcomV1GiftCard.voidTransaction(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                transactionId: '$[0]',
                appId: '$[1].appId',
                context: '$[1].context',
            },
            singleArgumentUnchanged: false,
        }, ['transactionId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecom-v1-gift-card-gift-vouchers.universal.js.map