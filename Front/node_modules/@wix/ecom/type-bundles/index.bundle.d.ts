type HostModule<T, H extends Host> = {
    __type: 'host';
    create(host: H): T;
};
type HostModuleAPI<T extends HostModule<any, any>> = T extends HostModule<infer U, any> ? U : never;
type Host<Environment = unknown> = {
    channel: {
        observeState(callback: (props: unknown, environment: Environment) => unknown): {
            disconnect: () => void;
        } | Promise<{
            disconnect: () => void;
        }>;
    };
    environment?: Environment;
    /**
     * Optional name of the environment, use for logging
     */
    name?: string;
    /**
     * Optional bast url to use for API requests, for example `www.wixapis.com`
     */
    apiBaseUrl?: string;
    /**
     * Possible data to be provided by every host, for cross cutting concerns
     * like internationalization, billing, etc.
     */
    essentials?: {
        /**
         * The language of the currently viewed session
         */
        language?: string;
        /**
         * The locale of the currently viewed session
         */
        locale?: string;
        /**
         * Any headers that should be passed through to the API requests
         */
        passThroughHeaders?: Record<string, string>;
    };
};

type RESTFunctionDescriptor<T extends (...args: any[]) => any = (...args: any[]) => any> = (httpClient: HttpClient) => T;
interface HttpClient {
    request<TResponse, TData = any>(req: RequestOptionsFactory<TResponse, TData>): Promise<HttpResponse<TResponse>>;
    fetchWithAuth: typeof fetch;
    wixAPIFetch: (relativeUrl: string, options: RequestInit) => Promise<Response>;
    getActiveToken?: () => string | undefined;
}
type RequestOptionsFactory<TResponse = any, TData = any> = (context: any) => RequestOptions<TResponse, TData>;
type HttpResponse<T = any> = {
    data: T;
    status: number;
    statusText: string;
    headers: any;
    request?: any;
};
type RequestOptions<_TResponse = any, Data = any> = {
    method: 'POST' | 'GET' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS';
    url: string;
    data?: Data;
    params?: URLSearchParams;
} & APIMetadata;
type APIMetadata = {
    methodFqn?: string;
    entityFqdn?: string;
    packageName?: string;
};
type BuildRESTFunction<T extends RESTFunctionDescriptor> = T extends RESTFunctionDescriptor<infer U> ? U : never;
type EventDefinition<Payload = unknown, Type extends string = string> = {
    __type: 'event-definition';
    type: Type;
    isDomainEvent?: boolean;
    transformations?: (envelope: unknown) => Payload;
    __payload: Payload;
};
declare function EventDefinition<Type extends string>(type: Type, isDomainEvent?: boolean, transformations?: (envelope: any) => unknown): <Payload = unknown>() => EventDefinition<Payload, Type>;
type EventHandler<T extends EventDefinition> = (payload: T['__payload']) => void | Promise<void>;
type BuildEventDefinition<T extends EventDefinition<any, string>> = (handler: EventHandler<T>) => void;

type ServicePluginMethodInput = {
    request: any;
    metadata: any;
};
type ServicePluginContract = Record<string, (payload: ServicePluginMethodInput) => unknown | Promise<unknown>>;
type ServicePluginMethodMetadata = {
    name: string;
    primaryHttpMappingPath: string;
    transformations: {
        fromREST: (...args: unknown[]) => ServicePluginMethodInput;
        toREST: (...args: unknown[]) => unknown;
    };
};
type ServicePluginDefinition<Contract extends ServicePluginContract> = {
    __type: 'service-plugin-definition';
    componentType: string;
    methods: ServicePluginMethodMetadata[];
    __contract: Contract;
};
declare function ServicePluginDefinition<Contract extends ServicePluginContract>(componentType: string, methods: ServicePluginMethodMetadata[]): ServicePluginDefinition<Contract>;
type BuildServicePluginDefinition<T extends ServicePluginDefinition<any>> = (implementation: T['__contract']) => void;
declare const SERVICE_PLUGIN_ERROR_TYPE = "wix_spi_error";

type RequestContext = {
    isSSR: boolean;
    host: string;
    protocol?: string;
};
type ResponseTransformer = (data: any, headers?: any) => any;
/**
 * Ambassador request options types are copied mostly from AxiosRequestConfig.
 * They are copied and not imported to reduce the amount of dependencies (to reduce install time).
 * https://github.com/axios/axios/blob/3f53eb6960f05a1f88409c4b731a40de595cb825/index.d.ts#L307-L315
 */
type Method = 'get' | 'GET' | 'delete' | 'DELETE' | 'head' | 'HEAD' | 'options' | 'OPTIONS' | 'post' | 'POST' | 'put' | 'PUT' | 'patch' | 'PATCH' | 'purge' | 'PURGE' | 'link' | 'LINK' | 'unlink' | 'UNLINK';
type AmbassadorRequestOptions<T = any> = {
    _?: T;
    url?: string;
    method?: Method;
    params?: any;
    data?: any;
    transformResponse?: ResponseTransformer | ResponseTransformer[];
};
type AmbassadorFactory<Request, Response> = (payload: Request) => ((context: RequestContext) => AmbassadorRequestOptions<Response>) & {
    __isAmbassador: boolean;
};
type AmbassadorFunctionDescriptor<Request = any, Response = any> = AmbassadorFactory<Request, Response>;
type BuildAmbassadorFunction<T extends AmbassadorFunctionDescriptor> = T extends AmbassadorFunctionDescriptor<infer Request, infer Response> ? (req: Request) => Promise<Response> : never;

declare global {
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- It has to be an `interface` so that it can be merged.
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}

declare const emptyObjectSymbol: unique symbol;

/**
Represents a strictly empty plain object, the `{}` value.

When you annotate something as the type `{}`, it can be anything except `null` and `undefined`. This means that you cannot use `{}` to represent an empty plain object ([read more](https://stackoverflow.com/questions/47339869/typescript-empty-object-and-any-difference/52193484#52193484)).

@example
```
import type {EmptyObject} from 'type-fest';

// The following illustrates the problem with `{}`.
const foo1: {} = {}; // Pass
const foo2: {} = []; // Pass
const foo3: {} = 42; // Pass
const foo4: {} = {a: 1}; // Pass

// With `EmptyObject` only the first case is valid.
const bar1: EmptyObject = {}; // Pass
const bar2: EmptyObject = 42; // Fail
const bar3: EmptyObject = []; // Fail
const bar4: EmptyObject = {a: 1}; // Fail
```

Unfortunately, `Record<string, never>`, `Record<keyof any, never>` and `Record<never, never>` do not work. See {@link https://github.com/sindresorhus/type-fest/issues/395 #395}.

@category Object
*/
type EmptyObject = {[emptyObjectSymbol]?: never};

/**
Returns a boolean for whether the two given types are equal.

@link https://github.com/microsoft/TypeScript/issues/27024#issuecomment-421529650
@link https://stackoverflow.com/questions/68961864/how-does-the-equals-work-in-typescript/68963796#68963796

Use-cases:
- If you want to make a conditional branch based on the result of a comparison of two types.

@example
```
import type {IsEqual} from 'type-fest';

// This type returns a boolean for whether the given array includes the given item.
// `IsEqual` is used to compare the given array at position 0 and the given item and then return true if they are equal.
type Includes<Value extends readonly any[], Item> =
	Value extends readonly [Value[0], ...infer rest]
		? IsEqual<Value[0], Item> extends true
			? true
			: Includes<rest, Item>
		: false;
```

@category Type Guard
@category Utilities
*/
type IsEqual<A, B> =
	(<G>() => G extends A ? 1 : 2) extends
	(<G>() => G extends B ? 1 : 2)
		? true
		: false;

/**
Filter out keys from an object.

Returns `never` if `Exclude` is strictly equal to `Key`.
Returns `never` if `Key` extends `Exclude`.
Returns `Key` otherwise.

@example
```
type Filtered = Filter<'foo', 'foo'>;
//=> never
```

@example
```
type Filtered = Filter<'bar', string>;
//=> never
```

@example
```
type Filtered = Filter<'bar', 'foo'>;
//=> 'bar'
```

@see {Except}
*/
type Filter<KeyType, ExcludeType> = IsEqual<KeyType, ExcludeType> extends true ? never : (KeyType extends ExcludeType ? never : KeyType);

type ExceptOptions = {
	/**
	Disallow assigning non-specified properties.

	Note that any omitted properties in the resulting type will be present in autocomplete as `undefined`.

	@default false
	*/
	requireExactProps?: boolean;
};

/**
Create a type from an object type without certain keys.

We recommend setting the `requireExactProps` option to `true`.

This type is a stricter version of [`Omit`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-5.html#the-omit-helper-type). The `Omit` type does not restrict the omitted keys to be keys present on the given type, while `Except` does. The benefits of a stricter type are avoiding typos and allowing the compiler to pick up on rename refactors automatically.

This type was proposed to the TypeScript team, which declined it, saying they prefer that libraries implement stricter versions of the built-in types ([microsoft/TypeScript#30825](https://github.com/microsoft/TypeScript/issues/30825#issuecomment-523668235)).

@example
```
import type {Except} from 'type-fest';

type Foo = {
	a: number;
	b: string;
};

type FooWithoutA = Except<Foo, 'a'>;
//=> {b: string}

const fooWithoutA: FooWithoutA = {a: 1, b: '2'};
//=> errors: 'a' does not exist in type '{ b: string; }'

type FooWithoutB = Except<Foo, 'b', {requireExactProps: true}>;
//=> {a: number} & Partial<Record<"b", never>>

const fooWithoutB: FooWithoutB = {a: 1, b: '2'};
//=> errors at 'b': Type 'string' is not assignable to type 'undefined'.
```

@category Object
*/
type Except<ObjectType, KeysType extends keyof ObjectType, Options extends ExceptOptions = {requireExactProps: false}> = {
	[KeyType in keyof ObjectType as Filter<KeyType, KeysType>]: ObjectType[KeyType];
} & (Options['requireExactProps'] extends true
	? Partial<Record<KeysType, never>>
	: {});

/**
Returns a boolean for whether the given type is `never`.

@link https://github.com/microsoft/TypeScript/issues/31751#issuecomment-498526919
@link https://stackoverflow.com/a/53984913/10292952
@link https://www.zhenghao.io/posts/ts-never

Useful in type utilities, such as checking if something does not occur.

@example
```
import type {IsNever, And} from 'type-fest';

// https://github.com/andnp/SimplyTyped/blob/master/src/types/strings.ts
type AreStringsEqual<A extends string, B extends string> =
	And<
		IsNever<Exclude<A, B>> extends true ? true : false,
		IsNever<Exclude<B, A>> extends true ? true : false
	>;

type EndIfEqual<I extends string, O extends string> =
	AreStringsEqual<I, O> extends true
		? never
		: void;

function endIfEqual<I extends string, O extends string>(input: I, output: O): EndIfEqual<I, O> {
	if (input === output) {
		process.exit(0);
	}
}

endIfEqual('abc', 'abc');
//=> never

endIfEqual('abc', '123');
//=> void
```

@category Type Guard
@category Utilities
*/
type IsNever<T> = [T] extends [never] ? true : false;

/**
An if-else-like type that resolves depending on whether the given type is `never`.

@see {@link IsNever}

@example
```
import type {IfNever} from 'type-fest';

type ShouldBeTrue = IfNever<never>;
//=> true

type ShouldBeBar = IfNever<'not never', 'foo', 'bar'>;
//=> 'bar'
```

@category Type Guard
@category Utilities
*/
type IfNever<T, TypeIfNever = true, TypeIfNotNever = false> = (
	IsNever<T> extends true ? TypeIfNever : TypeIfNotNever
);

/**
Extract the keys from a type where the value type of the key extends the given `Condition`.

Internally this is used for the `ConditionalPick` and `ConditionalExcept` types.

@example
```
import type {ConditionalKeys} from 'type-fest';

interface Example {
	a: string;
	b: string | number;
	c?: string;
	d: {};
}

type StringKeysOnly = ConditionalKeys<Example, string>;
//=> 'a'
```

To support partial types, make sure your `Condition` is a union of undefined (for example, `string | undefined`) as demonstrated below.

@example
```
import type {ConditionalKeys} from 'type-fest';

type StringKeysAndUndefined = ConditionalKeys<Example, string | undefined>;
//=> 'a' | 'c'
```

@category Object
*/
type ConditionalKeys<Base, Condition> =
{
	// Map through all the keys of the given base type.
	[Key in keyof Base]-?:
	// Pick only keys with types extending the given `Condition` type.
	Base[Key] extends Condition
	// Retain this key
	// If the value for the key extends never, only include it if `Condition` also extends never
		? IfNever<Base[Key], IfNever<Condition, Key, never>, Key>
	// Discard this key since the condition fails.
		: never;
	// Convert the produced object into a union type of the keys which passed the conditional test.
}[keyof Base];

/**
Exclude keys from a shape that matches the given `Condition`.

This is useful when you want to create a new type with a specific set of keys from a shape. For example, you might want to exclude all the primitive properties from a class and form a new shape containing everything but the primitive properties.

@example
```
import type {Primitive, ConditionalExcept} from 'type-fest';

class Awesome {
	name: string;
	successes: number;
	failures: bigint;

	run() {}
}

type ExceptPrimitivesFromAwesome = ConditionalExcept<Awesome, Primitive>;
//=> {run: () => void}
```

@example
```
import type {ConditionalExcept} from 'type-fest';

interface Example {
	a: string;
	b: string | number;
	c: () => void;
	d: {};
}

type NonStringKeysOnly = ConditionalExcept<Example, string>;
//=> {b: string | number; c: () => void; d: {}}
```

@category Object
*/
type ConditionalExcept<Base, Condition> = Except<
Base,
ConditionalKeys<Base, Condition>
>;

/**
 * Descriptors are objects that describe the API of a module, and the module
 * can either be a REST module or a host module.
 * This type is recursive, so it can describe nested modules.
 */
type Descriptors = RESTFunctionDescriptor | AmbassadorFunctionDescriptor | HostModule<any, any> | EventDefinition<any> | ServicePluginDefinition<any> | {
    [key: string]: Descriptors | PublicMetadata | any;
};
/**
 * This type takes in a descriptors object of a certain Host (including an `unknown` host)
 * and returns an object with the same structure, but with all descriptors replaced with their API.
 * Any non-descriptor properties are removed from the returned object, including descriptors that
 * do not match the given host (as they will not work with the given host).
 */
type BuildDescriptors<T extends Descriptors, H extends Host<any> | undefined, Depth extends number = 5> = {
    done: T;
    recurse: T extends {
        __type: typeof SERVICE_PLUGIN_ERROR_TYPE;
    } ? never : T extends AmbassadorFunctionDescriptor ? BuildAmbassadorFunction<T> : T extends RESTFunctionDescriptor ? BuildRESTFunction<T> : T extends EventDefinition<any> ? BuildEventDefinition<T> : T extends ServicePluginDefinition<any> ? BuildServicePluginDefinition<T> : T extends HostModule<any, any> ? HostModuleAPI<T> : ConditionalExcept<{
        [Key in keyof T]: T[Key] extends Descriptors ? BuildDescriptors<T[Key], H, [
            -1,
            0,
            1,
            2,
            3,
            4,
            5
        ][Depth]> : never;
    }, EmptyObject>;
}[Depth extends -1 ? 'done' : 'recurse'];
type PublicMetadata = {
    PACKAGE_NAME?: string;
};

declare global {
    interface ContextualClient {
    }
}
/**
 * A type used to create concerete types from SDK descriptors in
 * case a contextual client is available.
 */
type MaybeContext<T extends Descriptors> = globalThis.ContextualClient extends {
    host: Host;
} ? BuildDescriptors<T, globalThis.ContextualClient['host']> : T;

interface CheckoutContentProvider {
    _id?: string | null;
}
interface GetCheckoutContentRequest {
    /** ID of the app that provides the content. */
    appId: string;
    /** ID of the specific component content. */
    componentId: string;
    /** When a language is specified, it will be retrieved the content in that language. */
    languageCode?: string | null;
}
interface GetCheckoutContentResponse {
    /** The requested CheckoutContent. */
    checkoutContent?: CheckoutContent;
}
interface CheckoutContent {
    /**
     * Text to display in place of the "Continue shopping" link.
     * @readonly
     */
    continueShoppingLink?: string | null;
    /**
     * Text to display in place of the "Order summary" title.
     * @readonly
     */
    orderSummary?: string | null;
    /**
     * Text to display in place of the "Customer details" title.
     * @readonly
     */
    customerDetails?: string | null;
    /**
     * Text to display in place of the "Review and place order" title.
     * @readonly
     */
    reviewAndPlaceOrder?: string | null;
    /**
     * Text to display in place of the "Place order" button.
     * @readonly
     */
    placeOrderButton?: string | null;
    /**
     * Text to display in place of the "Place order & pay" button.
     * @readonly
     */
    placeOrderPayButton?: string | null;
}
interface GetCheckoutContentIdentifiers {
    /** ID of the app that provides the content. */
    appId: string;
    /** ID of the specific component content. */
    componentId: string;
}
interface GetCheckoutContentOptions {
    /** When a language is specified, it will be retrieved the content in that language. */
    languageCode?: string | null;
}

declare function getCheckoutContent$1(httpClient: HttpClient): GetCheckoutContentSignature;
interface GetCheckoutContentSignature {
    /**
     * Retrieves a CheckoutContent.
     */
    (identifiers: GetCheckoutContentIdentifiers, options?: GetCheckoutContentOptions | undefined): Promise<GetCheckoutContentResponse>;
}

declare const getCheckoutContent: MaybeContext<BuildRESTFunction<typeof getCheckoutContent$1> & typeof getCheckoutContent$1>;

type index_d$v_CheckoutContent = CheckoutContent;
type index_d$v_CheckoutContentProvider = CheckoutContentProvider;
type index_d$v_GetCheckoutContentIdentifiers = GetCheckoutContentIdentifiers;
type index_d$v_GetCheckoutContentOptions = GetCheckoutContentOptions;
type index_d$v_GetCheckoutContentRequest = GetCheckoutContentRequest;
type index_d$v_GetCheckoutContentResponse = GetCheckoutContentResponse;
declare const index_d$v_getCheckoutContent: typeof getCheckoutContent;
declare namespace index_d$v {
  export { type index_d$v_CheckoutContent as CheckoutContent, type index_d$v_CheckoutContentProvider as CheckoutContentProvider, type index_d$v_GetCheckoutContentIdentifiers as GetCheckoutContentIdentifiers, type index_d$v_GetCheckoutContentOptions as GetCheckoutContentOptions, type index_d$v_GetCheckoutContentRequest as GetCheckoutContentRequest, type index_d$v_GetCheckoutContentResponse as GetCheckoutContentResponse, index_d$v_getCheckoutContent as getCheckoutContent };
}

interface CustomTrigger {
    /** Unique ID of the trigger */
    _id?: string;
    /** App ID of the trigger provider */
    appId?: string;
}
interface GetEligibleTriggersRequest {
    /** List of line items to check the custom triggers on */
    lineItems?: LineItem$8[];
    /** List of custom triggers to check 'is eligible' on */
    triggers?: TriggerToFilterBy[];
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}
interface LineItem$8 {
    /** Line item ID. */
    _id?: string;
    /** Item quantity in this line item. */
    quantity?: number | null;
    /**
     * Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference$d;
    /** Price of a single item. */
    price?: string;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$d {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface TriggerToFilterBy {
    /** Custom trigger */
    customTrigger?: CustomTrigger;
    /** Unique identifier that will return in `EligibleTrigger.identifier` to distinguish between scopes */
    identifier?: string | null;
}
interface GetEligibleTriggersResponse {
    /** A List of eligible custom triggers */
    eligibleTriggers?: EligibleTrigger[];
}
interface EligibleTrigger {
    /** The ID of the custom trigger */
    customTriggerId?: string;
    /** The id of the application implements this custom trigger */
    appId?: string;
    /** Unique identifier that was assigned in `TriggerToFilterBy.identifier` to distinguish between custom triggers */
    identifier?: string | null;
}
interface ListTriggersRequest {
}
interface ListTriggersResponse {
    /** A list of all custom triggers */
    triggers?: ListTriggersResponseCustomTrigger[];
}
interface ListTriggersResponseCustomTrigger {
    /** Unique ID of the custom trigger */
    _id?: string;
    /** App ID of the custom trigger provider */
    appId?: string;
    /** Custom Trigger display name */
    name?: string;
}
interface ListTriggersResponseCustomTriggerNonNullableFields {
    _id: string;
    appId: string;
    name: string;
}
interface ListTriggersResponseNonNullableFields {
    triggers: ListTriggersResponseCustomTriggerNonNullableFields[];
}

declare function listTriggers$1(httpClient: HttpClient): ListTriggersSignature;
interface ListTriggersSignature {
    /**
     * List all custom triggers that are available on a given site
     */
    (): Promise<ListTriggersResponse & ListTriggersResponseNonNullableFields>;
}

declare const listTriggers: MaybeContext<BuildRESTFunction<typeof listTriggers$1> & typeof listTriggers$1>;

type index_d$u_CustomTrigger = CustomTrigger;
type index_d$u_EligibleTrigger = EligibleTrigger;
type index_d$u_GetEligibleTriggersRequest = GetEligibleTriggersRequest;
type index_d$u_GetEligibleTriggersResponse = GetEligibleTriggersResponse;
type index_d$u_ListTriggersRequest = ListTriggersRequest;
type index_d$u_ListTriggersResponse = ListTriggersResponse;
type index_d$u_ListTriggersResponseCustomTrigger = ListTriggersResponseCustomTrigger;
type index_d$u_ListTriggersResponseNonNullableFields = ListTriggersResponseNonNullableFields;
type index_d$u_TriggerToFilterBy = TriggerToFilterBy;
declare const index_d$u_listTriggers: typeof listTriggers;
declare namespace index_d$u {
  export { type CatalogReference$d as CatalogReference, type index_d$u_CustomTrigger as CustomTrigger, type index_d$u_EligibleTrigger as EligibleTrigger, type index_d$u_GetEligibleTriggersRequest as GetEligibleTriggersRequest, type index_d$u_GetEligibleTriggersResponse as GetEligibleTriggersResponse, type LineItem$8 as LineItem, type index_d$u_ListTriggersRequest as ListTriggersRequest, type index_d$u_ListTriggersResponse as ListTriggersResponse, type index_d$u_ListTriggersResponseCustomTrigger as ListTriggersResponseCustomTrigger, type index_d$u_ListTriggersResponseNonNullableFields as ListTriggersResponseNonNullableFields, type index_d$u_TriggerToFilterBy as TriggerToFilterBy, index_d$u_listTriggers as listTriggers };
}

interface DiscountRule$8 {
    /**
     * Discount rule ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the discount rule is updated.
     * To prevent conflicting changes, the current `revision` must be passed when updating the discount rule.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the discount rule was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the discount rule was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Whether the discount rule is active.
     *
     * Default: `true`
     */
    active?: boolean | null;
    /** Discount rule name. */
    name?: string | null;
    /**
     * Discount rule trigger.
     * A set of conditions that must be met for the `discounts` to be applied.
     * Not passing a trigger will cause the discount to always apply.
     */
    trigger?: DiscountTrigger;
    /** Time frame in which the discount rule is active. */
    activeTimeInfo?: ActiveTimeInfo;
    /**
     * List of discounts that are applied when one or more triggers are met.
     *
     * > **Notes:**
     * >
     * > + Currently, only 1 discount can be defined per discount rule.
     * > + A discount rule can be applied on multiple items per cart.
     * > + A discount rule can only be applied once per item.
     */
    discounts?: Discounts;
    /**
     * Discount rule status.
     * @readonly
     */
    status?: Status$5;
    /**
     * Number of times the discount rule was used.
     * @readonly
     */
    usageCount?: number;
}
/** DiscountTrigger - description of a set of conditions, that if met, will trigger the associated rule actions */
interface DiscountTrigger extends DiscountTriggerTriggerOneOf {
    /** Chain multiple triggers with the `and` operator. */
    and?: And;
    /** Chain multiple triggers with the `or` operator. */
    or?: Or;
    /** Custom trigger. */
    customTrigger?: Custom;
    /** Subtotal trigger range. */
    subtotalRange?: SubtotalRange;
    /** Item quantity trigger range. */
    itemQuantityRange?: ItemQuantityRange;
    /**
     * Trigger type.
     *
     * + `"AND"`: Operator used for chaining multiple triggers. Currently 1 `"AND"` chain operator is supported.
     * + `"SUBTOTAL_RANGE"`: Subtotal must be within the specified `subtotalRange` values.
     * + `"ITEM_QUANTITY_RANGE"`: Quantity of items in scope must be within specified `itemQuantityRange` values.
     * + `"CUSTOM"`: Custom trigger type defined in `customTrigger` object.
     */
    triggerType?: TriggerType;
}
/** @oneof */
interface DiscountTriggerTriggerOneOf {
    /** Chain multiple triggers with the `and` operator. */
    and?: And;
    /** Chain multiple triggers with the `or` operator. */
    or?: Or;
    /** Custom trigger. */
    customTrigger?: Custom;
    /** Subtotal trigger range. */
    subtotalRange?: SubtotalRange;
    /** Item quantity trigger range. */
    itemQuantityRange?: ItemQuantityRange;
}
/**
 * This object represents a scope of catalog items. Examples:
 * 1. All catalog items of a specific app - type = CATALOG_ITEM, CatalogItemFilter with `catalog_app_id`
 * 2. Specific catalog item - type = CATALOG_ITEM, CatalogItemFilter with `catalog_app_id` + `catalog_item_ids`
 * 3. External catalog filter - type = CUSTOM_FILTER, CustomFilter with 'app_id' + 'params'
 */
interface Scope$5 extends ScopeScopeItemsOneOf {
    /** Catalog item filter. Must be passed with `type."CATALOG_ITEM"`. */
    catalogItemFilter?: CatalogItemFilter;
    /** Custom filter. Must be passed with `type."CATALOG_ITEM"`. */
    customFilter?: CustomFilter;
    /** Scope ID. */
    _id?: string;
    /** Scope type. */
    type?: ScopeType;
}
/** @oneof */
interface ScopeScopeItemsOneOf {
    /** Catalog item filter. Must be passed with `type."CATALOG_ITEM"`. */
    catalogItemFilter?: CatalogItemFilter;
    /** Custom filter. Must be passed with `type."CATALOG_ITEM"`. */
    customFilter?: CustomFilter;
}
declare enum ScopeType {
    UNDEFINED_SCOPE = "UNDEFINED_SCOPE",
    /** Specific catalog items */
    CATALOG_ITEM = "CATALOG_ITEM",
    /** Specific items by custom filters */
    CUSTOM_FILTER = "CUSTOM_FILTER"
}
interface CatalogItemFilter {
    /** Catalog App ID. For example, the Wix Stores, Wix Bookings, or 3rd-party `appId`. */
    catalogAppId?: string;
    /** ID of the item within its Wix or 3rd-party catalog. For example, `productId` for Wix Stores. */
    catalogItemIds?: string[];
}
interface CustomFilter {
    /** Custom filter app ID, when relevant. */
    appId?: string;
    /**
     * Custom filter in `{ "key": "value" }` form.
     * For example, an array of `collectionIDs`:
     * `{ ["collectionId": "12345"], ["collectionId": "67890"] }`.
     */
    params?: Record<string, any> | null;
}
interface And {
    /** List of triggers to have an "AND" operator between their results. */
    triggers?: DiscountTrigger[];
}
interface Or {
    /** List of triggers to have an "OR" operator between their results. */
    triggers?: DiscountTrigger[];
}
interface Custom {
    /** Trigger ID. */
    _id?: string;
    /** ID of the app that created the trigger. */
    appId?: string;
}
interface SubtotalRange {
    /** Relevant scopes for `"SPECIFIC_ITEMS"` target type. */
    scopes?: Scope$5[];
    /** Minimum subtotal price (inclusive). */
    from?: string | null;
    /** Maximum subtotal price (inclusive). */
    to?: string | null;
}
interface ItemQuantityRange {
    /** Relevant scopes for `"SPECIFIC_ITEMS"` target type. */
    scopes?: Scope$5[];
    /** Minimum item quantity (inclusive). */
    from?: number | null;
    /** Maximum item quantity (inclusive). */
    to?: number | null;
}
declare enum TriggerType {
    UNDEFINED = "UNDEFINED",
    /** Chain multiple triggers with AND operator */
    AND = "AND",
    /** Subtotal range trigger */
    SUBTOTAL_RANGE = "SUBTOTAL_RANGE",
    /** Item quantity range trigger */
    ITEM_QUANTITY_RANGE = "ITEM_QUANTITY_RANGE",
    /** Custom trigger, see Custom Triggers SPI for more details */
    CUSTOM = "CUSTOM",
    /** Chain multiple triggers with OR operator */
    OR = "OR"
}
interface ActiveTimeInfo {
    /** Date and time the discount rule is active **from**, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    start?: Date | null;
    /** Date and time the discount rule is active **till**, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    end?: Date | null;
}
interface Discounts {
    /** Discounts. */
    values?: Discount$3[];
}
interface Discount$3 extends DiscountDiscountOneOf {
    /** Percentage to discount from original price. */
    percentage?: number;
    /** Amount to discount from original price. */
    fixedAmount?: string;
    /** Fixed price. Line item will be fixed to this price. */
    fixedPrice?: string;
    /**
     * Discount target.
     *
     * + `"SPECIFIC_ITEMS"`: Discount applies to a specific set of items.
     */
    targetType?: Type;
    /** Data related to `"SPECIFIC_ITEMS"` target type. */
    specificItemsInfo?: SpecificItemsInfo;
    /**
     * Discount type.
     *
     * + `"PERCENTAGE"`: Price is reduced by percentage value.
     * + `"FIXED_AMOUNT"`: Price is reduced by fixed amount.
     * + `"FIXED_PRICE"`: Price will be set to fixed amount.
     */
    discountType?: DiscountType$8;
}
/** @oneof */
interface DiscountDiscountOneOf {
    /** Percentage to discount from original price. */
    percentage?: number;
    /** Amount to discount from original price. */
    fixedAmount?: string;
    /** Fixed price. Line item will be fixed to this price. */
    fixedPrice?: string;
}
declare enum Type {
    /** Target type is not defined */
    UNDEFINED = "UNDEFINED",
    /** Target type is a set of specific items */
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS"
}
interface SpecificItemsInfo {
    /** All associated scopes for `"SPECIFIC_ITEMS"` target type. */
    scopes?: Scope$5[];
}
declare enum DiscountType$8 {
    UNDEFINED = "UNDEFINED",
    /** Percentage discount */
    PERCENTAGE = "PERCENTAGE",
    /** Fixed amount discount */
    FIXED_AMOUNT = "FIXED_AMOUNT",
    /** Fixed price discount */
    FIXED_PRICE = "FIXED_PRICE"
}
interface BuyXGetYInfo {
    /** Information about which items must be in the cart (buy X) for the discount to apply (get Y). */
    customerBuys?: CustomerBuy;
    /** Information about which items will be discounted (get Y). */
    customerGets?: CustomerGet;
    /**
     * The maximum number of times the 'buy X get Y' discount can be applied.
     * For example, when the value of `limit` is `2`, with a "2+1" sale on all items, the following logic applies:
     * + Buy 2 get 1, buy 3 get 1.
     * + Buy 4 get 2, buy 6 get 2, buy 9 get 2, and so on.
     */
    limit?: number | null;
}
interface CustomerBuy extends CustomerBuyConditionOneOf {
    /** Minimum number of items the customer must add to the cart to be eligible for a discount. */
    minimumQuantity?: number;
    /** Minimum price the customer must add to the cart to be eligible for a discount. */
    minimumSpend?: string | null;
    /** Scopes of the items that must be added to the cart to enable the discount. */
    scopes?: Scope$5[];
}
/** @oneof */
interface CustomerBuyConditionOneOf {
    /** Minimum number of items the customer must add to the cart to be eligible for a discount. */
    minimumQuantity?: number;
    /** Minimum price the customer must add to the cart to be eligible for a discount. */
    minimumSpend?: string | null;
}
interface CustomerGet {
    /**
     * Exact number of items in the cart that will be discounted.
     * If the cart contains fewer items than the value of quantity, the discount will not apply.
     */
    quantity?: number;
    /** Scopes of the items that will be discounted. */
    scopes?: Scope$5[];
}
declare enum Status$5 {
    /** Rule status is not defined. */
    UNDEFINED = "UNDEFINED",
    /** Rule status is live. */
    LIVE = "LIVE",
    /** Rule status is expired, it might have been live in the past. */
    EXPIRED = "EXPIRED",
    /** Rule status is pending, it might be live in the future. */
    PENDING = "PENDING"
}
/** The discount settings */
interface DiscountSettings {
    /** Discount applies to either `ALL_ITEMS`, or to the `LOWEST_PRICED_ITEM`. */
    appliesTo?: AppliedSubjectType;
    /**
     * Whether the discount will apply to subscriptions.
     *
     * Default: `false`
     */
    includeSubscription?: boolean | null;
    /** Maximum total number of uses allowed for the discount rule. */
    usageLimit?: number | null;
    /**
     * The usage limit per user per discount.
     * When not provided, this setting will not apply.
     */
    usageLimitPerUser?: number | null;
}
/** TODO: check if can be removed */
declare enum AppliedSubjectType {
    UNDEFINED = "UNDEFINED",
    /** Discount applies to all items at checkout. */
    ALL_ITEMS = "ALL_ITEMS",
    /** Discount applies to the lowest priced item at checkout. */
    LOWEST_PRICED_ITEM = "LOWEST_PRICED_ITEM"
}
interface ExtendedFields$c {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateDiscountRuleRequest {
    /** Discount rule info. */
    discountRule: DiscountRule$8;
}
interface CreateDiscountRuleResponse {
    /** Discount rule. */
    discountRule?: DiscountRule$8;
}
interface GetDiscountRuleRequest {
    /** ID of the discount rule to retrieve. */
    discountRuleId: string;
}
interface GetDiscountRuleResponse {
    /** The requested discount rule. */
    discountRule?: DiscountRule$8;
}
interface UpdateDiscountRuleRequest {
    /** Discount rule info. */
    discountRule: DiscountRule$8;
}
interface UpdateDiscountRuleResponse {
    /** Updated discount rule. */
    discountRule?: DiscountRule$8;
}
interface DeleteDiscountRuleRequest {
    /** ID of the discount rule to delete. */
    discountRuleId: string;
}
interface DeleteDiscountRuleResponse {
}
interface QueryDiscountRulesRequest {
    /** Query options. */
    query?: PlatformQuery$2;
}
interface PlatformQuery$2 extends PlatformQueryPagingMethodOneOf$2 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$2;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$f;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting$f[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf$2 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$2;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$f;
}
interface Sorting$f {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$f;
}
declare enum SortOrder$f {
    ASC = "ASC",
    DESC = "DESC"
}
interface PlatformPaging$2 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$f {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryDiscountRulesResponse {
    /** List of discount rules. */
    discountRules?: DiscountRule$8[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: PlatformPagingMetadata$2;
}
interface PlatformPagingMetadata$2 {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors$f;
}
interface Cursors$f {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetAppliedDiscountsRequest {
    /** Line items for which to check for discount rules. */
    lineItems?: LineItem$7[];
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}
interface LineItem$7 {
    /** Line item ID. */
    _id?: string;
    /** Line item quantity. */
    quantity?: number | null;
    /** Catalog and item reference info. Learn more about [integrating Wix Stores products with Wix eCommerce](https://dev.wix.com/api/rest/wix-stores/catalog/ecommerce-integration). */
    catalogReference?: CatalogReference$c;
    /** Line item price. */
    price?: string;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$c {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface GetAppliedDiscountsResponse {
    /** All eligible discounts. */
    appliedDiscounts?: AppliedDiscount$8[];
}
interface AppliedDiscount$8 {
    /** Discount type. */
    discountType?: Type;
    /** IDs of line items the discount applies to, in GUID format. */
    lineItemIds?: string[];
    /** Applied discount rule. */
    appliedDiscountRule?: AppliedDiscountRule;
}
interface AppliedDiscountRule {
    /** Applied discount rule ID. */
    _id?: string;
    /** Discount rule name. */
    name?: DiscountRuleName$8;
    /** Total amount reduced from all discounted line items. */
    amount?: MultiCurrencyPrice$6;
    /** Discount rule type. */
    discountRuleType?: DiscountType$8;
}
interface DiscountRuleName$8 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /**
     * Translated discount rule name according to buyer language.
     *
     * Default: `original`
     */
    translated?: string | null;
}
interface MultiCurrencyPrice$6 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface DomainEvent$n extends DomainEventBodyOneOf$n {
    createdEvent?: EntityCreatedEvent$n;
    updatedEvent?: EntityUpdatedEvent$n;
    deletedEvent?: EntityDeletedEvent$n;
    actionEvent?: ActionEvent$n;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$n {
    createdEvent?: EntityCreatedEvent$n;
    updatedEvent?: EntityUpdatedEvent$n;
    deletedEvent?: EntityDeletedEvent$n;
    actionEvent?: ActionEvent$n;
}
interface EntityCreatedEvent$n {
    entity?: string;
}
interface RestoreInfo$n {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$n {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$n {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$n {
    body?: string;
}
interface Empty$g {
}
interface DiscountRuleUsageLimitReached {
    /** Discount Rule */
    rule?: DiscountRule$8;
}
interface MessageEnvelope$m {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$n;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$n extends IdentificationDataIdOneOf$n {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$m;
}
/** @oneof */
interface IdentificationDataIdOneOf$n {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$m {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface AndNonNullableFields {
    triggers: DiscountTriggerNonNullableFields[];
}
interface OrNonNullableFields {
    triggers: DiscountTriggerNonNullableFields[];
}
interface CustomNonNullableFields {
    _id: string;
    appId: string;
}
interface CatalogItemFilterNonNullableFields {
    catalogAppId: string;
    catalogItemIds: string[];
}
interface CustomFilterNonNullableFields {
    appId: string;
}
interface ScopeNonNullableFields$3 {
    catalogItemFilter?: CatalogItemFilterNonNullableFields;
    customFilter?: CustomFilterNonNullableFields;
    _id: string;
    type: ScopeType;
}
interface SubtotalRangeNonNullableFields {
    scopes: ScopeNonNullableFields$3[];
}
interface ItemQuantityRangeNonNullableFields {
    scopes: ScopeNonNullableFields$3[];
}
interface DiscountTriggerNonNullableFields {
    and?: AndNonNullableFields;
    or?: OrNonNullableFields;
    customTrigger?: CustomNonNullableFields;
    subtotalRange?: SubtotalRangeNonNullableFields;
    itemQuantityRange?: ItemQuantityRangeNonNullableFields;
    triggerType: TriggerType;
}
interface SpecificItemsInfoNonNullableFields {
    scopes: ScopeNonNullableFields$3[];
}
interface CustomerBuyNonNullableFields {
    minimumQuantity: number;
    scopes: ScopeNonNullableFields$3[];
}
interface CustomerGetNonNullableFields {
    quantity: number;
    scopes: ScopeNonNullableFields$3[];
}
interface BuyXGetYInfoNonNullableFields {
    customerBuys?: CustomerBuyNonNullableFields;
    customerGets?: CustomerGetNonNullableFields;
}
interface DiscountNonNullableFields {
    percentage: number;
    fixedAmount: string;
    fixedPrice: string;
    targetType: Type;
    specificItemsInfo?: SpecificItemsInfoNonNullableFields;
    discountType: DiscountType$8;
    buyXGetYInfo?: BuyXGetYInfoNonNullableFields;
}
interface DiscountsNonNullableFields {
    values: DiscountNonNullableFields[];
}
interface DiscountSettingsNonNullableFields {
    appliesTo: AppliedSubjectType;
}
interface DiscountRuleNonNullableFields$7 {
    trigger?: DiscountTriggerNonNullableFields;
    discounts?: DiscountsNonNullableFields;
    status: Status$5;
    usageCount: number;
    settings?: DiscountSettingsNonNullableFields;
}
interface CreateDiscountRuleResponseNonNullableFields {
    discountRule?: DiscountRuleNonNullableFields$7;
}
interface GetDiscountRuleResponseNonNullableFields {
    discountRule?: DiscountRuleNonNullableFields$7;
}
interface UpdateDiscountRuleResponseNonNullableFields {
    discountRule?: DiscountRuleNonNullableFields$7;
}
interface QueryDiscountRulesResponseNonNullableFields {
    discountRules: DiscountRuleNonNullableFields$7[];
}
interface BaseEventMetadata$e {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$n;
}
interface EventMetadata$e extends BaseEventMetadata$e {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface DiscountRuleCreatedEnvelope {
    entity: DiscountRule$8;
    metadata: EventMetadata$e;
}
interface DiscountRuleUpdatedEnvelope {
    entity: DiscountRule$8;
    metadata: EventMetadata$e;
}
interface DiscountRuleDeletedEnvelope {
    metadata: EventMetadata$e;
}
interface UpdateDiscountRule {
    /**
     * Discount rule ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the discount rule is updated.
     * To prevent conflicting changes, the current `revision` must be passed when updating the discount rule.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the discount rule was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the discount rule was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Whether the discount rule is active.
     *
     * Default: `true`
     */
    active?: boolean | null;
    /** Discount rule name. */
    name?: string | null;
    /**
     * Discount rule trigger.
     * A set of conditions that must be met for the `discounts` to be applied.
     * Not passing a trigger will cause the discount to always apply.
     */
    trigger?: DiscountTrigger;
    /** Time frame in which the discount rule is active. */
    activeTimeInfo?: ActiveTimeInfo;
    /**
     * List of discounts that are applied when one or more triggers are met.
     *
     * > **Notes:**
     * >
     * > + Currently, only 1 discount can be defined per discount rule.
     * > + A discount rule can be applied on multiple items per cart.
     * > + A discount rule can only be applied once per item.
     */
    discounts?: Discounts;
    /**
     * Discount rule status.
     * @readonly
     */
    status?: Status$5;
    /**
     * Number of times the discount rule was used.
     * @readonly
     */
    usageCount?: number;
}
interface QueryCursorResult$d {
    cursors: Cursors$f;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface DiscountRulesQueryResult extends QueryCursorResult$d {
    items: DiscountRule$8[];
    query: DiscountRulesQueryBuilder;
    next: () => Promise<DiscountRulesQueryResult>;
    prev: () => Promise<DiscountRulesQueryResult>;
}
interface DiscountRulesQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    eq: (propertyName: '_id' | 'revision' | '_createdDate' | '_updatedDate' | 'active' | 'name' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: any) => DiscountRulesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ne: (propertyName: '_id' | 'revision' | '_createdDate' | '_updatedDate' | 'active' | 'name' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: any) => DiscountRulesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ge: (propertyName: 'revision' | '_createdDate' | '_updatedDate' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: any) => DiscountRulesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    gt: (propertyName: 'revision' | '_createdDate' | '_updatedDate' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: any) => DiscountRulesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    le: (propertyName: 'revision' | '_createdDate' | '_updatedDate' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: any) => DiscountRulesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    lt: (propertyName: 'revision' | '_createdDate' | '_updatedDate' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: any) => DiscountRulesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     */
    startsWith: (propertyName: '_id' | 'name', value: string) => DiscountRulesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     */
    hasSome: (propertyName: '_id' | 'revision' | '_createdDate' | '_updatedDate' | 'active' | 'name' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: any[]) => DiscountRulesQueryBuilder;
    in: (propertyName: '_id' | 'revision' | '_createdDate' | '_updatedDate' | 'active' | 'name' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: any) => DiscountRulesQueryBuilder;
    exists: (propertyName: '_id' | 'revision' | '_createdDate' | '_updatedDate' | 'active' | 'name' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: boolean) => DiscountRulesQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    ascending: (...propertyNames: Array<'_id' | 'revision' | '_createdDate' | '_updatedDate' | 'active' | 'name' | 'activeTimeInfo.start' | 'activeTimeInfo.end'>) => DiscountRulesQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    descending: (...propertyNames: Array<'_id' | 'revision' | '_createdDate' | '_updatedDate' | 'active' | 'name' | 'activeTimeInfo.start' | 'activeTimeInfo.end'>) => DiscountRulesQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object. */
    limit: (limit: number) => DiscountRulesQueryBuilder;
    /** @param cursor - A pointer to specific record */
    skipTo: (cursor: string) => DiscountRulesQueryBuilder;
    find: () => Promise<DiscountRulesQueryResult>;
}

declare function createDiscountRule$1(httpClient: HttpClient): CreateDiscountRuleSignature;
interface CreateDiscountRuleSignature {
    /**
     * Creates a new discount rule.
     *
     *
     * The `createDiscountRule()` function returns a Promise that resolves to the new discount rule when it's created.
     * @param - Discount rule info.
     * @returns Discount rule.
     */
    (discountRule: DiscountRule$8): Promise<DiscountRule$8 & DiscountRuleNonNullableFields$7>;
}
declare function getDiscountRule$1(httpClient: HttpClient): GetDiscountRuleSignature;
interface GetDiscountRuleSignature {
    /**
     * Retrieves a discount rule.
     *
     *
     * The `getDiscountRule()` function returns a Promise that resolves when the specified discount rule is retrieved.
     * @param - ID of the discount rule to retrieve.
     * @returns The requested discount rule.
     */
    (discountRuleId: string): Promise<DiscountRule$8 & DiscountRuleNonNullableFields$7>;
}
declare function updateDiscountRule$1(httpClient: HttpClient): UpdateDiscountRuleSignature;
interface UpdateDiscountRuleSignature {
    /**
     * Updates a discount rule's properties.
     *
     *
     * The `updateDiscountRule()` function returns a Promise that resolves when the specified discount rule's properties are updated.
     *
     * Each time the discount rule is updated, `revision` increments by 1. The existing `revision` must be included when updating the discount rule. This ensures you're working with the latest discount rule information, and it prevents unintended overwrites.
     * @param - Discount rule ID.
     * @param - Discount rule info.
     * @param - Discount rule info.
     * @returns Updated discount rule.
     */
    (_id: string | null, discountRule: UpdateDiscountRule): Promise<DiscountRule$8 & DiscountRuleNonNullableFields$7>;
}
declare function deleteDiscountRule$1(httpClient: HttpClient): DeleteDiscountRuleSignature;
interface DeleteDiscountRuleSignature {
    /**
     * Deletes a discount rule.
     *
     *
     * The `deleteDiscountRule()` function returns a Promise that resolves when the specified discount rule is deleted.
     * @param - ID of the discount rule to delete.
     */
    (discountRuleId: string): Promise<void>;
}
declare function queryDiscountRules$1(httpClient: HttpClient): QueryDiscountRulesSignature;
interface QueryDiscountRulesSignature {
    /**
     * Creates a query to retrieve a list of discount rules.
     *
     *
     * The `queryDiscountRules()` function builds a query to retrieve a list of up to 100 discount rules, and returns a [`DiscountRulesQueryBuilder`](#discountrulesquerybuilder) object.
     *
     * The returned object contains the query definition which is typically used to run the query using the [`find()`](/discount-rules/discount-rules-query-builder/find) function.
     *
     * You can refine the query by chaining `DiscountRulesQueryBuilder` functions onto the query. `DiscountRulesQueryBuilder` functions enable you to sort, filter, and control the results queryDiscountRules() returns.
     *
     * By default, `queryDiscountRules()` sorts results by [`ascending("_id")`](/discount-rules/discount-rules-query-builder/ascending) by default. This can be overridden.
     *
     * To learn how to query posts, refer to the table below.
     *
     * The following `DiscountRulesQueryBuilder` functions are supported for the `queryDiscountRules()` function. For a full description of the discount rule object, see the object returned for the [`items`](/discount-rules/discount-rules-query-result/items) property in the `DiscountRulesQueryResult`.
     */
    (): DiscountRulesQueryBuilder;
}
declare const onDiscountRuleCreated$1: EventDefinition<DiscountRuleCreatedEnvelope, "wix.ecom.discounts.v1.discount_rule_created">;
declare const onDiscountRuleUpdated$1: EventDefinition<DiscountRuleUpdatedEnvelope, "wix.ecom.discounts.v1.discount_rule_updated">;
declare const onDiscountRuleDeleted$1: EventDefinition<DiscountRuleDeletedEnvelope, "wix.ecom.discounts.v1.discount_rule_deleted">;

declare function createEventModule$e<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createDiscountRule: MaybeContext<BuildRESTFunction<typeof createDiscountRule$1> & typeof createDiscountRule$1>;
declare const getDiscountRule: MaybeContext<BuildRESTFunction<typeof getDiscountRule$1> & typeof getDiscountRule$1>;
declare const updateDiscountRule: MaybeContext<BuildRESTFunction<typeof updateDiscountRule$1> & typeof updateDiscountRule$1>;
declare const deleteDiscountRule: MaybeContext<BuildRESTFunction<typeof deleteDiscountRule$1> & typeof deleteDiscountRule$1>;
declare const queryDiscountRules: MaybeContext<BuildRESTFunction<typeof queryDiscountRules$1> & typeof queryDiscountRules$1>;

type _publicOnDiscountRuleCreatedType = typeof onDiscountRuleCreated$1;
/**
 * Triggered when a discount rule is created.
 */
declare const onDiscountRuleCreated: ReturnType<typeof createEventModule$e<_publicOnDiscountRuleCreatedType>>;

type _publicOnDiscountRuleUpdatedType = typeof onDiscountRuleUpdated$1;
/**
 * Triggered when a discount rule is updated.
 */
declare const onDiscountRuleUpdated: ReturnType<typeof createEventModule$e<_publicOnDiscountRuleUpdatedType>>;

type _publicOnDiscountRuleDeletedType = typeof onDiscountRuleDeleted$1;
/**
 * Triggered when a discount rule is deleted.
 */
declare const onDiscountRuleDeleted: ReturnType<typeof createEventModule$e<_publicOnDiscountRuleDeletedType>>;

type index_d$t_ActiveTimeInfo = ActiveTimeInfo;
type index_d$t_And = And;
type index_d$t_AppliedDiscountRule = AppliedDiscountRule;
type index_d$t_AppliedSubjectType = AppliedSubjectType;
declare const index_d$t_AppliedSubjectType: typeof AppliedSubjectType;
type index_d$t_BuyXGetYInfo = BuyXGetYInfo;
type index_d$t_CatalogItemFilter = CatalogItemFilter;
type index_d$t_CreateDiscountRuleRequest = CreateDiscountRuleRequest;
type index_d$t_CreateDiscountRuleResponse = CreateDiscountRuleResponse;
type index_d$t_CreateDiscountRuleResponseNonNullableFields = CreateDiscountRuleResponseNonNullableFields;
type index_d$t_Custom = Custom;
type index_d$t_CustomFilter = CustomFilter;
type index_d$t_CustomerBuy = CustomerBuy;
type index_d$t_CustomerBuyConditionOneOf = CustomerBuyConditionOneOf;
type index_d$t_CustomerGet = CustomerGet;
type index_d$t_DeleteDiscountRuleRequest = DeleteDiscountRuleRequest;
type index_d$t_DeleteDiscountRuleResponse = DeleteDiscountRuleResponse;
type index_d$t_DiscountDiscountOneOf = DiscountDiscountOneOf;
type index_d$t_DiscountRuleCreatedEnvelope = DiscountRuleCreatedEnvelope;
type index_d$t_DiscountRuleDeletedEnvelope = DiscountRuleDeletedEnvelope;
type index_d$t_DiscountRuleUpdatedEnvelope = DiscountRuleUpdatedEnvelope;
type index_d$t_DiscountRuleUsageLimitReached = DiscountRuleUsageLimitReached;
type index_d$t_DiscountRulesQueryBuilder = DiscountRulesQueryBuilder;
type index_d$t_DiscountRulesQueryResult = DiscountRulesQueryResult;
type index_d$t_DiscountSettings = DiscountSettings;
type index_d$t_DiscountTrigger = DiscountTrigger;
type index_d$t_DiscountTriggerTriggerOneOf = DiscountTriggerTriggerOneOf;
type index_d$t_Discounts = Discounts;
type index_d$t_GetAppliedDiscountsRequest = GetAppliedDiscountsRequest;
type index_d$t_GetAppliedDiscountsResponse = GetAppliedDiscountsResponse;
type index_d$t_GetDiscountRuleRequest = GetDiscountRuleRequest;
type index_d$t_GetDiscountRuleResponse = GetDiscountRuleResponse;
type index_d$t_GetDiscountRuleResponseNonNullableFields = GetDiscountRuleResponseNonNullableFields;
type index_d$t_ItemQuantityRange = ItemQuantityRange;
type index_d$t_Or = Or;
type index_d$t_QueryDiscountRulesRequest = QueryDiscountRulesRequest;
type index_d$t_QueryDiscountRulesResponse = QueryDiscountRulesResponse;
type index_d$t_QueryDiscountRulesResponseNonNullableFields = QueryDiscountRulesResponseNonNullableFields;
type index_d$t_ScopeScopeItemsOneOf = ScopeScopeItemsOneOf;
type index_d$t_ScopeType = ScopeType;
declare const index_d$t_ScopeType: typeof ScopeType;
type index_d$t_SpecificItemsInfo = SpecificItemsInfo;
type index_d$t_SubtotalRange = SubtotalRange;
type index_d$t_TriggerType = TriggerType;
declare const index_d$t_TriggerType: typeof TriggerType;
type index_d$t_Type = Type;
declare const index_d$t_Type: typeof Type;
type index_d$t_UpdateDiscountRule = UpdateDiscountRule;
type index_d$t_UpdateDiscountRuleRequest = UpdateDiscountRuleRequest;
type index_d$t_UpdateDiscountRuleResponse = UpdateDiscountRuleResponse;
type index_d$t_UpdateDiscountRuleResponseNonNullableFields = UpdateDiscountRuleResponseNonNullableFields;
type index_d$t__publicOnDiscountRuleCreatedType = _publicOnDiscountRuleCreatedType;
type index_d$t__publicOnDiscountRuleDeletedType = _publicOnDiscountRuleDeletedType;
type index_d$t__publicOnDiscountRuleUpdatedType = _publicOnDiscountRuleUpdatedType;
declare const index_d$t_createDiscountRule: typeof createDiscountRule;
declare const index_d$t_deleteDiscountRule: typeof deleteDiscountRule;
declare const index_d$t_getDiscountRule: typeof getDiscountRule;
declare const index_d$t_onDiscountRuleCreated: typeof onDiscountRuleCreated;
declare const index_d$t_onDiscountRuleDeleted: typeof onDiscountRuleDeleted;
declare const index_d$t_onDiscountRuleUpdated: typeof onDiscountRuleUpdated;
declare const index_d$t_queryDiscountRules: typeof queryDiscountRules;
declare const index_d$t_updateDiscountRule: typeof updateDiscountRule;
declare namespace index_d$t {
  export { type ActionEvent$n as ActionEvent, type index_d$t_ActiveTimeInfo as ActiveTimeInfo, type index_d$t_And as And, type AppliedDiscount$8 as AppliedDiscount, type index_d$t_AppliedDiscountRule as AppliedDiscountRule, index_d$t_AppliedSubjectType as AppliedSubjectType, type BaseEventMetadata$e as BaseEventMetadata, type index_d$t_BuyXGetYInfo as BuyXGetYInfo, type index_d$t_CatalogItemFilter as CatalogItemFilter, type CatalogReference$c as CatalogReference, type index_d$t_CreateDiscountRuleRequest as CreateDiscountRuleRequest, type index_d$t_CreateDiscountRuleResponse as CreateDiscountRuleResponse, type index_d$t_CreateDiscountRuleResponseNonNullableFields as CreateDiscountRuleResponseNonNullableFields, type CursorPaging$f as CursorPaging, type Cursors$f as Cursors, type index_d$t_Custom as Custom, type index_d$t_CustomFilter as CustomFilter, type index_d$t_CustomerBuy as CustomerBuy, type index_d$t_CustomerBuyConditionOneOf as CustomerBuyConditionOneOf, type index_d$t_CustomerGet as CustomerGet, type index_d$t_DeleteDiscountRuleRequest as DeleteDiscountRuleRequest, type index_d$t_DeleteDiscountRuleResponse as DeleteDiscountRuleResponse, type Discount$3 as Discount, type index_d$t_DiscountDiscountOneOf as DiscountDiscountOneOf, type DiscountRule$8 as DiscountRule, type index_d$t_DiscountRuleCreatedEnvelope as DiscountRuleCreatedEnvelope, type index_d$t_DiscountRuleDeletedEnvelope as DiscountRuleDeletedEnvelope, type DiscountRuleName$8 as DiscountRuleName, type DiscountRuleNonNullableFields$7 as DiscountRuleNonNullableFields, type index_d$t_DiscountRuleUpdatedEnvelope as DiscountRuleUpdatedEnvelope, type index_d$t_DiscountRuleUsageLimitReached as DiscountRuleUsageLimitReached, type index_d$t_DiscountRulesQueryBuilder as DiscountRulesQueryBuilder, type index_d$t_DiscountRulesQueryResult as DiscountRulesQueryResult, type index_d$t_DiscountSettings as DiscountSettings, type index_d$t_DiscountTrigger as DiscountTrigger, type index_d$t_DiscountTriggerTriggerOneOf as DiscountTriggerTriggerOneOf, DiscountType$8 as DiscountType, type index_d$t_Discounts as Discounts, type DomainEvent$n as DomainEvent, type DomainEventBodyOneOf$n as DomainEventBodyOneOf, type Empty$g as Empty, type EntityCreatedEvent$n as EntityCreatedEvent, type EntityDeletedEvent$n as EntityDeletedEvent, type EntityUpdatedEvent$n as EntityUpdatedEvent, type EventMetadata$e as EventMetadata, type ExtendedFields$c as ExtendedFields, type index_d$t_GetAppliedDiscountsRequest as GetAppliedDiscountsRequest, type index_d$t_GetAppliedDiscountsResponse as GetAppliedDiscountsResponse, type index_d$t_GetDiscountRuleRequest as GetDiscountRuleRequest, type index_d$t_GetDiscountRuleResponse as GetDiscountRuleResponse, type index_d$t_GetDiscountRuleResponseNonNullableFields as GetDiscountRuleResponseNonNullableFields, type IdentificationData$n as IdentificationData, type IdentificationDataIdOneOf$n as IdentificationDataIdOneOf, type index_d$t_ItemQuantityRange as ItemQuantityRange, type LineItem$7 as LineItem, type MessageEnvelope$m as MessageEnvelope, type MultiCurrencyPrice$6 as MultiCurrencyPrice, type index_d$t_Or as Or, type PlatformPaging$2 as PlatformPaging, type PlatformPagingMetadata$2 as PlatformPagingMetadata, type PlatformQuery$2 as PlatformQuery, type PlatformQueryPagingMethodOneOf$2 as PlatformQueryPagingMethodOneOf, type index_d$t_QueryDiscountRulesRequest as QueryDiscountRulesRequest, type index_d$t_QueryDiscountRulesResponse as QueryDiscountRulesResponse, type index_d$t_QueryDiscountRulesResponseNonNullableFields as QueryDiscountRulesResponseNonNullableFields, type RestoreInfo$n as RestoreInfo, type Scope$5 as Scope, type index_d$t_ScopeScopeItemsOneOf as ScopeScopeItemsOneOf, index_d$t_ScopeType as ScopeType, SortOrder$f as SortOrder, type Sorting$f as Sorting, type index_d$t_SpecificItemsInfo as SpecificItemsInfo, Status$5 as Status, type index_d$t_SubtotalRange as SubtotalRange, index_d$t_TriggerType as TriggerType, index_d$t_Type as Type, type index_d$t_UpdateDiscountRule as UpdateDiscountRule, type index_d$t_UpdateDiscountRuleRequest as UpdateDiscountRuleRequest, type index_d$t_UpdateDiscountRuleResponse as UpdateDiscountRuleResponse, type index_d$t_UpdateDiscountRuleResponseNonNullableFields as UpdateDiscountRuleResponseNonNullableFields, WebhookIdentityType$m as WebhookIdentityType, type index_d$t__publicOnDiscountRuleCreatedType as _publicOnDiscountRuleCreatedType, type index_d$t__publicOnDiscountRuleDeletedType as _publicOnDiscountRuleDeletedType, type index_d$t__publicOnDiscountRuleUpdatedType as _publicOnDiscountRuleUpdatedType, index_d$t_createDiscountRule as createDiscountRule, index_d$t_deleteDiscountRule as deleteDiscountRule, index_d$t_getDiscountRule as getDiscountRule, index_d$t_onDiscountRuleCreated as onDiscountRuleCreated, index_d$t_onDiscountRuleDeleted as onDiscountRuleDeleted, index_d$t_onDiscountRuleUpdated as onDiscountRuleUpdated, onDiscountRuleCreated$1 as publicOnDiscountRuleCreated, onDiscountRuleDeleted$1 as publicOnDiscountRuleDeleted, onDiscountRuleUpdated$1 as publicOnDiscountRuleUpdated, index_d$t_queryDiscountRules as queryDiscountRules, index_d$t_updateDiscountRule as updateDiscountRule };
}

interface Invoice {
    /** Invoice ID. */
    _id?: string;
    /** ID of the app that set the invoice. */
    appId?: string;
}
interface ListInvoicesForSingleOrderRequest$1 {
    /** Order ID. */
    orderId?: string;
}
interface ListInvoicesForSingleOrderResponse$1 {
    /** List of invoices. */
    invoices?: Invoice[];
}
interface ListInvoicesForMultipleOrdersRequest$1 {
    /** Order IDs for which to retrieve invoices. */
    orderIds: string[];
}
interface ListInvoicesForMultipleOrdersResponse$1 {
    /** List of order IDs and their associated invoices. */
    invoicesForOrder?: InvoicesForOrder$1[];
}
interface InvoicesForOrder$1 {
    /** Order ID. */
    orderId?: string;
    /** Invoices info. */
    invoicesInfo?: Invoice[];
}
interface GenerateInvoiceRequest$1 {
    /** Order ID. */
    orderId?: string;
}
interface GenerateInvoiceResponse$1 {
    /** Invoice ID. */
    invoiceId?: string;
}
interface BulkGenerateInvoicesRequest$1 {
    /** Order IDs. */
    orderIds?: string[];
}
interface BulkGenerateInvoicesResponse$1 {
    results?: BulkInvoiceResult$1[];
    bulkActionMetadata?: BulkActionMetadata$4;
}
interface BulkInvoiceResult$1 {
    itemMetadata?: ItemMetadata$4;
    item?: InvoiceForOrder$1;
}
interface ItemMetadata$4 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$c;
}
interface ApplicationError$c {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface InvoiceForOrder$1 {
    /** Order ID. */
    orderId?: string;
    /** Invoice ID. */
    invoiceId?: string;
}
interface BulkActionMetadata$4 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface AddInvoiceToOrderRequest$1 {
    /** Order ID. */
    orderId?: string;
    /** Invoice info. */
    invoiceInfo?: Invoice;
}
interface AddInvoiceToOrderResponse$1 {
    /** List of order invoices. */
    orderInvoices?: Invoice[];
}
interface DomainEvent$m extends DomainEventBodyOneOf$m {
    createdEvent?: EntityCreatedEvent$m;
    updatedEvent?: EntityUpdatedEvent$m;
    deletedEvent?: EntityDeletedEvent$m;
    actionEvent?: ActionEvent$m;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$m {
    createdEvent?: EntityCreatedEvent$m;
    updatedEvent?: EntityUpdatedEvent$m;
    deletedEvent?: EntityDeletedEvent$m;
    actionEvent?: ActionEvent$m;
}
interface EntityCreatedEvent$m {
    entity?: string;
}
interface RestoreInfo$m {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$m {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$m {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$m {
    body?: string;
}
interface Empty$f {
}
interface GetOrderInvoiceRequest {
    /** Invoice ID. */
    invoiceId?: string;
}
interface GetOrderInvoiceResponse {
    /** Order ID. */
    orderId?: string;
    /** Invoice info. */
    invoiceInfo?: Invoice;
}
interface GenerateInvoiceWithNumberRequest {
    /** Order ID. */
    orderId?: string;
    invoiceNumber?: string;
    /** Date and time the payment was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    issueDate?: Date | null;
}
interface GenerateInvoiceWithNumberResponse {
    /** Invoice ID. */
    invoiceId?: string;
}
interface MessageEnvelope$l {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$m;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$m extends IdentificationDataIdOneOf$m {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$l;
}
/** @oneof */
interface IdentificationDataIdOneOf$m {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$l {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface InvoiceNonNullableFields {
    _id: string;
    appId: string;
}
interface InvoicesForOrderNonNullableFields {
    orderId: string;
    invoices: InvoiceNonNullableFields[];
    invoicesInfo: InvoiceNonNullableFields[];
}
interface ListInvoicesForMultipleOrdersResponseNonNullableFields {
    invoicesForOrder: InvoicesForOrderNonNullableFields[];
}

declare function listInvoicesForMultipleOrders$1(httpClient: HttpClient): ListInvoicesForMultipleOrdersSignature;
interface ListInvoicesForMultipleOrdersSignature {
    /**
     * Retrieves the IDs of invoices associated with all specified orders.
     *
     *
     * The `listInvoicesForSingleOrder()` function returns a Promise that resolves when the specified order's transaction records are retrieved.
     * @param - Order IDs for which to retrieve invoices.
     */
    (orderIds: string[]): Promise<ListInvoicesForMultipleOrdersResponse$1 & ListInvoicesForMultipleOrdersResponseNonNullableFields>;
}

declare const listInvoicesForMultipleOrders: MaybeContext<BuildRESTFunction<typeof listInvoicesForMultipleOrders$1> & typeof listInvoicesForMultipleOrders$1>;

type index_d$s_GenerateInvoiceWithNumberRequest = GenerateInvoiceWithNumberRequest;
type index_d$s_GenerateInvoiceWithNumberResponse = GenerateInvoiceWithNumberResponse;
type index_d$s_GetOrderInvoiceRequest = GetOrderInvoiceRequest;
type index_d$s_GetOrderInvoiceResponse = GetOrderInvoiceResponse;
type index_d$s_Invoice = Invoice;
type index_d$s_ListInvoicesForMultipleOrdersResponseNonNullableFields = ListInvoicesForMultipleOrdersResponseNonNullableFields;
declare const index_d$s_listInvoicesForMultipleOrders: typeof listInvoicesForMultipleOrders;
declare namespace index_d$s {
  export { type ActionEvent$m as ActionEvent, type AddInvoiceToOrderRequest$1 as AddInvoiceToOrderRequest, type AddInvoiceToOrderResponse$1 as AddInvoiceToOrderResponse, type ApplicationError$c as ApplicationError, type BulkActionMetadata$4 as BulkActionMetadata, type BulkGenerateInvoicesRequest$1 as BulkGenerateInvoicesRequest, type BulkGenerateInvoicesResponse$1 as BulkGenerateInvoicesResponse, type BulkInvoiceResult$1 as BulkInvoiceResult, type DomainEvent$m as DomainEvent, type DomainEventBodyOneOf$m as DomainEventBodyOneOf, type Empty$f as Empty, type EntityCreatedEvent$m as EntityCreatedEvent, type EntityDeletedEvent$m as EntityDeletedEvent, type EntityUpdatedEvent$m as EntityUpdatedEvent, type GenerateInvoiceRequest$1 as GenerateInvoiceRequest, type GenerateInvoiceResponse$1 as GenerateInvoiceResponse, type index_d$s_GenerateInvoiceWithNumberRequest as GenerateInvoiceWithNumberRequest, type index_d$s_GenerateInvoiceWithNumberResponse as GenerateInvoiceWithNumberResponse, type index_d$s_GetOrderInvoiceRequest as GetOrderInvoiceRequest, type index_d$s_GetOrderInvoiceResponse as GetOrderInvoiceResponse, type IdentificationData$m as IdentificationData, type IdentificationDataIdOneOf$m as IdentificationDataIdOneOf, type index_d$s_Invoice as Invoice, type InvoiceForOrder$1 as InvoiceForOrder, type InvoicesForOrder$1 as InvoicesForOrder, type ItemMetadata$4 as ItemMetadata, type ListInvoicesForMultipleOrdersRequest$1 as ListInvoicesForMultipleOrdersRequest, type ListInvoicesForMultipleOrdersResponse$1 as ListInvoicesForMultipleOrdersResponse, type index_d$s_ListInvoicesForMultipleOrdersResponseNonNullableFields as ListInvoicesForMultipleOrdersResponseNonNullableFields, type ListInvoicesForSingleOrderRequest$1 as ListInvoicesForSingleOrderRequest, type ListInvoicesForSingleOrderResponse$1 as ListInvoicesForSingleOrderResponse, type MessageEnvelope$l as MessageEnvelope, type RestoreInfo$m as RestoreInfo, WebhookIdentityType$l as WebhookIdentityType, index_d$s_listInvoicesForMultipleOrders as listInvoicesForMultipleOrders };
}

interface Recommendation {
    /** Recommended items. */
    items?: CatalogReference$b[];
    /** The algorithm used to provide the recommendation. */
    algorithm?: Algorithm;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$b {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface Algorithm {
    /** Algorithm ID defined by the app providing the algorithm. */
    _id?: string;
    /**
     * App ID of the Wix or 3rd-party app providing the algorithm.
     *
     * Wix app IDs are <a href="https://dev.wix.com/api/rest/getting-started/wix-business-solutions#getting-started_wix-business-solutions_about-wix-business-solutions" target="_blank">listed here</a>.
     */
    appId?: string;
}
interface ListAvailableAlgorithmsRequest {
}
interface ListAvailableAlgorithmsResponse {
    /** Algorithms available for use on your Wix site or project. See the method description for more information. */
    availableAlgorithms?: AlgorithmInfo[];
}
interface AlgorithmInfo {
    /** How the algorithm is configured. */
    config?: AlgorithmConfig;
    /**
     * The app ID of the application providing the algorithm.
     *
     * Wix app IDs are <a href="https://dev.wix.com/api/rest/getting-started/wix-business-solutions#getting-started_wix-business-solutions_about-wix-business-solutions" target="_blank">listed here</a>.
     */
    appId?: string;
    /**
     * App IDs of catalogs to which the algorithm can be applied.
     *
     * Wix app IDs are <a href="https://dev.wix.com/api/rest/getting-started/wix-business-solutions#getting-started_wix-business-solutions_about-wix-business-solutions" target="_blank">listed here</a>.
     */
    catalogAppIds?: string[];
}
interface AlgorithmConfig {
    /** Algorithm name. This value is not translatable. */
    name?: string;
    /** Algorithm description. This describes how the algorithm works and if it has any limitations regarding site content, number of items in the catalog, site traffic, and so on. This value is not translatable. */
    description?: string;
    /** A supplemental `description`. It can be used to help break up and organize information. You can, for example, display this information as a tooltip or as an additional section that is collapsed by default. */
    additionalInfo?: string | null;
    /**
     * Algorithms may have the following types:
     * * `RELATED_ITEMS` - This type of algorithm provides recommendations based on 1 or more other provided items. For example, when an item is added to a cart, the algorithm can suggest other items frequently bought together with that item.
     * * `GLOBAL` - This type of algorithm provides general recommendations based on site or project statistics. For example, bestsellers or new arrivals.
     */
    algorithmType?: AlgorithmType;
    /** Algorithm ID. This must be unique for a specific app but does not have to be unique across all apps on the site or in the project. */
    algorithmId?: string;
}
declare enum AlgorithmType {
    UNSPECIFIED = "UNSPECIFIED",
    RELATED_ITEMS = "RELATED_ITEMS",
    GLOBAL = "GLOBAL"
}
interface GetRecommendationRequest {
    /** The set of items for which to get recommendations. Required if the `algorithmType` is `RELATED_ITEMS`. */
    items?: CatalogReference$b[];
    /**
     * A list of algorithms checked in a specific order determined by their `appID` and their position in the `algorithms` array.
     * See the method description for more information.
     *
     * If no algorithm is able to return at least `minimumRecommendedItems` items, an empty array is returned.
     */
    algorithms: Algorithm[];
    /**
     * The minimum number of items that must be recommended by the algorithm for those items to be returned in the response.
     *
     * Max: `100`
     */
    minimumRecommendedItems?: number;
}
interface GetRecommendationResponse {
    /** An object containing a list of items recommended by 1 of the specified algorithms. The recommendation is empty if none of the specified algorithms recommended enough items. */
    recommendation?: Recommendation;
}
interface ItemAppIdNotSupportedByProvider {
    /** Items with an App ID not supported by the provider. Supported App IDs can be found in the provider config in the Dev Center. */
    items?: CatalogReference$b[];
    /** Algorithms that don't support the requested items. */
    algorithms?: Algorithm[];
}
interface RecommendationAlgorithmNotSupported {
    /** Algorithms not supported by the provider. */
    unsupportedAlgorithms?: Algorithm[];
}
interface AlgorithmConfigNonNullableFields {
    name: string;
    description: string;
    algorithmType: AlgorithmType;
    algorithmId: string;
}
interface AlgorithmInfoNonNullableFields {
    config?: AlgorithmConfigNonNullableFields;
    appId: string;
    catalogAppIds: string[];
}
interface ListAvailableAlgorithmsResponseNonNullableFields {
    availableAlgorithms: AlgorithmInfoNonNullableFields[];
}
interface CatalogReferenceNonNullableFields$8 {
    catalogItemId: string;
    appId: string;
}
interface AlgorithmNonNullableFields {
    _id: string;
    appId: string;
}
interface RecommendationNonNullableFields {
    items: CatalogReferenceNonNullableFields$8[];
    algorithm?: AlgorithmNonNullableFields;
}
interface GetRecommendationResponseNonNullableFields {
    recommendation?: RecommendationNonNullableFields;
}
interface GetRecommendationOptions {
    /** The set of items for which to get recommendations. Required if the `algorithmType` is `RELATED_ITEMS`. */
    items?: CatalogReference$b[];
    /**
     * The minimum number of items that must be recommended by the algorithm for those items to be returned in the response.
     *
     * Max: `100`
     */
    minimumRecommendedItems?: number;
}

declare function listAvailableAlgorithms$1(httpClient: HttpClient): ListAvailableAlgorithmsSignature;
interface ListAvailableAlgorithmsSignature {
    /**
     * Returns a list of recommendation algorithms that can be used on your Wix site or project. These algorithms can be used with [`getRecommendation()`](#getRecommendation) to provide item recommendations to the customer.
     *
     * Algorithms are run by the apps that provide them, and can only be used on catalogs they support. Apps may provide algorithms for use with their own catalogs and/or catalogs from other apps.
     *
     * The app which provides an algorithm is referenced by that algorithm’s `appId`. The apps whose catalogs are supported by an algorithm are referenced by the IDs in that algorithm’s `catalogAppIds` array.
     *
     *
     * For an algorithm to be considered “Available” and returned in this method’s response, the algorithm must meet the following conditions:
     * 1. The algorithm’s `appId` must match the ID of an installed Wix app.
     * 2. At least 1 of the IDs in `catalogAppIds` must match the ID of an installed Wix app.
     *
     * Wix app IDs are [listed here](https://dev.wix.com/api/rest/getting-started/wix-business-solutions#getting-started_wix-business-solutions_about-wix-business-solutions).
     */
    (): Promise<ListAvailableAlgorithmsResponse & ListAvailableAlgorithmsResponseNonNullableFields>;
}
declare function getRecommendation$1(httpClient: HttpClient): GetRecommendationSignature;
interface GetRecommendationSignature {
    /**
     * Returns a recommendation object containing a list of items to recommend to the customer.
     *
     * `getRecommendation()` determines which items to recommend based on the given recommendation algorithms.
     *
     * `getRecommendation()` doesn’t run the algorithms. It calls the installed apps that provide them.
     *
     * Apps may provide algorithms for use with their own catalogs, or for use with catalogs from other apps.
     * For example, Wix Stores provides algorithms that can only be used on its own catalogs.
     * To run an algorithm, the app providing it must be installed, and an app providing a supported catalog must be installed.
     * For more information and to see which algorithms are available on your site or project, call [`listAvailableAlgorithms()`](#listavailablealgorithms).
     *
     * `getRecommendation()` operates as follows:
     * 1. `getRecommendation()` receives as input a list of algorithms as an array. These algorithms can be provided by different apps and can apply to different catalogs.
     * 2. `getRecommendation()` calls the app that corresponds to the `appId` of the first algorithm in the list of algorithms. It passes that algorithm’s ID and the IDs of any subsequent algorithms in the array for the same app.
     * 3. The app runs the algorithms.
     * 4. `getRecommendation()` returns items recommendations from the first algorithm (according to its position in the `algorithms` array) that meets the minimum number of recommendations. At that point `getRecommendation()` stops calling other apps.
     * 5. If none of the algorithms run by the first app meet the minimum recommended items, `getRecommendation()` finds the next algorithm in the array with a new `appId` (an ID of an app that has not yet been called), and repeats the process.
     * 6. If no algorithms in the `algorithms` array recommend at least the minimum recommended items, `getRecommendation()` returns an empty array.
     * @param - A list of algorithms checked in a specific order determined by their `appID` and their position in the `algorithms` array.
     * See the method description for more information.
     *
     * If no algorithm is able to return at least `minimumRecommendedItems` items, an empty array is returned.
     * @param - Get recommendation options.
     */
    (algorithms: Algorithm[], options?: GetRecommendationOptions | undefined): Promise<GetRecommendationResponse & GetRecommendationResponseNonNullableFields>;
}

declare const listAvailableAlgorithms: MaybeContext<BuildRESTFunction<typeof listAvailableAlgorithms$1> & typeof listAvailableAlgorithms$1>;
declare const getRecommendation: MaybeContext<BuildRESTFunction<typeof getRecommendation$1> & typeof getRecommendation$1>;

type index_d$r_Algorithm = Algorithm;
type index_d$r_AlgorithmConfig = AlgorithmConfig;
type index_d$r_AlgorithmInfo = AlgorithmInfo;
type index_d$r_AlgorithmType = AlgorithmType;
declare const index_d$r_AlgorithmType: typeof AlgorithmType;
type index_d$r_GetRecommendationOptions = GetRecommendationOptions;
type index_d$r_GetRecommendationRequest = GetRecommendationRequest;
type index_d$r_GetRecommendationResponse = GetRecommendationResponse;
type index_d$r_GetRecommendationResponseNonNullableFields = GetRecommendationResponseNonNullableFields;
type index_d$r_ItemAppIdNotSupportedByProvider = ItemAppIdNotSupportedByProvider;
type index_d$r_ListAvailableAlgorithmsRequest = ListAvailableAlgorithmsRequest;
type index_d$r_ListAvailableAlgorithmsResponse = ListAvailableAlgorithmsResponse;
type index_d$r_ListAvailableAlgorithmsResponseNonNullableFields = ListAvailableAlgorithmsResponseNonNullableFields;
type index_d$r_Recommendation = Recommendation;
type index_d$r_RecommendationAlgorithmNotSupported = RecommendationAlgorithmNotSupported;
declare const index_d$r_getRecommendation: typeof getRecommendation;
declare const index_d$r_listAvailableAlgorithms: typeof listAvailableAlgorithms;
declare namespace index_d$r {
  export { type index_d$r_Algorithm as Algorithm, type index_d$r_AlgorithmConfig as AlgorithmConfig, type index_d$r_AlgorithmInfo as AlgorithmInfo, index_d$r_AlgorithmType as AlgorithmType, type CatalogReference$b as CatalogReference, type index_d$r_GetRecommendationOptions as GetRecommendationOptions, type index_d$r_GetRecommendationRequest as GetRecommendationRequest, type index_d$r_GetRecommendationResponse as GetRecommendationResponse, type index_d$r_GetRecommendationResponseNonNullableFields as GetRecommendationResponseNonNullableFields, type index_d$r_ItemAppIdNotSupportedByProvider as ItemAppIdNotSupportedByProvider, type index_d$r_ListAvailableAlgorithmsRequest as ListAvailableAlgorithmsRequest, type index_d$r_ListAvailableAlgorithmsResponse as ListAvailableAlgorithmsResponse, type index_d$r_ListAvailableAlgorithmsResponseNonNullableFields as ListAvailableAlgorithmsResponseNonNullableFields, type index_d$r_Recommendation as Recommendation, type index_d$r_RecommendationAlgorithmNotSupported as RecommendationAlgorithmNotSupported, index_d$r_getRecommendation as getRecommendation, index_d$r_listAvailableAlgorithms as listAvailableAlgorithms };
}

/**
 * A SubscriptionContract is a ...
 * You can ...
 * Read more about SubscriptionContracts
 * in this [article](<LINK_TO_KB_ARTICLE>).
 */
interface SubscriptionContract {
    /**
     * SubscriptionContract ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the SubscriptionContract is updated.
     * To prevent conflicting changes, the current revision must be passed when updating the SubscriptionContract.
     *
     * Ignored when creating a SubscriptionOrderContract.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the subscription contract was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the subscription contract was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Subscription option description. For example, `"1kg of selected coffee, once a month"`. */
    description?: string | null;
    /** Subscription detailed information. */
    subscriptionSettings?: V1SubscriptionSettings$1;
    /**
     * Order line items.
     * @readonly
     */
    lineItems?: OrderLineItem$2[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo$9;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$9;
    /** Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format. */
    currency?: string | null;
    /**
     * Whether tax is included in line item prices.
     *
     * Default: `false`
     */
    taxIncludedInPrices?: boolean;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary$7;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact$6;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: ShippingInformation$5;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$7[];
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo$4;
    /** Custom fields. */
    customFields?: CustomField$5[];
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact$6;
    /**
     * Custom field data for the subscription contract object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$b;
    /** Subscription option title. For example, `"Monthly coffee Subscription"`. */
    title?: string | null;
}
interface V1SubscriptionSettings$1 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$8;
    /** Interval of recurring payment. */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
    /** Whether to allow the customer to cancel the subscription. */
    enableCustomerCancellation?: boolean;
}
declare enum SubscriptionFrequency$8 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface OrderLineItem$2 {
    /** Line item ID. */
    _id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName$6;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference$a;
    /** Line item quantity. */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price$5;
    /** Line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine$6[];
    /** Line item image. */
    image?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties$8;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$7;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
     */
    fulfillerId?: string | null;
    /**
     * Number of items that were refunded.
     * @readonly
     */
    refundQuantity?: number | null;
    /**
     * Number of items restocked.
     * @readonly
     */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price$5;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price$5;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$5;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$5;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` - Partial payment for the given item to be paid upfront during the checkout. Eligible for catalog items with type `DEPOSIT_ONLINE` only.
     */
    paymentOption?: PaymentOptionType$7;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails$7;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo$2;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile$3;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo$3;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$6;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price$5;
}
interface ProductName$6 {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$a {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface Price$5 {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface DescriptionLine$6 extends DescriptionLineValueOneOf$6, DescriptionLineDescriptionLineValueOneOf$6 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$6;
    /** Description line color value. */
    colorInfo?: Color$6;
    /** Description line name. */
    name?: DescriptionLineName$6;
}
/** @oneof */
interface DescriptionLineValueOneOf$6 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$6;
    /** Description line color value. */
    colorInfo?: Color$6;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$6 {
}
interface DescriptionLineName$6 {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$6 {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$6 {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$6 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface PhysicalProperties$8 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$7 extends ItemTypeItemTypeDataOneOf$7 {
    /** Preset item type. */
    preset?: ItemTypeItemType$7;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$7 {
    /** Preset item type. */
    preset?: ItemTypeItemType$7;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$7 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$7 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ItemTaxFullDetails$7 {
    /** Taxable amount of this line item. */
    taxableAmount?: Price$5;
    /** Tax rate percentage, as a decimal numeral between 0 and 1. For example, `"0.13"`. */
    taxRate?: string;
    /** The calculated tax, based on the `taxableAmount` and `taxRate`. */
    totalTax?: Price$5;
}
interface LineItemTaxInfo$2 {
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    taxAmount?: Price$5;
    /** Amount for which tax is calculated. */
    taxableAmount?: Price$5;
    /** Tax rate %, as a decimal point. */
    taxRate?: string | null;
    /**
     * Tax group ID.
     * Learn more about [Tax Groups](https://dev.wix.com/docs/rest/business-management/payments/tax/tax-groups/introduction).
     */
    taxGroupId?: string | null;
    /** Indicates whether the price already includes tax. */
    taxIncludedInPrice?: boolean;
    /** Tax information for a line item. */
    taxBreakdown?: LineItemTaxBreakdown$2[];
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface LineItemTaxBreakdown$2 {
    /** Jurisdiction that taxes were calculated for. For example, "New York", or "Quebec". */
    jurisdiction?: string | null;
    /** Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000. */
    rate?: string | null;
    /** Amount of tax calculated for this line item. */
    taxAmount?: Price$5;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** Type of jurisdiction that taxes were calculated for. */
    jurisdictionType?: JurisdictionType$7;
    /** Non-taxable amount of the line item price. */
    nonTaxableAmount?: Price$5;
    /** Taxable amount of the line item price. */
    taxableAmount?: Price$5;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$7 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DigitalFile$3 {
    /** ID of the secure file in media. */
    fileId?: string;
    /** Link will exist after the digital links have been generated on the order. */
    link?: string | null;
    /**
     * Link expiration time and date.
     * @readonly
     */
    expirationDate?: Date | null;
}
interface SubscriptionInfo$3 {
    /** Subscription ID. */
    _id?: string | null;
    /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */
    cycleNumber?: number;
    /** Subscription option title. For example, `"Monthly coffee Subscription"`. */
    subscriptionOptionTitle?: string;
    /** Subscription option description. For example, `"1kg of selected coffee, once a month"`. */
    subscriptionOptionDescription?: string | null;
    /** Subscription detailed information. */
    subscriptionSettings?: SubscriptionSettings$8;
}
interface SubscriptionSettings$8 {
    /** Frequency of recurring payment. */
    frequency?: V2SubscriptionFrequency;
    /** Interval of recurring payment. */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum V2SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface PriceDescription$6 {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface LocationAndQuantity$2 {
    /** Location id in the associated owner app. */
    _id?: string;
    /** Location owner app, if not provided then the site business info locations will be used. */
    appId?: string | null;
    /** Quantity for specific location. */
    quantity?: number;
}
interface TaxableAddress$7 extends TaxableAddressTaxableAddressDataOneOf$7 {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType$7;
}
/** @oneof */
interface TaxableAddressTaxableAddressDataOneOf$7 {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType$7;
}
declare enum TaxableAddressType$7 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Buyer Info */
interface BuyerInfo$9 extends BuyerInfoIdOneOf$6 {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
    /** Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction). */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$6 {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
}
declare enum WeightUnit$9 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface PriceSummary$7 {
    /** Subtotal of all the line items, before discounts and before tax. */
    subtotal?: Price$5;
    /** Total shipping price, before discounts and before tax. */
    shipping?: Price$5;
    /** Total tax on this order. */
    tax?: Price$5;
    /** Total calculated discount value. */
    discount?: Price$5;
    /** Order’s total price after discounts and tax. */
    total?: Price$5;
    /** Total price of additional fees before tax. */
    totalAdditionalFees?: Price$5;
}
/** Billing Info and shipping details */
interface AddressWithContact$6 {
    /** Address. */
    address?: Address$b;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$8;
}
/** Physical address */
interface Address$b {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$a;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$a {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation$a {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
/** Full contact details for an address */
interface FullAddressContactDetails$8 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$9;
}
interface VatId$9 {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$9;
}
/** tax info types */
declare enum VatType$9 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface ShippingInformation$5 {
    /** App Def Id of external provider which was a source of shipping info */
    carrierId?: string | null;
    /** Unique code (or ID) of selected shipping option. For example, `"usps_std_overnight"``. */
    code?: string | null;
    /**
     * Shipping option title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"` or `"First-Class Package International"`.
     */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics$8;
    /** Shipping costs. */
    cost?: ShippingPrice$7;
    /** Shipping region. */
    region?: ShippingRegion$7;
}
interface DeliveryLogistics$8 extends DeliveryLogisticsAddressOneOf$1 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$6;
    /** Pickup details. */
    pickupDetails?: PickupDetails$9;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /**
     * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Expected delivery time. */
    deliveryTimeSlot?: DeliveryTimeSlot$8;
}
/** @oneof */
interface DeliveryLogisticsAddressOneOf$1 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$6;
    /** Pickup details. */
    pickupDetails?: PickupDetails$9;
}
interface PickupDetails$9 {
    /** Pickup address. */
    address?: PickupAddress$4;
    /** Pickup method */
    pickupMethod?: PickupMethod$8;
}
/** Physical address */
interface PickupAddress$4 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address object, with number, name, and apartment number in separate fields. */
    streetAddress?: StreetAddress$a;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
declare enum PickupMethod$8 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$8 {
    /** Delivery slot starting time. */
    from?: Date | null;
    /** Delivery slot ending time. */
    to?: Date | null;
}
interface ShippingPrice$7 {
    /** Shipping price for display purposes. */
    price?: Price$5;
    /**
     * Total price of shipping after discounts (when relevant), and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$5;
    /**
     * Shipping price after all discounts (if any exist), and after tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$5;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$7;
    /**
     * Shipping discount before tax.
     * @readonly
     */
    discount?: Price$5;
}
interface ShippingRegion$7 {
    /** Name of shipping region. For example, `"Metropolitan London"`, or `"Outer Melbourne suburbs"`. */
    name?: string | null;
}
interface OrderTaxInfo$2 {
    /** Calculated tax, added from line items. */
    totalTax?: Price$5;
    /** The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate. */
    taxBreakdown?: OrderTaxBreakdown$2[];
    /**
     * Whether the draft order is exempt from tax calculations.
     *
     * Default: `false`
     * @readonly
     */
    taxExempt?: boolean | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface OrderTaxBreakdown$2 {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionType?: JurisdictionType$7;
    /** The rate at which this tax detail was calculated. */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: Price$5;
}
interface AppliedDiscount$7 extends AppliedDiscountDiscountSourceOneOf$7 {
    /** Applied coupon info. */
    coupon?: Coupon$7;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$7;
    /** Automatic Discount */
    discountRule?: DiscountRule$7;
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to specific items.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: DiscountType$7;
    /**
     * IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @deprecated IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemIds?: string[];
    /** Discount id. */
    _id?: string | null;
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$7 {
    /** Applied coupon info. */
    coupon?: Coupon$7;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$7;
    /** Automatic Discount */
    discountRule?: DiscountRule$7;
}
declare enum DiscountType$7 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$7 {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** Coupon value. */
    amount?: Price$5;
}
interface MerchantDiscount$7 extends MerchantDiscountMerchantDiscountReasonOneOf$2 {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason$2;
    /** Discount description as free text (optional). */
    description?: string | null;
    /** Discount amount. */
    amount?: Price$5;
}
/** @oneof */
interface MerchantDiscountMerchantDiscountReasonOneOf$2 {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason$2;
    /** Discount description as free text (optional). */
    description?: string | null;
}
declare enum DiscountReason$2 {
    UNSPECIFIED = "UNSPECIFIED",
    EXCHANGED_ITEMS = "EXCHANGED_ITEMS"
}
interface DiscountRule$7 {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$7;
    /** Discount value. */
    amount?: Price$5;
}
interface DiscountRuleName$7 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface LineItemDiscount$7 {
    /** ID of line item the discount applies to. */
    _id?: string;
    /** Total discount for this line item. */
    totalDiscount?: Price$5;
}
interface ChannelInfo$4 {
    /** Sales channel that submitted the order. */
    type?: ChannelType$7;
    /** Reference to an order ID from an external system. */
    externalOrderId?: string | null;
    /** URL to the order in the external system. */
    externalOrderUrl?: string | null;
}
declare enum ChannelType$7 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CustomField$5 {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
interface ExtendedFields$b {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateSubscriptionContractRequest {
    /** SubscriptionContract to be created. */
    subscriptionContract?: SubscriptionContract;
}
interface CreateSubscriptionContractResponse {
    /** The created SubscriptionContract. */
    subscriptionContract?: SubscriptionContract;
}
interface GetSubscriptionContractRequest {
    /** ID of the SubscriptionContract to retrieve. */
    subscriptionContractId: string;
}
interface GetSubscriptionContractResponse {
    /** The requested SubscriptionContract. */
    subscriptionContract?: SubscriptionContract;
}
interface UpdateSubscriptionContractRequest {
    /** SubscriptionContract to be updated, may be partial. */
    subscriptionContract?: SubscriptionContract;
}
interface UpdateSubscriptionContractResponse {
    /** Updated SubscriptionContract. */
    subscriptionContract?: SubscriptionContract;
}
interface QuerySubscriptionContractsRequest {
    /** WQL expression. */
    query?: CursorQuery$8;
}
interface CursorQuery$8 extends CursorQueryPagingMethodOneOf$8 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$e;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     * Learn more about the [filter format](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * Learn more about the [sort format](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$e[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$8 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$e;
}
interface Sorting$e {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$e;
}
declare enum SortOrder$e {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$e {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QuerySubscriptionContractsResponse {
    /** List of SubscriptionContracts. */
    subscriptionContracts?: SubscriptionContract[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$b;
}
interface CursorPagingMetadata$b {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$e;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$e {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface DomainEvent$l extends DomainEventBodyOneOf$l {
    createdEvent?: EntityCreatedEvent$l;
    updatedEvent?: EntityUpdatedEvent$l;
    deletedEvent?: EntityDeletedEvent$l;
    actionEvent?: ActionEvent$l;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$l {
    createdEvent?: EntityCreatedEvent$l;
    updatedEvent?: EntityUpdatedEvent$l;
    deletedEvent?: EntityDeletedEvent$l;
    actionEvent?: ActionEvent$l;
}
interface EntityCreatedEvent$l {
    entity?: string;
}
interface RestoreInfo$l {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$l {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$l {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$l {
    body?: string;
}
interface Empty$e {
}
interface MessageEnvelope$k {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$l;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$l extends IdentificationDataIdOneOf$l {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$k;
}
/** @oneof */
interface IdentificationDataIdOneOf$l {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$k {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface V1SubscriptionSettingsNonNullableFields {
    frequency: SubscriptionFrequency$8;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
}
interface ProductNameNonNullableFields$6 {
    original: string;
}
interface CatalogReferenceNonNullableFields$7 {
    catalogItemId: string;
    appId: string;
}
interface PriceNonNullableFields$5 {
    amount: string;
    formattedAmount: string;
}
interface PlainTextValueNonNullableFields$6 {
    original: string;
}
interface ColorNonNullableFields$6 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$6 {
    original: string;
}
interface DescriptionLineNonNullableFields$6 {
    plainText?: PlainTextValueNonNullableFields$6;
    colorInfo?: ColorNonNullableFields$6;
    plainTextValue?: PlainTextValueNonNullableFields$6;
    color: string;
    name?: DescriptionLineNameNonNullableFields$6;
    lineType: DescriptionLineType$6;
}
interface PhysicalPropertiesNonNullableFields$6 {
    shippable: boolean;
}
interface ItemTypeNonNullableFields$6 {
    preset: ItemTypeItemType$7;
    custom: string;
}
interface ItemTaxFullDetailsNonNullableFields$6 {
    taxableAmount?: PriceNonNullableFields$5;
    taxRate: string;
    totalTax?: PriceNonNullableFields$5;
}
interface LineItemTaxBreakdownNonNullableFields$2 {
    taxAmount?: PriceNonNullableFields$5;
    jurisdictionType: JurisdictionType$7;
    nonTaxableAmount?: PriceNonNullableFields$5;
    taxableAmount?: PriceNonNullableFields$5;
}
interface LineItemTaxInfoNonNullableFields$2 {
    taxAmount?: PriceNonNullableFields$5;
    taxableAmount?: PriceNonNullableFields$5;
    taxIncludedInPrice: boolean;
    taxBreakdown: LineItemTaxBreakdownNonNullableFields$2[];
}
interface DigitalFileNonNullableFields$2 {
    fileId: string;
}
interface SubscriptionSettingsNonNullableFields$6 {
    frequency: V2SubscriptionFrequency;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
}
interface SubscriptionInfoNonNullableFields$2 {
    cycleNumber: number;
    subscriptionOptionTitle: string;
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$6;
}
interface PriceDescriptionNonNullableFields$6 {
    original: string;
}
interface LocationAndQuantityNonNullableFields$2 {
    _id: string;
    quantity: number;
}
interface TaxableAddressNonNullableFields$6 {
    addressType: TaxableAddressType$7;
}
interface OrderLineItemNonNullableFields$2 {
    _id: string;
    productName?: ProductNameNonNullableFields$6;
    catalogReference?: CatalogReferenceNonNullableFields$7;
    quantity: number;
    totalDiscount?: PriceNonNullableFields$5;
    descriptionLines: DescriptionLineNonNullableFields$6[];
    image: string;
    physicalProperties?: PhysicalPropertiesNonNullableFields$6;
    itemType?: ItemTypeNonNullableFields$6;
    price?: PriceNonNullableFields$5;
    priceBeforeDiscounts?: PriceNonNullableFields$5;
    totalPriceBeforeTax?: PriceNonNullableFields$5;
    totalPriceAfterTax?: PriceNonNullableFields$5;
    paymentOption: PaymentOptionType$7;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$6;
    taxInfo?: LineItemTaxInfoNonNullableFields$2;
    digitalFile?: DigitalFileNonNullableFields$2;
    subscriptionInfo?: SubscriptionInfoNonNullableFields$2;
    priceDescription?: PriceDescriptionNonNullableFields$6;
    depositAmount?: PriceNonNullableFields$5;
    locations: LocationAndQuantityNonNullableFields$2[];
    lineItemPrice?: PriceNonNullableFields$5;
    taxableAddress?: TaxableAddressNonNullableFields$6;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
}
interface BuyerInfoNonNullableFields$5 {
    visitorId: string;
    memberId: string;
}
interface PriceSummaryNonNullableFields$6 {
    subtotal?: PriceNonNullableFields$5;
    shipping?: PriceNonNullableFields$5;
    tax?: PriceNonNullableFields$5;
    discount?: PriceNonNullableFields$5;
    totalPrice?: PriceNonNullableFields$5;
    total?: PriceNonNullableFields$5;
    totalWithGiftCard?: PriceNonNullableFields$5;
    totalWithoutGiftCard?: PriceNonNullableFields$5;
    totalAdditionalFees?: PriceNonNullableFields$5;
}
interface StreetAddressNonNullableFields$9 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$8 {
    streetAddress?: StreetAddressNonNullableFields$9;
}
interface VatIdNonNullableFields$5 {
    _id: string;
    type: VatType$9;
}
interface FullAddressContactDetailsNonNullableFields$6 {
    vatId?: VatIdNonNullableFields$5;
}
interface AddressWithContactNonNullableFields$5 {
    address?: AddressNonNullableFields$8;
    contactDetails?: FullAddressContactDetailsNonNullableFields$6;
}
interface PickupAddressNonNullableFields$2 {
    streetAddress?: StreetAddressNonNullableFields$9;
}
interface PickupDetailsNonNullableFields$7 {
    address?: PickupAddressNonNullableFields$2;
    pickupMethod: PickupMethod$8;
}
interface DeliveryLogisticsNonNullableFields$7 {
    shippingDestination?: AddressWithContactNonNullableFields$5;
    pickupDetails?: PickupDetailsNonNullableFields$7;
}
interface ShippingPriceNonNullableFields$6 {
    price?: PriceNonNullableFields$5;
    totalPriceBeforeTax?: PriceNonNullableFields$5;
    totalPriceAfterTax?: PriceNonNullableFields$5;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$6;
    discount?: PriceNonNullableFields$5;
}
interface ShippingInformationNonNullableFields$5 {
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$7;
    cost?: ShippingPriceNonNullableFields$6;
}
interface OrderTaxBreakdownNonNullableFields$2 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionType: JurisdictionType$7;
    rate: string;
    aggregatedTaxAmount?: PriceNonNullableFields$5;
    aggregatedTaxableAmount?: PriceNonNullableFields$5;
}
interface OrderTaxInfoNonNullableFields$2 {
    totalTax?: PriceNonNullableFields$5;
    taxBreakdown: OrderTaxBreakdownNonNullableFields$2[];
}
interface CouponNonNullableFields$6 {
    _id: string;
    code: string;
    name: string;
    amount?: PriceNonNullableFields$5;
}
interface MerchantDiscountNonNullableFields$6 {
    discountReason: DiscountReason$2;
    amount?: PriceNonNullableFields$5;
}
interface DiscountRuleNameNonNullableFields$6 {
    original: string;
}
interface DiscountRuleNonNullableFields$6 {
    _id: string;
    name?: DiscountRuleNameNonNullableFields$6;
    amount?: PriceNonNullableFields$5;
}
interface LineItemDiscountNonNullableFields$6 {
    _id: string;
    totalDiscount?: PriceNonNullableFields$5;
}
interface AppliedDiscountNonNullableFields$6 {
    coupon?: CouponNonNullableFields$6;
    merchantDiscount?: MerchantDiscountNonNullableFields$6;
    discountRule?: DiscountRuleNonNullableFields$6;
    discountType: DiscountType$7;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$6[];
}
interface ChannelInfoNonNullableFields$2 {
    type: ChannelType$7;
}
interface CustomFieldNonNullableFields$3 {
    title: string;
}
interface SubscriptionContractNonNullableFields {
    subscriptionSettings?: V1SubscriptionSettingsNonNullableFields;
    lineItems: OrderLineItemNonNullableFields$2[];
    buyerInfo?: BuyerInfoNonNullableFields$5;
    weightUnit: WeightUnit$9;
    taxIncludedInPrices: boolean;
    priceSummary?: PriceSummaryNonNullableFields$6;
    billingInfo?: AddressWithContactNonNullableFields$5;
    shippingInfo?: ShippingInformationNonNullableFields$5;
    taxInfo?: OrderTaxInfoNonNullableFields$2;
    appliedDiscounts: AppliedDiscountNonNullableFields$6[];
    channelInfo?: ChannelInfoNonNullableFields$2;
    customFields: CustomFieldNonNullableFields$3[];
    recipientInfo?: AddressWithContactNonNullableFields$5;
}
interface GetSubscriptionContractResponseNonNullableFields {
    subscriptionContract?: SubscriptionContractNonNullableFields;
}
interface QuerySubscriptionContractsResponseNonNullableFields {
    subscriptionContracts: SubscriptionContractNonNullableFields[];
}
interface BaseEventMetadata$d {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$l;
}
interface EventMetadata$d extends BaseEventMetadata$d {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface SubscriptionContractCreatedEnvelope {
    entity: SubscriptionContract;
    metadata: EventMetadata$d;
}
interface SubscriptionContractUpdatedEnvelope {
    entity: SubscriptionContract;
    metadata: EventMetadata$d;
}
interface SubscriptionContractDeletedEnvelope {
    metadata: EventMetadata$d;
}
interface QueryCursorResult$c {
    cursors: Cursors$e;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface SubscriptionContractsQueryResult extends QueryCursorResult$c {
    items: SubscriptionContract[];
    query: SubscriptionContractsQueryBuilder;
    next: () => Promise<SubscriptionContractsQueryResult>;
    prev: () => Promise<SubscriptionContractsQueryResult>;
}
interface SubscriptionContractsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'buyerInfo.contactId', value: any) => SubscriptionContractsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'buyerInfo.contactId', value: any) => SubscriptionContractsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'buyerInfo.contactId', value: string) => SubscriptionContractsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'buyerInfo.contactId', value: any[]) => SubscriptionContractsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'buyerInfo.contactId', value: any) => SubscriptionContractsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'buyerInfo.contactId', value: boolean) => SubscriptionContractsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id' | 'buyerInfo.contactId'>) => SubscriptionContractsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id' | 'buyerInfo.contactId'>) => SubscriptionContractsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => SubscriptionContractsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => SubscriptionContractsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<SubscriptionContractsQueryResult>;
}

declare function getSubscriptionContract$1(httpClient: HttpClient): GetSubscriptionContractSignature;
interface GetSubscriptionContractSignature {
    /**
     * Retrieves a SubscriptionContract.
     * @param - ID of the SubscriptionContract to retrieve.
     * @returns The requested SubscriptionContract.
     */
    (subscriptionContractId: string): Promise<SubscriptionContract & SubscriptionContractNonNullableFields>;
}
declare function querySubscriptionContracts$1(httpClient: HttpClient): QuerySubscriptionContractsSignature;
interface QuerySubscriptionContractsSignature {
    /**
     * Retrieves a list of SubscriptionContracts, given the provided [paging, filtering, and sorting][1].
     *
     * Up to 300 SubscriptionContracts can be returned per request.
     *
     * To learn how to query SubscriptionContracts, see [API Query Language][2].
     *
     * [1]: https://dev.wix.com/api/rest/getting-started/sorting-and-paging
     * [2]: https://dev.wix.com/api/rest/getting-started/api-query-language
     */
    (): SubscriptionContractsQueryBuilder;
}
declare const onSubscriptionContractCreated$1: EventDefinition<SubscriptionContractCreatedEnvelope, "wix.ecom.subscription_contracts.v1.subscription_contract_created">;
declare const onSubscriptionContractUpdated$1: EventDefinition<SubscriptionContractUpdatedEnvelope, "wix.ecom.subscription_contracts.v1.subscription_contract_updated">;
declare const onSubscriptionContractDeleted$1: EventDefinition<SubscriptionContractDeletedEnvelope, "wix.ecom.subscription_contracts.v1.subscription_contract_deleted">;

declare function createEventModule$d<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const getSubscriptionContract: MaybeContext<BuildRESTFunction<typeof getSubscriptionContract$1> & typeof getSubscriptionContract$1>;
declare const querySubscriptionContracts: MaybeContext<BuildRESTFunction<typeof querySubscriptionContracts$1> & typeof querySubscriptionContracts$1>;

type _publicOnSubscriptionContractCreatedType = typeof onSubscriptionContractCreated$1;
/** */
declare const onSubscriptionContractCreated: ReturnType<typeof createEventModule$d<_publicOnSubscriptionContractCreatedType>>;

type _publicOnSubscriptionContractUpdatedType = typeof onSubscriptionContractUpdated$1;
/** */
declare const onSubscriptionContractUpdated: ReturnType<typeof createEventModule$d<_publicOnSubscriptionContractUpdatedType>>;

type _publicOnSubscriptionContractDeletedType = typeof onSubscriptionContractDeleted$1;
/** */
declare const onSubscriptionContractDeleted: ReturnType<typeof createEventModule$d<_publicOnSubscriptionContractDeletedType>>;

type index_d$q_CreateSubscriptionContractRequest = CreateSubscriptionContractRequest;
type index_d$q_CreateSubscriptionContractResponse = CreateSubscriptionContractResponse;
type index_d$q_GetSubscriptionContractRequest = GetSubscriptionContractRequest;
type index_d$q_GetSubscriptionContractResponse = GetSubscriptionContractResponse;
type index_d$q_GetSubscriptionContractResponseNonNullableFields = GetSubscriptionContractResponseNonNullableFields;
type index_d$q_QuerySubscriptionContractsRequest = QuerySubscriptionContractsRequest;
type index_d$q_QuerySubscriptionContractsResponse = QuerySubscriptionContractsResponse;
type index_d$q_QuerySubscriptionContractsResponseNonNullableFields = QuerySubscriptionContractsResponseNonNullableFields;
type index_d$q_SubscriptionContract = SubscriptionContract;
type index_d$q_SubscriptionContractCreatedEnvelope = SubscriptionContractCreatedEnvelope;
type index_d$q_SubscriptionContractDeletedEnvelope = SubscriptionContractDeletedEnvelope;
type index_d$q_SubscriptionContractNonNullableFields = SubscriptionContractNonNullableFields;
type index_d$q_SubscriptionContractUpdatedEnvelope = SubscriptionContractUpdatedEnvelope;
type index_d$q_SubscriptionContractsQueryBuilder = SubscriptionContractsQueryBuilder;
type index_d$q_SubscriptionContractsQueryResult = SubscriptionContractsQueryResult;
type index_d$q_UpdateSubscriptionContractRequest = UpdateSubscriptionContractRequest;
type index_d$q_UpdateSubscriptionContractResponse = UpdateSubscriptionContractResponse;
type index_d$q_V2SubscriptionFrequency = V2SubscriptionFrequency;
declare const index_d$q_V2SubscriptionFrequency: typeof V2SubscriptionFrequency;
type index_d$q__publicOnSubscriptionContractCreatedType = _publicOnSubscriptionContractCreatedType;
type index_d$q__publicOnSubscriptionContractDeletedType = _publicOnSubscriptionContractDeletedType;
type index_d$q__publicOnSubscriptionContractUpdatedType = _publicOnSubscriptionContractUpdatedType;
declare const index_d$q_getSubscriptionContract: typeof getSubscriptionContract;
declare const index_d$q_onSubscriptionContractCreated: typeof onSubscriptionContractCreated;
declare const index_d$q_onSubscriptionContractDeleted: typeof onSubscriptionContractDeleted;
declare const index_d$q_onSubscriptionContractUpdated: typeof onSubscriptionContractUpdated;
declare const index_d$q_querySubscriptionContracts: typeof querySubscriptionContracts;
declare namespace index_d$q {
  export { type ActionEvent$l as ActionEvent, type Address$b as Address, type AddressLocation$a as AddressLocation, type AddressWithContact$6 as AddressWithContact, type AppliedDiscount$7 as AppliedDiscount, type AppliedDiscountDiscountSourceOneOf$7 as AppliedDiscountDiscountSourceOneOf, type BaseEventMetadata$d as BaseEventMetadata, type BuyerInfo$9 as BuyerInfo, type BuyerInfoIdOneOf$6 as BuyerInfoIdOneOf, type CatalogReference$a as CatalogReference, type ChannelInfo$4 as ChannelInfo, ChannelType$7 as ChannelType, type Color$6 as Color, type Coupon$7 as Coupon, type index_d$q_CreateSubscriptionContractRequest as CreateSubscriptionContractRequest, type index_d$q_CreateSubscriptionContractResponse as CreateSubscriptionContractResponse, type CursorPaging$e as CursorPaging, type CursorPagingMetadata$b as CursorPagingMetadata, type CursorQuery$8 as CursorQuery, type CursorQueryPagingMethodOneOf$8 as CursorQueryPagingMethodOneOf, type Cursors$e as Cursors, type CustomField$5 as CustomField, type DeliveryLogistics$8 as DeliveryLogistics, type DeliveryLogisticsAddressOneOf$1 as DeliveryLogisticsAddressOneOf, type DeliveryTimeSlot$8 as DeliveryTimeSlot, type DescriptionLine$6 as DescriptionLine, type DescriptionLineDescriptionLineValueOneOf$6 as DescriptionLineDescriptionLineValueOneOf, type DescriptionLineName$6 as DescriptionLineName, DescriptionLineType$6 as DescriptionLineType, type DescriptionLineValueOneOf$6 as DescriptionLineValueOneOf, type DigitalFile$3 as DigitalFile, DiscountReason$2 as DiscountReason, type DiscountRule$7 as DiscountRule, type DiscountRuleName$7 as DiscountRuleName, DiscountType$7 as DiscountType, type DomainEvent$l as DomainEvent, type DomainEventBodyOneOf$l as DomainEventBodyOneOf, type Empty$e as Empty, type EntityCreatedEvent$l as EntityCreatedEvent, type EntityDeletedEvent$l as EntityDeletedEvent, type EntityUpdatedEvent$l as EntityUpdatedEvent, type EventMetadata$d as EventMetadata, type ExtendedFields$b as ExtendedFields, type FullAddressContactDetails$8 as FullAddressContactDetails, type index_d$q_GetSubscriptionContractRequest as GetSubscriptionContractRequest, type index_d$q_GetSubscriptionContractResponse as GetSubscriptionContractResponse, type index_d$q_GetSubscriptionContractResponseNonNullableFields as GetSubscriptionContractResponseNonNullableFields, type IdentificationData$l as IdentificationData, type IdentificationDataIdOneOf$l as IdentificationDataIdOneOf, type ItemTaxFullDetails$7 as ItemTaxFullDetails, type ItemType$7 as ItemType, ItemTypeItemType$7 as ItemTypeItemType, type ItemTypeItemTypeDataOneOf$7 as ItemTypeItemTypeDataOneOf, JurisdictionType$7 as JurisdictionType, type LineItemDiscount$7 as LineItemDiscount, type LineItemTaxBreakdown$2 as LineItemTaxBreakdown, type LineItemTaxInfo$2 as LineItemTaxInfo, type LocationAndQuantity$2 as LocationAndQuantity, type MerchantDiscount$7 as MerchantDiscount, type MerchantDiscountMerchantDiscountReasonOneOf$2 as MerchantDiscountMerchantDiscountReasonOneOf, type MessageEnvelope$k as MessageEnvelope, type OrderLineItem$2 as OrderLineItem, type OrderTaxBreakdown$2 as OrderTaxBreakdown, type OrderTaxInfo$2 as OrderTaxInfo, PaymentOptionType$7 as PaymentOptionType, type PhysicalProperties$8 as PhysicalProperties, type PickupAddress$4 as PickupAddress, type PickupDetails$9 as PickupDetails, PickupMethod$8 as PickupMethod, type PlainTextValue$6 as PlainTextValue, type Price$5 as Price, type PriceDescription$6 as PriceDescription, type PriceSummary$7 as PriceSummary, type ProductName$6 as ProductName, type index_d$q_QuerySubscriptionContractsRequest as QuerySubscriptionContractsRequest, type index_d$q_QuerySubscriptionContractsResponse as QuerySubscriptionContractsResponse, type index_d$q_QuerySubscriptionContractsResponseNonNullableFields as QuerySubscriptionContractsResponseNonNullableFields, type RestoreInfo$l as RestoreInfo, type ShippingInformation$5 as ShippingInformation, type ShippingPrice$7 as ShippingPrice, type ShippingRegion$7 as ShippingRegion, SortOrder$e as SortOrder, type Sorting$e as Sorting, type StreetAddress$a as StreetAddress, type index_d$q_SubscriptionContract as SubscriptionContract, type index_d$q_SubscriptionContractCreatedEnvelope as SubscriptionContractCreatedEnvelope, type index_d$q_SubscriptionContractDeletedEnvelope as SubscriptionContractDeletedEnvelope, type index_d$q_SubscriptionContractNonNullableFields as SubscriptionContractNonNullableFields, type index_d$q_SubscriptionContractUpdatedEnvelope as SubscriptionContractUpdatedEnvelope, type index_d$q_SubscriptionContractsQueryBuilder as SubscriptionContractsQueryBuilder, type index_d$q_SubscriptionContractsQueryResult as SubscriptionContractsQueryResult, SubscriptionFrequency$8 as SubscriptionFrequency, type SubscriptionInfo$3 as SubscriptionInfo, type SubscriptionSettings$8 as SubscriptionSettings, type TaxableAddress$7 as TaxableAddress, type TaxableAddressTaxableAddressDataOneOf$7 as TaxableAddressTaxableAddressDataOneOf, TaxableAddressType$7 as TaxableAddressType, type index_d$q_UpdateSubscriptionContractRequest as UpdateSubscriptionContractRequest, type index_d$q_UpdateSubscriptionContractResponse as UpdateSubscriptionContractResponse, type V1SubscriptionSettings$1 as V1SubscriptionSettings, index_d$q_V2SubscriptionFrequency as V2SubscriptionFrequency, type VatId$9 as VatId, VatType$9 as VatType, WebhookIdentityType$k as WebhookIdentityType, WeightUnit$9 as WeightUnit, type index_d$q__publicOnSubscriptionContractCreatedType as _publicOnSubscriptionContractCreatedType, type index_d$q__publicOnSubscriptionContractDeletedType as _publicOnSubscriptionContractDeletedType, type index_d$q__publicOnSubscriptionContractUpdatedType as _publicOnSubscriptionContractUpdatedType, index_d$q_getSubscriptionContract as getSubscriptionContract, index_d$q_onSubscriptionContractCreated as onSubscriptionContractCreated, index_d$q_onSubscriptionContractDeleted as onSubscriptionContractDeleted, index_d$q_onSubscriptionContractUpdated as onSubscriptionContractUpdated, onSubscriptionContractCreated$1 as publicOnSubscriptionContractCreated, onSubscriptionContractDeleted$1 as publicOnSubscriptionContractDeleted, onSubscriptionContractUpdated$1 as publicOnSubscriptionContractUpdated, index_d$q_querySubscriptionContracts as querySubscriptionContracts };
}

interface AbandonedCheckout {
    /** Abandoned checkout ID. */
    _id?: string;
    /** Date and time the abandoned checkout was created. */
    _createdDate?: Date | null;
    /** Date and time the abandoned checkout was updated. */
    _updatedDate?: Date | null;
    /** The associated checkout ID. */
    checkoutId?: string | null;
    /** The associated cart ID. */
    cartId?: string | null;
    /** Status of the abandoned checkout. */
    status?: Status$4;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Buyer information. */
    buyerInfo?: V1BuyerInfo$1;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$7;
    /** The store's currency. */
    currency?: string;
    /** Currency the buyer used in checkout. */
    conversionCurrency?: string | null;
    /** Total price after discounts, gift cards, and tax. */
    totalPrice?: MultiCurrencyPrice$5;
    /**
     * List of all automation activities performed by [Wix Automations](https://support.wix.com/en/article/wix-automations-getting-started) regarding the abandoned checkout.
     * Wix Automations updates the `activities` field for each actvity in the automation flow. Only relevant if you've set up [automations in the Dashboard](https://support.wix.com/en/article/wix-automations-creating-a-new-automation). Read more about `activities` in the [introduction](https://www.wix.com/velo/reference/wix-ecom-backend/abandonedcheckout/introduction).
     */
    activities?: Activity$3[];
    /** Date and time the abandoned checkout was recovered. */
    checkoutRecoveredDate?: Date | null;
    /** Checkout URL. */
    checkoutUrl?: string;
    /** Subtotal price of all line items, before discounts and before tax. */
    subtotalPrice?: MultiCurrencyPrice$5;
}
declare enum ActivityType$3 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    SCHEDULED = "SCHEDULED",
    EMAIL_SENT = "EMAIL_SENT",
    EMAIL_NOT_SENT = "EMAIL_NOT_SENT",
    NOTIFICATION_SENT = "NOTIFICATION_SENT",
    TASK_CREATED = "TASK_CREATED"
}
/** Status of the abandoned checkout. */
declare enum Status$4 {
    ABANDONED = "ABANDONED",
    RECOVERED = "RECOVERED"
}
/** Buyer information. */
interface V1BuyerInfo$1 extends V1BuyerInfoIdOneOf {
    /** Visitor ID (if the site visitor is **not** a site member). */
    visitorId?: string;
    /** Member ID (if the site visitor is a site member). */
    memberId?: string;
    /** User ID (if the site visitor is a site owner or collaborator). */
    userId?: string;
    /**
     * Contact ID. For more information, see the [Contacts API](https://www.wix.com/velo/reference/wix-crm-v2/contacts).
     * @readonly
     */
    contactId?: string | null;
    /**
     * Buyer email address.
     * Max: `50`
     */
    email?: string | null;
}
/** @oneof */
interface V1BuyerInfoIdOneOf {
    /** Visitor ID (if the site visitor is **not** a site member). */
    visitorId?: string;
    /** Member ID (if the site visitor is a site member). */
    memberId?: string;
    /** User ID (if the site visitor is a site owner or collaborator). */
    userId?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$7 {
    /**
     * First name.
     * Max length: `100`
     */
    firstName?: string | null;
    /**
     * Last name.
     * Max length: `100`
     */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /**
     * Company name.
     * Max length: `50`
     */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$8;
}
interface VatId$8 {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$8;
}
/** tax info types */
declare enum VatType$8 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface MultiCurrencyPrice$5 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface Activity$3 {
    /** Date and time the automation activity was created. */
    _createdDate?: Date | null;
    /**
     * Automation activity type.
     *
     * Supported properties: `UNKNOWN_TYPE`, `SCHEDULED`, `EMAIL_SENT`, `EMAIL_NOT_SENT`, `NOTIFICATION_SENT`, `TASK_CREATED`
     */
    type?: ActivityType$3;
}
interface CartAbandonedEvent {
    cartId?: string;
    /**
     * Time the cart was created
     * @readonly
     */
    creationTime?: Date | null;
    /**
     * Time the cart was abandoned
     * @readonly
     */
    abandonTime?: Date | null;
    /** Buyer information */
    buyerInfo?: BuyerInfo$8;
    /** Amount of items in cart */
    itemsCount?: number;
    /** Coupon ID (if relevant) */
    couponId?: string;
    /** Subtotal of all line items in cart, not before shipping and taxes */
    totals?: Totals$2;
    /** Checkout URL - checkout with the abandoned cart details */
    checkoutUrl?: string;
}
interface BuyerInfo$8 {
    /** Wix customer ID */
    _id?: string;
    /** Customer information */
    identityType?: Identity;
    /** Customer's email address */
    email?: string | null;
    /** Customer's phone number */
    phone?: string | null;
    /** Customer's first name */
    firstName?: string | null;
    /** Customer's last name */
    lastName?: string | null;
}
declare enum Identity {
    /** Customer is the site owner */
    ADMIN = "ADMIN",
    /** Customer is logged in */
    MEMBER = "MEMBER",
    /** Customer is not logged in */
    VISITOR = "VISITOR",
    /** Contact was created for the customer */
    CONTACT = "CONTACT"
}
interface Totals$2 {
    /** Subtotal of all line items in cart, without shipping and taxes */
    subtotal?: number | null;
    /** Total cart price */
    total?: number | null;
    /** Formatted total cart price includes currency symbol */
    formattedTotal?: string;
}
interface CartRecoveredEvent {
    cartId?: string;
    /**
     * Time the cart was recovered
     * @readonly
     */
    recoveredTime?: Date | null;
    /**
     * Time the cart was created
     * @readonly
     */
    creationTime?: Date | null;
    /**
     * Time the cart was abandoned
     * @readonly
     */
    abandonedTime?: Date | null;
}
interface GetAbandonedCheckoutRequest {
    /** Abandoned checkout ID. */
    abandonedCheckoutId: string;
}
interface GetAbandonedCheckoutResponse {
    /** The requested abandoned checkout. */
    abandonedCheckout?: AbandonedCheckout;
}
interface DeleteAbandonedCheckoutRequest {
    /** Id of the abandoned checkout to delete */
    abandonedCheckoutId: string;
}
interface DeleteAbandonedCheckoutResponse {
}
interface QueryAbandonedCheckoutsRequest {
    /** Query options. */
    query: QueryV2$3;
}
interface QueryV2$3 extends QueryV2PagingMethodOneOf$3 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$3;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$d;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$d[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf$3 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$3;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$d;
}
interface Sorting$d {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$d;
}
declare enum SortOrder$d {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging$3 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$d {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryAbandonedCheckoutsResponse {
    /**
     * __Deprecated.__ Use `abandonedCheckouts` instead.
     * @deprecated
     */
    results?: AbandonedCheckout[];
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout[];
    /** Details on the paged set of results returned. */
    metadata?: PagingMetadataV2$1;
}
interface PagingMetadataV2$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors$d;
}
interface Cursors$d {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface SearchAbandonedCheckoutsRequest {
    /** WQL query expression. */
    search?: Search;
}
interface Search extends SearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: CommonPaging;
    /** Cursor pointing to page of results. Can't be used together with 'paging'. 'cursor_paging.cursor' can not be used together with 'filter' or 'sort' */
    cursorPaging?: CommonCursorPaging;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: CommonSorting[];
    /** free text to match in searchable fields */
    search?: SearchDetails;
}
/** @oneof */
interface SearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: CommonPaging;
    /** Cursor pointing to page of results. Can't be used together with 'paging'. 'cursor_paging.cursor' can not be used together with 'filter' or 'sort' */
    cursorPaging?: CommonCursorPaging;
}
interface CommonSorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: CommonSortOrder;
}
declare enum CommonSortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface SearchDetails {
    /** boolean search mode */
    mode?: Mode;
    /** search term or expression */
    expression?: string | null;
    /** fields to search in. if empty - server will search in own default fields */
    fields?: string[];
    /** flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
declare enum Mode {
    /** any */
    OR = "OR",
    /** all */
    AND = "AND"
}
interface CommonPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CommonCursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface SearchAbandonedCheckoutsResponse {
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CommonPagingMetadataV2;
}
interface CommonPagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: CommonCursors;
}
interface CommonCursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface AddAbandonedCheckoutActivityRequest {
    /** Id of the abandoned checkout to update */
    abandonedCheckoutId?: string | null;
    /** The type of the activity to add */
    activityType?: ActivityType$3;
}
interface AddAbandonedCheckoutActivityResponse {
    /** The updated abandoned checkout with the added activity */
    abandonedCheckout?: AbandonedCheckout;
}
interface Task$1 {
    key?: TaskKey$1;
    executeAt?: Date | null;
    payload?: string | null;
}
interface TaskKey$1 {
    appId?: string;
    instanceId?: string;
    subjectId?: string | null;
}
interface TaskAction$1 extends TaskActionActionOneOf$1 {
    complete?: Complete$1;
    cancel?: Cancel$1;
    reschedule?: Reschedule$1;
}
/** @oneof */
interface TaskActionActionOneOf$1 {
    complete?: Complete$1;
    cancel?: Cancel$1;
    reschedule?: Reschedule$1;
}
interface Complete$1 {
}
interface Cancel$1 {
}
interface Reschedule$1 {
    executeAt?: Date | null;
    payload?: string | null;
}
interface RedirectToCheckoutRequest {
    /** abandoned checkout id */
    abandonedCheckoutId: string;
    /** Identifier of the metaSite this checkout uses */
    metasiteId: string;
}
interface RawHttpResponse$1 {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry$1[];
}
interface HeadersEntry$1 {
    key?: string;
    value?: string;
}
interface DomainEvent$k extends DomainEventBodyOneOf$k {
    createdEvent?: EntityCreatedEvent$k;
    updatedEvent?: EntityUpdatedEvent$k;
    deletedEvent?: EntityDeletedEvent$k;
    actionEvent?: ActionEvent$k;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$k {
    createdEvent?: EntityCreatedEvent$k;
    updatedEvent?: EntityUpdatedEvent$k;
    deletedEvent?: EntityDeletedEvent$k;
    actionEvent?: ActionEvent$k;
}
interface EntityCreatedEvent$k {
    entity?: string;
}
interface RestoreInfo$k {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$k {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$k {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$k {
    body?: string;
}
interface Empty$d {
}
/** Triggered when an abandoned checkout is recovered (the customer completes the checkout). */
interface AbandonedCheckoutRecovered {
    abandonedCheckout?: AbandonedCheckout;
}
interface MessageEnvelope$j {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$k;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$k extends IdentificationDataIdOneOf$k {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$j;
}
/** @oneof */
interface IdentificationDataIdOneOf$k {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$j {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface V1BuyerInfoNonNullableFields {
    visitorId: string;
    memberId: string;
    userId: string;
}
interface VatIdNonNullableFields$4 {
    _id: string;
    type: VatType$8;
}
interface FullAddressContactDetailsNonNullableFields$5 {
    vatId?: VatIdNonNullableFields$4;
}
interface MultiCurrencyPriceNonNullableFields$4 {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface ActivityNonNullableFields$2 {
    type: ActivityType$3;
}
interface AbandonedCheckoutNonNullableFields {
    _id: string;
    status: Status$4;
    buyerInfo?: V1BuyerInfoNonNullableFields;
    contactDetails?: FullAddressContactDetailsNonNullableFields$5;
    currency: string;
    totalPrice?: MultiCurrencyPriceNonNullableFields$4;
    activities: ActivityNonNullableFields$2[];
    checkoutUrl: string;
    subtotalPrice?: MultiCurrencyPriceNonNullableFields$4;
}
interface GetAbandonedCheckoutResponseNonNullableFields {
    abandonedCheckout?: AbandonedCheckoutNonNullableFields;
}
interface QueryAbandonedCheckoutsResponseNonNullableFields {
    results: AbandonedCheckoutNonNullableFields[];
    abandonedCheckouts: AbandonedCheckoutNonNullableFields[];
}
interface SearchAbandonedCheckoutsResponseNonNullableFields {
    abandonedCheckouts: AbandonedCheckoutNonNullableFields[];
}
interface HeadersEntryNonNullableFields$1 {
    key: string;
    value: string;
}
interface RawHttpResponseNonNullableFields$1 {
    body: Uint8Array;
    headers: HeadersEntryNonNullableFields$1[];
}
interface BaseEventMetadata$c {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$k;
}
interface EventMetadata$c extends BaseEventMetadata$c {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface AbandonedCheckoutRecoveredEnvelope {
    data: AbandonedCheckoutRecovered;
    metadata: EventMetadata$c;
}
interface QueryCursorResult$b {
    cursors: CommonCursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface AbandonedCheckoutsQueryResult extends QueryCursorResult$b {
    items: AbandonedCheckout[];
    query: AbandonedCheckoutsQueryBuilder;
    next: () => Promise<AbandonedCheckoutsQueryResult>;
    prev: () => Promise<AbandonedCheckoutsQueryResult>;
}
interface AbandonedCheckoutsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate' | '_updatedDate', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate' | '_updatedDate', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate' | '_updatedDate', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate' | '_updatedDate', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: string) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: any[]) => AbandonedCheckoutsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: boolean) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email'>) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email'>) => AbandonedCheckoutsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => AbandonedCheckoutsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => AbandonedCheckoutsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<AbandonedCheckoutsQueryResult>;
}
interface SearchAbandonedCheckoutsOptions {
    /** WQL query expression. */
    search?: Search;
}

declare function getAbandonedCheckout$1(httpClient: HttpClient): GetAbandonedCheckoutSignature;
interface GetAbandonedCheckoutSignature {
    /**
     * Retrieves an abandoned checkout.
     * @param - Abandoned checkout ID.
     * @returns The requested abandoned checkout.
     */
    (abandonedCheckoutId: string): Promise<AbandonedCheckout & AbandonedCheckoutNonNullableFields>;
}
declare function deleteAbandonedCheckout$1(httpClient: HttpClient): DeleteAbandonedCheckoutSignature;
interface DeleteAbandonedCheckoutSignature {
    /**
     * Delete an AbandonedCheckout
     * @param - Id of the abandoned checkout to delete
     */
    (abandonedCheckoutId: string): Promise<void>;
}
declare function queryAbandonedCheckouts$1(httpClient: HttpClient): QueryAbandonedCheckoutsSignature;
interface QueryAbandonedCheckoutsSignature {
    /**
     * Creates a query to retrieve a list of abandoned checkouts.
     *
     * The `queryAbandonedCheckouts()` function builds a query to retrieve a list of abandoned checkouts and returns a `ResultsQueryBuilder` object.
     *
     * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
     *
     * You can refine the query by chaining `ResultsQueryBuilder` functions onto the query. `ResultsQueryBuilder` functions enable you to sort, filter, and control the results `queryAbandonedCheckouts()` returns.
     */
    (): AbandonedCheckoutsQueryBuilder;
}
declare function searchAbandonedCheckouts$1(httpClient: HttpClient): SearchAbandonedCheckoutsSignature;
interface SearchAbandonedCheckoutsSignature {
    /**
     * Retrieves a list of abandoned checkouts, given the provided paging, filtering, searchDetails and sorting. Up to 100 abandoned checkouts can be returned per request.
     */
    (options?: SearchAbandonedCheckoutsOptions | undefined): Promise<SearchAbandonedCheckoutsResponse & SearchAbandonedCheckoutsResponseNonNullableFields>;
}
declare function redirectToCheckout$1(httpClient: HttpClient): RedirectToCheckoutSignature;
interface RedirectToCheckoutSignature {
    /**
     * Redirects the abandoned checkout to the checkout page.
     * @param - abandoned checkout id
     * @param - Identifier of the metaSite this checkout uses
     */
    (abandonedCheckoutId: string, metasiteId: string): Promise<RawHttpResponse$1 & RawHttpResponseNonNullableFields$1>;
}
declare const onAbandonedCheckoutRecovered$1: EventDefinition<AbandonedCheckoutRecoveredEnvelope, "wix.ecom.v1.abandoned_checkout_recovered">;

declare function createEventModule$c<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const getAbandonedCheckout: MaybeContext<BuildRESTFunction<typeof getAbandonedCheckout$1> & typeof getAbandonedCheckout$1>;
declare const deleteAbandonedCheckout: MaybeContext<BuildRESTFunction<typeof deleteAbandonedCheckout$1> & typeof deleteAbandonedCheckout$1>;
declare const queryAbandonedCheckouts: MaybeContext<BuildRESTFunction<typeof queryAbandonedCheckouts$1> & typeof queryAbandonedCheckouts$1>;
declare const searchAbandonedCheckouts: MaybeContext<BuildRESTFunction<typeof searchAbandonedCheckouts$1> & typeof searchAbandonedCheckouts$1>;
declare const redirectToCheckout: MaybeContext<BuildRESTFunction<typeof redirectToCheckout$1> & typeof redirectToCheckout$1>;

type _publicOnAbandonedCheckoutRecoveredType = typeof onAbandonedCheckoutRecovered$1;
/**
 * Triggered when an abandoned checkout is recovered (the customer completes the checkout).
 */
declare const onAbandonedCheckoutRecovered: ReturnType<typeof createEventModule$c<_publicOnAbandonedCheckoutRecoveredType>>;

type index_d$p_AbandonedCheckout = AbandonedCheckout;
type index_d$p_AbandonedCheckoutNonNullableFields = AbandonedCheckoutNonNullableFields;
type index_d$p_AbandonedCheckoutRecovered = AbandonedCheckoutRecovered;
type index_d$p_AbandonedCheckoutRecoveredEnvelope = AbandonedCheckoutRecoveredEnvelope;
type index_d$p_AbandonedCheckoutsQueryBuilder = AbandonedCheckoutsQueryBuilder;
type index_d$p_AbandonedCheckoutsQueryResult = AbandonedCheckoutsQueryResult;
type index_d$p_AddAbandonedCheckoutActivityRequest = AddAbandonedCheckoutActivityRequest;
type index_d$p_AddAbandonedCheckoutActivityResponse = AddAbandonedCheckoutActivityResponse;
type index_d$p_CartAbandonedEvent = CartAbandonedEvent;
type index_d$p_CartRecoveredEvent = CartRecoveredEvent;
type index_d$p_CommonCursorPaging = CommonCursorPaging;
type index_d$p_CommonCursors = CommonCursors;
type index_d$p_CommonPaging = CommonPaging;
type index_d$p_CommonPagingMetadataV2 = CommonPagingMetadataV2;
type index_d$p_CommonSortOrder = CommonSortOrder;
declare const index_d$p_CommonSortOrder: typeof CommonSortOrder;
type index_d$p_CommonSorting = CommonSorting;
type index_d$p_DeleteAbandonedCheckoutRequest = DeleteAbandonedCheckoutRequest;
type index_d$p_DeleteAbandonedCheckoutResponse = DeleteAbandonedCheckoutResponse;
type index_d$p_GetAbandonedCheckoutRequest = GetAbandonedCheckoutRequest;
type index_d$p_GetAbandonedCheckoutResponse = GetAbandonedCheckoutResponse;
type index_d$p_GetAbandonedCheckoutResponseNonNullableFields = GetAbandonedCheckoutResponseNonNullableFields;
type index_d$p_Identity = Identity;
declare const index_d$p_Identity: typeof Identity;
type index_d$p_Mode = Mode;
declare const index_d$p_Mode: typeof Mode;
type index_d$p_QueryAbandonedCheckoutsRequest = QueryAbandonedCheckoutsRequest;
type index_d$p_QueryAbandonedCheckoutsResponse = QueryAbandonedCheckoutsResponse;
type index_d$p_QueryAbandonedCheckoutsResponseNonNullableFields = QueryAbandonedCheckoutsResponseNonNullableFields;
type index_d$p_RedirectToCheckoutRequest = RedirectToCheckoutRequest;
type index_d$p_Search = Search;
type index_d$p_SearchAbandonedCheckoutsOptions = SearchAbandonedCheckoutsOptions;
type index_d$p_SearchAbandonedCheckoutsRequest = SearchAbandonedCheckoutsRequest;
type index_d$p_SearchAbandonedCheckoutsResponse = SearchAbandonedCheckoutsResponse;
type index_d$p_SearchAbandonedCheckoutsResponseNonNullableFields = SearchAbandonedCheckoutsResponseNonNullableFields;
type index_d$p_SearchDetails = SearchDetails;
type index_d$p_SearchPagingMethodOneOf = SearchPagingMethodOneOf;
type index_d$p_V1BuyerInfoIdOneOf = V1BuyerInfoIdOneOf;
type index_d$p__publicOnAbandonedCheckoutRecoveredType = _publicOnAbandonedCheckoutRecoveredType;
declare const index_d$p_deleteAbandonedCheckout: typeof deleteAbandonedCheckout;
declare const index_d$p_getAbandonedCheckout: typeof getAbandonedCheckout;
declare const index_d$p_onAbandonedCheckoutRecovered: typeof onAbandonedCheckoutRecovered;
declare const index_d$p_queryAbandonedCheckouts: typeof queryAbandonedCheckouts;
declare const index_d$p_redirectToCheckout: typeof redirectToCheckout;
declare const index_d$p_searchAbandonedCheckouts: typeof searchAbandonedCheckouts;
declare namespace index_d$p {
  export { type index_d$p_AbandonedCheckout as AbandonedCheckout, type index_d$p_AbandonedCheckoutNonNullableFields as AbandonedCheckoutNonNullableFields, type index_d$p_AbandonedCheckoutRecovered as AbandonedCheckoutRecovered, type index_d$p_AbandonedCheckoutRecoveredEnvelope as AbandonedCheckoutRecoveredEnvelope, type index_d$p_AbandonedCheckoutsQueryBuilder as AbandonedCheckoutsQueryBuilder, type index_d$p_AbandonedCheckoutsQueryResult as AbandonedCheckoutsQueryResult, type ActionEvent$k as ActionEvent, type Activity$3 as Activity, ActivityType$3 as ActivityType, type index_d$p_AddAbandonedCheckoutActivityRequest as AddAbandonedCheckoutActivityRequest, type index_d$p_AddAbandonedCheckoutActivityResponse as AddAbandonedCheckoutActivityResponse, type BaseEventMetadata$c as BaseEventMetadata, type BuyerInfo$8 as BuyerInfo, type Cancel$1 as Cancel, type index_d$p_CartAbandonedEvent as CartAbandonedEvent, type index_d$p_CartRecoveredEvent as CartRecoveredEvent, type index_d$p_CommonCursorPaging as CommonCursorPaging, type index_d$p_CommonCursors as CommonCursors, type index_d$p_CommonPaging as CommonPaging, type index_d$p_CommonPagingMetadataV2 as CommonPagingMetadataV2, index_d$p_CommonSortOrder as CommonSortOrder, type index_d$p_CommonSorting as CommonSorting, type Complete$1 as Complete, type CursorPaging$d as CursorPaging, type Cursors$d as Cursors, type index_d$p_DeleteAbandonedCheckoutRequest as DeleteAbandonedCheckoutRequest, type index_d$p_DeleteAbandonedCheckoutResponse as DeleteAbandonedCheckoutResponse, type DomainEvent$k as DomainEvent, type DomainEventBodyOneOf$k as DomainEventBodyOneOf, type Empty$d as Empty, type EntityCreatedEvent$k as EntityCreatedEvent, type EntityDeletedEvent$k as EntityDeletedEvent, type EntityUpdatedEvent$k as EntityUpdatedEvent, type EventMetadata$c as EventMetadata, type FullAddressContactDetails$7 as FullAddressContactDetails, type index_d$p_GetAbandonedCheckoutRequest as GetAbandonedCheckoutRequest, type index_d$p_GetAbandonedCheckoutResponse as GetAbandonedCheckoutResponse, type index_d$p_GetAbandonedCheckoutResponseNonNullableFields as GetAbandonedCheckoutResponseNonNullableFields, type HeadersEntry$1 as HeadersEntry, type IdentificationData$k as IdentificationData, type IdentificationDataIdOneOf$k as IdentificationDataIdOneOf, index_d$p_Identity as Identity, type MessageEnvelope$j as MessageEnvelope, index_d$p_Mode as Mode, type MultiCurrencyPrice$5 as MultiCurrencyPrice, type Paging$3 as Paging, type PagingMetadataV2$1 as PagingMetadataV2, type index_d$p_QueryAbandonedCheckoutsRequest as QueryAbandonedCheckoutsRequest, type index_d$p_QueryAbandonedCheckoutsResponse as QueryAbandonedCheckoutsResponse, type index_d$p_QueryAbandonedCheckoutsResponseNonNullableFields as QueryAbandonedCheckoutsResponseNonNullableFields, type QueryV2$3 as QueryV2, type QueryV2PagingMethodOneOf$3 as QueryV2PagingMethodOneOf, type RawHttpResponse$1 as RawHttpResponse, type RawHttpResponseNonNullableFields$1 as RawHttpResponseNonNullableFields, type index_d$p_RedirectToCheckoutRequest as RedirectToCheckoutRequest, type Reschedule$1 as Reschedule, type RestoreInfo$k as RestoreInfo, type index_d$p_Search as Search, type index_d$p_SearchAbandonedCheckoutsOptions as SearchAbandonedCheckoutsOptions, type index_d$p_SearchAbandonedCheckoutsRequest as SearchAbandonedCheckoutsRequest, type index_d$p_SearchAbandonedCheckoutsResponse as SearchAbandonedCheckoutsResponse, type index_d$p_SearchAbandonedCheckoutsResponseNonNullableFields as SearchAbandonedCheckoutsResponseNonNullableFields, type index_d$p_SearchDetails as SearchDetails, type index_d$p_SearchPagingMethodOneOf as SearchPagingMethodOneOf, SortOrder$d as SortOrder, type Sorting$d as Sorting, Status$4 as Status, type Task$1 as Task, type TaskAction$1 as TaskAction, type TaskActionActionOneOf$1 as TaskActionActionOneOf, type TaskKey$1 as TaskKey, type Totals$2 as Totals, type V1BuyerInfo$1 as V1BuyerInfo, type index_d$p_V1BuyerInfoIdOneOf as V1BuyerInfoIdOneOf, type VatId$8 as VatId, VatType$8 as VatType, WebhookIdentityType$j as WebhookIdentityType, type index_d$p__publicOnAbandonedCheckoutRecoveredType as _publicOnAbandonedCheckoutRecoveredType, index_d$p_deleteAbandonedCheckout as deleteAbandonedCheckout, index_d$p_getAbandonedCheckout as getAbandonedCheckout, index_d$p_onAbandonedCheckoutRecovered as onAbandonedCheckoutRecovered, onAbandonedCheckoutRecovered$1 as publicOnAbandonedCheckoutRecovered, index_d$p_queryAbandonedCheckouts as queryAbandonedCheckouts, index_d$p_redirectToCheckout as redirectToCheckout, index_d$p_searchAbandonedCheckouts as searchAbandonedCheckouts };
}

/**
 * The back in stock notification request allows a customer to receive a notifiction when a specific item
 * is available again. The request includes information about the person making the request, the item
 * they want to receive a notification for, and the status of the notification.
 */
interface BackInStockNotificationRequest {
    /**
     * Request ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Catalog and item reference that the notification request is for.
     *
     * Includes IDs for the catalog and item it came from, as well as additional, optional information.
     */
    catalogReference?: CatalogReference$9;
    /** Email address to send notification to about item being back in stock. */
    email?: string;
    /**
     * Contact ID for the contact with this `email`.
     *
     * If a contact does not already exist with the email address submitted when creating this request, then a new contact is created.
     * For more information about contacts, see the Contacts API.
     * @readonly
     */
    contactId?: string | null;
    /**
     * Status of the notification.
     *
     * `status` is set to `RECEIVED` when the notification request is created. The `status` changes once a notification email is sent for this request object:
     * + When a notification email is sent through the site, either automatically or with the `reportItemsBackInStock()` function, then the `status` is briefly set to `PROCESSING` and then set to `NOTIFICATION_SENT` if the email is successul, and `FAILED` if it fails.
     * + When a notification email is sent offline, use the `markAsNotificationSent()` function to set `status` to `NOTIFICATION_SENT`.
     * @readonly
     */
    status?: Status$3;
    /**
     * Whether a notification was sent automatically.
     *
     * `autoNotified` is empty when the notification request is created and is not returned until the field has a value. `autoNotified` receives a value when a notification email is sent for this request object.
     *
     * `autoNotified` sets to `true` if the notification is sent through the site, either automatically or with the `reportItemsBackInStock()` function. If the notification email is sent offline but the `status` is updated with the `markAsNotificationSent()` function, then `autoNotified` sets to `false`.
     * @readonly
     */
    autoNotified?: boolean | null;
    /**
     * Date and time the notification request was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Item URL for this request. */
    itemUrl?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$9 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
declare enum Status$3 {
    UNSPECIFIED = "UNSPECIFIED",
    /** initial status of all new requests */
    RECEIVED = "RECEIVED",
    PROCESSING = "PROCESSING",
    NOTIFICATION_SENT = "NOTIFICATION_SENT",
    FAILED = "FAILED"
}
interface InvalidateCache extends InvalidateCacheGetByOneOf {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App$1;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
    /** tell us why you're invalidating the cache. You don't need to add your app name */
    reason?: string | null;
    /** Is local DS */
    localDc?: boolean;
    hardPurge?: boolean;
}
/** @oneof */
interface InvalidateCacheGetByOneOf {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App$1;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
}
interface App$1 {
    /** The AppDefId */
    appDefId?: string;
    /** The instance Id */
    instanceId?: string;
}
interface Page {
    /** the msid the page is on */
    metaSiteId?: string;
    /** Invalidate by Page ID */
    pageId?: string;
}
interface URI {
    /** the msid the URI is on */
    metaSiteId?: string;
    /** URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes */
    uriPath?: string;
}
interface File {
    /** the msid the file is related to */
    metaSiteId?: string;
    /** Invalidate by filename (for media files such as PDFs) */
    fileName?: string;
}
interface CreateBackInStockNotificationRequestRequest {
    /**
     * Notification request information.
     *
     * Includes details for the out of stock item and the email address
     * requesting to be notified when it's back in stock.
     */
    request: BackInStockNotificationRequest;
    /** Item details to include in the notification when the item is back in stock. */
    itemDetails: BackInStockItemDetails;
}
interface BackInStockItemDetails {
    /** Item name. */
    name?: string;
    /** Item price. */
    price?: string;
    /** Item image. */
    image?: string;
}
interface CreateBackInStockNotificationRequestResponse {
    /** Created back in stock notification request. */
    request?: BackInStockNotificationRequest;
}
interface GetBackInStockNotificationRequestRequest {
    /** ID of the notification request to retrieve. */
    _id: string;
}
interface GetBackInStockNotificationRequestResponse {
    /** Retrieved back in stock notification request. */
    request?: BackInStockNotificationRequest;
}
interface DeleteBackInStockNotificationRequestRequest {
    /** ID of the notification request to delete. */
    _id: string;
}
interface DeleteBackInStockNotificationRequestResponse {
}
interface MarkAsNotificationSentRequest {
    /** ID of the notification request to mark. */
    _id: string;
}
interface MarkAsNotificationSentResponse {
    /** Marked back in stock notification request. */
    request?: BackInStockNotificationRequest;
}
interface QueryBackInStockNotificationRequestsRequest {
    /** Query options. */
    query: PlatformQuery$1;
}
interface PlatformQuery$1 extends PlatformQueryPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$1;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$c;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting$c[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$1;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$c;
}
interface Sorting$c {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$c;
}
declare enum SortOrder$c {
    ASC = "ASC",
    DESC = "DESC"
}
interface PlatformPaging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$c {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryBackInStockNotificationRequestsResponse {
    /** Retrieved back in stock requests. */
    requests?: BackInStockNotificationRequest[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata$1;
}
interface PlatformPagingMetadata$1 {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors$c;
}
interface Cursors$c {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesRequest {
    /** `catalogReference` items to retrieve the notification request for. */
    catalogReferences: CatalogReference$9[];
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesResponse {
    /** Amount of back in stock notifications for each of the retrieved `catalogReference` items. */
    countsPerCatalogReference?: BackInStockNotificationRequestsCount[];
}
/** Maps each back in stock CatalogReference to the results (the number of unique occurrences). */
interface BackInStockNotificationRequestsCount {
    /**
     * Catalog and item reference.
     *
     * Includes IDs and additional, optional information related to the item.
     */
    catalogReference?: CatalogReference$9;
    /** The number of unique back in stock requests for given `catalogReference`. */
    count?: number;
}
interface ReportItemsBackInStockRequest {
    /**
     * `catalogReference` item to send notifications for.
     *
     * Cannot be used with `requestIds`.
     */
    catalogReference?: CatalogReference$9;
    /**
     * IDs of requests to send notifications for.
     *
     * Cannot be used with `catalogReference`.
     */
    requestIds?: string[];
    /**
     * Item details to use in notifications.
     *
     * `itemDetails` may populate dynamic valyes in the notification template, as follows:
     * + `itemDetails.name` passes to the template as `item.name`
     * + `itemDetails.price` passes to the template as `item.price`
     * + `itemDetails.image.url` passes to the template as `item.image.url`
     *
     * Use `extraAutomationTemplateParameters` to pass additional dynamic values.
     */
    itemDetails: BackInStockItemDetails;
    /** Additional key-value pairs to pass to the back in stock notification template. */
    extraAutomationTemplateParameters?: Record<string, string>;
}
interface ReportItemsBackInStockResponse {
}
interface DomainEvent$j extends DomainEventBodyOneOf$j {
    createdEvent?: EntityCreatedEvent$j;
    updatedEvent?: EntityUpdatedEvent$j;
    deletedEvent?: EntityDeletedEvent$j;
    actionEvent?: ActionEvent$j;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$j {
    createdEvent?: EntityCreatedEvent$j;
    updatedEvent?: EntityUpdatedEvent$j;
    deletedEvent?: EntityDeletedEvent$j;
    actionEvent?: ActionEvent$j;
}
interface EntityCreatedEvent$j {
    entity?: string;
}
interface RestoreInfo$j {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$j {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$j {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$j {
    body?: string;
}
interface Empty$c {
}
interface MessageEnvelope$i {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$j;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$j extends IdentificationDataIdOneOf$j {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$i;
}
/** @oneof */
interface IdentificationDataIdOneOf$j {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$i {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface CatalogReferenceNonNullableFields$6 {
    catalogItemId: string;
    appId: string;
}
interface BackInStockNotificationRequestNonNullableFields {
    catalogReference?: CatalogReferenceNonNullableFields$6;
    email: string;
    status: Status$3;
}
interface CreateBackInStockNotificationRequestResponseNonNullableFields {
    request?: BackInStockNotificationRequestNonNullableFields;
}
interface GetBackInStockNotificationRequestResponseNonNullableFields {
    request?: BackInStockNotificationRequestNonNullableFields;
}
interface MarkAsNotificationSentResponseNonNullableFields {
    request?: BackInStockNotificationRequestNonNullableFields;
}
interface QueryBackInStockNotificationRequestsResponseNonNullableFields {
    requests: BackInStockNotificationRequestNonNullableFields[];
}
interface BackInStockNotificationRequestsCountNonNullableFields {
    catalogReference?: CatalogReferenceNonNullableFields$6;
    count: number;
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields {
    countsPerCatalogReference: BackInStockNotificationRequestsCountNonNullableFields[];
}
interface BaseEventMetadata$b {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$j;
}
interface EventMetadata$b extends BaseEventMetadata$b {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface BackInStockNotificationRequestCreatedEnvelope {
    entity: BackInStockNotificationRequest;
    metadata: EventMetadata$b;
}
interface BackInStockNotificationRequestDeletedEnvelope {
    metadata: EventMetadata$b;
}
interface BackInStockNotificationRequestUpdatedEnvelope {
    entity: BackInStockNotificationRequest;
    metadata: EventMetadata$b;
}
interface QueryCursorResult$a {
    cursors: Cursors$c;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface RequestsQueryResult extends QueryCursorResult$a {
    items: BackInStockNotificationRequest[];
    query: RequestsQueryBuilder;
    next: () => Promise<RequestsQueryResult>;
    prev: () => Promise<RequestsQueryResult>;
}
interface RequestsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'contactId' | 'status' | 'autoNotified' | '_createdDate' | 'itemUrl', value: any) => RequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'contactId' | 'status' | 'autoNotified' | '_createdDate' | 'itemUrl', value: any) => RequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate', value: any) => RequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate', value: any) => RequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate', value: any) => RequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate', value: any) => RequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'contactId' | 'itemUrl', value: string) => RequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'contactId' | 'status' | 'autoNotified' | '_createdDate' | 'itemUrl', value: any[]) => RequestsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'contactId' | 'status' | 'autoNotified' | '_createdDate' | 'itemUrl', value: any) => RequestsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'contactId' | 'status' | 'autoNotified' | '_createdDate' | 'itemUrl', value: boolean) => RequestsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id' | 'contactId' | 'status' | 'autoNotified' | '_createdDate' | 'itemUrl'>) => RequestsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id' | 'contactId' | 'status' | 'autoNotified' | '_createdDate' | 'itemUrl'>) => RequestsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => RequestsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => RequestsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<RequestsQueryResult>;
}
interface ReportItemsBackInStockOptions {
    /**
     * `catalogReference` item to send notifications for.
     *
     * Cannot be used with `requestIds`.
     */
    catalogReference?: CatalogReference$9;
    /**
     * IDs of requests to send notifications for.
     *
     * Cannot be used with `catalogReference`.
     */
    requestIds?: string[];
    /** Additional key-value pairs to pass to the back in stock notification template. */
    extraAutomationTemplateParameters?: Record<string, string>;
}

declare function createBackInStockNotificationRequest$1(httpClient: HttpClient): CreateBackInStockNotificationRequestSignature;
interface CreateBackInStockNotificationRequestSignature {
    /**
     * Creates a back in stock notification request.
     *
     * If a notification request already exists for the same `catalogReference` and `email`,
     * then a new one isn't created and the existing request is returned.
     * @param - Notification request information.
     *
     * Includes details for the out of stock item and the email address
     * requesting to be notified when it's back in stock.
     * @param - Item details to include in the notification when the item is back in stock.
     * @returns Created back in stock notification request.
     */
    (request: BackInStockNotificationRequest, itemDetails: BackInStockItemDetails): Promise<BackInStockNotificationRequest & BackInStockNotificationRequestNonNullableFields>;
}
declare function getBackInStockNotificationRequest$1(httpClient: HttpClient): GetBackInStockNotificationRequestSignature;
interface GetBackInStockNotificationRequestSignature {
    /**
     * Retrieves a back in stock notification request.
     * @param - ID of the notification request to retrieve.
     * @returns Retrieved back in stock notification request.
     */
    (_id: string): Promise<BackInStockNotificationRequest & BackInStockNotificationRequestNonNullableFields>;
}
declare function deleteBackInStockNotificationRequest$1(httpClient: HttpClient): DeleteBackInStockNotificationRequestSignature;
interface DeleteBackInStockNotificationRequestSignature {
    /**
     * Deletes a back in stock notification request.
     * @param - ID of the notification request to delete.
     */
    (_id: string): Promise<void>;
}
declare function markAsNotificationSent$1(httpClient: HttpClient): MarkAsNotificationSentSignature;
interface MarkAsNotificationSentSignature {
    /**
     * Sets `status` of a back in stock request to `NOTIFICATION_SENT`.
     *
     * Use this function if the notification is sent manually offline. If the notification is sent automatically or with the `reportItemsBackInStock()` function, then `status` updates on its own.
     * @param - ID of the notification request to mark.
     */
    (_id: string): Promise<MarkAsNotificationSentResponse & MarkAsNotificationSentResponseNonNullableFields>;
}
declare function queryBackInStockNotificationRequests$1(httpClient: HttpClient): QueryBackInStockNotificationRequestsSignature;
interface QueryBackInStockNotificationRequestsSignature {
    /**
     * Creates a query to retrieve a list of back in stock notification requests.
     *
     * The `queryBackInStockNotificationRequests()` method builds a query to retrieve a list of back in stock notification requests and returns a `RequestsQueryBuilder` object.
     *
     * The returned object contains the query definition, which is typically used to run the query using the `find()` method.
     *
     * You can refine the query by chaining `RequestsQueryBuilder` methods onto the query. `RequestsQueryBuilder` methods enable you to sort, filter, and control the results that `queryBackInStockNotificationRequests()` returns.
     *
     * The following `RequestsQueryBuilder` methods are supported for `queryBackInStockNotificationRequests()`. For a full description of the Requests object, see the object returned for the `items` property in `RequestsQueryResult`."
     */
    (): RequestsQueryBuilder;
}
declare function getBackInStockNotificationRequestsCountByCatalogReferences$1(httpClient: HttpClient): GetBackInStockNotificationRequestsCountByCatalogReferencesSignature;
interface GetBackInStockNotificationRequestsCountByCatalogReferencesSignature {
    /**
     * Retrieves the amount of back in stock requests for a given `catalogReference` item.
     * @param - `catalogReference` items to retrieve the notification request for.
     */
    (catalogReferences: CatalogReference$9[]): Promise<GetBackInStockNotificationRequestsCountByCatalogReferencesResponse & GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields>;
}
declare function reportItemsBackInStock$1(httpClient: HttpClient): ReportItemsBackInStockSignature;
interface ReportItemsBackInStockSignature {
    /**
     * Sends notifications for back in stock requests.
     *
     * > **Important:**
     * > Automations must be turned on in a [site's dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Go%20to%20Back-in-Stock&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https://www.wix.com/dashboard/{{metaSiteId}}/store/back-in-stock) for notifications to send.
     *
     * This endpoint triggers notifications for requests in 1 of 2 ways:
     * 1. For a specific item, with the `catalogReference` information.
     * 2. For specific requests, with `requestIds`.
     *
     * `itemDetails` are required and may populate dynamic values in the notification template, as follows:
     * + `itemDetails.name` passes to the template as `item.name`
     * + `itemDetails.price` passes to the template as `item.price`
     * + `itemDetails.image.url` passes to the template as `item.image.url`
     *
     * If the notification template doesn't include `item.price`, `item.name`, or `item.image.url`, values should
     * be passed in `extraAutomationTemplateParameters`.
     *
     * After this endpoint is called, the `status` for the request will update to `NOTIFICATION_SENT` if it sends
     * successfully, or to `FAILED` if it fails to send.
     * @param - Item details to use in notifications.
     *
     * `itemDetails` may populate dynamic valyes in the notification template, as follows:
     * + `itemDetails.name` passes to the template as `item.name`
     * + `itemDetails.price` passes to the template as `item.price`
     * + `itemDetails.image.url` passes to the template as `item.image.url`
     *
     * Use `extraAutomationTemplateParameters` to pass additional dynamic values.
     * @param - Report options.
     */
    (itemDetails: BackInStockItemDetails, options?: ReportItemsBackInStockOptions | undefined): Promise<void>;
}
declare const onBackInStockNotificationRequestCreated$1: EventDefinition<BackInStockNotificationRequestCreatedEnvelope, "wix.ecom.v1.back_in_stock_notification_request_created">;
declare const onBackInStockNotificationRequestDeleted$1: EventDefinition<BackInStockNotificationRequestDeletedEnvelope, "wix.ecom.v1.back_in_stock_notification_request_deleted">;
declare const onBackInStockNotificationRequestUpdated$1: EventDefinition<BackInStockNotificationRequestUpdatedEnvelope, "wix.ecom.v1.back_in_stock_notification_request_updated">;

declare function createEventModule$b<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createBackInStockNotificationRequest: MaybeContext<BuildRESTFunction<typeof createBackInStockNotificationRequest$1> & typeof createBackInStockNotificationRequest$1>;
declare const getBackInStockNotificationRequest: MaybeContext<BuildRESTFunction<typeof getBackInStockNotificationRequest$1> & typeof getBackInStockNotificationRequest$1>;
declare const deleteBackInStockNotificationRequest: MaybeContext<BuildRESTFunction<typeof deleteBackInStockNotificationRequest$1> & typeof deleteBackInStockNotificationRequest$1>;
declare const markAsNotificationSent: MaybeContext<BuildRESTFunction<typeof markAsNotificationSent$1> & typeof markAsNotificationSent$1>;
declare const queryBackInStockNotificationRequests: MaybeContext<BuildRESTFunction<typeof queryBackInStockNotificationRequests$1> & typeof queryBackInStockNotificationRequests$1>;
declare const getBackInStockNotificationRequestsCountByCatalogReferences: MaybeContext<BuildRESTFunction<typeof getBackInStockNotificationRequestsCountByCatalogReferences$1> & typeof getBackInStockNotificationRequestsCountByCatalogReferences$1>;
declare const reportItemsBackInStock: MaybeContext<BuildRESTFunction<typeof reportItemsBackInStock$1> & typeof reportItemsBackInStock$1>;

type _publicOnBackInStockNotificationRequestCreatedType = typeof onBackInStockNotificationRequestCreated$1;
/**
 * Triggered when a back in stock notification request is created.
 */
declare const onBackInStockNotificationRequestCreated: ReturnType<typeof createEventModule$b<_publicOnBackInStockNotificationRequestCreatedType>>;

type _publicOnBackInStockNotificationRequestDeletedType = typeof onBackInStockNotificationRequestDeleted$1;
/**
 * Triggered when a back in stock notification request is deleted.
 */
declare const onBackInStockNotificationRequestDeleted: ReturnType<typeof createEventModule$b<_publicOnBackInStockNotificationRequestDeletedType>>;

type _publicOnBackInStockNotificationRequestUpdatedType = typeof onBackInStockNotificationRequestUpdated$1;
/**
 * Triggered when a back in stock notification request is updated.
 */
declare const onBackInStockNotificationRequestUpdated: ReturnType<typeof createEventModule$b<_publicOnBackInStockNotificationRequestUpdatedType>>;

type index_d$o_BackInStockItemDetails = BackInStockItemDetails;
type index_d$o_BackInStockNotificationRequest = BackInStockNotificationRequest;
type index_d$o_BackInStockNotificationRequestCreatedEnvelope = BackInStockNotificationRequestCreatedEnvelope;
type index_d$o_BackInStockNotificationRequestDeletedEnvelope = BackInStockNotificationRequestDeletedEnvelope;
type index_d$o_BackInStockNotificationRequestNonNullableFields = BackInStockNotificationRequestNonNullableFields;
type index_d$o_BackInStockNotificationRequestUpdatedEnvelope = BackInStockNotificationRequestUpdatedEnvelope;
type index_d$o_BackInStockNotificationRequestsCount = BackInStockNotificationRequestsCount;
type index_d$o_CreateBackInStockNotificationRequestRequest = CreateBackInStockNotificationRequestRequest;
type index_d$o_CreateBackInStockNotificationRequestResponse = CreateBackInStockNotificationRequestResponse;
type index_d$o_CreateBackInStockNotificationRequestResponseNonNullableFields = CreateBackInStockNotificationRequestResponseNonNullableFields;
type index_d$o_DeleteBackInStockNotificationRequestRequest = DeleteBackInStockNotificationRequestRequest;
type index_d$o_DeleteBackInStockNotificationRequestResponse = DeleteBackInStockNotificationRequestResponse;
type index_d$o_File = File;
type index_d$o_GetBackInStockNotificationRequestRequest = GetBackInStockNotificationRequestRequest;
type index_d$o_GetBackInStockNotificationRequestResponse = GetBackInStockNotificationRequestResponse;
type index_d$o_GetBackInStockNotificationRequestResponseNonNullableFields = GetBackInStockNotificationRequestResponseNonNullableFields;
type index_d$o_GetBackInStockNotificationRequestsCountByCatalogReferencesRequest = GetBackInStockNotificationRequestsCountByCatalogReferencesRequest;
type index_d$o_GetBackInStockNotificationRequestsCountByCatalogReferencesResponse = GetBackInStockNotificationRequestsCountByCatalogReferencesResponse;
type index_d$o_GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields = GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields;
type index_d$o_InvalidateCache = InvalidateCache;
type index_d$o_InvalidateCacheGetByOneOf = InvalidateCacheGetByOneOf;
type index_d$o_MarkAsNotificationSentRequest = MarkAsNotificationSentRequest;
type index_d$o_MarkAsNotificationSentResponse = MarkAsNotificationSentResponse;
type index_d$o_MarkAsNotificationSentResponseNonNullableFields = MarkAsNotificationSentResponseNonNullableFields;
type index_d$o_Page = Page;
type index_d$o_QueryBackInStockNotificationRequestsRequest = QueryBackInStockNotificationRequestsRequest;
type index_d$o_QueryBackInStockNotificationRequestsResponse = QueryBackInStockNotificationRequestsResponse;
type index_d$o_QueryBackInStockNotificationRequestsResponseNonNullableFields = QueryBackInStockNotificationRequestsResponseNonNullableFields;
type index_d$o_ReportItemsBackInStockOptions = ReportItemsBackInStockOptions;
type index_d$o_ReportItemsBackInStockRequest = ReportItemsBackInStockRequest;
type index_d$o_ReportItemsBackInStockResponse = ReportItemsBackInStockResponse;
type index_d$o_RequestsQueryBuilder = RequestsQueryBuilder;
type index_d$o_RequestsQueryResult = RequestsQueryResult;
type index_d$o_URI = URI;
type index_d$o__publicOnBackInStockNotificationRequestCreatedType = _publicOnBackInStockNotificationRequestCreatedType;
type index_d$o__publicOnBackInStockNotificationRequestDeletedType = _publicOnBackInStockNotificationRequestDeletedType;
type index_d$o__publicOnBackInStockNotificationRequestUpdatedType = _publicOnBackInStockNotificationRequestUpdatedType;
declare const index_d$o_createBackInStockNotificationRequest: typeof createBackInStockNotificationRequest;
declare const index_d$o_deleteBackInStockNotificationRequest: typeof deleteBackInStockNotificationRequest;
declare const index_d$o_getBackInStockNotificationRequest: typeof getBackInStockNotificationRequest;
declare const index_d$o_getBackInStockNotificationRequestsCountByCatalogReferences: typeof getBackInStockNotificationRequestsCountByCatalogReferences;
declare const index_d$o_markAsNotificationSent: typeof markAsNotificationSent;
declare const index_d$o_onBackInStockNotificationRequestCreated: typeof onBackInStockNotificationRequestCreated;
declare const index_d$o_onBackInStockNotificationRequestDeleted: typeof onBackInStockNotificationRequestDeleted;
declare const index_d$o_onBackInStockNotificationRequestUpdated: typeof onBackInStockNotificationRequestUpdated;
declare const index_d$o_queryBackInStockNotificationRequests: typeof queryBackInStockNotificationRequests;
declare const index_d$o_reportItemsBackInStock: typeof reportItemsBackInStock;
declare namespace index_d$o {
  export { type ActionEvent$j as ActionEvent, type App$1 as App, type index_d$o_BackInStockItemDetails as BackInStockItemDetails, type index_d$o_BackInStockNotificationRequest as BackInStockNotificationRequest, type index_d$o_BackInStockNotificationRequestCreatedEnvelope as BackInStockNotificationRequestCreatedEnvelope, type index_d$o_BackInStockNotificationRequestDeletedEnvelope as BackInStockNotificationRequestDeletedEnvelope, type index_d$o_BackInStockNotificationRequestNonNullableFields as BackInStockNotificationRequestNonNullableFields, type index_d$o_BackInStockNotificationRequestUpdatedEnvelope as BackInStockNotificationRequestUpdatedEnvelope, type index_d$o_BackInStockNotificationRequestsCount as BackInStockNotificationRequestsCount, type BaseEventMetadata$b as BaseEventMetadata, type CatalogReference$9 as CatalogReference, type index_d$o_CreateBackInStockNotificationRequestRequest as CreateBackInStockNotificationRequestRequest, type index_d$o_CreateBackInStockNotificationRequestResponse as CreateBackInStockNotificationRequestResponse, type index_d$o_CreateBackInStockNotificationRequestResponseNonNullableFields as CreateBackInStockNotificationRequestResponseNonNullableFields, type CursorPaging$c as CursorPaging, type Cursors$c as Cursors, type index_d$o_DeleteBackInStockNotificationRequestRequest as DeleteBackInStockNotificationRequestRequest, type index_d$o_DeleteBackInStockNotificationRequestResponse as DeleteBackInStockNotificationRequestResponse, type DomainEvent$j as DomainEvent, type DomainEventBodyOneOf$j as DomainEventBodyOneOf, type Empty$c as Empty, type EntityCreatedEvent$j as EntityCreatedEvent, type EntityDeletedEvent$j as EntityDeletedEvent, type EntityUpdatedEvent$j as EntityUpdatedEvent, type EventMetadata$b as EventMetadata, type index_d$o_File as File, type index_d$o_GetBackInStockNotificationRequestRequest as GetBackInStockNotificationRequestRequest, type index_d$o_GetBackInStockNotificationRequestResponse as GetBackInStockNotificationRequestResponse, type index_d$o_GetBackInStockNotificationRequestResponseNonNullableFields as GetBackInStockNotificationRequestResponseNonNullableFields, type index_d$o_GetBackInStockNotificationRequestsCountByCatalogReferencesRequest as GetBackInStockNotificationRequestsCountByCatalogReferencesRequest, type index_d$o_GetBackInStockNotificationRequestsCountByCatalogReferencesResponse as GetBackInStockNotificationRequestsCountByCatalogReferencesResponse, type index_d$o_GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields as GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields, type IdentificationData$j as IdentificationData, type IdentificationDataIdOneOf$j as IdentificationDataIdOneOf, type index_d$o_InvalidateCache as InvalidateCache, type index_d$o_InvalidateCacheGetByOneOf as InvalidateCacheGetByOneOf, type index_d$o_MarkAsNotificationSentRequest as MarkAsNotificationSentRequest, type index_d$o_MarkAsNotificationSentResponse as MarkAsNotificationSentResponse, type index_d$o_MarkAsNotificationSentResponseNonNullableFields as MarkAsNotificationSentResponseNonNullableFields, type MessageEnvelope$i as MessageEnvelope, type index_d$o_Page as Page, type PlatformPaging$1 as PlatformPaging, type PlatformPagingMetadata$1 as PlatformPagingMetadata, type PlatformQuery$1 as PlatformQuery, type PlatformQueryPagingMethodOneOf$1 as PlatformQueryPagingMethodOneOf, type index_d$o_QueryBackInStockNotificationRequestsRequest as QueryBackInStockNotificationRequestsRequest, type index_d$o_QueryBackInStockNotificationRequestsResponse as QueryBackInStockNotificationRequestsResponse, type index_d$o_QueryBackInStockNotificationRequestsResponseNonNullableFields as QueryBackInStockNotificationRequestsResponseNonNullableFields, type index_d$o_ReportItemsBackInStockOptions as ReportItemsBackInStockOptions, type index_d$o_ReportItemsBackInStockRequest as ReportItemsBackInStockRequest, type index_d$o_ReportItemsBackInStockResponse as ReportItemsBackInStockResponse, type index_d$o_RequestsQueryBuilder as RequestsQueryBuilder, type index_d$o_RequestsQueryResult as RequestsQueryResult, type RestoreInfo$j as RestoreInfo, SortOrder$c as SortOrder, type Sorting$c as Sorting, Status$3 as Status, type index_d$o_URI as URI, WebhookIdentityType$i as WebhookIdentityType, type index_d$o__publicOnBackInStockNotificationRequestCreatedType as _publicOnBackInStockNotificationRequestCreatedType, type index_d$o__publicOnBackInStockNotificationRequestDeletedType as _publicOnBackInStockNotificationRequestDeletedType, type index_d$o__publicOnBackInStockNotificationRequestUpdatedType as _publicOnBackInStockNotificationRequestUpdatedType, index_d$o_createBackInStockNotificationRequest as createBackInStockNotificationRequest, index_d$o_deleteBackInStockNotificationRequest as deleteBackInStockNotificationRequest, index_d$o_getBackInStockNotificationRequest as getBackInStockNotificationRequest, index_d$o_getBackInStockNotificationRequestsCountByCatalogReferences as getBackInStockNotificationRequestsCountByCatalogReferences, index_d$o_markAsNotificationSent as markAsNotificationSent, index_d$o_onBackInStockNotificationRequestCreated as onBackInStockNotificationRequestCreated, index_d$o_onBackInStockNotificationRequestDeleted as onBackInStockNotificationRequestDeleted, index_d$o_onBackInStockNotificationRequestUpdated as onBackInStockNotificationRequestUpdated, onBackInStockNotificationRequestCreated$1 as publicOnBackInStockNotificationRequestCreated, onBackInStockNotificationRequestDeleted$1 as publicOnBackInStockNotificationRequestDeleted, onBackInStockNotificationRequestUpdated$1 as publicOnBackInStockNotificationRequestUpdated, index_d$o_queryBackInStockNotificationRequests as queryBackInStockNotificationRequests, index_d$o_reportItemsBackInStock as reportItemsBackInStock };
}

/**
 * The back in stock settings object holds information related to the state of collecting back in stock
 * notification requests.
 */
interface BackInStockSettings {
    /**
     * Information about collecting customer requests to receive
     * back in stock notifications.
     */
    collectionStates?: BackInStockCollectionState[];
}
interface BackInStockCollectionState {
    /** ID of the app to receive notification requests for. */
    appId?: string;
    /** Whether to collect requests for items from this app. */
    collectingRequests?: boolean;
}
interface StartCollectingRequestsRequest {
    /** ID of the app to start accepting notification requests for. */
    appId: string;
}
interface StartCollectingRequestsResponse {
    /** Back in stock settings info. */
    settings?: BackInStockSettings;
}
interface StopCollectingRequestsRequest {
    /** ID of the app to stop accepting notification requests for. */
    appId: string;
}
interface StopCollectingRequestsResponse {
    /** Back in stock settings info. */
    settings?: BackInStockSettings;
}
interface GetSettingsRequest {
}
interface GetSettingsResponse {
    /** Retrieved back in stock request settings. */
    settings?: BackInStockSettings;
}
interface BackInStockCollectionStateNonNullableFields {
    appId: string;
    collectingRequests: boolean;
}
interface BackInStockSettingsNonNullableFields {
    collectionStates: BackInStockCollectionStateNonNullableFields[];
}
interface StartCollectingRequestsResponseNonNullableFields {
    settings?: BackInStockSettingsNonNullableFields;
}
interface StopCollectingRequestsResponseNonNullableFields {
    settings?: BackInStockSettingsNonNullableFields;
}
interface GetSettingsResponseNonNullableFields {
    settings?: BackInStockSettingsNonNullableFields;
}

declare function startCollectingRequests$1(httpClient: HttpClient): StartCollectingRequestsSignature;
interface StartCollectingRequestsSignature {
    /**
     * Sets `settings.collectionStates.collectingRequests` to `true` for given `appId`.
     *
     * When the collection state is set to `true`, collecting requests is enabled and customers may request
     * notifications for out of stock products. While collecting is enabled, customers see a "Notify When Available"
     * button on out-of-stock items. Customers can click the button to enter their email address, which creates the
     * notification request.
     * @param - ID of the app to start accepting notification requests for.
     */
    (appId: string): Promise<StartCollectingRequestsResponse & StartCollectingRequestsResponseNonNullableFields>;
}
declare function stopCollectingRequests$1(httpClient: HttpClient): StopCollectingRequestsSignature;
interface StopCollectingRequestsSignature {
    /**
     * Sets `settings.collectionStates.collectingRequests` to `false` for given `appId`.
     *
     * When the collection state is set to `false`, collecting notification requests is disabled.
     * @param - ID of the app to stop accepting notification requests for.
     */
    (appId: string): Promise<StopCollectingRequestsResponse & StopCollectingRequestsResponseNonNullableFields>;
}
declare function getSettings$1(httpClient: HttpClient): GetSettingsSignature;
interface GetSettingsSignature {
    /**
     * Retrieves back in stock request settings.
     */
    (): Promise<GetSettingsResponse & GetSettingsResponseNonNullableFields>;
}

declare const startCollectingRequests: MaybeContext<BuildRESTFunction<typeof startCollectingRequests$1> & typeof startCollectingRequests$1>;
declare const stopCollectingRequests: MaybeContext<BuildRESTFunction<typeof stopCollectingRequests$1> & typeof stopCollectingRequests$1>;
declare const getSettings: MaybeContext<BuildRESTFunction<typeof getSettings$1> & typeof getSettings$1>;

type index_d$n_BackInStockCollectionState = BackInStockCollectionState;
type index_d$n_BackInStockSettings = BackInStockSettings;
type index_d$n_GetSettingsRequest = GetSettingsRequest;
type index_d$n_GetSettingsResponse = GetSettingsResponse;
type index_d$n_GetSettingsResponseNonNullableFields = GetSettingsResponseNonNullableFields;
type index_d$n_StartCollectingRequestsRequest = StartCollectingRequestsRequest;
type index_d$n_StartCollectingRequestsResponse = StartCollectingRequestsResponse;
type index_d$n_StartCollectingRequestsResponseNonNullableFields = StartCollectingRequestsResponseNonNullableFields;
type index_d$n_StopCollectingRequestsRequest = StopCollectingRequestsRequest;
type index_d$n_StopCollectingRequestsResponse = StopCollectingRequestsResponse;
type index_d$n_StopCollectingRequestsResponseNonNullableFields = StopCollectingRequestsResponseNonNullableFields;
declare const index_d$n_getSettings: typeof getSettings;
declare const index_d$n_startCollectingRequests: typeof startCollectingRequests;
declare const index_d$n_stopCollectingRequests: typeof stopCollectingRequests;
declare namespace index_d$n {
  export { type index_d$n_BackInStockCollectionState as BackInStockCollectionState, type index_d$n_BackInStockSettings as BackInStockSettings, type index_d$n_GetSettingsRequest as GetSettingsRequest, type index_d$n_GetSettingsResponse as GetSettingsResponse, type index_d$n_GetSettingsResponseNonNullableFields as GetSettingsResponseNonNullableFields, type index_d$n_StartCollectingRequestsRequest as StartCollectingRequestsRequest, type index_d$n_StartCollectingRequestsResponse as StartCollectingRequestsResponse, type index_d$n_StartCollectingRequestsResponseNonNullableFields as StartCollectingRequestsResponseNonNullableFields, type index_d$n_StopCollectingRequestsRequest as StopCollectingRequestsRequest, type index_d$n_StopCollectingRequestsResponse as StopCollectingRequestsResponse, type index_d$n_StopCollectingRequestsResponseNonNullableFields as StopCollectingRequestsResponseNonNullableFields, index_d$n_getSettings as getSettings, index_d$n_startCollectingRequests as startCollectingRequests, index_d$n_stopCollectingRequests as stopCollectingRequests };
}

interface Cart$1 {
    /** Cart ID. */
    _id?: string | null;
    /**
     * Line items.
     * @readonly
     */
    lineItems?: LineItem$6[];
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo$7;
    /**
     * Currency used for pricing.
     * @readonly
     */
    currency?: string;
    /**
     * Currency code used for all the converted prices that are returned.
     * For a site that supports multiple currencies, this is the currency the buyer selected.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string | null;
    /**
     * Site language in which original values are displayed.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrices?: boolean | null;
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit$8;
    /**
     * ID of the checkout that originated from this cart.
     * @readonly
     */
    checkoutId?: string | null;
    /**
     * Cart discounts.
     * @readonly
     */
    appliedDiscounts?: CartDiscount$1[];
    /**
     * Date and time the cart was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the cart was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Contact info. */
    contactInfo?: AddressWithContact$5;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$2;
}
interface LineItem$6 {
    /**
     * Line item ID.
     * @readonly
     */
    _id?: string | null;
    /** Item quantity. */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$8;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName$5;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: string;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice$4;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice$4;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice$4;
    /**
     * Line item description lines. Used for displaying the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine$5[];
    /**
     * Line item image details.
     * @readonly
     */
    image?: string;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo$3;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties$7;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType$6;
    /**
     * Type of selected payment option for current item. Defaults to `"FULL_PAYMENT_ONLINE"`.
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item happens as part of the checkout.
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `"MEMBERSHIP"` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` will be 0.
     * @readonly
     */
    paymentOption?: PaymentOptionType$6;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties$5;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + in most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription$5;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice$4;
    /** Selected membership to be used as payment for this item. Must be used with `lineItem.paymentOption` set to `MEMBERSHIP` or `MEMBERSHIP_OFFLINE`. This field can be empty when `lineItem.paymentOption` is set to `MEMBERSHIP_OFFLINE`. */
    selectedMembership?: SelectedMembership$4;
    /**
     * Tax group ID for this line item.
     * @readonly
     */
    taxGroupId?: string | null;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields$3;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$8 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs.
     *
     * Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from your Wix Stores catalog, learn more about [eCommerce integration](https://www.wix.com/velo/reference/wix-stores-backend/ecommerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ProductName$5 {
    /** **Required** - Original product name (in site's default language). */
    original?: string;
    /** Description product name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface MultiCurrencyPrice$4 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface DescriptionLine$5 extends DescriptionLineValueOneOf$5, DescriptionLineDescriptionLineValueOneOf$5 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$5;
    /** Description line color value. */
    colorInfo?: Color$5;
    /** Description line name. */
    name?: DescriptionLineName$5;
}
/** @oneof */
interface DescriptionLineValueOneOf$5 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$5;
    /** Description line color value. */
    colorInfo?: Color$5;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$5 {
}
interface DescriptionLineName$5 {
    /** Description line name in site's default language. */
    original?: string;
    /** Description line name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface PlainTextValue$5 {
    /** Description line plain text value in site's default language. */
    original?: string;
    /** Description line plain text value translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface Color$5 {
    /** Description line color name in site's default language. */
    original?: string;
    /** Description line color name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
    /**
     * HEX or RGB color code for display.
     *
     */
    code?: string | null;
}
declare enum DescriptionLineType$5 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface ItemAvailabilityInfo$3 {
    /**
     * Item availability status.
     *
     * NOT_FOUND - Item does not exist.
     * NOT_AVAILABLE - Not in stock.
     * PARTIALLY_AVAILABLE - Available quantity is less than requested.
     */
    status?: ItemAvailabilityStatus$3;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus$3 {
    AVAILABLE = "AVAILABLE",
    NOT_FOUND = "NOT_FOUND",
    /** Not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
interface PhysicalProperties$7 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface Scope$4 {
    /** Scope namespace (Wix Stores, Wix Bookings, Wix Events, Wix Pricing Plans) */
    namespace?: string;
    /** Coupon scope's applied group (e.g., event or ticket in Wix Events) */
    group?: Group$4;
}
interface Group$4 {
    /** Coupon scope's group (e.g., product or collection in Wix Stores). See [valid scope values](https://dev.wix.com/api/rest/coupons/coupons/valid-scope-values). */
    name?: string;
    /** Item ID (when the coupon scope is limited to just one item). */
    entityId?: string | null;
}
interface ItemType$6 extends ItemTypeItemTypeDataOneOf$6 {
    /** Preset item type. */
    preset?: ItemTypeItemType$6;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$6 {
    /** Preset item type. */
    preset?: ItemTypeItemType$6;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$6 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
interface SubscriptionOptionInfo$4 {
    /** Subscription option settings. */
    subscriptionSettings?: SubscriptionSettings$7;
    /** Subscription option title. */
    title?: Title$3;
    /** Subscription option description. */
    description?: Description$3;
}
interface SubscriptionSettings$7 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$7;
    /**
     * Interval of recurring payment.
     *
     * Default: `1`.
     * If SubscriptionFrequency is Day the minimum interval is 7
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal` is `true`. */
    billingCycles?: number | null;
    /**
     * Period until first cycle starts. If applied payNow will be 0
     * If None => no free trial
     */
    freeTrialPeriod?: FreeTrialPeriod$3;
    /** The date the subscription will start. The subscription will be charged either now or according to freeTrialDays. */
    startDate?: Date | null;
    /**
     * Whether to generate an order each billing cycle. An order will always be generated for the first billing cycle.
     * Default None => will behave like true
     */
    generateOrderEachBillingCycle?: boolean | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$7 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface FreeTrialPeriod$3 {
    /** Frequency of priod. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequency$7;
    /** interval of period */
    interval?: number;
}
interface Title$3 {
    /** Subscription option name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Subscription option name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Description$3 {
    /** Subscription option description. */
    original?: string;
    /** Translated subscription option description. */
    translated?: string | null;
}
interface SecuredMedia$4 {
    /** Media ID in Wix Media Manager. */
    _id?: string;
    /** Original filename. */
    fileName?: string;
    /** File type. */
    fileType?: FileType$4;
}
declare enum FileType$4 {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$6 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties$5 {
    /** The date and time for which the service is supposed to be provided. For example, the time of the class. */
    scheduledDate?: Date | null;
    /** The number of people participating in this service. For example, the number of people attending the class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface PriceDescription$5 {
    /**
     * **Required** - Original price description (in site's default language).
     *
     */
    original?: string;
    /** Product name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
/** Selected Membership */
interface SelectedMembership$4 {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
}
interface CatalogOverrideFields$3 {
    /** Item name. */
    productName?: ProductName$5;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine$5[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$7;
    /** Item image. */
    image?: string;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption$3;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface PaymentOption$3 {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType$6;
}
interface TaxableAddress$6 extends TaxableAddressTaxableAddressDataOneOf$6 {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType$6;
}
/** @oneof */
interface TaxableAddressTaxableAddressDataOneOf$6 {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType$6;
}
declare enum TaxableAddressType$6 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
interface ExtendedFields$a {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface Policy$3 {
    /** Policy title - should be translated */
    title?: string;
    /** Policy content - should be translated */
    content?: string;
}
/** Buyer Info */
interface BuyerInfo$7 extends BuyerInfoIdOneOf$5 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the cart owner is a Wix user.
     * @readonly
     */
    userId?: string;
    /** Contact ID. For more information, see the Contacts API. */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$5 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the cart owner is a Wix user.
     * @readonly
     */
    userId?: string;
}
declare enum WeightUnit$8 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface CartDiscount$1 extends CartDiscountDiscountSourceOneOf$1 {
    /** Coupon details. */
    coupon?: Coupon$6;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$6;
}
/** @oneof */
interface CartDiscountDiscountSourceOneOf$1 {
    /** Coupon details. */
    coupon?: Coupon$6;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$6;
}
interface Coupon$6 {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
}
interface MerchantDiscount$6 {
    /** Discount value. */
    amount?: MultiCurrencyPrice$4;
}
/** Billing Info and shipping details */
interface AddressWithContact$5 {
    /** Address. */
    address?: Address$a;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$6;
}
/** Physical address */
interface Address$a {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$9;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$9 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation$9 {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
/** Full contact details for an address */
interface FullAddressContactDetails$6 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$7;
}
interface VatId$7 {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$7;
}
/** tax info types */
declare enum VatType$7 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface SelectedShippingOption$2 {
    /** Carrier ID. */
    carrierId?: string | null;
    /** Selected shipping option code. For example, "usps_std_overnight". */
    code?: string;
}
interface GetCurrentCartRequest$1 {
}
interface GetCurrentCartResponse$1 {
    /** Current session's active cart. */
    cart?: Cart$1;
}
interface UpdateCartRequest$1 {
    /** Cart info. */
    cartInfo?: Cart$1;
    /** The code of an existing coupon to apply to the cart. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput$3[];
    /** Catalog line items. */
    lineItems?: LineItem$6[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$4[];
}
interface MerchantDiscountInput$3 {
    /** Discount amount. */
    amount?: string;
    /** IDs of the line items the discount applies to. */
    lineItemIds?: string[];
}
interface CustomLineItem$4 {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$5;
    /** Custom line item description lines. Used for displaying the cart, checkout and order. */
    descriptionLines?: DescriptionLine$5[];
    /**
     * Custom line item media. Supported formats:
     * + Link to an image/video from the [Wix Media Manager](https://support.wix.com/en/article/wix-media-about-the-media-manager) - `"wix:image://v1/3c76e2_c53...4ea4~mv2.jpg#originWidth=1000&originHeight=1000"`.
     * + An image from the web - `"http(s)://<image url>"`.
     */
    media?: string;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    _id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName$5;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: string;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$6;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$7;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$6;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties$5;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$8;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface UpdateCartResponse$1 {
    /** Updated Cart. */
    cart?: Cart$1;
}
interface AddToCurrentCartRequest$1 {
    /** Catalog line items. */
    lineItems?: LineItem$6[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$4[];
}
interface AddToCartResponse$1 {
    /** Updated cart. */
    cart?: Cart$1;
}
interface AddToCurrentCartAndEstimateTotalsRequest$1 {
    /** Catalog line items. */
    lineItems?: LineItem$6[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$4[];
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$2;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$a;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$a;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships$4;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
interface SelectedMemberships$4 {
    /** Selected memberships. */
    memberships?: HostSelectedMembership$1[];
}
interface HostSelectedMembership$1 {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface EstimateTotalsResponse$1 {
    /** Cart. */
    cart?: Cart$1;
    /** Calculated line items. */
    calculatedLineItems?: CalculatedLineItem$2[];
    /** Price summary. */
    priceSummary?: PriceSummary$6;
    /** Applied gift card. */
    giftCard?: GiftCard$6;
    /** Tax summary. */
    taxSummary?: TaxSummary$6;
    /** Shipping information. */
    shippingInfo?: ShippingInformation$4;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$6[];
    /** Calculation errors. */
    calculationErrors?: CalculationErrors$5;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$8;
    /** Currency used for pricing in this store. */
    currency?: string;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary$6;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary$6;
    /** Information about valid and invalid memberships, and which ones are selected for usage. */
    membershipOptions?: MembershipOptions$4;
    /** Additional fees */
    additionalFees?: AdditionalFee$6[];
    /**
     * List of validation violations raised by the [Validations Custom Extension SPI](https://www.wix.com/velo/reference/spis/wix-ecom/ecom-validations/introduction).
     * @readonly
     */
    violations?: Violation$3[];
}
interface CalculatedLineItem$2 {
    /** Line item ID. */
    lineItemId?: string;
    /** Price breakdown for this line item. */
    pricesBreakdown?: LineItemPricesData$2;
    /**
     * Type of selected payment option for current item. Defaults to `"FULL_PAYMENT_ONLINE"`.
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item happens as part of the checkout.
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `"MEMBERSHIP"` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` will be 0.
     */
    paymentOption?: PaymentOptionType$6;
}
interface LineItemPricesData$2 {
    /** Total price after discounts and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$4;
    /** Total price after discounts, and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$4;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$6;
    /** Total discount for all line items. */
    totalDiscount?: MultiCurrencyPrice$4;
    /** Catalog price after catalog discount and automatic discounts. */
    price?: MultiCurrencyPrice$4;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: MultiCurrencyPrice$4;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: MultiCurrencyPrice$4;
    /** Item price **before** line item discounts and **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: MultiCurrencyPrice$4;
}
interface ItemTaxFullDetails$6 {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice$4;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice$4;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown$4[];
}
interface TaxRateBreakdown$4 {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice$4;
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface TaxBreakdown$4 {
    /** The name of the jurisdiction to which this tax detail applies. For example, "New York" or "Quebec". */
    jurisdiction?: string | null;
    /** The amount of this line item price that was considered nontaxable. (Decimal value) */
    nonTaxableAmount?: MultiCurrencyPrice$4;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.0000 signifies 200% tax. (Decimal value) */
    rate?: string | null;
    /** The amount of tax estimated for this line item. (Decimal value) */
    taxAmount?: MultiCurrencyPrice$4;
    /** The taxable amount of this line item. */
    taxableAmount?: MultiCurrencyPrice$4;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** The type of the jurisdiction in which this tax detail applies. */
    jurisdictionType?: JurisdictionType$6;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$6 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface PriceSummary$6 {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice$4;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice$4;
    /** Total tax. */
    tax?: MultiCurrencyPrice$4;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice$4;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice$4;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice$4;
}
interface GiftCard$6 {
    /**
     * Gift Card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice$4;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface TaxSummary$6 {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice$4;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice$4;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails$4;
}
interface TaxCalculationDetails$4 extends TaxCalculationDetailsCalculationDetailsOneOf$4 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$4;
    /** Error details and reason for tax rate fallback. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$4;
    /**
     * Rate calculation type. Supported values:
     * + `"AUTO_RATE"`
     * + `"FALLBACK_RATE"`
     * + `"MANUAL_RATE"`
     * + `"NO_TAX_COLLECTED"`
     */
    rateType?: RateType$4;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf$4 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$4;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$4;
}
declare enum RateType$4 {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason$4 {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails$4 {
    /**
     * Reason for fallback. Supported values:
     * + `"AUTO_TAX_FAILED"`
     * + `"AUTO_TAX_DEACTIVATED"`
     */
    fallbackReason?: FallbackReason$4;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError$b;
}
declare enum FallbackReason$4 {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
interface ApplicationError$b {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface AggregatedTaxBreakdown$4 {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionTypeEnum?: JurisdictionType$6;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.000 signifies 200% tax. (Decimal value) */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: MultiCurrencyPrice$4;
}
interface ShippingInformation$4 {
    /** Shipping region. */
    region?: ShippingRegion$6;
    /** Selected shipping option. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption$4;
    /** All shipping options. */
    carrierServiceOptions?: CarrierServiceOption$4[];
}
interface ShippingRegion$6 {
    /**
     * Shipping region ID.
     * @readonly
     */
    _id?: string;
    /** Shipping region name. */
    name?: string;
}
interface SelectedCarrierServiceOption$4 {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics$7;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices$4;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge$4[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface DeliveryLogistics$7 {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails$8;
}
interface PickupDetails$8 {
    /** Pickup address. */
    address?: Address$a;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod$7;
}
declare enum PickupMethod$7 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$7 {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
interface SelectedCarrierServiceOptionPrices$4 {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$4;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$4;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$6;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice$4;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice$4;
}
interface SelectedCarrierServiceOptionOtherCharge$4 {
    /** Type of additional cost. */
    type?: ChargeType$6;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices$4;
}
declare enum ChargeType$6 {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface CarrierServiceOption$4 {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption$6[];
}
interface ShippingOption$6 {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics$7;
    /** Sipping price information. */
    cost?: ShippingPrice$6;
}
interface ShippingPrice$6 {
    /** Shipping price. */
    price?: MultiCurrencyPrice$4;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge$4[];
}
interface OtherCharge$4 {
    /** Type of additional cost. */
    type?: ChargeType$6;
    /** Price of added cost. */
    price?: MultiCurrencyPrice$4;
}
interface AppliedDiscount$6 extends AppliedDiscountDiscountSourceOneOf$6 {
    /** Coupon details. */
    coupon?: V1Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount$1;
    /** Discount rule */
    discountRule?: DiscountRule$6;
    /** Discount type. */
    discountType?: DiscountType$6;
    /**
     * IDs of the line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$6 {
    /** Coupon details. */
    coupon?: V1Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount$1;
    /** Discount rule */
    discountRule?: DiscountRule$6;
}
declare enum DiscountType$6 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface V1Coupon$1 {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice$4;
    /** Coupon name. */
    name?: string;
}
interface V1MerchantDiscount$1 {
    /** Discount value. */
    amount?: MultiCurrencyPrice$4;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule$6 {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$6;
    /** Discount value. */
    amount?: MultiCurrencyPrice$4;
}
interface DiscountRuleName$6 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Discount rule name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface LineItemDiscount$6 {
    /** ID of line item the discount applies to. */
    _id?: string;
    /** Discount value. */
    totalDiscountAmount?: MultiCurrencyPrice$4;
}
interface CalculationErrors$5 extends CalculationErrorsShippingCalculationErrorOneOf$5 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$6;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$5;
    /** Tax calculation error. */
    taxCalculationError?: Details$6;
    /** Coupon calculation error. */
    couponCalculationError?: Details$6;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details$6;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$b[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details$6;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details$6;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$5 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$6;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$5;
}
interface Details$6 extends DetailsKindOneOf$6 {
    applicationError?: ApplicationError$b;
    validationError?: ValidationError$6;
    systemError?: SystemError$6;
    /**
     * Deprecated in APIs. Used to enable migration from rendering arbitrary tracing to rest response.
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$6 {
    applicationError?: ApplicationError$b;
    validationError?: ValidationError$6;
    systemError?: SystemError$6;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$6 {
    fieldViolations?: FieldViolation$6[];
}
declare enum RuleType$6 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$6 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$6;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$6 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$5 {
    /** Carrier errors. */
    errors?: CarrierError$6[];
}
interface CarrierError$6 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$6;
}
interface MembershipOptions$4 {
    /** List of payment options that can be used. */
    eligibleMemberships?: Membership$4[];
    /** List of payment options that are owned by the member, but cannot be used due to reason provided. */
    invalidMemberships?: InvalidMembership$4[];
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: HostSelectedMembership$1[];
}
interface Membership$4 {
    /** Membership ID. */
    _id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName$6;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits$4;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName$6 {
    /** Membership name. */
    original?: string;
    /** Membership name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface MembershipPaymentCredits$4 {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership$4 {
    /** Membership details. */
    membership?: Membership$4;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface AdditionalFee$6 {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice$4;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$6;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice$4;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice$4;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface Violation$3 {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity$3;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target$3;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity$3 {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target$3 extends TargetTargetTypeOneOf$3 {
    /** General (other) violation. */
    other?: Other$3;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$3;
}
/** @oneof */
interface TargetTargetTypeOneOf$3 {
    /** General (other) violation. */
    other?: Other$3;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$3;
}
/** Available locations on the webpage */
declare enum NameInOther$3 {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem$3 {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix$3 {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other$3 {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther$3;
}
/** Specific line item violation. */
interface TargetLineItem$3 {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem$3;
    /** ID of the line item containing the violation. */
    _id?: string | null;
}
interface RemoveLineItemsFromCurrentCartRequest$1 {
    /** IDs of the line items to remove from the cart. */
    lineItemIds: string[];
}
interface RemoveLineItemsResponse$2 {
    /** Updated cart. */
    cart?: Cart$1;
}
interface CreateCheckoutFromCurrentCartRequest$1 {
    /** **Required**. Sales channel type. */
    channelType?: ChannelType$6;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$a;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$a;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$2;
    /** Mandatory when setting a billing or shipping address if the site visitor isn't logged in. */
    email?: string | null;
}
declare enum ChannelType$6 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CreateCheckoutResponse$2 {
    /** The newly created checkout's ID. */
    checkoutId?: string;
}
interface RemoveCouponFromCurrentCartRequest$1 {
}
interface RemoveCouponResponse$2 {
    /** Updated cart. */
    cart?: Cart$1;
}
interface UpdateCurrentCartLineItemQuantityRequest$1 {
    /** Line item IDs and their new quantity. */
    lineItems: LineItemQuantityUpdate$2[];
}
interface LineItemQuantityUpdate$2 {
    /** Line item ID. Required. */
    _id?: string;
    /** New quantity. Number must be 1 or higher. Required. */
    quantity?: number;
}
interface UpdateLineItemsQuantityResponse$2 {
    /** Updated cart. */
    cart?: Cart$1;
}
interface EstimateCurrentCartTotalsRequest$1 {
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$2;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$a;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$a;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships$4;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
interface DeleteCurrentCartRequest$1 {
}
interface DeleteCartResponse$1 {
}
interface DomainEvent$i extends DomainEventBodyOneOf$i {
    createdEvent?: EntityCreatedEvent$i;
    updatedEvent?: EntityUpdatedEvent$i;
    deletedEvent?: EntityDeletedEvent$i;
    actionEvent?: ActionEvent$i;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$i {
    createdEvent?: EntityCreatedEvent$i;
    updatedEvent?: EntityUpdatedEvent$i;
    deletedEvent?: EntityDeletedEvent$i;
    actionEvent?: ActionEvent$i;
}
interface EntityCreatedEvent$i {
    entity?: string;
}
interface RestoreInfo$i {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$i {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$i {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$i {
    body?: string;
}
interface MessageEnvelope$h {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$i;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$i extends IdentificationDataIdOneOf$i {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$h;
}
/** @oneof */
interface IdentificationDataIdOneOf$i {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$h {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface CreateCartRequest$1 {
    /** Cart info. */
    cartInfo?: Cart$1;
    /** The code of an existing coupon to apply to the cart. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will apply to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput$3[];
    /** Catalog line items. */
    lineItems?: LineItem$6[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$4[];
}
interface CreateCartResponse$1 {
    /** Cart. */
    cart?: Cart$1;
}
interface GetCartRequest$1 {
    /** ID of the cart to retrieve. */
    _id: string;
}
interface GetCartResponse$1 {
    /** The requested cart. */
    cart?: Cart$1;
}
interface GetCartByCheckoutIdRequest$1 {
    /** Checkout ID. */
    _id?: string;
}
interface GetCartByCheckoutIdResponse$1 {
    /** The requested cart. */
    cart?: Cart$1;
}
interface AddToCartRequest$1 {
    /** Cart ID. */
    _id: string;
    /** Catalog line items. */
    lineItems?: LineItem$6[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$4[];
}
interface RemoveLineItemsRequest$2 {
    /** Cart ID. */
    _id: string;
    /** IDs of the line items to remove from the cart. */
    lineItemIds: string[];
}
interface CreateCheckoutRequest$2 {
    /** Cart ID. */
    _id: string;
    /** **Required**. Sales channel type. */
    channelType?: ChannelType$6;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$a;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$a;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$2;
    /** Mandatory when setting a billing or shipping address if the site visitor isn't logged in. */
    email?: string | null;
}
interface RemoveCouponRequest$2 {
    /** Cart ID. */
    _id: string;
}
interface UpdateLineItemsQuantityRequest$2 {
    /** Cart ID. */
    _id: string;
    /** Line item IDs and their new quantity. */
    lineItems: LineItemQuantityUpdate$2[];
}
interface EstimateTotalsRequest$1 {
    /** Cart ID. */
    _id: string;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$2;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$a;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$a;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships$4;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
interface DeleteCartRequest$1 {
    /** ID of the cart to delete. */
    _id: string;
}
interface Empty$b {
}
interface CatalogReferenceNonNullableFields$5 {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields$5 {
    original: string;
}
interface MultiCurrencyPriceNonNullableFields$3 {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface PlainTextValueNonNullableFields$5 {
    original: string;
}
interface ColorNonNullableFields$5 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$5 {
    original: string;
}
interface DescriptionLineNonNullableFields$5 {
    plainText?: PlainTextValueNonNullableFields$5;
    colorInfo?: ColorNonNullableFields$5;
    plainTextValue?: PlainTextValueNonNullableFields$5;
    color: string;
    name?: DescriptionLineNameNonNullableFields$5;
    lineType: DescriptionLineType$5;
}
interface ItemAvailabilityInfoNonNullableFields$2 {
    status: ItemAvailabilityStatus$3;
}
interface PhysicalPropertiesNonNullableFields$5 {
    shippable: boolean;
}
interface GroupNonNullableFields$2 {
    name: string;
}
interface ScopeNonNullableFields$2 {
    namespace: string;
    group?: GroupNonNullableFields$2;
}
interface ItemTypeNonNullableFields$5 {
    preset: ItemTypeItemType$6;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields$3 {
    frequency: SubscriptionFrequency$7;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields$5 {
    frequency: SubscriptionFrequency$7;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields$3;
}
interface TitleNonNullableFields$3 {
    original: string;
}
interface DescriptionNonNullableFields$3 {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields$3 {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$5;
    title?: TitleNonNullableFields$3;
    description?: DescriptionNonNullableFields$3;
}
interface SecuredMediaNonNullableFields$3 {
    _id: string;
    fileName: string;
    fileType: FileType$4;
}
interface PriceDescriptionNonNullableFields$5 {
    original: string;
}
interface SelectedMembershipNonNullableFields$3 {
    _id: string;
    appId: string;
}
interface PaymentOptionNonNullableFields$3 {
    value: PaymentOptionType$6;
}
interface CatalogOverrideFieldsNonNullableFields$3 {
    productName?: ProductNameNonNullableFields$5;
    descriptionLines: DescriptionLineNonNullableFields$5[];
    physicalProperties?: PhysicalPropertiesNonNullableFields$5;
    image: string;
    paymentOption?: PaymentOptionNonNullableFields$3;
}
interface TaxableAddressNonNullableFields$5 {
    addressType: TaxableAddressType$6;
}
interface PolicyNonNullableFields$3 {
    title: string;
    content: string;
}
interface LineItemNonNullableFields$2 {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields$5;
    productName?: ProductNameNonNullableFields$5;
    url: string;
    price?: MultiCurrencyPriceNonNullableFields$3;
    fullPrice?: MultiCurrencyPriceNonNullableFields$3;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$3;
    descriptionLines: DescriptionLineNonNullableFields$5[];
    image: string;
    availability?: ItemAvailabilityInfoNonNullableFields$2;
    physicalProperties?: PhysicalPropertiesNonNullableFields$5;
    couponScopes: ScopeNonNullableFields$2[];
    itemType?: ItemTypeNonNullableFields$5;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields$3;
    digitalFile?: SecuredMediaNonNullableFields$3;
    paymentOption: PaymentOptionType$6;
    priceDescription?: PriceDescriptionNonNullableFields$5;
    depositAmount?: MultiCurrencyPriceNonNullableFields$3;
    selectedMembership?: SelectedMembershipNonNullableFields$3;
    customLineItem: boolean;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields$3;
    savePaymentMethod: boolean;
    taxableAddress?: TaxableAddressNonNullableFields$5;
    policies: PolicyNonNullableFields$3[];
}
interface BuyerInfoNonNullableFields$4 {
    visitorId: string;
    memberId: string;
    userId: string;
}
interface CouponNonNullableFields$5 {
    _id: string;
    code: string;
}
interface MerchantDiscountNonNullableFields$5 {
    amount?: MultiCurrencyPriceNonNullableFields$3;
}
interface CartDiscountNonNullableFields$1 {
    coupon?: CouponNonNullableFields$5;
    merchantDiscount?: MerchantDiscountNonNullableFields$5;
}
interface StreetAddressNonNullableFields$8 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$7 {
    streetAddress?: StreetAddressNonNullableFields$8;
}
interface VatIdNonNullableFields$3 {
    _id: string;
    type: VatType$7;
}
interface FullAddressContactDetailsNonNullableFields$4 {
    vatId?: VatIdNonNullableFields$3;
}
interface AddressWithContactNonNullableFields$4 {
    address?: AddressNonNullableFields$7;
    contactDetails?: FullAddressContactDetailsNonNullableFields$4;
}
interface SelectedShippingOptionNonNullableFields$1 {
    code: string;
}
interface CartNonNullableFields$1 {
    lineItems: LineItemNonNullableFields$2[];
    buyerInfo?: BuyerInfoNonNullableFields$4;
    currency: string;
    conversionCurrency: string;
    weightUnit: WeightUnit$8;
    subtotal?: MultiCurrencyPriceNonNullableFields$3;
    appliedDiscounts: CartDiscountNonNullableFields$1[];
    contactInfo?: AddressWithContactNonNullableFields$4;
    selectedShippingOption?: SelectedShippingOptionNonNullableFields$1;
}
interface GetCurrentCartResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
}
interface UpdateCartResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
}
interface AddToCartResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
}
interface RemoveLineItemsResponseNonNullableFields$2 {
    cart?: CartNonNullableFields$1;
}
interface CreateCheckoutResponseNonNullableFields$2 {
    checkoutId: string;
}
interface RemoveCouponResponseNonNullableFields$2 {
    cart?: CartNonNullableFields$1;
}
interface UpdateLineItemsQuantityResponseNonNullableFields$2 {
    cart?: CartNonNullableFields$1;
}
interface TaxRateBreakdownNonNullableFields$3 {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields$3;
    exemptAmount?: MultiCurrencyPriceNonNullableFields$3;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields$3;
}
interface TaxBreakdownNonNullableFields$3 {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields$3;
    taxAmount?: MultiCurrencyPriceNonNullableFields$3;
    taxableAmount?: MultiCurrencyPriceNonNullableFields$3;
    jurisdictionType: JurisdictionType$6;
}
interface ItemTaxFullDetailsNonNullableFields$5 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$3;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields$3;
    rateBreakdown: TaxRateBreakdownNonNullableFields$3[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields$3;
    taxBreakdown: TaxBreakdownNonNullableFields$3[];
}
interface LineItemPricesDataNonNullableFields$2 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$3;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$3;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$5;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$3;
    price?: MultiCurrencyPriceNonNullableFields$3;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$3;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields$3;
    fullPrice?: MultiCurrencyPriceNonNullableFields$3;
}
interface CalculatedLineItemNonNullableFields$2 {
    lineItemId: string;
    pricesBreakdown?: LineItemPricesDataNonNullableFields$2;
    paymentOption: PaymentOptionType$6;
    taxableAddress?: TaxableAddressNonNullableFields$5;
}
interface PriceSummaryNonNullableFields$5 {
    subtotal?: MultiCurrencyPriceNonNullableFields$3;
    shipping?: MultiCurrencyPriceNonNullableFields$3;
    tax?: MultiCurrencyPriceNonNullableFields$3;
    discount?: MultiCurrencyPriceNonNullableFields$3;
    total?: MultiCurrencyPriceNonNullableFields$3;
    additionalFees?: MultiCurrencyPriceNonNullableFields$3;
}
interface GiftCardNonNullableFields$4 {
    _id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields$3;
    appId: string;
}
interface ApplicationErrorNonNullableFields$a {
    code: string;
    description: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields$3 {
    fallbackReason: FallbackReason$4;
    error?: ApplicationErrorNonNullableFields$a;
}
interface TaxCalculationDetailsNonNullableFields$3 {
    manualRateReason: ManualCalculationReason$4;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields$3;
    rateType: RateType$4;
}
interface AggregatedTaxBreakdownNonNullableFields$3 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType$6;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields$3;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields$3;
}
interface TaxSummaryNonNullableFields$5 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$3;
    totalTax?: MultiCurrencyPriceNonNullableFields$3;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields$3;
    totalExempt?: MultiCurrencyPriceNonNullableFields$3;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields$3[];
}
interface ShippingRegionNonNullableFields$3 {
    _id: string;
    name: string;
}
interface PickupDetailsNonNullableFields$6 {
    address?: AddressNonNullableFields$7;
    businessLocation: boolean;
    pickupMethod: PickupMethod$7;
}
interface DeliveryLogisticsNonNullableFields$6 {
    pickupDetails?: PickupDetailsNonNullableFields$6;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields$3 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$3;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$3;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$5;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$3;
    price?: MultiCurrencyPriceNonNullableFields$3;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields$3 {
    type: ChargeType$6;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$3;
}
interface SelectedCarrierServiceOptionNonNullableFields$3 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$6;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$3;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields$3[];
}
interface OtherChargeNonNullableFields$3 {
    type: ChargeType$6;
    price?: MultiCurrencyPriceNonNullableFields$3;
}
interface ShippingPriceNonNullableFields$5 {
    price?: MultiCurrencyPriceNonNullableFields$3;
    otherCharges: OtherChargeNonNullableFields$3[];
}
interface ShippingOptionNonNullableFields$5 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$6;
    cost?: ShippingPriceNonNullableFields$5;
}
interface CarrierServiceOptionNonNullableFields$3 {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields$5[];
}
interface ShippingInformationNonNullableFields$4 {
    region?: ShippingRegionNonNullableFields$3;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields$3;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields$3[];
}
interface V1CouponNonNullableFields$1 {
    _id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields$3;
    name: string;
    couponType: string;
}
interface V1MerchantDiscountNonNullableFields$1 {
    amount?: MultiCurrencyPriceNonNullableFields$3;
}
interface DiscountRuleNameNonNullableFields$5 {
    original: string;
}
interface DiscountRuleNonNullableFields$5 {
    _id: string;
    name?: DiscountRuleNameNonNullableFields$5;
    amount?: MultiCurrencyPriceNonNullableFields$3;
}
interface LineItemDiscountNonNullableFields$5 {
    _id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields$3;
}
interface AppliedDiscountNonNullableFields$5 {
    coupon?: V1CouponNonNullableFields$1;
    merchantDiscount?: V1MerchantDiscountNonNullableFields$1;
    discountRule?: DiscountRuleNonNullableFields$5;
    discountType: DiscountType$6;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$5[];
}
interface FieldViolationNonNullableFields$5 {
    field: string;
    description: string;
    violatedRule: RuleType$6;
}
interface ValidationErrorNonNullableFields$5 {
    fieldViolations: FieldViolationNonNullableFields$5[];
}
interface DetailsNonNullableFields$5 {
    applicationError?: ApplicationErrorNonNullableFields$a;
    validationError?: ValidationErrorNonNullableFields$5;
}
interface CarrierErrorNonNullableFields$4 {
    carrierId: string;
    error?: DetailsNonNullableFields$5;
}
interface CarrierErrorsNonNullableFields$4 {
    errors: CarrierErrorNonNullableFields$4[];
}
interface CalculationErrorsNonNullableFields$4 {
    generalShippingCalculationError?: DetailsNonNullableFields$5;
    carrierErrors?: CarrierErrorsNonNullableFields$4;
    taxCalculationError?: DetailsNonNullableFields$5;
    couponCalculationError?: DetailsNonNullableFields$5;
    giftCardCalculationError?: DetailsNonNullableFields$5;
    orderValidationErrors: ApplicationErrorNonNullableFields$a[];
    membershipError?: DetailsNonNullableFields$5;
    discountsCalculationError?: DetailsNonNullableFields$5;
}
interface MembershipNameNonNullableFields$5 {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields$3 {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields$3 {
    _id: string;
    appId: string;
    name?: MembershipNameNonNullableFields$5;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields$3;
}
interface InvalidMembershipNonNullableFields$3 {
    membership?: MembershipNonNullableFields$3;
    reason: string;
}
interface HostSelectedMembershipNonNullableFields$1 {
    _id: string;
    appId: string;
    lineItemIds: string[];
}
interface MembershipOptionsNonNullableFields$3 {
    eligibleMemberships: MembershipNonNullableFields$3[];
    invalidMemberships: InvalidMembershipNonNullableFields$3[];
    selectedMemberships: HostSelectedMembershipNonNullableFields$1[];
}
interface AdditionalFeeNonNullableFields$4 {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields$3;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$5;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields$3;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields$3;
    lineItemIds: string[];
}
interface OtherNonNullableFields$2 {
    name: NameInOther$3;
}
interface TargetLineItemNonNullableFields$2 {
    name: NameInLineItem$3;
    suggestedFix: SuggestedFix$3;
}
interface TargetNonNullableFields$2 {
    other?: OtherNonNullableFields$2;
    lineItem?: TargetLineItemNonNullableFields$2;
}
interface ViolationNonNullableFields$2 {
    severity: Severity$3;
    target?: TargetNonNullableFields$2;
}
interface EstimateTotalsResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
    calculatedLineItems: CalculatedLineItemNonNullableFields$2[];
    priceSummary?: PriceSummaryNonNullableFields$5;
    giftCard?: GiftCardNonNullableFields$4;
    taxSummary?: TaxSummaryNonNullableFields$5;
    shippingInfo?: ShippingInformationNonNullableFields$4;
    appliedDiscounts: AppliedDiscountNonNullableFields$5[];
    calculationErrors?: CalculationErrorsNonNullableFields$4;
    weightUnit: WeightUnit$8;
    currency: string;
    payNow?: PriceSummaryNonNullableFields$5;
    payLater?: PriceSummaryNonNullableFields$5;
    membershipOptions?: MembershipOptionsNonNullableFields$3;
    additionalFees: AdditionalFeeNonNullableFields$4[];
    violations: ViolationNonNullableFields$2[];
}
interface CreateCartResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
}
interface GetCartResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
}
interface BaseEventMetadata$a {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$i;
}
interface EventMetadata$a extends BaseEventMetadata$a {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface CartUpdatedEnvelope$1 {
    entity: Cart$1;
    metadata: EventMetadata$a;
}
interface CartDeletedEnvelope$1 {
    metadata: EventMetadata$a;
}
interface CartCreatedEnvelope$1 {
    entity: Cart$1;
    metadata: EventMetadata$a;
}
interface CreateCartOptions {
    /** Cart info. */
    cartInfo?: Cart$1;
    /** The code of an existing coupon to apply to the cart. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will apply to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput$3[];
    /** Catalog line items. */
    lineItems?: LineItem$6[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$4[];
}
interface UpdateCartOptions {
    /** The information for the cart being updated. */
    cartInfo: {
        /** ID of the cart to be updated. */
        _id?: string | null;
        /**
         * Line items.
         * @readonly
         */
        lineItems?: LineItem$6[];
        /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
        buyerNote?: string | null;
        /** Buyer information. */
        buyerInfo?: BuyerInfo$7;
        /**
         * Currency used for pricing.
         * @readonly
         */
        currency?: string;
        /**
         * Currency code used for all the converted prices that are returned.
         * For a site that supports multiple currencies, this is the currency the buyer selected.
         * @readonly
         */
        conversionCurrency?: string;
        /**
         * Language for communication with the buyer. Defaults to the site language.
         * For a site that supports multiple languages, this is the language the buyer selected.
         * @readonly
         */
        buyerLanguage?: string | null;
        /**
         * Site language in which original values are displayed.
         * @readonly
         */
        siteLanguage?: string | null;
        /**
         * Whether tax is included in line item prices.
         * @readonly
         */
        taxIncludedInPrices?: boolean | null;
        /**
         * Weight measurement unit - defaults to site's weight unit.
         * @readonly
         */
        weightUnit?: WeightUnit$8;
        /**
         * ID of the checkout that originated from this cart.
         * @readonly
         */
        checkoutId?: string | null;
        /**
         * Cart discounts.
         * @readonly
         */
        appliedDiscounts?: CartDiscount$1[];
        /**
         * Date and time the cart was created.
         * @readonly
         */
        _createdDate?: Date | null;
        /**
         * Date and time the cart was updated.
         * @readonly
         */
        _updatedDate?: Date | null;
        /** Contact info. */
        contactInfo?: AddressWithContact$5;
        /**
         * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
         *
         * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
         */
        overrideCheckoutUrl?: string | null;
        /**
         * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
         * @readonly
         */
        purchaseFlowId?: string | null;
        /** Selected shipping option. */
        selectedShippingOption?: SelectedShippingOption$2;
    };
    /** The code of an existing coupon to apply to the cart. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput$3[];
    /** Catalog line items. */
    lineItems?: LineItem$6[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$4[];
}
interface AddToCartOptions {
    /** Catalog line items. */
    lineItems?: LineItem$6[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$4[];
}
interface CreateCheckoutOptions$1 {
    /** **Required**. Sales channel type. */
    channelType?: ChannelType$6;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$a;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$a;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$2;
    /** Mandatory when setting a billing or shipping address if the site visitor isn't logged in. */
    email?: string | null;
}
interface EstimateTotalsOptions {
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$2;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$a;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$a;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships$4;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}

declare function createCart$1(httpClient: HttpClient): CreateCartSignature;
interface CreateCartSignature {
    /**
     * Creates a new cart.
     *
     *
     * The `createCart()` function returns a Promise that resolves to the new cart when it's created.
     *
     * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
     * @param - Cart creation options.
     * @returns Fulfilled - Cart.
     */
    (options?: CreateCartOptions | undefined): Promise<Cart$1 & CartNonNullableFields$1>;
}
declare function updateCart$1(httpClient: HttpClient): UpdateCartSignature;
interface UpdateCartSignature {
    /**
     * Updates a specified cart's properties.
     *
     *
     * The `updateCart()` function returns a Promise that resolves when the specified cart's properties are updated.
     *
     * > **Note:** When updating catalog items, `options.lineItems.catalogReference` is required.
     * @param - Available options to use when updating a cart.
     * @param - ID of the cart to be updated.
     * @returns Fulfilled - Updated cart.
     */
    (_id: string | null, options?: UpdateCartOptions | undefined): Promise<Cart$1 & CartNonNullableFields$1>;
}
declare function getCart$1(httpClient: HttpClient): GetCartSignature;
interface GetCartSignature {
    /**
     * Retrieves a cart.
     *
     *
     * The `getCart()` function returns a Promise that resolves when the specified cart is retrieved.
     * @param - ID of the cart to retrieve.
     * @returns Fulfilled - The specified cart.
     */
    (_id: string): Promise<Cart$1 & CartNonNullableFields$1>;
}
declare function addToCart$1(httpClient: HttpClient): AddToCartSignature;
interface AddToCartSignature {
    /**
     * Adds catalog line items to a cart.
     *
     *
     * The `addToCart()` function returns a Promise that resolves to the updated cart when the specified items have been added.
     *
     * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
     * @param - Cart ID.
     * @param - Items to be added to cart.
     * @returns Fulfilled - Cart.
     */
    (_id: string, options?: AddToCartOptions | undefined): Promise<AddToCartResponse$1 & AddToCartResponseNonNullableFields$1>;
}
declare function removeLineItems$3(httpClient: HttpClient): RemoveLineItemsSignature$1;
interface RemoveLineItemsSignature$1 {
    /**
     * Removes line items from the specified cart.
     *
     *
     * The `removeLineItems()` function returns a Promise that resolves to the updated cart when the line items are removed from the specified cart.
     * @param - IDs of the line items to remove from the cart.
     * @param - ID of the cart to remove line items from.
     * @returns Fulfilled - Updated cart.
     */
    (_id: string, lineItemIds: string[]): Promise<RemoveLineItemsResponse$2 & RemoveLineItemsResponseNonNullableFields$2>;
}
declare function createCheckout$3(httpClient: HttpClient): CreateCheckoutSignature$1;
interface CreateCheckoutSignature$1 {
    /**
     * Creates a checkout from a cart.
     *
     *
     * The `createCheckout()` function returns a Promise that resolves to the new checkout's ID when it's created.
     *
     * If a checkout was already created from the specified cart, that checkout will be
     * updated with any new information from the cart.
     *
     * > **Note:** `options.channelType` is a required field.
     * @param - Cart ID.
     * @param - Checkout creation options.
     * @returns Fulfilled - ID of the newly created checkout.
     */
    (_id: string, options?: CreateCheckoutOptions$1 | undefined): Promise<CreateCheckoutResponse$2 & CreateCheckoutResponseNonNullableFields$2>;
}
declare function removeCoupon$3(httpClient: HttpClient): RemoveCouponSignature$1;
interface RemoveCouponSignature$1 {
    /**
     * Removes the coupon from a specified cart.
     *
     *
     * The `removeCoupon()` function returns a Promise that resolves to the updated cart when the coupon is removed from the specified cart.
     * @param - Cart ID.
     * @returns Fulfilled - Updated cart.
     */
    (_id: string): Promise<RemoveCouponResponse$2 & RemoveCouponResponseNonNullableFields$2>;
}
declare function updateLineItemsQuantity$3(httpClient: HttpClient): UpdateLineItemsQuantitySignature$1;
interface UpdateLineItemsQuantitySignature$1 {
    /**
     * Updates the quantity of one or more line items in a specified cart.
     *
     *
     * The `updateLineItemsQuantity()` function returns a Promise that resolves when the quantities of the specified cart's line items are updated.
     *
     * This endpoint is only for updating the quantity of line items. To entirely remove a line item from the cart, use [`removeLineItems()`](#removelineitems). To add a new line item to the cart, use [`addToCart()`](#addtocart).
     *
     * This endpoint checks the amount of stock remaining for this line item. If the specified `quantity` is greater than the remaining stock, then the `quantity` returned in the response is the total amount of remaining stock.
     * @param - Cart ID.
     * @param - Line item IDs and their new quantity.
     * @returns Fulfilled - Updated cart.
     */
    (_id: string, lineItems: LineItemQuantityUpdate$2[]): Promise<UpdateLineItemsQuantityResponse$2 & UpdateLineItemsQuantityResponseNonNullableFields$2>;
}
declare function estimateTotals$1(httpClient: HttpClient): EstimateTotalsSignature;
interface EstimateTotalsSignature {
    /**
     * Estimates the subtotal and total for current site visitor’s cart. Totals include tax and are based on the selected carrier service, shipping address, and billing information.
     *
     *
     * The `estimateTotals()` function returns a Promise that resolves when the estimated totals are generated.
     *
     * > **Note:** Not passing any `options` properties will only estimate the cart items price totals.
     * @param - Cart ID.
     * @param - Total estimation options.
     * @returns Fulfilled - Cart's estimated totals.
     */
    (_id: string, options?: EstimateTotalsOptions | undefined): Promise<EstimateTotalsResponse$1 & EstimateTotalsResponseNonNullableFields$1>;
}
declare function deleteCart$1(httpClient: HttpClient): DeleteCartSignature;
interface DeleteCartSignature {
    /**
     * Deletes a cart.
     *
     *
     * The `deleteCart()` function returns a Promise that resolves when the specified cart is deleted.
     * @param - ID of the cart to delete.
     * @returns Fulfilled - When the cart is deleted. Rejected - Error message.
     */
    (_id: string): Promise<void>;
}
declare const onCartUpdated$3: EventDefinition<CartUpdatedEnvelope$1, "wix.ecom.v1.cart_updated">;
declare const onCartDeleted$3: EventDefinition<CartDeletedEnvelope$1, "wix.ecom.v1.cart_deleted">;
declare const onCartCreated$3: EventDefinition<CartCreatedEnvelope$1, "wix.ecom.v1.cart_created">;

declare function createEventModule$a<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createCart: MaybeContext<BuildRESTFunction<typeof createCart$1> & typeof createCart$1>;
declare const updateCart: MaybeContext<BuildRESTFunction<typeof updateCart$1> & typeof updateCart$1>;
declare const getCart: MaybeContext<BuildRESTFunction<typeof getCart$1> & typeof getCart$1>;
declare const addToCart: MaybeContext<BuildRESTFunction<typeof addToCart$1> & typeof addToCart$1>;
declare const removeLineItems$2: MaybeContext<BuildRESTFunction<typeof removeLineItems$3> & typeof removeLineItems$3>;
declare const createCheckout$2: MaybeContext<BuildRESTFunction<typeof createCheckout$3> & typeof createCheckout$3>;
declare const removeCoupon$2: MaybeContext<BuildRESTFunction<typeof removeCoupon$3> & typeof removeCoupon$3>;
declare const updateLineItemsQuantity$2: MaybeContext<BuildRESTFunction<typeof updateLineItemsQuantity$3> & typeof updateLineItemsQuantity$3>;
declare const estimateTotals: MaybeContext<BuildRESTFunction<typeof estimateTotals$1> & typeof estimateTotals$1>;
declare const deleteCart: MaybeContext<BuildRESTFunction<typeof deleteCart$1> & typeof deleteCart$1>;

type _publicOnCartUpdatedType$1 = typeof onCartUpdated$3;
/**
 * Triggered when a cart is updated.
 */
declare const onCartUpdated$2: ReturnType<typeof createEventModule$a<_publicOnCartUpdatedType>>;

type _publicOnCartDeletedType$1 = typeof onCartDeleted$3;
/**
 * Triggered when a cart is deleted.
 */
declare const onCartDeleted$2: ReturnType<typeof createEventModule$a<_publicOnCartDeletedType>>;

type _publicOnCartCreatedType$1 = typeof onCartCreated$3;
/**
 * Triggered when a cart is created.
 */
declare const onCartCreated$2: ReturnType<typeof createEventModule$a<_publicOnCartCreatedType>>;

type index_d$m_AddToCartOptions = AddToCartOptions;
type index_d$m_CreateCartOptions = CreateCartOptions;
type index_d$m_EstimateTotalsOptions = EstimateTotalsOptions;
type index_d$m_UpdateCartOptions = UpdateCartOptions;
declare const index_d$m_addToCart: typeof addToCart;
declare const index_d$m_createCart: typeof createCart;
declare const index_d$m_deleteCart: typeof deleteCart;
declare const index_d$m_estimateTotals: typeof estimateTotals;
declare const index_d$m_getCart: typeof getCart;
declare const index_d$m_updateCart: typeof updateCart;
declare namespace index_d$m {
  export { type ActionEvent$i as ActionEvent, type index_d$m_AddToCartOptions as AddToCartOptions, type AddToCartRequest$1 as AddToCartRequest, type AddToCartResponse$1 as AddToCartResponse, type AddToCartResponseNonNullableFields$1 as AddToCartResponseNonNullableFields, type AddToCurrentCartAndEstimateTotalsRequest$1 as AddToCurrentCartAndEstimateTotalsRequest, type AddToCurrentCartRequest$1 as AddToCurrentCartRequest, type AdditionalFee$6 as AdditionalFee, type Address$a as Address, type AddressLocation$9 as AddressLocation, type AddressWithContact$5 as AddressWithContact, type AggregatedTaxBreakdown$4 as AggregatedTaxBreakdown, type ApplicationError$b as ApplicationError, type AppliedDiscount$6 as AppliedDiscount, type AppliedDiscountDiscountSourceOneOf$6 as AppliedDiscountDiscountSourceOneOf, type AutoTaxFallbackCalculationDetails$4 as AutoTaxFallbackCalculationDetails, type BaseEventMetadata$a as BaseEventMetadata, type BuyerInfo$7 as BuyerInfo, type BuyerInfoIdOneOf$5 as BuyerInfoIdOneOf, type CalculatedLineItem$2 as CalculatedLineItem, type CalculationErrors$5 as CalculationErrors, type CalculationErrorsShippingCalculationErrorOneOf$5 as CalculationErrorsShippingCalculationErrorOneOf, type CarrierError$6 as CarrierError, type CarrierErrors$5 as CarrierErrors, type CarrierServiceOption$4 as CarrierServiceOption, type Cart$1 as Cart, type CartCreatedEnvelope$1 as CartCreatedEnvelope, type CartDeletedEnvelope$1 as CartDeletedEnvelope, type CartDiscount$1 as CartDiscount, type CartDiscountDiscountSourceOneOf$1 as CartDiscountDiscountSourceOneOf, type CartNonNullableFields$1 as CartNonNullableFields, type CartUpdatedEnvelope$1 as CartUpdatedEnvelope, type CatalogOverrideFields$3 as CatalogOverrideFields, type CatalogReference$8 as CatalogReference, ChannelType$6 as ChannelType, ChargeType$6 as ChargeType, type Color$5 as Color, type Coupon$6 as Coupon, type index_d$m_CreateCartOptions as CreateCartOptions, type CreateCartRequest$1 as CreateCartRequest, type CreateCartResponse$1 as CreateCartResponse, type CreateCartResponseNonNullableFields$1 as CreateCartResponseNonNullableFields, type CreateCheckoutFromCurrentCartRequest$1 as CreateCheckoutFromCurrentCartRequest, type CreateCheckoutOptions$1 as CreateCheckoutOptions, type CreateCheckoutRequest$2 as CreateCheckoutRequest, type CreateCheckoutResponse$2 as CreateCheckoutResponse, type CreateCheckoutResponseNonNullableFields$2 as CreateCheckoutResponseNonNullableFields, type CustomLineItem$4 as CustomLineItem, type DeleteCartRequest$1 as DeleteCartRequest, type DeleteCartResponse$1 as DeleteCartResponse, type DeleteCurrentCartRequest$1 as DeleteCurrentCartRequest, type DeliveryLogistics$7 as DeliveryLogistics, type DeliveryTimeSlot$7 as DeliveryTimeSlot, type Description$3 as Description, type DescriptionLine$5 as DescriptionLine, type DescriptionLineDescriptionLineValueOneOf$5 as DescriptionLineDescriptionLineValueOneOf, type DescriptionLineName$5 as DescriptionLineName, DescriptionLineType$5 as DescriptionLineType, type DescriptionLineValueOneOf$5 as DescriptionLineValueOneOf, type Details$6 as Details, type DetailsKindOneOf$6 as DetailsKindOneOf, type DiscountRule$6 as DiscountRule, type DiscountRuleName$6 as DiscountRuleName, DiscountType$6 as DiscountType, type DomainEvent$i as DomainEvent, type DomainEventBodyOneOf$i as DomainEventBodyOneOf, type Empty$b as Empty, type EntityCreatedEvent$i as EntityCreatedEvent, type EntityDeletedEvent$i as EntityDeletedEvent, type EntityUpdatedEvent$i as EntityUpdatedEvent, type EstimateCurrentCartTotalsRequest$1 as EstimateCurrentCartTotalsRequest, type index_d$m_EstimateTotalsOptions as EstimateTotalsOptions, type EstimateTotalsRequest$1 as EstimateTotalsRequest, type EstimateTotalsResponse$1 as EstimateTotalsResponse, type EstimateTotalsResponseNonNullableFields$1 as EstimateTotalsResponseNonNullableFields, type EventMetadata$a as EventMetadata, type ExtendedFields$a as ExtendedFields, FallbackReason$4 as FallbackReason, type FieldViolation$6 as FieldViolation, FileType$4 as FileType, type FreeTrialPeriod$3 as FreeTrialPeriod, type FullAddressContactDetails$6 as FullAddressContactDetails, type GetCartByCheckoutIdRequest$1 as GetCartByCheckoutIdRequest, type GetCartByCheckoutIdResponse$1 as GetCartByCheckoutIdResponse, type GetCartRequest$1 as GetCartRequest, type GetCartResponse$1 as GetCartResponse, type GetCartResponseNonNullableFields$1 as GetCartResponseNonNullableFields, type GetCurrentCartRequest$1 as GetCurrentCartRequest, type GetCurrentCartResponse$1 as GetCurrentCartResponse, type GetCurrentCartResponseNonNullableFields$1 as GetCurrentCartResponseNonNullableFields, type GiftCard$6 as GiftCard, type Group$4 as Group, type HostSelectedMembership$1 as HostSelectedMembership, type IdentificationData$i as IdentificationData, type IdentificationDataIdOneOf$i as IdentificationDataIdOneOf, type InvalidMembership$4 as InvalidMembership, type ItemAvailabilityInfo$3 as ItemAvailabilityInfo, ItemAvailabilityStatus$3 as ItemAvailabilityStatus, type ItemTaxFullDetails$6 as ItemTaxFullDetails, type ItemType$6 as ItemType, ItemTypeItemType$6 as ItemTypeItemType, type ItemTypeItemTypeDataOneOf$6 as ItemTypeItemTypeDataOneOf, JurisdictionType$6 as JurisdictionType, type LineItem$6 as LineItem, type LineItemDiscount$6 as LineItemDiscount, type LineItemPricesData$2 as LineItemPricesData, type LineItemQuantityUpdate$2 as LineItemQuantityUpdate, ManualCalculationReason$4 as ManualCalculationReason, type Membership$4 as Membership, type MembershipName$6 as MembershipName, type MembershipOptions$4 as MembershipOptions, type MembershipPaymentCredits$4 as MembershipPaymentCredits, type MerchantDiscount$6 as MerchantDiscount, type MerchantDiscountInput$3 as MerchantDiscountInput, type MessageEnvelope$h as MessageEnvelope, type MultiCurrencyPrice$4 as MultiCurrencyPrice, NameInLineItem$3 as NameInLineItem, NameInOther$3 as NameInOther, type Other$3 as Other, type OtherCharge$4 as OtherCharge, type PaymentOption$3 as PaymentOption, PaymentOptionType$6 as PaymentOptionType, type PhysicalProperties$7 as PhysicalProperties, type PickupDetails$8 as PickupDetails, PickupMethod$7 as PickupMethod, type PlainTextValue$5 as PlainTextValue, type Policy$3 as Policy, type PriceDescription$5 as PriceDescription, type PriceSummary$6 as PriceSummary, type ProductName$5 as ProductName, RateType$4 as RateType, type RemoveCouponFromCurrentCartRequest$1 as RemoveCouponFromCurrentCartRequest, type RemoveCouponRequest$2 as RemoveCouponRequest, type RemoveCouponResponse$2 as RemoveCouponResponse, type RemoveCouponResponseNonNullableFields$2 as RemoveCouponResponseNonNullableFields, type RemoveLineItemsFromCurrentCartRequest$1 as RemoveLineItemsFromCurrentCartRequest, type RemoveLineItemsRequest$2 as RemoveLineItemsRequest, type RemoveLineItemsResponse$2 as RemoveLineItemsResponse, type RemoveLineItemsResponseNonNullableFields$2 as RemoveLineItemsResponseNonNullableFields, type RestoreInfo$i as RestoreInfo, RuleType$6 as RuleType, type Scope$4 as Scope, type SecuredMedia$4 as SecuredMedia, type SelectedCarrierServiceOption$4 as SelectedCarrierServiceOption, type SelectedCarrierServiceOptionOtherCharge$4 as SelectedCarrierServiceOptionOtherCharge, type SelectedCarrierServiceOptionPrices$4 as SelectedCarrierServiceOptionPrices, type SelectedMembership$4 as SelectedMembership, type SelectedMemberships$4 as SelectedMemberships, type SelectedShippingOption$2 as SelectedShippingOption, type ServiceProperties$5 as ServiceProperties, Severity$3 as Severity, type ShippingInformation$4 as ShippingInformation, type ShippingOption$6 as ShippingOption, type ShippingPrice$6 as ShippingPrice, type ShippingRegion$6 as ShippingRegion, type StreetAddress$9 as StreetAddress, SubscriptionFrequency$7 as SubscriptionFrequency, type SubscriptionOptionInfo$4 as SubscriptionOptionInfo, type SubscriptionSettings$7 as SubscriptionSettings, SuggestedFix$3 as SuggestedFix, type SystemError$6 as SystemError, type Target$3 as Target, type TargetLineItem$3 as TargetLineItem, type TargetTargetTypeOneOf$3 as TargetTargetTypeOneOf, type TaxBreakdown$4 as TaxBreakdown, type TaxCalculationDetails$4 as TaxCalculationDetails, type TaxCalculationDetailsCalculationDetailsOneOf$4 as TaxCalculationDetailsCalculationDetailsOneOf, type TaxRateBreakdown$4 as TaxRateBreakdown, type TaxSummary$6 as TaxSummary, type TaxableAddress$6 as TaxableAddress, type TaxableAddressTaxableAddressDataOneOf$6 as TaxableAddressTaxableAddressDataOneOf, TaxableAddressType$6 as TaxableAddressType, type Title$3 as Title, type index_d$m_UpdateCartOptions as UpdateCartOptions, type UpdateCartRequest$1 as UpdateCartRequest, type UpdateCartResponse$1 as UpdateCartResponse, type UpdateCartResponseNonNullableFields$1 as UpdateCartResponseNonNullableFields, type UpdateCurrentCartLineItemQuantityRequest$1 as UpdateCurrentCartLineItemQuantityRequest, type UpdateLineItemsQuantityRequest$2 as UpdateLineItemsQuantityRequest, type UpdateLineItemsQuantityResponse$2 as UpdateLineItemsQuantityResponse, type UpdateLineItemsQuantityResponseNonNullableFields$2 as UpdateLineItemsQuantityResponseNonNullableFields, type V1Coupon$1 as V1Coupon, type V1MerchantDiscount$1 as V1MerchantDiscount, type ValidationError$6 as ValidationError, type VatId$7 as VatId, VatType$7 as VatType, type Violation$3 as Violation, WebhookIdentityType$h as WebhookIdentityType, WeightUnit$8 as WeightUnit, type _publicOnCartCreatedType$1 as _publicOnCartCreatedType, type _publicOnCartDeletedType$1 as _publicOnCartDeletedType, type _publicOnCartUpdatedType$1 as _publicOnCartUpdatedType, index_d$m_addToCart as addToCart, index_d$m_createCart as createCart, createCheckout$2 as createCheckout, index_d$m_deleteCart as deleteCart, index_d$m_estimateTotals as estimateTotals, index_d$m_getCart as getCart, onCartCreated$2 as onCartCreated, onCartDeleted$2 as onCartDeleted, onCartUpdated$2 as onCartUpdated, onCartCreated$3 as publicOnCartCreated, onCartDeleted$3 as publicOnCartDeleted, onCartUpdated$3 as publicOnCartUpdated, removeCoupon$2 as removeCoupon, removeLineItems$2 as removeLineItems, index_d$m_updateCart as updateCart, updateLineItemsQuantity$2 as updateLineItemsQuantity };
}

interface Cart {
    /** Cart ID. */
    _id?: string | null;
    /**
     * Line items.
     * @readonly
     */
    lineItems?: LineItem$5[];
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo$6;
    /**
     * Currency used for pricing.
     * @readonly
     */
    currency?: string;
    /**
     * Currency code used for all the converted prices that are returned.
     * For a site that supports multiple currencies, this is the currency the buyer selected.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string | null;
    /**
     * Site language in which original values are displayed.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrices?: boolean | null;
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit$7;
    /**
     * ID of the checkout that originated from this cart.
     * @readonly
     */
    checkoutId?: string | null;
    /**
     * Cart discounts.
     * @readonly
     */
    appliedDiscounts?: CartDiscount[];
    /**
     * Date and time the cart was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the cart was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Contact info. */
    contactInfo?: AddressWithContact$4;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$1;
}
interface LineItem$5 {
    /**
     * Line item ID.
     * @readonly
     */
    _id?: string | null;
    /** Item quantity. */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$7;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName$4;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: string;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice$3;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice$3;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice$3;
    /**
     * Line item description lines. Used for displaying the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine$4[];
    /**
     * Line item image details.
     * @readonly
     */
    image?: string;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo$2;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties$6;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType$5;
    /**
     * Type of selected payment option for current item. Defaults to `"FULL_PAYMENT_ONLINE"`.
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item happens as part of the checkout.
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `"MEMBERSHIP"` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` will be 0.
     * @readonly
     */
    paymentOption?: PaymentOptionType$5;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties$4;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + in most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription$4;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice$3;
    /** Selected membership to be used as payment for this item. Must be used with `lineItem.paymentOption` set to `MEMBERSHIP` or `MEMBERSHIP_OFFLINE`. This field can be empty when `lineItem.paymentOption` is set to `MEMBERSHIP_OFFLINE`. */
    selectedMembership?: SelectedMembership$3;
    /**
     * Tax group ID for this line item.
     * @readonly
     */
    taxGroupId?: string | null;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields$2;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$7 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs.
     *
     * Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from your Wix Stores catalog, learn more about [eCommerce integration](https://www.wix.com/velo/reference/wix-stores-backend/ecommerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ProductName$4 {
    /** **Required** - Original product name (in site's default language). */
    original?: string;
    /** Description product name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface MultiCurrencyPrice$3 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface DescriptionLine$4 extends DescriptionLineValueOneOf$4, DescriptionLineDescriptionLineValueOneOf$4 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$4;
    /** Description line color value. */
    colorInfo?: Color$4;
    /** Description line name. */
    name?: DescriptionLineName$4;
}
/** @oneof */
interface DescriptionLineValueOneOf$4 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$4;
    /** Description line color value. */
    colorInfo?: Color$4;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$4 {
}
interface DescriptionLineName$4 {
    /** Description line name in site's default language. */
    original?: string;
    /** Description line name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface PlainTextValue$4 {
    /** Description line plain text value in site's default language. */
    original?: string;
    /** Description line plain text value translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface Color$4 {
    /** Description line color name in site's default language. */
    original?: string;
    /** Description line color name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
    /**
     * HEX or RGB color code for display.
     *
     */
    code?: string | null;
}
declare enum DescriptionLineType$4 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface ItemAvailabilityInfo$2 {
    /**
     * Item availability status.
     *
     * NOT_FOUND - Item does not exist.
     * NOT_AVAILABLE - Not in stock.
     * PARTIALLY_AVAILABLE - Available quantity is less than requested.
     */
    status?: ItemAvailabilityStatus$2;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus$2 {
    AVAILABLE = "AVAILABLE",
    NOT_FOUND = "NOT_FOUND",
    /** Not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
interface PhysicalProperties$6 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface Scope$3 {
    /** Scope namespace (Wix Stores, Wix Bookings, Wix Events, Wix Pricing Plans) */
    namespace?: string;
    /** Coupon scope's applied group (e.g., event or ticket in Wix Events) */
    group?: Group$3;
}
interface Group$3 {
    /** Coupon scope's group (e.g., product or collection in Wix Stores). See [valid scope values](https://dev.wix.com/api/rest/coupons/coupons/valid-scope-values). */
    name?: string;
    /** Item ID (when the coupon scope is limited to just one item). */
    entityId?: string | null;
}
interface ItemType$5 extends ItemTypeItemTypeDataOneOf$5 {
    /** Preset item type. */
    preset?: ItemTypeItemType$5;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$5 {
    /** Preset item type. */
    preset?: ItemTypeItemType$5;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$5 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
interface SubscriptionOptionInfo$3 {
    /** Subscription option settings. */
    subscriptionSettings?: SubscriptionSettings$6;
    /** Subscription option title. */
    title?: Title$2;
    /** Subscription option description. */
    description?: Description$2;
}
interface SubscriptionSettings$6 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$6;
    /**
     * Interval of recurring payment.
     *
     * Default: `1`.
     * If SubscriptionFrequency is Day the minimum interval is 7
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal` is `true`. */
    billingCycles?: number | null;
    /**
     * Period until first cycle starts. If applied payNow will be 0
     * If None => no free trial
     */
    freeTrialPeriod?: FreeTrialPeriod$2;
    /** The date the subscription will start. The subscription will be charged either now or according to freeTrialDays. */
    startDate?: Date | null;
    /**
     * Whether to generate an order each billing cycle. An order will always be generated for the first billing cycle.
     * Default None => will behave like true
     */
    generateOrderEachBillingCycle?: boolean | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$6 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface FreeTrialPeriod$2 {
    /** Frequency of priod. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequency$6;
    /** interval of period */
    interval?: number;
}
interface Title$2 {
    /** Subscription option name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Subscription option name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Description$2 {
    /** Subscription option description. */
    original?: string;
    /** Translated subscription option description. */
    translated?: string | null;
}
interface SecuredMedia$3 {
    /** Media ID in Wix Media Manager. */
    _id?: string;
    /** Original filename. */
    fileName?: string;
    /** File type. */
    fileType?: FileType$3;
}
declare enum FileType$3 {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$5 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties$4 {
    /** The date and time for which the service is supposed to be provided. For example, the time of the class. */
    scheduledDate?: Date | null;
    /** The number of people participating in this service. For example, the number of people attending the class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface PriceDescription$4 {
    /**
     * **Required** - Original price description (in site's default language).
     *
     */
    original?: string;
    /** Product name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
/** Selected Membership */
interface SelectedMembership$3 {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
}
interface CatalogOverrideFields$2 {
    /** Item name. */
    productName?: ProductName$4;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine$4[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$6;
    /** Item image. */
    image?: string;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption$2;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface PaymentOption$2 {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType$5;
}
interface TaxableAddress$5 extends TaxableAddressTaxableAddressDataOneOf$5 {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType$5;
}
/** @oneof */
interface TaxableAddressTaxableAddressDataOneOf$5 {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType$5;
}
declare enum TaxableAddressType$5 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
interface ExtendedFields$9 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface Policy$2 {
    /** Policy title - should be translated */
    title?: string;
    /** Policy content - should be translated */
    content?: string;
}
/** Buyer Info */
interface BuyerInfo$6 extends BuyerInfoIdOneOf$4 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the cart owner is a Wix user.
     * @readonly
     */
    userId?: string;
    /** Contact ID. For more information, see the Contacts API. */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$4 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the cart owner is a Wix user.
     * @readonly
     */
    userId?: string;
}
declare enum WeightUnit$7 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface CartDiscount extends CartDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon$5;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$5;
}
/** @oneof */
interface CartDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon$5;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$5;
}
interface Coupon$5 {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
}
interface MerchantDiscount$5 {
    /** Discount value. */
    amount?: MultiCurrencyPrice$3;
}
/** Billing Info and shipping details */
interface AddressWithContact$4 {
    /** Address. */
    address?: Address$9;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$5;
}
/** Physical address */
interface Address$9 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$8;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$8 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation$8 {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
/** Full contact details for an address */
interface FullAddressContactDetails$5 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$6;
}
interface VatId$6 {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$6;
}
/** tax info types */
declare enum VatType$6 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface SelectedShippingOption$1 {
    /** Carrier ID. */
    carrierId?: string | null;
    /** Selected shipping option code. For example, "usps_std_overnight". */
    code?: string;
}
interface GetCurrentCartRequest {
}
interface GetCurrentCartResponse {
    /** Current session's active cart. */
    cart?: Cart;
}
interface UpdateCartRequest {
    /** Cart info. */
    cartInfo?: Cart;
    /** The code of an existing coupon to apply to the cart. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput$2[];
    /** Catalog line items. */
    lineItems?: LineItem$5[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$3[];
}
interface MerchantDiscountInput$2 {
    /** Discount amount. */
    amount?: string;
    /** IDs of the line items the discount applies to. */
    lineItemIds?: string[];
}
interface CustomLineItem$3 {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$4;
    /** Custom line item description lines. Used for displaying the cart, checkout and order. */
    descriptionLines?: DescriptionLine$4[];
    /**
     * Custom line item media. Supported formats:
     * + Link to an image/video from the [Wix Media Manager](https://support.wix.com/en/article/wix-media-about-the-media-manager) - `"wix:image://v1/3c76e2_c53...4ea4~mv2.jpg#originWidth=1000&originHeight=1000"`.
     * + An image from the web - `"http(s)://<image url>"`.
     */
    media?: string;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    _id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName$4;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: string;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$5;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$6;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$5;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties$4;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$7;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface UpdateCartResponse {
    /** Updated Cart. */
    cart?: Cart;
}
interface AddToCurrentCartRequest {
    /** Catalog line items. */
    lineItems?: LineItem$5[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$3[];
}
interface AddToCartResponse {
    /** Updated cart. */
    cart?: Cart;
}
interface AddToCurrentCartAndEstimateTotalsRequest {
    /** Catalog line items. */
    lineItems?: LineItem$5[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$3[];
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$1;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$9;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$9;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships$3;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
interface SelectedMemberships$3 {
    /** Selected memberships. */
    memberships?: HostSelectedMembership[];
}
interface HostSelectedMembership {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface EstimateTotalsResponse {
    /** Cart. */
    cart?: Cart;
    /** Calculated line items. */
    calculatedLineItems?: CalculatedLineItem$1[];
    /** Price summary. */
    priceSummary?: PriceSummary$5;
    /** Applied gift card. */
    giftCard?: GiftCard$5;
    /** Tax summary. */
    taxSummary?: TaxSummary$5;
    /** Shipping information. */
    shippingInfo?: ShippingInformation$3;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$5[];
    /** Calculation errors. */
    calculationErrors?: CalculationErrors$4;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$7;
    /** Currency used for pricing in this store. */
    currency?: string;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary$5;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary$5;
    /** Information about valid and invalid memberships, and which ones are selected for usage. */
    membershipOptions?: MembershipOptions$3;
    /** Additional fees */
    additionalFees?: AdditionalFee$5[];
    /**
     * List of validation violations raised by the [Validations Custom Extension SPI](https://www.wix.com/velo/reference/spis/wix-ecom/ecom-validations/introduction).
     * @readonly
     */
    violations?: Violation$2[];
}
interface CalculatedLineItem$1 {
    /** Line item ID. */
    lineItemId?: string;
    /** Price breakdown for this line item. */
    pricesBreakdown?: LineItemPricesData$1;
    /**
     * Type of selected payment option for current item. Defaults to `"FULL_PAYMENT_ONLINE"`.
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item happens as part of the checkout.
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `"MEMBERSHIP"` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` will be 0.
     */
    paymentOption?: PaymentOptionType$5;
}
interface LineItemPricesData$1 {
    /** Total price after discounts and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$3;
    /** Total price after discounts, and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$3;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$5;
    /** Total discount for all line items. */
    totalDiscount?: MultiCurrencyPrice$3;
    /** Catalog price after catalog discount and automatic discounts. */
    price?: MultiCurrencyPrice$3;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: MultiCurrencyPrice$3;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: MultiCurrencyPrice$3;
    /** Item price **before** line item discounts and **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: MultiCurrencyPrice$3;
}
interface ItemTaxFullDetails$5 {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice$3;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice$3;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown$3[];
}
interface TaxRateBreakdown$3 {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice$3;
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface TaxBreakdown$3 {
    /** The name of the jurisdiction to which this tax detail applies. For example, "New York" or "Quebec". */
    jurisdiction?: string | null;
    /** The amount of this line item price that was considered nontaxable. (Decimal value) */
    nonTaxableAmount?: MultiCurrencyPrice$3;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.0000 signifies 200% tax. (Decimal value) */
    rate?: string | null;
    /** The amount of tax estimated for this line item. (Decimal value) */
    taxAmount?: MultiCurrencyPrice$3;
    /** The taxable amount of this line item. */
    taxableAmount?: MultiCurrencyPrice$3;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** The type of the jurisdiction in which this tax detail applies. */
    jurisdictionType?: JurisdictionType$5;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$5 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface PriceSummary$5 {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice$3;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice$3;
    /** Total tax. */
    tax?: MultiCurrencyPrice$3;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice$3;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice$3;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice$3;
}
interface GiftCard$5 {
    /**
     * Gift Card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice$3;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface TaxSummary$5 {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice$3;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice$3;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails$3;
}
interface TaxCalculationDetails$3 extends TaxCalculationDetailsCalculationDetailsOneOf$3 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$3;
    /** Error details and reason for tax rate fallback. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$3;
    /**
     * Rate calculation type. Supported values:
     * + `"AUTO_RATE"`
     * + `"FALLBACK_RATE"`
     * + `"MANUAL_RATE"`
     * + `"NO_TAX_COLLECTED"`
     */
    rateType?: RateType$3;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf$3 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$3;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$3;
}
declare enum RateType$3 {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason$3 {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails$3 {
    /**
     * Reason for fallback. Supported values:
     * + `"AUTO_TAX_FAILED"`
     * + `"AUTO_TAX_DEACTIVATED"`
     */
    fallbackReason?: FallbackReason$3;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError$a;
}
declare enum FallbackReason$3 {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
interface ApplicationError$a {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface AggregatedTaxBreakdown$3 {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionTypeEnum?: JurisdictionType$5;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.000 signifies 200% tax. (Decimal value) */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: MultiCurrencyPrice$3;
}
interface ShippingInformation$3 {
    /** Shipping region. */
    region?: ShippingRegion$5;
    /** Selected shipping option. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption$3;
    /** All shipping options. */
    carrierServiceOptions?: CarrierServiceOption$3[];
}
interface ShippingRegion$5 {
    /**
     * Shipping region ID.
     * @readonly
     */
    _id?: string;
    /** Shipping region name. */
    name?: string;
}
interface SelectedCarrierServiceOption$3 {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics$6;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices$3;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge$3[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface DeliveryLogistics$6 {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails$7;
}
interface PickupDetails$7 {
    /** Pickup address. */
    address?: Address$9;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod$6;
}
declare enum PickupMethod$6 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$6 {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
interface SelectedCarrierServiceOptionPrices$3 {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$3;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$3;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$5;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice$3;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice$3;
}
interface SelectedCarrierServiceOptionOtherCharge$3 {
    /** Type of additional cost. */
    type?: ChargeType$5;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices$3;
}
declare enum ChargeType$5 {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface CarrierServiceOption$3 {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption$5[];
}
interface ShippingOption$5 {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics$6;
    /** Sipping price information. */
    cost?: ShippingPrice$5;
}
interface ShippingPrice$5 {
    /** Shipping price. */
    price?: MultiCurrencyPrice$3;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge$3[];
}
interface OtherCharge$3 {
    /** Type of additional cost. */
    type?: ChargeType$5;
    /** Price of added cost. */
    price?: MultiCurrencyPrice$3;
}
interface AppliedDiscount$5 extends AppliedDiscountDiscountSourceOneOf$5 {
    /** Coupon details. */
    coupon?: V1Coupon;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule$5;
    /** Discount type. */
    discountType?: DiscountType$5;
    /**
     * IDs of the line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$5 {
    /** Coupon details. */
    coupon?: V1Coupon;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule$5;
}
declare enum DiscountType$5 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface V1Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice$3;
    /** Coupon name. */
    name?: string;
}
interface V1MerchantDiscount {
    /** Discount value. */
    amount?: MultiCurrencyPrice$3;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule$5 {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$5;
    /** Discount value. */
    amount?: MultiCurrencyPrice$3;
}
interface DiscountRuleName$5 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Discount rule name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface LineItemDiscount$5 {
    /** ID of line item the discount applies to. */
    _id?: string;
    /** Discount value. */
    totalDiscountAmount?: MultiCurrencyPrice$3;
}
interface CalculationErrors$4 extends CalculationErrorsShippingCalculationErrorOneOf$4 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$5;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$4;
    /** Tax calculation error. */
    taxCalculationError?: Details$5;
    /** Coupon calculation error. */
    couponCalculationError?: Details$5;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details$5;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$a[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details$5;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details$5;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$4 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$5;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$4;
}
interface Details$5 extends DetailsKindOneOf$5 {
    applicationError?: ApplicationError$a;
    validationError?: ValidationError$5;
    systemError?: SystemError$5;
    /**
     * Deprecated in APIs. Used to enable migration from rendering arbitrary tracing to rest response.
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$5 {
    applicationError?: ApplicationError$a;
    validationError?: ValidationError$5;
    systemError?: SystemError$5;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$5 {
    fieldViolations?: FieldViolation$5[];
}
declare enum RuleType$5 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$5 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$5;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$5 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$4 {
    /** Carrier errors. */
    errors?: CarrierError$5[];
}
interface CarrierError$5 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$5;
}
interface MembershipOptions$3 {
    /** List of payment options that can be used. */
    eligibleMemberships?: Membership$3[];
    /** List of payment options that are owned by the member, but cannot be used due to reason provided. */
    invalidMemberships?: InvalidMembership$3[];
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: HostSelectedMembership[];
}
interface Membership$3 {
    /** Membership ID. */
    _id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName$5;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits$3;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName$5 {
    /** Membership name. */
    original?: string;
    /** Membership name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface MembershipPaymentCredits$3 {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership$3 {
    /** Membership details. */
    membership?: Membership$3;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface AdditionalFee$5 {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice$3;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$5;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice$3;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice$3;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface Violation$2 {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity$2;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target$2;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity$2 {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target$2 extends TargetTargetTypeOneOf$2 {
    /** General (other) violation. */
    other?: Other$2;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$2;
}
/** @oneof */
interface TargetTargetTypeOneOf$2 {
    /** General (other) violation. */
    other?: Other$2;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$2;
}
/** Available locations on the webpage */
declare enum NameInOther$2 {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem$2 {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix$2 {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other$2 {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther$2;
}
/** Specific line item violation. */
interface TargetLineItem$2 {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem$2;
    /** ID of the line item containing the violation. */
    _id?: string | null;
}
interface RemoveLineItemsFromCurrentCartRequest {
    /** IDs of the line items to remove from the cart. */
    lineItemIds: string[];
}
interface RemoveLineItemsResponse$1 {
    /** Updated cart. */
    cart?: Cart;
}
interface CreateCheckoutFromCurrentCartRequest {
    /** **Required**. Sales channel type. */
    channelType?: ChannelType$5;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$9;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$9;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$1;
    /** Mandatory when setting a billing or shipping address if the site visitor isn't logged in. */
    email?: string | null;
}
declare enum ChannelType$5 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CreateCheckoutResponse$1 {
    /** The newly created checkout's ID. */
    checkoutId?: string;
}
interface RemoveCouponFromCurrentCartRequest {
}
interface RemoveCouponResponse$1 {
    /** Updated cart. */
    cart?: Cart;
}
interface UpdateCurrentCartLineItemQuantityRequest {
    /** Line item IDs and their new quantity. */
    lineItems: LineItemQuantityUpdate$1[];
}
interface LineItemQuantityUpdate$1 {
    /** Line item ID. Required. */
    _id?: string;
    /** New quantity. Number must be 1 or higher. Required. */
    quantity?: number;
}
interface UpdateLineItemsQuantityResponse$1 {
    /** Updated cart. */
    cart?: Cart;
}
interface EstimateCurrentCartTotalsRequest {
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$1;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$9;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$9;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships$3;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
interface DeleteCurrentCartRequest {
}
interface DeleteCartResponse {
}
interface DomainEvent$h extends DomainEventBodyOneOf$h {
    createdEvent?: EntityCreatedEvent$h;
    updatedEvent?: EntityUpdatedEvent$h;
    deletedEvent?: EntityDeletedEvent$h;
    actionEvent?: ActionEvent$h;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$h {
    createdEvent?: EntityCreatedEvent$h;
    updatedEvent?: EntityUpdatedEvent$h;
    deletedEvent?: EntityDeletedEvent$h;
    actionEvent?: ActionEvent$h;
}
interface EntityCreatedEvent$h {
    entity?: string;
}
interface RestoreInfo$h {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$h {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$h {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$h {
    body?: string;
}
interface MessageEnvelope$g {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$h;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$h extends IdentificationDataIdOneOf$h {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$g;
}
/** @oneof */
interface IdentificationDataIdOneOf$h {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$g {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface CreateCartRequest {
    /** Cart info. */
    cartInfo?: Cart;
    /** The code of an existing coupon to apply to the cart. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will apply to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput$2[];
    /** Catalog line items. */
    lineItems?: LineItem$5[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$3[];
}
interface CreateCartResponse {
    /** Cart. */
    cart?: Cart;
}
interface GetCartRequest {
    /** ID of the cart to retrieve. */
    _id: string;
}
interface GetCartResponse {
    /** The requested cart. */
    cart?: Cart;
}
interface GetCartByCheckoutIdRequest {
    /** Checkout ID. */
    _id?: string;
}
interface GetCartByCheckoutIdResponse {
    /** The requested cart. */
    cart?: Cart;
}
interface AddToCartRequest {
    /** Cart ID. */
    _id: string;
    /** Catalog line items. */
    lineItems?: LineItem$5[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$3[];
}
interface RemoveLineItemsRequest$1 {
    /** Cart ID. */
    _id: string;
    /** IDs of the line items to remove from the cart. */
    lineItemIds: string[];
}
interface CreateCheckoutRequest$1 {
    /** Cart ID. */
    _id: string;
    /** **Required**. Sales channel type. */
    channelType?: ChannelType$5;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$9;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$9;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$1;
    /** Mandatory when setting a billing or shipping address if the site visitor isn't logged in. */
    email?: string | null;
}
interface RemoveCouponRequest$1 {
    /** Cart ID. */
    _id: string;
}
interface UpdateLineItemsQuantityRequest$1 {
    /** Cart ID. */
    _id: string;
    /** Line item IDs and their new quantity. */
    lineItems: LineItemQuantityUpdate$1[];
}
interface EstimateTotalsRequest {
    /** Cart ID. */
    _id: string;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$1;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$9;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$9;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships$3;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
interface DeleteCartRequest {
    /** ID of the cart to delete. */
    _id: string;
}
interface Empty$a {
}
interface CatalogReferenceNonNullableFields$4 {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields$4 {
    original: string;
}
interface MultiCurrencyPriceNonNullableFields$2 {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface PlainTextValueNonNullableFields$4 {
    original: string;
}
interface ColorNonNullableFields$4 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$4 {
    original: string;
}
interface DescriptionLineNonNullableFields$4 {
    plainText?: PlainTextValueNonNullableFields$4;
    colorInfo?: ColorNonNullableFields$4;
    plainTextValue?: PlainTextValueNonNullableFields$4;
    color: string;
    name?: DescriptionLineNameNonNullableFields$4;
    lineType: DescriptionLineType$4;
}
interface ItemAvailabilityInfoNonNullableFields$1 {
    status: ItemAvailabilityStatus$2;
}
interface PhysicalPropertiesNonNullableFields$4 {
    shippable: boolean;
}
interface GroupNonNullableFields$1 {
    name: string;
}
interface ScopeNonNullableFields$1 {
    namespace: string;
    group?: GroupNonNullableFields$1;
}
interface ItemTypeNonNullableFields$4 {
    preset: ItemTypeItemType$5;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields$2 {
    frequency: SubscriptionFrequency$6;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields$4 {
    frequency: SubscriptionFrequency$6;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields$2;
}
interface TitleNonNullableFields$2 {
    original: string;
}
interface DescriptionNonNullableFields$2 {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields$2 {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$4;
    title?: TitleNonNullableFields$2;
    description?: DescriptionNonNullableFields$2;
}
interface SecuredMediaNonNullableFields$2 {
    _id: string;
    fileName: string;
    fileType: FileType$3;
}
interface PriceDescriptionNonNullableFields$4 {
    original: string;
}
interface SelectedMembershipNonNullableFields$2 {
    _id: string;
    appId: string;
}
interface PaymentOptionNonNullableFields$2 {
    value: PaymentOptionType$5;
}
interface CatalogOverrideFieldsNonNullableFields$2 {
    productName?: ProductNameNonNullableFields$4;
    descriptionLines: DescriptionLineNonNullableFields$4[];
    physicalProperties?: PhysicalPropertiesNonNullableFields$4;
    image: string;
    paymentOption?: PaymentOptionNonNullableFields$2;
}
interface TaxableAddressNonNullableFields$4 {
    addressType: TaxableAddressType$5;
}
interface PolicyNonNullableFields$2 {
    title: string;
    content: string;
}
interface LineItemNonNullableFields$1 {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields$4;
    productName?: ProductNameNonNullableFields$4;
    url: string;
    price?: MultiCurrencyPriceNonNullableFields$2;
    fullPrice?: MultiCurrencyPriceNonNullableFields$2;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$2;
    descriptionLines: DescriptionLineNonNullableFields$4[];
    image: string;
    availability?: ItemAvailabilityInfoNonNullableFields$1;
    physicalProperties?: PhysicalPropertiesNonNullableFields$4;
    couponScopes: ScopeNonNullableFields$1[];
    itemType?: ItemTypeNonNullableFields$4;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields$2;
    digitalFile?: SecuredMediaNonNullableFields$2;
    paymentOption: PaymentOptionType$5;
    priceDescription?: PriceDescriptionNonNullableFields$4;
    depositAmount?: MultiCurrencyPriceNonNullableFields$2;
    selectedMembership?: SelectedMembershipNonNullableFields$2;
    customLineItem: boolean;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields$2;
    savePaymentMethod: boolean;
    taxableAddress?: TaxableAddressNonNullableFields$4;
    policies: PolicyNonNullableFields$2[];
}
interface BuyerInfoNonNullableFields$3 {
    visitorId: string;
    memberId: string;
    userId: string;
}
interface CouponNonNullableFields$4 {
    _id: string;
    code: string;
}
interface MerchantDiscountNonNullableFields$4 {
    amount?: MultiCurrencyPriceNonNullableFields$2;
}
interface CartDiscountNonNullableFields {
    coupon?: CouponNonNullableFields$4;
    merchantDiscount?: MerchantDiscountNonNullableFields$4;
}
interface StreetAddressNonNullableFields$7 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$6 {
    streetAddress?: StreetAddressNonNullableFields$7;
}
interface VatIdNonNullableFields$2 {
    _id: string;
    type: VatType$6;
}
interface FullAddressContactDetailsNonNullableFields$3 {
    vatId?: VatIdNonNullableFields$2;
}
interface AddressWithContactNonNullableFields$3 {
    address?: AddressNonNullableFields$6;
    contactDetails?: FullAddressContactDetailsNonNullableFields$3;
}
interface SelectedShippingOptionNonNullableFields {
    code: string;
}
interface CartNonNullableFields {
    lineItems: LineItemNonNullableFields$1[];
    buyerInfo?: BuyerInfoNonNullableFields$3;
    currency: string;
    conversionCurrency: string;
    weightUnit: WeightUnit$7;
    subtotal?: MultiCurrencyPriceNonNullableFields$2;
    appliedDiscounts: CartDiscountNonNullableFields[];
    contactInfo?: AddressWithContactNonNullableFields$3;
    selectedShippingOption?: SelectedShippingOptionNonNullableFields;
}
interface GetCurrentCartResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
interface UpdateCartResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
interface AddToCartResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
interface RemoveLineItemsResponseNonNullableFields$1 {
    cart?: CartNonNullableFields;
}
interface CreateCheckoutResponseNonNullableFields$1 {
    checkoutId: string;
}
interface RemoveCouponResponseNonNullableFields$1 {
    cart?: CartNonNullableFields;
}
interface UpdateLineItemsQuantityResponseNonNullableFields$1 {
    cart?: CartNonNullableFields;
}
interface TaxRateBreakdownNonNullableFields$2 {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields$2;
    exemptAmount?: MultiCurrencyPriceNonNullableFields$2;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields$2;
}
interface TaxBreakdownNonNullableFields$2 {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields$2;
    taxAmount?: MultiCurrencyPriceNonNullableFields$2;
    taxableAmount?: MultiCurrencyPriceNonNullableFields$2;
    jurisdictionType: JurisdictionType$5;
}
interface ItemTaxFullDetailsNonNullableFields$4 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$2;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields$2;
    rateBreakdown: TaxRateBreakdownNonNullableFields$2[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields$2;
    taxBreakdown: TaxBreakdownNonNullableFields$2[];
}
interface LineItemPricesDataNonNullableFields$1 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$2;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$2;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$4;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$2;
    price?: MultiCurrencyPriceNonNullableFields$2;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$2;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields$2;
    fullPrice?: MultiCurrencyPriceNonNullableFields$2;
}
interface CalculatedLineItemNonNullableFields$1 {
    lineItemId: string;
    pricesBreakdown?: LineItemPricesDataNonNullableFields$1;
    paymentOption: PaymentOptionType$5;
    taxableAddress?: TaxableAddressNonNullableFields$4;
}
interface PriceSummaryNonNullableFields$4 {
    subtotal?: MultiCurrencyPriceNonNullableFields$2;
    shipping?: MultiCurrencyPriceNonNullableFields$2;
    tax?: MultiCurrencyPriceNonNullableFields$2;
    discount?: MultiCurrencyPriceNonNullableFields$2;
    total?: MultiCurrencyPriceNonNullableFields$2;
    additionalFees?: MultiCurrencyPriceNonNullableFields$2;
}
interface GiftCardNonNullableFields$3 {
    _id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields$2;
    appId: string;
}
interface ApplicationErrorNonNullableFields$9 {
    code: string;
    description: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields$2 {
    fallbackReason: FallbackReason$3;
    error?: ApplicationErrorNonNullableFields$9;
}
interface TaxCalculationDetailsNonNullableFields$2 {
    manualRateReason: ManualCalculationReason$3;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields$2;
    rateType: RateType$3;
}
interface AggregatedTaxBreakdownNonNullableFields$2 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType$5;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields$2;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields$2;
}
interface TaxSummaryNonNullableFields$4 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$2;
    totalTax?: MultiCurrencyPriceNonNullableFields$2;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields$2;
    totalExempt?: MultiCurrencyPriceNonNullableFields$2;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields$2[];
}
interface ShippingRegionNonNullableFields$2 {
    _id: string;
    name: string;
}
interface PickupDetailsNonNullableFields$5 {
    address?: AddressNonNullableFields$6;
    businessLocation: boolean;
    pickupMethod: PickupMethod$6;
}
interface DeliveryLogisticsNonNullableFields$5 {
    pickupDetails?: PickupDetailsNonNullableFields$5;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields$2 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$2;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$2;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$4;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$2;
    price?: MultiCurrencyPriceNonNullableFields$2;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields$2 {
    type: ChargeType$5;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$2;
}
interface SelectedCarrierServiceOptionNonNullableFields$2 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$5;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$2;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields$2[];
}
interface OtherChargeNonNullableFields$2 {
    type: ChargeType$5;
    price?: MultiCurrencyPriceNonNullableFields$2;
}
interface ShippingPriceNonNullableFields$4 {
    price?: MultiCurrencyPriceNonNullableFields$2;
    otherCharges: OtherChargeNonNullableFields$2[];
}
interface ShippingOptionNonNullableFields$4 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$5;
    cost?: ShippingPriceNonNullableFields$4;
}
interface CarrierServiceOptionNonNullableFields$2 {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields$4[];
}
interface ShippingInformationNonNullableFields$3 {
    region?: ShippingRegionNonNullableFields$2;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields$2;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields$2[];
}
interface V1CouponNonNullableFields {
    _id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields$2;
    name: string;
    couponType: string;
}
interface V1MerchantDiscountNonNullableFields {
    amount?: MultiCurrencyPriceNonNullableFields$2;
}
interface DiscountRuleNameNonNullableFields$4 {
    original: string;
}
interface DiscountRuleNonNullableFields$4 {
    _id: string;
    name?: DiscountRuleNameNonNullableFields$4;
    amount?: MultiCurrencyPriceNonNullableFields$2;
}
interface LineItemDiscountNonNullableFields$4 {
    _id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields$2;
}
interface AppliedDiscountNonNullableFields$4 {
    coupon?: V1CouponNonNullableFields;
    merchantDiscount?: V1MerchantDiscountNonNullableFields;
    discountRule?: DiscountRuleNonNullableFields$4;
    discountType: DiscountType$5;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$4[];
}
interface FieldViolationNonNullableFields$4 {
    field: string;
    description: string;
    violatedRule: RuleType$5;
}
interface ValidationErrorNonNullableFields$4 {
    fieldViolations: FieldViolationNonNullableFields$4[];
}
interface DetailsNonNullableFields$4 {
    applicationError?: ApplicationErrorNonNullableFields$9;
    validationError?: ValidationErrorNonNullableFields$4;
}
interface CarrierErrorNonNullableFields$3 {
    carrierId: string;
    error?: DetailsNonNullableFields$4;
}
interface CarrierErrorsNonNullableFields$3 {
    errors: CarrierErrorNonNullableFields$3[];
}
interface CalculationErrorsNonNullableFields$3 {
    generalShippingCalculationError?: DetailsNonNullableFields$4;
    carrierErrors?: CarrierErrorsNonNullableFields$3;
    taxCalculationError?: DetailsNonNullableFields$4;
    couponCalculationError?: DetailsNonNullableFields$4;
    giftCardCalculationError?: DetailsNonNullableFields$4;
    orderValidationErrors: ApplicationErrorNonNullableFields$9[];
    membershipError?: DetailsNonNullableFields$4;
    discountsCalculationError?: DetailsNonNullableFields$4;
}
interface MembershipNameNonNullableFields$4 {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields$2 {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields$2 {
    _id: string;
    appId: string;
    name?: MembershipNameNonNullableFields$4;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields$2;
}
interface InvalidMembershipNonNullableFields$2 {
    membership?: MembershipNonNullableFields$2;
    reason: string;
}
interface HostSelectedMembershipNonNullableFields {
    _id: string;
    appId: string;
    lineItemIds: string[];
}
interface MembershipOptionsNonNullableFields$2 {
    eligibleMemberships: MembershipNonNullableFields$2[];
    invalidMemberships: InvalidMembershipNonNullableFields$2[];
    selectedMemberships: HostSelectedMembershipNonNullableFields[];
}
interface AdditionalFeeNonNullableFields$3 {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields$2;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$4;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields$2;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields$2;
    lineItemIds: string[];
}
interface OtherNonNullableFields$1 {
    name: NameInOther$2;
}
interface TargetLineItemNonNullableFields$1 {
    name: NameInLineItem$2;
    suggestedFix: SuggestedFix$2;
}
interface TargetNonNullableFields$1 {
    other?: OtherNonNullableFields$1;
    lineItem?: TargetLineItemNonNullableFields$1;
}
interface ViolationNonNullableFields$1 {
    severity: Severity$2;
    target?: TargetNonNullableFields$1;
}
interface EstimateTotalsResponseNonNullableFields {
    cart?: CartNonNullableFields;
    calculatedLineItems: CalculatedLineItemNonNullableFields$1[];
    priceSummary?: PriceSummaryNonNullableFields$4;
    giftCard?: GiftCardNonNullableFields$3;
    taxSummary?: TaxSummaryNonNullableFields$4;
    shippingInfo?: ShippingInformationNonNullableFields$3;
    appliedDiscounts: AppliedDiscountNonNullableFields$4[];
    calculationErrors?: CalculationErrorsNonNullableFields$3;
    weightUnit: WeightUnit$7;
    currency: string;
    payNow?: PriceSummaryNonNullableFields$4;
    payLater?: PriceSummaryNonNullableFields$4;
    membershipOptions?: MembershipOptionsNonNullableFields$2;
    additionalFees: AdditionalFeeNonNullableFields$3[];
    violations: ViolationNonNullableFields$1[];
}
interface CreateCartResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
interface GetCartResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
interface BaseEventMetadata$9 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$h;
}
interface EventMetadata$9 extends BaseEventMetadata$9 {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface CartUpdatedEnvelope {
    entity: Cart;
    metadata: EventMetadata$9;
}
interface CartDeletedEnvelope {
    metadata: EventMetadata$9;
}
interface CartCreatedEnvelope {
    entity: Cart;
    metadata: EventMetadata$9;
}
interface UpdateCurrentCartOptions {
    /** Cart info. */
    cartInfo?: Cart;
    /** The code of an existing coupon to apply to the cart. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput$2[];
    /** Catalog line items. */
    lineItems?: LineItem$5[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$3[];
}
interface AddToCurrentCartOptions {
    /** Catalog line items. */
    lineItems?: LineItem$5[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$3[];
}
interface CreateCheckoutFromCurrentCartOptions {
    /** **Required**. Sales channel type. */
    channelType?: ChannelType$5;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$9;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$9;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$1;
    /** Mandatory when setting a billing or shipping address if the site visitor isn't logged in. */
    email?: string | null;
}
interface EstimateCurrentCartTotalsOptions {
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$1;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$9;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$9;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships$3;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}

declare function getCurrentCart$1(httpClient: HttpClient): GetCurrentCartSignature;
interface GetCurrentCartSignature {
    /**
     * Retrieves the current site visitor's cart.
     *
     *
     * The `getCurrentCart()` function returns a Promise that resolves when the current cart is retrieved.
     * @returns Current session's active cart.
     */
    (): Promise<Cart & CartNonNullableFields>;
}
declare function updateCurrentCart$1(httpClient: HttpClient): UpdateCurrentCartSignature;
interface UpdateCurrentCartSignature {
    /**
     * Updates the current site visitor's cart.
     *
     *
     * The `updateCurrentCart()` function returns a Promise that resolves when the current cart's properties are updated.
     *
     * > **Note:** When updating catalog items, `options.lineItems.catalogReference` is required.
     * @param - Current cart update options.
     * @returns Fulfilled - The updated current cart.
     */
    (options?: UpdateCurrentCartOptions | undefined): Promise<Cart & CartNonNullableFields>;
}
declare function addToCurrentCart$1(httpClient: HttpClient): AddToCurrentCartSignature;
interface AddToCurrentCartSignature {
    /**
     * Adds catalog line items to the current site visitor's cart.
     *
     *
     * The `addToCurrentCart()` function returns a Promise that resolves to the updated current cart when the specified items have been added.
     *
     * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
     * @param - Items to be added to the current cart.
     */
    (options?: AddToCurrentCartOptions | undefined): Promise<AddToCartResponse & AddToCartResponseNonNullableFields>;
}
declare function removeLineItemsFromCurrentCart$1(httpClient: HttpClient): RemoveLineItemsFromCurrentCartSignature;
interface RemoveLineItemsFromCurrentCartSignature {
    /**
     * Removes line items from the current site visitor's cart.
     *
     *
     * The `removeLineItemsFromCurrentCart()` function returns a Promise that resolves to the updated current cart when the line items are removed.
     * @param - IDs of the line items to remove from the cart.
     */
    (lineItemIds: string[]): Promise<RemoveLineItemsResponse$1 & RemoveLineItemsResponseNonNullableFields$1>;
}
declare function createCheckoutFromCurrentCart$1(httpClient: HttpClient): CreateCheckoutFromCurrentCartSignature;
interface CreateCheckoutFromCurrentCartSignature {
    /**
     * Creates a checkout from the current site visitor’s cart.
     *
     *
     * The `createCheckoutFromCurrentCart()` function returns a Promise that resolves to the new checkout's ID when it's created.
     *
     * If a checkout was already created from the current cart, that checkout will be updated with any new information from the cart.
     *
     * > **Note:** `options.channelType` is a required field.
     * @param - Checkout creation options.
     */
    (options?: CreateCheckoutFromCurrentCartOptions | undefined): Promise<CreateCheckoutResponse$1 & CreateCheckoutResponseNonNullableFields$1>;
}
declare function removeCouponFromCurrentCart$1(httpClient: HttpClient): RemoveCouponFromCurrentCartSignature;
interface RemoveCouponFromCurrentCartSignature {
    /**
     * Removes the coupon from the current site visitor's cart.
     *
     *
     * The `removeCouponFromCurrentCart()` function returns a Promise that resolves to the updated current cart when the coupon is removed.
     * @returns Fulfilled - Updated current cart.
     */
    (): Promise<RemoveCouponResponse$1 & RemoveCouponResponseNonNullableFields$1>;
}
declare function updateCurrentCartLineItemQuantity$1(httpClient: HttpClient): UpdateCurrentCartLineItemQuantitySignature;
interface UpdateCurrentCartLineItemQuantitySignature {
    /**
     * Updates the quantity of one or more line items in the current site visitor's cart.
     *
     *
     * The `updateCurrentCartLineItemQuantity()` function returns a Promise that resolves when the quantities of the current cart's line items are updated. This endpoint is only for updating the quantity of line items. To entirely remove a line item from the current cart, use [`removeLineItemsFromCurrentCart()`](#removelineitemsfromcurrentcart).
     * To add a new line item to the current cart, use [`addToCurrentCart()`](#addtocurrentcart).
     *
     * This endpoint checks the amount of stock remaining for this line item. If the specified `quantity` is greater than the remaining stock, then the `quantity` returned in the response is the total amount of remaining stock.
     * @param - Line item IDs and their new quantity.
     * @returns Fulfilled - The updated current cart.
     */
    (lineItems: LineItemQuantityUpdate$1[]): Promise<UpdateLineItemsQuantityResponse$1 & UpdateLineItemsQuantityResponseNonNullableFields$1>;
}
declare function estimateCurrentCartTotals$1(httpClient: HttpClient): EstimateCurrentCartTotalsSignature;
interface EstimateCurrentCartTotalsSignature {
    /**
     * Estimates the current cart's price totals (including tax), based on a selected carrier service, shipping address, and billing information.
     *
     *
     * The `estimateCurrentCartTotals()` function returns a Promise that resolves when the estimated totals are generated.
     *
     * > **Note:** Not passing any `options` properties will only estimate the cart items price totals.
     * @param - Total estimation options.
     */
    (options?: EstimateCurrentCartTotalsOptions | undefined): Promise<EstimateTotalsResponse & EstimateTotalsResponseNonNullableFields>;
}
declare function deleteCurrentCart$1(httpClient: HttpClient): DeleteCurrentCartSignature;
interface DeleteCurrentCartSignature {
    /**
     * Deletes the current site visitor's cart.
     *
     *
     * The `deleteCurrentCart()` function returns a Promise that resolves when the current cart is deleted.
     * @returns Fulfilled - When the current cart is deleted. Rejected - Error message.
     */
    (): Promise<void>;
}
declare const onCartUpdated$1: EventDefinition<CartUpdatedEnvelope, "wix.ecom.v1.cart_updated">;
declare const onCartDeleted$1: EventDefinition<CartDeletedEnvelope, "wix.ecom.v1.cart_deleted">;
declare const onCartCreated$1: EventDefinition<CartCreatedEnvelope, "wix.ecom.v1.cart_created">;

declare function createEventModule$9<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const getCurrentCart: MaybeContext<BuildRESTFunction<typeof getCurrentCart$1> & typeof getCurrentCart$1>;
declare const updateCurrentCart: MaybeContext<BuildRESTFunction<typeof updateCurrentCart$1> & typeof updateCurrentCart$1>;
declare const addToCurrentCart: MaybeContext<BuildRESTFunction<typeof addToCurrentCart$1> & typeof addToCurrentCart$1>;
declare const removeLineItemsFromCurrentCart: MaybeContext<BuildRESTFunction<typeof removeLineItemsFromCurrentCart$1> & typeof removeLineItemsFromCurrentCart$1>;
declare const createCheckoutFromCurrentCart: MaybeContext<BuildRESTFunction<typeof createCheckoutFromCurrentCart$1> & typeof createCheckoutFromCurrentCart$1>;
declare const removeCouponFromCurrentCart: MaybeContext<BuildRESTFunction<typeof removeCouponFromCurrentCart$1> & typeof removeCouponFromCurrentCart$1>;
declare const updateCurrentCartLineItemQuantity: MaybeContext<BuildRESTFunction<typeof updateCurrentCartLineItemQuantity$1> & typeof updateCurrentCartLineItemQuantity$1>;
declare const estimateCurrentCartTotals: MaybeContext<BuildRESTFunction<typeof estimateCurrentCartTotals$1> & typeof estimateCurrentCartTotals$1>;
declare const deleteCurrentCart: MaybeContext<BuildRESTFunction<typeof deleteCurrentCart$1> & typeof deleteCurrentCart$1>;

type _publicOnCartUpdatedType = typeof onCartUpdated$1;
/**
 * Triggered when a cart is updated.
 */
declare const onCartUpdated: ReturnType<typeof createEventModule$9<_publicOnCartUpdatedType>>;

type _publicOnCartDeletedType = typeof onCartDeleted$1;
/**
 * Triggered when a cart is deleted.
 */
declare const onCartDeleted: ReturnType<typeof createEventModule$9<_publicOnCartDeletedType>>;

type _publicOnCartCreatedType = typeof onCartCreated$1;
/**
 * Triggered when a cart is created.
 */
declare const onCartCreated: ReturnType<typeof createEventModule$9<_publicOnCartCreatedType>>;

type index_d$l_AddToCartRequest = AddToCartRequest;
type index_d$l_AddToCartResponse = AddToCartResponse;
type index_d$l_AddToCartResponseNonNullableFields = AddToCartResponseNonNullableFields;
type index_d$l_AddToCurrentCartAndEstimateTotalsRequest = AddToCurrentCartAndEstimateTotalsRequest;
type index_d$l_AddToCurrentCartOptions = AddToCurrentCartOptions;
type index_d$l_AddToCurrentCartRequest = AddToCurrentCartRequest;
type index_d$l_Cart = Cart;
type index_d$l_CartCreatedEnvelope = CartCreatedEnvelope;
type index_d$l_CartDeletedEnvelope = CartDeletedEnvelope;
type index_d$l_CartDiscount = CartDiscount;
type index_d$l_CartDiscountDiscountSourceOneOf = CartDiscountDiscountSourceOneOf;
type index_d$l_CartNonNullableFields = CartNonNullableFields;
type index_d$l_CartUpdatedEnvelope = CartUpdatedEnvelope;
type index_d$l_CreateCartRequest = CreateCartRequest;
type index_d$l_CreateCartResponse = CreateCartResponse;
type index_d$l_CreateCartResponseNonNullableFields = CreateCartResponseNonNullableFields;
type index_d$l_CreateCheckoutFromCurrentCartOptions = CreateCheckoutFromCurrentCartOptions;
type index_d$l_CreateCheckoutFromCurrentCartRequest = CreateCheckoutFromCurrentCartRequest;
type index_d$l_DeleteCartRequest = DeleteCartRequest;
type index_d$l_DeleteCartResponse = DeleteCartResponse;
type index_d$l_DeleteCurrentCartRequest = DeleteCurrentCartRequest;
type index_d$l_EstimateCurrentCartTotalsOptions = EstimateCurrentCartTotalsOptions;
type index_d$l_EstimateCurrentCartTotalsRequest = EstimateCurrentCartTotalsRequest;
type index_d$l_EstimateTotalsRequest = EstimateTotalsRequest;
type index_d$l_EstimateTotalsResponse = EstimateTotalsResponse;
type index_d$l_EstimateTotalsResponseNonNullableFields = EstimateTotalsResponseNonNullableFields;
type index_d$l_GetCartByCheckoutIdRequest = GetCartByCheckoutIdRequest;
type index_d$l_GetCartByCheckoutIdResponse = GetCartByCheckoutIdResponse;
type index_d$l_GetCartRequest = GetCartRequest;
type index_d$l_GetCartResponse = GetCartResponse;
type index_d$l_GetCartResponseNonNullableFields = GetCartResponseNonNullableFields;
type index_d$l_GetCurrentCartRequest = GetCurrentCartRequest;
type index_d$l_GetCurrentCartResponse = GetCurrentCartResponse;
type index_d$l_GetCurrentCartResponseNonNullableFields = GetCurrentCartResponseNonNullableFields;
type index_d$l_HostSelectedMembership = HostSelectedMembership;
type index_d$l_RemoveCouponFromCurrentCartRequest = RemoveCouponFromCurrentCartRequest;
type index_d$l_RemoveLineItemsFromCurrentCartRequest = RemoveLineItemsFromCurrentCartRequest;
type index_d$l_UpdateCartRequest = UpdateCartRequest;
type index_d$l_UpdateCartResponse = UpdateCartResponse;
type index_d$l_UpdateCartResponseNonNullableFields = UpdateCartResponseNonNullableFields;
type index_d$l_UpdateCurrentCartLineItemQuantityRequest = UpdateCurrentCartLineItemQuantityRequest;
type index_d$l_UpdateCurrentCartOptions = UpdateCurrentCartOptions;
type index_d$l_V1Coupon = V1Coupon;
type index_d$l_V1MerchantDiscount = V1MerchantDiscount;
type index_d$l__publicOnCartCreatedType = _publicOnCartCreatedType;
type index_d$l__publicOnCartDeletedType = _publicOnCartDeletedType;
type index_d$l__publicOnCartUpdatedType = _publicOnCartUpdatedType;
declare const index_d$l_addToCurrentCart: typeof addToCurrentCart;
declare const index_d$l_createCheckoutFromCurrentCart: typeof createCheckoutFromCurrentCart;
declare const index_d$l_deleteCurrentCart: typeof deleteCurrentCart;
declare const index_d$l_estimateCurrentCartTotals: typeof estimateCurrentCartTotals;
declare const index_d$l_getCurrentCart: typeof getCurrentCart;
declare const index_d$l_onCartCreated: typeof onCartCreated;
declare const index_d$l_onCartDeleted: typeof onCartDeleted;
declare const index_d$l_onCartUpdated: typeof onCartUpdated;
declare const index_d$l_removeCouponFromCurrentCart: typeof removeCouponFromCurrentCart;
declare const index_d$l_removeLineItemsFromCurrentCart: typeof removeLineItemsFromCurrentCart;
declare const index_d$l_updateCurrentCart: typeof updateCurrentCart;
declare const index_d$l_updateCurrentCartLineItemQuantity: typeof updateCurrentCartLineItemQuantity;
declare namespace index_d$l {
  export { type ActionEvent$h as ActionEvent, type index_d$l_AddToCartRequest as AddToCartRequest, type index_d$l_AddToCartResponse as AddToCartResponse, type index_d$l_AddToCartResponseNonNullableFields as AddToCartResponseNonNullableFields, type index_d$l_AddToCurrentCartAndEstimateTotalsRequest as AddToCurrentCartAndEstimateTotalsRequest, type index_d$l_AddToCurrentCartOptions as AddToCurrentCartOptions, type index_d$l_AddToCurrentCartRequest as AddToCurrentCartRequest, type AdditionalFee$5 as AdditionalFee, type Address$9 as Address, type AddressLocation$8 as AddressLocation, type AddressWithContact$4 as AddressWithContact, type AggregatedTaxBreakdown$3 as AggregatedTaxBreakdown, type ApplicationError$a as ApplicationError, type AppliedDiscount$5 as AppliedDiscount, type AppliedDiscountDiscountSourceOneOf$5 as AppliedDiscountDiscountSourceOneOf, type AutoTaxFallbackCalculationDetails$3 as AutoTaxFallbackCalculationDetails, type BaseEventMetadata$9 as BaseEventMetadata, type BuyerInfo$6 as BuyerInfo, type BuyerInfoIdOneOf$4 as BuyerInfoIdOneOf, type CalculatedLineItem$1 as CalculatedLineItem, type CalculationErrors$4 as CalculationErrors, type CalculationErrorsShippingCalculationErrorOneOf$4 as CalculationErrorsShippingCalculationErrorOneOf, type CarrierError$5 as CarrierError, type CarrierErrors$4 as CarrierErrors, type CarrierServiceOption$3 as CarrierServiceOption, type index_d$l_Cart as Cart, type index_d$l_CartCreatedEnvelope as CartCreatedEnvelope, type index_d$l_CartDeletedEnvelope as CartDeletedEnvelope, type index_d$l_CartDiscount as CartDiscount, type index_d$l_CartDiscountDiscountSourceOneOf as CartDiscountDiscountSourceOneOf, type index_d$l_CartNonNullableFields as CartNonNullableFields, type index_d$l_CartUpdatedEnvelope as CartUpdatedEnvelope, type CatalogOverrideFields$2 as CatalogOverrideFields, type CatalogReference$7 as CatalogReference, ChannelType$5 as ChannelType, ChargeType$5 as ChargeType, type Color$4 as Color, type Coupon$5 as Coupon, type index_d$l_CreateCartRequest as CreateCartRequest, type index_d$l_CreateCartResponse as CreateCartResponse, type index_d$l_CreateCartResponseNonNullableFields as CreateCartResponseNonNullableFields, type index_d$l_CreateCheckoutFromCurrentCartOptions as CreateCheckoutFromCurrentCartOptions, type index_d$l_CreateCheckoutFromCurrentCartRequest as CreateCheckoutFromCurrentCartRequest, type CreateCheckoutRequest$1 as CreateCheckoutRequest, type CreateCheckoutResponse$1 as CreateCheckoutResponse, type CreateCheckoutResponseNonNullableFields$1 as CreateCheckoutResponseNonNullableFields, type CustomLineItem$3 as CustomLineItem, type index_d$l_DeleteCartRequest as DeleteCartRequest, type index_d$l_DeleteCartResponse as DeleteCartResponse, type index_d$l_DeleteCurrentCartRequest as DeleteCurrentCartRequest, type DeliveryLogistics$6 as DeliveryLogistics, type DeliveryTimeSlot$6 as DeliveryTimeSlot, type Description$2 as Description, type DescriptionLine$4 as DescriptionLine, type DescriptionLineDescriptionLineValueOneOf$4 as DescriptionLineDescriptionLineValueOneOf, type DescriptionLineName$4 as DescriptionLineName, DescriptionLineType$4 as DescriptionLineType, type DescriptionLineValueOneOf$4 as DescriptionLineValueOneOf, type Details$5 as Details, type DetailsKindOneOf$5 as DetailsKindOneOf, type DiscountRule$5 as DiscountRule, type DiscountRuleName$5 as DiscountRuleName, DiscountType$5 as DiscountType, type DomainEvent$h as DomainEvent, type DomainEventBodyOneOf$h as DomainEventBodyOneOf, type Empty$a as Empty, type EntityCreatedEvent$h as EntityCreatedEvent, type EntityDeletedEvent$h as EntityDeletedEvent, type EntityUpdatedEvent$h as EntityUpdatedEvent, type index_d$l_EstimateCurrentCartTotalsOptions as EstimateCurrentCartTotalsOptions, type index_d$l_EstimateCurrentCartTotalsRequest as EstimateCurrentCartTotalsRequest, type index_d$l_EstimateTotalsRequest as EstimateTotalsRequest, type index_d$l_EstimateTotalsResponse as EstimateTotalsResponse, type index_d$l_EstimateTotalsResponseNonNullableFields as EstimateTotalsResponseNonNullableFields, type EventMetadata$9 as EventMetadata, type ExtendedFields$9 as ExtendedFields, FallbackReason$3 as FallbackReason, type FieldViolation$5 as FieldViolation, FileType$3 as FileType, type FreeTrialPeriod$2 as FreeTrialPeriod, type FullAddressContactDetails$5 as FullAddressContactDetails, type index_d$l_GetCartByCheckoutIdRequest as GetCartByCheckoutIdRequest, type index_d$l_GetCartByCheckoutIdResponse as GetCartByCheckoutIdResponse, type index_d$l_GetCartRequest as GetCartRequest, type index_d$l_GetCartResponse as GetCartResponse, type index_d$l_GetCartResponseNonNullableFields as GetCartResponseNonNullableFields, type index_d$l_GetCurrentCartRequest as GetCurrentCartRequest, type index_d$l_GetCurrentCartResponse as GetCurrentCartResponse, type index_d$l_GetCurrentCartResponseNonNullableFields as GetCurrentCartResponseNonNullableFields, type GiftCard$5 as GiftCard, type Group$3 as Group, type index_d$l_HostSelectedMembership as HostSelectedMembership, type IdentificationData$h as IdentificationData, type IdentificationDataIdOneOf$h as IdentificationDataIdOneOf, type InvalidMembership$3 as InvalidMembership, type ItemAvailabilityInfo$2 as ItemAvailabilityInfo, ItemAvailabilityStatus$2 as ItemAvailabilityStatus, type ItemTaxFullDetails$5 as ItemTaxFullDetails, type ItemType$5 as ItemType, ItemTypeItemType$5 as ItemTypeItemType, type ItemTypeItemTypeDataOneOf$5 as ItemTypeItemTypeDataOneOf, JurisdictionType$5 as JurisdictionType, type LineItem$5 as LineItem, type LineItemDiscount$5 as LineItemDiscount, type LineItemPricesData$1 as LineItemPricesData, type LineItemQuantityUpdate$1 as LineItemQuantityUpdate, ManualCalculationReason$3 as ManualCalculationReason, type Membership$3 as Membership, type MembershipName$5 as MembershipName, type MembershipOptions$3 as MembershipOptions, type MembershipPaymentCredits$3 as MembershipPaymentCredits, type MerchantDiscount$5 as MerchantDiscount, type MerchantDiscountInput$2 as MerchantDiscountInput, type MessageEnvelope$g as MessageEnvelope, type MultiCurrencyPrice$3 as MultiCurrencyPrice, NameInLineItem$2 as NameInLineItem, NameInOther$2 as NameInOther, type Other$2 as Other, type OtherCharge$3 as OtherCharge, type PaymentOption$2 as PaymentOption, PaymentOptionType$5 as PaymentOptionType, type PhysicalProperties$6 as PhysicalProperties, type PickupDetails$7 as PickupDetails, PickupMethod$6 as PickupMethod, type PlainTextValue$4 as PlainTextValue, type Policy$2 as Policy, type PriceDescription$4 as PriceDescription, type PriceSummary$5 as PriceSummary, type ProductName$4 as ProductName, RateType$3 as RateType, type index_d$l_RemoveCouponFromCurrentCartRequest as RemoveCouponFromCurrentCartRequest, type RemoveCouponRequest$1 as RemoveCouponRequest, type RemoveCouponResponse$1 as RemoveCouponResponse, type RemoveCouponResponseNonNullableFields$1 as RemoveCouponResponseNonNullableFields, type index_d$l_RemoveLineItemsFromCurrentCartRequest as RemoveLineItemsFromCurrentCartRequest, type RemoveLineItemsRequest$1 as RemoveLineItemsRequest, type RemoveLineItemsResponse$1 as RemoveLineItemsResponse, type RemoveLineItemsResponseNonNullableFields$1 as RemoveLineItemsResponseNonNullableFields, type RestoreInfo$h as RestoreInfo, RuleType$5 as RuleType, type Scope$3 as Scope, type SecuredMedia$3 as SecuredMedia, type SelectedCarrierServiceOption$3 as SelectedCarrierServiceOption, type SelectedCarrierServiceOptionOtherCharge$3 as SelectedCarrierServiceOptionOtherCharge, type SelectedCarrierServiceOptionPrices$3 as SelectedCarrierServiceOptionPrices, type SelectedMembership$3 as SelectedMembership, type SelectedMemberships$3 as SelectedMemberships, type SelectedShippingOption$1 as SelectedShippingOption, type ServiceProperties$4 as ServiceProperties, Severity$2 as Severity, type ShippingInformation$3 as ShippingInformation, type ShippingOption$5 as ShippingOption, type ShippingPrice$5 as ShippingPrice, type ShippingRegion$5 as ShippingRegion, type StreetAddress$8 as StreetAddress, SubscriptionFrequency$6 as SubscriptionFrequency, type SubscriptionOptionInfo$3 as SubscriptionOptionInfo, type SubscriptionSettings$6 as SubscriptionSettings, SuggestedFix$2 as SuggestedFix, type SystemError$5 as SystemError, type Target$2 as Target, type TargetLineItem$2 as TargetLineItem, type TargetTargetTypeOneOf$2 as TargetTargetTypeOneOf, type TaxBreakdown$3 as TaxBreakdown, type TaxCalculationDetails$3 as TaxCalculationDetails, type TaxCalculationDetailsCalculationDetailsOneOf$3 as TaxCalculationDetailsCalculationDetailsOneOf, type TaxRateBreakdown$3 as TaxRateBreakdown, type TaxSummary$5 as TaxSummary, type TaxableAddress$5 as TaxableAddress, type TaxableAddressTaxableAddressDataOneOf$5 as TaxableAddressTaxableAddressDataOneOf, TaxableAddressType$5 as TaxableAddressType, type Title$2 as Title, type index_d$l_UpdateCartRequest as UpdateCartRequest, type index_d$l_UpdateCartResponse as UpdateCartResponse, type index_d$l_UpdateCartResponseNonNullableFields as UpdateCartResponseNonNullableFields, type index_d$l_UpdateCurrentCartLineItemQuantityRequest as UpdateCurrentCartLineItemQuantityRequest, type index_d$l_UpdateCurrentCartOptions as UpdateCurrentCartOptions, type UpdateLineItemsQuantityRequest$1 as UpdateLineItemsQuantityRequest, type UpdateLineItemsQuantityResponse$1 as UpdateLineItemsQuantityResponse, type UpdateLineItemsQuantityResponseNonNullableFields$1 as UpdateLineItemsQuantityResponseNonNullableFields, type index_d$l_V1Coupon as V1Coupon, type index_d$l_V1MerchantDiscount as V1MerchantDiscount, type ValidationError$5 as ValidationError, type VatId$6 as VatId, VatType$6 as VatType, type Violation$2 as Violation, WebhookIdentityType$g as WebhookIdentityType, WeightUnit$7 as WeightUnit, type index_d$l__publicOnCartCreatedType as _publicOnCartCreatedType, type index_d$l__publicOnCartDeletedType as _publicOnCartDeletedType, type index_d$l__publicOnCartUpdatedType as _publicOnCartUpdatedType, index_d$l_addToCurrentCart as addToCurrentCart, index_d$l_createCheckoutFromCurrentCart as createCheckoutFromCurrentCart, index_d$l_deleteCurrentCart as deleteCurrentCart, index_d$l_estimateCurrentCartTotals as estimateCurrentCartTotals, index_d$l_getCurrentCart as getCurrentCart, index_d$l_onCartCreated as onCartCreated, index_d$l_onCartDeleted as onCartDeleted, index_d$l_onCartUpdated as onCartUpdated, onCartCreated$1 as publicOnCartCreated, onCartDeleted$1 as publicOnCartDeleted, onCartUpdated$1 as publicOnCartUpdated, index_d$l_removeCouponFromCurrentCart as removeCouponFromCurrentCart, index_d$l_removeLineItemsFromCurrentCart as removeLineItemsFromCurrentCart, index_d$l_updateCurrentCart as updateCurrentCart, index_d$l_updateCurrentCartLineItemQuantity as updateCurrentCartLineItemQuantity };
}

interface Checkout$1 {
    /**
     * Checkout ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Line items.
     *
     * Max: 300 items
     * @readonly
     */
    lineItems?: LineItem$4[];
    /** Billing information. */
    billingInfo?: AddressWithContact$3;
    /** Shipping information. */
    shippingInfo?: ShippingInfo$2;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo$5;
    /**
     * All converted prices are displayed in this currency in three-letter [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Calculated price summary for the checkout.
     * @readonly
     */
    priceSummary?: PriceSummary$4;
    /**
     * Errors when calculating totals.
     * @readonly
     */
    calculationErrors?: CalculationErrors$3;
    /**
     * Applied gift card details.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     * @readonly
     */
    giftCard?: GiftCard$4;
    /**
     * Applied discounts.
     * @readonly
     */
    appliedDiscounts?: AppliedDiscount$4[];
    /** Custom fields. */
    customFields?: CustomField$4[];
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit$6;
    /**
     * Tax summary.
     * @readonly
     */
    taxSummary?: TaxSummary$4;
    /**
     * The currency used when submitting the order.
     * @readonly
     */
    currency?: string;
    /**
     * Sales channel that submitted the order.
     * + `"UNSPECIFIED"`: Unspecified sales channel. This value is not supported.
     * + `"WEB"`: A web client.
     * + `"POS"`: [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395)
     * + `"EBAY"`: [eBay](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop)
     * + `"AMAZON"`: [Amazon](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop)
     * + `"WISH"`: [Wish](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-a-wish-shop)
     * + `"WIX_INVOICES"`: Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings)
     * + `"WIX_APP_STORE"`: [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview)
     * + `"BACKOFFICE_MERCHANT"`: Wix merchant backoffice
     * + `"OTHER_PLATFORM"`: Other sales platform.
     * @readonly
     */
    channelType?: ChannelType$4;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string;
    /**
     * Whether an order was successfully created from this checkout.
     * For an order to be successful, it must be successfully paid for (unless the total is 0).
     * @readonly
     */
    completed?: boolean;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrice?: boolean;
    /**
     * ID of the checkout's initiator.
     * @readonly
     */
    createdBy?: CreatedBy$3;
    /**
     * Date and time the checkout was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the checkout was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary$4;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary$4;
    /** Memberships to apply when creating the order. */
    membershipOptions?: MembershipOptions$2;
    /** Additional Fees. */
    additionalFees?: AdditionalFee$4[];
    /** Cart ID that this checkout was created from. Empty if this checkout wasn't created from a cart. */
    cartId?: string | null;
    /**
     * List of validation violations raised by the [Validations Custom Extension SPI](https://www.wix.com/velo/reference/spis/wix-ecom/ecom-validations/introduction).
     * @readonly
     */
    violations?: Violation$1[];
    /**
     * Custom field data for the checkout object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$8;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /**
     * Additional settings for customization of the checkout process.
     *
     * Custom settings can only be defined when [creating a checkout](https://www.wix.com/velo/reference/wix-ecom-backend/checkout/createcheckout).
     */
    customSettings?: CustomSettings$1;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference$1;
}
interface LineItem$4 {
    /**
     * Line item ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Item quantity.
     *
     * Min: `"1"`
     * Max: `"100000"`
     */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$6;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName$3;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: string;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice$2;
    /**
     * Total line item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    lineItemPrice?: MultiCurrencyPrice$2;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice$2;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice$2;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: MultiCurrencyPrice$2;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: MultiCurrencyPrice$2;
    /**
     * Tax details for this line item.
     * @readonly
     */
    taxDetails?: ItemTaxFullDetails$4;
    /**
     * Discount for this line item's entire quantity.
     * @readonly
     */
    discount?: MultiCurrencyPrice$2;
    /**
     * Line item description lines. Used for displaying the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine$3[];
    /**
     * Line item image details.
     * @readonly
     */
    media?: string;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo$1;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties$5;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType$4;
    /**
     * Subscription option information.
     * @readonly
     */
    subscriptionOptionInfo?: SubscriptionOptionInfo$2;
    /**
     * Type of selected payment option for current item. Defaults to `"FULL_PAYMENT_ONLINE"`.
     * + `"FULL_PAYMENT_ONLINE"`: The entire payment for this item happens as part of the checkout.
     * + `"FULL_PAYMENT_OFFLINE"`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `"MEMBERSHIP"`: Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `"DEPOSIT_ONLINE"`: Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     * @readonly
     */
    paymentOption?: PaymentOptionType$4;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties$3;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field has the same value as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription$3;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice$2;
    /**
     * Whether the line item is a custom line item. Custom line items don't trigger the Catalog service plugin.
     * @readonly
     */
    customLineItem?: boolean;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields$1;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$6 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs.
     *
     * Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from your Wix Stores catalog, learn more about [eCommerce integration](https://www.wix.com/velo/reference/wix-stores-backend/ecommerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ProductName$3 {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface MultiCurrencyPrice$2 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface ItemTaxFullDetails$4 {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice$2;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice$2;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown$2[];
}
interface TaxRateBreakdown$2 {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice$2;
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface TaxBreakdown$2 {
    /** The name of the jurisdiction to which this tax detail applies. For example, "New York" or "Quebec". */
    jurisdiction?: string | null;
    /** The amount of this line item price that was considered nontaxable. (Decimal value) */
    nonTaxableAmount?: MultiCurrencyPrice$2;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.0000 signifies 200% tax. (Decimal value) */
    rate?: string | null;
    /** The amount of tax estimated for this line item. (Decimal value) */
    taxAmount?: MultiCurrencyPrice$2;
    /** The taxable amount of this line item. */
    taxableAmount?: MultiCurrencyPrice$2;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** The type of the jurisdiction in which this tax detail applies. */
    jurisdictionType?: JurisdictionType$4;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$4 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DescriptionLine$3 extends DescriptionLineValueOneOf$3, DescriptionLineDescriptionLineValueOneOf$3 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$3;
    /** Description line color value. */
    colorInfo?: Color$3;
    /** Description line name. */
    name?: DescriptionLineName$3;
}
/** @oneof */
interface DescriptionLineValueOneOf$3 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$3;
    /** Description line color value. */
    colorInfo?: Color$3;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$3 {
}
interface DescriptionLineName$3 {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$3 {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$3 {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$3 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface ItemAvailabilityInfo$1 {
    /**
     * Item availability status.
     * + `"NOT_FOUND"`: Item does not exist
     * + `"NOT_AVAILABLE"`: Item not in stock
     * + `"PARTIALLY_AVAILABLE"`: Available quantity is less than requested
     */
    status?: ItemAvailabilityStatus$1;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus$1 {
    AVAILABLE = "AVAILABLE",
    NOT_FOUND = "NOT_FOUND",
    /** Not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
interface PhysicalProperties$5 {
    /** Line item weight. Measurement unit (`"KG"` or `"LB"`) is taken from `order.weightUnit`. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface Scope$2 {
    /** Scope namespace (Wix Stores, Wix Bookings, Wix Events, Wix Pricing Plans) */
    namespace?: string;
    /** Coupon scope's applied group (e.g., event or ticket in Wix Events) */
    group?: Group$2;
}
interface Group$2 {
    /** Coupon scope's group (e.g., product or collection in Wix Stores). See [valid scope values](https://dev.wix.com/api/rest/coupons/coupons/valid-scope-values). */
    name?: string;
    /** Item ID (when the coupon scope is limited to just one item). */
    entityId?: string | null;
}
interface ItemType$4 extends ItemTypeItemTypeDataOneOf$4 {
    /** Preset item type. */
    preset?: ItemTypeItemType$4;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$4 {
    /** Preset item type. */
    preset?: ItemTypeItemType$4;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$4 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
interface SubscriptionOptionInfo$2 {
    /** Subscription option settings. */
    subscriptionSettings?: SubscriptionSettings$5;
    /** Subscription option title. */
    title?: Title$1;
    /** Subscription option description. */
    description?: Description$1;
}
interface SubscriptionSettings$5 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$5;
    /**
     * Interval of recurring payment.
     *
     * Default: `1`.
     * If SubscriptionFrequency is Day the minimum interval is 7
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal` is `true`. */
    billingCycles?: number | null;
    /**
     * Period until first cycle starts. If applied payNow will be 0
     * If None => no free trial
     */
    freeTrialPeriod?: FreeTrialPeriod$1;
    /** The date the subscription will start. The subscription will be charged either now or according to freeTrialDays. */
    startDate?: Date | null;
    /**
     * Whether to generate an order each billing cycle. An order will always be generated for the first billing cycle.
     * Default None => will behave like true
     */
    generateOrderEachBillingCycle?: boolean | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$5 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface FreeTrialPeriod$1 {
    /** Frequency of priod. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequency$5;
    /** interval of period */
    interval?: number;
}
interface Title$1 {
    /** Subscription option name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Subscription option name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Description$1 {
    /** Subscription option description. */
    original?: string;
    /** Translated subscription option description. */
    translated?: string | null;
}
interface SecuredMedia$2 {
    /** Media ID in Wix Media Manager. */
    _id?: string;
    /** Original filename. */
    fileName?: string;
    /** File type. */
    fileType?: FileType$2;
}
declare enum FileType$2 {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$4 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties$3 {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface PriceDescription$3 {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface CatalogOverrideFields$1 {
    /** Item name. */
    productName?: ProductName$3;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine$3[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$5;
    /** Item image. */
    image?: string;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption$1;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface PaymentOption$1 {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType$4;
}
interface TaxableAddress$4 extends TaxableAddressTaxableAddressDataOneOf$4 {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType$4;
}
/** @oneof */
interface TaxableAddressTaxableAddressDataOneOf$4 {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType$4;
}
declare enum TaxableAddressType$4 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
interface ExtendedFields$8 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface Policy$1 {
    /** Policy title - should be translated */
    title?: string;
    /** Policy content - should be translated */
    content?: string;
}
/** Billing Info and shipping details */
interface AddressWithContact$3 {
    /** Address. */
    address?: ApiAddress;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$4;
}
/** Physical address */
interface ApiAddress {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$7;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$7 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation$7 {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
/** Full contact details for an address */
interface FullAddressContactDetails$4 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: CommonVatId;
}
interface CommonVatId {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: CommonVatType;
}
/** tax info types */
declare enum CommonVatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface ShippingInfo$2 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$3;
    /** Selected option out of the options allowed for the `region`. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption$2;
    /**
     * Shipping region. Based on the address provided.
     * @readonly
     */
    region?: ShippingRegion$4;
    /**
     * All carrier options for this shipping rule.
     * @readonly
     */
    carrierServiceOptions?: CarrierServiceOption$2[];
}
interface SelectedCarrierServiceOption$2 {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics$5;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices$2;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge$2[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface DeliveryLogistics$5 {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails$6;
}
interface PickupDetails$6 {
    /** Pickup address. */
    address?: ApiAddress;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod$5;
}
declare enum PickupMethod$5 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$5 {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
interface SelectedCarrierServiceOptionPrices$2 {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$2;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$2;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$4;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice$2;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice$2;
}
interface SelectedCarrierServiceOptionOtherCharge$2 {
    /** Type of additional cost. */
    type?: ChargeType$4;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices$2;
}
declare enum ChargeType$4 {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface ShippingRegion$4 {
    /**
     * Shipping region ID.
     * @readonly
     */
    _id?: string;
    /** Shipping region name. */
    name?: string;
}
interface CarrierServiceOption$2 {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption$4[];
}
interface ShippingOption$4 {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics$5;
    /** Sipping price information. */
    cost?: ShippingPrice$4;
}
interface ShippingPrice$4 {
    /** Shipping price. */
    price?: MultiCurrencyPrice$2;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge$2[];
}
interface OtherCharge$2 {
    /** Type of additional cost. */
    type?: ChargeType$4;
    /** Price of added cost. */
    price?: MultiCurrencyPrice$2;
}
interface BuyerInfo$5 extends BuyerInfoIdOneOf$3 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - If the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * Contact ID. For more information, see the Contacts API.
     * @readonly
     */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$3 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - If the buyer is a site member.
     * @readonly
     */
    memberId?: string;
}
interface PriceSummary$4 {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice$2;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice$2;
    /** Total tax. */
    tax?: MultiCurrencyPrice$2;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice$2;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice$2;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice$2;
}
interface CalculationErrors$3 extends CalculationErrorsShippingCalculationErrorOneOf$3 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$4;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$3;
    /** Tax calculation error. */
    taxCalculationError?: Details$4;
    /** Coupon calculation error. */
    couponCalculationError?: Details$4;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details$4;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$9[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details$4;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details$4;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$3 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$4;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$3;
}
interface Details$4 extends DetailsKindOneOf$4 {
    applicationError?: ApplicationError$9;
    validationError?: ValidationError$4;
    systemError?: SystemError$4;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$4 {
    applicationError?: ApplicationError$9;
    validationError?: ValidationError$4;
    systemError?: SystemError$4;
}
interface ApplicationError$9 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$4 {
    fieldViolations?: FieldViolation$4[];
}
declare enum RuleType$4 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$4 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$4;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$4 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$3 {
    /** Carrier errors. */
    errors?: CarrierError$4[];
}
interface CarrierError$4 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$4;
}
interface GiftCard$4 {
    /**
     * Gift Card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice$2;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface AppliedDiscount$4 extends AppliedDiscountDiscountSourceOneOf$4 {
    /** Coupon details. */
    coupon?: Coupon$4;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$4;
    /** Discount rule */
    discountRule?: DiscountRule$4;
    /** Discount type. */
    discountType?: DiscountType$4;
    /**
     * IDs of the line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$4 {
    /** Coupon details. */
    coupon?: Coupon$4;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$4;
    /** Discount rule */
    discountRule?: DiscountRule$4;
}
declare enum DiscountType$4 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$4 {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice$2;
    /** Coupon name. */
    name?: string;
}
interface MerchantDiscount$4 {
    /** Discount value. */
    amount?: MultiCurrencyPrice$2;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule$4 {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$4;
    /** Discount value. */
    amount?: MultiCurrencyPrice$2;
}
interface DiscountRuleName$4 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface LineItemDiscount$4 {
    /** ID of line item the discount applies to. */
    _id?: string;
    /** Discount value. */
    totalDiscountAmount?: MultiCurrencyPrice$2;
}
interface CustomField$4 {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
declare enum WeightUnit$6 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface TaxSummary$4 {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice$2;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice$2;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails$2;
}
interface TaxCalculationDetails$2 extends TaxCalculationDetailsCalculationDetailsOneOf$2 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$2;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$2;
    /** Rate calculation type. */
    rateType?: RateType$2;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf$2 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$2;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$2;
}
declare enum RateType$2 {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason$2 {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails$2 {
    /** reason for fallback */
    fallbackReason?: FallbackReason$2;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError$9;
}
declare enum FallbackReason$2 {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface AggregatedTaxBreakdown$2 {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionTypeEnum?: JurisdictionType$4;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.000 signifies 200% tax. (Decimal value) */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: MultiCurrencyPrice$2;
}
declare enum ChannelType$4 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CreatedBy$3 extends CreatedByIdOneOf$1 {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** @oneof */
interface CreatedByIdOneOf$1 {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** Reserved for internal use. */
interface MembershipOptions$2 {
    /**
     * Reserved for internal use.
     * @readonly
     */
    eligibleMemberships?: Membership$2[];
    /**
     * Reserved for internal use.
     * @readonly
     */
    invalidMemberships?: InvalidMembership$2[];
    /** Selected membership to apply to this checkout. */
    selectedMemberships?: SelectedMemberships$2;
}
interface Membership$2 {
    /** Membership ID. */
    _id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName$4;
    /** Line item IDs which are "paid for" by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits$2;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName$4 {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface MembershipPaymentCredits$2 {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership$2 {
    /** Membership details. */
    membership?: Membership$2;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface SelectedMemberships$2 {
    /** Selected memberships. */
    memberships?: SelectedMembership$2[];
}
interface SelectedMembership$2 {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface AdditionalFee$4 {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice$2;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$4;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice$2;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice$2;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface ConversionInfo$1 {
    /**
     * The site currency.
     * @readonly
     */
    siteCurrency?: string;
    /**
     * The rate used when converting from the site currency to the checkout currency.
     * @readonly
     */
    conversionRate?: string;
}
interface Violation$1 {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity$1;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target$1;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity$1 {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target$1 extends TargetTargetTypeOneOf$1 {
    /** General (other) violation. */
    other?: Other$1;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$1;
}
/** @oneof */
interface TargetTargetTypeOneOf$1 {
    /** General (other) violation. */
    other?: Other$1;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$1;
}
/** Available locations on the webpage */
declare enum NameInOther$1 {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem$1 {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix$1 {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other$1 {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther$1;
}
/** Specific line item violation. */
interface TargetLineItem$1 {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem$1;
    /** ID of the line item containing the violation. */
    _id?: string | null;
}
interface CustomSettings$1 {
    /**
     * Whether to restrict the option to add or remove a gift card on the checkout page.
     *
     * Default: `false`
     */
    lockGiftCard?: boolean;
    /**
     * Whether to restrict the option to add or remove a coupon code on the checkout page.
     *
     * Default: `false`
     */
    lockCouponCode?: boolean;
    /**
     * Whether to disable policy agreement checkout in the checkout page
     *
     * Default: `false`
     */
    disabledPolicyAgreementCheckbox?: boolean;
    /**
     * Whether to disable manual payment option for this checkout.
     *
     * Default: `false`
     */
    disabledManualPayment?: boolean;
}
interface CustomContentReference$1 {
    /**
     * ID of the app providing the content.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    appId?: string;
    /**
     * ID of the component within the app it belongs to.
     *
     * You can get your component's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    componentId?: string;
}
interface ExternalReference$2 {
    /**
     * ID of the app associated with the purchase flow.
     * For example, the Wix Pay Links app ID.
     */
    appId?: string;
    /**
     * Reference to an external resource ID. Used to link the purchase flow to a specific entity in an external system.
     * For example, a Wix Pay Link ID.
     */
    resourceId?: string | null;
}
interface UpdatedCheckoutMessage {
    /** Previous checkout. */
    oldCheckout?: Checkout$1;
    /** Updated checkout. */
    updatedCheckout?: Checkout$1;
}
interface CreateCheckoutRequest {
    /** Checkout information. */
    checkoutInfo?: Checkout$1;
    /** The code of an existing coupon to apply to checkout. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Catalog line items to add to the checkout. */
    lineItems?: LineItem$4[];
    /**
     * Custom line items to add to the checkout. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$2[];
    /**
     * **Required**
     *  Sales channel type.
     */
    channelType: ChannelType$4;
    /**
     * Gift card code.
     *
     * The checkout can only hold 1 `giftCardCode` at a time. If an additional `giftCardCode` is added, it will override the existing `giftCardCode`.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     */
    giftCardCode?: string | null;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
}
interface CustomLineItem$2 {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /** Custom line item price. For security reasons, the `price` field should come from backend Velo code, and not be passed from the frontend. */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$3;
    /** Custom line item description lines. Used for displaying the cart, checkout and order. */
    descriptionLines?: DescriptionLine$3[];
    /**
     * Custom line item media.
     * + Link to an image/video from the [Wix Media Manager](https://support.wix.com/en/article/wix-media-about-the-media-manager) - `"wix:image://v1/3c76e2_c53...4ea4~mv2.jpg#originWidth=1000&originHeight=1000"`.
     * + An image from the web - `"http(s)://<image url>"`.
     */
    media?: string;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    _id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName$3;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: string;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$4;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$5;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$4;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties$3;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$6;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface MerchantDiscountInput$1 {
    /** Discount amount. */
    amount?: string;
    /** IDs of the line items the discount applies to. */
    lineItemIds?: string[];
}
interface CreateCheckoutResponse {
    /** Newly created checkout. */
    checkout?: Checkout$1;
}
interface ShippingCalculationErrorData extends ShippingCalculationErrorDataShippingCalculationErrorOneOf {
    generalShippingCalculationError?: Details$4;
    carrierErrors?: CarrierErrors$3;
}
/** @oneof */
interface ShippingCalculationErrorDataShippingCalculationErrorOneOf {
    generalShippingCalculationError?: Details$4;
    carrierErrors?: CarrierErrors$3;
}
interface GetCheckoutRequest {
    /** Checkout ID. */
    _id: string;
}
interface GetCheckoutResponse {
    /** The requested checkout. */
    checkout?: Checkout$1;
}
interface GetCheckoutWithAllExtendedFieldsRequest {
    /** Checkout ID. */
    _id?: string;
}
interface GetCheckoutWithAllExtendedFieldsResponse {
    /** The requested checkout. */
    checkout?: Checkout$1;
}
interface GetCheckoutByCartIdRequest {
    /** Cart ID. */
    _id: string;
}
interface GetCheckoutByCartIdResponse {
    /** The requested checkout. */
    checkout?: Checkout$1;
}
interface GetWixCheckoutURLRequest {
    /** Checkout ID. */
    _id?: string;
}
interface GetWixCheckoutURLResponse {
    /** Checkout URL. */
    checkoutUrl?: string;
}
interface GetCheckoutURLRequest {
    /** Checkout ID. */
    _id: string;
}
interface GetCheckoutURLResponse {
    /** Checkout URL. */
    checkoutUrl?: string;
}
interface UpdateCheckoutRequest {
    /** Checkout information. */
    checkout: Checkout$1;
    /** The code of an existing coupon to apply to checkout. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /** Catalog line items. */
    lineItems?: LineItem$4[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$2[];
}
interface UpdateCheckoutResponse {
    /** Updated checkout. */
    checkout?: Checkout$1;
}
interface RemoveCouponRequest {
    /** ID of the checkout to remove the coupon from. */
    _id: string;
}
interface RemoveCouponResponse {
    /** Updated checkout after removal of coupon. */
    checkout?: Checkout$1;
}
interface RemoveGiftCardRequest {
    /** ID of the checkout to remove the gift card from. */
    _id: string;
}
interface RemoveGiftCardResponse {
    /** Updated checkout after removal of gift card. */
    checkout?: Checkout$1;
}
interface RemoveOverrideCheckoutUrlRequest {
    /** ID of the checkout to remove the override checkout url from. */
    _id: string;
}
interface RemoveOverrideCheckoutUrlResponse {
    /** Updated checkout after removal of override checkout url. */
    checkout?: Checkout$1;
}
interface AddToCheckoutRequest {
    /** Checkout ID. */
    _id: string;
    /** Catalog line items. */
    lineItems?: LineItem$4[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$2[];
}
interface AddToCheckoutResponse {
    /** Updated checkout. */
    checkout?: Checkout$1;
}
interface RemoveLineItemsRequest {
    /** ID of the checkout to remove line items from. */
    _id: string;
    /** IDs of the line items to remove from the checkout. */
    lineItemIds: string[];
}
interface RemoveLineItemsResponse {
    /** Updated checkout after removal of line items. */
    checkout?: Checkout$1;
}
interface CreateOrderRequest$1 {
    /** Checkout ID. */
    _id: string;
    /** Indicates the payment method should be saved on the order */
    savePaymentMethod?: boolean;
    /** Indicates whether to authorize the payment and delay the capture */
    delayCapture?: boolean;
}
interface CreateOrderResponse$1 extends CreateOrderResponseIdOneOf {
    /** ID of the newly created order. */
    orderId?: string;
    /** ID of newly created subscription. Learn more about your site's [Subscriptions](https://support.wix.com/en/article/wix-stores-managing-product-subscriptions). */
    subscriptionId?: string;
    /**
     * Payment gateway order ID.
     *
     * For online orders, pass this value as the `paymentId` parameter to the Wix Pay [`startPayment()`](https://www.wix.com/velo/reference/wix-pay-frontend/startpayment) function so your customer can pay for the order.
     *
     * This field will be returned if money needs to be charged. In some cases, money cannot be charged:
     * + When the total price (the `priceSummary.total.amount` field in the checkout/order objects) is 0. For example, in the case of a free item or an item with a 100% discount.
     * + If the total price is not 0, but the payment is covered by alternative payment methods, such as a gift card.
     */
    paymentGatewayOrderId?: string | null;
}
/** @oneof */
interface CreateOrderResponseIdOneOf {
    /** ID of newly created order. */
    orderId?: string;
    /** ID of newly created subscription. Learn more about your site's [Subscriptions](https://support.wix.com/en/article/wix-stores-managing-product-subscriptions). */
    subscriptionId?: string;
}
interface PaymentErrorResponseData {
    paymentResponseToken?: string | null;
    transactionStatus?: string;
    failureDetails?: string | null;
}
interface DoublePaymentErrorData extends DoublePaymentErrorDataIdOneOf {
    orderId?: string;
    subscriptionId?: string;
}
/** @oneof */
interface DoublePaymentErrorDataIdOneOf {
    orderId?: string;
    subscriptionId?: string;
}
interface RedeemErrorData {
    reason?: string;
}
interface ViolationsList {
    /** Violations risen by ValidationsSPI implementers. */
    violations?: Violation$1[];
}
interface CreateOrderAndChargeRequest {
    /** Checkout ID. */
    _id?: string;
    /** Payment token. */
    paymentToken?: string | null;
    /** Indicates the payment method should be saved on the order */
    savePaymentMethod?: boolean;
    /** Indicates whether to authorize the payment and delay the capture */
    delayCapture?: boolean;
}
interface CreateOrderAndChargeResponse extends CreateOrderAndChargeResponseIdOneOf {
    /** ID of newly created order. */
    orderId?: string;
    /** ID of newly created subscription. */
    subscriptionId?: string;
    /** Payment response token. */
    paymentResponseToken?: string | null;
    /**
     * For online orders, send this value as a parameter to the Wix Pay [`startPayment()`](https://www.wix.com/velo/reference/wix-pay/startpayment) function to enable your buyer to pay for the order.
     * `paymentGatewayOrderId` will be returned if money needs to be charged.
     *
     * In some cases, money should not be charged:
     * + If the total price is 0. For example, in the case of a free item or an item with 100% discount.
     * + If the total price is not 0, but the payment is covered by alternative payment methods, such as a gift card.
     */
    paymentGatewayOrderId?: string | null;
}
/** @oneof */
interface CreateOrderAndChargeResponseIdOneOf {
    /** ID of newly created order. */
    orderId?: string;
    /** ID of newly created subscription. */
    subscriptionId?: string;
}
interface MarkCheckoutAsCompletedRequest {
    /** Checkout ID. */
    _id: string;
}
interface MarkCheckoutAsCompletedResponse {
}
/** Triggered when buyer successfully completed checkout flow */
interface CheckoutMarkedAsCompleted {
    checkout?: Checkout$1;
}
interface UpdateLineItemsQuantityRequest {
    /** Checkout ID. */
    _id: string;
    /** Line item info to update. */
    lineItems: LineItemQuantityUpdate[];
}
interface LineItemQuantityUpdate {
    /** ID of the line item to update. */
    _id?: string;
    /**
     * New total amount of the line item,
     * not the amount to add to the current `quantity`.
     *
     * Min: `1`
     *
     * Max: `100000`
     */
    quantity?: number;
}
interface UpdateLineItemsQuantityResponse {
    /** Updated checkout. */
    checkout?: Checkout$1;
}
interface GetCheckoutPaymentSettingsRequest {
    /** Checkout ID. */
    _id: string;
}
interface GetCheckoutPaymentSettingsResponse {
    blockedPaymentOptions?: GetCheckoutPaymentSettingsResponsePaymentOption[];
}
declare enum GetCheckoutPaymentSettingsResponsePaymentOption {
    UNKNOWN_PAYMENT_OPTION = "UNKNOWN_PAYMENT_OPTION",
    MANUAL = "MANUAL"
}
interface SubscriptionCreated {
    subscription?: Subscription;
}
interface Subscription {
    /**
     * Subscription id (auto-generated upon subscription creation)
     * @readonly
     */
    _id?: string;
    /** id of subscription in external system */
    externalId?: string | null;
    /**
     * Subscription creation date
     * @readonly
     */
    dateCreated?: Date | null;
    /** The id of the cart this order was created from */
    cartId?: string | null;
    /** The id of the checkout this subscriptions was created from */
    checkoutId?: string | null;
    /** member or contact */
    buyerInfo?: V1BuyerInfo;
    /** Line items ordered */
    lineItems?: V1LineItem$1[];
    /** Totals for subscription's line items */
    totals?: Totals$1;
    /** site settings at the moment when subscription created */
    storeSettings?: StoreSettings;
    /** Full billing address */
    billingAddress?: Address$8;
    /** Delivery information */
    shippingInfo?: V1ShippingInfo;
    /** Coupon that was applied to subscription */
    appliedCoupon?: AppliedCoupon$1;
    /** Message from the customer (e.g., customization request) */
    buyerNote?: string | null;
    /** Custom field */
    customField?: V1CustomField;
    /** Information about subscription option from which subscription was created */
    subscriptionOptionInfo?: V1SubscriptionOptionInfo;
    /** Sales channel that submitted this subscription */
    channelInfo?: ChannelInfo$3;
    /** defines when subscriber will be charged: for frequency=MONTH, billingCycles=6, interval=2 payment will be done every 2 month during one year */
    subscriptionSettings?: V1SubscriptionSettings;
    /**
     * information about first subscription payment
     * @readonly
     */
    billingInfo?: BillingInfo$1;
}
/** Buyer Info */
interface V1BuyerInfo {
    /** Wix customer ID */
    _id?: string;
    /** Customer type */
    identityType?: IdentityType$4;
}
declare enum IdentityType$4 {
    UNSPECIFIED_IDENTITY_TYPE = "UNSPECIFIED_IDENTITY_TYPE",
    /** Site member */
    MEMBER = "MEMBER",
    /** Contact */
    CONTACT = "CONTACT"
}
interface V1LineItem$1 {
    /** Line item ID (auto-generated) */
    index?: number;
    /** Line item quantity */
    quantity?: number;
    /** Line item variantId (from Stores Catalog) */
    variantId?: string | null;
    /** Line item options ordered */
    options?: OptionSelection$1[];
    /** Line item custom text field selections */
    customTextFields?: CustomTextFieldSelection$1[];
    /** Charges details */
    chargeDetails?: ChargeDetails;
    /** Product details */
    productDetails?: ProductDetails;
}
interface OptionSelection$1 {
    /** Option name */
    option?: string;
    /** Selected choice for this option */
    selection?: string;
}
interface CustomTextFieldSelection$1 {
    /** Custom text field name */
    title?: string;
    /** Custom text field value */
    value?: string;
}
interface ChargeDetails {
    /** price of line item (depends on subscription option) */
    price?: number;
    /** Total price charged to the customer (for this line items) after computation of quantity and discount */
    totalPrice?: number | null;
    /** Discount applied for this line item */
    discount?: number | null;
    /** Tax applied for this line item */
    tax?: number | null;
    /** Is tax applied for this line item */
    taxIncludedInPrice?: boolean;
    /** Tax rate %, as a decimal point >= 0 */
    taxRate?: string | null;
}
interface ProductDetails {
    /** Line item product ID (optional for POS orders) */
    productId?: string | null;
    /** Line item name */
    name?: string;
    /** Line item name translated to buyer's language */
    translatedName?: string | null;
    /** Line item type (may be extended) */
    lineItemType?: LineItemType$1;
    /** Line item primary media for preview */
    mediaItem?: MediaItem$1;
    /** Line item SKU */
    sku?: string | null;
    /** Line item weight */
    weight?: number | null;
    /** Line item notes */
    notes?: string | null;
    /** Line item fulfillerId from stores fulfillers. No value means self fulfilled */
    fulfillerId?: string | null;
    /** Tax group id */
    taxGroupId?: string | null;
    /** App id from the catalog reference */
    appId?: string | null;
}
declare enum LineItemType$1 {
    /** Line item type can't be classified, due to an error */
    UNSPECIFIED_LINE_ITEM_TYPE = "UNSPECIFIED_LINE_ITEM_TYPE",
    /** Physical item type */
    PHYSICAL = "PHYSICAL",
    /** Digital item type */
    DIGITAL = "DIGITAL",
    /** Custom item price */
    CUSTOM_AMOUNT_ITEM = "CUSTOM_AMOUNT_ITEM"
}
interface MediaItem$1 {
    /**
     * Media type
     * @readonly
     */
    mediaType?: MediaItemType$1;
    /**
     * Media URL
     * @readonly
     */
    url?: string;
    /**
     * Media item width
     * @readonly
     */
    width?: number;
    /**
     * Media item height
     * @readonly
     */
    height?: number;
    /** Media ID (for media items previously saved in Wix Media) */
    _id?: string | null;
    /** Media external URL */
    externalImageUrl?: string | null;
    /** Alternative text for presentation when media cannot be displayed */
    altText?: string | null;
}
declare enum MediaItemType$1 {
    /** Media item type can't be classified, due to an error */
    UNSPECIFIED_MEDIA_TYPE_ITEM = "UNSPECIFIED_MEDIA_TYPE_ITEM",
    /** Image item type */
    IMAGE = "IMAGE"
}
interface Totals$1 {
    /** Subtotal of all line items, before tax */
    subtotal?: number;
    /** Total shipping price, including tax */
    shipping?: number;
    /** Total tax */
    tax?: number;
    /** Total calculated discount value */
    discount?: number;
    /** Total price */
    total?: number;
    /** Total weight */
    weight?: number | null;
    /**
     * Total line items quantity
     * @readonly
     */
    quantity?: number;
}
interface StoreSettings {
    /** Currency used for pricing in this store */
    currency?: string | null;
    /** Weight unit used in this store */
    weightUnit?: WeightUnit$6;
    /**
     * The language to be used when communicating with the buyer
     * For a site that support multiple languages, this would be the language the buyer selected
     * Otherwise this would be the site language
     */
    buyerLanguage?: string | null;
}
interface Address$8 extends AddressAddressLine1OptionsOneOf$1 {
    /** Address line 1 (free text) */
    addressLine1?: string;
    /** Address line 1 (street) */
    street?: Street$1;
    /** Addressee name */
    fullName?: FullName$1;
    /** Country code (2 letters) */
    country?: string | null;
    /** State or district */
    subdivision?: string | null;
    /** City name */
    city?: string | null;
    /** ZIP/postal code */
    zipCode?: string | null;
    /** Phone number */
    phone?: string | null;
    /** Company name */
    company?: string | null;
    /** Email address */
    email?: string | null;
    /** address line */
    addressLine2?: string | null;
    /** Tax information (for Brazil only) */
    vatId?: VatId$5;
}
/** @oneof */
interface AddressAddressLine1OptionsOneOf$1 {
    /** Address line 1 (free text) */
    addressLine1?: string;
    /** Address line 1 (street) */
    street?: Street$1;
}
interface FullName$1 {
    /** Customer's first name */
    firstName?: string;
    /** Customer's last name */
    lastName?: string;
}
interface Street$1 {
    /** Street number */
    number?: string;
    /** Street name */
    name?: string;
}
interface VatId$5 {
    /** Customer's tax ID. */
    number?: string;
    /**
     * Tax type.
     * + `CPF`: For individual tax payers.
     * + `CNPJ`: For corporations.
     */
    type?: VatType$5;
}
/** Brazilian tax info types */
declare enum VatType$5 {
    /** When the tax info type can't be classified, due to an error */
    UNSPECIFIED_TAX_TYPE = "UNSPECIFIED_TAX_TYPE",
    /** CPF - for individual tax payers */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface V1ShippingInfo extends V1ShippingInfoDetailsOneOf {
    /** Shipment details (when this object describes shipment) */
    shipmentDetails?: ShipmentDetails$1;
    /** Pickup details (when this object describes pickup) */
    pickupDetails?: V1PickupDetails$1;
    /** Delivery option name */
    deliveryOption?: string;
    /** Delivery option delivery time */
    estimatedDeliveryTime?: string | null;
}
/** @oneof */
interface V1ShippingInfoDetailsOneOf {
    /** Shipment details (when this object describes shipment) */
    shipmentDetails?: ShipmentDetails$1;
    /** Pickup details (when this object describes pickup) */
    pickupDetails?: V1PickupDetails$1;
}
interface ShipmentDetails$1 {
    /** Shipping destination address */
    address?: Address$8;
    /** Discount applied for shipping */
    discount?: number | null;
    /** Tax applied for shipping */
    tax?: number | null;
    /** Whether tax is included in the price */
    taxIncludedInPrice?: boolean;
    /** Tax rate % for shipping, as a decimal point >= 0 */
    taxRate?: string | null;
}
interface V1PickupDetails$1 {
    /** Pickup address */
    address?: PickupAddress$3;
    /** Store owner's pickup instructions */
    pickupInstructions?: string | null;
}
interface PickupAddress$3 {
    /** Country code (2 letters) */
    country?: string;
    /** State/District */
    subdivision?: string | null;
    /** Address */
    addressLine?: string;
    /** City */
    city?: string;
    /** ZIP/postal code */
    zipCode?: string;
}
interface AppliedCoupon$1 {
    /** Coupon ID */
    couponId?: string;
    /** Coupon name */
    name?: string;
    /** Coupon code */
    code?: string;
}
/** Custom field */
interface V1CustomField {
    /** Free text that the customer entered in the custom field during the checkout process */
    value?: string;
    /** Title for the custom field */
    title?: string;
    /** The title translated according to the buyer language */
    translatedTitle?: string;
}
interface V1SubscriptionOptionInfo {
    _id?: string | null;
    title?: string;
    description?: string | null;
    discount?: Discount$2;
}
interface Discount$2 {
    /** Discount type. */
    type?: DiscountDiscountType;
    /** Discount value. */
    value?: number;
}
declare enum DiscountDiscountType {
    UNDEFINED = "UNDEFINED",
    /** No discount */
    AMOUNT = "AMOUNT",
    PERCENT = "PERCENT"
}
interface ChannelInfo$3 {
    /** Sales channel that submitted the subscription */
    type?: ChannelInfoChannelType;
}
declare enum ChannelInfoChannelType {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE"
}
interface V1SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$5;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
interface BillingInfo$1 {
    /** Payment method used for this order */
    paymentMethod?: string | null;
    /** Transaction ID from payment gateway (e.g., Wix Payments) */
    paymentGatewayTransactionId?: string | null;
    /** Order ID from payment gateway (e.g., Wix Payments) */
    paymentGatewayOrderId?: string | null;
}
interface Empty$9 {
}
interface DomainEvent$g extends DomainEventBodyOneOf$g {
    createdEvent?: EntityCreatedEvent$g;
    updatedEvent?: EntityUpdatedEvent$g;
    deletedEvent?: EntityDeletedEvent$g;
    actionEvent?: ActionEvent$g;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$g {
    createdEvent?: EntityCreatedEvent$g;
    updatedEvent?: EntityUpdatedEvent$g;
    deletedEvent?: EntityDeletedEvent$g;
    actionEvent?: ActionEvent$g;
}
interface EntityCreatedEvent$g {
    entity?: string;
}
interface RestoreInfo$g {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$g {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$g {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$g {
    body?: string;
}
interface MessageEnvelope$f {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$g;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$g extends IdentificationDataIdOneOf$g {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$f;
}
/** @oneof */
interface IdentificationDataIdOneOf$g {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$f {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface CatalogReferenceNonNullableFields$3 {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields$3 {
    original: string;
}
interface MultiCurrencyPriceNonNullableFields$1 {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface TaxRateBreakdownNonNullableFields$1 {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields$1;
    exemptAmount?: MultiCurrencyPriceNonNullableFields$1;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields$1;
}
interface TaxBreakdownNonNullableFields$1 {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields$1;
    taxAmount?: MultiCurrencyPriceNonNullableFields$1;
    taxableAmount?: MultiCurrencyPriceNonNullableFields$1;
    jurisdictionType: JurisdictionType$4;
}
interface ItemTaxFullDetailsNonNullableFields$3 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$1;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields$1;
    rateBreakdown: TaxRateBreakdownNonNullableFields$1[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields$1;
    taxBreakdown: TaxBreakdownNonNullableFields$1[];
}
interface PlainTextValueNonNullableFields$3 {
    original: string;
}
interface ColorNonNullableFields$3 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$3 {
    original: string;
}
interface DescriptionLineNonNullableFields$3 {
    plainText?: PlainTextValueNonNullableFields$3;
    colorInfo?: ColorNonNullableFields$3;
    plainTextValue?: PlainTextValueNonNullableFields$3;
    color: string;
    name?: DescriptionLineNameNonNullableFields$3;
    lineType: DescriptionLineType$3;
}
interface ItemAvailabilityInfoNonNullableFields {
    status: ItemAvailabilityStatus$1;
}
interface PhysicalPropertiesNonNullableFields$3 {
    shippable: boolean;
}
interface GroupNonNullableFields {
    name: string;
}
interface ScopeNonNullableFields {
    namespace: string;
    group?: GroupNonNullableFields;
}
interface ItemTypeNonNullableFields$3 {
    preset: ItemTypeItemType$4;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields$1 {
    frequency: SubscriptionFrequency$5;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields$3 {
    frequency: SubscriptionFrequency$5;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields$1;
}
interface TitleNonNullableFields$1 {
    original: string;
}
interface DescriptionNonNullableFields$1 {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields$1 {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$3;
    title?: TitleNonNullableFields$1;
    description?: DescriptionNonNullableFields$1;
}
interface SecuredMediaNonNullableFields$1 {
    _id: string;
    fileName: string;
    fileType: FileType$2;
}
interface PriceDescriptionNonNullableFields$3 {
    original: string;
}
interface PaymentOptionNonNullableFields$1 {
    value: PaymentOptionType$4;
}
interface CatalogOverrideFieldsNonNullableFields$1 {
    productName?: ProductNameNonNullableFields$3;
    descriptionLines: DescriptionLineNonNullableFields$3[];
    physicalProperties?: PhysicalPropertiesNonNullableFields$3;
    image: string;
    paymentOption?: PaymentOptionNonNullableFields$1;
}
interface TaxableAddressNonNullableFields$3 {
    addressType: TaxableAddressType$4;
}
interface PolicyNonNullableFields$1 {
    title: string;
    content: string;
}
interface LineItemNonNullableFields {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields$3;
    productName?: ProductNameNonNullableFields$3;
    url: string;
    price?: MultiCurrencyPriceNonNullableFields$1;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields$1;
    fullPrice?: MultiCurrencyPriceNonNullableFields$1;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$1;
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$1;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$1;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$3;
    discount?: MultiCurrencyPriceNonNullableFields$1;
    descriptionLines: DescriptionLineNonNullableFields$3[];
    media: string;
    availability?: ItemAvailabilityInfoNonNullableFields;
    physicalProperties?: PhysicalPropertiesNonNullableFields$3;
    couponScopes: ScopeNonNullableFields[];
    itemType?: ItemTypeNonNullableFields$3;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields$1;
    digitalFile?: SecuredMediaNonNullableFields$1;
    paymentOption: PaymentOptionType$4;
    priceDescription?: PriceDescriptionNonNullableFields$3;
    depositAmount?: MultiCurrencyPriceNonNullableFields$1;
    customLineItem: boolean;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields$1;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    savePaymentMethod: boolean;
    taxableAddress?: TaxableAddressNonNullableFields$3;
    policies: PolicyNonNullableFields$1[];
}
interface StreetAddressNonNullableFields$6 {
    number: string;
    name: string;
    apt: string;
}
interface ApiAddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields$6;
}
interface CommonVatIdNonNullableFields {
    _id: string;
    type: CommonVatType;
}
interface FullAddressContactDetailsNonNullableFields$2 {
    vatId?: CommonVatIdNonNullableFields;
}
interface AddressWithContactNonNullableFields$2 {
    address?: ApiAddressNonNullableFields;
    contactDetails?: FullAddressContactDetailsNonNullableFields$2;
}
interface PickupDetailsNonNullableFields$4 {
    address?: ApiAddressNonNullableFields;
    businessLocation: boolean;
    pickupMethod: PickupMethod$5;
}
interface DeliveryLogisticsNonNullableFields$4 {
    pickupDetails?: PickupDetailsNonNullableFields$4;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields$1 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$1;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$1;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$3;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$1;
    price?: MultiCurrencyPriceNonNullableFields$1;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields$1 {
    type: ChargeType$4;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$1;
}
interface SelectedCarrierServiceOptionNonNullableFields$1 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$4;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$1;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields$1[];
}
interface ShippingRegionNonNullableFields$1 {
    _id: string;
    name: string;
}
interface OtherChargeNonNullableFields$1 {
    type: ChargeType$4;
    price?: MultiCurrencyPriceNonNullableFields$1;
}
interface ShippingPriceNonNullableFields$3 {
    price?: MultiCurrencyPriceNonNullableFields$1;
    otherCharges: OtherChargeNonNullableFields$1[];
}
interface ShippingOptionNonNullableFields$3 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$4;
    cost?: ShippingPriceNonNullableFields$3;
}
interface CarrierServiceOptionNonNullableFields$1 {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields$3[];
}
interface ShippingInfoNonNullableFields {
    shippingDestination?: AddressWithContactNonNullableFields$2;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields$1;
    region?: ShippingRegionNonNullableFields$1;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields$1[];
}
interface BuyerInfoNonNullableFields$2 {
    visitorId: string;
    memberId: string;
    openAccess: boolean;
}
interface PriceSummaryNonNullableFields$3 {
    subtotal?: MultiCurrencyPriceNonNullableFields$1;
    shipping?: MultiCurrencyPriceNonNullableFields$1;
    tax?: MultiCurrencyPriceNonNullableFields$1;
    discount?: MultiCurrencyPriceNonNullableFields$1;
    total?: MultiCurrencyPriceNonNullableFields$1;
    additionalFees?: MultiCurrencyPriceNonNullableFields$1;
}
interface ApplicationErrorNonNullableFields$8 {
    code: string;
    description: string;
}
interface FieldViolationNonNullableFields$3 {
    field: string;
    description: string;
    violatedRule: RuleType$4;
}
interface ValidationErrorNonNullableFields$3 {
    fieldViolations: FieldViolationNonNullableFields$3[];
}
interface DetailsNonNullableFields$3 {
    applicationError?: ApplicationErrorNonNullableFields$8;
    validationError?: ValidationErrorNonNullableFields$3;
}
interface CarrierErrorNonNullableFields$2 {
    carrierId: string;
    error?: DetailsNonNullableFields$3;
}
interface CarrierErrorsNonNullableFields$2 {
    errors: CarrierErrorNonNullableFields$2[];
}
interface CalculationErrorsNonNullableFields$2 {
    generalShippingCalculationError?: DetailsNonNullableFields$3;
    carrierErrors?: CarrierErrorsNonNullableFields$2;
    taxCalculationError?: DetailsNonNullableFields$3;
    couponCalculationError?: DetailsNonNullableFields$3;
    giftCardCalculationError?: DetailsNonNullableFields$3;
    orderValidationErrors: ApplicationErrorNonNullableFields$8[];
    membershipError?: DetailsNonNullableFields$3;
    discountsCalculationError?: DetailsNonNullableFields$3;
}
interface GiftCardNonNullableFields$2 {
    _id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields$1;
    appId: string;
}
interface CouponNonNullableFields$3 {
    _id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields$1;
    name: string;
    couponType: string;
}
interface MerchantDiscountNonNullableFields$3 {
    amount?: MultiCurrencyPriceNonNullableFields$1;
}
interface DiscountRuleNameNonNullableFields$3 {
    original: string;
}
interface DiscountRuleNonNullableFields$3 {
    _id: string;
    name?: DiscountRuleNameNonNullableFields$3;
    amount?: MultiCurrencyPriceNonNullableFields$1;
}
interface LineItemDiscountNonNullableFields$3 {
    _id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields$1;
}
interface AppliedDiscountNonNullableFields$3 {
    coupon?: CouponNonNullableFields$3;
    merchantDiscount?: MerchantDiscountNonNullableFields$3;
    discountRule?: DiscountRuleNonNullableFields$3;
    discountType: DiscountType$4;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$3[];
}
interface CustomFieldNonNullableFields$2 {
    title: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields$1 {
    fallbackReason: FallbackReason$2;
    error?: ApplicationErrorNonNullableFields$8;
}
interface TaxCalculationDetailsNonNullableFields$1 {
    manualRateReason: ManualCalculationReason$2;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields$1;
    rateType: RateType$2;
}
interface AggregatedTaxBreakdownNonNullableFields$1 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType$4;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields$1;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields$1;
}
interface TaxSummaryNonNullableFields$3 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$1;
    totalTax?: MultiCurrencyPriceNonNullableFields$1;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields$1;
    totalExempt?: MultiCurrencyPriceNonNullableFields$1;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields$1[];
}
interface CreatedByNonNullableFields$2 {
    userId: string;
    memberId: string;
    visitorId: string;
    appId: string;
}
interface MembershipNameNonNullableFields$3 {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields$1 {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields$1 {
    _id: string;
    appId: string;
    name?: MembershipNameNonNullableFields$3;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields$1;
}
interface InvalidMembershipNonNullableFields$1 {
    membership?: MembershipNonNullableFields$1;
    reason: string;
}
interface SelectedMembershipNonNullableFields$1 {
    _id: string;
    appId: string;
    lineItemIds: string[];
}
interface SelectedMembershipsNonNullableFields {
    memberships: SelectedMembershipNonNullableFields$1[];
}
interface MembershipOptionsNonNullableFields$1 {
    eligibleMemberships: MembershipNonNullableFields$1[];
    invalidMemberships: InvalidMembershipNonNullableFields$1[];
    selectedMemberships?: SelectedMembershipsNonNullableFields;
}
interface AdditionalFeeNonNullableFields$2 {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields$1;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$3;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields$1;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields$1;
    lineItemIds: string[];
}
interface ConversionInfoNonNullableFields {
    siteCurrency: string;
    conversionRate: string;
}
interface OtherNonNullableFields {
    name: NameInOther$1;
}
interface TargetLineItemNonNullableFields {
    name: NameInLineItem$1;
    suggestedFix: SuggestedFix$1;
}
interface TargetNonNullableFields {
    other?: OtherNonNullableFields;
    lineItem?: TargetLineItemNonNullableFields;
}
interface ViolationNonNullableFields {
    severity: Severity$1;
    target?: TargetNonNullableFields;
}
interface CustomSettingsNonNullableFields {
    lockGiftCard: boolean;
    lockCouponCode: boolean;
    disabledPolicyAgreementCheckbox: boolean;
    disabledManualPayment: boolean;
}
interface CustomContentReferenceNonNullableFields$1 {
    appId: string;
    componentId: string;
}
interface ExternalReferenceNonNullableFields$1 {
    appId: string;
}
interface CheckoutNonNullableFields {
    lineItems: LineItemNonNullableFields[];
    billingInfo?: AddressWithContactNonNullableFields$2;
    shippingInfo?: ShippingInfoNonNullableFields;
    buyerInfo?: BuyerInfoNonNullableFields$2;
    conversionCurrency: string;
    priceSummary?: PriceSummaryNonNullableFields$3;
    calculationErrors?: CalculationErrorsNonNullableFields$2;
    giftCard?: GiftCardNonNullableFields$2;
    appliedDiscounts: AppliedDiscountNonNullableFields$3[];
    customFields: CustomFieldNonNullableFields$2[];
    weightUnit: WeightUnit$6;
    taxSummary?: TaxSummaryNonNullableFields$3;
    currency: string;
    channelType: ChannelType$4;
    siteLanguage: string;
    buyerLanguage: string;
    completed: boolean;
    taxIncludedInPrice: boolean;
    createdBy?: CreatedByNonNullableFields$2;
    payNow?: PriceSummaryNonNullableFields$3;
    payLater?: PriceSummaryNonNullableFields$3;
    membershipOptions?: MembershipOptionsNonNullableFields$1;
    additionalFees: AdditionalFeeNonNullableFields$2[];
    conversionInfo?: ConversionInfoNonNullableFields;
    payNowTotalAfterGiftCard?: MultiCurrencyPriceNonNullableFields$1;
    violations: ViolationNonNullableFields[];
    totalAfterGiftCard?: MultiCurrencyPriceNonNullableFields$1;
    customSettings?: CustomSettingsNonNullableFields;
    customContentReference?: CustomContentReferenceNonNullableFields$1;
    externalReference?: ExternalReferenceNonNullableFields$1;
}
interface CreateCheckoutResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface GetCheckoutResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface GetCheckoutByCartIdResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface GetCheckoutURLResponseNonNullableFields {
    checkoutUrl: string;
}
interface UpdateCheckoutResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface RemoveCouponResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface RemoveGiftCardResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface RemoveOverrideCheckoutUrlResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface AddToCheckoutResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface RemoveLineItemsResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface CreateOrderResponseNonNullableFields$1 {
    orderId: string;
    subscriptionId: string;
}
interface UpdateLineItemsQuantityResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface GetCheckoutPaymentSettingsResponseNonNullableFields {
    blockedPaymentOptions: GetCheckoutPaymentSettingsResponsePaymentOption[];
}
interface BaseEventMetadata$8 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$g;
}
interface EventMetadata$8 extends BaseEventMetadata$8 {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface CheckoutCreatedEnvelope {
    entity: Checkout$1;
    metadata: EventMetadata$8;
}
interface CheckoutUpdatedEnvelope {
    entity: Checkout$1;
    metadata: EventMetadata$8;
}
interface CheckoutCompletedEnvelope {
    data: CheckoutMarkedAsCompleted;
    metadata: EventMetadata$8;
}
interface CreateCheckoutOptions {
    /** Checkout information. */
    checkoutInfo?: Checkout$1;
    /** The code of an existing coupon to apply to checkout. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Catalog line items to add to the checkout. */
    lineItems?: LineItem$4[];
    /**
     * Custom line items to add to the checkout. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$2[];
    /**
     * **Required**
     *  Sales channel type.
     */
    channelType: ChannelType$4;
    /**
     * Gift card code.
     *
     * The checkout can only hold 1 `giftCardCode` at a time. If an additional `giftCardCode` is added, it will override the existing `giftCardCode`.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     */
    giftCardCode?: string | null;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
}
interface UpdateCheckout {
    /**
     * Checkout ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Line items.
     *
     * Max: 300 items
     * @readonly
     */
    lineItems?: LineItem$4[];
    /** Billing information. */
    billingInfo?: AddressWithContact$3;
    /** Shipping information. */
    shippingInfo?: ShippingInfo$2;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo$5;
    /**
     * All converted prices are displayed in this currency in three-letter [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Calculated price summary for the checkout.
     * @readonly
     */
    priceSummary?: PriceSummary$4;
    /**
     * Errors when calculating totals.
     * @readonly
     */
    calculationErrors?: CalculationErrors$3;
    /**
     * Applied gift card details.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     * @readonly
     */
    giftCard?: GiftCard$4;
    /**
     * Applied discounts.
     * @readonly
     */
    appliedDiscounts?: AppliedDiscount$4[];
    /** Custom fields. */
    customFields?: CustomField$4[];
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit$6;
    /**
     * Tax summary.
     * @readonly
     */
    taxSummary?: TaxSummary$4;
    /**
     * The currency used when submitting the order.
     * @readonly
     */
    currency?: string;
    /**
     * Sales channel that submitted the order.
     * + `"UNSPECIFIED"`: Unspecified sales channel. This value is not supported.
     * + `"WEB"`: A web client.
     * + `"POS"`: [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395)
     * + `"EBAY"`: [eBay](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop)
     * + `"AMAZON"`: [Amazon](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop)
     * + `"WISH"`: [Wish](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-a-wish-shop)
     * + `"WIX_INVOICES"`: Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings)
     * + `"WIX_APP_STORE"`: [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview)
     * + `"BACKOFFICE_MERCHANT"`: Wix merchant backoffice
     * + `"OTHER_PLATFORM"`: Other sales platform.
     * @readonly
     */
    channelType?: ChannelType$4;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string;
    /**
     * Whether an order was successfully created from this checkout.
     * For an order to be successful, it must be successfully paid for (unless the total is 0).
     * @readonly
     */
    completed?: boolean;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrice?: boolean;
    /**
     * ID of the checkout's initiator.
     * @readonly
     */
    createdBy?: CreatedBy$3;
    /**
     * Date and time the checkout was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the checkout was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary$4;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary$4;
    /** Memberships to apply when creating the order. */
    membershipOptions?: MembershipOptions$2;
    /** Additional Fees. */
    additionalFees?: AdditionalFee$4[];
    /** Cart ID that this checkout was created from. Empty if this checkout wasn't created from a cart. */
    cartId?: string | null;
    /**
     * List of validation violations raised by the [Validations Custom Extension SPI](https://www.wix.com/velo/reference/spis/wix-ecom/ecom-validations/introduction).
     * @readonly
     */
    violations?: Violation$1[];
    /**
     * Custom field data for the checkout object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$8;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /**
     * Additional settings for customization of the checkout process.
     *
     * Custom settings can only be defined when [creating a checkout](https://www.wix.com/velo/reference/wix-ecom-backend/checkout/createcheckout).
     */
    customSettings?: CustomSettings$1;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference$1;
}
interface UpdateCheckoutOptions {
    /** The code of an existing coupon to apply to checkout. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /** Catalog line items. */
    lineItems?: LineItem$4[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$2[];
}
interface AddToCheckoutOptions {
    /** Catalog line items. */
    lineItems?: LineItem$4[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$2[];
}
interface CreateOrderOptions {
    /** Indicates the payment method should be saved on the order */
    savePaymentMethod?: boolean;
    /** Indicates whether to authorize the payment and delay the capture */
    delayCapture?: boolean;
}

declare function createCheckout$1(httpClient: HttpClient): CreateCheckoutSignature;
interface CreateCheckoutSignature {
    /**
     * Creates a checkout.
     *
     *
     * The `createCheckout()` function returns a Promise that resolves to the new checkout when it's created.
     *
     * > **Notes:**
     * > + Checkout must include at least 1 item in the `options.lineItems` array.
     * > + `options.channelType` is required.
     * > + If `_id` for `options.lineItems` is added, make sure that each `_id` is unique.
     * > + If `options.checkoutInfo.customFields` are added, then `options.checkoutInfo.customFields.value` is required.
     * @param - Checkout creation options.
     * @returns Fulfilled - the newly created checkout.
     */
    (options?: CreateCheckoutOptions | undefined): Promise<Checkout$1 & CheckoutNonNullableFields>;
}
declare function getCheckout$1(httpClient: HttpClient): GetCheckoutSignature;
interface GetCheckoutSignature {
    /**
     * Retrieves a checkout.
     *
     *
     * The `getCheckout()` function returns a Promise that resolves when the specified checkout is retrieved.
     * @param - Checkout ID.
     * @returns Fulfilled - the requested checkout.
     */
    (_id: string): Promise<Checkout$1 & CheckoutNonNullableFields>;
}
declare function getCheckoutByCartId$1(httpClient: HttpClient): GetCheckoutByCartIdSignature;
interface GetCheckoutByCartIdSignature {
    /**
     * Retrieves the checkout associated with a specified cart.
     * @param - Cart ID.
     */
    (_id: string): Promise<GetCheckoutByCartIdResponse & GetCheckoutByCartIdResponseNonNullableFields>;
}
declare function getCheckoutUrl$1(httpClient: HttpClient): GetCheckoutUrlSignature;
interface GetCheckoutUrlSignature {
    /**
     * Retrieves the checkout page URL of a specified checkout.
     *
     * By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page.
     * However, if `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     * @param - Checkout ID.
     */
    (_id: string): Promise<GetCheckoutURLResponse & GetCheckoutURLResponseNonNullableFields>;
}
declare function updateCheckout$1(httpClient: HttpClient): UpdateCheckoutSignature;
interface UpdateCheckoutSignature {
    /**
     * Updates a checkout.
     *
     *
     * The `updateCheckout()` function returns a Promise that resolves to the updated checkout when the specified properties are updated.
     *
     * >**Notes:**
     * > + If nothing is passed in the request, the call will fail.
     * > + The `checkout.buyerInfo.email` may not be removed once it is set.
     * @param - Checkout ID.
     * @param - Checkout update options.
     * @returns Updated checkout.
     */
    (_id: string | null, checkout: UpdateCheckout, options?: UpdateCheckoutOptions | undefined): Promise<Checkout$1 & CheckoutNonNullableFields>;
}
declare function removeCoupon$1(httpClient: HttpClient): RemoveCouponSignature;
interface RemoveCouponSignature {
    /**
     * Removes the coupon from a specified checkout.
     *
     *
     * The `removeCoupon()` function returns a Promise that resolves to the updated checkout when the coupon is removed from the specified checkout.
     *
     * >**Note:** A checkout can only hold 1 coupon.
     * @param - ID of the checkout to remove the coupon from.
     */
    (_id: string): Promise<RemoveCouponResponse & RemoveCouponResponseNonNullableFields>;
}
declare function removeGiftCard$1(httpClient: HttpClient): RemoveGiftCardSignature;
interface RemoveGiftCardSignature {
    /**
     * Removes the gift card from a specified checkout.
     *
     *
     * The `removeGiftCard()` function returns a Promise that resolves to the updated checkout when the gift card is removed from the specified checkout.
     *
     * >**Note:** A checkout can only hold 1 gift card.
     * @param - ID of the checkout to remove the gift card from.
     */
    (_id: string): Promise<RemoveGiftCardResponse & RemoveGiftCardResponseNonNullableFields>;
}
declare function removeOverrideCheckoutUrl$1(httpClient: HttpClient): RemoveOverrideCheckoutUrlSignature;
interface RemoveOverrideCheckoutUrlSignature {
    /**
     * Removes the `overrideCheckoutUrl` from a specified checkout.
     *
     * When `overrideCheckoutUrl` is removed, the `checkoutUrl` will be set to the default, standard
     * Wix checkout page URL.
     * @param - ID of the checkout to remove the override checkout url from.
     */
    (_id: string): Promise<RemoveOverrideCheckoutUrlResponse & RemoveOverrideCheckoutUrlResponseNonNullableFields>;
}
declare function addToCheckout$1(httpClient: HttpClient): AddToCheckoutSignature;
interface AddToCheckoutSignature {
    /**
     * Adds catalog line items and/or custom line items to a checkout.
     *
     *
     * The `addToCheckout()` function returns a Promise that resolves to the updated checkout when the specified items have been added.
     * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
     * @param - Checkout ID.
     * @param - Items to be added to checkout.
     */
    (_id: string, options?: AddToCheckoutOptions | undefined): Promise<AddToCheckoutResponse & AddToCheckoutResponseNonNullableFields>;
}
declare function removeLineItems$1(httpClient: HttpClient): RemoveLineItemsSignature;
interface RemoveLineItemsSignature {
    /**
     * Removes line items from the specified checkout.
     *
     *
     * The `removeLineItems()` function returns a Promise that resolves to the updated checkout when the line items are removed from the specified checkout.
     * @param - ID of the checkout to remove line items from.
     * @param - IDs of the line items to be removed.
     * To find the IDs of the checkout line items you'd like to remove, pass the `checkout._id` to [getCheckout()](https://www.wix.com/velo/reference/wix-ecom-backend/checkout/getcheckout) and look for the IDs under `lineItems` and/or `customLineItems`.
     */
    (_id: string, lineItemIds: string[]): Promise<RemoveLineItemsResponse & RemoveLineItemsResponseNonNullableFields>;
}
declare function createOrder$3(httpClient: HttpClient): CreateOrderSignature$1;
interface CreateOrderSignature$1 {
    /**
     * Creates an order from a specified checkout.
     *
     * The `createOrder()` function returns a Promise that resolves to the new order's ID and `paymentGatewayOrderID` when the order is created.
     * Pass the `paymentGatewayOrderId` as the `paymentId` param to the [`startPayment()`](https://www.wix.com/velo/reference/wix-pay-frontend/startpayment) function to allow a customer to pay for their order.
     *
     * > **Note:** The following requirements must be met for an order to be created from a checkout.
     * > + A checkout cannot have calculation errors. Pass the `checkout._id` to [Get Checkout](https://www.wix.com/velo/reference/wix-ecom-backend/checkout/getcheckout) and take a look at the `calculationErrors` field.
     * > + A checkout must have at least 1 line item.
     * > + All of the line Items have an `availability.status` of `"AVAILABLE"` or `"PARTIALLY_AVAILABLE"`.
     * > + If there is a payment to be made, meaning that `priceSummary.total` is greater than 0, the `billingInfo.address` field must be provided.
     * > + When a checkout has line items to be shipped, the `shippingInfo.shippingDestination.address` and `shippingInfo.selectedCarrierServiceOption` fields must be provided.
     * > + When a checkout has line items for pickup, the `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails` field must be provided.
     * @param - Checkout ID.
     * @param - Further order creation options.
     */
    (_id: string, options?: CreateOrderOptions | undefined): Promise<CreateOrderResponse$1 & CreateOrderResponseNonNullableFields$1>;
}
declare function markCheckoutAsCompleted$1(httpClient: HttpClient): MarkCheckoutAsCompletedSignature;
interface MarkCheckoutAsCompletedSignature {
    /**
     * Marks a checkout as completed - `checkout.complete` boolean is set to `true`.
     *
     *
     * The `markCheckoutAsCompleted()` function returns a Promise that resolves when the specified checkout is marked as completed.
     * @param - Checkout ID.
     */
    (_id: string): Promise<void>;
}
declare function updateLineItemsQuantity$1(httpClient: HttpClient): UpdateLineItemsQuantitySignature;
interface UpdateLineItemsQuantitySignature {
    /**
     * Updates the quantity of one or more line items in a checkout.
     *
     * This endpoint is only for updating the quantity of line items. To entirely remove a line item from
     * the checkout, use [`removeLineItems()`](#removelineitems).
     * To add a new line item to the checkout, use [`addToCheckout()`](#addtocheckout).
     *
     * This endpoint checks the amount of stock remaining for this line item. If the specified `quantity`
     * is greater than the remaining stock, then the `quantity` returned in the response is the total amount
     * of remaining stock.
     * @param - Checkout ID.
     * @param - Line item info to update.
     */
    (_id: string, lineItems: LineItemQuantityUpdate[]): Promise<UpdateLineItemsQuantityResponse & UpdateLineItemsQuantityResponseNonNullableFields>;
}
declare function getCheckoutPaymentSettings$1(httpClient: HttpClient): GetCheckoutPaymentSettingsSignature;
interface GetCheckoutPaymentSettingsSignature {
    /** @param - Checkout ID. */
    (_id: string): Promise<GetCheckoutPaymentSettingsResponse & GetCheckoutPaymentSettingsResponseNonNullableFields>;
}
declare const onCheckoutCreated$1: EventDefinition<CheckoutCreatedEnvelope, "wix.ecom.v1.checkout_created">;
declare const onCheckoutUpdated$1: EventDefinition<CheckoutUpdatedEnvelope, "wix.ecom.v1.checkout_updated">;
declare const onCheckoutCompleted$1: EventDefinition<CheckoutCompletedEnvelope, "wix.ecom.v1.checkout_completed">;

declare function createEventModule$8<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createCheckout: MaybeContext<BuildRESTFunction<typeof createCheckout$1> & typeof createCheckout$1>;
declare const getCheckout: MaybeContext<BuildRESTFunction<typeof getCheckout$1> & typeof getCheckout$1>;
declare const getCheckoutByCartId: MaybeContext<BuildRESTFunction<typeof getCheckoutByCartId$1> & typeof getCheckoutByCartId$1>;
declare const getCheckoutUrl: MaybeContext<BuildRESTFunction<typeof getCheckoutUrl$1> & typeof getCheckoutUrl$1>;
declare const updateCheckout: MaybeContext<BuildRESTFunction<typeof updateCheckout$1> & typeof updateCheckout$1>;
declare const removeCoupon: MaybeContext<BuildRESTFunction<typeof removeCoupon$1> & typeof removeCoupon$1>;
declare const removeGiftCard: MaybeContext<BuildRESTFunction<typeof removeGiftCard$1> & typeof removeGiftCard$1>;
declare const removeOverrideCheckoutUrl: MaybeContext<BuildRESTFunction<typeof removeOverrideCheckoutUrl$1> & typeof removeOverrideCheckoutUrl$1>;
declare const addToCheckout: MaybeContext<BuildRESTFunction<typeof addToCheckout$1> & typeof addToCheckout$1>;
declare const removeLineItems: MaybeContext<BuildRESTFunction<typeof removeLineItems$1> & typeof removeLineItems$1>;
declare const createOrder$2: MaybeContext<BuildRESTFunction<typeof createOrder$3> & typeof createOrder$3>;
declare const markCheckoutAsCompleted: MaybeContext<BuildRESTFunction<typeof markCheckoutAsCompleted$1> & typeof markCheckoutAsCompleted$1>;
declare const updateLineItemsQuantity: MaybeContext<BuildRESTFunction<typeof updateLineItemsQuantity$1> & typeof updateLineItemsQuantity$1>;
declare const getCheckoutPaymentSettings: MaybeContext<BuildRESTFunction<typeof getCheckoutPaymentSettings$1> & typeof getCheckoutPaymentSettings$1>;

type _publicOnCheckoutCreatedType = typeof onCheckoutCreated$1;
/**
 * Triggered when a checkout is created.
 */
declare const onCheckoutCreated: ReturnType<typeof createEventModule$8<_publicOnCheckoutCreatedType>>;

type _publicOnCheckoutUpdatedType = typeof onCheckoutUpdated$1;
/**
 * Triggered when a checkout is updated.
 */
declare const onCheckoutUpdated: ReturnType<typeof createEventModule$8<_publicOnCheckoutUpdatedType>>;

type _publicOnCheckoutCompletedType = typeof onCheckoutCompleted$1;
/**
 * Triggered when an order created from this checkout is
 * successfully paid for or when a checkout is marked as completed.
 */
declare const onCheckoutCompleted: ReturnType<typeof createEventModule$8<_publicOnCheckoutCompletedType>>;

type index_d$k_AddToCheckoutOptions = AddToCheckoutOptions;
type index_d$k_AddToCheckoutRequest = AddToCheckoutRequest;
type index_d$k_AddToCheckoutResponse = AddToCheckoutResponse;
type index_d$k_AddToCheckoutResponseNonNullableFields = AddToCheckoutResponseNonNullableFields;
type index_d$k_ApiAddress = ApiAddress;
type index_d$k_ChannelInfoChannelType = ChannelInfoChannelType;
declare const index_d$k_ChannelInfoChannelType: typeof ChannelInfoChannelType;
type index_d$k_ChargeDetails = ChargeDetails;
type index_d$k_CheckoutCompletedEnvelope = CheckoutCompletedEnvelope;
type index_d$k_CheckoutCreatedEnvelope = CheckoutCreatedEnvelope;
type index_d$k_CheckoutMarkedAsCompleted = CheckoutMarkedAsCompleted;
type index_d$k_CheckoutNonNullableFields = CheckoutNonNullableFields;
type index_d$k_CheckoutUpdatedEnvelope = CheckoutUpdatedEnvelope;
type index_d$k_CommonVatId = CommonVatId;
type index_d$k_CommonVatType = CommonVatType;
declare const index_d$k_CommonVatType: typeof CommonVatType;
type index_d$k_CreateCheckoutOptions = CreateCheckoutOptions;
type index_d$k_CreateCheckoutRequest = CreateCheckoutRequest;
type index_d$k_CreateCheckoutResponse = CreateCheckoutResponse;
type index_d$k_CreateCheckoutResponseNonNullableFields = CreateCheckoutResponseNonNullableFields;
type index_d$k_CreateOrderAndChargeRequest = CreateOrderAndChargeRequest;
type index_d$k_CreateOrderAndChargeResponse = CreateOrderAndChargeResponse;
type index_d$k_CreateOrderAndChargeResponseIdOneOf = CreateOrderAndChargeResponseIdOneOf;
type index_d$k_CreateOrderOptions = CreateOrderOptions;
type index_d$k_CreateOrderResponseIdOneOf = CreateOrderResponseIdOneOf;
type index_d$k_DiscountDiscountType = DiscountDiscountType;
declare const index_d$k_DiscountDiscountType: typeof DiscountDiscountType;
type index_d$k_DoublePaymentErrorData = DoublePaymentErrorData;
type index_d$k_DoublePaymentErrorDataIdOneOf = DoublePaymentErrorDataIdOneOf;
type index_d$k_GetCheckoutByCartIdRequest = GetCheckoutByCartIdRequest;
type index_d$k_GetCheckoutByCartIdResponse = GetCheckoutByCartIdResponse;
type index_d$k_GetCheckoutByCartIdResponseNonNullableFields = GetCheckoutByCartIdResponseNonNullableFields;
type index_d$k_GetCheckoutPaymentSettingsRequest = GetCheckoutPaymentSettingsRequest;
type index_d$k_GetCheckoutPaymentSettingsResponse = GetCheckoutPaymentSettingsResponse;
type index_d$k_GetCheckoutPaymentSettingsResponseNonNullableFields = GetCheckoutPaymentSettingsResponseNonNullableFields;
type index_d$k_GetCheckoutPaymentSettingsResponsePaymentOption = GetCheckoutPaymentSettingsResponsePaymentOption;
declare const index_d$k_GetCheckoutPaymentSettingsResponsePaymentOption: typeof GetCheckoutPaymentSettingsResponsePaymentOption;
type index_d$k_GetCheckoutRequest = GetCheckoutRequest;
type index_d$k_GetCheckoutResponse = GetCheckoutResponse;
type index_d$k_GetCheckoutResponseNonNullableFields = GetCheckoutResponseNonNullableFields;
type index_d$k_GetCheckoutURLRequest = GetCheckoutURLRequest;
type index_d$k_GetCheckoutURLResponse = GetCheckoutURLResponse;
type index_d$k_GetCheckoutURLResponseNonNullableFields = GetCheckoutURLResponseNonNullableFields;
type index_d$k_GetCheckoutWithAllExtendedFieldsRequest = GetCheckoutWithAllExtendedFieldsRequest;
type index_d$k_GetCheckoutWithAllExtendedFieldsResponse = GetCheckoutWithAllExtendedFieldsResponse;
type index_d$k_GetWixCheckoutURLRequest = GetWixCheckoutURLRequest;
type index_d$k_GetWixCheckoutURLResponse = GetWixCheckoutURLResponse;
type index_d$k_LineItemQuantityUpdate = LineItemQuantityUpdate;
type index_d$k_MarkCheckoutAsCompletedRequest = MarkCheckoutAsCompletedRequest;
type index_d$k_MarkCheckoutAsCompletedResponse = MarkCheckoutAsCompletedResponse;
type index_d$k_PaymentErrorResponseData = PaymentErrorResponseData;
type index_d$k_ProductDetails = ProductDetails;
type index_d$k_RedeemErrorData = RedeemErrorData;
type index_d$k_RemoveCouponRequest = RemoveCouponRequest;
type index_d$k_RemoveCouponResponse = RemoveCouponResponse;
type index_d$k_RemoveCouponResponseNonNullableFields = RemoveCouponResponseNonNullableFields;
type index_d$k_RemoveGiftCardRequest = RemoveGiftCardRequest;
type index_d$k_RemoveGiftCardResponse = RemoveGiftCardResponse;
type index_d$k_RemoveGiftCardResponseNonNullableFields = RemoveGiftCardResponseNonNullableFields;
type index_d$k_RemoveLineItemsRequest = RemoveLineItemsRequest;
type index_d$k_RemoveLineItemsResponse = RemoveLineItemsResponse;
type index_d$k_RemoveLineItemsResponseNonNullableFields = RemoveLineItemsResponseNonNullableFields;
type index_d$k_RemoveOverrideCheckoutUrlRequest = RemoveOverrideCheckoutUrlRequest;
type index_d$k_RemoveOverrideCheckoutUrlResponse = RemoveOverrideCheckoutUrlResponse;
type index_d$k_RemoveOverrideCheckoutUrlResponseNonNullableFields = RemoveOverrideCheckoutUrlResponseNonNullableFields;
type index_d$k_ShippingCalculationErrorData = ShippingCalculationErrorData;
type index_d$k_ShippingCalculationErrorDataShippingCalculationErrorOneOf = ShippingCalculationErrorDataShippingCalculationErrorOneOf;
type index_d$k_StoreSettings = StoreSettings;
type index_d$k_Subscription = Subscription;
type index_d$k_SubscriptionCreated = SubscriptionCreated;
type index_d$k_UpdateCheckout = UpdateCheckout;
type index_d$k_UpdateCheckoutOptions = UpdateCheckoutOptions;
type index_d$k_UpdateCheckoutRequest = UpdateCheckoutRequest;
type index_d$k_UpdateCheckoutResponse = UpdateCheckoutResponse;
type index_d$k_UpdateCheckoutResponseNonNullableFields = UpdateCheckoutResponseNonNullableFields;
type index_d$k_UpdateLineItemsQuantityRequest = UpdateLineItemsQuantityRequest;
type index_d$k_UpdateLineItemsQuantityResponse = UpdateLineItemsQuantityResponse;
type index_d$k_UpdateLineItemsQuantityResponseNonNullableFields = UpdateLineItemsQuantityResponseNonNullableFields;
type index_d$k_UpdatedCheckoutMessage = UpdatedCheckoutMessage;
type index_d$k_V1BuyerInfo = V1BuyerInfo;
type index_d$k_V1CustomField = V1CustomField;
type index_d$k_V1ShippingInfo = V1ShippingInfo;
type index_d$k_V1ShippingInfoDetailsOneOf = V1ShippingInfoDetailsOneOf;
type index_d$k_V1SubscriptionOptionInfo = V1SubscriptionOptionInfo;
type index_d$k_V1SubscriptionSettings = V1SubscriptionSettings;
type index_d$k_ViolationsList = ViolationsList;
type index_d$k__publicOnCheckoutCompletedType = _publicOnCheckoutCompletedType;
type index_d$k__publicOnCheckoutCreatedType = _publicOnCheckoutCreatedType;
type index_d$k__publicOnCheckoutUpdatedType = _publicOnCheckoutUpdatedType;
declare const index_d$k_addToCheckout: typeof addToCheckout;
declare const index_d$k_createCheckout: typeof createCheckout;
declare const index_d$k_getCheckout: typeof getCheckout;
declare const index_d$k_getCheckoutByCartId: typeof getCheckoutByCartId;
declare const index_d$k_getCheckoutPaymentSettings: typeof getCheckoutPaymentSettings;
declare const index_d$k_getCheckoutUrl: typeof getCheckoutUrl;
declare const index_d$k_markCheckoutAsCompleted: typeof markCheckoutAsCompleted;
declare const index_d$k_onCheckoutCompleted: typeof onCheckoutCompleted;
declare const index_d$k_onCheckoutCreated: typeof onCheckoutCreated;
declare const index_d$k_onCheckoutUpdated: typeof onCheckoutUpdated;
declare const index_d$k_removeCoupon: typeof removeCoupon;
declare const index_d$k_removeGiftCard: typeof removeGiftCard;
declare const index_d$k_removeLineItems: typeof removeLineItems;
declare const index_d$k_removeOverrideCheckoutUrl: typeof removeOverrideCheckoutUrl;
declare const index_d$k_updateCheckout: typeof updateCheckout;
declare const index_d$k_updateLineItemsQuantity: typeof updateLineItemsQuantity;
declare namespace index_d$k {
  export { type ActionEvent$g as ActionEvent, type index_d$k_AddToCheckoutOptions as AddToCheckoutOptions, type index_d$k_AddToCheckoutRequest as AddToCheckoutRequest, type index_d$k_AddToCheckoutResponse as AddToCheckoutResponse, type index_d$k_AddToCheckoutResponseNonNullableFields as AddToCheckoutResponseNonNullableFields, type AdditionalFee$4 as AdditionalFee, type Address$8 as Address, type AddressAddressLine1OptionsOneOf$1 as AddressAddressLine1OptionsOneOf, type AddressLocation$7 as AddressLocation, type AddressWithContact$3 as AddressWithContact, type AggregatedTaxBreakdown$2 as AggregatedTaxBreakdown, type index_d$k_ApiAddress as ApiAddress, type ApplicationError$9 as ApplicationError, type AppliedCoupon$1 as AppliedCoupon, type AppliedDiscount$4 as AppliedDiscount, type AppliedDiscountDiscountSourceOneOf$4 as AppliedDiscountDiscountSourceOneOf, type AutoTaxFallbackCalculationDetails$2 as AutoTaxFallbackCalculationDetails, type BaseEventMetadata$8 as BaseEventMetadata, type BillingInfo$1 as BillingInfo, type BuyerInfo$5 as BuyerInfo, type BuyerInfoIdOneOf$3 as BuyerInfoIdOneOf, type CalculationErrors$3 as CalculationErrors, type CalculationErrorsShippingCalculationErrorOneOf$3 as CalculationErrorsShippingCalculationErrorOneOf, type CarrierError$4 as CarrierError, type CarrierErrors$3 as CarrierErrors, type CarrierServiceOption$2 as CarrierServiceOption, type CatalogOverrideFields$1 as CatalogOverrideFields, type CatalogReference$6 as CatalogReference, type ChannelInfo$3 as ChannelInfo, index_d$k_ChannelInfoChannelType as ChannelInfoChannelType, ChannelType$4 as ChannelType, type index_d$k_ChargeDetails as ChargeDetails, ChargeType$4 as ChargeType, type Checkout$1 as Checkout, type index_d$k_CheckoutCompletedEnvelope as CheckoutCompletedEnvelope, type index_d$k_CheckoutCreatedEnvelope as CheckoutCreatedEnvelope, type index_d$k_CheckoutMarkedAsCompleted as CheckoutMarkedAsCompleted, type index_d$k_CheckoutNonNullableFields as CheckoutNonNullableFields, type index_d$k_CheckoutUpdatedEnvelope as CheckoutUpdatedEnvelope, type Color$3 as Color, type index_d$k_CommonVatId as CommonVatId, index_d$k_CommonVatType as CommonVatType, type ConversionInfo$1 as ConversionInfo, type Coupon$4 as Coupon, type index_d$k_CreateCheckoutOptions as CreateCheckoutOptions, type index_d$k_CreateCheckoutRequest as CreateCheckoutRequest, type index_d$k_CreateCheckoutResponse as CreateCheckoutResponse, type index_d$k_CreateCheckoutResponseNonNullableFields as CreateCheckoutResponseNonNullableFields, type index_d$k_CreateOrderAndChargeRequest as CreateOrderAndChargeRequest, type index_d$k_CreateOrderAndChargeResponse as CreateOrderAndChargeResponse, type index_d$k_CreateOrderAndChargeResponseIdOneOf as CreateOrderAndChargeResponseIdOneOf, type index_d$k_CreateOrderOptions as CreateOrderOptions, type CreateOrderRequest$1 as CreateOrderRequest, type CreateOrderResponse$1 as CreateOrderResponse, type index_d$k_CreateOrderResponseIdOneOf as CreateOrderResponseIdOneOf, type CreateOrderResponseNonNullableFields$1 as CreateOrderResponseNonNullableFields, type CreatedBy$3 as CreatedBy, type CreatedByIdOneOf$1 as CreatedByIdOneOf, type CustomContentReference$1 as CustomContentReference, type CustomField$4 as CustomField, type CustomLineItem$2 as CustomLineItem, type CustomSettings$1 as CustomSettings, type CustomTextFieldSelection$1 as CustomTextFieldSelection, type DeliveryLogistics$5 as DeliveryLogistics, type DeliveryTimeSlot$5 as DeliveryTimeSlot, type Description$1 as Description, type DescriptionLine$3 as DescriptionLine, type DescriptionLineDescriptionLineValueOneOf$3 as DescriptionLineDescriptionLineValueOneOf, type DescriptionLineName$3 as DescriptionLineName, DescriptionLineType$3 as DescriptionLineType, type DescriptionLineValueOneOf$3 as DescriptionLineValueOneOf, type Details$4 as Details, type DetailsKindOneOf$4 as DetailsKindOneOf, type Discount$2 as Discount, index_d$k_DiscountDiscountType as DiscountDiscountType, type DiscountRule$4 as DiscountRule, type DiscountRuleName$4 as DiscountRuleName, DiscountType$4 as DiscountType, type DomainEvent$g as DomainEvent, type DomainEventBodyOneOf$g as DomainEventBodyOneOf, type index_d$k_DoublePaymentErrorData as DoublePaymentErrorData, type index_d$k_DoublePaymentErrorDataIdOneOf as DoublePaymentErrorDataIdOneOf, type Empty$9 as Empty, type EntityCreatedEvent$g as EntityCreatedEvent, type EntityDeletedEvent$g as EntityDeletedEvent, type EntityUpdatedEvent$g as EntityUpdatedEvent, type EventMetadata$8 as EventMetadata, type ExtendedFields$8 as ExtendedFields, type ExternalReference$2 as ExternalReference, FallbackReason$2 as FallbackReason, type FieldViolation$4 as FieldViolation, FileType$2 as FileType, type FreeTrialPeriod$1 as FreeTrialPeriod, type FullAddressContactDetails$4 as FullAddressContactDetails, type FullName$1 as FullName, type index_d$k_GetCheckoutByCartIdRequest as GetCheckoutByCartIdRequest, type index_d$k_GetCheckoutByCartIdResponse as GetCheckoutByCartIdResponse, type index_d$k_GetCheckoutByCartIdResponseNonNullableFields as GetCheckoutByCartIdResponseNonNullableFields, type index_d$k_GetCheckoutPaymentSettingsRequest as GetCheckoutPaymentSettingsRequest, type index_d$k_GetCheckoutPaymentSettingsResponse as GetCheckoutPaymentSettingsResponse, type index_d$k_GetCheckoutPaymentSettingsResponseNonNullableFields as GetCheckoutPaymentSettingsResponseNonNullableFields, index_d$k_GetCheckoutPaymentSettingsResponsePaymentOption as GetCheckoutPaymentSettingsResponsePaymentOption, type index_d$k_GetCheckoutRequest as GetCheckoutRequest, type index_d$k_GetCheckoutResponse as GetCheckoutResponse, type index_d$k_GetCheckoutResponseNonNullableFields as GetCheckoutResponseNonNullableFields, type index_d$k_GetCheckoutURLRequest as GetCheckoutURLRequest, type index_d$k_GetCheckoutURLResponse as GetCheckoutURLResponse, type index_d$k_GetCheckoutURLResponseNonNullableFields as GetCheckoutURLResponseNonNullableFields, type index_d$k_GetCheckoutWithAllExtendedFieldsRequest as GetCheckoutWithAllExtendedFieldsRequest, type index_d$k_GetCheckoutWithAllExtendedFieldsResponse as GetCheckoutWithAllExtendedFieldsResponse, type index_d$k_GetWixCheckoutURLRequest as GetWixCheckoutURLRequest, type index_d$k_GetWixCheckoutURLResponse as GetWixCheckoutURLResponse, type GiftCard$4 as GiftCard, type Group$2 as Group, type IdentificationData$g as IdentificationData, type IdentificationDataIdOneOf$g as IdentificationDataIdOneOf, IdentityType$4 as IdentityType, type InvalidMembership$2 as InvalidMembership, type ItemAvailabilityInfo$1 as ItemAvailabilityInfo, ItemAvailabilityStatus$1 as ItemAvailabilityStatus, type ItemTaxFullDetails$4 as ItemTaxFullDetails, type ItemType$4 as ItemType, ItemTypeItemType$4 as ItemTypeItemType, type ItemTypeItemTypeDataOneOf$4 as ItemTypeItemTypeDataOneOf, JurisdictionType$4 as JurisdictionType, type LineItem$4 as LineItem, type LineItemDiscount$4 as LineItemDiscount, type index_d$k_LineItemQuantityUpdate as LineItemQuantityUpdate, LineItemType$1 as LineItemType, ManualCalculationReason$2 as ManualCalculationReason, type index_d$k_MarkCheckoutAsCompletedRequest as MarkCheckoutAsCompletedRequest, type index_d$k_MarkCheckoutAsCompletedResponse as MarkCheckoutAsCompletedResponse, type MediaItem$1 as MediaItem, MediaItemType$1 as MediaItemType, type Membership$2 as Membership, type MembershipName$4 as MembershipName, type MembershipOptions$2 as MembershipOptions, type MembershipPaymentCredits$2 as MembershipPaymentCredits, type MerchantDiscount$4 as MerchantDiscount, type MerchantDiscountInput$1 as MerchantDiscountInput, type MessageEnvelope$f as MessageEnvelope, type MultiCurrencyPrice$2 as MultiCurrencyPrice, NameInLineItem$1 as NameInLineItem, NameInOther$1 as NameInOther, type OptionSelection$1 as OptionSelection, type Other$1 as Other, type OtherCharge$2 as OtherCharge, type index_d$k_PaymentErrorResponseData as PaymentErrorResponseData, type PaymentOption$1 as PaymentOption, PaymentOptionType$4 as PaymentOptionType, type PhysicalProperties$5 as PhysicalProperties, type PickupAddress$3 as PickupAddress, type PickupDetails$6 as PickupDetails, PickupMethod$5 as PickupMethod, type PlainTextValue$3 as PlainTextValue, type Policy$1 as Policy, type PriceDescription$3 as PriceDescription, type PriceSummary$4 as PriceSummary, type index_d$k_ProductDetails as ProductDetails, type ProductName$3 as ProductName, RateType$2 as RateType, type index_d$k_RedeemErrorData as RedeemErrorData, type index_d$k_RemoveCouponRequest as RemoveCouponRequest, type index_d$k_RemoveCouponResponse as RemoveCouponResponse, type index_d$k_RemoveCouponResponseNonNullableFields as RemoveCouponResponseNonNullableFields, type index_d$k_RemoveGiftCardRequest as RemoveGiftCardRequest, type index_d$k_RemoveGiftCardResponse as RemoveGiftCardResponse, type index_d$k_RemoveGiftCardResponseNonNullableFields as RemoveGiftCardResponseNonNullableFields, type index_d$k_RemoveLineItemsRequest as RemoveLineItemsRequest, type index_d$k_RemoveLineItemsResponse as RemoveLineItemsResponse, type index_d$k_RemoveLineItemsResponseNonNullableFields as RemoveLineItemsResponseNonNullableFields, type index_d$k_RemoveOverrideCheckoutUrlRequest as RemoveOverrideCheckoutUrlRequest, type index_d$k_RemoveOverrideCheckoutUrlResponse as RemoveOverrideCheckoutUrlResponse, type index_d$k_RemoveOverrideCheckoutUrlResponseNonNullableFields as RemoveOverrideCheckoutUrlResponseNonNullableFields, type RestoreInfo$g as RestoreInfo, RuleType$4 as RuleType, type Scope$2 as Scope, type SecuredMedia$2 as SecuredMedia, type SelectedCarrierServiceOption$2 as SelectedCarrierServiceOption, type SelectedCarrierServiceOptionOtherCharge$2 as SelectedCarrierServiceOptionOtherCharge, type SelectedCarrierServiceOptionPrices$2 as SelectedCarrierServiceOptionPrices, type SelectedMembership$2 as SelectedMembership, type SelectedMemberships$2 as SelectedMemberships, type ServiceProperties$3 as ServiceProperties, Severity$1 as Severity, type ShipmentDetails$1 as ShipmentDetails, type index_d$k_ShippingCalculationErrorData as ShippingCalculationErrorData, type index_d$k_ShippingCalculationErrorDataShippingCalculationErrorOneOf as ShippingCalculationErrorDataShippingCalculationErrorOneOf, type ShippingInfo$2 as ShippingInfo, type ShippingOption$4 as ShippingOption, type ShippingPrice$4 as ShippingPrice, type ShippingRegion$4 as ShippingRegion, type index_d$k_StoreSettings as StoreSettings, type Street$1 as Street, type StreetAddress$7 as StreetAddress, type index_d$k_Subscription as Subscription, type index_d$k_SubscriptionCreated as SubscriptionCreated, SubscriptionFrequency$5 as SubscriptionFrequency, type SubscriptionOptionInfo$2 as SubscriptionOptionInfo, type SubscriptionSettings$5 as SubscriptionSettings, SuggestedFix$1 as SuggestedFix, type SystemError$4 as SystemError, type Target$1 as Target, type TargetLineItem$1 as TargetLineItem, type TargetTargetTypeOneOf$1 as TargetTargetTypeOneOf, type TaxBreakdown$2 as TaxBreakdown, type TaxCalculationDetails$2 as TaxCalculationDetails, type TaxCalculationDetailsCalculationDetailsOneOf$2 as TaxCalculationDetailsCalculationDetailsOneOf, type TaxRateBreakdown$2 as TaxRateBreakdown, type TaxSummary$4 as TaxSummary, type TaxableAddress$4 as TaxableAddress, type TaxableAddressTaxableAddressDataOneOf$4 as TaxableAddressTaxableAddressDataOneOf, TaxableAddressType$4 as TaxableAddressType, type Title$1 as Title, type Totals$1 as Totals, type index_d$k_UpdateCheckout as UpdateCheckout, type index_d$k_UpdateCheckoutOptions as UpdateCheckoutOptions, type index_d$k_UpdateCheckoutRequest as UpdateCheckoutRequest, type index_d$k_UpdateCheckoutResponse as UpdateCheckoutResponse, type index_d$k_UpdateCheckoutResponseNonNullableFields as UpdateCheckoutResponseNonNullableFields, type index_d$k_UpdateLineItemsQuantityRequest as UpdateLineItemsQuantityRequest, type index_d$k_UpdateLineItemsQuantityResponse as UpdateLineItemsQuantityResponse, type index_d$k_UpdateLineItemsQuantityResponseNonNullableFields as UpdateLineItemsQuantityResponseNonNullableFields, type index_d$k_UpdatedCheckoutMessage as UpdatedCheckoutMessage, type index_d$k_V1BuyerInfo as V1BuyerInfo, type index_d$k_V1CustomField as V1CustomField, type V1LineItem$1 as V1LineItem, type V1PickupDetails$1 as V1PickupDetails, type index_d$k_V1ShippingInfo as V1ShippingInfo, type index_d$k_V1ShippingInfoDetailsOneOf as V1ShippingInfoDetailsOneOf, type index_d$k_V1SubscriptionOptionInfo as V1SubscriptionOptionInfo, type index_d$k_V1SubscriptionSettings as V1SubscriptionSettings, type ValidationError$4 as ValidationError, type VatId$5 as VatId, VatType$5 as VatType, type Violation$1 as Violation, type index_d$k_ViolationsList as ViolationsList, WebhookIdentityType$f as WebhookIdentityType, WeightUnit$6 as WeightUnit, type index_d$k__publicOnCheckoutCompletedType as _publicOnCheckoutCompletedType, type index_d$k__publicOnCheckoutCreatedType as _publicOnCheckoutCreatedType, type index_d$k__publicOnCheckoutUpdatedType as _publicOnCheckoutUpdatedType, index_d$k_addToCheckout as addToCheckout, index_d$k_createCheckout as createCheckout, createOrder$2 as createOrder, index_d$k_getCheckout as getCheckout, index_d$k_getCheckoutByCartId as getCheckoutByCartId, index_d$k_getCheckoutPaymentSettings as getCheckoutPaymentSettings, index_d$k_getCheckoutUrl as getCheckoutUrl, index_d$k_markCheckoutAsCompleted as markCheckoutAsCompleted, index_d$k_onCheckoutCompleted as onCheckoutCompleted, index_d$k_onCheckoutCreated as onCheckoutCreated, index_d$k_onCheckoutUpdated as onCheckoutUpdated, onCheckoutCompleted$1 as publicOnCheckoutCompleted, onCheckoutCreated$1 as publicOnCheckoutCreated, onCheckoutUpdated$1 as publicOnCheckoutUpdated, index_d$k_removeCoupon as removeCoupon, index_d$k_removeGiftCard as removeGiftCard, index_d$k_removeLineItems as removeLineItems, index_d$k_removeOverrideCheckoutUrl as removeOverrideCheckoutUrl, index_d$k_updateCheckout as updateCheckout, index_d$k_updateLineItemsQuantity as updateLineItemsQuantity };
}

interface CheckoutSettings {
    /** Checkout policies. */
    checkoutPolicies?: CheckoutPolicies;
    /** Settings that apply to checkout fields and the checkout process. */
    checkoutFields?: CheckoutFields;
    /** Checkout brand settings. */
    checkoutBrand?: CheckoutBrand;
    /**
     * Date and time the checkout settings were created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the checkout settings were updated.
     * @readonly
     */
    _updatedDate?: Date | null;
}
interface CheckoutPolicies {
    /** Terms and conditions. */
    termsAndConditions?: TermsAndConditionsPolicy;
    /** Privacy policy. */
    privacyPolicy?: PrivacyPolicy;
    /** Return policy. */
    returnPolicy?: ReturnPolicy;
    /** Digital item policy. */
    digitalItemPolicy?: DigitalItemPolicy;
    /** "Contact us" information. */
    contactUs?: ContactUsPolicy;
    /** Custom policy. */
    customPolicy?: CustomCheckoutPolicy;
}
interface TermsAndConditionsPolicy {
    /**
     * Whether the terms & conditions policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Terms and conditions policy content. */
    content?: string | null;
}
interface PrivacyPolicy {
    /**
     * Whether the privacy policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Privacy policy content. */
    content?: string | null;
}
interface ReturnPolicy {
    /**
     * Whether the return policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Return policy content. */
    content?: string | null;
}
interface DigitalItemPolicy {
    /**
     * Whether the digital item policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Digital item policy content. */
    content?: string | null;
}
interface ContactUsPolicy {
    /**
     * Whether the contact us policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Contact us policy content. */
    content?: string | null;
}
interface CustomCheckoutPolicy {
    /**
     * Whether the policy is visible to the customer on the checkout page.
     * Default: `false`.
     */
    visible?: boolean | null;
    /** Policy content. */
    content?: string | null;
    /** Policy title. */
    title?: string | null;
}
interface CheckoutFields {
    /**
     * Subscription checkbox.
     * Default:
     * - `visible`: `false`,
     * - `checkedByDefault`: `false`
     */
    subscriptionCheckbox?: CheckboxField;
    /**
     * Policy agreement checkbox.
     * Default:
     * - `visible`: `true`,
     * - `checkedByDefault`: `true`
     */
    policyAgreementCheckbox?: CheckboxField;
    /**
     * Whether the ability to redeem a gift card is enabled.
     * Default: `false`.
     */
    giftCardRedeemEnabled?: boolean | null;
    /**
     * Whether to allow for MIT transactions.
     * Default: `false`.
     */
    mitEnabled?: boolean | null;
    /**
     * Whether to allow for Auth & Capture transactions. <br><br>
     *
     * Default: `false`
     */
    delayCaptureEnabled?: boolean | null;
    /**
     * Whether to automatically capture the transaction before the authorization expires.
     *
     * Default: `true`
     * >**Note:** this setting is only relevant when `delay_capture_enabled: true`.
     */
    captureBeforeExpiryEnabled?: boolean | null;
}
interface CheckboxField {
    /** Whether the checkbox is visible to the customer. */
    visible?: boolean | null;
    /** Whether the checkbox is checked by default. */
    checkedByDefault?: boolean | null;
}
interface CheckoutBrand {
    /** Checkout header. */
    header?: CheckoutHeader;
}
interface CheckoutHeader {
    /**
     * Textual content to be included in the header (e.g. Business Name)
     * TODO: update maxLength validation once limitation is known
     */
    text?: string | null;
    /** Specifications for when a logo is included in the header. */
    logo?: Logo;
    /**
     * Alignment within the header.
     *
     * >**Note:** `SIDE` alignment is decided depending on the locale's language. For example, scripts like Hebrew and Arabic will automatically align right-to-left.
     */
    alignment?: Alignment;
    /**
     * Whether to display the 'Checkout' label within the header.
     * Depending on the locale, the label may be translated.
     */
    displayCheckoutLabel?: boolean | null;
}
interface Logo {
    /** Size of the logo. */
    size?: LogoSize;
}
declare enum LogoSize {
    UNKNOWN_LOGO_SIZE = "UNKNOWN_LOGO_SIZE",
    SMALL = "SMALL",
    MEDIUM = "MEDIUM",
    LARGE = "LARGE"
}
declare enum Alignment {
    UNKNOWN_ALIGNMENT = "UNKNOWN_ALIGNMENT",
    SIDE = "SIDE",
    CENTER = "CENTER"
}
interface GetCheckoutSettingsRequest {
}
interface GetCheckoutSettingsResponse {
    /** Checkout settings. */
    checkoutSettings?: CheckoutSettings;
}
interface UpdateCheckoutSettingsRequest {
    /** Checkout settings to update. */
    checkoutSettings: CheckoutSettings;
}
interface UpdateCheckoutSettingsResponse {
    /** The updated checkout settings. */
    checkoutSettings?: CheckoutSettings;
}
interface ListCheckoutSettingsRequest {
}
interface ListCheckoutSettingsResponse {
    /** List of retrieved checkout settings. */
    checkoutSettings?: CheckoutSettings[];
}
interface GiftCardProviderWasProvisioned {
    /** The gift card provider which was installed */
    providerAppDefId?: string;
    providerInstanceId?: string;
}
interface Empty$8 {
}
interface DeleteCheckoutSettingsRequest {
}
interface DeleteCheckoutSettingsResponse {
}
interface DomainEvent$f extends DomainEventBodyOneOf$f {
    createdEvent?: EntityCreatedEvent$f;
    updatedEvent?: EntityUpdatedEvent$f;
    deletedEvent?: EntityDeletedEvent$f;
    actionEvent?: ActionEvent$f;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$f {
    createdEvent?: EntityCreatedEvent$f;
    updatedEvent?: EntityUpdatedEvent$f;
    deletedEvent?: EntityDeletedEvent$f;
    actionEvent?: ActionEvent$f;
}
interface EntityCreatedEvent$f {
    entity?: string;
}
interface RestoreInfo$f {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$f {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$f {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$f {
    body?: string;
}
interface MessageEnvelope$e {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$f;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$f extends IdentificationDataIdOneOf$f {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$e;
}
/** @oneof */
interface IdentificationDataIdOneOf$f {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$e {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface LogoNonNullableFields {
    image: string;
    size: LogoSize;
}
interface CheckoutHeaderNonNullableFields {
    logo?: LogoNonNullableFields;
    alignment: Alignment;
}
interface CheckoutBrandNonNullableFields {
    header?: CheckoutHeaderNonNullableFields;
}
interface CheckoutSettingsNonNullableFields {
    checkoutBrand?: CheckoutBrandNonNullableFields;
}
interface GetCheckoutSettingsResponseNonNullableFields {
    checkoutSettings?: CheckoutSettingsNonNullableFields;
}
interface UpdateCheckoutSettingsResponseNonNullableFields {
    checkoutSettings?: CheckoutSettingsNonNullableFields;
}
interface BaseEventMetadata$7 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$f;
}
interface EventMetadata$7 extends BaseEventMetadata$7 {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface CheckoutSettingsUpdatedEnvelope {
    entity: CheckoutSettings;
    metadata: EventMetadata$7;
}

declare function getCheckoutSettings$1(httpClient: HttpClient): GetCheckoutSettingsSignature;
interface GetCheckoutSettingsSignature {
    /**
     * Retrieves the sites' checkout settings.
     *
     *
     * The `getCheckoutSettings()` function returns a Promise that resolves to checkout settings.
     * @returns The requested checkout settings.
     */
    (): Promise<GetCheckoutSettingsResponse & GetCheckoutSettingsResponseNonNullableFields>;
}
declare function updateCheckoutSettings$1(httpClient: HttpClient): UpdateCheckoutSettingsSignature;
interface UpdateCheckoutSettingsSignature {
    /**
     * Updates the sites' checkout settings.
     *
     *
     * The `updateCheckoutSettings()` function returns a Promise that resolves to the newly updated checkout settings.
     * @param - Checkout settings to update.
     * @returns The updated checkout settings.
     */
    (checkoutSettings: CheckoutSettings): Promise<UpdateCheckoutSettingsResponse & UpdateCheckoutSettingsResponseNonNullableFields>;
}
declare const onCheckoutSettingsUpdated$1: EventDefinition<CheckoutSettingsUpdatedEnvelope, "wix.ecom.v1.checkout_settings_updated">;

declare function createEventModule$7<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const getCheckoutSettings: MaybeContext<BuildRESTFunction<typeof getCheckoutSettings$1> & typeof getCheckoutSettings$1>;
declare const updateCheckoutSettings: MaybeContext<BuildRESTFunction<typeof updateCheckoutSettings$1> & typeof updateCheckoutSettings$1>;

type _publicOnCheckoutSettingsUpdatedType = typeof onCheckoutSettingsUpdated$1;
/**
 * Triggered when checkout settings are updated.
 */
declare const onCheckoutSettingsUpdated: ReturnType<typeof createEventModule$7<_publicOnCheckoutSettingsUpdatedType>>;

type index_d$j_Alignment = Alignment;
declare const index_d$j_Alignment: typeof Alignment;
type index_d$j_CheckboxField = CheckboxField;
type index_d$j_CheckoutBrand = CheckoutBrand;
type index_d$j_CheckoutFields = CheckoutFields;
type index_d$j_CheckoutHeader = CheckoutHeader;
type index_d$j_CheckoutPolicies = CheckoutPolicies;
type index_d$j_CheckoutSettings = CheckoutSettings;
type index_d$j_CheckoutSettingsUpdatedEnvelope = CheckoutSettingsUpdatedEnvelope;
type index_d$j_ContactUsPolicy = ContactUsPolicy;
type index_d$j_CustomCheckoutPolicy = CustomCheckoutPolicy;
type index_d$j_DeleteCheckoutSettingsRequest = DeleteCheckoutSettingsRequest;
type index_d$j_DeleteCheckoutSettingsResponse = DeleteCheckoutSettingsResponse;
type index_d$j_DigitalItemPolicy = DigitalItemPolicy;
type index_d$j_GetCheckoutSettingsRequest = GetCheckoutSettingsRequest;
type index_d$j_GetCheckoutSettingsResponse = GetCheckoutSettingsResponse;
type index_d$j_GetCheckoutSettingsResponseNonNullableFields = GetCheckoutSettingsResponseNonNullableFields;
type index_d$j_GiftCardProviderWasProvisioned = GiftCardProviderWasProvisioned;
type index_d$j_ListCheckoutSettingsRequest = ListCheckoutSettingsRequest;
type index_d$j_ListCheckoutSettingsResponse = ListCheckoutSettingsResponse;
type index_d$j_Logo = Logo;
type index_d$j_LogoSize = LogoSize;
declare const index_d$j_LogoSize: typeof LogoSize;
type index_d$j_PrivacyPolicy = PrivacyPolicy;
type index_d$j_ReturnPolicy = ReturnPolicy;
type index_d$j_TermsAndConditionsPolicy = TermsAndConditionsPolicy;
type index_d$j_UpdateCheckoutSettingsRequest = UpdateCheckoutSettingsRequest;
type index_d$j_UpdateCheckoutSettingsResponse = UpdateCheckoutSettingsResponse;
type index_d$j_UpdateCheckoutSettingsResponseNonNullableFields = UpdateCheckoutSettingsResponseNonNullableFields;
type index_d$j__publicOnCheckoutSettingsUpdatedType = _publicOnCheckoutSettingsUpdatedType;
declare const index_d$j_getCheckoutSettings: typeof getCheckoutSettings;
declare const index_d$j_onCheckoutSettingsUpdated: typeof onCheckoutSettingsUpdated;
declare const index_d$j_updateCheckoutSettings: typeof updateCheckoutSettings;
declare namespace index_d$j {
  export { type ActionEvent$f as ActionEvent, index_d$j_Alignment as Alignment, type BaseEventMetadata$7 as BaseEventMetadata, type index_d$j_CheckboxField as CheckboxField, type index_d$j_CheckoutBrand as CheckoutBrand, type index_d$j_CheckoutFields as CheckoutFields, type index_d$j_CheckoutHeader as CheckoutHeader, type index_d$j_CheckoutPolicies as CheckoutPolicies, type index_d$j_CheckoutSettings as CheckoutSettings, type index_d$j_CheckoutSettingsUpdatedEnvelope as CheckoutSettingsUpdatedEnvelope, type index_d$j_ContactUsPolicy as ContactUsPolicy, type index_d$j_CustomCheckoutPolicy as CustomCheckoutPolicy, type index_d$j_DeleteCheckoutSettingsRequest as DeleteCheckoutSettingsRequest, type index_d$j_DeleteCheckoutSettingsResponse as DeleteCheckoutSettingsResponse, type index_d$j_DigitalItemPolicy as DigitalItemPolicy, type DomainEvent$f as DomainEvent, type DomainEventBodyOneOf$f as DomainEventBodyOneOf, type Empty$8 as Empty, type EntityCreatedEvent$f as EntityCreatedEvent, type EntityDeletedEvent$f as EntityDeletedEvent, type EntityUpdatedEvent$f as EntityUpdatedEvent, type EventMetadata$7 as EventMetadata, type index_d$j_GetCheckoutSettingsRequest as GetCheckoutSettingsRequest, type index_d$j_GetCheckoutSettingsResponse as GetCheckoutSettingsResponse, type index_d$j_GetCheckoutSettingsResponseNonNullableFields as GetCheckoutSettingsResponseNonNullableFields, type index_d$j_GiftCardProviderWasProvisioned as GiftCardProviderWasProvisioned, type IdentificationData$f as IdentificationData, type IdentificationDataIdOneOf$f as IdentificationDataIdOneOf, type index_d$j_ListCheckoutSettingsRequest as ListCheckoutSettingsRequest, type index_d$j_ListCheckoutSettingsResponse as ListCheckoutSettingsResponse, type index_d$j_Logo as Logo, index_d$j_LogoSize as LogoSize, type MessageEnvelope$e as MessageEnvelope, type index_d$j_PrivacyPolicy as PrivacyPolicy, type RestoreInfo$f as RestoreInfo, type index_d$j_ReturnPolicy as ReturnPolicy, type index_d$j_TermsAndConditionsPolicy as TermsAndConditionsPolicy, type index_d$j_UpdateCheckoutSettingsRequest as UpdateCheckoutSettingsRequest, type index_d$j_UpdateCheckoutSettingsResponse as UpdateCheckoutSettingsResponse, type index_d$j_UpdateCheckoutSettingsResponseNonNullableFields as UpdateCheckoutSettingsResponseNonNullableFields, WebhookIdentityType$e as WebhookIdentityType, type index_d$j__publicOnCheckoutSettingsUpdatedType as _publicOnCheckoutSettingsUpdatedType, index_d$j_getCheckoutSettings as getCheckoutSettings, index_d$j_onCheckoutSettingsUpdated as onCheckoutSettingsUpdated, onCheckoutSettingsUpdated$1 as publicOnCheckoutSettingsUpdated, index_d$j_updateCheckoutSettings as updateCheckoutSettings };
}

interface CheckoutTemplate {
    /**
     * Checkout template ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Status of the checkout template.
     *
     * When `status` is `INACTIVE` checkouts will not be created with this template `_id`. Instead, the function will redirect to the domain site.
     *
     * Default: `ACTIVE`
     */
    status?: Status$2;
    /** Custom settings to apply to the checkout page created from this template. */
    customization?: CheckoutCustomization;
    /**
     * Catalog line items.
     *
     * Max: 300 items
     */
    lineItems?: V1LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * Max: 300 items
     */
    customLineItems?: CustomLineItem$1[];
    /**
     * Coupon code.
     *
     * Note that a checkout can only hold one `couponCode` at a time. If an additional `couponCode` is added, it will override the existing `couponCode`.
     * For additional information, see the Coupons API.
     */
    couponCode?: string | null;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference;
}
declare enum Status$2 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE"
}
interface CheckoutCustomization {
    /** Web client customizations. These customizations only apply to the standard Wix checkout page. */
    webClient?: WebClientCustomization;
    /**
     * Whether to lock the ability to add or remove a gift card.
     *
     * Default: `false`
     */
    lockedGiftCard?: boolean;
    /**
     * Whether to lock the ability to apply or remove a coupon code.
     *
     * Default: `false`
     */
    lockedCoupon?: boolean;
    /**
     * Whether to disable manual payment option for this checkout.
     *
     * Default: `false`
     */
    disabledManualPayment?: boolean;
}
interface WebClientCustomization {
    /**
     * Whether to disable the "Continue shopping" button.
     *
     * Default: `false`
     */
    disabledContinueShoppingButton?: boolean;
    /**
     * Whether to disable policy agreement checkout in the checkout page
     *
     * Default: `false`
     */
    disabledPolicyAgreementCheckbox?: boolean;
}
interface V1LineItem {
    /**
     * Item quantity.
     *
     * Min: `1` <br />
     * Max: `100000`
     */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$5;
    /** Overriding values for catalog item properties. */
    catalogOverrideFields?: CatalogOverrideFields;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$5 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface CatalogOverrideFields {
    /** Item name. */
    productName?: ProductName$2;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine$2[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$4;
    /** Item image. */
    image?: string;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface ProductName$2 {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface DescriptionLine$2 extends DescriptionLineValueOneOf$2, DescriptionLineDescriptionLineValueOneOf$2 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$2;
    /** Description line color value. */
    colorInfo?: Color$2;
    /** Description line name. */
    name?: DescriptionLineName$2;
}
/** @oneof */
interface DescriptionLineValueOneOf$2 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$2;
    /** Description line color value. */
    colorInfo?: Color$2;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$2 {
}
interface DescriptionLineName$2 {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$2 {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$2 {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$2 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface PhysicalProperties$4 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface PaymentOption {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType$3;
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$3 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface CustomLineItem$1 {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$2;
    /** Custom line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine$2[];
    /** Custom line item's media. */
    media?: string;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    _id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName$2;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: string;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$3;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$4;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$3;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties$2;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$5;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface PriceDescription$2 {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface ItemType$3 extends ItemTypeItemTypeDataOneOf$3 {
    /** Preset item type. */
    preset?: ItemTypeItemType$3;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$3 {
    /** Preset item type. */
    preset?: ItemTypeItemType$3;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$3 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
interface SubscriptionOptionInfo$1 {
    /** Subscription option settings. */
    subscriptionSettings?: SubscriptionSettings$4;
    /** Subscription option title. */
    title?: Title;
    /** Subscription option description. */
    description?: Description;
}
interface SubscriptionSettings$4 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$4;
    /**
     * Interval of recurring payment.
     *
     * Default: `1`.
     * If SubscriptionFrequency is Day the minimum interval is 7
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal` is `true`. */
    billingCycles?: number | null;
    /**
     * Period until first cycle starts. If applied payNow will be 0
     * If None => no free trial
     */
    freeTrialPeriod?: FreeTrialPeriod;
    /** The date the subscription will start. The subscription will be charged either now or according to freeTrialDays. */
    startDate?: Date | null;
    /**
     * Whether to generate an order each billing cycle. An order will always be generated for the first billing cycle.
     * Default None => will behave like true
     */
    generateOrderEachBillingCycle?: boolean | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$4 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface FreeTrialPeriod {
    /** Frequency of priod. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequency$4;
    /** interval of period */
    interval?: number;
}
interface Title {
    /** Subscription option name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Subscription option name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Description {
    /** Subscription option description. */
    original?: string;
    /** Translated subscription option description. */
    translated?: string | null;
}
interface SecuredMedia$1 {
    /** Media ID in Wix Media Manager. */
    _id?: string;
    /** Original filename. */
    fileName?: string;
    /** File type. */
    fileType?: FileType$1;
}
declare enum FileType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
interface ServiceProperties$2 {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface Policy {
    /** Policy title - should be translated */
    title?: string;
    /** Policy content - should be translated */
    content?: string;
}
interface ExtendedFields$7 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CustomContentReference {
    /**
     * ID of the app providing the content.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    appId?: string;
    /**
     * ID of the component within the app it belongs to.
     *
     * You can get your component's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    componentId?: string;
}
interface ExternalReference$1 {
    /**
     * ID of the app associated with the purchase flow.
     * For example, the Wix Pay Links app ID.
     */
    appId?: string;
    /**
     * Reference to an external resource ID. Used to link the purchase flow to a specific entity in an external system.
     * For example, a Wix Pay Link ID.
     */
    resourceId?: string | null;
}
interface CreateCheckoutTemplateRequest {
    /** Checkout template to create. */
    checkoutTemplate: CheckoutTemplate;
}
interface CreateCheckoutTemplateResponse {
    /** Created checkout template. */
    checkoutTemplate?: CheckoutTemplate;
}
interface GetCheckoutTemplateRequest {
    /** ID of the checkout template to retrieve. */
    checkoutTemplateId: string;
}
interface GetCheckoutTemplateResponse {
    /** Retrieved checkout template. */
    checkoutTemplate?: CheckoutTemplate;
}
interface UpdateCheckoutTemplateRequest {
    /** Checkout template info to update. */
    checkoutTemplate: CheckoutTemplate;
}
interface UpdateCheckoutTemplateResponse {
    /** Updated checkout template. */
    checkoutTemplate?: CheckoutTemplate;
}
interface DeleteCheckoutTemplateRequest {
    /** ID of the checkout template to delete. */
    checkoutTemplateId: string;
}
interface DeleteCheckoutTemplateResponse {
}
interface QueryCheckoutTemplatesRequest {
    /** Query options. */
    query?: CursorQuery$7;
}
interface CursorQuery$7 extends CursorQueryPagingMethodOneOf$7 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$b;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     *
     * Example of operators: `$eq`, `$ne`, `$in`, `$startsWith`, `$exists`, `$hasSome`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$b[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$7 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$b;
}
interface Sorting$b {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$b;
}
declare enum SortOrder$b {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$b {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results. </ br>
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryCheckoutTemplatesResponse {
    /** Retrieved checkout templates. */
    checkoutTemplates?: CheckoutTemplate[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$a;
}
interface CursorPagingMetadata$a {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors$b;
    /**
     * Indicates if there are more results after the current page.
     * If `true`, another page of results can be retrieved.
     * If `false`, this is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$b {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
interface CreateCheckoutFromTemplateRequest {
    /** ID of the checkout template to use to create a checkout from. */
    checkoutTemplateId: string;
    /** ID of the site associated with the checkout template. */
    siteId: string;
}
interface CreateCheckoutFromTemplateResponse {
    /** ID of the created checkout. */
    checkoutId?: string;
    /** URL of the created checkout page. */
    checkoutUrl?: string;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}
/** Triggered when newly checkout created successfully from checkout template */
interface CheckoutTemplateUsed {
    /** checkout template */
    checkoutTemplate?: CheckoutTemplate;
    /** newly created checkout */
    checkout?: Checkout;
}
interface Checkout {
    /**
     * Checkout ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Line items.
     *
     * Max: 300 items
     * @readonly
     */
    lineItems?: LineItem$3[];
    /** Billing information. */
    billingInfo?: AddressWithContact$2;
    /** Shipping information. */
    shippingInfo?: ShippingInfo$1;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo$4;
    /**
     * All converted prices are displayed in this currency in three-letter [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Calculated price summary for the checkout.
     * @readonly
     */
    priceSummary?: PriceSummary$3;
    /**
     * Errors when calculating totals.
     * @readonly
     */
    calculationErrors?: CalculationErrors$2;
    /**
     * Applied gift card details.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     * @readonly
     */
    giftCard?: GiftCard$3;
    /**
     * Applied discounts.
     * @readonly
     */
    appliedDiscounts?: AppliedDiscount$3[];
    /** Custom fields. */
    customFields?: CustomField$3[];
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit$5;
    /**
     * Tax summary.
     * @readonly
     */
    taxSummary?: TaxSummary$3;
    /**
     * The currency used when submitting the order.
     * @readonly
     */
    currency?: string;
    /**
     * Sales channel that submitted the order.
     * + `"UNSPECIFIED"`: Unspecified sales channel. This value is not supported.
     * + `"WEB"`: A web client.
     * + `"POS"`: [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395)
     * + `"EBAY"`: [eBay](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop)
     * + `"AMAZON"`: [Amazon](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop)
     * + `"WISH"`: [Wish](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-a-wish-shop)
     * + `"WIX_INVOICES"`: Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings)
     * + `"WIX_APP_STORE"`: [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview)
     * + `"BACKOFFICE_MERCHANT"`: Wix merchant backoffice
     * + `"OTHER_PLATFORM"`: Other sales platform.
     * @readonly
     */
    channelType?: ChannelType$3;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string;
    /**
     * Whether an order was successfully created from this checkout.
     * For an order to be successful, it must be successfully paid for (unless the total is 0).
     * @readonly
     */
    completed?: boolean;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrice?: boolean;
    /**
     * ID of the checkout's initiator.
     * @readonly
     */
    createdBy?: CreatedBy$2;
    /**
     * Date and time the checkout was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the checkout was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary$3;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary$3;
    /** Memberships to apply when creating the order. */
    membershipOptions?: MembershipOptions$1;
    /** Additional Fees. */
    additionalFees?: AdditionalFee$3[];
    /** Cart ID that this checkout was created from. Empty if this checkout wasn't created from a cart. */
    cartId?: string | null;
    /**
     * List of validation violations raised by the [Validations service plugin](https://dev.wix.com/api/rest/wix-ecommerce/validations-integration-spi/introduction).
     * @readonly
     */
    violations?: Violation[];
    /**
     * Custom field data for the checkout object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$7;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /**
     * Additional settings for customization of the checkout process.
     *
     * > **Notes:**
     * > * Custom settings can only be set when [creating a checkout](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/checkout/create-checkout).
     * > * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions". Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customSettings?: CustomSettings;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference;
}
interface LineItem$3 {
    /**
     * Line item ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Item quantity.
     *
     * Min: `"1"`
     * Max: `"100000"`
     */
    quantity?: number;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$5;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName$2;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: string;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice$1;
    /**
     * Total line item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    lineItemPrice?: MultiCurrencyPrice$1;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice$1;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice$1;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: MultiCurrencyPrice$1;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: MultiCurrencyPrice$1;
    /**
     * Tax details for this line item.
     * @readonly
     */
    taxDetails?: ItemTaxFullDetails$3;
    /**
     * Discount for this line item's entire quantity.
     * @readonly
     */
    discount?: MultiCurrencyPrice$1;
    /**
     * Line item description lines. Used for display purposes for the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine$2[];
    /**
     * Line item image details.
     * @readonly
     */
    media?: string;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties$4;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType$3;
    /**
     * Subscription option information.
     * @readonly
     */
    subscriptionOptionInfo?: SubscriptionOptionInfo$1;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is defined by `lineItem.deposit`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be performed by using a membership and must be manually redeemed in the dashboard by the site owner. When this option is used, `lineItem.price.amount` is `0`.
     * @readonly
     */
    paymentOption?: PaymentOptionType$3;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties$2;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field has the same value as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription$2;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice$1;
    /**
     * Whether the line item is a custom line item. Custom line items don't trigger the Catalog service plugin.
     * @readonly
     */
    customLineItem?: boolean;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface MultiCurrencyPrice$1 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface ItemTaxFullDetails$3 {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice$1;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice$1;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown$1[];
}
interface TaxRateBreakdown$1 {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice$1;
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface TaxBreakdown$1 {
    /** The name of the jurisdiction to which this tax detail applies. For example, "New York" or "Quebec". */
    jurisdiction?: string | null;
    /** The amount of this line item price that was considered nontaxable. (Decimal value) */
    nonTaxableAmount?: MultiCurrencyPrice$1;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.0000 signifies 200% tax. (Decimal value) */
    rate?: string | null;
    /** The amount of tax estimated for this line item. (Decimal value) */
    taxAmount?: MultiCurrencyPrice$1;
    /** The taxable amount of this line item. */
    taxableAmount?: MultiCurrencyPrice$1;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** The type of the jurisdiction in which this tax detail applies. */
    jurisdictionType?: JurisdictionType$3;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$3 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface ItemAvailabilityInfo {
    /**
     * Item availability status.
     * + `"NOT_FOUND"`: Item does not exist
     * + `"NOT_AVAILABLE"`: Item not in stock
     * + `"PARTIALLY_AVAILABLE"`: Available quantity is less than requested
     */
    status?: ItemAvailabilityStatus;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus {
    AVAILABLE = "AVAILABLE",
    NOT_FOUND = "NOT_FOUND",
    /** Not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
interface Scope$1 {
    /** Scope namespace (Wix Stores, Wix Bookings, Wix Events, Wix Pricing Plans) */
    namespace?: string;
    /** Coupon scope's applied group (e.g., event or ticket in Wix Events) */
    group?: Group$1;
}
interface Group$1 {
    /** Coupon scope's group (e.g., product or collection in Wix Stores). See [valid scope values](https://dev.wix.com/api/rest/coupons/coupons/valid-scope-values). */
    name?: string;
    /** Item ID (when the coupon scope is limited to just one item). */
    entityId?: string | null;
}
interface TaxableAddress$3 extends TaxableAddressTaxableAddressDataOneOf$3 {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType$3;
}
/** @oneof */
interface TaxableAddressTaxableAddressDataOneOf$3 {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType$3;
}
declare enum TaxableAddressType$3 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Billing Info and shipping details */
interface AddressWithContact$2 {
    /** Address. */
    address?: Address$7;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$3;
}
/** Physical address */
interface Address$7 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$6;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$6 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation$6 {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
/** Full contact details for an address */
interface FullAddressContactDetails$3 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$4;
}
interface VatId$4 {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$4;
}
/** tax info types */
declare enum VatType$4 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface ShippingInfo$1 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$2;
    /** Selected option out of the options allowed for the `region`. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption$1;
    /**
     * Shipping region. Based on the address provided.
     * @readonly
     */
    region?: ShippingRegion$3;
    /**
     * All carrier options for this shipping rule.
     * @readonly
     */
    carrierServiceOptions?: CarrierServiceOption$1[];
}
interface SelectedCarrierServiceOption$1 {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics$4;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices$1;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge$1[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface DeliveryLogistics$4 {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails$5;
}
interface PickupDetails$5 {
    /** Pickup address. */
    address?: Address$7;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod$4;
}
declare enum PickupMethod$4 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$4 {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
interface SelectedCarrierServiceOptionPrices$1 {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$1;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$1;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$3;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice$1;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice$1;
}
interface SelectedCarrierServiceOptionOtherCharge$1 {
    /** Type of additional cost. */
    type?: ChargeType$3;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices$1;
}
declare enum ChargeType$3 {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface ShippingRegion$3 {
    /**
     * Shipping region ID.
     * @readonly
     */
    _id?: string;
    /** Shipping region name. */
    name?: string;
}
interface CarrierServiceOption$1 {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption$3[];
}
interface ShippingOption$3 {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics$4;
    /** Sipping price information. */
    cost?: ShippingPrice$3;
}
interface ShippingPrice$3 {
    /** Shipping price. */
    price?: MultiCurrencyPrice$1;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge$1[];
}
interface OtherCharge$1 {
    /** Type of additional cost. */
    type?: ChargeType$3;
    /** Price of added cost. */
    price?: MultiCurrencyPrice$1;
}
interface BuyerInfo$4 extends BuyerInfoIdOneOf$2 {
    /**
     * Visitor ID (if site visitor is **not** a member).
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID (if site visitor is a site member).
     * @readonly
     */
    memberId?: string;
    /**
     * Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction).
     * @readonly
     */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$2 {
    /**
     * Visitor ID (if site visitor is **not** a member).
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID (if site visitor is a site member).
     * @readonly
     */
    memberId?: string;
}
interface PriceSummary$3 {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice$1;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice$1;
    /** Total tax. */
    tax?: MultiCurrencyPrice$1;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice$1;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice$1;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice$1;
}
interface CalculationErrors$2 extends CalculationErrorsShippingCalculationErrorOneOf$2 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$3;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$2;
    /** Tax calculation error. */
    taxCalculationError?: Details$3;
    /** Coupon calculation error. */
    couponCalculationError?: Details$3;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details$3;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$8[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details$3;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details$3;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$2 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$3;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$2;
}
interface Details$3 extends DetailsKindOneOf$3 {
    applicationError?: ApplicationError$8;
    validationError?: ValidationError$3;
    systemError?: SystemError$3;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$3 {
    applicationError?: ApplicationError$8;
    validationError?: ValidationError$3;
    systemError?: SystemError$3;
}
interface ApplicationError$8 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$3 {
    fieldViolations?: FieldViolation$3[];
}
declare enum RuleType$3 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$3 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$3;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$3 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$2 {
    /** Carrier errors. */
    errors?: CarrierError$3[];
}
interface CarrierError$3 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$3;
}
interface GiftCard$3 {
    /**
     * Gift Card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice$1;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface AppliedDiscount$3 extends AppliedDiscountDiscountSourceOneOf$3 {
    /** Coupon details. */
    coupon?: Coupon$3;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$3;
    /** Discount rule */
    discountRule?: DiscountRule$3;
    /** Discount type. */
    discountType?: DiscountType$3;
    /**
     * IDs of line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$3 {
    /** Coupon details. */
    coupon?: Coupon$3;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$3;
    /** Discount rule */
    discountRule?: DiscountRule$3;
}
declare enum DiscountType$3 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$3 {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice$1;
    /** Coupon name. */
    name?: string;
}
interface MerchantDiscount$3 {
    /** Discount value. */
    amount?: MultiCurrencyPrice$1;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule$3 {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$3;
    /** Discount value. */
    amount?: MultiCurrencyPrice$1;
}
interface DiscountRuleName$3 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface LineItemDiscount$3 {
    /** ID of line item the discount applies to. */
    _id?: string;
    /** Discount value. */
    totalDiscountAmount?: MultiCurrencyPrice$1;
}
interface CustomField$3 {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
declare enum WeightUnit$5 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface TaxSummary$3 {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice$1;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice$1;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails$1;
}
interface TaxCalculationDetails$1 extends TaxCalculationDetailsCalculationDetailsOneOf$1 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$1;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$1;
    /** Rate calculation type. */
    rateType?: RateType$1;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf$1 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$1;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$1;
}
declare enum RateType$1 {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason$1 {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails$1 {
    /** reason for fallback */
    fallbackReason?: FallbackReason$1;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError$8;
}
declare enum FallbackReason$1 {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface AggregatedTaxBreakdown$1 {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionTypeEnum?: JurisdictionType$3;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.000 signifies 200% tax. (Decimal value) */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: MultiCurrencyPrice$1;
}
declare enum ChannelType$3 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CreatedBy$2 extends CreatedByIdOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** @oneof */
interface CreatedByIdOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** Reserved for internal use. */
interface MembershipOptions$1 {
    /**
     * Reserved for internal use.
     * @readonly
     */
    eligibleMemberships?: Membership$1[];
    /**
     * Reserved for internal use.
     * @readonly
     */
    invalidMemberships?: InvalidMembership$1[];
    /** Selected membership to apply to this checkout. */
    selectedMemberships?: SelectedMemberships$1;
}
interface Membership$1 {
    /** Membership ID. */
    _id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName$3;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits$1;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName$3 {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface MembershipPaymentCredits$1 {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership$1 {
    /** Membership details. */
    membership?: Membership$1;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface SelectedMemberships$1 {
    /** Selected memberships. */
    memberships?: SelectedMembership$1[];
}
interface SelectedMembership$1 {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface AdditionalFee$3 {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice$1;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$3;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice$1;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice$1;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface ConversionInfo {
    /**
     * The site currency.
     * @readonly
     */
    siteCurrency?: string;
    /**
     * The rate used when converting from the site currency to the checkout currency.
     * @readonly
     */
    conversionRate?: string;
}
interface Violation {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target extends TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** @oneof */
interface TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** Available locations on the webpage */
declare enum NameInOther {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther;
}
/** Specific line item violation. */
interface TargetLineItem {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem;
    /** ID of the line item containing the violation. */
    _id?: string | null;
}
interface CustomSettings {
    /**
     * Whether to restrict the option to add or remove a gift card on the checkout page.
     *
     * Default: `false`
     */
    lockGiftCard?: boolean;
    /**
     * Whether to restrict the option to add or remove a coupon code on the checkout page.
     *
     * Default: `false`
     */
    lockCouponCode?: boolean;
    /**
     * Whether to disable policy agreement checkout in the checkout page
     *
     * Default: `false`
     */
    disabledPolicyAgreementCheckbox?: boolean;
    /**
     * Whether to disable manual payment option for this checkout.
     *
     * Default: `false`
     */
    disabledManualPayment?: boolean;
}
interface CreateAndRedirectToCheckoutRequest {
    /** ID of the checkout template to use to create a checkout. */
    checkoutTemplateId: string;
    /** ID of the site associated with the checkout template. */
    siteId: string;
}
interface RawHttpResponse {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry[];
}
interface HeadersEntry {
    key?: string;
    value?: string;
}
interface DomainEvent$e extends DomainEventBodyOneOf$e {
    createdEvent?: EntityCreatedEvent$e;
    updatedEvent?: EntityUpdatedEvent$e;
    deletedEvent?: EntityDeletedEvent$e;
    actionEvent?: ActionEvent$e;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$e {
    createdEvent?: EntityCreatedEvent$e;
    updatedEvent?: EntityUpdatedEvent$e;
    deletedEvent?: EntityDeletedEvent$e;
    actionEvent?: ActionEvent$e;
}
interface EntityCreatedEvent$e {
    entity?: string;
}
interface RestoreInfo$e {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$e {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$e {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$e {
    body?: string;
}
interface MessageEnvelope$d {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$e;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$e extends IdentificationDataIdOneOf$e {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$d;
}
/** @oneof */
interface IdentificationDataIdOneOf$e {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$d {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface WebClientCustomizationNonNullableFields {
    disabledContinueShoppingButton: boolean;
    disabledPolicyAgreementCheckbox: boolean;
}
interface CheckoutCustomizationNonNullableFields {
    webClient?: WebClientCustomizationNonNullableFields;
    lockedGiftCard: boolean;
    lockedCoupon: boolean;
    disabledManualPayment: boolean;
}
interface CatalogReferenceNonNullableFields$2 {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields$2 {
    original: string;
}
interface PlainTextValueNonNullableFields$2 {
    original: string;
}
interface ColorNonNullableFields$2 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$2 {
    original: string;
}
interface DescriptionLineNonNullableFields$2 {
    plainText?: PlainTextValueNonNullableFields$2;
    colorInfo?: ColorNonNullableFields$2;
    plainTextValue?: PlainTextValueNonNullableFields$2;
    color: string;
    name?: DescriptionLineNameNonNullableFields$2;
    lineType: DescriptionLineType$2;
}
interface PhysicalPropertiesNonNullableFields$2 {
    shippable: boolean;
}
interface PaymentOptionNonNullableFields {
    value: PaymentOptionType$3;
}
interface CatalogOverrideFieldsNonNullableFields {
    productName?: ProductNameNonNullableFields$2;
    descriptionLines: DescriptionLineNonNullableFields$2[];
    physicalProperties?: PhysicalPropertiesNonNullableFields$2;
    image: string;
    paymentOption?: PaymentOptionNonNullableFields;
}
interface V1LineItemNonNullableFields {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields$2;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields;
}
interface PriceDescriptionNonNullableFields$2 {
    original: string;
}
interface ItemTypeNonNullableFields$2 {
    preset: ItemTypeItemType$3;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields {
    frequency: SubscriptionFrequency$4;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields$2 {
    frequency: SubscriptionFrequency$4;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields;
}
interface TitleNonNullableFields {
    original: string;
}
interface DescriptionNonNullableFields {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$2;
    title?: TitleNonNullableFields;
    description?: DescriptionNonNullableFields;
}
interface SecuredMediaNonNullableFields {
    _id: string;
    fileName: string;
    fileType: FileType$1;
}
interface PolicyNonNullableFields {
    title: string;
    content: string;
}
interface CustomLineItemNonNullableFields {
    quantity: number;
    price: string;
    priceDescription?: PriceDescriptionNonNullableFields$2;
    descriptionLines: DescriptionLineNonNullableFields$2[];
    media: string;
    productName?: ProductNameNonNullableFields$2;
    url: string;
    itemType?: ItemTypeNonNullableFields$2;
    physicalProperties?: PhysicalPropertiesNonNullableFields$2;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields;
    digitalFile?: SecuredMediaNonNullableFields;
    paymentOption: PaymentOptionType$3;
    catalogReference?: CatalogReferenceNonNullableFields$2;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    savePaymentMethod: boolean;
    policies: PolicyNonNullableFields[];
}
interface CustomContentReferenceNonNullableFields {
    appId: string;
    componentId: string;
}
interface ExternalReferenceNonNullableFields {
    appId: string;
}
interface CheckoutTemplateNonNullableFields {
    status: Status$2;
    customization?: CheckoutCustomizationNonNullableFields;
    lineItems: V1LineItemNonNullableFields[];
    customLineItems: CustomLineItemNonNullableFields[];
    customContentReference?: CustomContentReferenceNonNullableFields;
    externalReference?: ExternalReferenceNonNullableFields;
}
interface CreateCheckoutTemplateResponseNonNullableFields {
    checkoutTemplate?: CheckoutTemplateNonNullableFields;
}
interface GetCheckoutTemplateResponseNonNullableFields {
    checkoutTemplate?: CheckoutTemplateNonNullableFields;
}
interface UpdateCheckoutTemplateResponseNonNullableFields {
    checkoutTemplate?: CheckoutTemplateNonNullableFields;
}
interface QueryCheckoutTemplatesResponseNonNullableFields {
    checkoutTemplates: CheckoutTemplateNonNullableFields[];
}
interface CreateCheckoutFromTemplateResponseNonNullableFields {
    checkoutId: string;
    checkoutUrl: string;
}
interface HeadersEntryNonNullableFields {
    key: string;
    value: string;
}
interface RawHttpResponseNonNullableFields {
    body: Uint8Array;
    headers: HeadersEntryNonNullableFields[];
}
interface BaseEventMetadata$6 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$e;
}
interface EventMetadata$6 extends BaseEventMetadata$6 {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface CheckoutTemplateCreatedEnvelope {
    entity: CheckoutTemplate;
    metadata: EventMetadata$6;
}
interface CheckoutTemplateUpdatedEnvelope {
    entity: CheckoutTemplate;
    metadata: EventMetadata$6;
}
interface CheckoutTemplateDeletedEnvelope {
    metadata: EventMetadata$6;
}
interface CheckoutTemplateUsedEnvelope {
    data: CheckoutTemplateUsed;
    metadata: EventMetadata$6;
}
interface UpdateCheckoutTemplate {
    /**
     * Checkout template ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Status of the checkout template.
     *
     * When `status` is `INACTIVE` checkouts will not be created with this template `_id`. Instead, the function will redirect to the domain site.
     *
     * Default: `ACTIVE`
     */
    status?: Status$2;
    /** Custom settings to apply to the checkout page created from this template. */
    customization?: CheckoutCustomization;
    /**
     * Catalog line items.
     *
     * Max: 300 items
     */
    lineItems?: V1LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * Max: 300 items
     */
    customLineItems?: CustomLineItem$1[];
    /**
     * Coupon code.
     *
     * Note that a checkout can only hold one `couponCode` at a time. If an additional `couponCode` is added, it will override the existing `couponCode`.
     * For additional information, see the Coupons API.
     */
    couponCode?: string | null;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference;
}
interface QueryCursorResult$9 {
    cursors: Cursors$b;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface CheckoutTemplatesQueryResult extends QueryCursorResult$9 {
    items: CheckoutTemplate[];
    query: CheckoutTemplatesQueryBuilder;
    next: () => Promise<CheckoutTemplatesQueryResult>;
    prev: () => Promise<CheckoutTemplatesQueryResult>;
}
interface CheckoutTemplatesQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'status', value: any) => CheckoutTemplatesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'status', value: any) => CheckoutTemplatesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id', value: string) => CheckoutTemplatesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'status', value: any[]) => CheckoutTemplatesQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'status', value: any) => CheckoutTemplatesQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'status', value: boolean) => CheckoutTemplatesQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id' | 'status'>) => CheckoutTemplatesQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id' | 'status'>) => CheckoutTemplatesQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => CheckoutTemplatesQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => CheckoutTemplatesQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<CheckoutTemplatesQueryResult>;
}

declare function createCheckoutTemplate$1(httpClient: HttpClient): CreateCheckoutTemplateSignature;
interface CreateCheckoutTemplateSignature {
    /**
     * Creates a checkout template.
     *
     * A checkout template is used to create a new checkout that will include predefined information. For example, a single link with
     * a `checkoutTemplateId` can be shared with customers and each time the link is clicked, a new checkout page will be created
     * for that customer with certain checkout information already populated.
     *
     * The customizable features include the option to allow or to lock coupon codes or gift cards. For example, if a store owner is
     * using the checkout template to offer a flash sale to their social media followers, they may want to lock the option to apply an
     * additional coupon on top of the sale being offered. If so, they can set `customization.lockedCoupon` to `true`.
     *
     * A checkout can be created with a checkout template by calling `createCheckoutFromTemplate()`. The site may add further customizations to the new checkout and then redirect the customer using the new checkout's `checkoutUrl`.
     * @param - Checkout template to create.
     * @returns Created checkout template.
     */
    (checkoutTemplate: CheckoutTemplate): Promise<CheckoutTemplate & CheckoutTemplateNonNullableFields>;
}
declare function getCheckoutTemplate$1(httpClient: HttpClient): GetCheckoutTemplateSignature;
interface GetCheckoutTemplateSignature {
    /**
     * Retrieves a checkout template.
     * @param - ID of the checkout template to retrieve.
     * @returns Retrieved checkout template.
     */
    (checkoutTemplateId: string): Promise<CheckoutTemplate & CheckoutTemplateNonNullableFields>;
}
declare function updateCheckoutTemplate$1(httpClient: HttpClient): UpdateCheckoutTemplateSignature;
interface UpdateCheckoutTemplateSignature {
    /**
     * Updates a checkout template.
     *
     * If the info in a checkout template is updated, only new checkouts created from this template will include the updated items. Checkouts previously
     * created from this template before the update will not be affected.
     * @param - Checkout template ID.
     * @param - Checkout template info to update.
     * @returns Updated checkout template.
     */
    (_id: string | null, checkoutTemplate: UpdateCheckoutTemplate): Promise<CheckoutTemplate & CheckoutTemplateNonNullableFields>;
}
declare function deleteCheckoutTemplate$1(httpClient: HttpClient): DeleteCheckoutTemplateSignature;
interface DeleteCheckoutTemplateSignature {
    /**
     * Deletes a checkout template.
     *
     * If a checkout template is deleted and a customer attempts to create a checkout with that `checkoutTemplateId` then
     * the customer will be redirected to the domain site.
     * @param - ID of the checkout template to delete.
     */
    (checkoutTemplateId: string): Promise<void>;
}
declare function queryCheckoutTemplates$1(httpClient: HttpClient): QueryCheckoutTemplatesSignature;
interface QueryCheckoutTemplatesSignature {
    /**
     * Creates a query to retrieve a list of checkout templates.
     *
     * The `queryCheckoutTemplates()` function builds a query to retrieve a list of checkout templates and returns a `CheckoutTemplatesQueryBuilder` object.
     *
     * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
     *
     * You can refine the query by chaining `CheckoutTemplatesQueryBuilder` functions onto the query. `CheckoutTemplatesQueryBuilder` functions enable you to sort, filter, and control the results that `queryCheckoutTemplates()` returns.
     *
     * `queryCheckoutTemplates()` runs with the following `CheckoutTemplatesQueryBuilder` default that you can override:
     * + `ascending("_id")`
     *
     * The functions that are chained to `queryCheckoutTemplates()` are applied in the order they are called. For example, if you apply `ascending("status")` and then `ascending("_id")`, the results are sorted first by the `"status"`, and then, if there are multiple results with the same `"status"`, the items are sorted by `"_id"`.
     *
     * The following `CheckoutTemplatesQueryBuilder` functions are supported for the `queryCheckoutTemplates()` function. For a full description of the checkout template object, see the object returned for the `items` property in `CheckoutTemplatesQueryResult`.
     */
    (): CheckoutTemplatesQueryBuilder;
}
declare function createCheckoutFromTemplate$1(httpClient: HttpClient): CreateCheckoutFromTemplateSignature;
interface CreateCheckoutFromTemplateSignature {
    /**
     * Creates a new checkout based on the checkout template.
     *
     * Before using this function, you must have a checkout template available. Create a checkout template with `createCheckoutTemplate()`.
     *
     * The customer can be directed to the new checkout using the checkout's `checkoutUrl`.
     * @param - ID of the checkout template to use to create a checkout from.
     * @param - ID of the site associated with the checkout template.
     */
    (checkoutTemplateId: string, siteId: string): Promise<CreateCheckoutFromTemplateResponse & CreateCheckoutFromTemplateResponseNonNullableFields>;
}
declare function createAndRedirectToCheckout$1(httpClient: HttpClient): CreateAndRedirectToCheckoutSignature;
interface CreateAndRedirectToCheckoutSignature {
    /**
     * Creates a new checkout based on the checkout template and redirects to the new checkout page.
     *
     * Before using this function, you must have a checkout template available. Create a checkout template with `createCheckoutTemplate()`.
     *
     * To build a URL that uses this function, follow this format:
     * `https://www.wixapis.com/ecom/v1/checkout-templates/{checkoutTemplateId}/create-and-redirect-to-checkout?siteId={siteId}`
     *
     * To create a checkout but not automatically redirect to the checkout page, use `createCheckoutFromTemplate()`.
     * @param - ID of the checkout template to use to create a checkout.
     * @param - ID of the site associated with the checkout template.
     */
    (checkoutTemplateId: string, siteId: string): Promise<RawHttpResponse & RawHttpResponseNonNullableFields>;
}
declare const onCheckoutTemplateCreated$1: EventDefinition<CheckoutTemplateCreatedEnvelope, "wix.ecom.v1.checkout_template_created">;
declare const onCheckoutTemplateUpdated$1: EventDefinition<CheckoutTemplateUpdatedEnvelope, "wix.ecom.v1.checkout_template_updated">;
declare const onCheckoutTemplateDeleted$1: EventDefinition<CheckoutTemplateDeletedEnvelope, "wix.ecom.v1.checkout_template_deleted">;
declare const onCheckoutTemplateUsed$1: EventDefinition<CheckoutTemplateUsedEnvelope, "wix.ecom.v1.checkout_template_used">;

declare function createEventModule$6<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createCheckoutTemplate: MaybeContext<BuildRESTFunction<typeof createCheckoutTemplate$1> & typeof createCheckoutTemplate$1>;
declare const getCheckoutTemplate: MaybeContext<BuildRESTFunction<typeof getCheckoutTemplate$1> & typeof getCheckoutTemplate$1>;
declare const updateCheckoutTemplate: MaybeContext<BuildRESTFunction<typeof updateCheckoutTemplate$1> & typeof updateCheckoutTemplate$1>;
declare const deleteCheckoutTemplate: MaybeContext<BuildRESTFunction<typeof deleteCheckoutTemplate$1> & typeof deleteCheckoutTemplate$1>;
declare const queryCheckoutTemplates: MaybeContext<BuildRESTFunction<typeof queryCheckoutTemplates$1> & typeof queryCheckoutTemplates$1>;
declare const createCheckoutFromTemplate: MaybeContext<BuildRESTFunction<typeof createCheckoutFromTemplate$1> & typeof createCheckoutFromTemplate$1>;
declare const createAndRedirectToCheckout: MaybeContext<BuildRESTFunction<typeof createAndRedirectToCheckout$1> & typeof createAndRedirectToCheckout$1>;

type _publicOnCheckoutTemplateCreatedType = typeof onCheckoutTemplateCreated$1;
/**
 * Triggered when a checkout template is created.
 */
declare const onCheckoutTemplateCreated: ReturnType<typeof createEventModule$6<_publicOnCheckoutTemplateCreatedType>>;

type _publicOnCheckoutTemplateUpdatedType = typeof onCheckoutTemplateUpdated$1;
/**
 * Triggered when a checkout template is updated.
 */
declare const onCheckoutTemplateUpdated: ReturnType<typeof createEventModule$6<_publicOnCheckoutTemplateUpdatedType>>;

type _publicOnCheckoutTemplateDeletedType = typeof onCheckoutTemplateDeleted$1;
/**
 * Triggered when a checkout template is deleted.
 */
declare const onCheckoutTemplateDeleted: ReturnType<typeof createEventModule$6<_publicOnCheckoutTemplateDeletedType>>;

type _publicOnCheckoutTemplateUsedType = typeof onCheckoutTemplateUsed$1;
/**
 * Triggered when a checkout is created from a checkout template.
 */
declare const onCheckoutTemplateUsed: ReturnType<typeof createEventModule$6<_publicOnCheckoutTemplateUsedType>>;

type index_d$i_CatalogOverrideFields = CatalogOverrideFields;
type index_d$i_Checkout = Checkout;
type index_d$i_CheckoutCustomization = CheckoutCustomization;
type index_d$i_CheckoutTemplate = CheckoutTemplate;
type index_d$i_CheckoutTemplateCreatedEnvelope = CheckoutTemplateCreatedEnvelope;
type index_d$i_CheckoutTemplateDeletedEnvelope = CheckoutTemplateDeletedEnvelope;
type index_d$i_CheckoutTemplateNonNullableFields = CheckoutTemplateNonNullableFields;
type index_d$i_CheckoutTemplateUpdatedEnvelope = CheckoutTemplateUpdatedEnvelope;
type index_d$i_CheckoutTemplateUsed = CheckoutTemplateUsed;
type index_d$i_CheckoutTemplateUsedEnvelope = CheckoutTemplateUsedEnvelope;
type index_d$i_CheckoutTemplatesQueryBuilder = CheckoutTemplatesQueryBuilder;
type index_d$i_CheckoutTemplatesQueryResult = CheckoutTemplatesQueryResult;
type index_d$i_ConversionInfo = ConversionInfo;
type index_d$i_CreateAndRedirectToCheckoutRequest = CreateAndRedirectToCheckoutRequest;
type index_d$i_CreateCheckoutFromTemplateRequest = CreateCheckoutFromTemplateRequest;
type index_d$i_CreateCheckoutFromTemplateResponse = CreateCheckoutFromTemplateResponse;
type index_d$i_CreateCheckoutFromTemplateResponseNonNullableFields = CreateCheckoutFromTemplateResponseNonNullableFields;
type index_d$i_CreateCheckoutTemplateRequest = CreateCheckoutTemplateRequest;
type index_d$i_CreateCheckoutTemplateResponse = CreateCheckoutTemplateResponse;
type index_d$i_CreateCheckoutTemplateResponseNonNullableFields = CreateCheckoutTemplateResponseNonNullableFields;
type index_d$i_CreatedByIdOneOf = CreatedByIdOneOf;
type index_d$i_CustomContentReference = CustomContentReference;
type index_d$i_CustomSettings = CustomSettings;
type index_d$i_DeleteCheckoutTemplateRequest = DeleteCheckoutTemplateRequest;
type index_d$i_DeleteCheckoutTemplateResponse = DeleteCheckoutTemplateResponse;
type index_d$i_Description = Description;
type index_d$i_FreeTrialPeriod = FreeTrialPeriod;
type index_d$i_GetCheckoutTemplateRequest = GetCheckoutTemplateRequest;
type index_d$i_GetCheckoutTemplateResponse = GetCheckoutTemplateResponse;
type index_d$i_GetCheckoutTemplateResponseNonNullableFields = GetCheckoutTemplateResponseNonNullableFields;
type index_d$i_HeadersEntry = HeadersEntry;
type index_d$i_ItemAvailabilityInfo = ItemAvailabilityInfo;
type index_d$i_ItemAvailabilityStatus = ItemAvailabilityStatus;
declare const index_d$i_ItemAvailabilityStatus: typeof ItemAvailabilityStatus;
type index_d$i_NameInLineItem = NameInLineItem;
declare const index_d$i_NameInLineItem: typeof NameInLineItem;
type index_d$i_NameInOther = NameInOther;
declare const index_d$i_NameInOther: typeof NameInOther;
type index_d$i_Other = Other;
type index_d$i_PaymentOption = PaymentOption;
type index_d$i_Policy = Policy;
type index_d$i_QueryCheckoutTemplatesRequest = QueryCheckoutTemplatesRequest;
type index_d$i_QueryCheckoutTemplatesResponse = QueryCheckoutTemplatesResponse;
type index_d$i_QueryCheckoutTemplatesResponseNonNullableFields = QueryCheckoutTemplatesResponseNonNullableFields;
type index_d$i_RawHttpResponse = RawHttpResponse;
type index_d$i_RawHttpResponseNonNullableFields = RawHttpResponseNonNullableFields;
type index_d$i_Severity = Severity;
declare const index_d$i_Severity: typeof Severity;
type index_d$i_SuggestedFix = SuggestedFix;
declare const index_d$i_SuggestedFix: typeof SuggestedFix;
type index_d$i_Target = Target;
type index_d$i_TargetLineItem = TargetLineItem;
type index_d$i_TargetTargetTypeOneOf = TargetTargetTypeOneOf;
type index_d$i_Title = Title;
type index_d$i_UpdateCheckoutTemplate = UpdateCheckoutTemplate;
type index_d$i_UpdateCheckoutTemplateRequest = UpdateCheckoutTemplateRequest;
type index_d$i_UpdateCheckoutTemplateResponse = UpdateCheckoutTemplateResponse;
type index_d$i_UpdateCheckoutTemplateResponseNonNullableFields = UpdateCheckoutTemplateResponseNonNullableFields;
type index_d$i_V1LineItem = V1LineItem;
type index_d$i_Violation = Violation;
type index_d$i_WebClientCustomization = WebClientCustomization;
type index_d$i__publicOnCheckoutTemplateCreatedType = _publicOnCheckoutTemplateCreatedType;
type index_d$i__publicOnCheckoutTemplateDeletedType = _publicOnCheckoutTemplateDeletedType;
type index_d$i__publicOnCheckoutTemplateUpdatedType = _publicOnCheckoutTemplateUpdatedType;
type index_d$i__publicOnCheckoutTemplateUsedType = _publicOnCheckoutTemplateUsedType;
declare const index_d$i_createAndRedirectToCheckout: typeof createAndRedirectToCheckout;
declare const index_d$i_createCheckoutFromTemplate: typeof createCheckoutFromTemplate;
declare const index_d$i_createCheckoutTemplate: typeof createCheckoutTemplate;
declare const index_d$i_deleteCheckoutTemplate: typeof deleteCheckoutTemplate;
declare const index_d$i_getCheckoutTemplate: typeof getCheckoutTemplate;
declare const index_d$i_onCheckoutTemplateCreated: typeof onCheckoutTemplateCreated;
declare const index_d$i_onCheckoutTemplateDeleted: typeof onCheckoutTemplateDeleted;
declare const index_d$i_onCheckoutTemplateUpdated: typeof onCheckoutTemplateUpdated;
declare const index_d$i_onCheckoutTemplateUsed: typeof onCheckoutTemplateUsed;
declare const index_d$i_queryCheckoutTemplates: typeof queryCheckoutTemplates;
declare const index_d$i_updateCheckoutTemplate: typeof updateCheckoutTemplate;
declare namespace index_d$i {
  export { type ActionEvent$e as ActionEvent, type AdditionalFee$3 as AdditionalFee, type Address$7 as Address, type AddressLocation$6 as AddressLocation, type AddressWithContact$2 as AddressWithContact, type AggregatedTaxBreakdown$1 as AggregatedTaxBreakdown, type ApplicationError$8 as ApplicationError, type AppliedDiscount$3 as AppliedDiscount, type AppliedDiscountDiscountSourceOneOf$3 as AppliedDiscountDiscountSourceOneOf, type AutoTaxFallbackCalculationDetails$1 as AutoTaxFallbackCalculationDetails, type BaseEventMetadata$6 as BaseEventMetadata, type BuyerInfo$4 as BuyerInfo, type BuyerInfoIdOneOf$2 as BuyerInfoIdOneOf, type CalculationErrors$2 as CalculationErrors, type CalculationErrorsShippingCalculationErrorOneOf$2 as CalculationErrorsShippingCalculationErrorOneOf, type CarrierError$3 as CarrierError, type CarrierErrors$2 as CarrierErrors, type CarrierServiceOption$1 as CarrierServiceOption, type index_d$i_CatalogOverrideFields as CatalogOverrideFields, type CatalogReference$5 as CatalogReference, ChannelType$3 as ChannelType, ChargeType$3 as ChargeType, type index_d$i_Checkout as Checkout, type index_d$i_CheckoutCustomization as CheckoutCustomization, type index_d$i_CheckoutTemplate as CheckoutTemplate, type index_d$i_CheckoutTemplateCreatedEnvelope as CheckoutTemplateCreatedEnvelope, type index_d$i_CheckoutTemplateDeletedEnvelope as CheckoutTemplateDeletedEnvelope, type index_d$i_CheckoutTemplateNonNullableFields as CheckoutTemplateNonNullableFields, type index_d$i_CheckoutTemplateUpdatedEnvelope as CheckoutTemplateUpdatedEnvelope, type index_d$i_CheckoutTemplateUsed as CheckoutTemplateUsed, type index_d$i_CheckoutTemplateUsedEnvelope as CheckoutTemplateUsedEnvelope, type index_d$i_CheckoutTemplatesQueryBuilder as CheckoutTemplatesQueryBuilder, type index_d$i_CheckoutTemplatesQueryResult as CheckoutTemplatesQueryResult, type Color$2 as Color, type index_d$i_ConversionInfo as ConversionInfo, type Coupon$3 as Coupon, type index_d$i_CreateAndRedirectToCheckoutRequest as CreateAndRedirectToCheckoutRequest, type index_d$i_CreateCheckoutFromTemplateRequest as CreateCheckoutFromTemplateRequest, type index_d$i_CreateCheckoutFromTemplateResponse as CreateCheckoutFromTemplateResponse, type index_d$i_CreateCheckoutFromTemplateResponseNonNullableFields as CreateCheckoutFromTemplateResponseNonNullableFields, type index_d$i_CreateCheckoutTemplateRequest as CreateCheckoutTemplateRequest, type index_d$i_CreateCheckoutTemplateResponse as CreateCheckoutTemplateResponse, type index_d$i_CreateCheckoutTemplateResponseNonNullableFields as CreateCheckoutTemplateResponseNonNullableFields, type CreatedBy$2 as CreatedBy, type index_d$i_CreatedByIdOneOf as CreatedByIdOneOf, type CursorPaging$b as CursorPaging, type CursorPagingMetadata$a as CursorPagingMetadata, type CursorQuery$7 as CursorQuery, type CursorQueryPagingMethodOneOf$7 as CursorQueryPagingMethodOneOf, type Cursors$b as Cursors, type index_d$i_CustomContentReference as CustomContentReference, type CustomField$3 as CustomField, type CustomLineItem$1 as CustomLineItem, type index_d$i_CustomSettings as CustomSettings, type index_d$i_DeleteCheckoutTemplateRequest as DeleteCheckoutTemplateRequest, type index_d$i_DeleteCheckoutTemplateResponse as DeleteCheckoutTemplateResponse, type DeliveryLogistics$4 as DeliveryLogistics, type DeliveryTimeSlot$4 as DeliveryTimeSlot, type index_d$i_Description as Description, type DescriptionLine$2 as DescriptionLine, type DescriptionLineDescriptionLineValueOneOf$2 as DescriptionLineDescriptionLineValueOneOf, type DescriptionLineName$2 as DescriptionLineName, DescriptionLineType$2 as DescriptionLineType, type DescriptionLineValueOneOf$2 as DescriptionLineValueOneOf, type Details$3 as Details, type DetailsKindOneOf$3 as DetailsKindOneOf, type DiscountRule$3 as DiscountRule, type DiscountRuleName$3 as DiscountRuleName, DiscountType$3 as DiscountType, type DomainEvent$e as DomainEvent, type DomainEventBodyOneOf$e as DomainEventBodyOneOf, type EntityCreatedEvent$e as EntityCreatedEvent, type EntityDeletedEvent$e as EntityDeletedEvent, type EntityUpdatedEvent$e as EntityUpdatedEvent, type EventMetadata$6 as EventMetadata, type ExtendedFields$7 as ExtendedFields, type ExternalReference$1 as ExternalReference, FallbackReason$1 as FallbackReason, type FieldViolation$3 as FieldViolation, FileType$1 as FileType, type index_d$i_FreeTrialPeriod as FreeTrialPeriod, type FullAddressContactDetails$3 as FullAddressContactDetails, type index_d$i_GetCheckoutTemplateRequest as GetCheckoutTemplateRequest, type index_d$i_GetCheckoutTemplateResponse as GetCheckoutTemplateResponse, type index_d$i_GetCheckoutTemplateResponseNonNullableFields as GetCheckoutTemplateResponseNonNullableFields, type GiftCard$3 as GiftCard, type Group$1 as Group, type index_d$i_HeadersEntry as HeadersEntry, type IdentificationData$e as IdentificationData, type IdentificationDataIdOneOf$e as IdentificationDataIdOneOf, type InvalidMembership$1 as InvalidMembership, type index_d$i_ItemAvailabilityInfo as ItemAvailabilityInfo, index_d$i_ItemAvailabilityStatus as ItemAvailabilityStatus, type ItemTaxFullDetails$3 as ItemTaxFullDetails, type ItemType$3 as ItemType, ItemTypeItemType$3 as ItemTypeItemType, type ItemTypeItemTypeDataOneOf$3 as ItemTypeItemTypeDataOneOf, JurisdictionType$3 as JurisdictionType, type LineItem$3 as LineItem, type LineItemDiscount$3 as LineItemDiscount, ManualCalculationReason$1 as ManualCalculationReason, type Membership$1 as Membership, type MembershipName$3 as MembershipName, type MembershipOptions$1 as MembershipOptions, type MembershipPaymentCredits$1 as MembershipPaymentCredits, type MerchantDiscount$3 as MerchantDiscount, type MessageEnvelope$d as MessageEnvelope, type MultiCurrencyPrice$1 as MultiCurrencyPrice, index_d$i_NameInLineItem as NameInLineItem, index_d$i_NameInOther as NameInOther, type index_d$i_Other as Other, type OtherCharge$1 as OtherCharge, type index_d$i_PaymentOption as PaymentOption, PaymentOptionType$3 as PaymentOptionType, type PhysicalProperties$4 as PhysicalProperties, type PickupDetails$5 as PickupDetails, PickupMethod$4 as PickupMethod, type PlainTextValue$2 as PlainTextValue, type index_d$i_Policy as Policy, type PriceDescription$2 as PriceDescription, type PriceSummary$3 as PriceSummary, type ProductName$2 as ProductName, type index_d$i_QueryCheckoutTemplatesRequest as QueryCheckoutTemplatesRequest, type index_d$i_QueryCheckoutTemplatesResponse as QueryCheckoutTemplatesResponse, type index_d$i_QueryCheckoutTemplatesResponseNonNullableFields as QueryCheckoutTemplatesResponseNonNullableFields, RateType$1 as RateType, type index_d$i_RawHttpResponse as RawHttpResponse, type index_d$i_RawHttpResponseNonNullableFields as RawHttpResponseNonNullableFields, type RestoreInfo$e as RestoreInfo, RuleType$3 as RuleType, type Scope$1 as Scope, type SecuredMedia$1 as SecuredMedia, type SelectedCarrierServiceOption$1 as SelectedCarrierServiceOption, type SelectedCarrierServiceOptionOtherCharge$1 as SelectedCarrierServiceOptionOtherCharge, type SelectedCarrierServiceOptionPrices$1 as SelectedCarrierServiceOptionPrices, type SelectedMembership$1 as SelectedMembership, type SelectedMemberships$1 as SelectedMemberships, type ServiceProperties$2 as ServiceProperties, index_d$i_Severity as Severity, type ShippingInfo$1 as ShippingInfo, type ShippingOption$3 as ShippingOption, type ShippingPrice$3 as ShippingPrice, type ShippingRegion$3 as ShippingRegion, SortOrder$b as SortOrder, type Sorting$b as Sorting, Status$2 as Status, type StreetAddress$6 as StreetAddress, SubscriptionFrequency$4 as SubscriptionFrequency, type SubscriptionOptionInfo$1 as SubscriptionOptionInfo, type SubscriptionSettings$4 as SubscriptionSettings, index_d$i_SuggestedFix as SuggestedFix, type SystemError$3 as SystemError, type index_d$i_Target as Target, type index_d$i_TargetLineItem as TargetLineItem, type index_d$i_TargetTargetTypeOneOf as TargetTargetTypeOneOf, type TaxBreakdown$1 as TaxBreakdown, type TaxCalculationDetails$1 as TaxCalculationDetails, type TaxCalculationDetailsCalculationDetailsOneOf$1 as TaxCalculationDetailsCalculationDetailsOneOf, type TaxRateBreakdown$1 as TaxRateBreakdown, type TaxSummary$3 as TaxSummary, type TaxableAddress$3 as TaxableAddress, type TaxableAddressTaxableAddressDataOneOf$3 as TaxableAddressTaxableAddressDataOneOf, TaxableAddressType$3 as TaxableAddressType, type index_d$i_Title as Title, type index_d$i_UpdateCheckoutTemplate as UpdateCheckoutTemplate, type index_d$i_UpdateCheckoutTemplateRequest as UpdateCheckoutTemplateRequest, type index_d$i_UpdateCheckoutTemplateResponse as UpdateCheckoutTemplateResponse, type index_d$i_UpdateCheckoutTemplateResponseNonNullableFields as UpdateCheckoutTemplateResponseNonNullableFields, type index_d$i_V1LineItem as V1LineItem, type ValidationError$3 as ValidationError, type VatId$4 as VatId, VatType$4 as VatType, type index_d$i_Violation as Violation, type index_d$i_WebClientCustomization as WebClientCustomization, WebhookIdentityType$d as WebhookIdentityType, WeightUnit$5 as WeightUnit, type index_d$i__publicOnCheckoutTemplateCreatedType as _publicOnCheckoutTemplateCreatedType, type index_d$i__publicOnCheckoutTemplateDeletedType as _publicOnCheckoutTemplateDeletedType, type index_d$i__publicOnCheckoutTemplateUpdatedType as _publicOnCheckoutTemplateUpdatedType, type index_d$i__publicOnCheckoutTemplateUsedType as _publicOnCheckoutTemplateUsedType, index_d$i_createAndRedirectToCheckout as createAndRedirectToCheckout, index_d$i_createCheckoutFromTemplate as createCheckoutFromTemplate, index_d$i_createCheckoutTemplate as createCheckoutTemplate, index_d$i_deleteCheckoutTemplate as deleteCheckoutTemplate, index_d$i_getCheckoutTemplate as getCheckoutTemplate, index_d$i_onCheckoutTemplateCreated as onCheckoutTemplateCreated, index_d$i_onCheckoutTemplateDeleted as onCheckoutTemplateDeleted, index_d$i_onCheckoutTemplateUpdated as onCheckoutTemplateUpdated, index_d$i_onCheckoutTemplateUsed as onCheckoutTemplateUsed, onCheckoutTemplateCreated$1 as publicOnCheckoutTemplateCreated, onCheckoutTemplateDeleted$1 as publicOnCheckoutTemplateDeleted, onCheckoutTemplateUpdated$1 as publicOnCheckoutTemplateUpdated, onCheckoutTemplateUsed$1 as publicOnCheckoutTemplateUsed, index_d$i_queryCheckoutTemplates as queryCheckoutTemplates, index_d$i_updateCheckoutTemplate as updateCheckoutTemplate };
}

/**
 * A DeliveryProfile is a ...
 * You can ...
 * Read more about DeliveryProfiles
 * in this [article](<LINK_TO_KB_ARTICLE>).
 */
interface DeliveryProfile {
    /**
     * DeliveryProfile ID.
     * @readonly
     */
    _id?: string | null;
    /** DeliveryProfile name. */
    name?: string | null;
    /**
     * Indicates that this DeliveryProfile is the default DeliveryProfile.
     * @readonly
     */
    default?: boolean | null;
    /** A list of DeliveryProfile regions. */
    deliveryRegions?: DeliveryRegion[];
    /**
     * DeliveryProfile revision.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the DeliveryProfile was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the DeliveryProfile was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Extended fields. */
    extendedFields?: ExtendedFields$6;
}
/** DeliveryRegion can be used to config a Delivery Destinations with its providers */
interface DeliveryRegion {
    /**
     * The delivery region id.
     * @readonly
     */
    _id?: string | null;
    /** Optional name of the rule, for example: "Domestic". */
    name?: string | null;
    /** Indicates that this rule is active, default value is true. */
    active?: boolean | null;
    /**
     * The spi implementers id of shipping-rates spi, assigned to this rule.
     * @readonly
     */
    deliveryCarriers?: DeliveryCarrier[];
    /** The operation region of this rule, if empty than it is global. */
    destinations?: Destination$1[];
    /**
     * Represents the time this Profile was created
     * @readonly
     */
    _createdDate?: Date | null;
}
interface DeliveryCarrier {
    /** AppDefId of the provider as it is registered in the [app dashboard](https://dev.wix.com/dc3/my-apps/). Can be fetched by listDeliveryProvider api. */
    appId?: string;
    /** Backup rate to be used in case the cost returned by the provider is empty. */
    backupRate?: BackupRate;
    /** Additional charges to add to the delivery rate for this carrier */
    additionalCharges?: AdditionalCharge$1[];
}
interface BackupRate {
    /** Default rate prefix that will concatenate to the delivery options the provider will offer. */
    prefix?: string | null;
    /** Default rate price for all delivery options that the provider will offer. */
    rate?: string | null;
    /** Should the default rate be used. Default value is false. */
    enabled?: boolean | null;
}
interface AdditionalCharge$1 {
    /** Additional charge type. */
    type?: ChargeType$2;
    /** Description of the additional charge. For example, `"Handling fee of $5 applied for gift wrapping"`. */
    description?: string | null;
    /** Cost of additional charge. For example, `12.5`. */
    price?: string;
}
declare enum ChargeType$2 {
    HANDLING_FEE = "HANDLING_FEE"
}
/** Defines the area inside one country that is relevant for this rule. */
interface Destination$1 {
    /** 2-letters code represents the country of the delivery destinations */
    countryCode?: string;
    /**
     * subdivisions - Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2).
     * If empty, the rule applies to the entire country.
     */
    subdivisions?: string[];
}
interface ExtendedFields$6 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateDeliveryProfileRequest {
    /** DeliveryProfile to be created. */
    deliveryProfile: DeliveryProfile;
}
interface CreateDeliveryProfileResponse {
    /** The created DeliveryProfile. */
    deliveryProfile?: DeliveryProfile;
}
interface DeliveryRegionAdded {
    /** The DeliveryProfile owns this region. */
    deliveryProfileId?: string;
    /**
     * The delivery region id.
     * @readonly
     */
    deliveryRegionId?: string | null;
    /** Optional name of the rule, for example: "Domestic". */
    name?: string | null;
    /** Indicates that this rule is active, default value is true. */
    active?: boolean | null;
    /**
     * The spi implementers id of shipping-rates spi, assigned to this rule.
     * @readonly
     */
    deliveryCarriers?: DeliveryCarrier[];
    /** The operation region of this rule, if empty than it is global. */
    destinations?: Destination$1[];
    /**
     * Represents the time this Profile was created
     * @readonly
     */
    _createdDate?: Date | null;
}
interface GetDeliveryProfileRequest {
    /** ID of the DeliveryProfile to retrieve. */
    deliveryProfileId: string;
}
interface GetDeliveryProfileResponse {
    /** The requested DeliveryProfile. */
    deliveryProfile?: DeliveryProfile;
}
interface UpdateDeliveryProfileRequest {
    /** DeliveryProfile to be updated, may be partial. */
    deliveryProfile: DeliveryProfile;
}
interface UpdateDeliveryProfileResponse {
    /** Updated DeliveryProfile. */
    deliveryProfile?: DeliveryProfile;
}
interface DeleteDeliveryProfileRequest {
    /** Id of the DeliveryProfile to delete. */
    deliveryProfileId: string;
}
interface DeleteDeliveryProfileResponse {
}
interface DeliveryRegionRemoved {
    /** The DeliveryProfile owns this region. */
    deliveryProfileId?: string;
    /** The removed DeliveryRegion id. */
    deliveryRegionId?: string;
}
interface QueryDeliveryProfilesRequest {
    /** WQL expression. */
    query?: CursorQuery$6;
}
interface CursorQuery$6 extends CursorQueryPagingMethodOneOf$6 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$a;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$a[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$6 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$a;
}
interface Sorting$a {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$a;
}
declare enum SortOrder$a {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$a {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryDeliveryProfilesResponse {
    /** List of DeliveryProfiles. */
    deliveryProfiles?: DeliveryProfile[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$9;
}
interface CursorPagingMetadata$9 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$a;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$a {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface AddDeliveryRegionRequest$2 {
    /** delivery profile id to associated with the DeliveryRegion */
    deliveryProfileId: string;
    /** DeliveryRegion to be created */
    deliveryRegion: DeliveryRegion;
    /**
     * DeliveryProfile revision.
     * @readonly
     */
    revision?: string | null;
}
interface AddDeliveryRegionResponse$2 {
    /** The updated DeliveryProfile with the new DeliveryRegion */
    deliveryProfile?: DeliveryProfile;
}
interface UpdateDeliveryRegionRequest {
    /** DeliveryProfile id that owns the DeliveryRegion */
    deliveryProfileId: string;
    /** DeliveryRegion to be updated, may be partial */
    deliveryRegion: DeliveryRegion;
    /**
     * DeliveryProfile revision.
     * @readonly
     */
    revision?: string | null;
}
interface UpdateDeliveryRegionResponse {
    /** The updated DeliveryProfile with the updated DeliveryRegion */
    deliveryProfile?: DeliveryProfile;
}
interface DeliveryRegionUpdated {
    /** The DeliveryProfile owns this DeliveryRegion. */
    deliveryProfileId?: string;
    /**
     * The delivery region id.
     * @readonly
     */
    deliveryRegionId?: string | null;
    /** Optional name of the rule, for example: "Domestic". */
    name?: string | null;
    /** Indicates that this rule is active, default value is true. */
    active?: boolean | null;
    /**
     * The spi implementers id of shipping-rates spi, assigned to this rule.
     * @readonly
     */
    deliveryCarriers?: DeliveryCarrier[];
    /** The operation region of this rule, if empty than it is global. */
    destinations?: Destination$1[];
    /**
     * Represents the time this Profile was created
     * @readonly
     */
    _createdDate?: Date | null;
}
interface RemoveDeliveryRegionRequest$2 {
    /** DeliveryProfile id that owns the DeliveryRegion */
    deliveryProfileId: string;
    /** Id of the DeliveryRegion to delete */
    deliveryRegionId: string;
    /**
     * DeliveryProfile revision.
     * @readonly
     */
    revision?: string | null;
}
interface RemoveDeliveryRegionResponse$2 {
    /** The updated DeliveryProfile without DeliveryRegion */
    deliveryProfile?: DeliveryProfile;
}
interface AddDeliveryCarrierRequest {
    /** delivery_region id to associated with the delivery_carrier. */
    deliveryRegionId: string;
    /** delivery_carrier to be added. */
    deliveryCarrier: DeliveryCarrier;
}
interface AddDeliveryCarrierResponse {
    /** The updated DeliveryProfile */
    deliveryProfile?: DeliveryProfile;
}
interface RemoveDeliveryCarrierRequest {
    /** Id of the DeliveryRegion */
    deliveryRegionId: string;
    /** DeliveryCarrier app id to be removed. */
    appId: string;
}
interface RemoveDeliveryCarrierResponse {
    /** The updated DeliveryProfile */
    deliveryProfile?: DeliveryProfile;
}
interface UpdateDeliveryCarrierRequest {
    /** DeliveryRegion id */
    deliveryRegionId: string;
    /** Updated delivery_carrier */
    deliveryCarrier?: DeliveryCarrier;
}
interface UpdateDeliveryCarrierResponse {
    /** The updated DeliveryProfile with the updated DeliveryCarrier */
    deliveryProfile?: DeliveryProfile;
}
interface ListDeliveryCarrierDetailsRequest {
}
interface ListDeliveryCarrierDetailsResponse {
    /** The list of carrier or multi-carrier services that has implemented the spi and installed on the current context(site) */
    deliveryCarrierDetails?: DeliveryCarrierDetails[];
}
interface DeliveryCarrierDetails {
    /** The id of the provider. */
    _id?: string;
    /** The name of the Provider. */
    displayName?: string;
    /** Provider's description. */
    description?: string | null;
    /** A link to learn more about the provider. */
    learnMoreUrl?: string | null;
    /** Dashboard URL for the provider. */
    dashboardUrl?: string | null;
    /** If the provider fallback definition is mandatory. */
    fallbackDefinitionMandatory?: boolean | null;
    /** Thumbnail image for provider. */
    thumbnailUrl?: string | null;
    /** feature toggle initialized with default value = false. should be true if implemented by spi provider */
    toggleGetCarrierSettingsEnabled?: boolean;
}
interface ListDeliveryCarriersRequest {
    /** Delivery profile id. */
    deliveryProfileId: string;
    /** Delivery app ids to get settings for. */
    appIds?: string[];
}
interface ListDeliveryCarriersResponse {
    /** The list of delivery settings for the given requests */
    results?: ListDeliveryCarriersResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$3;
}
interface ListDeliveryCarriersResult {
    /** Information about successful action or error for failure. */
    deliveryCarrierMetadata?: ItemMetadata$3;
    /** The delivery carrier details */
    deliveryCarrierDetails?: DeliveryCarrierDetails;
    /** The delivery settings for the delivery profile and delivery region. */
    deliveryCarrierRegionalSettings?: DeliveryCarrierRegionalSettings[];
}
interface ItemMetadata$3 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$7;
}
interface ApplicationError$7 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface DeliveryCarrierRegionalSettings {
    /** The delivery rule id. */
    deliveryRegionId?: string;
    /** The shipping table values that are associated with the delivery rule. Can be multiple if the provider is an aggregator of multiple carriers. */
    dashboardTables?: DashboardTable[];
}
interface DashboardTable {
    /** The title of the delivery settings that will be displayed in the UI. */
    title?: string;
    /** The columns of the delivery settings that will be displayed in the UI. */
    columns?: Column[];
    /** The content of the delivery settings. Each row is a map of column name to value. */
    rows?: Row[];
}
interface Column {
    /** The name of the column. This is used to get the data from the row. */
    key?: string;
    /** The title of the column that will be displayed in the UI. */
    name?: string;
}
interface Row {
    /** The external key of the data presented in a row. This is used to identify the row in the UI for editing. */
    key?: string;
    /**
     * The data presented in the row. The key is the column `name` and the value is the data in the specific row and column.
     * Data will be in JSON format.
     */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$3 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface UpdateExtendedFieldsRequest$4 {
    /** ID of the entity to update. */
    _id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse$4 {
    /** Updated DeliveryProfile. */
    deliveryProfile?: DeliveryProfile;
}
interface MetaSiteSpecialEvent extends MetaSiteSpecialEventPayloadOneOf {
    /** Emitted on a meta site creation. */
    siteCreated?: SiteCreated;
    /** Emitted on a meta site transfer completion. */
    siteTransferred?: SiteTransferred;
    /** Emitted on a meta site deletion. */
    siteDeleted?: SiteDeleted;
    /** Emitted on a meta site restoration. */
    siteUndeleted?: SiteUndeleted;
    /** Emitted on the first* publish of the meta site (* switching from unpublished to published state). */
    sitePublished?: SitePublished;
    /** Emitted on a meta site unpublish. */
    siteUnpublished?: SiteUnpublished;
    /** Emitted when meta site is marked as template. */
    siteMarkedAsTemplate?: SiteMarkedAsTemplate;
    /** Emitted when meta site is marked as a WixSite. */
    siteMarkedAsWixSite?: SiteMarkedAsWixSite;
    /** Emitted when an application is provisioned (installed). */
    serviceProvisioned?: ServiceProvisioned;
    /** Emitted when an application is removed (uninstalled). */
    serviceRemoved?: ServiceRemoved;
    /** Emitted when meta site name (URL slug) is changed. */
    siteRenamedPayload?: SiteRenamed;
    /** Emitted when meta site was permanently deleted. */
    hardDeleted?: SiteHardDeleted;
    /** Emitted on a namespace change. */
    namespaceChanged?: NamespaceChanged;
    /** Emitted when Studio is attached. */
    studioAssigned?: StudioAssigned;
    /** Emitted when Studio is detached. */
    studioUnassigned?: StudioUnassigned;
    /** A meta site id. */
    metaSiteId?: string;
    /** A meta site version. Monotonically increasing. */
    version?: string;
    /** A timestamp of the event. */
    timestamp?: string;
    /**
     * TODO(meta-site): Change validation once validations are disabled for consumers
     * More context: https://wix.slack.com/archives/C0UHEBPFT/p1720957844413149 and https://wix.slack.com/archives/CFWKX325T/p1728892152855659
     */
    assets?: Asset[];
}
/** @oneof */
interface MetaSiteSpecialEventPayloadOneOf {
    /** Emitted on a meta site creation. */
    siteCreated?: SiteCreated;
    /** Emitted on a meta site transfer completion. */
    siteTransferred?: SiteTransferred;
    /** Emitted on a meta site deletion. */
    siteDeleted?: SiteDeleted;
    /** Emitted on a meta site restoration. */
    siteUndeleted?: SiteUndeleted;
    /** Emitted on the first* publish of the meta site (* switching from unpublished to published state). */
    sitePublished?: SitePublished;
    /** Emitted on a meta site unpublish. */
    siteUnpublished?: SiteUnpublished;
    /** Emitted when meta site is marked as template. */
    siteMarkedAsTemplate?: SiteMarkedAsTemplate;
    /** Emitted when meta site is marked as a WixSite. */
    siteMarkedAsWixSite?: SiteMarkedAsWixSite;
    /** Emitted when an application is provisioned (installed). */
    serviceProvisioned?: ServiceProvisioned;
    /** Emitted when an application is removed (uninstalled). */
    serviceRemoved?: ServiceRemoved;
    /** Emitted when meta site name (URL slug) is changed. */
    siteRenamedPayload?: SiteRenamed;
    /** Emitted when meta site was permanently deleted. */
    hardDeleted?: SiteHardDeleted;
    /** Emitted on a namespace change. */
    namespaceChanged?: NamespaceChanged;
    /** Emitted when Studio is attached. */
    studioAssigned?: StudioAssigned;
    /** Emitted when Studio is detached. */
    studioUnassigned?: StudioUnassigned;
}
interface Asset {
    /** An application definition id (app_id in dev-center). For legacy reasons may be UUID or a string (from Java Enum). */
    appDefId?: string;
    /** An instance id. For legacy reasons may be UUID or a string. */
    instanceId?: string;
    /** An application state. */
    state?: State$1;
}
declare enum State$1 {
    UNKNOWN = "UNKNOWN",
    ENABLED = "ENABLED",
    DISABLED = "DISABLED",
    PENDING = "PENDING",
    DEMO = "DEMO"
}
interface SiteCreated {
    /** A template identifier (empty if not created from a template). */
    originTemplateId?: string;
    /** An account id of the owner. */
    ownerId?: string;
    /** A context in which meta site was created. */
    context?: SiteCreatedContext;
    /**
     * A meta site id from which this site was created.
     *
     * In case of a creation from a template it's a template id.
     * In case of a site duplication ("Save As" in dashboard or duplicate in UM) it's an id of a source site.
     */
    originMetaSiteId?: string | null;
    /** A meta site name (URL slug). */
    siteName?: string;
    /** A namespace. */
    namespace?: Namespace$1;
}
declare enum SiteCreatedContext {
    /** A valid option, we don't expose all reasons why site might be created. */
    OTHER = "OTHER",
    /** A meta site was created from template. */
    FROM_TEMPLATE = "FROM_TEMPLATE",
    /** A meta site was created by copying of the transfferred meta site. */
    DUPLICATE_BY_SITE_TRANSFER = "DUPLICATE_BY_SITE_TRANSFER",
    /** A copy of existing meta site. */
    DUPLICATE = "DUPLICATE",
    /** A meta site was created as a transfferred site (copy of the original), old flow, should die soon. */
    OLD_SITE_TRANSFER = "OLD_SITE_TRANSFER",
    /** deprecated A meta site was created for Flash editor. */
    FLASH = "FLASH"
}
declare enum Namespace$1 {
    UNKNOWN_NAMESPACE = "UNKNOWN_NAMESPACE",
    /** Default namespace for UGC sites. MetaSites with this namespace will be shown in a user's site list by default. */
    WIX = "WIX",
    /** ShoutOut stand alone product. These are siteless (no actual Wix site, no HtmlWeb). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    SHOUT_OUT = "SHOUT_OUT",
    /** MetaSites created by the Albums product, they appear as part of the Albums app. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    ALBUMS = "ALBUMS",
    /** Part of the WixStores migration flow, a user tries to migrate and gets this site to view and if the user likes it then stores removes this namespace and deletes the old site with the old stores. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    WIX_STORES_TEST_DRIVE = "WIX_STORES_TEST_DRIVE",
    /** Hotels standalone (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    HOTELS = "HOTELS",
    /** Clubs siteless MetaSites, a club without a wix website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    CLUBS = "CLUBS",
    /** A partially created ADI website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    ONBOARDING_DRAFT = "ONBOARDING_DRAFT",
    /** AppBuilder for AppStudio / shmite (c). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    DEV_SITE = "DEV_SITE",
    /** LogoMaker websites offered to the user after logo purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    LOGOS = "LOGOS",
    /** VideoMaker websites offered to the user after video purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    VIDEO_MAKER = "VIDEO_MAKER",
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    PARTNER_DASHBOARD = "PARTNER_DASHBOARD",
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    DEV_CENTER_COMPANY = "DEV_CENTER_COMPANY",
    /**
     * A draft created by HTML editor on open. Upon "first save" it will be moved to be of WIX domain.
     *
     * Meta site with this namespace will *not* be shown in a user's site list by default.
     */
    HTML_DRAFT = "HTML_DRAFT",
    /**
     * the user-journey for Fitness users who want to start from managing their business instead of designing their website.
     * Will be accessible from Site List and will not have a website app.
     * Once the user attaches a site, the site will become a regular wixsite.
     */
    SITELESS_BUSINESS = "SITELESS_BUSINESS",
    /** Belongs to "strategic products" company. Supports new product in the creator's economy space. */
    CREATOR_ECONOMY = "CREATOR_ECONOMY",
    /** It is to be used in the Business First efforts. */
    DASHBOARD_FIRST = "DASHBOARD_FIRST",
    /** Bookings business flow with no site. */
    ANYWHERE = "ANYWHERE",
    /** Namespace for Headless Backoffice with no editor */
    HEADLESS = "HEADLESS",
    /**
     * Namespace for master site that will exist in parent account that will be referenced by subaccounts
     * The site will be used for account level CSM feature for enterprise
     */
    ACCOUNT_MASTER_CMS = "ACCOUNT_MASTER_CMS",
    /** Rise.ai Siteless account management for Gift Cards and Store Credit. */
    RISE = "RISE",
    /**
     * As part of the branded app new funnel, users now can create a meta site that will be branded app first.
     * There's a blank site behind the scene but it's blank).
     * The Mobile company will be the owner of this namespace.
     */
    BRANDED_FIRST = "BRANDED_FIRST",
    /** Nownia.com Siteless account management for Ai Scheduling Assistant. */
    NOWNIA = "NOWNIA",
    /**
     * UGC Templates are templates that are created by users for personal use and to sale to other users.
     * The Partners company owns this namespace.
     */
    UGC_TEMPLATE = "UGC_TEMPLATE",
    /** Codux Headless Sites */
    CODUX = "CODUX"
}
/** Site transferred to another user. */
interface SiteTransferred {
    /** A previous owner id (user that transfers meta site). */
    oldOwnerId?: string;
    /** A new owner id (user that accepts meta site). */
    newOwnerId?: string;
}
/** Soft deletion of the meta site. Could be restored. */
interface SiteDeleted {
    /** A deletion context. */
    deleteContext?: DeleteContext;
}
interface DeleteContext {
    /** When the meta site was deleted. */
    dateDeleted?: Date | null;
    /** A status. */
    deleteStatus?: DeleteStatus;
    /** A reason (flow). */
    deleteOrigin?: string;
    /** A service that deleted it. */
    initiatorId?: string | null;
}
declare enum DeleteStatus {
    UNKNOWN = "UNKNOWN",
    TRASH = "TRASH",
    DELETED = "DELETED",
    PENDING_PURGE = "PENDING_PURGE"
}
/** Restoration of the meta site. */
interface SiteUndeleted {
}
/** First publish of a meta site. Or subsequent publish after unpublish. */
interface SitePublished {
}
interface SiteUnpublished {
    /** A list of URLs previously associated with the meta site. */
    urls?: string[];
}
interface SiteMarkedAsTemplate {
}
interface SiteMarkedAsWixSite {
}
interface ServiceProvisioned {
    /** Either UUID or EmbeddedServiceType. */
    appDefId?: string;
    /** Not only UUID. Something here could be something weird. */
    instanceId?: string;
    /** An instance id from which this instance is originated. */
    originInstanceId?: string;
    /** A version. */
    version?: string | null;
    /** The origin meta site id */
    originMetaSiteId?: string | null;
}
interface ServiceRemoved {
    /** Either UUID or EmbeddedServiceType. */
    appDefId?: string;
    /** Not only UUID. Something here could be something weird. */
    instanceId?: string;
    /** A version. */
    version?: string | null;
}
/** Rename of the site. Meaning, free public url has been changed as well. */
interface SiteRenamed {
    /** A new meta site name (URL slug). */
    newSiteName?: string;
    /** A previous meta site name (URL slug). */
    oldSiteName?: string;
}
/**
 * Hard deletion of the meta site.
 *
 * Could not be restored. Therefore it's desirable to cleanup data.
 */
interface SiteHardDeleted {
    /** A deletion context. */
    deleteContext?: DeleteContext;
}
interface NamespaceChanged {
    /** A previous namespace. */
    oldNamespace?: Namespace$1;
    /** A new namespace. */
    newNamespace?: Namespace$1;
}
/** Assigned Studio editor */
interface StudioAssigned {
}
/** Unassigned Studio editor */
interface StudioUnassigned {
}
interface Empty$7 {
}
interface DomainEvent$d extends DomainEventBodyOneOf$d {
    createdEvent?: EntityCreatedEvent$d;
    updatedEvent?: EntityUpdatedEvent$d;
    deletedEvent?: EntityDeletedEvent$d;
    actionEvent?: ActionEvent$d;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$d {
    createdEvent?: EntityCreatedEvent$d;
    updatedEvent?: EntityUpdatedEvent$d;
    deletedEvent?: EntityDeletedEvent$d;
    actionEvent?: ActionEvent$d;
}
interface EntityCreatedEvent$d {
    entity?: string;
}
interface RestoreInfo$d {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$d {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$d {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$d {
    body?: string;
}
interface MessageEnvelope$c {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$d;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$d extends IdentificationDataIdOneOf$d {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$c;
}
/** @oneof */
interface IdentificationDataIdOneOf$d {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$c {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface AdditionalChargeNonNullableFields$1 {
    type: ChargeType$2;
    price: string;
}
interface DeliveryCarrierNonNullableFields {
    appId: string;
    additionalCharges: AdditionalChargeNonNullableFields$1[];
}
interface DestinationNonNullableFields$1 {
    countryCode: string;
    subdivisions: string[];
}
interface DeliveryRegionNonNullableFields {
    deliveryCarriers: DeliveryCarrierNonNullableFields[];
    destinations: DestinationNonNullableFields$1[];
}
interface DeliveryProfileNonNullableFields {
    deliveryRegions: DeliveryRegionNonNullableFields[];
}
interface CreateDeliveryProfileResponseNonNullableFields {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface GetDeliveryProfileResponseNonNullableFields {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface UpdateDeliveryProfileResponseNonNullableFields {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface QueryDeliveryProfilesResponseNonNullableFields {
    deliveryProfiles: DeliveryProfileNonNullableFields[];
}
interface AddDeliveryRegionResponseNonNullableFields$2 {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface UpdateDeliveryRegionResponseNonNullableFields {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface RemoveDeliveryRegionResponseNonNullableFields$2 {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface AddDeliveryCarrierResponseNonNullableFields {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface RemoveDeliveryCarrierResponseNonNullableFields {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface UpdateDeliveryCarrierResponseNonNullableFields {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface DeliveryCarrierDetailsNonNullableFields {
    _id: string;
    displayName: string;
    toggleGetCarrierSettingsEnabled: boolean;
}
interface ListDeliveryCarrierDetailsResponseNonNullableFields {
    deliveryCarrierDetails: DeliveryCarrierDetailsNonNullableFields[];
}
interface ApplicationErrorNonNullableFields$7 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$3 {
    success: boolean;
    error?: ApplicationErrorNonNullableFields$7;
}
interface ColumnNonNullableFields {
    key: string;
    name: string;
}
interface RowNonNullableFields {
    key: string;
}
interface DashboardTableNonNullableFields {
    title: string;
    columns: ColumnNonNullableFields[];
    rows: RowNonNullableFields[];
}
interface DeliveryCarrierRegionalSettingsNonNullableFields {
    deliveryRegionId: string;
    dashboardTables: DashboardTableNonNullableFields[];
}
interface ListDeliveryCarriersResultNonNullableFields {
    deliveryCarrierMetadata?: ItemMetadataNonNullableFields$3;
    deliveryCarrierDetails?: DeliveryCarrierDetailsNonNullableFields;
    deliveryCarrierRegionalSettings: DeliveryCarrierRegionalSettingsNonNullableFields[];
}
interface BulkActionMetadataNonNullableFields$3 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface ListDeliveryCarriersResponseNonNullableFields {
    results: ListDeliveryCarriersResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$3;
}
interface UpdateExtendedFieldsResponseNonNullableFields$3 {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface BaseEventMetadata$5 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$d;
}
interface EventMetadata$5 extends BaseEventMetadata$5 {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface DeliveryProfileCreatedEnvelope {
    entity: DeliveryProfile;
    metadata: EventMetadata$5;
}
interface DeliveryProfileDeliveryRegionAddedEnvelope {
    data: DeliveryRegionAdded;
    metadata: EventMetadata$5;
}
interface DeliveryProfileUpdatedEnvelope {
    entity: DeliveryProfile;
    metadata: EventMetadata$5;
}
interface DeliveryProfileDeletedEnvelope {
    entity: DeliveryProfile;
    metadata: EventMetadata$5;
}
interface DeliveryProfileDeliveryRegionRemovedEnvelope {
    data: DeliveryRegionRemoved;
    metadata: EventMetadata$5;
}
interface DeliveryProfileDeliveryRegionUpdatedEnvelope {
    data: DeliveryRegionUpdated;
    metadata: EventMetadata$5;
}
interface UpdateDeliveryProfile {
    /**
     * DeliveryProfile ID.
     * @readonly
     */
    _id?: string | null;
    /** DeliveryProfile name. */
    name?: string | null;
    /**
     * Indicates that this DeliveryProfile is the default DeliveryProfile.
     * @readonly
     */
    default?: boolean | null;
    /** A list of DeliveryProfile regions. */
    deliveryRegions?: DeliveryRegion[];
    /**
     * DeliveryProfile revision.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the DeliveryProfile was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the DeliveryProfile was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Extended fields. */
    extendedFields?: ExtendedFields$6;
}
interface QueryCursorResult$8 {
    cursors: Cursors$a;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface DeliveryProfilesQueryResult extends QueryCursorResult$8 {
    items: DeliveryProfile[];
    query: DeliveryProfilesQueryBuilder;
    next: () => Promise<DeliveryProfilesQueryResult>;
    prev: () => Promise<DeliveryProfilesQueryResult>;
}
interface DeliveryProfilesQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'name' | 'default' | 'deliveryRegions.id' | 'deliveryRegions.active' | 'deliveryRegions.createdDate' | '_createdDate', value: any) => DeliveryProfilesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'name' | 'default' | 'deliveryRegions.id' | 'deliveryRegions.active' | 'deliveryRegions.createdDate' | '_createdDate', value: any) => DeliveryProfilesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: 'deliveryRegions.createdDate' | '_createdDate', value: any) => DeliveryProfilesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: 'deliveryRegions.createdDate' | '_createdDate', value: any) => DeliveryProfilesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: 'deliveryRegions.createdDate' | '_createdDate', value: any) => DeliveryProfilesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: 'deliveryRegions.createdDate' | '_createdDate', value: any) => DeliveryProfilesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'name' | 'deliveryRegions.id', value: string) => DeliveryProfilesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'name' | 'default' | 'deliveryRegions.id' | 'deliveryRegions.active' | 'deliveryRegions.createdDate' | '_createdDate', value: any[]) => DeliveryProfilesQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'name' | 'default' | 'deliveryRegions.id' | 'deliveryRegions.active' | 'deliveryRegions.createdDate' | '_createdDate', value: any) => DeliveryProfilesQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'name' | 'default' | 'deliveryRegions.id' | 'deliveryRegions.active' | 'deliveryRegions.createdDate' | '_createdDate', value: boolean) => DeliveryProfilesQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id' | 'name' | 'default' | 'deliveryRegions.id' | 'deliveryRegions.active' | 'deliveryRegions.destinations' | 'deliveryRegions.createdDate' | '_createdDate'>) => DeliveryProfilesQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id' | 'name' | 'default' | 'deliveryRegions.id' | 'deliveryRegions.active' | 'deliveryRegions.destinations' | 'deliveryRegions.createdDate' | '_createdDate'>) => DeliveryProfilesQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => DeliveryProfilesQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => DeliveryProfilesQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<DeliveryProfilesQueryResult>;
}
interface AddDeliveryRegionOptions$2 {
    /**
     * DeliveryProfile revision.
     * @readonly
     */
    revision?: string | null;
}
interface UpdateDeliveryRegionIdentifiers {
    /** DeliveryProfile id that owns the DeliveryRegion */
    deliveryProfileId: string;
    /**
     * The delivery region id.
     * @readonly
     */
    deliveryRegionId?: string | null;
}
interface UpdateDeliveryRegion {
    /**
     * The delivery region id.
     * @readonly
     */
    _id?: string | null;
    /** Optional name of the rule, for example: "Domestic". */
    name?: string | null;
    /** Indicates that this rule is active, default value is true. */
    active?: boolean | null;
    /**
     * The spi implementers id of shipping-rates spi, assigned to this rule.
     * @readonly
     */
    deliveryCarriers?: DeliveryCarrier[];
    /** The operation region of this rule, if empty than it is global. */
    destinations?: Destination$1[];
    /**
     * Represents the time this Profile was created
     * @readonly
     */
    _createdDate?: Date | null;
}
interface UpdateDeliveryRegionOptions {
    /**
     * DeliveryProfile revision.
     * @readonly
     */
    revision?: string | null;
}
interface RemoveDeliveryRegionIdentifiers {
    /** DeliveryProfile id that owns the DeliveryRegion */
    deliveryProfileId: string;
    /** Id of the DeliveryRegion to delete */
    deliveryRegionId: string;
}
interface RemoveDeliveryRegionOptions$2 {
    /**
     * DeliveryProfile revision.
     * @readonly
     */
    revision?: string | null;
}
interface AddDeliveryCarrierOptions {
    /** delivery_carrier to be added. */
    deliveryCarrier: DeliveryCarrier;
}
interface RemoveDeliveryCarrierOptions {
    /** DeliveryCarrier app id to be removed. */
    appId: string;
}
interface UpdateDeliveryCarrierOptions {
    /** Updated delivery_carrier */
    deliveryCarrier?: DeliveryCarrier;
}
interface ListDeliveryCarriersOptions {
    /** Delivery app ids to get settings for. */
    appIds?: string[];
}
interface UpdateExtendedFieldsOptions$3 {
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}

declare function createDeliveryProfile$1(httpClient: HttpClient): CreateDeliveryProfileSignature;
interface CreateDeliveryProfileSignature {
    /**
     * Creates a DeliveryProfile.
     *
     * The request body must include the DeliveryProfiles name. DeliveryRegions are optional.
     * @param - DeliveryProfile to be created.
     * @returns The created DeliveryProfile.
     */
    (deliveryProfile: DeliveryProfile): Promise<DeliveryProfile & DeliveryProfileNonNullableFields>;
}
declare function getDeliveryProfile$1(httpClient: HttpClient): GetDeliveryProfileSignature;
interface GetDeliveryProfileSignature {
    /**
     * Retrieves a DeliveryProfile.
     * @param - ID of the DeliveryProfile to retrieve.
     * @returns The requested DeliveryProfile.
     */
    (deliveryProfileId: string): Promise<DeliveryProfile & DeliveryProfileNonNullableFields>;
}
declare function updateDeliveryProfile$1(httpClient: HttpClient): UpdateDeliveryProfileSignature;
interface UpdateDeliveryProfileSignature {
    /**
     * Updates a DeliveryProfile.
     *
     *
     * Each time the DeliveryProfile is updated,
     * `revision` increments by 1.
     * The current `revision` must be passed when updating the DeliveryProfile.
     * This ensures you're working with the latest DeliveryProfile
     * and prevents unintended overwrites.
     *
     * This method does not allow updating the DeliveryRegions in this DeliveryProfile.
     * Use AddDeliveryRegion, UpdateDeliveryRegion and RemoveDeliveryRegion for these functionalities.
     * @param - DeliveryProfile ID.
     * @returns Updated DeliveryProfile.
     */
    (_id: string | null, deliveryProfile: UpdateDeliveryProfile): Promise<DeliveryProfile & DeliveryProfileNonNullableFields>;
}
declare function deleteDeliveryProfile$1(httpClient: HttpClient): DeleteDeliveryProfileSignature;
interface DeleteDeliveryProfileSignature {
    /**
     * Deletes a DeliveryProfile.
     *
     * Deleting a DeliveryProfile permanently removes them from the DeliveryProfile List.
     * @param - Id of the DeliveryProfile to delete.
     */
    (deliveryProfileId: string): Promise<void>;
}
declare function queryDeliveryProfiles$1(httpClient: HttpClient): QueryDeliveryProfilesSignature;
interface QueryDeliveryProfilesSignature {
    /**
     * Retrieves a list of DeliveryProfiles, given the provided [paging, filtering, and sorting][1].
     *
     * Up to 1,000 DeliveryProfiles can be returned per request.
     *
     * To learn how to query DeliveryProfiles, see [API Query Language][2].
     *
     * [1]: https://dev.wix.com/api/rest/getting-started/sorting-and-paging
     * [2]: https://dev.wix.com/api/rest/getting-started/api-query-language
     */
    (): DeliveryProfilesQueryBuilder;
}
declare function addDeliveryRegion$5(httpClient: HttpClient): AddDeliveryRegionSignature$2;
interface AddDeliveryRegionSignature$2 {
    /**
     * Creates a new DeliveryRegion in an existing DeliveryProfile.
     * @param - delivery profile id to associated with the DeliveryRegion
     * @param - DeliveryRegion to be created
     */
    (deliveryProfileId: string, deliveryRegion: DeliveryRegion, options?: AddDeliveryRegionOptions$2 | undefined): Promise<AddDeliveryRegionResponse$2 & AddDeliveryRegionResponseNonNullableFields$2>;
}
declare function updateDeliveryRegion$1(httpClient: HttpClient): UpdateDeliveryRegionSignature;
interface UpdateDeliveryRegionSignature {
    /**
     * Update a DeliveryRegion, supports partial update
     * Pass the latest `revision` for a successful update
     *
     * This method does not allow setting or updating the delivery delivery_carriers in this delivery_region.
     * Use AddDeliveryCarrier, UpdateDeliveryCarrier and RemoveDeliveryCarrier for these functionalities.
     */
    (identifiers: UpdateDeliveryRegionIdentifiers, deliveryRegion: UpdateDeliveryRegion, options?: UpdateDeliveryRegionOptions | undefined): Promise<UpdateDeliveryRegionResponse & UpdateDeliveryRegionResponseNonNullableFields>;
}
declare function removeDeliveryRegion$5(httpClient: HttpClient): RemoveDeliveryRegionSignature$2;
interface RemoveDeliveryRegionSignature$2 {
    /**
     * Delete a DeliveryRegion
     */
    (identifiers: RemoveDeliveryRegionIdentifiers, options?: RemoveDeliveryRegionOptions$2 | undefined): Promise<RemoveDeliveryRegionResponse$2 & RemoveDeliveryRegionResponseNonNullableFields$2>;
}
declare function addDeliveryCarrier$1(httpClient: HttpClient): AddDeliveryCarrierSignature;
interface AddDeliveryCarrierSignature {
    /**
     * Add a delivery_carrier to a delivery region
     * @param - delivery_region id to associated with the delivery_carrier.
     */
    (deliveryRegionId: string, options: AddDeliveryCarrierOptions): Promise<AddDeliveryCarrierResponse & AddDeliveryCarrierResponseNonNullableFields>;
}
declare function removeDeliveryCarrier$1(httpClient: HttpClient): RemoveDeliveryCarrierSignature;
interface RemoveDeliveryCarrierSignature {
    /**
     * Remove a delivery_carrier from a delivery region
     * @param - Id of the DeliveryRegion
     */
    (deliveryRegionId: string, options: RemoveDeliveryCarrierOptions): Promise<RemoveDeliveryCarrierResponse & RemoveDeliveryCarrierResponseNonNullableFields>;
}
declare function updateDeliveryCarrier$1(httpClient: HttpClient): UpdateDeliveryCarrierSignature;
interface UpdateDeliveryCarrierSignature {
    /**
     * Update a delivery carrier in a delivery region
     * @param - DeliveryRegion id
     */
    (deliveryRegionId: string, options?: UpdateDeliveryCarrierOptions | undefined): Promise<UpdateDeliveryCarrierResponse & UpdateDeliveryCarrierResponseNonNullableFields>;
}
declare function listDeliveryCarrierDetails$1(httpClient: HttpClient): ListDeliveryCarrierDetailsSignature;
interface ListDeliveryCarrierDetailsSignature {
    /**
     * List all installed delivery carriers in order to set their ids in delivery rules
     */
    (): Promise<ListDeliveryCarrierDetailsResponse & ListDeliveryCarrierDetailsResponseNonNullableFields>;
}
declare function listDeliveryCarriers$1(httpClient: HttpClient): ListDeliveryCarriersSignature;
interface ListDeliveryCarriersSignature {
    /**
     * Get delivery carrier settings for a delivery profile and delivery region.
     * These are returned in a table format for the dashboard.
     * @param - Delivery profile id.
     */
    (deliveryProfileId: string, options?: ListDeliveryCarriersOptions | undefined): Promise<ListDeliveryCarriersResponse & ListDeliveryCarriersResponseNonNullableFields>;
}
declare function updateExtendedFields$7(httpClient: HttpClient): UpdateExtendedFieldsSignature$3;
interface UpdateExtendedFieldsSignature$3 {
    /**
     * Updates extended fields of a DeliveryProfile without incrementing revision
     * @param - ID of the entity to update.
     * @param - Identifier for the app whose extended fields are being updated.
     */
    (_id: string, namespace: string, options: UpdateExtendedFieldsOptions$3): Promise<UpdateExtendedFieldsResponse$4 & UpdateExtendedFieldsResponseNonNullableFields$3>;
}
declare const onDeliveryProfileCreated$1: EventDefinition<DeliveryProfileCreatedEnvelope, "wix.ecom.v1.delivery_profile_created">;
declare const onDeliveryProfileDeliveryRegionAdded$1: EventDefinition<DeliveryProfileDeliveryRegionAddedEnvelope, "wix.ecom.v1.delivery_profile_delivery_region_added">;
declare const onDeliveryProfileUpdated$1: EventDefinition<DeliveryProfileUpdatedEnvelope, "wix.ecom.v1.delivery_profile_updated">;
declare const onDeliveryProfileDeleted$1: EventDefinition<DeliveryProfileDeletedEnvelope, "wix.ecom.v1.delivery_profile_deleted">;
declare const onDeliveryProfileDeliveryRegionRemoved$1: EventDefinition<DeliveryProfileDeliveryRegionRemovedEnvelope, "wix.ecom.v1.delivery_profile_delivery_region_removed">;
declare const onDeliveryProfileDeliveryRegionUpdated$1: EventDefinition<DeliveryProfileDeliveryRegionUpdatedEnvelope, "wix.ecom.v1.delivery_profile_delivery_region_updated">;

declare function createEventModule$5<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createDeliveryProfile: MaybeContext<BuildRESTFunction<typeof createDeliveryProfile$1> & typeof createDeliveryProfile$1>;
declare const getDeliveryProfile: MaybeContext<BuildRESTFunction<typeof getDeliveryProfile$1> & typeof getDeliveryProfile$1>;
declare const updateDeliveryProfile: MaybeContext<BuildRESTFunction<typeof updateDeliveryProfile$1> & typeof updateDeliveryProfile$1>;
declare const deleteDeliveryProfile: MaybeContext<BuildRESTFunction<typeof deleteDeliveryProfile$1> & typeof deleteDeliveryProfile$1>;
declare const queryDeliveryProfiles: MaybeContext<BuildRESTFunction<typeof queryDeliveryProfiles$1> & typeof queryDeliveryProfiles$1>;
declare const addDeliveryRegion$4: MaybeContext<BuildRESTFunction<typeof addDeliveryRegion$5> & typeof addDeliveryRegion$5>;
declare const updateDeliveryRegion: MaybeContext<BuildRESTFunction<typeof updateDeliveryRegion$1> & typeof updateDeliveryRegion$1>;
declare const removeDeliveryRegion$4: MaybeContext<BuildRESTFunction<typeof removeDeliveryRegion$5> & typeof removeDeliveryRegion$5>;
declare const addDeliveryCarrier: MaybeContext<BuildRESTFunction<typeof addDeliveryCarrier$1> & typeof addDeliveryCarrier$1>;
declare const removeDeliveryCarrier: MaybeContext<BuildRESTFunction<typeof removeDeliveryCarrier$1> & typeof removeDeliveryCarrier$1>;
declare const updateDeliveryCarrier: MaybeContext<BuildRESTFunction<typeof updateDeliveryCarrier$1> & typeof updateDeliveryCarrier$1>;
declare const listDeliveryCarrierDetails: MaybeContext<BuildRESTFunction<typeof listDeliveryCarrierDetails$1> & typeof listDeliveryCarrierDetails$1>;
declare const listDeliveryCarriers: MaybeContext<BuildRESTFunction<typeof listDeliveryCarriers$1> & typeof listDeliveryCarriers$1>;
declare const updateExtendedFields$6: MaybeContext<BuildRESTFunction<typeof updateExtendedFields$7> & typeof updateExtendedFields$7>;

type _publicOnDeliveryProfileCreatedType = typeof onDeliveryProfileCreated$1;
/** */
declare const onDeliveryProfileCreated: ReturnType<typeof createEventModule$5<_publicOnDeliveryProfileCreatedType>>;

type _publicOnDeliveryProfileDeliveryRegionAddedType = typeof onDeliveryProfileDeliveryRegionAdded$1;
/**
 * Triggered when a delivery_region is added to a delivery_profile.
 */
declare const onDeliveryProfileDeliveryRegionAdded: ReturnType<typeof createEventModule$5<_publicOnDeliveryProfileDeliveryRegionAddedType>>;

type _publicOnDeliveryProfileUpdatedType = typeof onDeliveryProfileUpdated$1;
/**
 * Triggered when the delivery_carrier updated successfully
 */
declare const onDeliveryProfileUpdated: ReturnType<typeof createEventModule$5<_publicOnDeliveryProfileUpdatedType>>;

type _publicOnDeliveryProfileDeletedType = typeof onDeliveryProfileDeleted$1;
/** */
declare const onDeliveryProfileDeleted: ReturnType<typeof createEventModule$5<_publicOnDeliveryProfileDeletedType>>;

type _publicOnDeliveryProfileDeliveryRegionRemovedType = typeof onDeliveryProfileDeliveryRegionRemoved$1;
/**
 * Triggered for each delivery_region assigned to the deleted delivery_profile
 */
declare const onDeliveryProfileDeliveryRegionRemoved: ReturnType<typeof createEventModule$5<_publicOnDeliveryProfileDeliveryRegionRemovedType>>;

type _publicOnDeliveryProfileDeliveryRegionUpdatedType = typeof onDeliveryProfileDeliveryRegionUpdated$1;
/**
 * Triggered when the delivery_carrier updated successfully
 */
declare const onDeliveryProfileDeliveryRegionUpdated: ReturnType<typeof createEventModule$5<_publicOnDeliveryProfileDeliveryRegionUpdatedType>>;

type index_d$h_AddDeliveryCarrierOptions = AddDeliveryCarrierOptions;
type index_d$h_AddDeliveryCarrierRequest = AddDeliveryCarrierRequest;
type index_d$h_AddDeliveryCarrierResponse = AddDeliveryCarrierResponse;
type index_d$h_AddDeliveryCarrierResponseNonNullableFields = AddDeliveryCarrierResponseNonNullableFields;
type index_d$h_Asset = Asset;
type index_d$h_BackupRate = BackupRate;
type index_d$h_Column = Column;
type index_d$h_CreateDeliveryProfileRequest = CreateDeliveryProfileRequest;
type index_d$h_CreateDeliveryProfileResponse = CreateDeliveryProfileResponse;
type index_d$h_CreateDeliveryProfileResponseNonNullableFields = CreateDeliveryProfileResponseNonNullableFields;
type index_d$h_DashboardTable = DashboardTable;
type index_d$h_DeleteContext = DeleteContext;
type index_d$h_DeleteDeliveryProfileRequest = DeleteDeliveryProfileRequest;
type index_d$h_DeleteDeliveryProfileResponse = DeleteDeliveryProfileResponse;
type index_d$h_DeleteStatus = DeleteStatus;
declare const index_d$h_DeleteStatus: typeof DeleteStatus;
type index_d$h_DeliveryCarrier = DeliveryCarrier;
type index_d$h_DeliveryCarrierDetails = DeliveryCarrierDetails;
type index_d$h_DeliveryCarrierRegionalSettings = DeliveryCarrierRegionalSettings;
type index_d$h_DeliveryProfile = DeliveryProfile;
type index_d$h_DeliveryProfileCreatedEnvelope = DeliveryProfileCreatedEnvelope;
type index_d$h_DeliveryProfileDeletedEnvelope = DeliveryProfileDeletedEnvelope;
type index_d$h_DeliveryProfileDeliveryRegionAddedEnvelope = DeliveryProfileDeliveryRegionAddedEnvelope;
type index_d$h_DeliveryProfileDeliveryRegionRemovedEnvelope = DeliveryProfileDeliveryRegionRemovedEnvelope;
type index_d$h_DeliveryProfileDeliveryRegionUpdatedEnvelope = DeliveryProfileDeliveryRegionUpdatedEnvelope;
type index_d$h_DeliveryProfileNonNullableFields = DeliveryProfileNonNullableFields;
type index_d$h_DeliveryProfileUpdatedEnvelope = DeliveryProfileUpdatedEnvelope;
type index_d$h_DeliveryProfilesQueryBuilder = DeliveryProfilesQueryBuilder;
type index_d$h_DeliveryProfilesQueryResult = DeliveryProfilesQueryResult;
type index_d$h_DeliveryRegion = DeliveryRegion;
type index_d$h_DeliveryRegionAdded = DeliveryRegionAdded;
type index_d$h_DeliveryRegionRemoved = DeliveryRegionRemoved;
type index_d$h_DeliveryRegionUpdated = DeliveryRegionUpdated;
type index_d$h_GetDeliveryProfileRequest = GetDeliveryProfileRequest;
type index_d$h_GetDeliveryProfileResponse = GetDeliveryProfileResponse;
type index_d$h_GetDeliveryProfileResponseNonNullableFields = GetDeliveryProfileResponseNonNullableFields;
type index_d$h_ListDeliveryCarrierDetailsRequest = ListDeliveryCarrierDetailsRequest;
type index_d$h_ListDeliveryCarrierDetailsResponse = ListDeliveryCarrierDetailsResponse;
type index_d$h_ListDeliveryCarrierDetailsResponseNonNullableFields = ListDeliveryCarrierDetailsResponseNonNullableFields;
type index_d$h_ListDeliveryCarriersOptions = ListDeliveryCarriersOptions;
type index_d$h_ListDeliveryCarriersRequest = ListDeliveryCarriersRequest;
type index_d$h_ListDeliveryCarriersResponse = ListDeliveryCarriersResponse;
type index_d$h_ListDeliveryCarriersResponseNonNullableFields = ListDeliveryCarriersResponseNonNullableFields;
type index_d$h_ListDeliveryCarriersResult = ListDeliveryCarriersResult;
type index_d$h_MetaSiteSpecialEvent = MetaSiteSpecialEvent;
type index_d$h_MetaSiteSpecialEventPayloadOneOf = MetaSiteSpecialEventPayloadOneOf;
type index_d$h_NamespaceChanged = NamespaceChanged;
type index_d$h_QueryDeliveryProfilesRequest = QueryDeliveryProfilesRequest;
type index_d$h_QueryDeliveryProfilesResponse = QueryDeliveryProfilesResponse;
type index_d$h_QueryDeliveryProfilesResponseNonNullableFields = QueryDeliveryProfilesResponseNonNullableFields;
type index_d$h_RemoveDeliveryCarrierOptions = RemoveDeliveryCarrierOptions;
type index_d$h_RemoveDeliveryCarrierRequest = RemoveDeliveryCarrierRequest;
type index_d$h_RemoveDeliveryCarrierResponse = RemoveDeliveryCarrierResponse;
type index_d$h_RemoveDeliveryCarrierResponseNonNullableFields = RemoveDeliveryCarrierResponseNonNullableFields;
type index_d$h_RemoveDeliveryRegionIdentifiers = RemoveDeliveryRegionIdentifiers;
type index_d$h_Row = Row;
type index_d$h_ServiceProvisioned = ServiceProvisioned;
type index_d$h_ServiceRemoved = ServiceRemoved;
type index_d$h_SiteCreated = SiteCreated;
type index_d$h_SiteCreatedContext = SiteCreatedContext;
declare const index_d$h_SiteCreatedContext: typeof SiteCreatedContext;
type index_d$h_SiteDeleted = SiteDeleted;
type index_d$h_SiteHardDeleted = SiteHardDeleted;
type index_d$h_SiteMarkedAsTemplate = SiteMarkedAsTemplate;
type index_d$h_SiteMarkedAsWixSite = SiteMarkedAsWixSite;
type index_d$h_SitePublished = SitePublished;
type index_d$h_SiteRenamed = SiteRenamed;
type index_d$h_SiteTransferred = SiteTransferred;
type index_d$h_SiteUndeleted = SiteUndeleted;
type index_d$h_SiteUnpublished = SiteUnpublished;
type index_d$h_StudioAssigned = StudioAssigned;
type index_d$h_StudioUnassigned = StudioUnassigned;
type index_d$h_UpdateDeliveryCarrierOptions = UpdateDeliveryCarrierOptions;
type index_d$h_UpdateDeliveryCarrierRequest = UpdateDeliveryCarrierRequest;
type index_d$h_UpdateDeliveryCarrierResponse = UpdateDeliveryCarrierResponse;
type index_d$h_UpdateDeliveryCarrierResponseNonNullableFields = UpdateDeliveryCarrierResponseNonNullableFields;
type index_d$h_UpdateDeliveryProfile = UpdateDeliveryProfile;
type index_d$h_UpdateDeliveryProfileRequest = UpdateDeliveryProfileRequest;
type index_d$h_UpdateDeliveryProfileResponse = UpdateDeliveryProfileResponse;
type index_d$h_UpdateDeliveryProfileResponseNonNullableFields = UpdateDeliveryProfileResponseNonNullableFields;
type index_d$h_UpdateDeliveryRegion = UpdateDeliveryRegion;
type index_d$h_UpdateDeliveryRegionIdentifiers = UpdateDeliveryRegionIdentifiers;
type index_d$h_UpdateDeliveryRegionOptions = UpdateDeliveryRegionOptions;
type index_d$h_UpdateDeliveryRegionRequest = UpdateDeliveryRegionRequest;
type index_d$h_UpdateDeliveryRegionResponse = UpdateDeliveryRegionResponse;
type index_d$h_UpdateDeliveryRegionResponseNonNullableFields = UpdateDeliveryRegionResponseNonNullableFields;
type index_d$h__publicOnDeliveryProfileCreatedType = _publicOnDeliveryProfileCreatedType;
type index_d$h__publicOnDeliveryProfileDeletedType = _publicOnDeliveryProfileDeletedType;
type index_d$h__publicOnDeliveryProfileDeliveryRegionAddedType = _publicOnDeliveryProfileDeliveryRegionAddedType;
type index_d$h__publicOnDeliveryProfileDeliveryRegionRemovedType = _publicOnDeliveryProfileDeliveryRegionRemovedType;
type index_d$h__publicOnDeliveryProfileDeliveryRegionUpdatedType = _publicOnDeliveryProfileDeliveryRegionUpdatedType;
type index_d$h__publicOnDeliveryProfileUpdatedType = _publicOnDeliveryProfileUpdatedType;
declare const index_d$h_addDeliveryCarrier: typeof addDeliveryCarrier;
declare const index_d$h_createDeliveryProfile: typeof createDeliveryProfile;
declare const index_d$h_deleteDeliveryProfile: typeof deleteDeliveryProfile;
declare const index_d$h_getDeliveryProfile: typeof getDeliveryProfile;
declare const index_d$h_listDeliveryCarrierDetails: typeof listDeliveryCarrierDetails;
declare const index_d$h_listDeliveryCarriers: typeof listDeliveryCarriers;
declare const index_d$h_onDeliveryProfileCreated: typeof onDeliveryProfileCreated;
declare const index_d$h_onDeliveryProfileDeleted: typeof onDeliveryProfileDeleted;
declare const index_d$h_onDeliveryProfileDeliveryRegionAdded: typeof onDeliveryProfileDeliveryRegionAdded;
declare const index_d$h_onDeliveryProfileDeliveryRegionRemoved: typeof onDeliveryProfileDeliveryRegionRemoved;
declare const index_d$h_onDeliveryProfileDeliveryRegionUpdated: typeof onDeliveryProfileDeliveryRegionUpdated;
declare const index_d$h_onDeliveryProfileUpdated: typeof onDeliveryProfileUpdated;
declare const index_d$h_queryDeliveryProfiles: typeof queryDeliveryProfiles;
declare const index_d$h_removeDeliveryCarrier: typeof removeDeliveryCarrier;
declare const index_d$h_updateDeliveryCarrier: typeof updateDeliveryCarrier;
declare const index_d$h_updateDeliveryProfile: typeof updateDeliveryProfile;
declare const index_d$h_updateDeliveryRegion: typeof updateDeliveryRegion;
declare namespace index_d$h {
  export { type ActionEvent$d as ActionEvent, type index_d$h_AddDeliveryCarrierOptions as AddDeliveryCarrierOptions, type index_d$h_AddDeliveryCarrierRequest as AddDeliveryCarrierRequest, type index_d$h_AddDeliveryCarrierResponse as AddDeliveryCarrierResponse, type index_d$h_AddDeliveryCarrierResponseNonNullableFields as AddDeliveryCarrierResponseNonNullableFields, type AddDeliveryRegionOptions$2 as AddDeliveryRegionOptions, type AddDeliveryRegionRequest$2 as AddDeliveryRegionRequest, type AddDeliveryRegionResponse$2 as AddDeliveryRegionResponse, type AddDeliveryRegionResponseNonNullableFields$2 as AddDeliveryRegionResponseNonNullableFields, type AdditionalCharge$1 as AdditionalCharge, type ApplicationError$7 as ApplicationError, type index_d$h_Asset as Asset, type index_d$h_BackupRate as BackupRate, type BaseEventMetadata$5 as BaseEventMetadata, type BulkActionMetadata$3 as BulkActionMetadata, ChargeType$2 as ChargeType, type index_d$h_Column as Column, type index_d$h_CreateDeliveryProfileRequest as CreateDeliveryProfileRequest, type index_d$h_CreateDeliveryProfileResponse as CreateDeliveryProfileResponse, type index_d$h_CreateDeliveryProfileResponseNonNullableFields as CreateDeliveryProfileResponseNonNullableFields, type CursorPaging$a as CursorPaging, type CursorPagingMetadata$9 as CursorPagingMetadata, type CursorQuery$6 as CursorQuery, type CursorQueryPagingMethodOneOf$6 as CursorQueryPagingMethodOneOf, type Cursors$a as Cursors, type index_d$h_DashboardTable as DashboardTable, type index_d$h_DeleteContext as DeleteContext, type index_d$h_DeleteDeliveryProfileRequest as DeleteDeliveryProfileRequest, type index_d$h_DeleteDeliveryProfileResponse as DeleteDeliveryProfileResponse, index_d$h_DeleteStatus as DeleteStatus, type index_d$h_DeliveryCarrier as DeliveryCarrier, type index_d$h_DeliveryCarrierDetails as DeliveryCarrierDetails, type index_d$h_DeliveryCarrierRegionalSettings as DeliveryCarrierRegionalSettings, type index_d$h_DeliveryProfile as DeliveryProfile, type index_d$h_DeliveryProfileCreatedEnvelope as DeliveryProfileCreatedEnvelope, type index_d$h_DeliveryProfileDeletedEnvelope as DeliveryProfileDeletedEnvelope, type index_d$h_DeliveryProfileDeliveryRegionAddedEnvelope as DeliveryProfileDeliveryRegionAddedEnvelope, type index_d$h_DeliveryProfileDeliveryRegionRemovedEnvelope as DeliveryProfileDeliveryRegionRemovedEnvelope, type index_d$h_DeliveryProfileDeliveryRegionUpdatedEnvelope as DeliveryProfileDeliveryRegionUpdatedEnvelope, type index_d$h_DeliveryProfileNonNullableFields as DeliveryProfileNonNullableFields, type index_d$h_DeliveryProfileUpdatedEnvelope as DeliveryProfileUpdatedEnvelope, type index_d$h_DeliveryProfilesQueryBuilder as DeliveryProfilesQueryBuilder, type index_d$h_DeliveryProfilesQueryResult as DeliveryProfilesQueryResult, type index_d$h_DeliveryRegion as DeliveryRegion, type index_d$h_DeliveryRegionAdded as DeliveryRegionAdded, type index_d$h_DeliveryRegionRemoved as DeliveryRegionRemoved, type index_d$h_DeliveryRegionUpdated as DeliveryRegionUpdated, type Destination$1 as Destination, type DomainEvent$d as DomainEvent, type DomainEventBodyOneOf$d as DomainEventBodyOneOf, type Empty$7 as Empty, type EntityCreatedEvent$d as EntityCreatedEvent, type EntityDeletedEvent$d as EntityDeletedEvent, type EntityUpdatedEvent$d as EntityUpdatedEvent, type EventMetadata$5 as EventMetadata, type ExtendedFields$6 as ExtendedFields, type index_d$h_GetDeliveryProfileRequest as GetDeliveryProfileRequest, type index_d$h_GetDeliveryProfileResponse as GetDeliveryProfileResponse, type index_d$h_GetDeliveryProfileResponseNonNullableFields as GetDeliveryProfileResponseNonNullableFields, type IdentificationData$d as IdentificationData, type IdentificationDataIdOneOf$d as IdentificationDataIdOneOf, type ItemMetadata$3 as ItemMetadata, type index_d$h_ListDeliveryCarrierDetailsRequest as ListDeliveryCarrierDetailsRequest, type index_d$h_ListDeliveryCarrierDetailsResponse as ListDeliveryCarrierDetailsResponse, type index_d$h_ListDeliveryCarrierDetailsResponseNonNullableFields as ListDeliveryCarrierDetailsResponseNonNullableFields, type index_d$h_ListDeliveryCarriersOptions as ListDeliveryCarriersOptions, type index_d$h_ListDeliveryCarriersRequest as ListDeliveryCarriersRequest, type index_d$h_ListDeliveryCarriersResponse as ListDeliveryCarriersResponse, type index_d$h_ListDeliveryCarriersResponseNonNullableFields as ListDeliveryCarriersResponseNonNullableFields, type index_d$h_ListDeliveryCarriersResult as ListDeliveryCarriersResult, type MessageEnvelope$c as MessageEnvelope, type index_d$h_MetaSiteSpecialEvent as MetaSiteSpecialEvent, type index_d$h_MetaSiteSpecialEventPayloadOneOf as MetaSiteSpecialEventPayloadOneOf, Namespace$1 as Namespace, type index_d$h_NamespaceChanged as NamespaceChanged, type index_d$h_QueryDeliveryProfilesRequest as QueryDeliveryProfilesRequest, type index_d$h_QueryDeliveryProfilesResponse as QueryDeliveryProfilesResponse, type index_d$h_QueryDeliveryProfilesResponseNonNullableFields as QueryDeliveryProfilesResponseNonNullableFields, type index_d$h_RemoveDeliveryCarrierOptions as RemoveDeliveryCarrierOptions, type index_d$h_RemoveDeliveryCarrierRequest as RemoveDeliveryCarrierRequest, type index_d$h_RemoveDeliveryCarrierResponse as RemoveDeliveryCarrierResponse, type index_d$h_RemoveDeliveryCarrierResponseNonNullableFields as RemoveDeliveryCarrierResponseNonNullableFields, type index_d$h_RemoveDeliveryRegionIdentifiers as RemoveDeliveryRegionIdentifiers, type RemoveDeliveryRegionOptions$2 as RemoveDeliveryRegionOptions, type RemoveDeliveryRegionRequest$2 as RemoveDeliveryRegionRequest, type RemoveDeliveryRegionResponse$2 as RemoveDeliveryRegionResponse, type RemoveDeliveryRegionResponseNonNullableFields$2 as RemoveDeliveryRegionResponseNonNullableFields, type RestoreInfo$d as RestoreInfo, type index_d$h_Row as Row, type index_d$h_ServiceProvisioned as ServiceProvisioned, type index_d$h_ServiceRemoved as ServiceRemoved, type index_d$h_SiteCreated as SiteCreated, index_d$h_SiteCreatedContext as SiteCreatedContext, type index_d$h_SiteDeleted as SiteDeleted, type index_d$h_SiteHardDeleted as SiteHardDeleted, type index_d$h_SiteMarkedAsTemplate as SiteMarkedAsTemplate, type index_d$h_SiteMarkedAsWixSite as SiteMarkedAsWixSite, type index_d$h_SitePublished as SitePublished, type index_d$h_SiteRenamed as SiteRenamed, type index_d$h_SiteTransferred as SiteTransferred, type index_d$h_SiteUndeleted as SiteUndeleted, type index_d$h_SiteUnpublished as SiteUnpublished, SortOrder$a as SortOrder, type Sorting$a as Sorting, State$1 as State, type index_d$h_StudioAssigned as StudioAssigned, type index_d$h_StudioUnassigned as StudioUnassigned, type index_d$h_UpdateDeliveryCarrierOptions as UpdateDeliveryCarrierOptions, type index_d$h_UpdateDeliveryCarrierRequest as UpdateDeliveryCarrierRequest, type index_d$h_UpdateDeliveryCarrierResponse as UpdateDeliveryCarrierResponse, type index_d$h_UpdateDeliveryCarrierResponseNonNullableFields as UpdateDeliveryCarrierResponseNonNullableFields, type index_d$h_UpdateDeliveryProfile as UpdateDeliveryProfile, type index_d$h_UpdateDeliveryProfileRequest as UpdateDeliveryProfileRequest, type index_d$h_UpdateDeliveryProfileResponse as UpdateDeliveryProfileResponse, type index_d$h_UpdateDeliveryProfileResponseNonNullableFields as UpdateDeliveryProfileResponseNonNullableFields, type index_d$h_UpdateDeliveryRegion as UpdateDeliveryRegion, type index_d$h_UpdateDeliveryRegionIdentifiers as UpdateDeliveryRegionIdentifiers, type index_d$h_UpdateDeliveryRegionOptions as UpdateDeliveryRegionOptions, type index_d$h_UpdateDeliveryRegionRequest as UpdateDeliveryRegionRequest, type index_d$h_UpdateDeliveryRegionResponse as UpdateDeliveryRegionResponse, type index_d$h_UpdateDeliveryRegionResponseNonNullableFields as UpdateDeliveryRegionResponseNonNullableFields, type UpdateExtendedFieldsOptions$3 as UpdateExtendedFieldsOptions, type UpdateExtendedFieldsRequest$4 as UpdateExtendedFieldsRequest, type UpdateExtendedFieldsResponse$4 as UpdateExtendedFieldsResponse, type UpdateExtendedFieldsResponseNonNullableFields$3 as UpdateExtendedFieldsResponseNonNullableFields, WebhookIdentityType$c as WebhookIdentityType, type index_d$h__publicOnDeliveryProfileCreatedType as _publicOnDeliveryProfileCreatedType, type index_d$h__publicOnDeliveryProfileDeletedType as _publicOnDeliveryProfileDeletedType, type index_d$h__publicOnDeliveryProfileDeliveryRegionAddedType as _publicOnDeliveryProfileDeliveryRegionAddedType, type index_d$h__publicOnDeliveryProfileDeliveryRegionRemovedType as _publicOnDeliveryProfileDeliveryRegionRemovedType, type index_d$h__publicOnDeliveryProfileDeliveryRegionUpdatedType as _publicOnDeliveryProfileDeliveryRegionUpdatedType, type index_d$h__publicOnDeliveryProfileUpdatedType as _publicOnDeliveryProfileUpdatedType, index_d$h_addDeliveryCarrier as addDeliveryCarrier, addDeliveryRegion$4 as addDeliveryRegion, index_d$h_createDeliveryProfile as createDeliveryProfile, index_d$h_deleteDeliveryProfile as deleteDeliveryProfile, index_d$h_getDeliveryProfile as getDeliveryProfile, index_d$h_listDeliveryCarrierDetails as listDeliveryCarrierDetails, index_d$h_listDeliveryCarriers as listDeliveryCarriers, index_d$h_onDeliveryProfileCreated as onDeliveryProfileCreated, index_d$h_onDeliveryProfileDeleted as onDeliveryProfileDeleted, index_d$h_onDeliveryProfileDeliveryRegionAdded as onDeliveryProfileDeliveryRegionAdded, index_d$h_onDeliveryProfileDeliveryRegionRemoved as onDeliveryProfileDeliveryRegionRemoved, index_d$h_onDeliveryProfileDeliveryRegionUpdated as onDeliveryProfileDeliveryRegionUpdated, index_d$h_onDeliveryProfileUpdated as onDeliveryProfileUpdated, onDeliveryProfileCreated$1 as publicOnDeliveryProfileCreated, onDeliveryProfileDeleted$1 as publicOnDeliveryProfileDeleted, onDeliveryProfileDeliveryRegionAdded$1 as publicOnDeliveryProfileDeliveryRegionAdded, onDeliveryProfileDeliveryRegionRemoved$1 as publicOnDeliveryProfileDeliveryRegionRemoved, onDeliveryProfileDeliveryRegionUpdated$1 as publicOnDeliveryProfileDeliveryRegionUpdated, onDeliveryProfileUpdated$1 as publicOnDeliveryProfileUpdated, index_d$h_queryDeliveryProfiles as queryDeliveryProfiles, index_d$h_removeDeliveryCarrier as removeDeliveryCarrier, removeDeliveryRegion$4 as removeDeliveryRegion, index_d$h_updateDeliveryCarrier as updateDeliveryCarrier, index_d$h_updateDeliveryProfile as updateDeliveryProfile, index_d$h_updateDeliveryRegion as updateDeliveryRegion, updateExtendedFields$6 as updateExtendedFields };
}

/** DraftOrder is the main entity of DraftOrders service. It represents a single edit order. */
interface DraftOrder {
    /**
     * Draft order ID.
     * @readonly
     */
    _id?: string | null;
    /** ID of the order this draft commits to. */
    orderId?: string | null;
    /**
     * Line items.
     * Includes details about changes when relevant.
     */
    lineItems?: ItemDetails[];
    /**
     * Shipping info.
     * Includes details about changes when relevant.
     */
    shippingInfo?: ShippingDetails;
    /**
     * Buyer information.
     * @deprecated Buyer information.
     * @replacedBy buyer_info_details
     * @targetRemovalDate 2024-08-30
     */
    buyerInfo?: BuyerInfo$3;
    /**
     * Billing address and contact details.
     * @deprecated Billing address and contact details.
     * @replacedBy billing_info_details
     * @targetRemovalDate 2024-08-30
     */
    billingInfo?: AddressWithContact$1;
    /**
     * Additional fees.
     * Includes details about the source, and whether the additional fee is applied to the order.
     */
    additionalFees?: AdditionalFeeDetails[];
    /**
     * Discounts.
     * Includes details about the source, and whether the discount is applied to the order.
     */
    discounts?: DiscountDetails[];
    /**
     * Date and time the draft order was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the draft order was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Identity of the draft order's initiator.
     * @readonly
     */
    createdBy?: CreatedBy$1;
    /**
     * Draft order status.
     * @readonly
     */
    status?: EditingStatus;
    /** Weight measurement unit. Defaults to the site's weight unit. */
    weightUnit?: WeightUnit$4;
    /** Currency used for pricing. */
    currency?: string | null;
    /**
     * Price summary.
     * @readonly
     */
    priceSummary?: PriceSummary$2;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax summary.
     * @readonly
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax summary.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary$2;
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: BalanceSummary$1;
    /** Side effects to perform on commit. */
    commitSettings?: DraftOrderCommitSettings$1;
    /** Member ID (if order created by a member). */
    memberId?: string | null;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    recipientInfo?: RecipientInfoDetails;
    /**
     * Custom field data for the draft order object.
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$5;
}
interface ItemDetails extends ItemDetailsChangeTypeOneOf {
    /** Whether the line item was added as part of the draft. */
    added?: boolean;
    /** Line item fields before the change. */
    changedDetails?: ItemChangedDetails$1;
    /** Whether the line item was removed as part of the draft. */
    removed?: boolean;
    /** Line item details after applied changes. */
    lineItem?: OrderLineItem$1;
}
/** @oneof */
interface ItemDetailsChangeTypeOneOf {
    /** Whether the line item was added as part of the draft. */
    added?: boolean;
    /** Line item fields before the change. */
    changedDetails?: ItemChangedDetails$1;
    /** Whether the line item was removed as part of the draft. */
    removed?: boolean;
}
interface Price$4 {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface PriceDescription$1 {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface OrderLineItem$1 {
    /** Line item ID. */
    _id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName$1;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference$4;
    /** Line item quantity. */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price$4;
    /** Line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine$1[];
    /** Line item image. */
    image?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties$3;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$2;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
     */
    fulfillerId?: string | null;
    /**
     * Number of items that were refunded.
     * @readonly
     */
    refundQuantity?: number | null;
    /**
     * Number of items restocked.
     * @readonly
     */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price$4;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price$4;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$4;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$4;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` - Partial payment for the given item to be paid upfront during the checkout. Eligible for catalog items with type `DEPOSIT_ONLINE` only.
     */
    paymentOption?: PaymentOptionType$2;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails$2;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo$1;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile$2;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo$2;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$1;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price$4;
}
interface ProductName$1 {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$4 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface DescriptionLine$1 extends DescriptionLineValueOneOf$1, DescriptionLineDescriptionLineValueOneOf$1 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$1;
    /** Description line color value. */
    colorInfo?: Color$1;
    /** Description line name. */
    name?: DescriptionLineName$1;
}
/** @oneof */
interface DescriptionLineValueOneOf$1 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$1;
    /** Description line color value. */
    colorInfo?: Color$1;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$1 {
}
interface DescriptionLineName$1 {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$1 {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$1 {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$1 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface PhysicalProperties$3 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$2 extends ItemTypeItemTypeDataOneOf$2 {
    /** Preset item type. */
    preset?: ItemTypeItemType$2;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$2 {
    /** Preset item type. */
    preset?: ItemTypeItemType$2;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$2 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$2 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ItemTaxFullDetails$2 {
    /** Taxable amount of this line item. */
    taxableAmount?: Price$4;
    /** Tax rate percentage, as a decimal numeral between 0 and 1. For example, `"0.13"`. */
    taxRate?: string;
    /** The calculated tax, based on the `taxableAmount` and `taxRate`. */
    totalTax?: Price$4;
}
interface LineItemTaxInfo$1 {
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    taxAmount?: Price$4;
    /** Amount for which tax is calculated. */
    taxableAmount?: Price$4;
    /** Tax rate %, as a decimal point. */
    taxRate?: string | null;
    /**
     * Tax group ID.
     * Learn more about [Tax Groups](https://dev.wix.com/docs/rest/business-management/payments/tax/tax-groups/introduction).
     */
    taxGroupId?: string | null;
    /** Indicates whether the price already includes tax. */
    taxIncludedInPrice?: boolean;
    /** Tax information for a line item. */
    taxBreakdown?: LineItemTaxBreakdown$1[];
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface LineItemTaxBreakdown$1 {
    /** Jurisdiction that taxes were calculated for. For example, "New York", or "Quebec". */
    jurisdiction?: string | null;
    /** Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000. */
    rate?: string | null;
    /** Amount of tax calculated for this line item. */
    taxAmount?: Price$4;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** Type of jurisdiction that taxes were calculated for. */
    jurisdictionType?: JurisdictionType$2;
    /** Non-taxable amount of the line item price. */
    nonTaxableAmount?: Price$4;
    /** Taxable amount of the line item price. */
    taxableAmount?: Price$4;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$2 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DigitalFile$2 {
    /** ID of the secure file in media. */
    fileId?: string;
    /** Link will exist after the digital links have been generated on the order. */
    link?: string | null;
    /**
     * Link expiration time and date.
     * @readonly
     */
    expirationDate?: Date | null;
}
interface SubscriptionInfo$2 {
    /** Subscription ID. */
    _id?: string | null;
    /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */
    cycleNumber?: number;
    /** Subscription option title. For example, `"Monthly coffee Subscription"`. */
    subscriptionOptionTitle?: string;
    /** Subscription option description. For example, `"1kg of selected coffee, once a month"`. */
    subscriptionOptionDescription?: string | null;
    /** Subscription detailed information. */
    subscriptionSettings?: SubscriptionSettings$3;
}
interface SubscriptionSettings$3 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$3;
    /** Interval of recurring payment. */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$3 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface LocationAndQuantity$1 {
    /** Location id in the associated owner app. */
    _id?: string;
    /** Location owner app, if not provided then the site business info locations will be used. */
    appId?: string | null;
    /** Quantity for specific location. */
    quantity?: number;
}
interface TaxableAddress$2 extends TaxableAddressTaxableAddressDataOneOf$2 {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType$2;
}
/** @oneof */
interface TaxableAddressTaxableAddressDataOneOf$2 {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType$2;
}
declare enum TaxableAddressType$2 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
interface ItemChangedDetails$1 {
    /** Line item quantity before change. */
    quantityBeforeChange?: number | null;
    /** Line item price before change. */
    priceBeforeChange?: Price$4;
    /** Line item price description before change. */
    priceDescriptionBeforeChange?: PriceDescription$1;
}
interface ShippingDetails extends ShippingDetailsChangeTypeOneOf {
    /** Whether shipping info was added as part of the draft. */
    added?: boolean;
    /** Shipping info before the change. */
    changedDetails?: ShippingChangedDetails;
    /** Whether shipping info was removed as part of the draft. */
    removed?: boolean;
    /** Selected Shipping details. */
    shippingInfo?: V1ShippingInformation$1;
}
/** @oneof */
interface ShippingDetailsChangeTypeOneOf {
    /** Whether shipping info was added as part of the draft. */
    added?: boolean;
    /** Shipping info before the change. */
    changedDetails?: ShippingChangedDetails;
    /** Whether shipping info was removed as part of the draft. */
    removed?: boolean;
}
interface V1ShippingInformation$1 {
    /** App Def Id of external provider which was a source of shipping info */
    carrierId?: string | null;
    /** Unique code (or ID) of selected shipping option. For example, `"usps_std_overnight"``. */
    code?: string | null;
    /**
     * Shipping option title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"` or `"First-Class Package International"`.
     */
    title?: string;
    /** Shipping logistics. */
    logistics?: V1DeliveryLogistics;
    /** Shipping costs. */
    cost?: V1ShippingPrice;
    /** Shipping region. */
    region?: ShippingRegion$2;
}
interface V1DeliveryLogistics extends V1DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$1;
    /** Pickup details. */
    pickupDetails?: V1PickupDetails;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /**
     * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Expected delivery time. */
    deliveryTimeSlot?: V1DeliveryTimeSlot;
}
/** @oneof */
interface V1DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$1;
    /** Pickup details. */
    pickupDetails?: V1PickupDetails;
}
/** Billing Info and shipping details */
interface AddressWithContact$1 {
    /** Address. */
    address?: Address$6;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$2;
}
/** Physical address */
interface Address$6 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$5;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$5 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation$5 {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
/** Full contact details for an address */
interface FullAddressContactDetails$2 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$3;
}
interface VatId$3 {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$3;
}
/** tax info types */
declare enum VatType$3 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface V1PickupDetails {
    /** Pickup address. */
    address?: PickupAddress$2;
    /** Pickup method */
    pickupMethod?: PickupDetailsPickupMethod;
}
/** Physical address */
interface PickupAddress$2 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address object, with number, name, and apartment number in separate fields. */
    streetAddress?: StreetAddress$5;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
declare enum PickupDetailsPickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface V1DeliveryTimeSlot {
    /** Delivery slot starting time. */
    from?: Date | null;
    /** Delivery slot ending time. */
    to?: Date | null;
}
interface V1ShippingPrice {
    /** Shipping price for display purposes. */
    price?: Price$4;
    /**
     * Total price of shipping after discounts (when relevant), and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$4;
    /**
     * Shipping price after all discounts (if any exist), and after tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$4;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$2;
    /**
     * Shipping discount before tax.
     * @readonly
     */
    discount?: Price$4;
}
interface ShippingRegion$2 {
    /** Name of shipping region. For example, `"Metropolitan London"`, or `"Outer Melbourne suburbs"`. */
    name?: string | null;
}
interface ShippingChangedDetails {
    /** Shipping info before the change. */
    shippingInfoBeforeChange?: V1ShippingInformation$1;
}
/** Buyer Info */
interface BuyerInfo$3 extends BuyerInfoIdOneOf$1 {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
    /** Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction). */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$1 {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
}
interface AdditionalFeeDetails {
    /** Additional fee. */
    additionalFee?: AdditionalFee$2;
    /** Tax details related to the additional fee. */
    taxDetails?: TaxDetails$1;
    /**
     * Source of the additional fee.
     *
     * Supported values:
     * + `ORIGINAL_ORDER`: This additional fee is part of the original order.
     * + `CUSTOM`: This additional fee was created by the [Create Custom Additional Fees](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/draft-orders/create-custom-additional-fees) API.
     */
    source?: SourceType$1;
    /** Whether this additional fee is applied to the order. */
    applied?: boolean;
}
interface AdditionalFee$2 {
    /** Additional fee's unique code for future processing. */
    code?: string | null;
    /** Name of additional fee. */
    name?: string;
    /** Additional fee's price. */
    price?: Price$4;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$2;
    /** SPI implementer's `appId`. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: Price$4;
    /** Additional fee's price after tax. */
    priceAfterTax?: Price$4;
    /** Additional fee's id. */
    _id?: string;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface TaxDetails$1 {
    /** Indication if additional fee is taxable or not */
    taxable?: boolean;
    /** Optional tax group ID to use when calculating tax for this additional fee */
    taxGroupId?: string | null;
}
declare enum SourceType$1 {
    /** Part of the original order */
    ORIGINAL_ORDER = "ORIGINAL_ORDER",
    /** Added by estimate * */
    AUTOMATIC = "AUTOMATIC",
    /** Added manually to current draft order */
    CUSTOM = "CUSTOM"
}
interface DiscountDetails {
    /** Discount details. */
    discount?: AppliedDiscount$2;
    /**
     * Source of the discount.
     *
     * Supported values:
     * + `ORIGINAL_ORDER`: This discount is part of the original order.
     * + `CUSTOM`: This discount was created by the [Create Custom Discounts](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/draft-orders/create-custom-discounts) API.
     */
    source?: SourceType$1;
    /** Whether this discount is applied to the order. */
    applied?: boolean;
}
interface AppliedDiscount$2 extends AppliedDiscountDiscountSourceOneOf$2 {
    /** Applied coupon info. */
    coupon?: Coupon$2;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$2;
    /** Automatic Discount */
    discountRule?: DiscountRule$2;
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to specific items.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: AppliedDiscountDiscountType;
    /**
     * IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @deprecated IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemIds?: string[];
    /** Discount id. */
    _id?: string | null;
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$2 {
    /** Applied coupon info. */
    coupon?: Coupon$2;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$2;
    /** Automatic Discount */
    discountRule?: DiscountRule$2;
}
declare enum AppliedDiscountDiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$2 {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** Coupon value. */
    amount?: Price$4;
}
interface MerchantDiscount$2 extends MerchantDiscountMerchantDiscountReasonOneOf$1 {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason$1;
    /** Discount description as free text (optional). */
    description?: string | null;
    /** Discount amount. */
    amount?: Price$4;
}
/** @oneof */
interface MerchantDiscountMerchantDiscountReasonOneOf$1 {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason$1;
    /** Discount description as free text (optional). */
    description?: string | null;
}
declare enum DiscountReason$1 {
    UNSPECIFIED = "UNSPECIFIED",
    EXCHANGED_ITEMS = "EXCHANGED_ITEMS"
}
interface DiscountRule$2 {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$2;
    /** Discount value. */
    amount?: Price$4;
}
interface DiscountRuleName$2 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface LineItemDiscount$2 {
    /** ID of line item the discount applies to. */
    _id?: string;
    /** Total discount for this line item. */
    totalDiscount?: Price$4;
}
interface CreatedBy$1 extends CreatedByStringOneOf$1 {
    /** User ID. When the draft order was created by a Wix user. */
    userId?: string;
    /** App ID. When the draft order was created by an app. */
    appId?: string;
}
/** @oneof */
interface CreatedByStringOneOf$1 {
    /** User ID. When the draft order was created by a Wix user. */
    userId?: string;
    /** App ID. When the draft order was created by an app. */
    appId?: string;
}
declare enum EditingStatus {
    /** DraftOrder is in draft state. */
    DRAFT = "DRAFT",
    /** DraftOrder is in committed state. */
    COMMITTED = "COMMITTED"
}
declare enum WeightUnit$4 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface PriceSummary$2 {
    /** Subtotal of all the line items, before discounts and before tax. */
    subtotal?: Price$4;
    /** Total shipping price, before discounts and before tax. */
    shipping?: Price$4;
    /** Total tax on this order. */
    tax?: Price$4;
    /** Total calculated discount value. */
    discount?: Price$4;
    /** Order’s total price after discounts and tax. */
    total?: Price$4;
    /** Total price of additional fees before tax. */
    totalAdditionalFees?: Price$4;
}
interface TaxSummary$2 {
    /**
     * Total tax.
     * @readonly
     */
    totalTax?: Price$4;
}
interface BalanceSummary$1 {
    /**
     * Amount left to pay for order to be considered paid.
     * @readonly
     */
    balance?: Balance$1;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price$4;
}
/**
 * Order balance. Reflects amount left to be paid on order and is calculated dynamically. Can be negative per balance definition.
 * `amount` field depends on order payment status:
 * + UNSPECIFIED, NOT_PAID: price_summary.total_price
 * + PARTIALLY_PAID : price_summary.total_price - pay_now.total_price
 * + PENDING, REFUNDED, PARTIALLY_REFUNDED, PAID : 0
 */
interface Balance$1 {
    /**
     * Balance amount.
     *
     * A negative `amount` represents the amount to be refunded. This can happen due to overcharging or the order being modified after a payment has been made.
     * @readonly
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
/** Side-effects upon committing a draft order. */
interface DraftOrderCommitSettings$1 {
    /**
     * Whether to send notifications to the buyer.
     *
     * Default: `true`
     */
    sendNotificationsToBuyer?: boolean | null;
    /**
     * Whether to send notifications to the business.
     *
     * Default: `true`
     */
    sendNotificationsToBusiness?: boolean | null;
    /**
     * Whether to add activities to the order.
     *
     * Default: `true`
     */
    addActivitiesToOrder?: boolean | null;
    /**
     * Whether to send email notifications to custom fulfillers when there is a change in the shippable items they fulfill.
     *
     * Default: `true`
     */
    sendNotificationsToCustomFulfillers?: boolean | null;
    /**
     * Line item IDs for which to perform an inventory change.
     * When not provided, inventory will not change.
     */
    updateInventory?: InventoryUpdate[];
}
interface InventoryUpdate {
    /** Line item ID. */
    lineItemId?: string;
}
interface RecipientInfoDetails extends RecipientInfoDetailsChangeTypeOneOf {
    /** Indicates that recipient information was added during draft. */
    added?: boolean;
    /** Indicates that recipient information was changed. Contains recipient information before draft. */
    changedDetails?: RecipientInfoChangedDetails;
    /** Indicates that recipient information was removed during draft. */
    removed?: boolean;
    /** Order recipient address and contact details. */
    recipientInfo?: AddressWithContact$1;
}
/** @oneof */
interface RecipientInfoDetailsChangeTypeOneOf {
    /** Indicates that recipient information was added during draft. */
    added?: boolean;
    /** Indicates that recipient information was changed. Contains recipient information before draft. */
    changedDetails?: RecipientInfoChangedDetails;
    /** Indicates that recipient information was removed during draft. */
    removed?: boolean;
}
interface RecipientInfoChangedDetails {
    /** Order recipient address and contact details before draft. */
    recipientInfoBeforeChange?: AddressWithContact$1;
}
interface OrderTaxInfo$1 {
    /** Calculated tax, added from line items. */
    totalTax?: Price$4;
    /** The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate. */
    taxBreakdown?: OrderTaxBreakdown$1[];
    /**
     * Whether the draft order is exempt from tax calculations.
     *
     * Default: `false`
     * @readonly
     */
    taxExempt?: boolean | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface OrderTaxBreakdown$1 {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionType?: JurisdictionType$2;
    /** The rate at which this tax detail was calculated. */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: Price$4;
}
interface ExtendedFields$5 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface BuyerDetails$1 extends BuyerDetailsChangeTypeOneOf {
}
/** @oneof */
interface BuyerDetailsChangeTypeOneOf {
}
interface BuyerChangedDetails {
}
interface BillingDetails extends BillingDetailsChangeTypeOneOf {
}
/** @oneof */
interface BillingDetailsChangeTypeOneOf {
}
interface BillingChangedDetails {
}
interface CreateDraftOrderRequest {
    /** To create a draft from existing order, provide its id. Otherwise, an empty draft will be created. */
    orderId: string | null;
}
interface CreateDraftOrderResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface CalculatedDraftOrder {
    /**
     * The draft order full details with calculations based on it's content.
     * Discount and additional fee options are also included.
     */
    draftOrder?: DraftOrder;
    /** Shipping options for the order. */
    shippingOptions?: ShippingOption$2[];
    /** Errors that occurred during calculation. */
    calculationErrors?: CalculationErrors$1;
}
interface ShippingOption$2 {
    /** This carrier's unique ID */
    carrierId?: string | null;
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
    /** Shipping rate title. For example, `"USPS Standard Overnight Delivery"`, `"Standard"`, or `"First-Class Package International"`. */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics$3;
    /** Shipping cost. */
    cost?: ShippingPrice$2;
}
interface DeliveryLogistics$3 {
    /** When the item is expected to be delivered in free text, e.g "3-5 business days" */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Ensure to come during Opening Hours, and please don't park in disabled-spot" */
    instructions?: string | null;
    /** Additional pickup details if it's a pickup */
    pickupDetails?: PickupDetails$4;
    /** Expected delivery time slot (from and to time stamps representation) */
    deliveryTimeSlot?: DeliveryTimeSlot$3;
}
interface PickupDetails$4 {
    /** Pickup address */
    address?: Address$6;
    /**
     * Pickup method.
     *
     * Supported values:
     * + `"STORE_PICKUP"`
     * + `"PICKUP_POINT"`
     */
    pickupMethod?: PickupMethod$3;
}
declare enum PickupMethod$3 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$3 {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
interface ShippingPrice$2 {
    /** The shipping rate's price. Must align with the [currency's decimal separator](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). */
    price?: Price$4;
    /** Currency of the shipping rate price as a 3-letter [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217). Must align with the `currency` passed to the function. */
    currency?: string;
}
interface CalculationErrors$1 extends CalculationErrorsShippingCalculationErrorOneOf$1 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$2;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$1;
    /** Tax calculation error. */
    taxCalculationError?: Details$2;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$6[];
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$1 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$2;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$1;
}
interface Details$2 extends DetailsKindOneOf$2 {
    applicationError?: ApplicationError$6;
    validationError?: ValidationError$2;
    systemError?: SystemError$2;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$2 {
    applicationError?: ApplicationError$6;
    validationError?: ValidationError$2;
    systemError?: SystemError$2;
}
interface ApplicationError$6 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$2 {
    fieldViolations?: FieldViolation$2[];
}
declare enum RuleType$2 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$2 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$2;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$2 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$1 {
    /** Carrier errors. */
    errors?: CarrierError$2[];
}
interface CarrierError$2 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$2;
}
interface CreateEmptyDraftOrderRequest {
}
interface CreateEmptyDraftOrderResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface AddLineItemsToDraftOrderRequest {
    /** The draft order id */
    draftOrderId: string;
    /** Catalog line items to add to draft order. */
    catalogLineItems?: CatalogReferenceLineItem[];
    /** Custom line items to add to draft order. Custom line items don't trigger the Catalog service plugin. */
    customLineItems?: CustomLineItem[];
}
interface CatalogReferenceLineItem {
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$4;
    /** Item quantity. */
    quantity?: number;
    /** Item price override. */
    price?: Price$4;
}
interface CustomLineItem {
    /** Line item ID. */
    _id?: string | null;
    /**
     * Item quantity.
     *
     * Min: `"1"`
     * Max: `"100000"`
     */
    quantity?: number;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$4;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName$1;
    /** URL to the item's page on the site. */
    url?: string;
    /** Item price **after** catalog-defined discount and line item discounts. */
    price?: Price$4;
    /** Total line item price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: Price$4;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: Price$4;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: Price$4;
    /** Line item description lines. Used for display purposes for order. */
    descriptionLines?: DescriptionLine$1[];
    /** Line item image details. */
    media?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability. */
    physicalProperties?: PhysicalProperties$3;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$2;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$1;
    /** Delivery Profile Id for the product */
    deliveryProfileId?: string | null;
}
interface SecuredMedia {
    /** Media ID in Wix Media Manager. */
    _id?: string;
    /** Original filename. */
    fileName?: string;
    /** File type. */
    fileType?: FileType;
}
declare enum FileType {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
interface AddLineItemsToDraftOrderResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface UpdateLineItemsRequest {
    /** The draft order id */
    draftOrderId: string;
    /** Details of changes to apply per line item */
    lineItemChanges?: LineItemChangeDetails[];
}
interface LineItemChangeDetails {
    /** The line item id to change */
    lineItemId?: string;
    /** The new quantity for the line item. quantity zero means to remove the line item. */
    newQuantity?: number | null;
    /** The new price for 1 unit of the line item */
    newPrice?: string | null;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    newPriceDescription?: PriceDescription$1;
}
interface UpdateLineItemsResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface SetDiscountsRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The discount ids to opt-in. all existing discounts not listed are to be opted-out. */
    discounts: IdAndApplied[];
}
interface IdAndApplied {
    /** Discount ID. */
    _id?: string;
    /** Whether to apply the discount to the draft order. */
    applied?: boolean;
}
interface SetDiscountsResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface CreateCustomDiscountsRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The discounts to add. */
    discounts?: DiscountOption[];
}
interface DiscountOption extends DiscountOptionDiscountAmountOneOf {
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to a specific item.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: DiscountType$2;
    /**
     * ID of line item discount applies to.
     * @deprecated ID of line item discount applies to.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemId?: string | null;
    /**
     * Discount amount.
     * @deprecated Discount amount.
     * @replacedBy price_amount and percentage
     * @targetRemovalDate 2024-08-30
     */
    amount?: Price$4;
    /** Discount description as free text (optional). */
    description?: string | null;
    /**
     * Should opt-in the added discount. default = false.
     * if not set or false, then to opt-in them, please call SetDiscounts with the added discounts ids
     */
    applyToDraftOrder?: boolean | null;
}
/** @oneof */
interface DiscountOptionDiscountAmountOneOf {
}
declare enum DiscountType$2 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
interface CreateCustomDiscountsResponse {
    /** The draft order details with the added discounts */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface DeleteCustomDiscountsRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The discounts to remove */
    discountIds: string[];
}
interface DeleteCustomDiscountsResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface SetAdditionalFeesRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The additional fees ids to opt-in. all existing additional fees not listed are to be opted-out */
    additionalFees: IdAndApplied[];
}
interface SetAdditionalFeesResponse {
    /** The draft order details calculated with modified additional fees */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface CreateCustomAdditionalFeesRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The additional fees to add. added with opted-out setting */
    customAdditionalFees?: AdditionalFeeOption[];
}
interface AdditionalFeeOption {
    /** Translated additional fee's name */
    name?: string;
    /** Additional fee's price */
    price?: Price$4;
    /** Tax calculation details */
    taxDetails?: TaxDetails$1;
    /**
     * Should apply the additional fee. default = false.
     * if not set or false, then to apply them, please call ApplyAdditionalFees with the added additional fee ids
     */
    applyToDraftOrder?: boolean | null;
    /** Additional fee's unique code (or ID) for future processing */
    code?: string | null;
}
interface CreateCustomAdditionalFeesResponse {
    /** The draft order details with added custom additional fees */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface DeleteCustomAdditionalFeesRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The additional fees to remove */
    customAdditionalFees: string[];
}
interface DeleteCustomAdditionalFeesResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface SetShippingInfoRequest {
}
interface SetShippingInfoResponse {
}
interface SetBuyerInfoRequest {
}
interface SetBuyerInfoResponse {
}
interface SetRecipientInfoRequest {
}
interface SetRecipientInfoResponse {
}
interface SetBillingInfoRequest {
}
interface SetBillingInfoResponse {
}
interface UpdateShippingInfoRequest {
    /** The draft order id */
    draftOrderId?: string;
    /** update the shipping option on the order. if not set then the selected shipping is removed */
    shippingOption?: ShippingOption$2;
}
interface UpdateShippingInfoResponse {
    /** The draft order details calculated with de/selected shipping info */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface GetDraftOrderRequest {
    /** The draft order id */
    draftOrderId: string;
}
interface GetDraftOrderResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface GetOrderDraftabilityStatusRequest {
    /** Order ID. */
    orderId: string;
}
interface GetOrderDraftabilityStatusResponse {
    /** Order ID. */
    orderId?: string;
    /** Whether a draft can be created from this order */
    orderDraftable?: boolean;
    /** Reasons why the order is not draftable */
    nonDraftableReasons?: NonDraftableReason[];
}
declare enum NonDraftableReason {
    UNSPECIFIED = "UNSPECIFIED",
    PARTIALLY_OR_FULLY_REFUNDED = "PARTIALLY_OR_FULLY_REFUNDED",
    UNSUPPORTED_CHANNEL_TYPE = "UNSUPPORTED_CHANNEL_TYPE",
    ORDER_STATUS_IS_NOT_SUPPORTED = "ORDER_STATUS_IS_NOT_SUPPORTED",
    ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT = "ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT",
    ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT = "ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT",
    AMOUNTS_DO_NOT_ADD_UP = "AMOUNTS_DO_NOT_ADD_UP",
    /** remove - this is not a reason, it's an error */
    ORDER_NOT_FOUND = "ORDER_NOT_FOUND",
    SUBSCRIPTION_LINE_ITEM_EXISTS = "SUBSCRIPTION_LINE_ITEM_EXISTS",
    UNSUPPORTED_CATALOG_ITEM = "UNSUPPORTED_CATALOG_ITEM",
    TAXABLE_EXISTING_ADDITIONAL_FEE = "TAXABLE_EXISTING_ADDITIONAL_FEE"
}
interface GetDraftEditabilityStatusRequest {
    /** Draft order ID. */
    draftOrderId?: string | null;
}
interface GetDraftEditabilityStatusResponse {
    /** Draft order ID. */
    draftOrderId?: string | null;
    /**
     * Draft order status.
     * @readonly
     */
    status?: EditingStatus;
}
interface CommitDraftOrderRequest {
    /** The draft order id */
    draftOrderId: string;
    /** Optional side effects to trigger */
    commitSettings?: DraftOrderCommitSettings$1;
    /** Reason for edit, given by user (optional). */
    reason?: string | null;
}
interface CommitDraftOrderResponse {
    /** The draft order after commit. */
    committedDraftOrder?: DraftOrder;
    /** The updated order after commit. */
    orderAfterCommit?: Order$2;
}
interface Order$2 {
    /**
     * Order ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Order number displayed in the site owner's dashboard (auto-generated).
     * @readonly
     */
    number?: string;
    /**
     * Date and time the order was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Order line items.
     * @readonly
     */
    lineItems?: OrderLineItem$1[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo$3;
    /**
     * Order payment status.
     * + `NOT_PAID` - This can be an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.
     * + This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.
     * + `PAID` - All payments associated with this order are paid. For online payments: [`payment.regularPaymentDetails.status: APPROVED`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object). For gift cards: [`payment.giftCardPaymentDetails.voided: false`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object).
     * + `PARTIALLY_REFUNDED` - Order was refunded, but refund amount is less than order total price.
     * + `FULLY_REFUNDED` - Order fully refunded. Refund amount equals total price.
     * + `PENDING` - Payments received but not yet confirmed by the payment provider.
     * + `PARTIALLY_PAID` -  At least one payment was received and approved, covering less than total price amount.
     */
    paymentStatus?: PaymentStatus$2;
    /**
     * Order fulfillment status.
     * @readonly
     */
    fulfillmentStatus?: FulfillmentStatus$3;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$4;
    /** Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format. */
    currency?: string | null;
    /** Whether tax is included in line item prices. */
    taxIncludedInPrices?: boolean;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary$2;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact$1;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: V1ShippingInformation$1;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /**
     * Order status.
     * + `INITIALIZED`: Order created, but not yet approved or canceled.
     * + `APPROVED`: Order approved. This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order). Offline orders (cash payment) are automatically approved.
     * + `CANCELED`: Order canceled by the user.
     */
    status?: OrderStatus$1;
    /** Whether order is archived. */
    archived?: boolean | null;
    /**
     * Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @deprecated Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary$2;
    /** Tax information. */
    taxInfo?: OrderTaxInfo$1;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$2[];
    /**
     * Order activities.
     * @readonly
     */
    activities?: Activity$2[];
    /** Order attribution source. */
    attributionSource?: AttributionSource$1;
    /**
     * ID of the order's initiator.
     * @readonly
     */
    createdBy?: V1CreatedBy;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo$2;
    /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */
    seenByAHuman?: boolean | null;
    /** Checkout ID. */
    checkoutId?: string | null;
    /** Custom fields. */
    customFields?: CustomField$2[];
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: V1BalanceSummary;
    /** Additional fees applied to the order. */
    additionalFees?: AdditionalFee$2[];
    /**
     * Custom field data for the order object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$5;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact$1;
    /**
     * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * Used for migration from external systems.
     */
    purchasedDate?: Date | null;
}
declare enum PaymentStatus$2 {
    UNSPECIFIED = "UNSPECIFIED",
    /** Order is not paid */
    NOT_PAID = "NOT_PAID",
    /** Order is paid */
    PAID = "PAID",
    /** Order was refunded, refund amount less than order total price */
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    /** Full order total price was refunded */
    FULLY_REFUNDED = "FULLY_REFUNDED",
    /** Payments received but not yet confirmed by the payment provider */
    PENDING = "PENDING",
    /** At least one payment was received and approved, covering less than total price amount */
    PARTIALLY_PAID = "PARTIALLY_PAID"
}
declare enum FulfillmentStatus$3 {
    /** none of the order items are fulfilled or order was manually marked as unfulfilled */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled or order was manually marked as fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FULFILLED = "FULFILLED",
    /** Some, but not all of the order items are fulfilled */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
declare enum OrderStatus$1 {
    INITIALIZED = "INITIALIZED",
    APPROVED = "APPROVED",
    CANCELED = "CANCELED"
}
interface Activity$2 extends ActivityContentOneOf$1 {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity$1;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment$1;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded$2;
    /**
     * Activity ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Activity author's email.
     * @readonly
     */
    authorEmail?: string | null;
    /**
     * Activity creation date and time.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Activity type. */
    type?: ActivityType$2;
}
/** @oneof */
interface ActivityContentOneOf$1 {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity$1;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment$1;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded$2;
}
interface CustomActivity$1 {
    /** ID of the app that created the custom activity. */
    appId?: string;
    /** Custom activity type. For example, `"Ticket number set"`. */
    type?: string;
    /** Additional data in key-value form. For example, `{ "Ticket number": "123456" }`. */
    additionalData?: Record<string, string>;
}
/** Store owner added a comment */
interface MerchantComment$1 {
    /** Merchant comment message. */
    message?: string;
}
interface OrderRefunded$2 {
    /** Whether order was refunded manually. For example, via payment provider or using cash. */
    manual?: boolean;
    /** Refund amount. */
    amount?: Price$4;
    /** Reason for refund. */
    reason?: string;
}
interface OrderCreatedFromExchange$1 {
    /** ID of the original order for which the exchange happened. */
    originalOrderId?: string;
}
interface NewExchangeOrderCreated$1 {
    /** ID of the new order created as a result of an exchange of items. */
    exchangeOrderId?: string;
    /** IDs of the items that were exchanged. */
    lineItems?: LineItemExchangeData$1[];
}
interface LineItemExchangeData$1 {
    /** ID of the exchanged line item. */
    lineItemId?: string;
    /** Line item quantity being exchanged. */
    quantity?: number;
}
interface DraftOrderChangesApplied$1 {
    /** Draft order id. */
    draftOrderId?: string;
    /** Reason for edit, given by user (optional). */
    reason?: string | null;
    /** Changes applied to order. */
    changes?: OrderChange$1[];
}
interface OrderChange$1 extends OrderChangeValueOneOf$1 {
    lineItemChanged?: LineItemChanges$1;
    lineItemAdded?: ManagedLineItem$1;
    lineItemRemoved?: ManagedLineItem$1;
    discountAdded?: ManagedDiscount$1;
    discountRemoved?: ManagedDiscount$1;
    additionalFeeAdded?: ManagedAdditionalFee$1;
    additionalFeeRemoved?: ManagedAdditionalFee$1;
    totalPriceChanged?: TotalPriceChange$1;
    shippingInformationChanged?: ShippingInformationChange$1;
}
/** @oneof */
interface OrderChangeValueOneOf$1 {
    lineItemChanged?: LineItemChanges$1;
    lineItemAdded?: ManagedLineItem$1;
    lineItemRemoved?: ManagedLineItem$1;
    discountAdded?: ManagedDiscount$1;
    discountRemoved?: ManagedDiscount$1;
    additionalFeeAdded?: ManagedAdditionalFee$1;
    additionalFeeRemoved?: ManagedAdditionalFee$1;
    totalPriceChanged?: TotalPriceChange$1;
    shippingInformationChanged?: ShippingInformationChange$1;
}
interface LineItemChanges$1 {
    /** Line item ID. */
    _id?: string;
    /** Item name. */
    name?: ProductName$1;
    /** Item quantity change. */
    quantity?: LineItemQuantityChange$1;
    /** Item price change. */
    price?: LineItemPriceChange$1;
}
interface LineItemQuantityChange$1 {
    /** Item quantity before update. */
    originalQuantity?: number;
    /** Item quantity after update. */
    newQuantity?: number;
    /** Difference between original and new quantity. Absolute value. */
    diff?: number;
    /** Type of quantity change: increase or decrease. */
    deltaType?: LineItemQuantityChangeType$1;
}
declare enum LineItemQuantityChangeType$1 {
    QUANTITY_INCREASED = "QUANTITY_INCREASED",
    QUANTITY_DECREASED = "QUANTITY_DECREASED"
}
interface LineItemPriceChange$1 {
    /** Item price before update. */
    originalPrice?: Price$4;
    /** Item price after update. */
    newPrice?: Price$4;
}
interface ManagedLineItem$1 {
    /** Line item ID. */
    _id?: string;
    /** Item name. */
    name?: ProductName$1;
    /** Added or removed item quantity. */
    quantity?: number;
}
interface ManagedDiscount$1 {
    /** Discount id. */
    _id?: string;
    /** Discount name: coupon name / discount rule name / merchant discount description. */
    name?: TranslatedValue$1;
    /** Line items discount applies to. */
    affectedLineItems?: LineItemAmount$1[];
    /** Discount amount. */
    totalAmount?: Price$4;
}
interface TranslatedValue$1 {
    /** Value in site default language. */
    original?: string;
    /** Translated value. */
    translated?: string | null;
}
interface LineItemAmount$1 {
    /** Order line item id */
    _id?: string;
    /** Item name. */
    name?: ProductName$1;
    /** Amount associated with this item. (Discount amount for item / additional fee amount for item) */
    amount?: Price$4;
}
interface ManagedAdditionalFee$1 {
    /** Additional fee id. */
    _id?: string;
    /** Additional fee name. */
    name?: TranslatedValue$1;
    /** Line items additional fee applies to. */
    affectedLineItems?: LineItemAmount$1[];
    /** Additional fee amount. */
    totalAmount?: Price$4;
}
interface TotalPriceChange$1 {
    /** Order’s total price after discounts and tax. Before update */
    originalTotal?: Price$4;
    /** Order’s total price after discounts and tax. After update */
    newTotal?: Price$4;
}
interface ShippingInformationChange$1 {
    /** Order’s Shipping Information. Before update */
    originalShippingInfo?: ShippingInformation$2;
    /** Order’s Shipping Information. After update */
    newShippingInfo?: ShippingInformation$2;
}
interface ShippingInformation$2 {
    /** Order’s shipping price. */
    total?: Price$4;
    /** Order’s shipping title. */
    shippingTitle?: string;
}
/** Payment method is saved for order */
interface SavedPaymentMethod$1 {
    /** Payment method name */
    name?: string;
    /** Payment method description */
    description?: string | null;
}
interface AuthorizedPaymentCreated$1 {
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
    /** Payment amount */
    amount?: Price$4;
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface AuthorizedPaymentCaptured$1 {
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
    /** Payment amount */
    amount?: Price$4;
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface AuthorizedPaymentVoided$1 {
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
    /** Payment amount */
    amount?: Price$4;
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface RefundInitiated$1 {
    /** Refund ID. */
    refundId?: string;
    /** Refund amount. */
    amount?: Price$4;
    /** Details about the payments being refunded. */
    payments?: RefundedPayment$1[];
    /** Reason for refund. */
    reason?: string | null;
}
interface RefundedPayment$1 extends RefundedPaymentKindOneOf$1 {
    /** Regular payment refund. */
    regular?: RegularPaymentRefund$1;
    /** Gift card payment refund. */
    giftCard?: GiftCardPaymentRefund$1;
    /** Membership payment refund. */
    membership?: MembershipPaymentRefund$1;
    /** Payment ID. */
    paymentId?: string;
    /** Whether refund was made externally and manually on the payment provider's side. */
    externalRefund?: boolean;
}
/** @oneof */
interface RefundedPaymentKindOneOf$1 {
    /** Regular payment refund. */
    regular?: RegularPaymentRefund$1;
    /** Gift card payment refund. */
    giftCard?: GiftCardPaymentRefund$1;
    /** Membership payment refund. */
    membership?: MembershipPaymentRefund$1;
}
interface RegularPaymentRefund$1 {
    /** Refund amount */
    amount?: Price$4;
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface GiftCardPaymentRefund$1 {
    /** Gift card payment ID */
    giftCardPaymentId?: string | null;
    /** Refund amount */
    amount?: Price$4;
}
interface MembershipPaymentRefund$1 {
    /** Membership ID */
    membershipId?: string | null;
}
interface PaymentRefunded$1 {
    /** Refund ID. */
    refundId?: string;
    /** Details about the refunded payment. */
    payment?: RefundedPayment$1;
}
interface PaymentRefundFailed$1 {
    /** Refund ID. */
    refundId?: string;
    /** Details about the failed payment refund. */
    payment?: RefundedPayment$1;
}
interface RefundedAsStoreCredit$1 {
    /** Refund amount */
    amount?: Price$4;
    /** Reason for refund */
    reason?: string | null;
}
interface PaymentPending$1 extends PaymentPendingPaymentDetailsOneOf$1 {
    /** Regular payment. */
    regular?: RegularPayment$1;
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
}
/** @oneof */
interface PaymentPendingPaymentDetailsOneOf$1 {
    /** Regular payment. */
    regular?: RegularPayment$1;
}
interface RegularPayment$1 extends RegularPaymentPaymentMethodDetailsOneOf$1 {
    /** Whether regular card used */
    creditCardDetails?: CreditCardDetails$1;
    /** Payment amount */
    amount?: Price$4;
}
/** @oneof */
interface RegularPaymentPaymentMethodDetailsOneOf$1 {
    /** Whether regular card used */
    creditCardDetails?: CreditCardDetails$1;
}
interface CreditCardDetails$1 {
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface PaymentCanceled$1 extends PaymentCanceledPaymentDetailsOneOf$1 {
    /** Regular payment. */
    regular?: RegularPayment$1;
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
}
/** @oneof */
interface PaymentCanceledPaymentDetailsOneOf$1 {
    /** Regular payment. */
    regular?: RegularPayment$1;
}
interface PaymentDeclined$1 extends PaymentDeclinedPaymentDetailsOneOf$1 {
    /** Regular payment. */
    regular?: RegularPayment$1;
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
}
/** @oneof */
interface PaymentDeclinedPaymentDetailsOneOf$1 {
    /** Regular payment. */
    regular?: RegularPayment$1;
}
declare enum ActivityType$2 {
    ORDER_REFUNDED = "ORDER_REFUNDED",
    ORDER_PLACED = "ORDER_PLACED",
    ORDER_PAID = "ORDER_PAID",
    ORDER_FULFILLED = "ORDER_FULFILLED",
    ORDER_NOT_FULFILLED = "ORDER_NOT_FULFILLED",
    ORDER_CANCELED = "ORDER_CANCELED",
    DOWNLOAD_LINK_SENT = "DOWNLOAD_LINK_SENT",
    TRACKING_NUMBER_ADDED = "TRACKING_NUMBER_ADDED",
    TRACKING_NUMBER_EDITED = "TRACKING_NUMBER_EDITED",
    TRACKING_LINK_ADDED = "TRACKING_LINK_ADDED",
    SHIPPING_CONFIRMATION_EMAIL_SENT = "SHIPPING_CONFIRMATION_EMAIL_SENT",
    INVOICE_ADDED = "INVOICE_ADDED",
    INVOICE_REMOVED = "INVOICE_REMOVED",
    INVOICE_SENT = "INVOICE_SENT",
    FULFILLER_EMAIL_SENT = "FULFILLER_EMAIL_SENT",
    SHIPPING_ADDRESS_EDITED = "SHIPPING_ADDRESS_EDITED",
    EMAIL_EDITED = "EMAIL_EDITED",
    PICKUP_READY_EMAIL_SENT = "PICKUP_READY_EMAIL_SENT",
    CUSTOM_ACTIVITY = "CUSTOM_ACTIVITY",
    MERCHANT_COMMENT = "MERCHANT_COMMENT",
    ORDER_CREATED_FROM_EXCHANGE = "ORDER_CREATED_FROM_EXCHANGE",
    NEW_EXCHANGE_ORDER_CREATED = "NEW_EXCHANGE_ORDER_CREATED",
    ORDER_PARTIALLY_PAID = "ORDER_PARTIALLY_PAID",
    DRAFT_ORDER_CHANGES_APPLIED = "DRAFT_ORDER_CHANGES_APPLIED",
    SAVED_PAYMENT_METHOD = "SAVED_PAYMENT_METHOD"
}
declare enum AttributionSource$1 {
    UNSPECIFIED = "UNSPECIFIED",
    FACEBOOK_ADS = "FACEBOOK_ADS"
}
interface V1CreatedBy extends V1CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
/** @oneof */
interface V1CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
interface ChannelInfo$2 {
    /** Sales channel that submitted the order. */
    type?: ChannelType$2;
    /** Reference to an order ID from an external system. */
    externalOrderId?: string | null;
    /** URL to the order in the external system. */
    externalOrderUrl?: string | null;
}
declare enum ChannelType$2 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CustomField$2 {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
interface V1BalanceSummary {
    /**
     * Current amount left to pay.
     * @readonly
     */
    balance?: Balance$1;
    /**
     * Sum of all approved and successful payments.
     *
     * The value includes payments that have subsequently been fully or partially refunded.
     * @readonly
     */
    paid?: Price$4;
    /**
     * Sum of all successfully refunded payments.
     * @readonly
     */
    refunded?: Price$4;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price$4;
}
interface FulfillmentStatusesAggregate$1 {
    /** Unique string values based on Fulfillment entities statuses */
    statuses?: string[] | null;
}
/**
 * Common object for tags.
 * Should be use as in this example:
 * message Foo {
 * string id = 1;
 * ...
 * Tags tags = 5
 * }
 *
 * example of taggable entity
 * {
 * id: "123"
 * tags: {
 * tags: {
 * tag_ids:["11","22"]
 * },
 * private_tags: {
 * tag_ids: ["33", "44"]
 * }
 * }
 * }
 */
interface Tags$1 {
    /** Tags that require an additional permission in order to access them, normally not given to site members or visitors. */
    privateTags?: TagList$1;
    /** Tags that are exposed to anyone who has access to the labeled entity itself, including site members and visitors. */
    tags?: TagList$1;
}
interface TagList$1 {
    /** List of tag IDs */
    tagIds?: string[];
}
interface CreateOrderFromDraftRequest {
}
interface OrderCreateSettings {
}
interface OrderCreateNotifications$1 {
}
interface CreateOrderFromDraftResponse {
}
interface DeleteDraftOrderRequest {
    /** The draft order id */
    draftOrderId: string;
}
interface DeleteDraftOrderResponse {
}
interface QueryDraftOrdersRequest {
    /** WQL expression */
    query?: CursorQuery$5;
}
interface CursorQuery$5 extends CursorQueryPagingMethodOneOf$5 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$9;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$9[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$5 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$9;
}
interface Sorting$9 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$9;
}
declare enum SortOrder$9 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$9 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryDraftOrdersResponse {
    /** list of edits per order */
    draftOrders?: DraftOrder[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$8;
}
interface CursorPagingMetadata$8 {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$9;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$9 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateExtendedFieldsRequest$3 {
    /** ID of the entity to update. */
    _id?: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace?: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData?: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse$3 {
    /** Updated DraftOrder */
    draftOrder?: DraftOrder;
}
interface SetTaxExemptionRequest {
}
interface SetTaxExemptionResponse {
}
interface DomainEvent$c extends DomainEventBodyOneOf$c {
    createdEvent?: EntityCreatedEvent$c;
    updatedEvent?: EntityUpdatedEvent$c;
    deletedEvent?: EntityDeletedEvent$c;
    actionEvent?: ActionEvent$c;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$c {
    createdEvent?: EntityCreatedEvent$c;
    updatedEvent?: EntityUpdatedEvent$c;
    deletedEvent?: EntityDeletedEvent$c;
    actionEvent?: ActionEvent$c;
}
interface EntityCreatedEvent$c {
    entity?: string;
}
interface RestoreInfo$c {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$c {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$c {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$c {
    body?: string;
}
interface MessageEnvelope$b {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$c;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$c extends IdentificationDataIdOneOf$c {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$b;
}
/** @oneof */
interface IdentificationDataIdOneOf$c {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$b {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface PriceNonNullableFields$4 {
    amount: string;
    formattedAmount: string;
}
interface PriceDescriptionNonNullableFields$1 {
    original: string;
}
interface ItemChangedDetailsNonNullableFields {
    priceBeforeChange?: PriceNonNullableFields$4;
    priceDescriptionBeforeChange?: PriceDescriptionNonNullableFields$1;
}
interface ProductNameNonNullableFields$1 {
    original: string;
}
interface CatalogReferenceNonNullableFields$1 {
    catalogItemId: string;
    appId: string;
}
interface PlainTextValueNonNullableFields$1 {
    original: string;
}
interface ColorNonNullableFields$1 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$1 {
    original: string;
}
interface DescriptionLineNonNullableFields$1 {
    plainText?: PlainTextValueNonNullableFields$1;
    colorInfo?: ColorNonNullableFields$1;
    plainTextValue?: PlainTextValueNonNullableFields$1;
    color: string;
    name?: DescriptionLineNameNonNullableFields$1;
    lineType: DescriptionLineType$1;
}
interface PhysicalPropertiesNonNullableFields$1 {
    shippable: boolean;
}
interface ItemTypeNonNullableFields$1 {
    preset: ItemTypeItemType$2;
    custom: string;
}
interface ItemTaxFullDetailsNonNullableFields$2 {
    taxableAmount?: PriceNonNullableFields$4;
    taxRate: string;
    totalTax?: PriceNonNullableFields$4;
}
interface LineItemTaxBreakdownNonNullableFields$1 {
    taxAmount?: PriceNonNullableFields$4;
    jurisdictionType: JurisdictionType$2;
    nonTaxableAmount?: PriceNonNullableFields$4;
    taxableAmount?: PriceNonNullableFields$4;
}
interface LineItemTaxInfoNonNullableFields$1 {
    taxAmount?: PriceNonNullableFields$4;
    taxableAmount?: PriceNonNullableFields$4;
    taxIncludedInPrice: boolean;
    taxBreakdown: LineItemTaxBreakdownNonNullableFields$1[];
}
interface DigitalFileNonNullableFields$1 {
    fileId: string;
}
interface SubscriptionSettingsNonNullableFields$1 {
    frequency: SubscriptionFrequency$3;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
}
interface SubscriptionInfoNonNullableFields$1 {
    cycleNumber: number;
    subscriptionOptionTitle: string;
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$1;
}
interface LocationAndQuantityNonNullableFields$1 {
    _id: string;
    quantity: number;
}
interface TaxableAddressNonNullableFields$2 {
    addressType: TaxableAddressType$2;
}
interface OrderLineItemNonNullableFields$1 {
    _id: string;
    productName?: ProductNameNonNullableFields$1;
    catalogReference?: CatalogReferenceNonNullableFields$1;
    quantity: number;
    totalDiscount?: PriceNonNullableFields$4;
    descriptionLines: DescriptionLineNonNullableFields$1[];
    image: string;
    physicalProperties?: PhysicalPropertiesNonNullableFields$1;
    itemType?: ItemTypeNonNullableFields$1;
    price?: PriceNonNullableFields$4;
    priceBeforeDiscounts?: PriceNonNullableFields$4;
    totalPriceBeforeTax?: PriceNonNullableFields$4;
    totalPriceAfterTax?: PriceNonNullableFields$4;
    paymentOption: PaymentOptionType$2;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$2;
    taxInfo?: LineItemTaxInfoNonNullableFields$1;
    digitalFile?: DigitalFileNonNullableFields$1;
    subscriptionInfo?: SubscriptionInfoNonNullableFields$1;
    priceDescription?: PriceDescriptionNonNullableFields$1;
    depositAmount?: PriceNonNullableFields$4;
    locations: LocationAndQuantityNonNullableFields$1[];
    lineItemPrice?: PriceNonNullableFields$4;
    taxableAddress?: TaxableAddressNonNullableFields$2;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
}
interface ItemDetailsNonNullableFields {
    added: boolean;
    changedDetails?: ItemChangedDetailsNonNullableFields;
    removed: boolean;
    lineItem?: OrderLineItemNonNullableFields$1;
}
interface StreetAddressNonNullableFields$5 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$5 {
    streetAddress?: StreetAddressNonNullableFields$5;
}
interface VatIdNonNullableFields$1 {
    _id: string;
    type: VatType$3;
}
interface FullAddressContactDetailsNonNullableFields$1 {
    vatId?: VatIdNonNullableFields$1;
}
interface AddressWithContactNonNullableFields$1 {
    address?: AddressNonNullableFields$5;
    contactDetails?: FullAddressContactDetailsNonNullableFields$1;
}
interface PickupAddressNonNullableFields$1 {
    streetAddress?: StreetAddressNonNullableFields$5;
}
interface V1PickupDetailsNonNullableFields {
    address?: PickupAddressNonNullableFields$1;
    pickupMethod: PickupDetailsPickupMethod;
}
interface V1DeliveryLogisticsNonNullableFields {
    shippingDestination?: AddressWithContactNonNullableFields$1;
    pickupDetails?: V1PickupDetailsNonNullableFields;
}
interface V1ShippingPriceNonNullableFields {
    price?: PriceNonNullableFields$4;
    totalPriceBeforeTax?: PriceNonNullableFields$4;
    totalPriceAfterTax?: PriceNonNullableFields$4;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$2;
    discount?: PriceNonNullableFields$4;
}
interface V1ShippingInformationNonNullableFields$1 {
    title: string;
    logistics?: V1DeliveryLogisticsNonNullableFields;
    cost?: V1ShippingPriceNonNullableFields;
}
interface ShippingChangedDetailsNonNullableFields {
    shippingInfoBeforeChange?: V1ShippingInformationNonNullableFields$1;
}
interface ShippingDetailsNonNullableFields {
    added: boolean;
    changedDetails?: ShippingChangedDetailsNonNullableFields;
    removed: boolean;
    shippingInfo?: V1ShippingInformationNonNullableFields$1;
}
interface BuyerInfoNonNullableFields$1 {
    visitorId: string;
    memberId: string;
}
interface AdditionalFeeNonNullableFields$1 {
    name: string;
    price?: PriceNonNullableFields$4;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$2;
    priceBeforeTax?: PriceNonNullableFields$4;
    priceAfterTax?: PriceNonNullableFields$4;
    _id: string;
    lineItemIds: string[];
}
interface TaxDetailsNonNullableFields {
    taxable: boolean;
}
interface AdditionalFeeDetailsNonNullableFields {
    additionalFee?: AdditionalFeeNonNullableFields$1;
    taxDetails?: TaxDetailsNonNullableFields;
    source: SourceType$1;
    applied: boolean;
}
interface CouponNonNullableFields$2 {
    _id: string;
    code: string;
    name: string;
    amount?: PriceNonNullableFields$4;
}
interface MerchantDiscountNonNullableFields$2 {
    discountReason: DiscountReason$1;
    amount?: PriceNonNullableFields$4;
}
interface DiscountRuleNameNonNullableFields$2 {
    original: string;
}
interface DiscountRuleNonNullableFields$2 {
    _id: string;
    name?: DiscountRuleNameNonNullableFields$2;
    amount?: PriceNonNullableFields$4;
}
interface LineItemDiscountNonNullableFields$2 {
    _id: string;
    totalDiscount?: PriceNonNullableFields$4;
}
interface AppliedDiscountNonNullableFields$2 {
    coupon?: CouponNonNullableFields$2;
    merchantDiscount?: MerchantDiscountNonNullableFields$2;
    discountRule?: DiscountRuleNonNullableFields$2;
    discountType: AppliedDiscountDiscountType;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$2[];
}
interface DiscountDetailsNonNullableFields {
    discount?: AppliedDiscountNonNullableFields$2;
    source: SourceType$1;
    applied: boolean;
}
interface CreatedByNonNullableFields$1 {
    userId: string;
    appId: string;
}
interface PriceSummaryNonNullableFields$2 {
    subtotal?: PriceNonNullableFields$4;
    shipping?: PriceNonNullableFields$4;
    tax?: PriceNonNullableFields$4;
    discount?: PriceNonNullableFields$4;
    totalPrice?: PriceNonNullableFields$4;
    total?: PriceNonNullableFields$4;
    totalWithGiftCard?: PriceNonNullableFields$4;
    totalWithoutGiftCard?: PriceNonNullableFields$4;
    totalAdditionalFees?: PriceNonNullableFields$4;
}
interface TaxSummaryNonNullableFields$2 {
    totalTax?: PriceNonNullableFields$4;
}
interface BalanceNonNullableFields$1 {
    amount: string;
    formattedAmount: string;
}
interface BalanceSummaryNonNullableFields$1 {
    balance?: BalanceNonNullableFields$1;
    paid?: PriceNonNullableFields$4;
    refunded?: PriceNonNullableFields$4;
    authorized?: PriceNonNullableFields$4;
}
interface InventoryUpdateNonNullableFields {
    lineItemId: string;
}
interface DraftOrderCommitSettingsNonNullableFields {
    updateInventory: InventoryUpdateNonNullableFields[];
}
interface RecipientInfoChangedDetailsNonNullableFields {
    recipientInfoBeforeChange?: AddressWithContactNonNullableFields$1;
}
interface RecipientInfoDetailsNonNullableFields {
    added: boolean;
    changedDetails?: RecipientInfoChangedDetailsNonNullableFields;
    removed: boolean;
    recipientInfo?: AddressWithContactNonNullableFields$1;
}
interface OrderTaxBreakdownNonNullableFields$1 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionType: JurisdictionType$2;
    rate: string;
    aggregatedTaxAmount?: PriceNonNullableFields$4;
    aggregatedTaxableAmount?: PriceNonNullableFields$4;
}
interface OrderTaxInfoNonNullableFields$1 {
    totalTax?: PriceNonNullableFields$4;
    taxBreakdown: OrderTaxBreakdownNonNullableFields$1[];
}
interface BuyerChangedDetailsNonNullableFields {
    buyerInfoBeforeChange?: BuyerInfoNonNullableFields$1;
}
interface BuyerDetailsNonNullableFields {
    added: boolean;
    changedDetails?: BuyerChangedDetailsNonNullableFields;
    removed: boolean;
    buyerInfo?: BuyerInfoNonNullableFields$1;
}
interface BillingChangedDetailsNonNullableFields {
    billingInfoBeforeChange?: AddressWithContactNonNullableFields$1;
}
interface BillingDetailsNonNullableFields {
    added: boolean;
    changedDetails?: BillingChangedDetailsNonNullableFields;
    removed: boolean;
    billingInfo?: AddressWithContactNonNullableFields$1;
}
interface DraftOrderNonNullableFields {
    lineItems: ItemDetailsNonNullableFields[];
    shippingInfo?: ShippingDetailsNonNullableFields;
    buyerInfo?: BuyerInfoNonNullableFields$1;
    billingInfo?: AddressWithContactNonNullableFields$1;
    additionalFees: AdditionalFeeDetailsNonNullableFields[];
    discounts: DiscountDetailsNonNullableFields[];
    createdBy?: CreatedByNonNullableFields$1;
    status: EditingStatus;
    weightUnit: WeightUnit$4;
    priceSummary?: PriceSummaryNonNullableFields$2;
    taxSummary?: TaxSummaryNonNullableFields$2;
    balanceSummary?: BalanceSummaryNonNullableFields$1;
    commitSettings?: DraftOrderCommitSettingsNonNullableFields;
    recipientInfo?: RecipientInfoDetailsNonNullableFields;
    taxInfo?: OrderTaxInfoNonNullableFields$1;
    buyerDetails?: BuyerDetailsNonNullableFields;
    billingDetails?: BillingDetailsNonNullableFields;
}
interface PickupDetailsNonNullableFields$3 {
    address?: AddressNonNullableFields$5;
    pickupMethod: PickupMethod$3;
}
interface DeliveryLogisticsNonNullableFields$3 {
    pickupDetails?: PickupDetailsNonNullableFields$3;
}
interface ShippingPriceNonNullableFields$2 {
    price?: PriceNonNullableFields$4;
    currency: string;
}
interface ShippingOptionNonNullableFields$2 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$3;
    cost?: ShippingPriceNonNullableFields$2;
}
interface ApplicationErrorNonNullableFields$6 {
    code: string;
    description: string;
}
interface FieldViolationNonNullableFields$2 {
    field: string;
    description: string;
    violatedRule: RuleType$2;
}
interface ValidationErrorNonNullableFields$2 {
    fieldViolations: FieldViolationNonNullableFields$2[];
}
interface DetailsNonNullableFields$2 {
    applicationError?: ApplicationErrorNonNullableFields$6;
    validationError?: ValidationErrorNonNullableFields$2;
}
interface CarrierErrorNonNullableFields$1 {
    carrierId: string;
    error?: DetailsNonNullableFields$2;
}
interface CarrierErrorsNonNullableFields$1 {
    errors: CarrierErrorNonNullableFields$1[];
}
interface CalculationErrorsNonNullableFields$1 {
    generalShippingCalculationError?: DetailsNonNullableFields$2;
    carrierErrors?: CarrierErrorsNonNullableFields$1;
    taxCalculationError?: DetailsNonNullableFields$2;
    orderValidationErrors: ApplicationErrorNonNullableFields$6[];
}
interface CalculatedDraftOrderNonNullableFields {
    draftOrder?: DraftOrderNonNullableFields;
    shippingOptions: ShippingOptionNonNullableFields$2[];
    calculationErrors?: CalculationErrorsNonNullableFields$1;
}
interface CreateDraftOrderResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface CreateEmptyDraftOrderResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface AddLineItemsToDraftOrderResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface UpdateLineItemsResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetDiscountsResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface CreateCustomDiscountsResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface DeleteCustomDiscountsResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetAdditionalFeesResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface CreateCustomAdditionalFeesResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface DeleteCustomAdditionalFeesResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetShippingInfoResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetBuyerInfoResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetRecipientInfoResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetBillingInfoResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface GetDraftOrderResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface GetOrderDraftabilityStatusResponseNonNullableFields {
    orderId: string;
    orderDraftable: boolean;
    nonDraftableReasons: NonDraftableReason[];
}
interface CustomActivityNonNullableFields$1 {
    appId: string;
    type: string;
}
interface MerchantCommentNonNullableFields$1 {
    message: string;
}
interface OrderRefundedNonNullableFields$1 {
    manual: boolean;
    amount?: PriceNonNullableFields$4;
    reason: string;
}
interface OrderCreatedFromExchangeNonNullableFields$1 {
    originalOrderId: string;
}
interface LineItemExchangeDataNonNullableFields$1 {
    lineItemId: string;
    quantity: number;
}
interface NewExchangeOrderCreatedNonNullableFields$1 {
    exchangeOrderId: string;
    lineItems: LineItemExchangeDataNonNullableFields$1[];
}
interface LineItemQuantityChangeNonNullableFields$1 {
    originalQuantity: number;
    newQuantity: number;
    diff: number;
    deltaType: LineItemQuantityChangeType$1;
}
interface LineItemPriceChangeNonNullableFields$1 {
    originalPrice?: PriceNonNullableFields$4;
    newPrice?: PriceNonNullableFields$4;
}
interface LineItemChangesNonNullableFields$1 {
    _id: string;
    name?: ProductNameNonNullableFields$1;
    quantity?: LineItemQuantityChangeNonNullableFields$1;
    price?: LineItemPriceChangeNonNullableFields$1;
}
interface ManagedLineItemNonNullableFields$1 {
    _id: string;
    name?: ProductNameNonNullableFields$1;
    quantity: number;
}
interface TranslatedValueNonNullableFields$1 {
    original: string;
}
interface LineItemAmountNonNullableFields$1 {
    _id: string;
    name?: ProductNameNonNullableFields$1;
    amount?: PriceNonNullableFields$4;
}
interface ManagedDiscountNonNullableFields$1 {
    _id: string;
    name?: TranslatedValueNonNullableFields$1;
    affectedLineItems: LineItemAmountNonNullableFields$1[];
    totalAmount?: PriceNonNullableFields$4;
}
interface ManagedAdditionalFeeNonNullableFields$1 {
    _id: string;
    name?: TranslatedValueNonNullableFields$1;
    affectedLineItems: LineItemAmountNonNullableFields$1[];
    totalAmount?: PriceNonNullableFields$4;
}
interface TotalPriceChangeNonNullableFields$1 {
    originalTotal?: PriceNonNullableFields$4;
    newTotal?: PriceNonNullableFields$4;
}
interface ShippingInformationNonNullableFields$2 {
    total?: PriceNonNullableFields$4;
    shippingTitle: string;
}
interface ShippingInformationChangeNonNullableFields$1 {
    originalShippingInfo?: ShippingInformationNonNullableFields$2;
    newShippingInfo?: ShippingInformationNonNullableFields$2;
}
interface OrderChangeNonNullableFields$1 {
    lineItemChanged?: LineItemChangesNonNullableFields$1;
    lineItemAdded?: ManagedLineItemNonNullableFields$1;
    lineItemRemoved?: ManagedLineItemNonNullableFields$1;
    discountAdded?: ManagedDiscountNonNullableFields$1;
    discountRemoved?: ManagedDiscountNonNullableFields$1;
    additionalFeeAdded?: ManagedAdditionalFeeNonNullableFields$1;
    additionalFeeRemoved?: ManagedAdditionalFeeNonNullableFields$1;
    totalPriceChanged?: TotalPriceChangeNonNullableFields$1;
    shippingInformationChanged?: ShippingInformationChangeNonNullableFields$1;
}
interface DraftOrderChangesAppliedNonNullableFields$1 {
    draftOrderId: string;
    changes: OrderChangeNonNullableFields$1[];
}
interface SavedPaymentMethodNonNullableFields$1 {
    name: string;
}
interface AuthorizedPaymentCreatedNonNullableFields$1 {
    paymentId: string;
    amount?: PriceNonNullableFields$4;
}
interface AuthorizedPaymentCapturedNonNullableFields$1 {
    paymentId: string;
    amount?: PriceNonNullableFields$4;
}
interface AuthorizedPaymentVoidedNonNullableFields$1 {
    paymentId: string;
    amount?: PriceNonNullableFields$4;
}
interface RegularPaymentRefundNonNullableFields$1 {
    amount?: PriceNonNullableFields$4;
}
interface GiftCardPaymentRefundNonNullableFields$1 {
    amount?: PriceNonNullableFields$4;
}
interface RefundedPaymentNonNullableFields$1 {
    regular?: RegularPaymentRefundNonNullableFields$1;
    giftCard?: GiftCardPaymentRefundNonNullableFields$1;
    paymentId: string;
    externalRefund: boolean;
}
interface RefundInitiatedNonNullableFields$1 {
    refundId: string;
    amount?: PriceNonNullableFields$4;
    payments: RefundedPaymentNonNullableFields$1[];
}
interface PaymentRefundedNonNullableFields$1 {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields$1;
}
interface PaymentRefundFailedNonNullableFields$1 {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields$1;
}
interface RefundedAsStoreCreditNonNullableFields$1 {
    amount?: PriceNonNullableFields$4;
}
interface RegularPaymentNonNullableFields$1 {
    amount?: PriceNonNullableFields$4;
}
interface PaymentPendingNonNullableFields$1 {
    regular?: RegularPaymentNonNullableFields$1;
    paymentId: string;
}
interface PaymentCanceledNonNullableFields$1 {
    regular?: RegularPaymentNonNullableFields$1;
    paymentId: string;
}
interface PaymentDeclinedNonNullableFields$1 {
    regular?: RegularPaymentNonNullableFields$1;
    paymentId: string;
}
interface ActivityNonNullableFields$1 {
    customActivity?: CustomActivityNonNullableFields$1;
    merchantComment?: MerchantCommentNonNullableFields$1;
    orderRefunded?: OrderRefundedNonNullableFields$1;
    orderCreatedFromExchange?: OrderCreatedFromExchangeNonNullableFields$1;
    newExchangeOrderCreated?: NewExchangeOrderCreatedNonNullableFields$1;
    draftOrderChangesApplied?: DraftOrderChangesAppliedNonNullableFields$1;
    savedPaymentMethod?: SavedPaymentMethodNonNullableFields$1;
    authorizedPaymentCreated?: AuthorizedPaymentCreatedNonNullableFields$1;
    authorizedPaymentCaptured?: AuthorizedPaymentCapturedNonNullableFields$1;
    authorizedPaymentVoided?: AuthorizedPaymentVoidedNonNullableFields$1;
    refundInitiated?: RefundInitiatedNonNullableFields$1;
    paymentRefunded?: PaymentRefundedNonNullableFields$1;
    paymentRefundFailed?: PaymentRefundFailedNonNullableFields$1;
    refundedAsStoreCredit?: RefundedAsStoreCreditNonNullableFields$1;
    paymentPending?: PaymentPendingNonNullableFields$1;
    paymentCanceled?: PaymentCanceledNonNullableFields$1;
    paymentDeclined?: PaymentDeclinedNonNullableFields$1;
    type: ActivityType$2;
}
interface V1CreatedByNonNullableFields {
    userId: string;
    memberId: string;
    visitorId: string;
    appId: string;
}
interface ChannelInfoNonNullableFields$1 {
    type: ChannelType$2;
}
interface CustomFieldNonNullableFields$1 {
    title: string;
}
interface V1BalanceSummaryNonNullableFields {
    balance?: BalanceNonNullableFields$1;
    paid?: PriceNonNullableFields$4;
    refunded?: PriceNonNullableFields$4;
    authorized?: PriceNonNullableFields$4;
    pendingRefund?: PriceNonNullableFields$4;
    pending?: PriceNonNullableFields$4;
}
interface TagListNonNullableFields$1 {
    tagIds: string[];
}
interface TagsNonNullableFields$1 {
    privateTags?: TagListNonNullableFields$1;
    tags?: TagListNonNullableFields$1;
}
interface OrderNonNullableFields$1 {
    number: string;
    lineItems: OrderLineItemNonNullableFields$1[];
    buyerInfo?: BuyerInfoNonNullableFields$1;
    paymentStatus: PaymentStatus$2;
    fulfillmentStatus: FulfillmentStatus$3;
    weightUnit: WeightUnit$4;
    taxIncludedInPrices: boolean;
    priceSummary?: PriceSummaryNonNullableFields$2;
    billingInfo?: AddressWithContactNonNullableFields$1;
    shippingInfo?: V1ShippingInformationNonNullableFields$1;
    status: OrderStatus$1;
    taxSummary?: TaxSummaryNonNullableFields$2;
    taxInfo?: OrderTaxInfoNonNullableFields$1;
    appliedDiscounts: AppliedDiscountNonNullableFields$2[];
    activities: ActivityNonNullableFields$1[];
    attributionSource: AttributionSource$1;
    createdBy?: V1CreatedByNonNullableFields;
    channelInfo?: ChannelInfoNonNullableFields$1;
    customFields: CustomFieldNonNullableFields$1[];
    isInternalOrderCreate: boolean;
    payNow?: PriceSummaryNonNullableFields$2;
    balanceSummary?: V1BalanceSummaryNonNullableFields;
    additionalFees: AdditionalFeeNonNullableFields$1[];
    recipientInfo?: AddressWithContactNonNullableFields$1;
    tags?: TagsNonNullableFields$1;
}
interface CommitDraftOrderResponseNonNullableFields {
    committedDraftOrder?: DraftOrderNonNullableFields;
    orderAfterCommit?: OrderNonNullableFields$1;
}
interface CreateOrderFromDraftResponseNonNullableFields {
    committedDraftOrder?: DraftOrderNonNullableFields;
    createdOrder?: OrderNonNullableFields$1;
}
interface QueryDraftOrdersResponseNonNullableFields {
    draftOrders: DraftOrderNonNullableFields[];
}
interface AddLineItemsToDraftOrderOptions {
    /** Catalog line items to add to draft order. */
    catalogLineItems?: CatalogReferenceLineItem[];
    /** Custom line items to add to draft order. Custom line items don't trigger the Catalog service plugin. */
    customLineItems?: CustomLineItem[];
}
interface UpdateLineItemsOptions {
    /** Details of changes to apply per line item */
    lineItemChanges?: LineItemChangeDetails[];
}
interface CreateCustomDiscountsOptions {
    /** The discounts to add. */
    discounts?: DiscountOption[];
}
interface CreateCustomAdditionalFeesOptions {
    /** The additional fees to add. added with opted-out setting */
    customAdditionalFees?: AdditionalFeeOption[];
}
interface CommitDraftOrderOptions {
    /** Optional side effects to trigger */
    commitSettings?: DraftOrderCommitSettings$1;
    /** Reason for edit, given by user (optional). */
    reason?: string | null;
}
interface QueryCursorResult$7 {
    cursors: Cursors$9;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface DraftOrdersQueryResult extends QueryCursorResult$7 {
    items: DraftOrder[];
    query: DraftOrdersQueryBuilder;
    next: () => Promise<DraftOrdersQueryResult>;
    prev: () => Promise<DraftOrdersQueryResult>;
}
interface DraftOrdersQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: 'orderId' | '_createdDate' | '_updatedDate' | 'status', value: any) => DraftOrdersQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: 'orderId' | '_createdDate' | '_updatedDate' | 'status', value: any) => DraftOrdersQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate' | '_updatedDate', value: any) => DraftOrdersQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate' | '_updatedDate', value: any) => DraftOrdersQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate' | '_updatedDate', value: any) => DraftOrdersQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate' | '_updatedDate', value: any) => DraftOrdersQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: 'orderId', value: string) => DraftOrdersQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: 'orderId' | '_createdDate' | '_updatedDate' | 'status', value: any[]) => DraftOrdersQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: 'orderId' | '_createdDate' | '_updatedDate' | 'status', value: any) => DraftOrdersQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: 'orderId' | '_createdDate' | '_updatedDate' | 'status', value: boolean) => DraftOrdersQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'status'>) => DraftOrdersQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'status'>) => DraftOrdersQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => DraftOrdersQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => DraftOrdersQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<DraftOrdersQueryResult>;
}

declare function createDraftOrder$1(httpClient: HttpClient): CreateDraftOrderSignature;
interface CreateDraftOrderSignature {
    /**
     * Creates or gets a draft order.
     *
     * When passing the ID of an order that is already in draft, the existing draft order will be returned.
     * To complete a draft and update the order, call [Commit Draft Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/draft-orders/commit-draft-order).
     * @param - To create a draft from existing order, provide its id. Otherwise, an empty draft will be created.
     */
    (orderId: string | null): Promise<CreateDraftOrderResponse & CreateDraftOrderResponseNonNullableFields>;
}
declare function createEmptyDraftOrder$1(httpClient: HttpClient): CreateEmptyDraftOrderSignature;
interface CreateEmptyDraftOrderSignature {
    /**
     * Creates an empty draft order.
     */
    (): Promise<CreateEmptyDraftOrderResponse & CreateEmptyDraftOrderResponseNonNullableFields>;
}
declare function addLineItemsToDraftOrder$1(httpClient: HttpClient): AddLineItemsToDraftOrderSignature;
interface AddLineItemsToDraftOrderSignature {
    /**
     * Adds line items to a draft order.
     * @param - The draft order id
     */
    (draftOrderId: string, options?: AddLineItemsToDraftOrderOptions | undefined): Promise<AddLineItemsToDraftOrderResponse & AddLineItemsToDraftOrderResponseNonNullableFields>;
}
declare function updateLineItems$1(httpClient: HttpClient): UpdateLineItemsSignature;
interface UpdateLineItemsSignature {
    /**
     * Updates a draft order's line items.
     *
     * Using this API, you can update a line item's quantity, price, and description.
     * > **Notes:**
     * > + Passing a quantity of `0` will remove the line item.
     * > + Price cannot be updated for line items with `paymentOption: MEMBERSHIP`.
     * > + Quantity cannot be decreased fulfilled line items. To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
     * @param - The draft order id
     */
    (draftOrderId: string, options?: UpdateLineItemsOptions | undefined): Promise<UpdateLineItemsResponse & UpdateLineItemsResponseNonNullableFields>;
}
declare function setDiscounts$1(httpClient: HttpClient): SetDiscountsSignature;
interface SetDiscountsSignature {
    /**
     * Sets and enables or disables discounts on a draft order.
     *
     * Any discounts not passed will not change.
     * @param - The draft order id
     * @param - The discount ids to opt-in. all existing discounts not listed are to be opted-out.
     */
    (draftOrderId: string, discounts: IdAndApplied[]): Promise<SetDiscountsResponse & SetDiscountsResponseNonNullableFields>;
}
declare function createCustomDiscounts$1(httpClient: HttpClient): CreateCustomDiscountsSignature;
interface CreateCustomDiscountsSignature {
    /**
     * Adds merchant discounts to the order.
     * @param - The draft order id
     */
    (draftOrderId: string, options?: CreateCustomDiscountsOptions | undefined): Promise<CreateCustomDiscountsResponse & CreateCustomDiscountsResponseNonNullableFields>;
}
declare function deleteCustomDiscounts$1(httpClient: HttpClient): DeleteCustomDiscountsSignature;
interface DeleteCustomDiscountsSignature {
    /**
     * Remove custom discounts from the order.
     * @param - The draft order id
     * @param - The discounts to remove
     */
    (draftOrderId: string, discountIds: string[]): Promise<DeleteCustomDiscountsResponse & DeleteCustomDiscountsResponseNonNullableFields>;
}
declare function setAdditionalFees$1(httpClient: HttpClient): SetAdditionalFeesSignature;
interface SetAdditionalFeesSignature {
    /**
     * Set which additional fees existing on the draft order are to be opt-in.
     * All existing additional fees not provided on the call are opted-out.
     * @param - The draft order id
     * @param - The additional fees ids to opt-in. all existing additional fees not listed are to be opted-out
     */
    (draftOrderId: string, additionalFees: IdAndApplied[]): Promise<SetAdditionalFeesResponse & SetAdditionalFeesResponseNonNullableFields>;
}
declare function createCustomAdditionalFees$1(httpClient: HttpClient): CreateCustomAdditionalFeesSignature;
interface CreateCustomAdditionalFeesSignature {
    /**
     * Create custom additional fees to the order.
     * added additional fees are by default opted-out.
     * To opt-in them, please call SetAdditionalFees with the added additional fee ids.
     * @param - The draft order id
     */
    (draftOrderId: string, options?: CreateCustomAdditionalFeesOptions | undefined): Promise<CreateCustomAdditionalFeesResponse & CreateCustomAdditionalFeesResponseNonNullableFields>;
}
declare function deleteCustomAdditionalFees$1(httpClient: HttpClient): DeleteCustomAdditionalFeesSignature;
interface DeleteCustomAdditionalFeesSignature {
    /**
     * Remove custom additional fees from the order.
     * @param - The draft order id
     * @param - The additional fees to remove
     */
    (draftOrderId: string, customAdditionalFees: string[]): Promise<DeleteCustomAdditionalFeesResponse & DeleteCustomAdditionalFeesResponseNonNullableFields>;
}
declare function setShippingInfo$1(httpClient: HttpClient): SetShippingInfoSignature;
interface SetShippingInfoSignature {
    /**
     * Sets shipping info to a draft order.
     */
    (): Promise<void>;
}
declare function setBuyerInfo$1(httpClient: HttpClient): SetBuyerInfoSignature;
interface SetBuyerInfoSignature {
    /**
     * Sets buyer info to a draft order.
     */
    (): Promise<void>;
}
declare function setRecipientInfo$1(httpClient: HttpClient): SetRecipientInfoSignature;
interface SetRecipientInfoSignature {
    /**
     * Sets recipient info to a draft order.
     */
    (): Promise<void>;
}
declare function setBillingInfo$1(httpClient: HttpClient): SetBillingInfoSignature;
interface SetBillingInfoSignature {
    /**
     * Sets billing info to a draft order.
     */
    (): Promise<void>;
}
declare function getDraftOrder$1(httpClient: HttpClient): GetDraftOrderSignature;
interface GetDraftOrderSignature {
    /**
     * Get an order.
     * When order is in draft status, it's re-estimated and return with latest tax and totals
     * Automatic discounts and automatic additional fees will reflect the latest prices and eligibility.
     * Calculation will be based on current draft order content - items, shipping info and eligible discounts and additional fees.
     * When order is in committed status, it's returned with it's calculation at the moment it was committed.
     * @param - The draft order id
     */
    (draftOrderId: string): Promise<GetDraftOrderResponse & GetDraftOrderResponseNonNullableFields>;
}
declare function getOrderDraftabilityStatus$1(httpClient: HttpClient): GetOrderDraftabilityStatusSignature;
interface GetOrderDraftabilityStatusSignature {
    /**
     * Checks whether a draft can be created for thos order
     * @param - Order ID.
     */
    (orderId: string): Promise<GetOrderDraftabilityStatusResponse & GetOrderDraftabilityStatusResponseNonNullableFields>;
}
declare function commitDraftOrder$1(httpClient: HttpClient): CommitDraftOrderSignature;
interface CommitDraftOrderSignature {
    /**
     * Commit latest changes to the baseline order and control what side-effects will be applied.
     * Commit cannot be undone or reverted.
     * Order-edit become closed for editing, however it's kept for reference and can be retrieved.
     * @param - The draft order id
     */
    (draftOrderId: string, options?: CommitDraftOrderOptions | undefined): Promise<CommitDraftOrderResponse & CommitDraftOrderResponseNonNullableFields>;
}
declare function createOrderFromDraft$1(httpClient: HttpClient): CreateOrderFromDraftSignature;
interface CreateOrderFromDraftSignature {
    /**
     * Create new order and control what side-effects will be applied
     * Commit cannot be undone or reverted.
     * Order-edit become closed for editing, however it's kept for reference and can be retrieved.
     */
    (): Promise<void>;
}
declare function deleteDraftOrder$1(httpClient: HttpClient): DeleteDraftOrderSignature;
interface DeleteDraftOrderSignature {
    /**
     * Delete order-edit entity with all pending changes.
     * Order-edit in status 'COMMITTED' cannot be deleted.
     * @param - The draft order id
     */
    (draftOrderId: string): Promise<void>;
}
declare function queryDraftOrders$1(httpClient: HttpClient): QueryDraftOrdersSignature;
interface QueryDraftOrdersSignature {
    /**
     * Query draft orders by order id or by date range or status.
     */
    (): DraftOrdersQueryBuilder;
}

declare const createDraftOrder: MaybeContext<BuildRESTFunction<typeof createDraftOrder$1> & typeof createDraftOrder$1>;
declare const createEmptyDraftOrder: MaybeContext<BuildRESTFunction<typeof createEmptyDraftOrder$1> & typeof createEmptyDraftOrder$1>;
declare const addLineItemsToDraftOrder: MaybeContext<BuildRESTFunction<typeof addLineItemsToDraftOrder$1> & typeof addLineItemsToDraftOrder$1>;
declare const updateLineItems: MaybeContext<BuildRESTFunction<typeof updateLineItems$1> & typeof updateLineItems$1>;
declare const setDiscounts: MaybeContext<BuildRESTFunction<typeof setDiscounts$1> & typeof setDiscounts$1>;
declare const createCustomDiscounts: MaybeContext<BuildRESTFunction<typeof createCustomDiscounts$1> & typeof createCustomDiscounts$1>;
declare const deleteCustomDiscounts: MaybeContext<BuildRESTFunction<typeof deleteCustomDiscounts$1> & typeof deleteCustomDiscounts$1>;
declare const setAdditionalFees: MaybeContext<BuildRESTFunction<typeof setAdditionalFees$1> & typeof setAdditionalFees$1>;
declare const createCustomAdditionalFees: MaybeContext<BuildRESTFunction<typeof createCustomAdditionalFees$1> & typeof createCustomAdditionalFees$1>;
declare const deleteCustomAdditionalFees: MaybeContext<BuildRESTFunction<typeof deleteCustomAdditionalFees$1> & typeof deleteCustomAdditionalFees$1>;
declare const setShippingInfo: MaybeContext<BuildRESTFunction<typeof setShippingInfo$1> & typeof setShippingInfo$1>;
declare const setBuyerInfo: MaybeContext<BuildRESTFunction<typeof setBuyerInfo$1> & typeof setBuyerInfo$1>;
declare const setRecipientInfo: MaybeContext<BuildRESTFunction<typeof setRecipientInfo$1> & typeof setRecipientInfo$1>;
declare const setBillingInfo: MaybeContext<BuildRESTFunction<typeof setBillingInfo$1> & typeof setBillingInfo$1>;
declare const getDraftOrder: MaybeContext<BuildRESTFunction<typeof getDraftOrder$1> & typeof getDraftOrder$1>;
declare const getOrderDraftabilityStatus: MaybeContext<BuildRESTFunction<typeof getOrderDraftabilityStatus$1> & typeof getOrderDraftabilityStatus$1>;
declare const commitDraftOrder: MaybeContext<BuildRESTFunction<typeof commitDraftOrder$1> & typeof commitDraftOrder$1>;
declare const createOrderFromDraft: MaybeContext<BuildRESTFunction<typeof createOrderFromDraft$1> & typeof createOrderFromDraft$1>;
declare const deleteDraftOrder: MaybeContext<BuildRESTFunction<typeof deleteDraftOrder$1> & typeof deleteDraftOrder$1>;
declare const queryDraftOrders: MaybeContext<BuildRESTFunction<typeof queryDraftOrders$1> & typeof queryDraftOrders$1>;

type index_d$g_AddLineItemsToDraftOrderOptions = AddLineItemsToDraftOrderOptions;
type index_d$g_AddLineItemsToDraftOrderRequest = AddLineItemsToDraftOrderRequest;
type index_d$g_AddLineItemsToDraftOrderResponse = AddLineItemsToDraftOrderResponse;
type index_d$g_AddLineItemsToDraftOrderResponseNonNullableFields = AddLineItemsToDraftOrderResponseNonNullableFields;
type index_d$g_AdditionalFeeDetails = AdditionalFeeDetails;
type index_d$g_AdditionalFeeOption = AdditionalFeeOption;
type index_d$g_AppliedDiscountDiscountType = AppliedDiscountDiscountType;
declare const index_d$g_AppliedDiscountDiscountType: typeof AppliedDiscountDiscountType;
type index_d$g_BillingChangedDetails = BillingChangedDetails;
type index_d$g_BillingDetails = BillingDetails;
type index_d$g_BillingDetailsChangeTypeOneOf = BillingDetailsChangeTypeOneOf;
type index_d$g_BuyerChangedDetails = BuyerChangedDetails;
type index_d$g_BuyerDetailsChangeTypeOneOf = BuyerDetailsChangeTypeOneOf;
type index_d$g_CalculatedDraftOrder = CalculatedDraftOrder;
type index_d$g_CatalogReferenceLineItem = CatalogReferenceLineItem;
type index_d$g_CommitDraftOrderOptions = CommitDraftOrderOptions;
type index_d$g_CommitDraftOrderRequest = CommitDraftOrderRequest;
type index_d$g_CommitDraftOrderResponse = CommitDraftOrderResponse;
type index_d$g_CommitDraftOrderResponseNonNullableFields = CommitDraftOrderResponseNonNullableFields;
type index_d$g_CreateCustomAdditionalFeesOptions = CreateCustomAdditionalFeesOptions;
type index_d$g_CreateCustomAdditionalFeesRequest = CreateCustomAdditionalFeesRequest;
type index_d$g_CreateCustomAdditionalFeesResponse = CreateCustomAdditionalFeesResponse;
type index_d$g_CreateCustomAdditionalFeesResponseNonNullableFields = CreateCustomAdditionalFeesResponseNonNullableFields;
type index_d$g_CreateCustomDiscountsOptions = CreateCustomDiscountsOptions;
type index_d$g_CreateCustomDiscountsRequest = CreateCustomDiscountsRequest;
type index_d$g_CreateCustomDiscountsResponse = CreateCustomDiscountsResponse;
type index_d$g_CreateCustomDiscountsResponseNonNullableFields = CreateCustomDiscountsResponseNonNullableFields;
type index_d$g_CreateDraftOrderRequest = CreateDraftOrderRequest;
type index_d$g_CreateDraftOrderResponse = CreateDraftOrderResponse;
type index_d$g_CreateDraftOrderResponseNonNullableFields = CreateDraftOrderResponseNonNullableFields;
type index_d$g_CreateEmptyDraftOrderRequest = CreateEmptyDraftOrderRequest;
type index_d$g_CreateEmptyDraftOrderResponse = CreateEmptyDraftOrderResponse;
type index_d$g_CreateEmptyDraftOrderResponseNonNullableFields = CreateEmptyDraftOrderResponseNonNullableFields;
type index_d$g_CreateOrderFromDraftRequest = CreateOrderFromDraftRequest;
type index_d$g_CreateOrderFromDraftResponse = CreateOrderFromDraftResponse;
type index_d$g_CreateOrderFromDraftResponseNonNullableFields = CreateOrderFromDraftResponseNonNullableFields;
type index_d$g_CustomLineItem = CustomLineItem;
type index_d$g_DeleteCustomAdditionalFeesRequest = DeleteCustomAdditionalFeesRequest;
type index_d$g_DeleteCustomAdditionalFeesResponse = DeleteCustomAdditionalFeesResponse;
type index_d$g_DeleteCustomAdditionalFeesResponseNonNullableFields = DeleteCustomAdditionalFeesResponseNonNullableFields;
type index_d$g_DeleteCustomDiscountsRequest = DeleteCustomDiscountsRequest;
type index_d$g_DeleteCustomDiscountsResponse = DeleteCustomDiscountsResponse;
type index_d$g_DeleteCustomDiscountsResponseNonNullableFields = DeleteCustomDiscountsResponseNonNullableFields;
type index_d$g_DeleteDraftOrderRequest = DeleteDraftOrderRequest;
type index_d$g_DeleteDraftOrderResponse = DeleteDraftOrderResponse;
type index_d$g_DiscountDetails = DiscountDetails;
type index_d$g_DiscountOption = DiscountOption;
type index_d$g_DiscountOptionDiscountAmountOneOf = DiscountOptionDiscountAmountOneOf;
type index_d$g_DraftOrder = DraftOrder;
type index_d$g_DraftOrdersQueryBuilder = DraftOrdersQueryBuilder;
type index_d$g_DraftOrdersQueryResult = DraftOrdersQueryResult;
type index_d$g_EditingStatus = EditingStatus;
declare const index_d$g_EditingStatus: typeof EditingStatus;
type index_d$g_FileType = FileType;
declare const index_d$g_FileType: typeof FileType;
type index_d$g_GetDraftEditabilityStatusRequest = GetDraftEditabilityStatusRequest;
type index_d$g_GetDraftEditabilityStatusResponse = GetDraftEditabilityStatusResponse;
type index_d$g_GetDraftOrderRequest = GetDraftOrderRequest;
type index_d$g_GetDraftOrderResponse = GetDraftOrderResponse;
type index_d$g_GetDraftOrderResponseNonNullableFields = GetDraftOrderResponseNonNullableFields;
type index_d$g_GetOrderDraftabilityStatusRequest = GetOrderDraftabilityStatusRequest;
type index_d$g_GetOrderDraftabilityStatusResponse = GetOrderDraftabilityStatusResponse;
type index_d$g_GetOrderDraftabilityStatusResponseNonNullableFields = GetOrderDraftabilityStatusResponseNonNullableFields;
type index_d$g_IdAndApplied = IdAndApplied;
type index_d$g_InventoryUpdate = InventoryUpdate;
type index_d$g_ItemDetails = ItemDetails;
type index_d$g_ItemDetailsChangeTypeOneOf = ItemDetailsChangeTypeOneOf;
type index_d$g_LineItemChangeDetails = LineItemChangeDetails;
type index_d$g_NonDraftableReason = NonDraftableReason;
declare const index_d$g_NonDraftableReason: typeof NonDraftableReason;
type index_d$g_OrderCreateSettings = OrderCreateSettings;
type index_d$g_PickupDetailsPickupMethod = PickupDetailsPickupMethod;
declare const index_d$g_PickupDetailsPickupMethod: typeof PickupDetailsPickupMethod;
type index_d$g_QueryDraftOrdersRequest = QueryDraftOrdersRequest;
type index_d$g_QueryDraftOrdersResponse = QueryDraftOrdersResponse;
type index_d$g_QueryDraftOrdersResponseNonNullableFields = QueryDraftOrdersResponseNonNullableFields;
type index_d$g_RecipientInfoChangedDetails = RecipientInfoChangedDetails;
type index_d$g_RecipientInfoDetails = RecipientInfoDetails;
type index_d$g_RecipientInfoDetailsChangeTypeOneOf = RecipientInfoDetailsChangeTypeOneOf;
type index_d$g_SecuredMedia = SecuredMedia;
type index_d$g_SetAdditionalFeesRequest = SetAdditionalFeesRequest;
type index_d$g_SetAdditionalFeesResponse = SetAdditionalFeesResponse;
type index_d$g_SetAdditionalFeesResponseNonNullableFields = SetAdditionalFeesResponseNonNullableFields;
type index_d$g_SetBillingInfoRequest = SetBillingInfoRequest;
type index_d$g_SetBillingInfoResponse = SetBillingInfoResponse;
type index_d$g_SetBillingInfoResponseNonNullableFields = SetBillingInfoResponseNonNullableFields;
type index_d$g_SetBuyerInfoRequest = SetBuyerInfoRequest;
type index_d$g_SetBuyerInfoResponse = SetBuyerInfoResponse;
type index_d$g_SetBuyerInfoResponseNonNullableFields = SetBuyerInfoResponseNonNullableFields;
type index_d$g_SetDiscountsRequest = SetDiscountsRequest;
type index_d$g_SetDiscountsResponse = SetDiscountsResponse;
type index_d$g_SetDiscountsResponseNonNullableFields = SetDiscountsResponseNonNullableFields;
type index_d$g_SetRecipientInfoRequest = SetRecipientInfoRequest;
type index_d$g_SetRecipientInfoResponse = SetRecipientInfoResponse;
type index_d$g_SetRecipientInfoResponseNonNullableFields = SetRecipientInfoResponseNonNullableFields;
type index_d$g_SetShippingInfoRequest = SetShippingInfoRequest;
type index_d$g_SetShippingInfoResponse = SetShippingInfoResponse;
type index_d$g_SetShippingInfoResponseNonNullableFields = SetShippingInfoResponseNonNullableFields;
type index_d$g_SetTaxExemptionRequest = SetTaxExemptionRequest;
type index_d$g_SetTaxExemptionResponse = SetTaxExemptionResponse;
type index_d$g_ShippingChangedDetails = ShippingChangedDetails;
type index_d$g_ShippingDetails = ShippingDetails;
type index_d$g_ShippingDetailsChangeTypeOneOf = ShippingDetailsChangeTypeOneOf;
type index_d$g_UpdateLineItemsOptions = UpdateLineItemsOptions;
type index_d$g_UpdateLineItemsRequest = UpdateLineItemsRequest;
type index_d$g_UpdateLineItemsResponse = UpdateLineItemsResponse;
type index_d$g_UpdateLineItemsResponseNonNullableFields = UpdateLineItemsResponseNonNullableFields;
type index_d$g_UpdateShippingInfoRequest = UpdateShippingInfoRequest;
type index_d$g_UpdateShippingInfoResponse = UpdateShippingInfoResponse;
type index_d$g_V1BalanceSummary = V1BalanceSummary;
type index_d$g_V1CreatedBy = V1CreatedBy;
type index_d$g_V1CreatedByStringOneOf = V1CreatedByStringOneOf;
type index_d$g_V1DeliveryLogistics = V1DeliveryLogistics;
type index_d$g_V1DeliveryLogisticsAddressOneOf = V1DeliveryLogisticsAddressOneOf;
type index_d$g_V1DeliveryTimeSlot = V1DeliveryTimeSlot;
type index_d$g_V1PickupDetails = V1PickupDetails;
type index_d$g_V1ShippingPrice = V1ShippingPrice;
declare const index_d$g_addLineItemsToDraftOrder: typeof addLineItemsToDraftOrder;
declare const index_d$g_commitDraftOrder: typeof commitDraftOrder;
declare const index_d$g_createCustomAdditionalFees: typeof createCustomAdditionalFees;
declare const index_d$g_createCustomDiscounts: typeof createCustomDiscounts;
declare const index_d$g_createDraftOrder: typeof createDraftOrder;
declare const index_d$g_createEmptyDraftOrder: typeof createEmptyDraftOrder;
declare const index_d$g_createOrderFromDraft: typeof createOrderFromDraft;
declare const index_d$g_deleteCustomAdditionalFees: typeof deleteCustomAdditionalFees;
declare const index_d$g_deleteCustomDiscounts: typeof deleteCustomDiscounts;
declare const index_d$g_deleteDraftOrder: typeof deleteDraftOrder;
declare const index_d$g_getDraftOrder: typeof getDraftOrder;
declare const index_d$g_getOrderDraftabilityStatus: typeof getOrderDraftabilityStatus;
declare const index_d$g_queryDraftOrders: typeof queryDraftOrders;
declare const index_d$g_setAdditionalFees: typeof setAdditionalFees;
declare const index_d$g_setBillingInfo: typeof setBillingInfo;
declare const index_d$g_setBuyerInfo: typeof setBuyerInfo;
declare const index_d$g_setDiscounts: typeof setDiscounts;
declare const index_d$g_setRecipientInfo: typeof setRecipientInfo;
declare const index_d$g_setShippingInfo: typeof setShippingInfo;
declare const index_d$g_updateLineItems: typeof updateLineItems;
declare namespace index_d$g {
  export { type ActionEvent$c as ActionEvent, type Activity$2 as Activity, type ActivityContentOneOf$1 as ActivityContentOneOf, ActivityType$2 as ActivityType, type index_d$g_AddLineItemsToDraftOrderOptions as AddLineItemsToDraftOrderOptions, type index_d$g_AddLineItemsToDraftOrderRequest as AddLineItemsToDraftOrderRequest, type index_d$g_AddLineItemsToDraftOrderResponse as AddLineItemsToDraftOrderResponse, type index_d$g_AddLineItemsToDraftOrderResponseNonNullableFields as AddLineItemsToDraftOrderResponseNonNullableFields, type AdditionalFee$2 as AdditionalFee, type index_d$g_AdditionalFeeDetails as AdditionalFeeDetails, type index_d$g_AdditionalFeeOption as AdditionalFeeOption, type Address$6 as Address, type AddressLocation$5 as AddressLocation, type AddressWithContact$1 as AddressWithContact, type ApplicationError$6 as ApplicationError, type AppliedDiscount$2 as AppliedDiscount, type AppliedDiscountDiscountSourceOneOf$2 as AppliedDiscountDiscountSourceOneOf, index_d$g_AppliedDiscountDiscountType as AppliedDiscountDiscountType, AttributionSource$1 as AttributionSource, type AuthorizedPaymentCaptured$1 as AuthorizedPaymentCaptured, type AuthorizedPaymentCreated$1 as AuthorizedPaymentCreated, type AuthorizedPaymentVoided$1 as AuthorizedPaymentVoided, type Balance$1 as Balance, type BalanceSummary$1 as BalanceSummary, type index_d$g_BillingChangedDetails as BillingChangedDetails, type index_d$g_BillingDetails as BillingDetails, type index_d$g_BillingDetailsChangeTypeOneOf as BillingDetailsChangeTypeOneOf, type index_d$g_BuyerChangedDetails as BuyerChangedDetails, type BuyerDetails$1 as BuyerDetails, type index_d$g_BuyerDetailsChangeTypeOneOf as BuyerDetailsChangeTypeOneOf, type BuyerInfo$3 as BuyerInfo, type BuyerInfoIdOneOf$1 as BuyerInfoIdOneOf, type index_d$g_CalculatedDraftOrder as CalculatedDraftOrder, type CalculationErrors$1 as CalculationErrors, type CalculationErrorsShippingCalculationErrorOneOf$1 as CalculationErrorsShippingCalculationErrorOneOf, type CarrierError$2 as CarrierError, type CarrierErrors$1 as CarrierErrors, type CatalogReference$4 as CatalogReference, type index_d$g_CatalogReferenceLineItem as CatalogReferenceLineItem, type ChannelInfo$2 as ChannelInfo, ChannelType$2 as ChannelType, type Color$1 as Color, type index_d$g_CommitDraftOrderOptions as CommitDraftOrderOptions, type index_d$g_CommitDraftOrderRequest as CommitDraftOrderRequest, type index_d$g_CommitDraftOrderResponse as CommitDraftOrderResponse, type index_d$g_CommitDraftOrderResponseNonNullableFields as CommitDraftOrderResponseNonNullableFields, type Coupon$2 as Coupon, type index_d$g_CreateCustomAdditionalFeesOptions as CreateCustomAdditionalFeesOptions, type index_d$g_CreateCustomAdditionalFeesRequest as CreateCustomAdditionalFeesRequest, type index_d$g_CreateCustomAdditionalFeesResponse as CreateCustomAdditionalFeesResponse, type index_d$g_CreateCustomAdditionalFeesResponseNonNullableFields as CreateCustomAdditionalFeesResponseNonNullableFields, type index_d$g_CreateCustomDiscountsOptions as CreateCustomDiscountsOptions, type index_d$g_CreateCustomDiscountsRequest as CreateCustomDiscountsRequest, type index_d$g_CreateCustomDiscountsResponse as CreateCustomDiscountsResponse, type index_d$g_CreateCustomDiscountsResponseNonNullableFields as CreateCustomDiscountsResponseNonNullableFields, type index_d$g_CreateDraftOrderRequest as CreateDraftOrderRequest, type index_d$g_CreateDraftOrderResponse as CreateDraftOrderResponse, type index_d$g_CreateDraftOrderResponseNonNullableFields as CreateDraftOrderResponseNonNullableFields, type index_d$g_CreateEmptyDraftOrderRequest as CreateEmptyDraftOrderRequest, type index_d$g_CreateEmptyDraftOrderResponse as CreateEmptyDraftOrderResponse, type index_d$g_CreateEmptyDraftOrderResponseNonNullableFields as CreateEmptyDraftOrderResponseNonNullableFields, type index_d$g_CreateOrderFromDraftRequest as CreateOrderFromDraftRequest, type index_d$g_CreateOrderFromDraftResponse as CreateOrderFromDraftResponse, type index_d$g_CreateOrderFromDraftResponseNonNullableFields as CreateOrderFromDraftResponseNonNullableFields, type CreatedBy$1 as CreatedBy, type CreatedByStringOneOf$1 as CreatedByStringOneOf, type CreditCardDetails$1 as CreditCardDetails, type CursorPaging$9 as CursorPaging, type CursorPagingMetadata$8 as CursorPagingMetadata, type CursorQuery$5 as CursorQuery, type CursorQueryPagingMethodOneOf$5 as CursorQueryPagingMethodOneOf, type Cursors$9 as Cursors, type CustomActivity$1 as CustomActivity, type CustomField$2 as CustomField, type index_d$g_CustomLineItem as CustomLineItem, type index_d$g_DeleteCustomAdditionalFeesRequest as DeleteCustomAdditionalFeesRequest, type index_d$g_DeleteCustomAdditionalFeesResponse as DeleteCustomAdditionalFeesResponse, type index_d$g_DeleteCustomAdditionalFeesResponseNonNullableFields as DeleteCustomAdditionalFeesResponseNonNullableFields, type index_d$g_DeleteCustomDiscountsRequest as DeleteCustomDiscountsRequest, type index_d$g_DeleteCustomDiscountsResponse as DeleteCustomDiscountsResponse, type index_d$g_DeleteCustomDiscountsResponseNonNullableFields as DeleteCustomDiscountsResponseNonNullableFields, type index_d$g_DeleteDraftOrderRequest as DeleteDraftOrderRequest, type index_d$g_DeleteDraftOrderResponse as DeleteDraftOrderResponse, type DeliveryLogistics$3 as DeliveryLogistics, type DeliveryTimeSlot$3 as DeliveryTimeSlot, type DescriptionLine$1 as DescriptionLine, type DescriptionLineDescriptionLineValueOneOf$1 as DescriptionLineDescriptionLineValueOneOf, type DescriptionLineName$1 as DescriptionLineName, DescriptionLineType$1 as DescriptionLineType, type DescriptionLineValueOneOf$1 as DescriptionLineValueOneOf, type Details$2 as Details, type DetailsKindOneOf$2 as DetailsKindOneOf, type DigitalFile$2 as DigitalFile, type index_d$g_DiscountDetails as DiscountDetails, type index_d$g_DiscountOption as DiscountOption, type index_d$g_DiscountOptionDiscountAmountOneOf as DiscountOptionDiscountAmountOneOf, DiscountReason$1 as DiscountReason, type DiscountRule$2 as DiscountRule, type DiscountRuleName$2 as DiscountRuleName, DiscountType$2 as DiscountType, type DomainEvent$c as DomainEvent, type DomainEventBodyOneOf$c as DomainEventBodyOneOf, type index_d$g_DraftOrder as DraftOrder, type DraftOrderChangesApplied$1 as DraftOrderChangesApplied, type DraftOrderCommitSettings$1 as DraftOrderCommitSettings, type index_d$g_DraftOrdersQueryBuilder as DraftOrdersQueryBuilder, type index_d$g_DraftOrdersQueryResult as DraftOrdersQueryResult, index_d$g_EditingStatus as EditingStatus, type EntityCreatedEvent$c as EntityCreatedEvent, type EntityDeletedEvent$c as EntityDeletedEvent, type EntityUpdatedEvent$c as EntityUpdatedEvent, type ExtendedFields$5 as ExtendedFields, type FieldViolation$2 as FieldViolation, index_d$g_FileType as FileType, FulfillmentStatus$3 as FulfillmentStatus, type FulfillmentStatusesAggregate$1 as FulfillmentStatusesAggregate, type FullAddressContactDetails$2 as FullAddressContactDetails, type index_d$g_GetDraftEditabilityStatusRequest as GetDraftEditabilityStatusRequest, type index_d$g_GetDraftEditabilityStatusResponse as GetDraftEditabilityStatusResponse, type index_d$g_GetDraftOrderRequest as GetDraftOrderRequest, type index_d$g_GetDraftOrderResponse as GetDraftOrderResponse, type index_d$g_GetDraftOrderResponseNonNullableFields as GetDraftOrderResponseNonNullableFields, type index_d$g_GetOrderDraftabilityStatusRequest as GetOrderDraftabilityStatusRequest, type index_d$g_GetOrderDraftabilityStatusResponse as GetOrderDraftabilityStatusResponse, type index_d$g_GetOrderDraftabilityStatusResponseNonNullableFields as GetOrderDraftabilityStatusResponseNonNullableFields, type GiftCardPaymentRefund$1 as GiftCardPaymentRefund, type index_d$g_IdAndApplied as IdAndApplied, type IdentificationData$c as IdentificationData, type IdentificationDataIdOneOf$c as IdentificationDataIdOneOf, type index_d$g_InventoryUpdate as InventoryUpdate, type ItemChangedDetails$1 as ItemChangedDetails, type index_d$g_ItemDetails as ItemDetails, type index_d$g_ItemDetailsChangeTypeOneOf as ItemDetailsChangeTypeOneOf, type ItemTaxFullDetails$2 as ItemTaxFullDetails, type ItemType$2 as ItemType, ItemTypeItemType$2 as ItemTypeItemType, type ItemTypeItemTypeDataOneOf$2 as ItemTypeItemTypeDataOneOf, JurisdictionType$2 as JurisdictionType, type LineItemAmount$1 as LineItemAmount, type index_d$g_LineItemChangeDetails as LineItemChangeDetails, type LineItemChanges$1 as LineItemChanges, type LineItemDiscount$2 as LineItemDiscount, type LineItemExchangeData$1 as LineItemExchangeData, type LineItemPriceChange$1 as LineItemPriceChange, type LineItemQuantityChange$1 as LineItemQuantityChange, LineItemQuantityChangeType$1 as LineItemQuantityChangeType, type LineItemTaxBreakdown$1 as LineItemTaxBreakdown, type LineItemTaxInfo$1 as LineItemTaxInfo, type LocationAndQuantity$1 as LocationAndQuantity, type ManagedAdditionalFee$1 as ManagedAdditionalFee, type ManagedDiscount$1 as ManagedDiscount, type ManagedLineItem$1 as ManagedLineItem, type MembershipPaymentRefund$1 as MembershipPaymentRefund, type MerchantComment$1 as MerchantComment, type MerchantDiscount$2 as MerchantDiscount, type MerchantDiscountMerchantDiscountReasonOneOf$1 as MerchantDiscountMerchantDiscountReasonOneOf, type MessageEnvelope$b as MessageEnvelope, type NewExchangeOrderCreated$1 as NewExchangeOrderCreated, index_d$g_NonDraftableReason as NonDraftableReason, type Order$2 as Order, type OrderChange$1 as OrderChange, type OrderChangeValueOneOf$1 as OrderChangeValueOneOf, type OrderCreateNotifications$1 as OrderCreateNotifications, type index_d$g_OrderCreateSettings as OrderCreateSettings, type OrderCreatedFromExchange$1 as OrderCreatedFromExchange, type OrderLineItem$1 as OrderLineItem, type OrderRefunded$2 as OrderRefunded, OrderStatus$1 as OrderStatus, type OrderTaxBreakdown$1 as OrderTaxBreakdown, type OrderTaxInfo$1 as OrderTaxInfo, type PaymentCanceled$1 as PaymentCanceled, type PaymentCanceledPaymentDetailsOneOf$1 as PaymentCanceledPaymentDetailsOneOf, type PaymentDeclined$1 as PaymentDeclined, type PaymentDeclinedPaymentDetailsOneOf$1 as PaymentDeclinedPaymentDetailsOneOf, PaymentOptionType$2 as PaymentOptionType, type PaymentPending$1 as PaymentPending, type PaymentPendingPaymentDetailsOneOf$1 as PaymentPendingPaymentDetailsOneOf, type PaymentRefundFailed$1 as PaymentRefundFailed, type PaymentRefunded$1 as PaymentRefunded, PaymentStatus$2 as PaymentStatus, type PhysicalProperties$3 as PhysicalProperties, type PickupAddress$2 as PickupAddress, type PickupDetails$4 as PickupDetails, index_d$g_PickupDetailsPickupMethod as PickupDetailsPickupMethod, PickupMethod$3 as PickupMethod, type PlainTextValue$1 as PlainTextValue, type Price$4 as Price, type PriceDescription$1 as PriceDescription, type PriceSummary$2 as PriceSummary, type ProductName$1 as ProductName, type index_d$g_QueryDraftOrdersRequest as QueryDraftOrdersRequest, type index_d$g_QueryDraftOrdersResponse as QueryDraftOrdersResponse, type index_d$g_QueryDraftOrdersResponseNonNullableFields as QueryDraftOrdersResponseNonNullableFields, type index_d$g_RecipientInfoChangedDetails as RecipientInfoChangedDetails, type index_d$g_RecipientInfoDetails as RecipientInfoDetails, type index_d$g_RecipientInfoDetailsChangeTypeOneOf as RecipientInfoDetailsChangeTypeOneOf, type RefundInitiated$1 as RefundInitiated, type RefundedAsStoreCredit$1 as RefundedAsStoreCredit, type RefundedPayment$1 as RefundedPayment, type RefundedPaymentKindOneOf$1 as RefundedPaymentKindOneOf, type RegularPayment$1 as RegularPayment, type RegularPaymentPaymentMethodDetailsOneOf$1 as RegularPaymentPaymentMethodDetailsOneOf, type RegularPaymentRefund$1 as RegularPaymentRefund, type RestoreInfo$c as RestoreInfo, RuleType$2 as RuleType, type SavedPaymentMethod$1 as SavedPaymentMethod, type index_d$g_SecuredMedia as SecuredMedia, type index_d$g_SetAdditionalFeesRequest as SetAdditionalFeesRequest, type index_d$g_SetAdditionalFeesResponse as SetAdditionalFeesResponse, type index_d$g_SetAdditionalFeesResponseNonNullableFields as SetAdditionalFeesResponseNonNullableFields, type index_d$g_SetBillingInfoRequest as SetBillingInfoRequest, type index_d$g_SetBillingInfoResponse as SetBillingInfoResponse, type index_d$g_SetBillingInfoResponseNonNullableFields as SetBillingInfoResponseNonNullableFields, type index_d$g_SetBuyerInfoRequest as SetBuyerInfoRequest, type index_d$g_SetBuyerInfoResponse as SetBuyerInfoResponse, type index_d$g_SetBuyerInfoResponseNonNullableFields as SetBuyerInfoResponseNonNullableFields, type index_d$g_SetDiscountsRequest as SetDiscountsRequest, type index_d$g_SetDiscountsResponse as SetDiscountsResponse, type index_d$g_SetDiscountsResponseNonNullableFields as SetDiscountsResponseNonNullableFields, type index_d$g_SetRecipientInfoRequest as SetRecipientInfoRequest, type index_d$g_SetRecipientInfoResponse as SetRecipientInfoResponse, type index_d$g_SetRecipientInfoResponseNonNullableFields as SetRecipientInfoResponseNonNullableFields, type index_d$g_SetShippingInfoRequest as SetShippingInfoRequest, type index_d$g_SetShippingInfoResponse as SetShippingInfoResponse, type index_d$g_SetShippingInfoResponseNonNullableFields as SetShippingInfoResponseNonNullableFields, type index_d$g_SetTaxExemptionRequest as SetTaxExemptionRequest, type index_d$g_SetTaxExemptionResponse as SetTaxExemptionResponse, type index_d$g_ShippingChangedDetails as ShippingChangedDetails, type index_d$g_ShippingDetails as ShippingDetails, type index_d$g_ShippingDetailsChangeTypeOneOf as ShippingDetailsChangeTypeOneOf, type ShippingInformation$2 as ShippingInformation, type ShippingInformationChange$1 as ShippingInformationChange, type ShippingOption$2 as ShippingOption, type ShippingPrice$2 as ShippingPrice, type ShippingRegion$2 as ShippingRegion, SortOrder$9 as SortOrder, type Sorting$9 as Sorting, SourceType$1 as SourceType, type StreetAddress$5 as StreetAddress, SubscriptionFrequency$3 as SubscriptionFrequency, type SubscriptionInfo$2 as SubscriptionInfo, type SubscriptionSettings$3 as SubscriptionSettings, type SystemError$2 as SystemError, type TagList$1 as TagList, type Tags$1 as Tags, type TaxDetails$1 as TaxDetails, type TaxSummary$2 as TaxSummary, type TaxableAddress$2 as TaxableAddress, type TaxableAddressTaxableAddressDataOneOf$2 as TaxableAddressTaxableAddressDataOneOf, TaxableAddressType$2 as TaxableAddressType, type TotalPriceChange$1 as TotalPriceChange, type TranslatedValue$1 as TranslatedValue, type UpdateExtendedFieldsRequest$3 as UpdateExtendedFieldsRequest, type UpdateExtendedFieldsResponse$3 as UpdateExtendedFieldsResponse, type index_d$g_UpdateLineItemsOptions as UpdateLineItemsOptions, type index_d$g_UpdateLineItemsRequest as UpdateLineItemsRequest, type index_d$g_UpdateLineItemsResponse as UpdateLineItemsResponse, type index_d$g_UpdateLineItemsResponseNonNullableFields as UpdateLineItemsResponseNonNullableFields, type index_d$g_UpdateShippingInfoRequest as UpdateShippingInfoRequest, type index_d$g_UpdateShippingInfoResponse as UpdateShippingInfoResponse, type index_d$g_V1BalanceSummary as V1BalanceSummary, type index_d$g_V1CreatedBy as V1CreatedBy, type index_d$g_V1CreatedByStringOneOf as V1CreatedByStringOneOf, type index_d$g_V1DeliveryLogistics as V1DeliveryLogistics, type index_d$g_V1DeliveryLogisticsAddressOneOf as V1DeliveryLogisticsAddressOneOf, type index_d$g_V1DeliveryTimeSlot as V1DeliveryTimeSlot, type index_d$g_V1PickupDetails as V1PickupDetails, type V1ShippingInformation$1 as V1ShippingInformation, type index_d$g_V1ShippingPrice as V1ShippingPrice, type ValidationError$2 as ValidationError, type VatId$3 as VatId, VatType$3 as VatType, WebhookIdentityType$b as WebhookIdentityType, WeightUnit$4 as WeightUnit, index_d$g_addLineItemsToDraftOrder as addLineItemsToDraftOrder, index_d$g_commitDraftOrder as commitDraftOrder, index_d$g_createCustomAdditionalFees as createCustomAdditionalFees, index_d$g_createCustomDiscounts as createCustomDiscounts, index_d$g_createDraftOrder as createDraftOrder, index_d$g_createEmptyDraftOrder as createEmptyDraftOrder, index_d$g_createOrderFromDraft as createOrderFromDraft, index_d$g_deleteCustomAdditionalFees as deleteCustomAdditionalFees, index_d$g_deleteCustomDiscounts as deleteCustomDiscounts, index_d$g_deleteDraftOrder as deleteDraftOrder, index_d$g_getDraftOrder as getDraftOrder, index_d$g_getOrderDraftabilityStatus as getOrderDraftabilityStatus, index_d$g_queryDraftOrders as queryDraftOrders, index_d$g_setAdditionalFees as setAdditionalFees, index_d$g_setBillingInfo as setBillingInfo, index_d$g_setBuyerInfo as setBuyerInfo, index_d$g_setDiscounts as setDiscounts, index_d$g_setRecipientInfo as setRecipientInfo, index_d$g_setShippingInfo as setShippingInfo, index_d$g_updateLineItems as updateLineItems };
}

interface OrderWithFulfillments {
    /** Order ID. */
    orderId?: string;
    /** Fulfillments associated with the order. */
    fulfillments?: Fulfillment$1[];
}
/** for now, this is a sub-object of Orders, so can refer to order line items by id. */
interface Fulfillment$1 extends FulfillmentFulfillmentInfoOneOf {
    /** Tracking info. */
    trackingInfo?: FulfillmentTrackingInfo$1;
    /** Custom fulfillment info. */
    customInfo?: CustomFulfillmentInfo;
    /**
     * Fulfillment ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Fulfillment creation date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Line items being fulfilled. */
    lineItems?: FulfillmentLineItem$1[];
    /**
     * Fulfillment status.
     *
     * Supported values:
     * + `"Pending"`
     * + `"Accepted"`
     * + `"Ready"`
     * + `"In_Delivery"`
     * + `"Fulfilled"`
     */
    status?: string | null;
    /** Fulfillment handling complete. */
    completed?: boolean | null;
}
/** @oneof */
interface FulfillmentFulfillmentInfoOneOf {
    /** Tracking info. */
    trackingInfo?: FulfillmentTrackingInfo$1;
    /** Custom fulfillment info. */
    customInfo?: CustomFulfillmentInfo;
}
interface FulfillmentLineItem$1 {
    /** Line item ID (mirrors the ID of the order line item). */
    _id?: string;
    /**
     * Line item quantity.
     * * If this property isn't passed on creation, it defaults to the number of items not already linked to a fulfillment.
     * * If the order does not have the requested quantity of line items available to add to this fulfillment, the fulfillment will not be created and an error is returned.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number | null;
}
interface FulfillmentTrackingInfo$1 {
    /** Shipping/delivery tracking number. */
    trackingNumber?: string | null;
    /**
     * Shipping provider. Using one of the following shipping providers will allow for auto-filling the tracking link:
     * * `'fedex'`
     * * `'ups'`
     * * `'usps'`
     * * `'dhl'`
     * * `'canadaPost'`
     */
    shippingProvider?: string | null;
    /** Tracking link. Auto-filled if a predefined shipping provider is used, otherwise provided on creation. */
    trackingLink?: string | null;
}
interface CustomFulfillmentInfo {
    /** Custom fulfillment info in key:value form. */
    fieldsData?: Record<string, string>;
}
interface FulfillmentCreated {
    /** Order ID (auto generated upon order creation). */
    orderId?: string;
    /** ID of the newly created fulfillment. */
    fulfillmentId?: string;
    /** Fulfillment creation date and time. */
    dateCreated?: Date | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo$2;
    /** Order fulfillment status. */
    fulfillmentStatus?: FulfillmentStatus$2;
    /** Fulfillment tracking information. */
    trackingInfo?: V2FulfillmentTrackingInfo;
}
/** Buyer Info */
interface BuyerInfo$2 {
    /** Wix customer ID */
    _id?: string | null;
    /**
     * Deprecated (use identityType instead)
     * @readonly
     * @deprecated
     */
    type?: IdentityType$3;
    /** Customer type */
    identityType?: IdentityType$3;
    /**
     * Customer's first name
     * @readonly
     */
    firstName?: string;
    /**
     * Customer's last name
     * @readonly
     */
    lastName?: string;
    /**
     * Customer's phone number
     * @readonly
     */
    phone?: string | null;
    /**
     * Customer's email address
     * @readonly
     */
    email?: string;
}
declare enum IdentityType$3 {
    UNSPECIFIED_IDENTITY_TYPE = "UNSPECIFIED_IDENTITY_TYPE",
    /** Site member */
    MEMBER = "MEMBER",
    /** Contact */
    CONTACT = "CONTACT"
}
declare enum FulfillmentStatus$2 {
    /** None of the order items are fulfilled */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FULFILLED = "FULFILLED",
    /** Order is canceled */
    CANCELED = "CANCELED",
    /** Some, but not all of the order items are fulfilled */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
interface V2FulfillmentTrackingInfo {
    /** Tracking number. */
    trackingNumber?: string;
    /**
     * Shipping provider. Using the following shipping providers will allow for autofilling the tracking link:
     * * `fedex`
     * * `ups`
     * * `usps`
     * * `dhl`
     * * `canadaPost`
     */
    shippingProvider?: string;
    /** Tracking link - autofilled if using a predefined shipping provider, otherwise provided on creation. */
    trackingLink?: string | null;
}
interface FulfillmentUpdated {
    /** Order ID (auto generated upon order creation). */
    orderId?: string;
    /** ID of the updated fulfillment. */
    fulfillmentId?: string;
    /** Fulfillment tracking information. */
    trackingInfo?: V2FulfillmentTrackingInfo;
}
interface FulfillmentDeleted {
    /** Order ID (auto generated upon order creation). */
    orderId?: string;
    /** ID of the deleted fulfillment. */
    fulfillmentId?: string;
    /** Order fulfillment status. */
    fulfillmentStatus?: FulfillmentStatus$2;
}
interface ListFulfillmentsForSingleOrderRequest {
    /** Order ID for which to retrieve fulfillments. */
    orderId: string;
}
interface ListFulfillmentsForSingleOrderResponse {
    /** List of fulfillments associated with the order. */
    orderWithFulfillments?: OrderWithFulfillments;
}
interface ListFulfillmentsForMultipleOrdersRequest {
    /** List of order IDs for which to retrieve fulfillments. */
    orderIds: string[];
}
interface ListFulfillmentsForMultipleOrdersResponse {
    /** List of order IDs and their associated fulfillments. */
    ordersWithFulfillments?: OrderWithFulfillments[];
}
interface CreateFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** Fulfillment info. */
    fulfillment: Fulfillment$1;
}
interface CreateFulfillmentResponse {
    /** Order ID and the orders' fulfillments. */
    orderWithFulfillments?: OrderWithFulfillments;
    /** ID of created fulfillment. */
    fulfillmentId?: string;
}
interface UpdateFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** Fulfillment info to update. */
    fulfillment?: Fulfillment$1;
}
interface UpdateFulfillmentResponse {
    /** Order ID and the orders' associated fulfillments after update. */
    orderWithFulfillments?: OrderWithFulfillments;
}
interface DeleteFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** ID of the fulfillment to delete. */
    fulfillmentId: string;
}
interface DeleteFulfillmentResponse {
    /** Order ID and the order's associated fulfillments after deletion. */
    orderWithFulfillments?: OrderWithFulfillments;
}
interface BulkCreateFulfillmentRequest {
    /** List of order IDs and their associated fulfillments' info. */
    ordersWithFulfillments: BulkCreateOrderWithFulfillments[];
}
interface BulkCreateOrderWithFulfillments {
    /** Order ID. */
    orderId?: string;
    /** Fulfillments associated with the order. */
    fulfillments?: Fulfillment$1[];
}
interface BulkCreateFulfillmentResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderFulfillmentsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$2;
}
interface BulkOrderFulfillmentsResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata$2;
    /** List of order IDs and their associated fulfillments. */
    ordersWithFulfillments?: OrderWithFulfillments;
}
interface ItemMetadata$2 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$5;
}
interface ApplicationError$5 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$2 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface DomainEvent$b extends DomainEventBodyOneOf$b {
    createdEvent?: EntityCreatedEvent$b;
    updatedEvent?: EntityUpdatedEvent$b;
    deletedEvent?: EntityDeletedEvent$b;
    actionEvent?: ActionEvent$b;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$b {
    createdEvent?: EntityCreatedEvent$b;
    updatedEvent?: EntityUpdatedEvent$b;
    deletedEvent?: EntityDeletedEvent$b;
    actionEvent?: ActionEvent$b;
}
interface EntityCreatedEvent$b {
    entity?: string;
}
interface RestoreInfo$b {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$b {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$b {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$b {
    body?: string;
}
interface MessageEnvelope$a {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$b;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$b extends IdentificationDataIdOneOf$b {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$a;
}
/** @oneof */
interface IdentificationDataIdOneOf$b {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$a {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface FulfillmentLineItemNonNullableFields {
    _id: string;
}
interface FulfillmentNonNullableFields {
    lineItems: FulfillmentLineItemNonNullableFields[];
}
interface OrderWithFulfillmentsNonNullableFields {
    orderId: string;
    fulfillments: FulfillmentNonNullableFields[];
}
interface ListFulfillmentsForSingleOrderResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface ListFulfillmentsForMultipleOrdersResponseNonNullableFields {
    ordersWithFulfillments: OrderWithFulfillmentsNonNullableFields[];
}
interface CreateFulfillmentResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
    fulfillmentId: string;
}
interface UpdateFulfillmentResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface DeleteFulfillmentResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface ApplicationErrorNonNullableFields$5 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$2 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$5;
}
interface BulkOrderFulfillmentsResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields$2;
    ordersWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface BulkActionMetadataNonNullableFields$2 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateFulfillmentResponseNonNullableFields {
    results: BulkOrderFulfillmentsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$2;
}
interface BaseEventMetadata$4 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$b;
}
interface EventMetadata$4 extends BaseEventMetadata$4 {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface FulfillmentsUpdatedEnvelope {
    entity: OrderWithFulfillments;
    metadata: EventMetadata$4;
}
interface UpdateFulfillmentOptions {
    /** Fulfillment info. */
    fulfillment: {
        /** Tracking info. */
        trackingInfo?: FulfillmentTrackingInfo$1;
        /** Custom fulfillment info. */
        customInfo?: CustomFulfillmentInfo;
        /**
         * Fulfillment ID.
         * @readonly
         */
        _id?: string | null;
        /**
         * Fulfillment creation date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
         * @readonly
         */
        _createdDate?: Date | null;
        /** Line items being fulfilled. */
        lineItems?: FulfillmentLineItem$1[];
        /**
         * Fulfillment status.
         *
         * Supported values:
         * + `"Pending"`
         * + `"Accepted"`
         * + `"Ready"`
         * + `"In_Delivery"`
         * + `"Fulfilled"`
         */
        status?: string | null;
        /** Fulfillment handling complete. */
        completed?: boolean | null;
    };
}
interface UpdateFulfillmentIdentifiers {
    /**
     * ID of the fulfillment to be updated.
     * @readonly
     */
    fulfillmentId?: string | null;
    /** Order ID. */
    orderId: string;
}
interface DeleteFulfillmentIdentifiers {
    /** ID of the fulfillment to delete. */
    fulfillmentId: string;
    /** Order ID. */
    orderId: string;
}

declare function listFulfillmentsForSingleOrder$1(httpClient: HttpClient): ListFulfillmentsForSingleOrderSignature;
interface ListFulfillmentsForSingleOrderSignature {
    /**
     * Retrieves fulfillments associated with a specified order.
     *
     *
     * The `listFulfillmentsForSingleOrder()` function returns a Promise that resolves when the fulfillments are retrieved.
     * @param - Order ID for which to retrieve fulfillments.
     */
    (orderId: string): Promise<ListFulfillmentsForSingleOrderResponse & ListFulfillmentsForSingleOrderResponseNonNullableFields>;
}
declare function listFulfillmentsForMultipleOrders$1(httpClient: HttpClient): ListFulfillmentsForMultipleOrdersSignature;
interface ListFulfillmentsForMultipleOrdersSignature {
    /**
     * Retrieves fulfillments associated with multiple specified orders.
     *
     *
     * The `listFulfillmentsForMultipleOrders()` function returns a Promise that resolves when the fulfillments are retrieved.
     * @param - List of order IDs for which to retrieve fulfillments.
     */
    (orderIds: string[]): Promise<ListFulfillmentsForMultipleOrdersResponse & ListFulfillmentsForMultipleOrdersResponseNonNullableFields>;
}
declare function createFulfillment$1(httpClient: HttpClient): CreateFulfillmentSignature;
interface CreateFulfillmentSignature {
    /**
     * Creates an order fulfillment.
     *
     *
     * The `createFulfillment()` function returns a Promise that resolves when the fulfillment is created.
     * @param - Order ID.
     * @param - Fulfillment info.
     */
    (orderId: string, fulfillment: Fulfillment$1): Promise<CreateFulfillmentResponse & CreateFulfillmentResponseNonNullableFields>;
}
declare function updateFulfillment$1(httpClient: HttpClient): UpdateFulfillmentSignature;
interface UpdateFulfillmentSignature {
    /**
     * Updates a fulfillment's properties.
     * To update a field's value, include the new value in the `fulfillment` field in the body params.
     * To remove a field's value, pass `null`.
     *
     *
     * The `updateFulfillment()` function returns a Promise that resolves when the fulfillment is updated.
     *
     * > **Note:** Updating line item IDs or fulfilled quantities is not allowed. To update line item IDs or quantities, delete the fulfillment and create it again.
     * @param - Order and fulfillment IDs to be updated.
     * @param - Available options to use when updating a fulfillment.
     * @returns Order ID and the orders' associated fulfillments after update.
     */
    (identifiers: UpdateFulfillmentIdentifiers, options?: UpdateFulfillmentOptions | undefined): Promise<OrderWithFulfillments & OrderWithFulfillmentsNonNullableFields>;
}
declare function deleteFulfillment$1(httpClient: HttpClient): DeleteFulfillmentSignature;
interface DeleteFulfillmentSignature {
    /**
     * Deletes an existing order fulfillment.
     *
     *
     * The `deleteFulfillment()` function returns a Promise that resolves when the fulfillment is deleted.
     * @param - Order and fulfillment IDs.
     */
    (identifiers: DeleteFulfillmentIdentifiers): Promise<DeleteFulfillmentResponse & DeleteFulfillmentResponseNonNullableFields>;
}
declare function bulkCreateFulfillments$1(httpClient: HttpClient): BulkCreateFulfillmentsSignature;
interface BulkCreateFulfillmentsSignature {
    /**
     * Creates multiple fulfillments for one or more orders.
     *
     *
     * The `bulkCreateFulfillments()` function returns a Promise that resolves when the fulfillments are created.
     * @param - List of order IDs and their associated fulfillments' info.
     */
    (ordersWithFulfillments: BulkCreateOrderWithFulfillments[]): Promise<BulkCreateFulfillmentResponse & BulkCreateFulfillmentResponseNonNullableFields>;
}
declare const onFulfillmentsUpdated$1: EventDefinition<FulfillmentsUpdatedEnvelope, "wix.ecom.v1.fulfillments_updated">;

declare function createEventModule$4<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const listFulfillmentsForSingleOrder: MaybeContext<BuildRESTFunction<typeof listFulfillmentsForSingleOrder$1> & typeof listFulfillmentsForSingleOrder$1>;
declare const listFulfillmentsForMultipleOrders: MaybeContext<BuildRESTFunction<typeof listFulfillmentsForMultipleOrders$1> & typeof listFulfillmentsForMultipleOrders$1>;
declare const createFulfillment: MaybeContext<BuildRESTFunction<typeof createFulfillment$1> & typeof createFulfillment$1>;
declare const updateFulfillment: MaybeContext<BuildRESTFunction<typeof updateFulfillment$1> & typeof updateFulfillment$1>;
declare const deleteFulfillment: MaybeContext<BuildRESTFunction<typeof deleteFulfillment$1> & typeof deleteFulfillment$1>;
declare const bulkCreateFulfillments: MaybeContext<BuildRESTFunction<typeof bulkCreateFulfillments$1> & typeof bulkCreateFulfillments$1>;

type _publicOnFulfillmentsUpdatedType = typeof onFulfillmentsUpdated$1;
/**
 * Triggered when one or more of an order's fulfillments are created, updated, or deleted.
 *
 * The response contains the order's ID and details about all of its fulfillments following the change.
 */
declare const onFulfillmentsUpdated: ReturnType<typeof createEventModule$4<_publicOnFulfillmentsUpdatedType>>;

type index_d$f_BulkCreateFulfillmentRequest = BulkCreateFulfillmentRequest;
type index_d$f_BulkCreateFulfillmentResponse = BulkCreateFulfillmentResponse;
type index_d$f_BulkCreateFulfillmentResponseNonNullableFields = BulkCreateFulfillmentResponseNonNullableFields;
type index_d$f_BulkCreateOrderWithFulfillments = BulkCreateOrderWithFulfillments;
type index_d$f_BulkOrderFulfillmentsResult = BulkOrderFulfillmentsResult;
type index_d$f_CreateFulfillmentRequest = CreateFulfillmentRequest;
type index_d$f_CreateFulfillmentResponse = CreateFulfillmentResponse;
type index_d$f_CreateFulfillmentResponseNonNullableFields = CreateFulfillmentResponseNonNullableFields;
type index_d$f_CustomFulfillmentInfo = CustomFulfillmentInfo;
type index_d$f_DeleteFulfillmentIdentifiers = DeleteFulfillmentIdentifiers;
type index_d$f_DeleteFulfillmentRequest = DeleteFulfillmentRequest;
type index_d$f_DeleteFulfillmentResponse = DeleteFulfillmentResponse;
type index_d$f_DeleteFulfillmentResponseNonNullableFields = DeleteFulfillmentResponseNonNullableFields;
type index_d$f_FulfillmentCreated = FulfillmentCreated;
type index_d$f_FulfillmentDeleted = FulfillmentDeleted;
type index_d$f_FulfillmentFulfillmentInfoOneOf = FulfillmentFulfillmentInfoOneOf;
type index_d$f_FulfillmentUpdated = FulfillmentUpdated;
type index_d$f_FulfillmentsUpdatedEnvelope = FulfillmentsUpdatedEnvelope;
type index_d$f_ListFulfillmentsForMultipleOrdersRequest = ListFulfillmentsForMultipleOrdersRequest;
type index_d$f_ListFulfillmentsForMultipleOrdersResponse = ListFulfillmentsForMultipleOrdersResponse;
type index_d$f_ListFulfillmentsForMultipleOrdersResponseNonNullableFields = ListFulfillmentsForMultipleOrdersResponseNonNullableFields;
type index_d$f_ListFulfillmentsForSingleOrderRequest = ListFulfillmentsForSingleOrderRequest;
type index_d$f_ListFulfillmentsForSingleOrderResponse = ListFulfillmentsForSingleOrderResponse;
type index_d$f_ListFulfillmentsForSingleOrderResponseNonNullableFields = ListFulfillmentsForSingleOrderResponseNonNullableFields;
type index_d$f_OrderWithFulfillments = OrderWithFulfillments;
type index_d$f_OrderWithFulfillmentsNonNullableFields = OrderWithFulfillmentsNonNullableFields;
type index_d$f_UpdateFulfillmentIdentifiers = UpdateFulfillmentIdentifiers;
type index_d$f_UpdateFulfillmentOptions = UpdateFulfillmentOptions;
type index_d$f_UpdateFulfillmentRequest = UpdateFulfillmentRequest;
type index_d$f_UpdateFulfillmentResponse = UpdateFulfillmentResponse;
type index_d$f_UpdateFulfillmentResponseNonNullableFields = UpdateFulfillmentResponseNonNullableFields;
type index_d$f_V2FulfillmentTrackingInfo = V2FulfillmentTrackingInfo;
type index_d$f__publicOnFulfillmentsUpdatedType = _publicOnFulfillmentsUpdatedType;
declare const index_d$f_bulkCreateFulfillments: typeof bulkCreateFulfillments;
declare const index_d$f_createFulfillment: typeof createFulfillment;
declare const index_d$f_deleteFulfillment: typeof deleteFulfillment;
declare const index_d$f_listFulfillmentsForMultipleOrders: typeof listFulfillmentsForMultipleOrders;
declare const index_d$f_listFulfillmentsForSingleOrder: typeof listFulfillmentsForSingleOrder;
declare const index_d$f_onFulfillmentsUpdated: typeof onFulfillmentsUpdated;
declare const index_d$f_updateFulfillment: typeof updateFulfillment;
declare namespace index_d$f {
  export { type ActionEvent$b as ActionEvent, type ApplicationError$5 as ApplicationError, type BaseEventMetadata$4 as BaseEventMetadata, type BulkActionMetadata$2 as BulkActionMetadata, type index_d$f_BulkCreateFulfillmentRequest as BulkCreateFulfillmentRequest, type index_d$f_BulkCreateFulfillmentResponse as BulkCreateFulfillmentResponse, type index_d$f_BulkCreateFulfillmentResponseNonNullableFields as BulkCreateFulfillmentResponseNonNullableFields, type index_d$f_BulkCreateOrderWithFulfillments as BulkCreateOrderWithFulfillments, type index_d$f_BulkOrderFulfillmentsResult as BulkOrderFulfillmentsResult, type BuyerInfo$2 as BuyerInfo, type index_d$f_CreateFulfillmentRequest as CreateFulfillmentRequest, type index_d$f_CreateFulfillmentResponse as CreateFulfillmentResponse, type index_d$f_CreateFulfillmentResponseNonNullableFields as CreateFulfillmentResponseNonNullableFields, type index_d$f_CustomFulfillmentInfo as CustomFulfillmentInfo, type index_d$f_DeleteFulfillmentIdentifiers as DeleteFulfillmentIdentifiers, type index_d$f_DeleteFulfillmentRequest as DeleteFulfillmentRequest, type index_d$f_DeleteFulfillmentResponse as DeleteFulfillmentResponse, type index_d$f_DeleteFulfillmentResponseNonNullableFields as DeleteFulfillmentResponseNonNullableFields, type DomainEvent$b as DomainEvent, type DomainEventBodyOneOf$b as DomainEventBodyOneOf, type EntityCreatedEvent$b as EntityCreatedEvent, type EntityDeletedEvent$b as EntityDeletedEvent, type EntityUpdatedEvent$b as EntityUpdatedEvent, type EventMetadata$4 as EventMetadata, type Fulfillment$1 as Fulfillment, type index_d$f_FulfillmentCreated as FulfillmentCreated, type index_d$f_FulfillmentDeleted as FulfillmentDeleted, type index_d$f_FulfillmentFulfillmentInfoOneOf as FulfillmentFulfillmentInfoOneOf, type FulfillmentLineItem$1 as FulfillmentLineItem, FulfillmentStatus$2 as FulfillmentStatus, type FulfillmentTrackingInfo$1 as FulfillmentTrackingInfo, type index_d$f_FulfillmentUpdated as FulfillmentUpdated, type index_d$f_FulfillmentsUpdatedEnvelope as FulfillmentsUpdatedEnvelope, type IdentificationData$b as IdentificationData, type IdentificationDataIdOneOf$b as IdentificationDataIdOneOf, IdentityType$3 as IdentityType, type ItemMetadata$2 as ItemMetadata, type index_d$f_ListFulfillmentsForMultipleOrdersRequest as ListFulfillmentsForMultipleOrdersRequest, type index_d$f_ListFulfillmentsForMultipleOrdersResponse as ListFulfillmentsForMultipleOrdersResponse, type index_d$f_ListFulfillmentsForMultipleOrdersResponseNonNullableFields as ListFulfillmentsForMultipleOrdersResponseNonNullableFields, type index_d$f_ListFulfillmentsForSingleOrderRequest as ListFulfillmentsForSingleOrderRequest, type index_d$f_ListFulfillmentsForSingleOrderResponse as ListFulfillmentsForSingleOrderResponse, type index_d$f_ListFulfillmentsForSingleOrderResponseNonNullableFields as ListFulfillmentsForSingleOrderResponseNonNullableFields, type MessageEnvelope$a as MessageEnvelope, type index_d$f_OrderWithFulfillments as OrderWithFulfillments, type index_d$f_OrderWithFulfillmentsNonNullableFields as OrderWithFulfillmentsNonNullableFields, type RestoreInfo$b as RestoreInfo, type index_d$f_UpdateFulfillmentIdentifiers as UpdateFulfillmentIdentifiers, type index_d$f_UpdateFulfillmentOptions as UpdateFulfillmentOptions, type index_d$f_UpdateFulfillmentRequest as UpdateFulfillmentRequest, type index_d$f_UpdateFulfillmentResponse as UpdateFulfillmentResponse, type index_d$f_UpdateFulfillmentResponseNonNullableFields as UpdateFulfillmentResponseNonNullableFields, type index_d$f_V2FulfillmentTrackingInfo as V2FulfillmentTrackingInfo, WebhookIdentityType$a as WebhookIdentityType, type index_d$f__publicOnFulfillmentsUpdatedType as _publicOnFulfillmentsUpdatedType, index_d$f_bulkCreateFulfillments as bulkCreateFulfillments, index_d$f_createFulfillment as createFulfillment, index_d$f_deleteFulfillment as deleteFulfillment, index_d$f_listFulfillmentsForMultipleOrders as listFulfillmentsForMultipleOrders, index_d$f_listFulfillmentsForSingleOrder as listFulfillmentsForSingleOrder, index_d$f_onFulfillmentsUpdated as onFulfillmentsUpdated, onFulfillmentsUpdated$1 as publicOnFulfillmentsUpdated, index_d$f_updateFulfillment as updateFulfillment };
}

interface GiftCard$2 {
    /**
     * Gift card obfuscated code.
     *
     * For example: "****-****-****-1234".
     */
    obfuscatedCode?: string;
    /** Gift card balance. */
    balance?: Money;
    /**
     * Current gift card status. Supported values:
     * + **VALID**: Gift card is active and can be used for purchases.
     * + **EXPIRED**: Gift card expiration date has passed and can no longer be used.
     * + **DISABLED**: Gift card has been disabled by the merchant and can no longer be used.
     */
    status?: Status$1;
    /** App ID of the gift card provider, as returned in eCommerce Get Checkout or List Transactions for Single Order. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface Money {
    /** Monetary amount. Decimal string with a period as a decimal separator (e.g., 3.99). Optionally, a single (-), to indicate that the amount is negative. */
    value?: string;
    /** Currency code. Must be valid ISO 4217 currency code (e.g., USD). */
    currency?: string;
}
declare enum Status$1 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    VALID = "VALID",
    EXPIRED = "EXPIRED",
    DISABLED = "DISABLED"
}
interface GetGiftCardRequest {
    /** Gift card code. */
    code: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
}
interface Context {
    /** Physical location ID. Can be based on the Locations API or an external provider. */
    locationId?: string | null;
}
interface GetGiftCardResponse {
    /** Retrieved gift card. */
    giftCard?: GiftCard$2;
}
interface RedeemGiftCardRequest {
    /** Gift card code. */
    code: string;
    /** Amount to redeem from the gift card. */
    amount: Money;
    /** Order ID to apply the gift card transaction, when applying a gift card after order creation. Order ID can be collected from the eCommerce Order Created webhook or by calling eCommerce Search Orders. */
    orderId?: string;
    /** App ID of the gift card provider. */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
}
interface RedeemGiftCardResponse {
    /** Gift card transaction ID. */
    transactionId?: string;
}
interface VoidTransactionRequest {
    /** Gift card transaction ID, as returned from Redeem Gift Card. */
    transactionId: string;
    /** App ID of the gift card provider. */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
}
interface VoidTransactionResponse {
}
interface MoneyNonNullableFields {
    value: string;
    currency: string;
}
interface GiftCardNonNullableFields$1 {
    obfuscatedCode: string;
    balance?: MoneyNonNullableFields;
    status: Status$1;
    appId: string;
}
interface GetGiftCardResponseNonNullableFields {
    giftCard?: GiftCardNonNullableFields$1;
}
interface RedeemGiftCardResponseNonNullableFields {
    transactionId: string;
}
interface GetGiftCardOptions {
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
}
interface RedeemGiftCardOptions {
    /** Amount to redeem from the gift card. */
    amount: Money;
    /** Order ID to apply the gift card transaction, when applying a gift card after order creation. Order ID can be collected from the eCommerce Order Created webhook or by calling eCommerce Search Orders. */
    orderId?: string;
    /** App ID of the gift card provider. */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
}
interface VoidTransactionOptions {
    /** App ID of the gift card provider. */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
}

declare function getGiftCard$1(httpClient: HttpClient): GetGiftCardSignature;
interface GetGiftCardSignature {
    /**
     * Retrieves a gift card.
     * @param - Gift card code.
     * @param - Field options.
     */
    (code: string, options?: GetGiftCardOptions | undefined): Promise<GetGiftCardResponse & GetGiftCardResponseNonNullableFields>;
}
declare function redeemGiftCard$1(httpClient: HttpClient): RedeemGiftCardSignature;
interface RedeemGiftCardSignature {
    /**
     * Redeems a gift card.
     * Creates a transaction and lowers the card balance by the transaction amount.
     * @param - Gift card code.
     * @param - Field options. `amount` and `appId` **must** be passed.
     */
    (code: string, options?: RedeemGiftCardOptions | undefined): Promise<RedeemGiftCardResponse & RedeemGiftCardResponseNonNullableFields>;
}
declare function voidTransaction$1(httpClient: HttpClient): VoidTransactionSignature;
interface VoidTransactionSignature {
    /**
     * Voids a gift card transaction.
     * Transaction IDs are returned in Redeem Gift Card.
     * @param - Gift card transaction ID, as returned from Redeem Gift Card.
     * @param - Field options. `appId` **must** be passed.
     */
    (transactionId: string, options?: VoidTransactionOptions | undefined): Promise<void>;
}

declare const getGiftCard: MaybeContext<BuildRESTFunction<typeof getGiftCard$1> & typeof getGiftCard$1>;
declare const redeemGiftCard: MaybeContext<BuildRESTFunction<typeof redeemGiftCard$1> & typeof redeemGiftCard$1>;
declare const voidTransaction: MaybeContext<BuildRESTFunction<typeof voidTransaction$1> & typeof voidTransaction$1>;

type index_d$e_Context = Context;
type index_d$e_GetGiftCardOptions = GetGiftCardOptions;
type index_d$e_GetGiftCardRequest = GetGiftCardRequest;
type index_d$e_GetGiftCardResponse = GetGiftCardResponse;
type index_d$e_GetGiftCardResponseNonNullableFields = GetGiftCardResponseNonNullableFields;
type index_d$e_Money = Money;
type index_d$e_RedeemGiftCardOptions = RedeemGiftCardOptions;
type index_d$e_RedeemGiftCardRequest = RedeemGiftCardRequest;
type index_d$e_RedeemGiftCardResponse = RedeemGiftCardResponse;
type index_d$e_RedeemGiftCardResponseNonNullableFields = RedeemGiftCardResponseNonNullableFields;
type index_d$e_VoidTransactionOptions = VoidTransactionOptions;
type index_d$e_VoidTransactionRequest = VoidTransactionRequest;
type index_d$e_VoidTransactionResponse = VoidTransactionResponse;
declare const index_d$e_getGiftCard: typeof getGiftCard;
declare const index_d$e_redeemGiftCard: typeof redeemGiftCard;
declare const index_d$e_voidTransaction: typeof voidTransaction;
declare namespace index_d$e {
  export { type index_d$e_Context as Context, type index_d$e_GetGiftCardOptions as GetGiftCardOptions, type index_d$e_GetGiftCardRequest as GetGiftCardRequest, type index_d$e_GetGiftCardResponse as GetGiftCardResponse, type index_d$e_GetGiftCardResponseNonNullableFields as GetGiftCardResponseNonNullableFields, type GiftCard$2 as GiftCard, type index_d$e_Money as Money, type index_d$e_RedeemGiftCardOptions as RedeemGiftCardOptions, type index_d$e_RedeemGiftCardRequest as RedeemGiftCardRequest, type index_d$e_RedeemGiftCardResponse as RedeemGiftCardResponse, type index_d$e_RedeemGiftCardResponseNonNullableFields as RedeemGiftCardResponseNonNullableFields, Status$1 as Status, type index_d$e_VoidTransactionOptions as VoidTransactionOptions, type index_d$e_VoidTransactionRequest as VoidTransactionRequest, type index_d$e_VoidTransactionResponse as VoidTransactionResponse, index_d$e_getGiftCard as getGiftCard, index_d$e_redeemGiftCard as redeemGiftCard, index_d$e_voidTransaction as voidTransaction };
}

interface LocalDeliveryOption extends LocalDeliveryOptionConfigOneOf {
    zipConfig?: ZipCodeConfig;
    radiusConfig?: RadiusConfig;
    customAreaConfig?: CustomAreaConfig;
    /** LocalDeliveryOptionId - unique identifier of local delivery option */
    _id?: string | null;
    /** Area name of Local Delivery Option */
    areaName?: string | null;
    /**
     * Flat price of local delivery
     * @deprecated Flat price of local delivery
     * @targetRemovalDate 2025-01-12
     */
    rate?: string | null;
    /** Estimated delivery time description text */
    estimatedDeliveryTime?: string | null;
    /**
     * Minimum order total to be eligible for free delivery
     * @deprecated Minimum order total to be eligible for free delivery
     * @targetRemovalDate 2025-01-12
     */
    minimumFreeDeliveryOrderAmount?: number | null;
    /** List of countries with subdivisions */
    destinations?: Destination[];
    /**
     * Database revision of LocalDeliveryOption entity. Incremented on each modification
     * @readonly
     */
    revision?: string | null;
    scheduledDeliveryConfig?: ScheduledDelivery;
    /** at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates$2[];
    /**
     * Date and time the LocalDeliveryOption was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the LocalDeliveryOption was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** This local delivery is active for the following delivery regions. */
    deliveryRegionIds?: string[];
}
/** @oneof */
interface LocalDeliveryOptionConfigOneOf {
    zipConfig?: ZipCodeConfig;
    radiusConfig?: RadiusConfig;
    customAreaConfig?: CustomAreaConfig;
}
interface Destination {
    /** Country ISO code */
    code?: string;
    /** List of subdivisions, empty means all */
    subdivisions?: string[];
}
interface ZipCodeConfig {
    /** List of ZipCodes and ZipCode regexes. Examples: 10001, 10002 or 1000* */
    zipCodes?: string[];
}
interface RadiusConfig {
    /** Delivery-from address */
    address?: LocalDeliveryAddress;
    /** Delivery circle's radius */
    radius?: number;
    /**
     * Radius' unit, taken from site properties
     * @readonly
     */
    lengthUnit?: LengthUnit;
}
interface LocalDeliveryAddress {
    /** A string containing the human-readable address of this location */
    formatted?: string | null;
    /** coordinates of the physical address */
    location?: AddressLocation$4;
}
interface AddressLocation$4 {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
declare enum LengthUnit {
    /** Length unit can't be classified, due to an error */
    UNSPECIFIED_LENGTH_UNIT = "UNSPECIFIED_LENGTH_UNIT",
    /** Kilometers */
    KM = "KM",
    /** Miles */
    MI = "MI"
}
interface CustomAreaConfig {
    /** Geocodes of the polygon defining the delivery area. */
    geocodes?: AddressLocation$4[];
}
interface ScheduledDelivery {
    /**
     * Days config which contain days when delivery is enabled with it's time slots
     * @deprecated Days config which contain days when delivery is enabled with it's time slots
     * @replacedBy time_windows
     * @targetRemovalDate 2025-01-01
     */
    days?: Days;
    /** Amount of days before first delivery option date */
    handlingDays?: number | null;
    /** Cut off time after which first delivery option would be for next day */
    cutOffTime?: TimePoint;
    /** availability times configuration. */
    timeWindows?: TimeWindow[];
}
interface Days {
    monday?: DaySlot;
    tuesday?: DaySlot;
    wednesday?: DaySlot;
    thursday?: DaySlot;
    friday?: DaySlot;
    saturday?: DaySlot;
    sunday?: DaySlot;
}
interface DaySlot {
    /** Shows whether this day slot is enabled for delivery */
    enabledForDelivery?: boolean | null;
    /** Time slots for scheduled delivery during day */
    timeSlots?: TimeSlot[];
}
interface TimeSlot {
    /** Starting time point of time slot */
    from?: TimePoint;
    /** End time point of time slot */
    to?: TimePoint;
}
interface TimePoint {
    /** Hours in format 0-23 */
    hours?: number | null;
    /** Minutes 0-59 */
    minutes?: number | null;
}
interface TimeWindow {
    /** The day of week this availability relates to. */
    day?: DayOfWeek;
    /** The start time in time of day representation. */
    start?: TimeOfDay;
    /** The end time in time of day representation. */
    end?: TimeOfDay;
}
declare enum DayOfWeek {
    /** Monday. */
    MON = "MON",
    /** Tuesday. */
    TUE = "TUE",
    /** Wednesday. */
    WED = "WED",
    /** Thursday. */
    THU = "THU",
    /** Friday. */
    FRI = "FRI",
    /** Saturday. */
    SAT = "SAT",
    /** Sunday. */
    SUN = "SUN"
}
interface TimeOfDay {
    /** Hours */
    hours?: number;
    /** Minutes */
    minutes?: number;
}
interface ConditionalRates$2 {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition$2[];
    amount?: string;
}
interface Condition$2 {
    type?: ConditionType$2;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator$2;
}
declare enum ConditionType$2 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
declare enum LogicalOperator$2 {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
interface CreateLocalDeliveryOptionRequest {
    localDeliveryOption: LocalDeliveryOption;
}
interface CreateLocalDeliveryOptionResponse {
    localDeliveryOption?: LocalDeliveryOption;
}
interface GetLocalDeliveryOptionRequest {
    /**
     * @deprecated
     * @targetRemovalDate 2025-01-12
     */
    _id?: string;
    localDeliveryOptionId: string;
}
interface GetLocalDeliveryOptionResponse {
    localDeliveryOption?: LocalDeliveryOption;
}
interface ListLocalDeliveryOptionsRequest {
    externalId: string;
}
interface ListLocalDeliveryOptionsResponse {
    localDeliveryOptions?: LocalDeliveryOption[];
}
interface QueryLocalDeliveryOptionsRequest {
    /** WQL expression */
    query: QueryV2$2;
}
interface QueryV2$2 extends QueryV2PagingMethodOneOf$2 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$2;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$8;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$8[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf$2 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$2;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$8;
}
interface Sorting$8 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$8;
}
declare enum SortOrder$8 {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging$2 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$8 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryLocalDeliveryOptionsResponse {
    /** Retrieved local delivery options. */
    localDeliveryOptions?: LocalDeliveryOption[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$7;
}
interface CursorPagingMetadata$7 {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$8;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$8 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateLocalDeliveryOptionRequest {
    localDeliveryOption: LocalDeliveryOption;
}
interface UpdateLocalDeliveryOptionResponse {
    localDeliveryOption?: LocalDeliveryOption;
}
interface DeleteLocalDeliveryOptionRequest {
    /**
     * @deprecated
     * @targetRemovalDate 2025-01-12
     */
    _id?: string;
    localDeliveryOptionId: string;
}
interface DeleteLocalDeliveryOptionResponse {
}
interface BulkCreateLocalDeliveryOptionRequest {
    localDeliveryOptions: LocalDeliveryOption[];
}
interface BulkCreateLocalDeliveryOptionResponse {
    localDeliveryOptions?: LocalDeliveryOption[];
    errors?: LocalDeliveryOptionError[];
}
interface LocalDeliveryOptionError {
    _id?: string;
    error?: string;
}
interface BulkUpdateLocalDeliveryOptionRequest {
    localDeliveryOptions: LocalDeliveryOption[];
}
interface BulkUpdateLocalDeliveryOptionResponse {
    localDeliveryOptions?: LocalDeliveryOption[];
    errors?: LocalDeliveryOptionError[];
}
interface BulkDeleteLocalDeliveryOptionRequest {
    ids: string[];
}
interface BulkDeleteLocalDeliveryOptionResponse {
}
interface Empty$6 {
}
interface DomainEvent$a extends DomainEventBodyOneOf$a {
    createdEvent?: EntityCreatedEvent$a;
    updatedEvent?: EntityUpdatedEvent$a;
    deletedEvent?: EntityDeletedEvent$a;
    actionEvent?: ActionEvent$a;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$a {
    createdEvent?: EntityCreatedEvent$a;
    updatedEvent?: EntityUpdatedEvent$a;
    deletedEvent?: EntityDeletedEvent$a;
    actionEvent?: ActionEvent$a;
}
interface EntityCreatedEvent$a {
    entity?: string;
}
interface RestoreInfo$a {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$a {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$a {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$a {
    body?: string;
}
interface AddDeliveryRegionRequest$1 {
    deliveryRegionId: string;
    localDeliveryOptionId: string;
    /** Revision of the PickupLocation */
    revision?: string | null;
}
interface AddDeliveryRegionResponse$1 {
    localDeliveryOption?: LocalDeliveryOption;
}
interface RemoveDeliveryRegionRequest$1 {
    deliveryRegionId: string;
    localDeliveryOptionId: string;
    /** Revision of the PickupLocation */
    revision?: string | null;
}
interface RemoveDeliveryRegionResponse$1 {
    localDeliveryOption?: LocalDeliveryOption;
}
interface MessageEnvelope$9 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$a;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$a extends IdentificationDataIdOneOf$a {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$9;
}
/** @oneof */
interface IdentificationDataIdOneOf$a {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$9 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface ZipCodeConfigNonNullableFields {
    zipCodes: string[];
}
interface RadiusConfigNonNullableFields {
    radius: number;
    lengthUnit: LengthUnit;
}
interface DestinationNonNullableFields {
    code: string;
    subdivisions: string[];
}
interface TimeOfDayNonNullableFields {
    hours: number;
    minutes: number;
}
interface TimeWindowNonNullableFields {
    day: DayOfWeek;
    start?: TimeOfDayNonNullableFields;
    end?: TimeOfDayNonNullableFields;
}
interface ScheduledDeliveryNonNullableFields {
    timeWindows: TimeWindowNonNullableFields[];
}
interface ConditionNonNullableFields$2 {
    type: ConditionType$2;
    value: string;
    operator: LogicalOperator$2;
}
interface ConditionalRatesNonNullableFields$2 {
    conditions: ConditionNonNullableFields$2[];
    amount: string;
}
interface LocalDeliveryOptionNonNullableFields {
    zipConfig?: ZipCodeConfigNonNullableFields;
    radiusConfig?: RadiusConfigNonNullableFields;
    destinations: DestinationNonNullableFields[];
    scheduledDeliveryConfig?: ScheduledDeliveryNonNullableFields;
    rates: ConditionalRatesNonNullableFields$2[];
    deliveryRegionIds: string[];
}
interface CreateLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface GetLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface ListLocalDeliveryOptionsResponseNonNullableFields {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields[];
}
interface QueryLocalDeliveryOptionsResponseNonNullableFields {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields[];
}
interface UpdateLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface LocalDeliveryOptionErrorNonNullableFields {
    _id: string;
    error: string;
}
interface BulkCreateLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields[];
    errors: LocalDeliveryOptionErrorNonNullableFields[];
}
interface BulkUpdateLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields[];
    errors: LocalDeliveryOptionErrorNonNullableFields[];
}
interface AddDeliveryRegionResponseNonNullableFields$1 {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface RemoveDeliveryRegionResponseNonNullableFields$1 {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface GetLocalDeliveryOptionOptions {
    /**
     * @deprecated
     * @targetRemovalDate 2025-01-12
     */
    _id?: string;
}
interface QueryCursorResult$6 {
    cursors: Cursors$8;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface LocalDeliveryOptionsQueryResult extends QueryCursorResult$6 {
    items: LocalDeliveryOption[];
    query: LocalDeliveryOptionsQueryBuilder;
    next: () => Promise<LocalDeliveryOptionsQueryResult>;
    prev: () => Promise<LocalDeliveryOptionsQueryResult>;
}
interface LocalDeliveryOptionsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'areaName' | 'estimatedDeliveryTime' | 'deliveryRegionIds', value: any) => LocalDeliveryOptionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'areaName' | 'estimatedDeliveryTime' | 'deliveryRegionIds', value: any) => LocalDeliveryOptionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'areaName' | 'estimatedDeliveryTime', value: string) => LocalDeliveryOptionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'areaName' | 'estimatedDeliveryTime' | 'deliveryRegionIds', value: any[]) => LocalDeliveryOptionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasAll: (propertyName: 'deliveryRegionIds', value: any[]) => LocalDeliveryOptionsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'areaName' | 'estimatedDeliveryTime' | 'deliveryRegionIds', value: any) => LocalDeliveryOptionsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'areaName' | 'estimatedDeliveryTime' | 'deliveryRegionIds', value: boolean) => LocalDeliveryOptionsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => LocalDeliveryOptionsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => LocalDeliveryOptionsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<LocalDeliveryOptionsQueryResult>;
}
interface UpdateLocalDeliveryOption {
    zipConfig?: ZipCodeConfig;
    radiusConfig?: RadiusConfig;
    customAreaConfig?: CustomAreaConfig;
    /** LocalDeliveryOptionId - unique identifier of local delivery option */
    _id?: string | null;
    /** Area name of Local Delivery Option */
    areaName?: string | null;
    /**
     * Flat price of local delivery
     * @deprecated Flat price of local delivery
     * @targetRemovalDate 2025-01-12
     */
    rate?: string | null;
    /** Estimated delivery time description text */
    estimatedDeliveryTime?: string | null;
    /**
     * Minimum order total to be eligible for free delivery
     * @deprecated Minimum order total to be eligible for free delivery
     * @targetRemovalDate 2025-01-12
     */
    minimumFreeDeliveryOrderAmount?: number | null;
    /** List of countries with subdivisions */
    destinations?: Destination[];
    /**
     * Database revision of LocalDeliveryOption entity. Incremented on each modification
     * @readonly
     */
    revision?: string | null;
    scheduledDeliveryConfig?: ScheduledDelivery;
    /** at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates$2[];
    /**
     * Date and time the LocalDeliveryOption was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the LocalDeliveryOption was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** This local delivery is active for the following delivery regions. */
    deliveryRegionIds?: string[];
}
interface DeleteLocalDeliveryOptionOptions {
    /**
     * @deprecated
     * @targetRemovalDate 2025-01-12
     */
    _id?: string;
}
interface AddDeliveryRegionOptions$1 {
    localDeliveryOptionId: string;
    /** Revision of the PickupLocation */
    revision?: string | null;
}
interface RemoveDeliveryRegionOptions$1 {
    localDeliveryOptionId: string;
    /** Revision of the PickupLocation */
    revision?: string | null;
}

declare function createLocalDeliveryOption$1(httpClient: HttpClient): CreateLocalDeliveryOptionSignature;
interface CreateLocalDeliveryOptionSignature {
    /** */
    (localDeliveryOption: LocalDeliveryOption): Promise<LocalDeliveryOption & LocalDeliveryOptionNonNullableFields>;
}
declare function getLocalDeliveryOption$1(httpClient: HttpClient): GetLocalDeliveryOptionSignature;
interface GetLocalDeliveryOptionSignature {
    /** */
    (localDeliveryOptionId: string, options?: GetLocalDeliveryOptionOptions | undefined): Promise<LocalDeliveryOption & LocalDeliveryOptionNonNullableFields>;
}
declare function listLocalDeliveryOptions$1(httpClient: HttpClient): ListLocalDeliveryOptionsSignature;
interface ListLocalDeliveryOptionsSignature {
    /** @deprecated method is deprecated due to the fact that external_id is deprecated */
    (externalId: string): Promise<ListLocalDeliveryOptionsResponse & ListLocalDeliveryOptionsResponseNonNullableFields>;
}
declare function queryLocalDeliveryOptions$1(httpClient: HttpClient): QueryLocalDeliveryOptionsSignature;
interface QueryLocalDeliveryOptionsSignature {
    /**
     * Retrieves a list of local delivery options, given the provided paging, filtering, and sorting.
     *
     * For field support for filters and sorting, see [Local Delivery: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-management/payments/tax/tax-regions/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language),
     * [Sorting and Paging](https://dev.wix.com/api/rest/getting-started/sorting-and-paging),
     * and [Field Projection](https://dev.wix.com/api/rest/getting-started/field-projection).
     */
    (): LocalDeliveryOptionsQueryBuilder;
}
declare function updateLocalDeliveryOption$1(httpClient: HttpClient): UpdateLocalDeliveryOptionSignature;
interface UpdateLocalDeliveryOptionSignature {
    /** @param - LocalDeliveryOptionId - unique identifier of local delivery option */
    (_id: string | null, localDeliveryOption: UpdateLocalDeliveryOption): Promise<LocalDeliveryOption & LocalDeliveryOptionNonNullableFields>;
}
declare function deleteLocalDeliveryOption$1(httpClient: HttpClient): DeleteLocalDeliveryOptionSignature;
interface DeleteLocalDeliveryOptionSignature {
    /** */
    (localDeliveryOptionId: string, options?: DeleteLocalDeliveryOptionOptions | undefined): Promise<void>;
}
declare function bulkCreateLocalDeliveryOption$1(httpClient: HttpClient): BulkCreateLocalDeliveryOptionSignature;
interface BulkCreateLocalDeliveryOptionSignature {
    /** */
    (localDeliveryOptions: LocalDeliveryOption[]): Promise<BulkCreateLocalDeliveryOptionResponse & BulkCreateLocalDeliveryOptionResponseNonNullableFields>;
}
declare function bulkUpdateLocalDeliveryOption$1(httpClient: HttpClient): BulkUpdateLocalDeliveryOptionSignature;
interface BulkUpdateLocalDeliveryOptionSignature {
    /** */
    (localDeliveryOptions: LocalDeliveryOption[]): Promise<BulkUpdateLocalDeliveryOptionResponse & BulkUpdateLocalDeliveryOptionResponseNonNullableFields>;
}
declare function bulkDeleteLocalDeliveryOption$1(httpClient: HttpClient): BulkDeleteLocalDeliveryOptionSignature;
interface BulkDeleteLocalDeliveryOptionSignature {
    /** */
    (ids: string[]): Promise<void>;
}
declare function addDeliveryRegion$3(httpClient: HttpClient): AddDeliveryRegionSignature$1;
interface AddDeliveryRegionSignature$1 {
    /** */
    (deliveryRegionId: string, options?: AddDeliveryRegionOptions$1 | undefined): Promise<AddDeliveryRegionResponse$1 & AddDeliveryRegionResponseNonNullableFields$1>;
}
declare function removeDeliveryRegion$3(httpClient: HttpClient): RemoveDeliveryRegionSignature$1;
interface RemoveDeliveryRegionSignature$1 {
    /** */
    (deliveryRegionId: string, options?: RemoveDeliveryRegionOptions$1 | undefined): Promise<RemoveDeliveryRegionResponse$1 & RemoveDeliveryRegionResponseNonNullableFields$1>;
}

declare const createLocalDeliveryOption: MaybeContext<BuildRESTFunction<typeof createLocalDeliveryOption$1> & typeof createLocalDeliveryOption$1>;
declare const getLocalDeliveryOption: MaybeContext<BuildRESTFunction<typeof getLocalDeliveryOption$1> & typeof getLocalDeliveryOption$1>;
declare const listLocalDeliveryOptions: MaybeContext<BuildRESTFunction<typeof listLocalDeliveryOptions$1> & typeof listLocalDeliveryOptions$1>;
declare const queryLocalDeliveryOptions: MaybeContext<BuildRESTFunction<typeof queryLocalDeliveryOptions$1> & typeof queryLocalDeliveryOptions$1>;
declare const updateLocalDeliveryOption: MaybeContext<BuildRESTFunction<typeof updateLocalDeliveryOption$1> & typeof updateLocalDeliveryOption$1>;
declare const deleteLocalDeliveryOption: MaybeContext<BuildRESTFunction<typeof deleteLocalDeliveryOption$1> & typeof deleteLocalDeliveryOption$1>;
declare const bulkCreateLocalDeliveryOption: MaybeContext<BuildRESTFunction<typeof bulkCreateLocalDeliveryOption$1> & typeof bulkCreateLocalDeliveryOption$1>;
declare const bulkUpdateLocalDeliveryOption: MaybeContext<BuildRESTFunction<typeof bulkUpdateLocalDeliveryOption$1> & typeof bulkUpdateLocalDeliveryOption$1>;
declare const bulkDeleteLocalDeliveryOption: MaybeContext<BuildRESTFunction<typeof bulkDeleteLocalDeliveryOption$1> & typeof bulkDeleteLocalDeliveryOption$1>;
declare const addDeliveryRegion$2: MaybeContext<BuildRESTFunction<typeof addDeliveryRegion$3> & typeof addDeliveryRegion$3>;
declare const removeDeliveryRegion$2: MaybeContext<BuildRESTFunction<typeof removeDeliveryRegion$3> & typeof removeDeliveryRegion$3>;

type index_d$d_BulkCreateLocalDeliveryOptionRequest = BulkCreateLocalDeliveryOptionRequest;
type index_d$d_BulkCreateLocalDeliveryOptionResponse = BulkCreateLocalDeliveryOptionResponse;
type index_d$d_BulkCreateLocalDeliveryOptionResponseNonNullableFields = BulkCreateLocalDeliveryOptionResponseNonNullableFields;
type index_d$d_BulkDeleteLocalDeliveryOptionRequest = BulkDeleteLocalDeliveryOptionRequest;
type index_d$d_BulkDeleteLocalDeliveryOptionResponse = BulkDeleteLocalDeliveryOptionResponse;
type index_d$d_BulkUpdateLocalDeliveryOptionRequest = BulkUpdateLocalDeliveryOptionRequest;
type index_d$d_BulkUpdateLocalDeliveryOptionResponse = BulkUpdateLocalDeliveryOptionResponse;
type index_d$d_BulkUpdateLocalDeliveryOptionResponseNonNullableFields = BulkUpdateLocalDeliveryOptionResponseNonNullableFields;
type index_d$d_CreateLocalDeliveryOptionRequest = CreateLocalDeliveryOptionRequest;
type index_d$d_CreateLocalDeliveryOptionResponse = CreateLocalDeliveryOptionResponse;
type index_d$d_CreateLocalDeliveryOptionResponseNonNullableFields = CreateLocalDeliveryOptionResponseNonNullableFields;
type index_d$d_CustomAreaConfig = CustomAreaConfig;
type index_d$d_DayOfWeek = DayOfWeek;
declare const index_d$d_DayOfWeek: typeof DayOfWeek;
type index_d$d_DaySlot = DaySlot;
type index_d$d_Days = Days;
type index_d$d_DeleteLocalDeliveryOptionOptions = DeleteLocalDeliveryOptionOptions;
type index_d$d_DeleteLocalDeliveryOptionRequest = DeleteLocalDeliveryOptionRequest;
type index_d$d_DeleteLocalDeliveryOptionResponse = DeleteLocalDeliveryOptionResponse;
type index_d$d_Destination = Destination;
type index_d$d_GetLocalDeliveryOptionOptions = GetLocalDeliveryOptionOptions;
type index_d$d_GetLocalDeliveryOptionRequest = GetLocalDeliveryOptionRequest;
type index_d$d_GetLocalDeliveryOptionResponse = GetLocalDeliveryOptionResponse;
type index_d$d_GetLocalDeliveryOptionResponseNonNullableFields = GetLocalDeliveryOptionResponseNonNullableFields;
type index_d$d_LengthUnit = LengthUnit;
declare const index_d$d_LengthUnit: typeof LengthUnit;
type index_d$d_ListLocalDeliveryOptionsRequest = ListLocalDeliveryOptionsRequest;
type index_d$d_ListLocalDeliveryOptionsResponse = ListLocalDeliveryOptionsResponse;
type index_d$d_ListLocalDeliveryOptionsResponseNonNullableFields = ListLocalDeliveryOptionsResponseNonNullableFields;
type index_d$d_LocalDeliveryAddress = LocalDeliveryAddress;
type index_d$d_LocalDeliveryOption = LocalDeliveryOption;
type index_d$d_LocalDeliveryOptionConfigOneOf = LocalDeliveryOptionConfigOneOf;
type index_d$d_LocalDeliveryOptionError = LocalDeliveryOptionError;
type index_d$d_LocalDeliveryOptionNonNullableFields = LocalDeliveryOptionNonNullableFields;
type index_d$d_LocalDeliveryOptionsQueryBuilder = LocalDeliveryOptionsQueryBuilder;
type index_d$d_LocalDeliveryOptionsQueryResult = LocalDeliveryOptionsQueryResult;
type index_d$d_QueryLocalDeliveryOptionsRequest = QueryLocalDeliveryOptionsRequest;
type index_d$d_QueryLocalDeliveryOptionsResponse = QueryLocalDeliveryOptionsResponse;
type index_d$d_QueryLocalDeliveryOptionsResponseNonNullableFields = QueryLocalDeliveryOptionsResponseNonNullableFields;
type index_d$d_RadiusConfig = RadiusConfig;
type index_d$d_ScheduledDelivery = ScheduledDelivery;
type index_d$d_TimeOfDay = TimeOfDay;
type index_d$d_TimePoint = TimePoint;
type index_d$d_TimeSlot = TimeSlot;
type index_d$d_TimeWindow = TimeWindow;
type index_d$d_UpdateLocalDeliveryOption = UpdateLocalDeliveryOption;
type index_d$d_UpdateLocalDeliveryOptionRequest = UpdateLocalDeliveryOptionRequest;
type index_d$d_UpdateLocalDeliveryOptionResponse = UpdateLocalDeliveryOptionResponse;
type index_d$d_UpdateLocalDeliveryOptionResponseNonNullableFields = UpdateLocalDeliveryOptionResponseNonNullableFields;
type index_d$d_ZipCodeConfig = ZipCodeConfig;
declare const index_d$d_bulkCreateLocalDeliveryOption: typeof bulkCreateLocalDeliveryOption;
declare const index_d$d_bulkDeleteLocalDeliveryOption: typeof bulkDeleteLocalDeliveryOption;
declare const index_d$d_bulkUpdateLocalDeliveryOption: typeof bulkUpdateLocalDeliveryOption;
declare const index_d$d_createLocalDeliveryOption: typeof createLocalDeliveryOption;
declare const index_d$d_deleteLocalDeliveryOption: typeof deleteLocalDeliveryOption;
declare const index_d$d_getLocalDeliveryOption: typeof getLocalDeliveryOption;
declare const index_d$d_listLocalDeliveryOptions: typeof listLocalDeliveryOptions;
declare const index_d$d_queryLocalDeliveryOptions: typeof queryLocalDeliveryOptions;
declare const index_d$d_updateLocalDeliveryOption: typeof updateLocalDeliveryOption;
declare namespace index_d$d {
  export { type ActionEvent$a as ActionEvent, type AddDeliveryRegionOptions$1 as AddDeliveryRegionOptions, type AddDeliveryRegionRequest$1 as AddDeliveryRegionRequest, type AddDeliveryRegionResponse$1 as AddDeliveryRegionResponse, type AddDeliveryRegionResponseNonNullableFields$1 as AddDeliveryRegionResponseNonNullableFields, type AddressLocation$4 as AddressLocation, type index_d$d_BulkCreateLocalDeliveryOptionRequest as BulkCreateLocalDeliveryOptionRequest, type index_d$d_BulkCreateLocalDeliveryOptionResponse as BulkCreateLocalDeliveryOptionResponse, type index_d$d_BulkCreateLocalDeliveryOptionResponseNonNullableFields as BulkCreateLocalDeliveryOptionResponseNonNullableFields, type index_d$d_BulkDeleteLocalDeliveryOptionRequest as BulkDeleteLocalDeliveryOptionRequest, type index_d$d_BulkDeleteLocalDeliveryOptionResponse as BulkDeleteLocalDeliveryOptionResponse, type index_d$d_BulkUpdateLocalDeliveryOptionRequest as BulkUpdateLocalDeliveryOptionRequest, type index_d$d_BulkUpdateLocalDeliveryOptionResponse as BulkUpdateLocalDeliveryOptionResponse, type index_d$d_BulkUpdateLocalDeliveryOptionResponseNonNullableFields as BulkUpdateLocalDeliveryOptionResponseNonNullableFields, type Condition$2 as Condition, ConditionType$2 as ConditionType, type ConditionalRates$2 as ConditionalRates, type index_d$d_CreateLocalDeliveryOptionRequest as CreateLocalDeliveryOptionRequest, type index_d$d_CreateLocalDeliveryOptionResponse as CreateLocalDeliveryOptionResponse, type index_d$d_CreateLocalDeliveryOptionResponseNonNullableFields as CreateLocalDeliveryOptionResponseNonNullableFields, type CursorPaging$8 as CursorPaging, type CursorPagingMetadata$7 as CursorPagingMetadata, type Cursors$8 as Cursors, type index_d$d_CustomAreaConfig as CustomAreaConfig, index_d$d_DayOfWeek as DayOfWeek, type index_d$d_DaySlot as DaySlot, type index_d$d_Days as Days, type index_d$d_DeleteLocalDeliveryOptionOptions as DeleteLocalDeliveryOptionOptions, type index_d$d_DeleteLocalDeliveryOptionRequest as DeleteLocalDeliveryOptionRequest, type index_d$d_DeleteLocalDeliveryOptionResponse as DeleteLocalDeliveryOptionResponse, type index_d$d_Destination as Destination, type DomainEvent$a as DomainEvent, type DomainEventBodyOneOf$a as DomainEventBodyOneOf, type Empty$6 as Empty, type EntityCreatedEvent$a as EntityCreatedEvent, type EntityDeletedEvent$a as EntityDeletedEvent, type EntityUpdatedEvent$a as EntityUpdatedEvent, type index_d$d_GetLocalDeliveryOptionOptions as GetLocalDeliveryOptionOptions, type index_d$d_GetLocalDeliveryOptionRequest as GetLocalDeliveryOptionRequest, type index_d$d_GetLocalDeliveryOptionResponse as GetLocalDeliveryOptionResponse, type index_d$d_GetLocalDeliveryOptionResponseNonNullableFields as GetLocalDeliveryOptionResponseNonNullableFields, type IdentificationData$a as IdentificationData, type IdentificationDataIdOneOf$a as IdentificationDataIdOneOf, index_d$d_LengthUnit as LengthUnit, type index_d$d_ListLocalDeliveryOptionsRequest as ListLocalDeliveryOptionsRequest, type index_d$d_ListLocalDeliveryOptionsResponse as ListLocalDeliveryOptionsResponse, type index_d$d_ListLocalDeliveryOptionsResponseNonNullableFields as ListLocalDeliveryOptionsResponseNonNullableFields, type index_d$d_LocalDeliveryAddress as LocalDeliveryAddress, type index_d$d_LocalDeliveryOption as LocalDeliveryOption, type index_d$d_LocalDeliveryOptionConfigOneOf as LocalDeliveryOptionConfigOneOf, type index_d$d_LocalDeliveryOptionError as LocalDeliveryOptionError, type index_d$d_LocalDeliveryOptionNonNullableFields as LocalDeliveryOptionNonNullableFields, type index_d$d_LocalDeliveryOptionsQueryBuilder as LocalDeliveryOptionsQueryBuilder, type index_d$d_LocalDeliveryOptionsQueryResult as LocalDeliveryOptionsQueryResult, LogicalOperator$2 as LogicalOperator, type MessageEnvelope$9 as MessageEnvelope, type Paging$2 as Paging, type index_d$d_QueryLocalDeliveryOptionsRequest as QueryLocalDeliveryOptionsRequest, type index_d$d_QueryLocalDeliveryOptionsResponse as QueryLocalDeliveryOptionsResponse, type index_d$d_QueryLocalDeliveryOptionsResponseNonNullableFields as QueryLocalDeliveryOptionsResponseNonNullableFields, type QueryV2$2 as QueryV2, type QueryV2PagingMethodOneOf$2 as QueryV2PagingMethodOneOf, type index_d$d_RadiusConfig as RadiusConfig, type RemoveDeliveryRegionOptions$1 as RemoveDeliveryRegionOptions, type RemoveDeliveryRegionRequest$1 as RemoveDeliveryRegionRequest, type RemoveDeliveryRegionResponse$1 as RemoveDeliveryRegionResponse, type RemoveDeliveryRegionResponseNonNullableFields$1 as RemoveDeliveryRegionResponseNonNullableFields, type RestoreInfo$a as RestoreInfo, type index_d$d_ScheduledDelivery as ScheduledDelivery, SortOrder$8 as SortOrder, type Sorting$8 as Sorting, type index_d$d_TimeOfDay as TimeOfDay, type index_d$d_TimePoint as TimePoint, type index_d$d_TimeSlot as TimeSlot, type index_d$d_TimeWindow as TimeWindow, type index_d$d_UpdateLocalDeliveryOption as UpdateLocalDeliveryOption, type index_d$d_UpdateLocalDeliveryOptionRequest as UpdateLocalDeliveryOptionRequest, type index_d$d_UpdateLocalDeliveryOptionResponse as UpdateLocalDeliveryOptionResponse, type index_d$d_UpdateLocalDeliveryOptionResponseNonNullableFields as UpdateLocalDeliveryOptionResponseNonNullableFields, WebhookIdentityType$9 as WebhookIdentityType, type index_d$d_ZipCodeConfig as ZipCodeConfig, addDeliveryRegion$2 as addDeliveryRegion, index_d$d_bulkCreateLocalDeliveryOption as bulkCreateLocalDeliveryOption, index_d$d_bulkDeleteLocalDeliveryOption as bulkDeleteLocalDeliveryOption, index_d$d_bulkUpdateLocalDeliveryOption as bulkUpdateLocalDeliveryOption, index_d$d_createLocalDeliveryOption as createLocalDeliveryOption, index_d$d_deleteLocalDeliveryOption as deleteLocalDeliveryOption, index_d$d_getLocalDeliveryOption as getLocalDeliveryOption, index_d$d_listLocalDeliveryOptions as listLocalDeliveryOptions, index_d$d_queryLocalDeliveryOptions as queryLocalDeliveryOptions, removeDeliveryRegion$2 as removeDeliveryRegion, index_d$d_updateLocalDeliveryOption as updateLocalDeliveryOption };
}

interface Order$1 {
    /**
     * Order ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Order number displayed in the site owner's dashboard (auto-generated).
     * @readonly
     */
    number?: string;
    /**
     * Date and time the order was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Order line items.
     * @readonly
     */
    lineItems?: OrderLineItem[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo$1;
    /**
     * Order payment status.
     * + `NOT_PAID` - This can be an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.
     * + This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.
     * + `PAID` - All payments associated with this order are paid. For online payments: [`payment.regularPaymentDetails.status: APPROVED`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object). For gift cards: [`payment.giftCardPaymentDetails.voided: false`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object).
     * + `PARTIALLY_REFUNDED` - Order was refunded, but refund amount is less than order total price.
     * + `FULLY_REFUNDED` - Order fully refunded. Refund amount equals total price.
     * + `PENDING` - Payments received but not yet confirmed by the payment provider.
     * + `PARTIALLY_PAID` -  At least one payment was received and approved, covering less than total price amount.
     */
    paymentStatus?: PaymentStatus$1;
    /**
     * Order fulfillment status.
     * @readonly
     */
    fulfillmentStatus?: FulfillmentStatus$1;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$3;
    /** Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format. */
    currency?: string | null;
    /** Whether tax is included in line item prices. */
    taxIncludedInPrices?: boolean;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary$1;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: V1ShippingInformation;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /**
     * Order status.
     * + `INITIALIZED`: Order created, but not yet approved or canceled.
     * + `APPROVED`: Order approved. This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order). Offline orders (cash payment) are automatically approved.
     * + `CANCELED`: Order canceled by the user.
     */
    status?: OrderStatus;
    /** Whether order is archived. */
    archived?: boolean | null;
    /**
     * Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @deprecated Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary$1;
    /** Tax information. */
    taxInfo?: OrderTaxInfo;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$1[];
    /**
     * Order activities.
     * @readonly
     */
    activities?: Activity$1[];
    /** Order attribution source. */
    attributionSource?: AttributionSource;
    /**
     * ID of the order's initiator.
     * @readonly
     */
    createdBy?: CreatedBy;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo$1;
    /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */
    seenByAHuman?: boolean | null;
    /** Checkout ID. */
    checkoutId?: string | null;
    /** Custom fields. */
    customFields?: CustomField$1[];
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: BalanceSummary;
    /** Additional fees applied to the order. */
    additionalFees?: AdditionalFee$1[];
    /**
     * Custom field data for the order object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$4;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact;
    /**
     * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * Used for migration from external systems.
     */
    purchasedDate?: Date | null;
}
interface OrderLineItem {
    /** Line item ID. */
    _id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$3;
    /** Line item quantity. */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price$3;
    /** Line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine[];
    /** Line item image. */
    image?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties$2;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$1;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     *
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://www.wix.com/velo/reference/wix-ecom-backend/orderfulfillments/listfulfillmentsforsingleorder).
     */
    fulfillerId?: string | null;
    /**
     * Number of items that were refunded.
     * @readonly
     */
    refundQuantity?: number | null;
    /**
     * Number of items restocked.
     * @readonly
     */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price$3;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price$3;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$3;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$3;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` - Partial payment for the given item to be paid upfront during the checkout. Eligible for catalog items with type `DEPOSIT_ONLINE` only.
     */
    paymentOption?: PaymentOptionType$1;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails$1;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile$1;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo$1;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price$3;
}
interface ProductName {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$3 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs.
     *
     * Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from your Wix Stores catalog, learn more about [eCommerce integration](https://www.wix.com/velo/reference/wix-stores-backend/ecommerce-integration).
     */
    options?: Record<string, any> | null;
}
interface Price$3 {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface DescriptionLine extends DescriptionLineValueOneOf, DescriptionLineDescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
    /** Description line name. */
    name?: DescriptionLineName;
}
/** @oneof */
interface DescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf {
}
interface DescriptionLineName {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface PhysicalProperties$2 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$1 extends ItemTypeItemTypeDataOneOf$1 {
    /** Preset item type. */
    preset?: ItemTypeItemType$1;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$1 {
    /** Preset item type. */
    preset?: ItemTypeItemType$1;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$1 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$1 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ItemTaxFullDetails$1 {
    /** Taxable amount of this line item. */
    taxableAmount?: Price$3;
    /** Tax rate percentage, as a decimal numeral between 0 and 1. For example, `"0.13"`. */
    taxRate?: string;
    /** The calculated tax, based on the `taxableAmount` and `taxRate`. */
    totalTax?: Price$3;
}
interface LineItemTaxInfo {
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    taxAmount?: Price$3;
    /** Amount for which tax is calculated. */
    taxableAmount?: Price$3;
    /** Tax rate %, as a decimal point. */
    taxRate?: string | null;
    /**
     * Tax group ID.
     * Learn more about [Tax Groups](https://dev.wix.com/docs/rest/business-management/payments/tax/tax-groups/introduction).
     */
    taxGroupId?: string | null;
    /** Indicates whether the price already includes tax. */
    taxIncludedInPrice?: boolean;
    /** Tax information for a line item. */
    taxBreakdown?: LineItemTaxBreakdown[];
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface LineItemTaxBreakdown {
    /** Jurisdiction that taxes were calculated for. For example, "New York", or "Quebec". */
    jurisdiction?: string | null;
    /** Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000. */
    rate?: string | null;
    /** Amount of tax calculated for this line item. */
    taxAmount?: Price$3;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** Type of jurisdiction that taxes were calculated for. */
    jurisdictionType?: JurisdictionType$1;
    /** Non-taxable amount of the line item price. */
    nonTaxableAmount?: Price$3;
    /** Taxable amount of the line item price. */
    taxableAmount?: Price$3;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$1 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DigitalFile$1 {
    /** ID of the secure file in media. */
    fileId?: string;
    /** Link will exist after the digital links have been generated on the order. */
    link?: string | null;
    /**
     * Link expiration time and date.
     * @readonly
     */
    expirationDate?: Date | null;
}
interface SubscriptionInfo$1 {
    /** Subscription ID. */
    _id?: string | null;
    /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */
    cycleNumber?: number;
    /** Subscription option title. For example, `"Monthly coffee Subscription"`. */
    subscriptionOptionTitle?: string;
    /** Subscription option description. For example, `"1kg of selected coffee, once a month"`. */
    subscriptionOptionDescription?: string | null;
    /** Subscription detailed information. */
    subscriptionSettings?: SubscriptionSettings$2;
}
interface SubscriptionSettings$2 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$2;
    /** Interval of recurring payment. */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$2 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface PriceDescription {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface LocationAndQuantity {
    /** Location id in the associated owner app. */
    _id?: string;
    /** Location owner app, if not provided then the site business info locations will be used. */
    appId?: string | null;
    /** Quantity for specific location. */
    quantity?: number;
}
interface TaxableAddress$1 extends TaxableAddressTaxableAddressDataOneOf$1 {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType$1;
}
/** @oneof */
interface TaxableAddressTaxableAddressDataOneOf$1 {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType$1;
}
declare enum TaxableAddressType$1 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Buyer Info */
interface BuyerInfo$1 extends BuyerInfoIdOneOf {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
    /** Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://www.wix.com/velo/reference/wix-crm-backend/contacts/introduction). */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
}
declare enum PaymentStatus$1 {
    UNSPECIFIED = "UNSPECIFIED",
    /** Order is not paid */
    NOT_PAID = "NOT_PAID",
    /** Order is paid */
    PAID = "PAID",
    /** Order was refunded, refund amount less than order total price */
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    /** Full order total price was refunded */
    FULLY_REFUNDED = "FULLY_REFUNDED",
    /** Payments received but not yet confirmed by the payment provider */
    PENDING = "PENDING",
    /** At least one payment was received and approved, covering less than total price amount */
    PARTIALLY_PAID = "PARTIALLY_PAID"
}
declare enum FulfillmentStatus$1 {
    /** none of the order items are fulfilled or order was manually marked as unfulfilled */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled or order was manually marked as fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FULFILLED = "FULFILLED",
    /** Some, but not all of the order items are fulfilled */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
declare enum WeightUnit$3 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface PriceSummary$1 {
    /** Subtotal of all the line items, before discounts and before tax. */
    subtotal?: Price$3;
    /** Total shipping price, before discounts and before tax. */
    shipping?: Price$3;
    /** Total tax on this order. */
    tax?: Price$3;
    /** Total calculated discount value. */
    discount?: Price$3;
    /** Order’s total price after discounts and tax. */
    total?: Price$3;
    /** Total price of additional fees before tax. */
    totalAdditionalFees?: Price$3;
}
/** Billing Info and shipping details */
interface AddressWithContact {
    /** Address. */
    address?: Address$5;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$1;
}
/** Physical address */
interface Address$5 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$4;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$4 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation$3 {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
/** Full contact details for an address */
interface FullAddressContactDetails$1 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$2;
}
interface VatId$2 {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$2;
}
/** tax info types */
declare enum VatType$2 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface V1ShippingInformation {
    /** App Def Id of external provider which was a source of shipping info */
    carrierId?: string | null;
    /** Unique code (or ID) of selected shipping option. For example, `"usps_std_overnight"``. */
    code?: string | null;
    /**
     * Shipping option title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"` or `"First-Class Package International"`.
     */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics$2;
    /** Shipping costs. */
    cost?: ShippingPrice$1;
    /** Shipping region. */
    region?: ShippingRegion$1;
}
interface DeliveryLogistics$2 extends DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Pickup details. */
    pickupDetails?: PickupDetails$3;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /**
     * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Expected delivery time. */
    deliveryTimeSlot?: DeliveryTimeSlot$2;
}
/** @oneof */
interface DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Pickup details. */
    pickupDetails?: PickupDetails$3;
}
interface PickupDetails$3 {
    /** Pickup address. */
    address?: PickupAddress$1;
    /** Pickup method */
    pickupMethod?: PickupMethod$2;
}
/** Physical address */
interface PickupAddress$1 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address object, with number, name, and apartment number in separate fields. */
    streetAddress?: StreetAddress$4;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
declare enum PickupMethod$2 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$2 {
    /** Delivery slot starting time. */
    from?: Date | null;
    /** Delivery slot ending time. */
    to?: Date | null;
}
interface ShippingPrice$1 {
    /** Shipping price for display purposes. */
    price?: Price$3;
    /**
     * Total price of shipping after discounts (when relevant), and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$3;
    /**
     * Shipping price after all discounts (if any exist), and after tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$3;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$1;
    /**
     * Shipping discount before tax.
     * @readonly
     */
    discount?: Price$3;
}
interface ShippingRegion$1 {
    /** Name of shipping region. For example, `"Metropolitan London"`, or `"Outer Melbourne suburbs"`. */
    name?: string | null;
}
declare enum OrderStatus {
    INITIALIZED = "INITIALIZED",
    APPROVED = "APPROVED",
    CANCELED = "CANCELED"
}
interface TaxSummary$1 {
    /**
     * Total tax.
     * @readonly
     */
    totalTax?: Price$3;
}
interface OrderTaxInfo {
    /** Calculated tax, added from line items. */
    totalTax?: Price$3;
    /** The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate. */
    taxBreakdown?: OrderTaxBreakdown[];
    /**
     * Whether the draft order is exempt from tax calculations.
     *
     * Default: `false`
     * @readonly
     */
    taxExempt?: boolean | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface OrderTaxBreakdown {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionType?: JurisdictionType$1;
    /** The rate at which this tax detail was calculated. */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: Price$3;
}
interface AppliedDiscount$1 extends AppliedDiscountDiscountSourceOneOf$1 {
    /** Applied coupon info. */
    coupon?: Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$1;
    /** Automatic Discount */
    discountRule?: DiscountRule$1;
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to specific items.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: DiscountType$1;
    /**
     * IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @deprecated IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemIds?: string[];
    /** Discount id. */
    _id?: string | null;
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$1 {
    /** Applied coupon info. */
    coupon?: Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$1;
    /** Automatic Discount */
    discountRule?: DiscountRule$1;
}
declare enum DiscountType$1 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$1 {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** Coupon value. */
    amount?: Price$3;
}
interface MerchantDiscount$1 extends MerchantDiscountMerchantDiscountReasonOneOf {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason;
    /** Discount description as free text (optional). */
    description?: string | null;
    /** Discount amount. */
    amount?: Price$3;
}
/** @oneof */
interface MerchantDiscountMerchantDiscountReasonOneOf {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason;
    /** Discount description as free text (optional). */
    description?: string | null;
}
declare enum DiscountReason {
    UNSPECIFIED = "UNSPECIFIED",
    EXCHANGED_ITEMS = "EXCHANGED_ITEMS"
}
interface DiscountRule$1 {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$1;
    /** Discount value. */
    amount?: Price$3;
}
interface DiscountRuleName$1 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface LineItemDiscount$1 {
    /** ID of line item the discount applies to. */
    _id?: string;
    /** Total discount for this line item. */
    totalDiscount?: Price$3;
}
interface Activity$1 extends ActivityContentOneOf {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded$1;
    /**
     * Activity ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Activity author's email.
     * @readonly
     */
    authorEmail?: string | null;
    /**
     * Activity creation date and time.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Activity type. */
    type?: ActivityType$1;
}
/** @oneof */
interface ActivityContentOneOf {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded$1;
}
interface CustomActivity {
    /** ID of the app that created the custom activity. */
    appId?: string;
    /** Custom activity type. For example, `"Ticket number set"`. */
    type?: string;
    /** Additional data in key-value form. For example, `{ "Ticket number": "123456" }`. */
    additionalData?: Record<string, string>;
}
/** Store owner added a comment */
interface MerchantComment {
    /** Merchant comment message. */
    message?: string;
}
interface OrderRefunded$1 {
    /** Whether order was refunded manually. For example, via payment provider or using cash. */
    manual?: boolean;
    /** Refund amount. */
    amount?: Price$3;
    /** Reason for refund. */
    reason?: string;
}
interface OrderCreatedFromExchange {
    /** ID of the original order for which the exchange happened. */
    originalOrderId?: string;
}
interface NewExchangeOrderCreated {
    /** ID of the new order created as a result of an exchange of items. */
    exchangeOrderId?: string;
    /** IDs of the items that were exchanged. */
    lineItems?: LineItemExchangeData[];
}
interface LineItemExchangeData {
    /** ID of the exchanged line item. */
    lineItemId?: string;
    /** Line item quantity being exchanged. */
    quantity?: number;
}
interface DraftOrderChangesApplied {
    /** Draft order id. */
    draftOrderId?: string;
    /** Reason for edit, given by user (optional). */
    reason?: string | null;
    /** Changes applied to order. */
    changes?: OrderChange[];
}
interface OrderChange extends OrderChangeValueOneOf {
    lineItemChanged?: LineItemChanges;
    lineItemAdded?: ManagedLineItem;
    lineItemRemoved?: ManagedLineItem;
    discountAdded?: ManagedDiscount;
    discountRemoved?: ManagedDiscount;
    additionalFeeAdded?: ManagedAdditionalFee;
    additionalFeeRemoved?: ManagedAdditionalFee;
    totalPriceChanged?: TotalPriceChange;
    shippingInformationChanged?: ShippingInformationChange;
}
/** @oneof */
interface OrderChangeValueOneOf {
    lineItemChanged?: LineItemChanges;
    lineItemAdded?: ManagedLineItem;
    lineItemRemoved?: ManagedLineItem;
    discountAdded?: ManagedDiscount;
    discountRemoved?: ManagedDiscount;
    additionalFeeAdded?: ManagedAdditionalFee;
    additionalFeeRemoved?: ManagedAdditionalFee;
    totalPriceChanged?: TotalPriceChange;
    shippingInformationChanged?: ShippingInformationChange;
}
interface LineItemChanges {
    /** Line item ID. */
    _id?: string;
    /** Item name. */
    name?: ProductName;
    /** Item quantity change. */
    quantity?: LineItemQuantityChange;
    /** Item price change. */
    price?: LineItemPriceChange;
}
interface LineItemQuantityChange {
    /** Item quantity before update. */
    originalQuantity?: number;
    /** Item quantity after update. */
    newQuantity?: number;
    /** Difference between original and new quantity. Absolute value. */
    diff?: number;
    /** Type of quantity change: increase or decrease. */
    deltaType?: LineItemQuantityChangeType;
}
declare enum LineItemQuantityChangeType {
    QUANTITY_INCREASED = "QUANTITY_INCREASED",
    QUANTITY_DECREASED = "QUANTITY_DECREASED"
}
interface LineItemPriceChange {
    /** Item price before update. */
    originalPrice?: Price$3;
    /** Item price after update. */
    newPrice?: Price$3;
}
interface ManagedLineItem {
    /** Line item ID. */
    _id?: string;
    /** Item name. */
    name?: ProductName;
    /** Added or removed item quantity. */
    quantity?: number;
}
interface ManagedDiscount {
    /** Discount id. */
    _id?: string;
    /** Discount name: coupon name / discount rule name / merchant discount description. */
    name?: TranslatedValue;
    /** Line items discount applies to. */
    affectedLineItems?: LineItemAmount[];
    /** Discount amount. */
    totalAmount?: Price$3;
}
interface TranslatedValue {
    /** Value in site default language. */
    original?: string;
    /** Translated value. */
    translated?: string | null;
}
interface LineItemAmount {
    /** Order line item id */
    _id?: string;
    /** Item name. */
    name?: ProductName;
    /** Amount associated with this item. (Discount amount for item / additional fee amount for item) */
    amount?: Price$3;
}
interface ManagedAdditionalFee {
    /** Additional fee id. */
    _id?: string;
    /** Additional fee name. */
    name?: TranslatedValue;
    /** Line items additional fee applies to. */
    affectedLineItems?: LineItemAmount[];
    /** Additional fee amount. */
    totalAmount?: Price$3;
}
interface TotalPriceChange {
    /** Order’s total price after discounts and tax. Before update */
    originalTotal?: Price$3;
    /** Order’s total price after discounts and tax. After update */
    newTotal?: Price$3;
}
interface ShippingInformationChange {
    /** Order’s Shipping Information. Before update */
    originalShippingInfo?: ShippingInformation$1;
    /** Order’s Shipping Information. After update */
    newShippingInfo?: ShippingInformation$1;
}
interface ShippingInformation$1 {
    /** Order’s shipping price. */
    total?: Price$3;
    /** Order’s shipping title. */
    shippingTitle?: string;
}
/** Payment method is saved for order */
interface SavedPaymentMethod {
    /** Payment method name */
    name?: string;
    /** Payment method description */
    description?: string | null;
}
interface AuthorizedPaymentCreated {
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
    /** Payment amount */
    amount?: Price$3;
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface AuthorizedPaymentCaptured {
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
    /** Payment amount */
    amount?: Price$3;
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface AuthorizedPaymentVoided {
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
    /** Payment amount */
    amount?: Price$3;
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface RefundInitiated {
    /** Refund ID. */
    refundId?: string;
    /** Refund amount. */
    amount?: Price$3;
    /** Details about the payments being refunded. */
    payments?: RefundedPayment[];
    /** Reason for refund. */
    reason?: string | null;
}
interface RefundedPayment extends RefundedPaymentKindOneOf {
    /** Regular payment refund. */
    regular?: RegularPaymentRefund;
    /** Gift card payment refund. */
    giftCard?: GiftCardPaymentRefund;
    /** Membership payment refund. */
    membership?: MembershipPaymentRefund;
    /** Payment ID. */
    paymentId?: string;
    /** Whether refund was made externally and manually on the payment provider's side. */
    externalRefund?: boolean;
}
/** @oneof */
interface RefundedPaymentKindOneOf {
    /** Regular payment refund. */
    regular?: RegularPaymentRefund;
    /** Gift card payment refund. */
    giftCard?: GiftCardPaymentRefund;
    /** Membership payment refund. */
    membership?: MembershipPaymentRefund;
}
interface RegularPaymentRefund {
    /** Refund amount */
    amount?: Price$3;
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface GiftCardPaymentRefund {
    /** Gift card payment ID */
    giftCardPaymentId?: string | null;
    /** Refund amount */
    amount?: Price$3;
}
interface MembershipPaymentRefund {
    /** Membership ID */
    membershipId?: string | null;
}
interface PaymentRefunded {
    /** Refund ID. */
    refundId?: string;
    /** Details about the refunded payment. */
    payment?: RefundedPayment;
}
interface PaymentRefundFailed {
    /** Refund ID. */
    refundId?: string;
    /** Details about the failed payment refund. */
    payment?: RefundedPayment;
}
interface RefundedAsStoreCredit {
    /** Refund amount */
    amount?: Price$3;
    /** Reason for refund */
    reason?: string | null;
}
interface PaymentPending extends PaymentPendingPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
}
/** @oneof */
interface PaymentPendingPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
}
interface RegularPayment extends RegularPaymentPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardDetails;
    /** Payment amount */
    amount?: Price$3;
}
/** @oneof */
interface RegularPaymentPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardDetails;
}
interface CreditCardDetails {
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface PaymentCanceled extends PaymentCanceledPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
}
/** @oneof */
interface PaymentCanceledPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
}
interface PaymentDeclined extends PaymentDeclinedPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
}
/** @oneof */
interface PaymentDeclinedPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
}
declare enum ActivityType$1 {
    ORDER_REFUNDED = "ORDER_REFUNDED",
    ORDER_PLACED = "ORDER_PLACED",
    ORDER_PAID = "ORDER_PAID",
    ORDER_FULFILLED = "ORDER_FULFILLED",
    ORDER_NOT_FULFILLED = "ORDER_NOT_FULFILLED",
    ORDER_CANCELED = "ORDER_CANCELED",
    DOWNLOAD_LINK_SENT = "DOWNLOAD_LINK_SENT",
    TRACKING_NUMBER_ADDED = "TRACKING_NUMBER_ADDED",
    TRACKING_NUMBER_EDITED = "TRACKING_NUMBER_EDITED",
    TRACKING_LINK_ADDED = "TRACKING_LINK_ADDED",
    SHIPPING_CONFIRMATION_EMAIL_SENT = "SHIPPING_CONFIRMATION_EMAIL_SENT",
    INVOICE_ADDED = "INVOICE_ADDED",
    INVOICE_REMOVED = "INVOICE_REMOVED",
    INVOICE_SENT = "INVOICE_SENT",
    FULFILLER_EMAIL_SENT = "FULFILLER_EMAIL_SENT",
    SHIPPING_ADDRESS_EDITED = "SHIPPING_ADDRESS_EDITED",
    EMAIL_EDITED = "EMAIL_EDITED",
    PICKUP_READY_EMAIL_SENT = "PICKUP_READY_EMAIL_SENT",
    CUSTOM_ACTIVITY = "CUSTOM_ACTIVITY",
    MERCHANT_COMMENT = "MERCHANT_COMMENT",
    ORDER_CREATED_FROM_EXCHANGE = "ORDER_CREATED_FROM_EXCHANGE",
    NEW_EXCHANGE_ORDER_CREATED = "NEW_EXCHANGE_ORDER_CREATED",
    ORDER_PARTIALLY_PAID = "ORDER_PARTIALLY_PAID",
    DRAFT_ORDER_CHANGES_APPLIED = "DRAFT_ORDER_CHANGES_APPLIED",
    SAVED_PAYMENT_METHOD = "SAVED_PAYMENT_METHOD"
}
declare enum AttributionSource {
    UNSPECIFIED = "UNSPECIFIED",
    FACEBOOK_ADS = "FACEBOOK_ADS"
}
interface CreatedBy extends CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
/** @oneof */
interface CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
interface ChannelInfo$1 {
    /** Sales channel that submitted the order. */
    type?: ChannelType$1;
    /** Reference to an order ID from an external system. */
    externalOrderId?: string | null;
    /** URL to the order in the external system. */
    externalOrderUrl?: string | null;
}
declare enum ChannelType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CustomField$1 {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
interface BalanceSummary {
    /**
     * Current amount left to pay.
     * @readonly
     */
    balance?: Balance;
    /**
     * Sum of all approved and successful payments.
     *
     * The value includes payments that have subsequently been fully or partially refunded.
     * @readonly
     */
    paid?: Price$3;
    /**
     * Sum of all successfully refunded payments.
     * @readonly
     */
    refunded?: Price$3;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price$3;
}
/**
 * Order balance. Reflects amount left to be paid on order and is calculated dynamically. Can be negative per balance definition.
 * `amount` field depends on order payment status:
 * + UNSPECIFIED, NOT_PAID: price_summary.total_price
 * + PARTIALLY_PAID : price_summary.total_price - pay_now.total_price
 * + PENDING, REFUNDED, PARTIALLY_REFUNDED, PAID : 0
 */
interface Balance {
    /**
     * Balance amount.
     *
     * A negative `amount` represents the amount to be refunded. This can happen due to overcharging or the order being modified after a payment has been made.
     * @readonly
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface AdditionalFee$1 {
    /** Additional fee's unique code for future processing. */
    code?: string | null;
    /** Name of additional fee. */
    name?: string;
    /** Additional fee's price. */
    price?: Price$3;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$1;
    /** SPI implementer's `appId`. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: Price$3;
    /** Additional fee's price after tax. */
    priceAfterTax?: Price$3;
    /** Additional fee's id. */
    _id?: string;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface FulfillmentStatusesAggregate {
    /** Unique string values based on Fulfillment entities statuses */
    statuses?: string[] | null;
}
interface ExtendedFields$4 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
/**
 * Common object for tags.
 * Should be use as in this example:
 * message Foo {
 * string id = 1;
 * ...
 * Tags tags = 5
 * }
 *
 * example of taggable entity
 * {
 * id: "123"
 * tags: {
 * tags: {
 * tag_ids:["11","22"]
 * },
 * private_tags: {
 * tag_ids: ["33", "44"]
 * }
 * }
 * }
 */
interface Tags {
    /** Tags that require an additional permission in order to access them, normally not given to site members or visitors. */
    privateTags?: TagList;
    /** Tags that are exposed to anyone who has access to the labeled entity itself, including site members and visitors. */
    tags?: TagList;
}
interface TagList {
    /** List of tag IDs */
    tagIds?: string[];
}
interface TriggerReindexOrderRequest {
    metasiteId?: string;
    orderId?: string;
}
interface SnapshotMessage$1 {
    _id?: string;
    opType?: number;
}
interface OrderRejectedEventOrderRejected {
    /** The order that was rejected */
    order?: Order$1;
}
interface GetMetasiteDataRequest {
    /** meta site Id for data to retrieve */
    metasiteId?: string;
}
interface GetMetasiteDataResponse {
    /** meta site data */
    metasite?: MetaSite;
    /** is metasite added to new SDL population via population manager */
    isInNewPopulation?: boolean;
    /** metasite url */
    metasiteUrl?: string;
    /** owner data */
    userDataResponse?: UserDataResponse;
}
/**
 * Represents Meta Site.
 *
 * Meta Site is a legacy concept, it aggregates data from several domains. Generally, it contains and manages
 * relations between different entities related to the site (or, as a new concept, to the container).
 *
 * We prefer to pronounce it as 2 separate words, therefore we use terms "meta site" or "metaSite" or "meta_site" in code.
 */
interface MetaSite {
    /**
     * Identifier of meta site.
     * @readonly
     */
    metaSiteId?: string;
    /**
     * Internal version of meta site. Monotonically increasing number.
     *
     * If passed within update request, it will be used for optimistic locking. In this case,
     * StaleStateException will be thrown if current version doesn't match.
     *
     * In old MetaSiteDTO -- revision.
     * @readonly
     */
    version?: string;
    /**
     * Identifier of account that owns this meta site.
     * @readonly
     */
    ownerId?: string;
    /**
     * Date and time when meta site was created.
     * @readonly
     */
    dateCreated?: Date | null;
    /**
     * Date and time when meta site was updated for the last time.
     * @readonly
     */
    dateUpdated?: Date | null;
    /**
     * All "applications" of this meta site.
     *
     * In old MetaSiteDTO -- embeddedServices.
     */
    apps?: App[];
    /** Namespace of meta site. */
    namespace?: Namespace;
    /**
     * Indicates whether https should be used for viewing a site.
     *
     * In old MetaSiteDTO -- flags.UseHttps.
     */
    useHttps?: boolean;
    defaultSeoData?: SeoData;
    /**
     * Information about HTML application.
     *
     * In old MetaSiteDTO -- appplications.find(_.applicationType == HtmlWeb).
     */
    htmlApp?: HtmlApplication;
    /** @deprecated */
    externalUriMappings?: ExternalUriMapping[];
    /** Indicates whether meta site was published. If true - site should be accessible for viewing. */
    published?: boolean;
    /**
     * The name of meta site.
     *
     * Matches this regular expression: [a-z0-9_\-]{4,20} (but for some legacy sites might be shorted/longer).
     */
    name?: string;
    /**
     * Indicates whether this site is managed by ADI editor
     *
     * Values:
     * None - not managed.
     * Some(false) - site was created via ADI editor, but later on user switched to regular editor.
     * Some(true) - site was created and still is managed by ADI editor.
     *
     * In old MetaSiteDTO: embeddedService[embeddedServiceType=Onboarding].attributes.isInUse.
     */
    adi?: boolean | null;
    /**
     * Indicates whether this meta site is template.
     *
     * In old MetaSiteDTO: documentType == Template.
     * @readonly
     */
    template?: boolean | null;
    /**
     * Identifier of a template (meta site) from which this site was created.
     *
     * If it's empty it either means that site wasn't created from a template OR it's very old, so we didn't store
     * it back then.
     *
     * For example, if "site" was created from "template", then "template"'s id will be in origin_template_id.
     * When "site" is cloned, clone will also have "template"'s id in origin_instance_id.
     * @readonly
     */
    originTemplateId?: string | null;
    /**
     * Indicates meta site blocked from publishing and added additional filtering in listing API (MSS). READ_ONLY.
     * @readonly
     */
    blocked?: boolean;
    /**
     * If true - default meta site routing (connected domains, free url, ML) is not used for this meta site.
     *
     * Meaning, that if `example.org` is connected to this meta site, `router-server` will return 404 for `example.org`
     * anyway.
     *
     * This flag is set for some sites that have custom mapping in Routes API / wix-pages-bo.
     */
    dontUseDefaultRouting?: boolean;
    /**
     * Indicates the site is used as critical asset and as such is protected. You would be only able to provision applications to this meta site. READ_ONLY.
     * @readonly
     */
    criticalAsset?: boolean;
}
interface App {
    /**
     * Identifier of application type (application definition id).
     *
     * Can be both UUID and non-UUID, for example: SiteMembers, Onboarding, CloudSiteExtension etc.
     */
    appDefId?: string;
    /**
     * Identifier of the instance (concrete application, installed on a site).
     *
     * Mostly UUID, but for some specific legacy cases might be something else.
     */
    instanceId?: string;
    /**
     * State of this app (see docs for state).
     * @readonly
     */
    state?: State;
    /**
     * Identifier of the originating application. For example, if this app was part of a template,
     * then an app will get instance_id of that app as origin instance id.
     *
     * If application was provisioned not from some template, it should be empty.
     *
     * Note, it could be == to instance_id (for old sites).
     */
    originInstanceId?: string;
}
/**
 * Represents the actual state of the application on site. Do not confuse with the State in the old MetaSiteDTO,
 * which has less values and doesn't have 1-to-1 correspondence with this one (this one is exact and correct!)
 */
declare enum State {
    UNKNOWN = "UNKNOWN",
    /** App is installed on a site. */
    ENABLED = "ENABLED",
    /** App is removed from a site (but we preserve it just in case). */
    DISABLED = "DISABLED",
    /** App is in "demo" mode, meaning that it's in read-only mode (it's in a template OR not installed yet). */
    TEMPLATE = "TEMPLATE",
    /** App is not installed, there is a user intention for it only (user will see the pimpl in the editor). */
    PENDING = "PENDING"
}
declare enum Namespace {
    UNKNOWN_NAMESPACE = "UNKNOWN_NAMESPACE",
    /** Default namespace for UGC sites. MetaSites with this namespace will be shown in a user's site list by default. */
    WIX = "WIX",
    /** ShoutOut stand alone product. These are siteless (no actual Wix site, no HtmlWeb). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    SHOUT_OUT = "SHOUT_OUT",
    /** MetaSites created by the Albums product, they appear as part of the Albums app. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    ALBUMS = "ALBUMS",
    /** Part of the WixStores migration flow, a user tries to migrate and gets this site to view and if the user likes it then stores removes this namespace and deletes the old site with the old stores. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    WIX_STORES_TEST_DRIVE = "WIX_STORES_TEST_DRIVE",
    /** Hotels standalone (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    HOTELS = "HOTELS",
    /** Clubs siteless MetaSites, a club without a wix website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    CLUBS = "CLUBS",
    /** A partially created ADI website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    ONBOARDING_DRAFT = "ONBOARDING_DRAFT",
    /** AppBuilder for AppStudio / shmite (c). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    DEV_SITE = "DEV_SITE",
    /** LogoMaker websites offered to the user after logo purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    LOGOS = "LOGOS",
    /** VideoMaker websites offered to the user after video purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    VIDEO_MAKER = "VIDEO_MAKER",
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    PARTNER_DASHBOARD = "PARTNER_DASHBOARD",
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    DEV_CENTER_COMPANY = "DEV_CENTER_COMPANY",
    /**
     * A draft created by HTML editor on open. Upon "first save" it will be moved to be of WIX domain.
     *
     * Meta site with this namespace will *not* be shown in a user's site list by default.
     */
    HTML_DRAFT = "HTML_DRAFT",
    /**
     * the user-journey for Fitness users who want to start from managing their business instead of designing their website.
     * Will be accessible from Site List and will not have a website app.
     * Once the user attaches a site, the site will become a regular wixsite.
     */
    SITELESS_BUSINESS = "SITELESS_BUSINESS",
    /** Belongs to "strategic products" company. Supports new product in the creator's economy space. */
    CREATOR_ECONOMY = "CREATOR_ECONOMY",
    /** It is to be used in the Business First efforts. */
    DASHBOARD_FIRST = "DASHBOARD_FIRST",
    /** Bookings business flow with no site. */
    ANYWHERE = "ANYWHERE",
    /** Namespace for Headless Backoffice with no editor */
    HEADLESS = "HEADLESS",
    /**
     * Namespace for master site that will exist in parent account that will be referenced by subaccounts
     * The site will be used for account level CSM feature for enterprise
     */
    ACCOUNT_MASTER_CMS = "ACCOUNT_MASTER_CMS",
    /** Rise.ai Siteless account management for Gift Cards and Store Credit. */
    RISE = "RISE",
    /**
     * As part of the branded app new funnel, users now can create a meta site that will be branded app first.
     * There's a blank site behind the scene but it's blank).
     * The Mobile company will be the owner of this namespace.
     */
    BRANDED_FIRST = "BRANDED_FIRST",
    /** Nownia.com Siteless account management for Ai Scheduling Assistant. */
    NOWNIA = "NOWNIA",
    /**
     * UGC Templates are templates that are created by users for personal use and to sale to other users.
     * The Partners company owns this namespace.
     */
    UGC_TEMPLATE = "UGC_TEMPLATE",
    /** Codux Headless Sites */
    CODUX = "CODUX"
}
interface SeoData {
    /** A title. */
    title?: string | null;
    /** Indicates whether the site should be indexable by bots. */
    indexable?: boolean;
    /** TDB. */
    suppressTrackingCookies?: boolean;
    /** TDB. */
    ogImage?: string | null;
    /** A list of meta tags. */
    metaTags?: MetaTag[];
    /** A canonical URL for a site. */
    canonicalUrl?: string | null;
}
interface MetaTag {
    /** A name. */
    name?: string;
    /** A value. */
    value?: string;
    /** Indicates whether should be rendered as property. */
    property?: boolean;
}
/** Represents an HTML application (HTML site). */
interface HtmlApplication {
    /** Legacy, don't use it if you can. */
    intId?: number;
    /** Identifier of the instance. */
    instanceId?: string;
    seoData?: SeoData;
    /** Language of this site. */
    languageCode?: string;
    /** File name for thumbnail. */
    thumbnail?: string | null;
    /** Indicates whether this site is managed by EditorX. */
    editorX?: boolean;
    /** Indicates whether this site is managed by Wix Studio. */
    studio?: boolean;
}
interface ExternalUriMapping {
    /** Deprecated. */
    fromExternalUri?: string;
    /** Deprecated. */
    toWixUri?: string;
    /** Deprecated. */
    oldToWixUri?: string | null;
    /** Deprecated. */
    requireDomain?: boolean | null;
}
interface UserDataResponse {
    userEmail?: string;
    /** owner name */
    userName?: string;
    /** owner status */
    userStatus?: string;
    /** owner language */
    userLanguage?: string;
}
interface QueryOrdersForMetasiteRequest {
    /** meta site Id for EP orders to retrieve */
    metasiteId?: string;
    /** paginated internal orders query request */
    internalQueryOrdersRequest?: InternalQueryOrdersRequest;
}
interface InternalQueryOrdersRequest {
    /** Query options. */
    query?: PlatformQuery;
}
interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$7;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting$7[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$7;
}
interface Sorting$7 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$7;
}
declare enum SortOrder$7 {
    ASC = "ASC",
    DESC = "DESC"
}
interface PlatformPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$7 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryOrdersForMetasiteResponse {
    /** found exisitng orders according to pagination and query provided. */
    orders?: Order$1[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: PlatformPagingMetadata;
}
interface PlatformPagingMetadata {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors$7;
}
interface Cursors$7 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetOrderForMetasiteRequest {
    /** meta site Id for EP order to retrieve */
    metasiteId?: string;
    /** Order Id for EP order to retrieve */
    orderId?: string;
}
interface GetOrderForMetasiteResponse {
    /** Existing EP order */
    order?: Order$1;
}
interface ListOrderTransactionsForMetasiteRequest {
    /** meta site Id for EP order transactions to retrieve */
    metasiteId?: string;
    /** Order Id for EP order transactions to retrieve */
    orderId?: string;
}
interface ListOrderTransactionsForMetasiteResponse {
    /** Order ID and its associated transactions. */
    orderTransactions?: OrderTransactions$1;
}
interface OrderTransactions$1 {
    /** Order ID. */
    orderId?: string;
    /** Record of payments made to the merchant. */
    payments?: Payment$1[];
    /** Record of refunds made to the buyer. */
    refunds?: Refund$1[];
}
interface Payment$1 extends PaymentPaymentDetailsOneOf$1 {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails$1;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails$1;
    /**
     * Payment ID.
     * @readonly
     */
    _id?: string | null;
    /** Date and time the payment was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    _createdDate?: Date | null;
    /**
     * Date and time the payment was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Payment amount. */
    amount?: Price$3;
    /**
     * Whether refunds for this payment are disabled.
     * + `true`: This payment is not refundable.
     * + `false`: This payment may be refunded. However, this ultimately depends on the payment provider.
     */
    refundDisabled?: boolean;
}
/** @oneof */
interface PaymentPaymentDetailsOneOf$1 {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails$1;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails$1;
}
interface RegularPaymentDetails$1 extends RegularPaymentDetailsPaymentMethodDetailsOneOf$1 {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails$1;
    /** Wix Payments order ID. */
    paymentOrderId?: string | null;
    /**
     * Payment gateway's transaction ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `offline_payment` is `false`.
     */
    gatewayTransactionId?: string | null;
    /**
     * Payment method. Non-exhaustive list of supported values:
     * + `CreditCard`, `Alipay`, `AstropayCash`, `AstropayDBT`, `AstropayMBT`, `Bitcoin`, `BitPay`, `Cash`, `ConvenienceStore`, `EPay`, `Fake`, `Giropay`, `IDeal`, `InPerson`, `Klarna`, `MercadoPago`, `Netpay`, `NordeaSolo`, `Offline`, `PagSeguro`, `PayEasy`, `PayPal`, `Paysafecard`, `Paysafecash`, `PointOfSale`, `Poli`, `Privat24`, `Przelewy24`, `RapidTransfer`, `Sepa`, `Skrill`, `Sofort`, `Trustly`, `Neteller`, `Unionpay`, `UniPay`, `Yandex`
     */
    paymentMethod?: string | null;
    /** Transaction ID in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for offline payments. */
    providerTransactionId?: string | null;
    /** Whether the payment was made offline. For example, when using cash or when marked as paid in the Business Manager. */
    offlinePayment?: boolean;
    /** Payment status. */
    status?: TransactionStatus$1;
    /** Whether there is a payment agreement that allows for future charges. */
    savedPaymentMethod?: boolean;
    /** Authorization details. */
    authorizationDetails?: AuthorizationDetails$1;
}
/** @oneof */
interface RegularPaymentDetailsPaymentMethodDetailsOneOf$1 {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails$1;
}
declare enum TransactionStatus$1 {
    UNDEFINED = "UNDEFINED",
    APPROVED = "APPROVED",
    PENDING = "PENDING",
    PENDING_MERCHANT = "PENDING_MERCHANT",
    CANCELED = "CANCELED",
    DECLINED = "DECLINED",
    REFUNDED = "REFUNDED",
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    AUTHORIZED = "AUTHORIZED",
    VOIDED = "VOIDED"
}
interface CreditCardPaymentMethodDetails$1 {
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface AuthorizationDetails$1 {
    /**
     * Whether the authorized payment is of a delayed capture.
     * @readonly
     */
    delayedCapture?: boolean;
    /** Date and time the payment was authorized in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    authorizedDate?: Date | null;
    /**
     * List of captures associated with payment
     * In case of failed it can be replaced with new one with PENDING or SUCCESS statuses
     */
    captures?: AuthorizationCapture$1[];
    /** Void associated with payment */
    void?: AuthorizationVoid$1;
    /** Scheduled action for this transaction */
    scheduledAction?: V1ScheduledAction;
}
interface AuthorizationCapture$1 {
    /**
     * Capture ID.
     * @readonly
     */
    _id?: string | null;
    /** Status of this capture action */
    status?: AuthorizationCaptureStatus$1;
    /** Amount of this capture */
    amount?: Price$3;
    /** Date and time the capture was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    _createdDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails$1;
}
declare enum AuthorizationCaptureStatus$1 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Whether capture operation still in progress */
    PENDING = "PENDING",
    /** The capture operation was succeeded */
    SUCCEEDED = "SUCCEEDED",
    /** The capture operation was failed */
    FAILED = "FAILED"
}
interface AuthorizationActionFailureDetails$1 {
    failureCode?: string;
}
interface AuthorizationVoid$1 {
    /** Status of this void action */
    status?: AuthorizationVoidStatus$1;
    /** Date and time the void was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    voidedDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails$1;
    /** Reason of void action */
    reason?: Reason$1;
}
declare enum AuthorizationVoidStatus$1 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Whether void operation still in progress */
    PENDING = "PENDING",
    /** The void operation was succeeded */
    SUCCEEDED = "SUCCEEDED",
    /** The void operation was failed */
    FAILED = "FAILED"
}
/**
 * Reason the authorization was voided.
 *
 * + `MANUAL`: Authorization was voided by user.
 * + `SCHEDULED`: Authorization passed execution date.
 */
declare enum Reason$1 {
    UNKNOWN_REASON = "UNKNOWN_REASON",
    MANUAL = "MANUAL",
    SCHEDULED = "SCHEDULED"
}
interface V1ScheduledAction {
    /** type of the action */
    actionType?: ActionType$1;
    /** the date and time of the action */
    executionDate?: Date | null;
}
declare enum ActionType$1 {
    UNKNOWN_ACTION_TYPE = "UNKNOWN_ACTION_TYPE",
    VOID = "VOID",
    CAPTURE = "CAPTURE"
}
interface GiftCardPaymentDetails$1 {
    /** Gift card payment ID. */
    giftCardPaymentId?: string;
    /** ID of the app that created the gift card. */
    appId?: string;
    /**
     * Whether the gift card is voided.
     * @readonly
     */
    voided?: boolean;
}
interface MembershipPaymentDetails$1 {
    /** Membership ID. */
    membershipId?: string;
    /** ID of the line item this membership applies to. */
    lineItemId?: string;
    /** Payment status. */
    status?: MembershipPaymentStatus$1;
    /** Membership name. */
    name?: MembershipName$2;
    /** The transaction ID in the membership system. Can be used to void the transaction. */
    externalTransactionId?: string | null;
    /**
     * Whether the membership is voided.
     * @readonly
     */
    voided?: boolean;
    /** ID of the application providing this payment option. */
    providerAppId?: string;
}
declare enum MembershipPaymentStatus$1 {
    /** CHARGED - Payment was charged */
    CHARGED = "CHARGED",
    /** CHARGE_FAILED - The attempt to charge that payment have failed, for example due to lack of credits */
    CHARGE_FAILED = "CHARGE_FAILED"
}
interface MembershipName$2 {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface Refund$1 {
    /**
     * Refund ID.
     * @readonly
     */
    _id?: string;
    /** List of transactions. */
    transactions?: RefundTransaction$1[];
    /** Refund business details. */
    details?: RefundDetails$1;
    /** Date and time the refund was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    _createdDate?: Date | null;
}
interface RefundTransaction$1 {
    /** ID of the payment associated with this refund. */
    paymentId?: string;
    /** Refund amount. */
    amount?: Price$3;
    /** Refund status. */
    refundStatus?: RefundStatus$1;
    /**
     * Payment gateway's refund ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `external_refund` is `false`.
     */
    gatewayRefundId?: string | null;
    /** ID of the refund in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for external refunds. */
    providerRefundId?: string | null;
    /** Whether refund was made externally and manually on the payment provider's side. */
    externalRefund?: boolean;
}
/**
 * Refund transaction status.
 * + `PENDING`: Refund was initiated on payment provider side. PENDING status was assigned by provider.
 * + `SUCCEEDED`: Refund transaction succeeded.
 * + `FAILED`: Refund transaction failed.
 * + `SCHEDULED`: Refund request acknowledged, and will be executed soon.
 * + `STARTED`: Refund was initiated on payment provider side.
 */
declare enum RefundStatus$1 {
    PENDING = "PENDING",
    SUCCEEDED = "SUCCEEDED",
    FAILED = "FAILED",
    SCHEDULED = "SCHEDULED",
    STARTED = "STARTED"
}
/** Business model of a refund request */
interface RefundDetails$1 {
    /** Order line item IDs and quantities that were refunded. */
    items?: RefundItem$1[];
    /** Whether the shipping fee was also refunded. */
    shippingIncluded?: boolean;
    /** Reason for the refund, provided by customer (optional). */
    reason?: string | null;
}
interface RefundItem$1 {
    /** Line item ID the refunded line item. */
    lineItemId?: string;
    /** Line item quantity refunded. */
    quantity?: number;
}
interface LineItemRefund$1 {
}
interface AdditionalFeeRefund$1 {
}
interface ShippingRefund$1 {
}
interface AggregatedRefundSummary$1 {
}
interface UpsertRefundRequest {
    /** Meta site ID. */
    metasiteId?: string;
    /** Order ID associated with refund. */
    orderId?: string;
    /** Refund to upsert. */
    refund?: Refund$1;
}
interface UpsertRefundResponse {
    /** Updated order transactions. */
    orderTransactions?: OrderTransactions$1;
}
interface DomainEvent$9 extends DomainEventBodyOneOf$9 {
    createdEvent?: EntityCreatedEvent$9;
    updatedEvent?: EntityUpdatedEvent$9;
    deletedEvent?: EntityDeletedEvent$9;
    actionEvent?: ActionEvent$9;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$9 {
    createdEvent?: EntityCreatedEvent$9;
    updatedEvent?: EntityUpdatedEvent$9;
    deletedEvent?: EntityDeletedEvent$9;
    actionEvent?: ActionEvent$9;
}
interface EntityCreatedEvent$9 {
    entity?: string;
}
interface RestoreInfo$9 {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$9 {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$9 {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$9 {
    body?: string;
}
interface MessageEnvelope$8 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$9;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$9 extends IdentificationDataIdOneOf$9 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$8;
}
/** @oneof */
interface IdentificationDataIdOneOf$9 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$8 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface UpdateInternalDocumentsEvent extends UpdateInternalDocumentsEventOperationOneOf {
    /** insert/update documents */
    update?: InternalDocumentUpdateOperation;
    /** delete by document ids */
    deleteByIds?: DeleteByIdsOperation;
    /** delete documents matching filter */
    deleteByFilter?: DeleteByFilterOperation;
    /** update internal documents matching filter */
    updateByFilter?: InternalDocumentUpdateByFilterOperation;
    /** update only existing documents */
    updateExisting?: InternalUpdateExistingOperation;
    /** insert/update documents with versioning */
    versionedUpdate?: VersionedDocumentUpdateOperation;
    /** delete by document ids with versioning */
    versionedDeleteByIds?: VersionedDeleteByIdsOperation;
    /** type of the documents */
    documentType?: string;
    /** language of the documents (mandatory) */
    language?: string | null;
    /**
     * one or more search documents
     * @deprecated
     */
    addDocuments?: InternalDocument[];
    /**
     * one or more ids of indexed documents to be removed. Removal will happen before addition (if both provided)
     * @deprecated
     */
    removeDocumentIds?: string[];
    /** id to pass to processing notification */
    correlationId?: string | null;
    /** when event was created / issued */
    issuedAt?: Date | null;
}
/** @oneof */
interface UpdateInternalDocumentsEventOperationOneOf {
    /** insert/update documents */
    update?: InternalDocumentUpdateOperation;
    /** delete by document ids */
    deleteByIds?: DeleteByIdsOperation;
    /** delete documents matching filter */
    deleteByFilter?: DeleteByFilterOperation;
    /** update internal documents matching filter */
    updateByFilter?: InternalDocumentUpdateByFilterOperation;
    /** update only existing documents */
    updateExisting?: InternalUpdateExistingOperation;
    /** insert/update documents with versioning */
    versionedUpdate?: VersionedDocumentUpdateOperation;
    /** delete by document ids with versioning */
    versionedDeleteByIds?: VersionedDeleteByIdsOperation;
}
interface InternalDocument {
    /** document with mandatory fields (id) and with fields specific to the type of the document */
    document?: Record<string, any> | null;
}
interface InternalDocumentUpdateOperation {
    /** documents to index or update */
    documents?: InternalDocument[];
}
interface DeleteByIdsOperation {
    /** ids of the documents to delete */
    documentIds?: string[];
}
interface DeleteByFilterOperation {
    /** documents matching this filter wil be deleted. only filterable documents defined in document_type can be used for filtering */
    filter?: Record<string, any> | null;
}
interface InternalDocumentUpdateByFilterOperation {
    /** documents matching this filter will be updated */
    filter?: Record<string, any> | null;
    /** partial document to apply */
    document?: InternalDocument;
}
interface InternalUpdateExistingOperation {
    /** documents to update */
    documents?: InternalDocument[];
}
interface VersionedDocumentUpdateOperation {
    /** documents to create or overwrite */
    documents?: InternalDocument[];
    /** versioning mode to use instead of default */
    versioningMode?: VersioningMode;
}
declare enum VersioningMode {
    /** use default versioning mode agreed with search team */
    DEFAULT = "DEFAULT",
    /** execute only if version is greater than existing */
    GREATER_THAN = "GREATER_THAN",
    /** execute only if version is greater or equal to existing */
    GREATER_OR_EQUAL = "GREATER_OR_EQUAL"
}
interface VersionedDeleteByIdsOperation {
    /** ids with version of the documents to delete */
    documentIds?: VersionedDocumentId[];
}
interface VersionedDocumentId {
    /** document id */
    documentId?: string;
    /** document version */
    version?: string;
    /** versioning mode to use instead of default */
    versioningMode?: VersioningMode;
}
interface TriggerReindexRequest {
    metasiteId?: string;
    orderIds?: string[];
}
interface TriggerReindexResponse {
}
interface Empty$5 {
}
interface BatchOfTriggerReindexOrderRequest {
    requests?: TriggerReindexOrderRequest[];
}
interface SendBuyerConfirmationEmailRequest {
    orderId?: string;
}
interface SendBuyerConfirmationEmailResponse {
}
interface SendBuyerPaymentsReceivedEmailRequest {
    orderId?: string;
}
interface SendBuyerPaymentsReceivedEmailResponse {
}
interface SendBuyerPickupConfirmationEmailRequest {
    orderId?: string;
}
interface SendBuyerPickupConfirmationEmailResponse {
}
interface BulkSendBuyerPickupConfirmationEmailsRequest {
    /** IDs of orders to send pickup emails for. */
    orderIds?: string[];
}
interface BulkSendBuyerPickupConfirmationEmailsResponse {
}
interface SendBuyerShippingConfirmationEmailRequest {
    orderId?: string;
}
interface SendBuyerShippingConfirmationEmailResponse {
}
interface BulkSendBuyerShippingConfirmationEmailsRequest {
    /** IDs of orders to send pickup emails for. */
    orderIds?: string[];
}
interface BulkSendBuyerShippingConfirmationEmailsResponse {
}
interface SendMerchantOrderReceivedNotificationRequest {
    orderId?: string;
}
interface SendMerchantOrderReceivedNotificationResponse {
}
interface SendCancelRefundEmailRequest {
    /** The ID of order that is canceled/refunded */
    orderId?: string;
    /** Personal note added to the email (optional) */
    customMessage?: string | null;
    /** Refund amount */
    refundAmount?: Price$3;
    /** Refund ID. (Optional) */
    refundId?: string | null;
}
interface SendCancelRefundEmailResponse {
}
interface SendRefundEmailRequest {
    /** The ID of order that is refunded */
    orderId?: string;
    /** Refund ID */
    refundId?: string;
    /** Personal note added to the email (optional) */
    customMessage?: string | null;
}
interface SendRefundEmailResponse {
}
interface SendMerchantOrderReceivedPushRequest {
    orderId?: string;
}
interface SendMerchantOrderReceivedPushResponse {
}
interface PreviewEmailByTypeRequest {
    emailType?: PreviewEmailType;
}
declare enum PreviewEmailType {
    ORDER_PLACED = "ORDER_PLACED",
    DOWNLOAD_LINKS = "DOWNLOAD_LINKS",
    ORDER_SHIPPED = "ORDER_SHIPPED",
    ORDER_READY_FOR_PICKUP = "ORDER_READY_FOR_PICKUP"
}
interface PreviewEmailByTypeResponse {
    emailPreview?: string;
}
interface PreviewRefundEmailRequest {
    orderId?: string;
    /** Refund amount */
    refundAmount?: Price$3;
    /** Refund business details */
    details?: RefundDetails$1;
    /** Personal note added to the email (optional) */
    customMessage?: string | null;
    /** Refund ID. (Optional) */
    refundId?: string | null;
}
interface PreviewRefundEmailResponse {
    emailPreview?: string;
}
interface PreviewCancelEmailRequest {
    orderId?: string;
    /** Personal note added to the email (optional) */
    customMessage?: string | null;
}
interface PreviewCancelEmailResponse {
    emailPreview?: string;
}
interface PreviewCancelRefundEmailRequest {
    orderId?: string;
    /** Personal note added to the email (optional) */
    customMessage?: string | null;
    /** Refund amount */
    refundAmount?: Price$3;
    /** Refund ID. (Optional) */
    refundId?: string | null;
}
interface PreviewCancelRefundEmailResponse {
    emailPreview?: string;
}
interface PreviewBuyerPaymentsReceivedEmailRequest {
}
interface PreviewBuyerPaymentsReceivedEmailResponse {
    emailPreview?: string;
}
interface PreviewBuyerConfirmationEmailRequest {
}
interface PreviewBuyerConfirmationEmailResponse {
    emailPreview?: string;
}
interface PreviewBuyerPickupConfirmationEmailRequest {
}
interface PreviewBuyerPickupConfirmationEmailResponse {
    emailPreview?: string;
}
interface PreviewShippingConfirmationEmailRequest {
}
interface PreviewShippingConfirmationEmailResponse {
    emailPreview?: string;
}
interface PreviewResendDownloadLinksEmailRequest {
}
interface PreviewResendDownloadLinksEmailResponse {
    emailPreview?: string;
}
interface PreparePaymentCollectionRequest {
    /** Ecom order ID. */
    ecomOrderId: string;
    /** Amount to collect */
    amount: Price$3;
    /**
     * Optional parameter. When present, payment collection will be performed using given payment gateway order.
     * Existing payment gateway order will be updated with a new amount.
     * When parameter is absent, new payment gateway order will be created and used for payment collection.
     */
    paymentGatewayOrderId?: string | null;
    /**
     * Whether to delay capture of the payment.
     * Default: false
     * @deprecated Whether to delay capture of the payment.
     * Default: false
     * @replacedBy delayed_capture_settings.scheduled_action
     * @targetRemovalDate 2024-09-30
     */
    delayedCapture?: boolean;
    /** Delayed capture payment settings */
    delayedCaptureSettings?: DelayedCaptureSettings;
}
interface RedirectUrls {
    /** URL to redirect buyer in case of approved (successful) transaction */
    successUrl?: string | null;
    /** URL to redirect buyer in case of buyer canceled the transaction */
    cancelUrl?: string | null;
    /** URL to redirect buyer in case of failed/rejected transaction */
    errorUrl?: string | null;
    /** URL to redirect buyer in case of pending transaction (that might take some time to process) */
    pendingUrl?: string | null;
}
interface DelayedCaptureSettings {
    /** Specifies the automatic action (void/capture) for authorized transaction after the specified duration */
    scheduledAction?: ScheduledAction$1;
    /** Delay duration before execution. Optional - if not set, providers default period will be used */
    delayDuration?: Duration;
}
declare enum ScheduledAction$1 {
    UNSPECIFIED = "UNSPECIFIED",
    /** Whether payment will be auto-voided when duration passes */
    VOID = "VOID",
    /** Whether payment will be auto-captured when duration passes */
    CAPTURE = "CAPTURE"
}
interface Duration {
    /** Amount of units. For example, 30 MINUTES, 1 HOURS, 7 DAYS, etc */
    count?: number;
    /** Duration unit: MINUTES, HOURS and DAYS */
    unit?: DurationUnit;
}
declare enum DurationUnit {
    UNKNOWN_DURATION_UNIT = "UNKNOWN_DURATION_UNIT",
    MINUTES = "MINUTES",
    HOURS = "HOURS",
    DAYS = "DAYS"
}
interface PreparePaymentCollectionResponse {
    /** Payment gateway order id which is associated with given payment */
    paymentGatewayOrderId?: string;
}
interface GetPaymentCollectabilityStatusRequest {
    /** Ecom order ID. */
    ecomOrderId: string;
}
interface GetPaymentCollectabilityStatusResponse {
    /** Payment collectability status */
    status?: PaymentCollectabilityStatus;
    /** Collectable order amount */
    amount?: Price$3;
}
declare enum PaymentCollectabilityStatus {
    UNKNOWN = "UNKNOWN",
    COLLECTABLE = "COLLECTABLE",
    NONCOLLECTABLE_ORDER_IS_CANCELLED = "NONCOLLECTABLE_ORDER_IS_CANCELLED",
    NONCOLLECTABLE_ORDER_IS_PAID = "NONCOLLECTABLE_ORDER_IS_PAID",
    NONCOLLECTABLE_MISSING_PAYMENT_METHOD = "NONCOLLECTABLE_MISSING_PAYMENT_METHOD"
}
interface RecordManuallyCollectedPaymentRequest {
    /** Order ID. */
    orderId?: string;
    /** Amount to be recorded as approved manual payment for given order */
    amount?: Price$3;
}
interface RecordManuallyCollectedPaymentResponse {
}
interface MarkOrderAsPaidRequest {
    /** Ecom order ID. */
    ecomOrderId?: string;
}
interface MarkOrderAsPaidResponse {
    /** Updated order. */
    order?: Order$1;
}
/** Triggered when the payment status of an order is updated */
interface PaymentStatusUpdated {
    /** The order that was updated */
    order?: Order$1;
    /** The previous status (before the update) */
    previousPaymentStatus?: PaymentStatus$1;
}
interface BulkMarkOrdersAsPaidRequest {
    /** IDs of orders to mark as paid. */
    ecomOrderIds?: string[];
}
interface BulkMarkOrdersAsPaidResponse {
    /**
     * Items updated by the bulk action.
     * The Order entity within the results optimistically changes its payment status to paid, however this process is async.
     */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkOrderResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata$1;
    /**
     * Updated order.
     *
     * Returned when `returnFullEntity = true`.
     */
    item?: Order$1;
}
interface ItemMetadata$1 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$4;
}
interface ApplicationError$4 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$1 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface GetRefundabilityStatusRequest$1 {
    /** Order ID. */
    ecomOrderId?: string;
}
interface GetRefundabilityStatusResponse$1 {
    /** Refundability details. */
    refundabilities?: Refundability$1[];
    /**
     * Whether the order supports refunding per item.
     * @deprecated
     */
    refundablePerItem?: boolean;
}
interface Refundability$1 extends RefundabilityAdditionalRefundabilityInfoOneOf$1 {
    /** Reason why payment is not refundable. */
    nonRefundableReason?: NonRefundableReason$1;
    /** Reason why payment is only refundable manually. */
    manuallyRefundableReason?: ManuallyRefundableReason$1;
    /** Payment ID. */
    paymentId?: string;
    /** Payment refundability status. */
    refundabilityStatus?: RefundableStatus$1;
    /** Link to payment provider dashboard. */
    providerLink?: string | null;
}
/** @oneof */
interface RefundabilityAdditionalRefundabilityInfoOneOf$1 {
    /** Reason why payment is not refundable. */
    nonRefundableReason?: NonRefundableReason$1;
    /** Reason why payment is only refundable manually. */
    manuallyRefundableReason?: ManuallyRefundableReason$1;
}
declare enum RefundableStatus$1 {
    NOT_REFUNDABLE = "NOT_REFUNDABLE",
    MANUAL = "MANUAL",
    REFUNDABLE = "REFUNDABLE"
}
declare enum NonRefundableReason$1 {
    NONE = "NONE",
    ALREADY_REFUNDED = "ALREADY_REFUNDED",
    PROVIDER_IS_DOWN = "PROVIDER_IS_DOWN",
    INTERNAL_ERROR = "INTERNAL_ERROR",
    NOT_PAID = "NOT_PAID",
    ACCESS_DENIED = "ACCESS_DENIED",
    ZERO_PRICE = "ZERO_PRICE",
    DISABLED_BY_PROVIDER = "DISABLED_BY_PROVIDER",
    PENDING_REFUND = "PENDING_REFUND",
    FORBIDDEN = "FORBIDDEN",
    TRANSACTION_NOT_FOUND = "TRANSACTION_NOT_FOUND"
}
declare enum ManuallyRefundableReason$1 {
    EXPIRED = "EXPIRED",
    NOT_SUPPORTED = "NOT_SUPPORTED",
    OFFLINE = "OFFLINE"
}
interface CreatePaymentGatewayOrderRequest {
    /** Ecom order ID. */
    ecomOrderId?: string;
    /** Information about the user who initiated the payment. */
    chargedBy?: ChargedBy;
}
interface ChargedBy {
    /** ID - id of the user who initiated the payment */
    _id?: string;
    /** Full name - name of the user who initiated the payment */
    fullName?: string | null;
}
interface CreatePaymentGatewayOrderResponse {
    /** ID of the order created in the payment gateway */
    paymentGatewayOrderId?: string;
}
interface ChargeMembershipsRequest {
    /** Order ID. */
    ecomOrderId?: string;
    /**
     * The member id. Do not attempt to get it from the request context, since in some cases the caller is not a member
     * but a user which is using the membership on behalf of the a member
     */
    memberId?: string;
    /** List of items to be paid by memberships */
    membershipCharges?: MembershipChargeItem[];
}
interface MembershipChargeItem {
    /** The id of used membership */
    membershipId?: string;
    /** ID of the application providing this payment option */
    appId?: string;
    /** The name of used membership */
    membershipName?: MembershipName$2;
    /** Additional data about this membership */
    membershipAdditionalData?: Record<string, any> | null;
    /** Catalog and item reference info. */
    catalogReference?: CatalogReference$3;
    /** Properties of the service. When relevant, contains information such as date and number of participants. */
    serviceProperties?: ServiceProperties$1;
    /**
     * Usually would be the same as catalogReference.catalogItemId
     * For cases when these are not the same, this field would return the actual id of the item in the catalog
     * For example, for Wix bookings, catalogReference.catalogItemId is the booking id, and this value is being set to be the service id
     */
    rootCatalogItemId?: string | null;
    /** line item id of Checkout/Order line item */
    lineItemId?: string;
}
interface ServiceProperties$1 {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface ChargeMembershipsResponse {
}
interface TriggerRefundRequest$1 {
    /** The order this refund related to */
    ecomOrderId?: string;
    /** Refund operations information */
    payments?: PaymentRefund$1[];
    /** Business model of a refund */
    details?: RefundDetails$1;
    /** Side effect details related to refund */
    sideEffects?: RefundSideEffects$1;
}
interface PaymentRefund$1 {
    /** Specific payment within the order to refund */
    paymentId?: string;
    /** Refund amount. Not relevant for membership and gift card refunds. */
    amount?: Price$3;
    /**
     * Whether refund is made externally and manually (on the payment provider's side)
     * When false (default), the payment gateway will be called in order to make an actual refund, and then the payment will be marked as refunded.
     * When true, the payment will only be *marked* as refunded, and no actual refund will be performed.
     */
    externalRefund?: boolean;
}
interface RefundSideEffects$1 {
    /** Inventory restock details as part of this refund. */
    restockInfo?: RestockInfo$1;
    /** Whether to send a refund confirmation email to the customer. */
    sendOrderRefundedEmail?: boolean;
    /** Custom message added to the refund confirmation email. */
    customMessage?: string | null;
}
interface RestockInfo$1 {
    /** Restock type. */
    type?: RestockType$1;
    /** Restocked line items and quantities. Only relevant for `{"type": "SOME_ITEMS"}`. */
    items?: RestockItem$1[];
}
declare enum RestockType$1 {
    NO_ITEMS = "NO_ITEMS",
    ALL_ITEMS = "ALL_ITEMS",
    SOME_ITEMS = "SOME_ITEMS"
}
interface RestockItem$1 {
    /** ID of the line item being restocked. */
    lineItemId?: string;
    /** Line item quantity being restocked. */
    quantity?: number;
}
interface TriggerRefundResponse$1 {
    /** All order's transactions after the refunds were added */
    orderTransactions?: OrderTransactions$1;
    /** Created refund ID */
    refundId?: string | null;
    /** Payment ID's that the refund execution had failed for */
    failedPaymentIds?: ItemMetadata$1[];
}
/** Triggered when a refund is created. */
interface RefundCreated {
    /** Updated order transactions. */
    orderTransactions?: OrderTransactions$1;
    /** ID of the created refund. */
    refundId?: string;
    /** Inventory restock details as part of this refund.. */
    restockInfo?: RestockInfo$1;
    /** Whether to send a refund confirmation email to the customer. */
    sendOrderRefundedEmail?: boolean;
    /** Custom message added to the refund confirmation email. */
    customMessage?: string | null;
    /** Refunded line items and quantities that are part of the created refund. */
    refundItems?: RefundItem$1[];
}
interface CalculateRefundRequest$1 {
    /** Order ID */
    ecomOrderId?: string;
    /** Refunded line items and quantity */
    refundItems?: CalculateRefundItemRequest$1[];
    /** Should include shipping in refund calculation */
    refundShipping?: boolean;
}
interface CalculateRefundItemRequest$1 {
    /** ID of the line item being refunded */
    _id?: string;
    /** How much of that line item is being refunded */
    quantity?: number;
}
interface CalculateRefundResponse$1 {
    /** Total refundable amount */
    total?: Price$3;
    /** Tax cost of the order */
    tax?: Price$3;
    /** Discount given for this order */
    discount?: Price$3;
    /** Total cost of the order (without tax) */
    subtotal?: Price$3;
    /** Total shipping cost for order */
    shipping?: Price$3;
    /** Previous refund given on that order */
    previouslyRefundedAmount?: Price$3;
    /** The refundable items of that order */
    items?: CalculateRefundItemResponse$1[];
}
interface CalculateRefundItemResponse$1 {
    /** Line item ID */
    _id?: string;
    /** Refundable amount for requested quantity of items (price of requested quantity of items without tax and discount) */
    price?: Price$3;
}
interface VoidAuthorizedPaymentsRequest {
    /** Wix eCommerce order ID */
    ecomOrderId: string;
    /** Payment IDs */
    paymentIds: string[];
}
interface VoidAuthorizedPaymentsResponse {
    /** All order's transactions after the void was triggered */
    orderTransactions?: OrderTransactions$1;
}
interface CaptureAuthorizedPaymentsRequest {
    /** Wix eCommerce order ID */
    ecomOrderId: string;
    /** Capture payments information */
    payments: PaymentCapture[];
}
interface PaymentCapture {
    /** Payment ID */
    paymentId?: string | null;
    /**
     * Capture amount.
     * If not provided - full authorized amount will be captured.
     */
    amount?: Price$3;
}
interface CaptureAuthorizedPaymentsResponse {
    /** All order's transactions after the capture was triggered */
    orderTransactions?: OrderTransactions$1;
}
interface ChargeSavedPaymentMethodRequest {
    /** Ecom Order ID. */
    ecomOrderId?: string;
    /** Amount to be charged */
    amount?: Price$3;
}
interface ChargeSavedPaymentMethodResponse {
    /** Payment gateway's order ID (e.g Wix Payments) */
    paymentGatewayOrderId?: string;
}
interface DiffmatokyPayload$2 {
    left?: string;
    right?: string;
    compareChannel?: string;
    entityId?: string;
    errorInformation?: ErrorInformation$2;
    tags?: string[];
}
interface ErrorInformation$2 {
    stackTrace?: string;
}
interface ContinueSideEffectsFlowInLegacyData {
    storeId?: string;
    orderId?: string;
    ordersExperiments?: OrdersExperiments;
}
interface OrdersExperiments {
    epCommitTax?: boolean;
    moveMerchantEmailToEp?: boolean;
    moveBuyerOrderConfirmationEmailToEp?: boolean;
    producedByEpBridge?: boolean;
    enableRewrittenSideEffects?: boolean;
}
interface IndexingMessage$1 {
    _id?: string;
    opType?: number;
    requiredVersions?: string[];
}
interface GetOrderRequest {
    /** ID of the order to retrieve. */
    _id: string;
}
interface GetOrderResponse {
    /** The requested order. */
    order?: Order$1;
}
interface InternalQueryOrdersResponse {
    /** List of orders. */
    orders?: Order$1[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata;
}
interface QueryOrderRequest {
    /** Query options. */
    query?: PlatformQuery;
}
interface QueryOrderResponse {
    /** List of orders. */
    orders?: Order$1[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata;
}
interface SearchOrdersRequest {
    /** Search options. */
    search?: CursorSearch;
}
interface CursorSearch extends CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$7;
    /**
     * Filter object.
     *
     * For example, the following `filter` object will only return orders with payment statuses of paid and/or partially paid:
     *
     * `"filter": {"paymentStatus": {"$in": ["PAID", "PARTIALLY_PAID"]}}`
     *
     * Learn more about the [filter format](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Array of sort objects that specify the order in which results should be sorted.
     *
     * For example, the following `sort` array will sort by `createdDate` in descending order:
     *
     * `"sort": [{"fieldName": "createdDate", "order":"DESC"}]`.
     *
     * Learn more about the [sort format](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$7[];
}
/** @oneof */
interface CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$7;
}
interface SearchOrdersResponse {
    /** List of orders. */
    orders?: Order$1[];
    /** Details on the paged set of results returned. */
    metadata?: CursorPagingMetadata$6;
}
interface CursorPagingMetadata$6 {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$7;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface CreateOrderRequest {
    /** Order info. */
    order: Order$1;
}
interface OrderCreationSettings {
}
declare enum OrderApprovalStrategy {
    DEFAULT = "DEFAULT",
    PAYMENT_RECEIVED = "PAYMENT_RECEIVED",
    PAYMENT_METHOD_SAVED = "PAYMENT_METHOD_SAVED"
}
interface OrderCreateNotifications {
}
interface CreateOrderResponse {
    /** Newly created order. */
    order?: Order$1;
}
interface UpdateOrderRequest {
    /** Order to be updated. */
    order: Order$1;
}
interface UpdateOrderResponse {
    /** Newly created order. */
    order?: Order$1;
}
interface BulkUpdateOrdersRequest {
    /** Orders to update. */
    orders: MaskedOrder[];
    /**
     * Whether to return the full order entities.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface MaskedOrder {
    /** Order to be updated. */
    order?: Order$1;
}
interface BulkUpdateOrdersResponse {
    /** Bulk action results. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface CommitDeltasRequest {
    /** Order id to be updated */
    _id?: string;
    /**
     * Draft order Id representing this change.
     * Use this ID to get this specific draft content. call .../v1/draft-orders/{draft_order_id}/get
     */
    draftOrderId?: string;
    /** Draft order changes to be applied */
    changes?: DraftOrderDiffs;
    /** Side-effects to happen after order is updated */
    commitSettings?: DraftOrderCommitSettings;
    /** Reason for edit, given by user (optional). */
    reason?: string | null;
}
interface DraftOrderDiffs extends DraftOrderDiffsShippingUpdateInfoOneOf, DraftOrderDiffsBuyerUpdateInfoOneOf, DraftOrderDiffsBillingUpdateInfoOneOf, DraftOrderDiffsRecipientUpdateInfoOneOf {
    /** Shipping info and selected shipping option details. */
    changedShippingInfo?: V1ShippingInformation;
    /** Remove existing shipping info. */
    shippingInfoRemoved?: boolean;
    /** Added/updated/removed order line items. */
    lineItems?: V1LineItemDelta[];
    /**
     * Added/updated/removed discounts.
     * todo: set (.wix.api.maxSize). need to find it. existing : merchant can have 100 + 1 coupon + ? due to automatic discounts
     */
    appliedDiscounts?: AppliedDiscountDelta[];
    /** Added/updated/removed additional fee. */
    additionalFees?: AdditionalFeeDelta[];
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Updated Tax summary. overwrites existing tax summary.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Updated Tax summary. overwrites existing tax summary.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary$1;
    /**
     * Updated order price summary. overwrites existing price summary.
     * balance will be updated automatically.
     */
    priceSummary?: PriceSummary$1;
}
/** @oneof */
interface DraftOrderDiffsShippingUpdateInfoOneOf {
    /** Shipping info and selected shipping option details. */
    changedShippingInfo?: V1ShippingInformation;
    /** Remove existing shipping info. */
    shippingInfoRemoved?: boolean;
}
/** @oneof */
interface DraftOrderDiffsBuyerUpdateInfoOneOf {
}
/** @oneof */
interface DraftOrderDiffsBillingUpdateInfoOneOf {
}
/** @oneof */
interface DraftOrderDiffsRecipientUpdateInfoOneOf {
}
interface V1LineItemDelta extends V1LineItemDeltaDeltaOneOf {
    /** The line item was added. */
    lineItemAdded?: boolean;
    /** The line item was modified. */
    changedDetails?: ItemChangedDetails;
    /** The line item was added. */
    lineItemRemoved?: boolean;
    /** Line item ID. */
    lineItemId?: string;
    lineItem?: OrderLineItemChangedDetails;
}
/** @oneof */
interface V1LineItemDeltaDeltaOneOf {
    /** The line item was added. */
    lineItemAdded?: boolean;
    /** The line item was modified. */
    changedDetails?: ItemChangedDetails;
    /** The line item was added. */
    lineItemRemoved?: boolean;
}
interface OrderLineItemChangedDetails {
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference$3;
    /** Line item quantity. */
    quantity?: number;
    /** Total discount for this line item's entire quantity. */
    totalDiscount?: Price$3;
    /** Line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine[];
    /** Line item image. */
    image?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties$2;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$1;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     *
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://www.wix.com/velo/reference/wix-ecom-backend/orderfulfillments/listfulfillmentsforsingleorder).
     */
    fulfillerId?: string | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price$3;
    /** Line item price before line item discounts for display purposes. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: Price$3;
    /** Total price after all discounts and tax. */
    totalPriceAfterTax?: Price$3;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     */
    paymentOption?: DeltaPaymentOptionType;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails$1;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: Price$3;
    /** Total price after all discounts excluding tax. */
    totalPriceBeforeTax?: Price$3;
}
/** Type of selected payment option for catalog item */
declare enum DeltaPaymentOptionType {
    /** irrelevant */
    UNKNOWN_PAYMENT_OPTION = "UNKNOWN_PAYMENT_OPTION",
    /** The entire payment for given item will happen after the checkout. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /**
     * Payment for this item can only be done using a membership and must be manually redeemed in the dashboard by the site owner.
     * Note: when this option is used, price will be 0.
     */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ItemChangedDetails {
    /** The quantity before the change. */
    quantityBeforeChange?: number | null;
    /** The price before the change. */
    priceBeforeChange?: Price$3;
    /** The price description before the change */
    priceDescriptionBeforeChange?: PriceDescription;
}
interface AppliedDiscountDelta extends AppliedDiscountDeltaDeltaOneOf {
    editedDiscount?: AppliedDiscount$1;
    discountRemoved?: boolean;
    /** Discount id. */
    discountId?: string;
}
/** @oneof */
interface AppliedDiscountDeltaDeltaOneOf {
    editedDiscount?: AppliedDiscount$1;
    discountRemoved?: boolean;
}
interface AdditionalFeeDelta extends AdditionalFeeDeltaDeltaOneOf {
    editedAdditionalFee?: AdditionalFee$1;
    additionalFeeRemoved?: boolean;
    /** Additional fee id. */
    additionalFeeId?: string;
}
/** @oneof */
interface AdditionalFeeDeltaDeltaOneOf {
    editedAdditionalFee?: AdditionalFee$1;
    additionalFeeRemoved?: boolean;
}
interface DraftOrderCommitSettings {
    /** If false, do not send notifications to buyer. Default is true. */
    sendNotificationsToBuyer?: boolean | null;
    /** If false, do not send notifications to business. Default is true. */
    sendNotificationsToBusiness?: boolean | null;
    /** If false,do not add activities to the order. Default is true. */
    addActivitiesToOrder?: boolean | null;
    /** If false, do not send mails to custom fulfillers in case of a change of shippable items fulfilled by custom fulfillers. Default is true. */
    sendNotificationsToCustomFulfillers?: boolean | null;
    /** Inventory changes to be applied. Either to restock, or decrease. */
    inventoryUpdates?: InventoryUpdateDetails[];
}
interface InventoryUpdateDetails {
    /** Action to be applied - decrease or restock */
    actionType?: InventoryAction;
    /** Order line item id */
    lineItemId?: string;
    /** The amount to be increased or restocked */
    quantityChange?: number;
}
declare enum InventoryAction {
    /** Restock inventory */
    RESTOCK = "RESTOCK",
    /** Decrease inventory. Without failing on negative inventory. */
    DECREASE = "DECREASE"
}
interface CommitDeltasResponse {
    /** Order after deltas are applied */
    order?: Order$1;
}
/** Triggered when order is edited by draftOrders */
interface OrderDeltasCommitted {
    /** The order after committed changes. */
    order?: Order$1;
    /** Draft order Id representing this change. */
    draftOrderId?: string;
    /** Applied changes. */
    changes?: CommittedDiffs;
    /** Side-effects requested to happen as a result of this edit. */
    commitSettings?: DraftOrderCommitSettings;
    /**
     * Date and time when order deltas were committed.
     * @readonly
     */
    commitDate?: Date | null;
}
interface CommittedDiffs extends CommittedDiffsShippingUpdateInfoOneOf {
    /** Shipping info and selected shipping option details. */
    changedShippingInfo?: V1ShippingInformation;
    /** Remove existing shipping info. */
    shippingInfoRemoved?: boolean;
    /** Added/updated/removed order line items. */
    lineItems?: LineItemDelta[];
    /**
     * Added/updated/removed discounts.
     * todo: set (.wix.api.maxSize). need to find it. existing : merchant can have 100 + 1 coupon + ? due to automatic discounts
     */
    appliedDiscounts?: AppliedDiscountDelta[];
    /** Added/updated/removed additional fee. */
    additionalFees?: AdditionalFeeDelta[];
}
/** @oneof */
interface CommittedDiffsShippingUpdateInfoOneOf {
    /** Shipping info and selected shipping option details. */
    changedShippingInfo?: V1ShippingInformation;
    /** Remove existing shipping info. */
    shippingInfoRemoved?: boolean;
}
interface LineItemDelta extends LineItemDeltaDeltaOneOf {
    lineItemAdded?: boolean;
    changedDetails?: ItemChangedDetails;
    lineItemRemoved?: OrderLineItemChangedDetails;
    /** Line item ID. */
    lineItemId?: string;
}
/** @oneof */
interface LineItemDeltaDeltaOneOf {
    lineItemAdded?: boolean;
    changedDetails?: ItemChangedDetails;
    lineItemRemoved?: OrderLineItemChangedDetails;
}
interface ArchiveOrderRequest {
    /** Order ID. */
    _id?: string;
}
interface ArchiveOrderResponse {
    /** Archived order. */
    order?: Order$1;
}
interface BulkArchiveOrdersRequest {
    /** IDs of orders to archive. */
    ids?: string[];
    /** Whether to return the full updated order entities in the response. */
    returnFullEntity?: boolean;
}
interface BulkArchiveOrdersResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkArchiveOrdersByFilterRequest {
    /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/ecommerce/orders/filter-and-sort). */
    filter?: Record<string, any> | null;
}
interface BulkArchiveOrdersByFilterResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface UnArchiveOrderRequest {
    /** Order ID. */
    _id?: string;
}
interface UnArchiveOrderResponse {
    /** Unarchived order. */
    order?: Order$1;
}
interface BulkUnArchiveOrdersRequest {
    /** IDs or orders to unarchive. */
    ids?: string[];
    /** Whether to return the full updated order entities in the response. */
    returnFullEntity?: boolean;
}
interface BulkUnArchiveOrdersResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkUnArchiveOrdersByFilterRequest {
    /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/ecommerce/orders/filter-and-sort). */
    filter?: Record<string, any> | null;
}
interface BulkUnArchiveOrdersByFilterResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface UpdateBuyerInfoRequest {
    /**
     * Order ID.
     * @readonly
     */
    _id?: string;
    /** Buyer info. */
    buyerInfo?: BuyerInfoUpdate;
}
interface BuyerInfoUpdate {
    /** Contact ID. */
    contactId?: string | null;
    /** Email associated with the buyer. */
    email?: string | null;
}
interface UpdateBuyerInfoResponse {
    /** Updated order. */
    order?: Order$1;
}
interface UpdateBuyerEmailRequest {
    /** @readonly */
    _id?: string;
    email?: string | null;
}
interface UpdateBuyerEmailResponse {
    order?: Order$1;
}
interface UpdateOrderShippingAddressRequest {
    /** Order ID. */
    _id?: string;
    /** Shipping address and contact details to be updated. */
    shippingAddress?: AddressWithContact;
}
interface UpdateOrderShippingAddressResponse {
    /** Updated order. */
    order?: Order$1;
}
interface UpdateBillingContactDetailsRequest {
    /**
     * Order ID.
     * @readonly
     */
    _id?: string;
    /** Contact details. */
    addressContactDetails?: FullAddressContactDetails$1;
}
interface UpdateBillingContactDetailsResponse {
    /** Updated order. */
    order?: Order$1;
}
interface UpdateOrderLineItemRequest {
    /** Order ID */
    _id?: string;
    /** Order line item to update */
    lineItem?: OrderLineItem;
}
interface UpdateOrderLineItemResponse {
    /** Updated order data */
    order?: Order$1;
}
interface UpdateOrderLineItemsRequest {
    /** Order ID */
    orderId?: string;
    /** Order line items to update */
    lineItems?: MaskedOrderLineItem[];
}
interface MaskedOrderLineItem {
    /** Order line item to update */
    lineItem?: OrderLineItem;
}
interface UpdateOrderLineItemsResponse {
    /** Updated order data */
    order?: Order$1;
}
interface AddInternalActivityRequest {
    /** Order ID. */
    _id?: string;
    /** Activity info. */
    activity?: InternalActivity;
}
interface InternalActivity extends InternalActivityContentOneOf {
    /** Order refunded. */
    orderRefunded?: OrderRefunded$1;
    /** Order placed. */
    orderPlaced?: OrderPlaced;
    /** Order paid. Either by the store owner (for offline orders), or when an online transaction was confirmed. */
    orderPaid?: OrderPaid;
    /** Order shipping status set as fulfilled. */
    orderFulfilled?: OrderFulfilled;
    /** Order shipping status set as not fulfilled. */
    orderNotFulfilled?: OrderNotFulfilled;
    /** Order canceled. */
    orderCanceled?: OrderCanceled;
    /** Download link was sent (relevant for orders with digital line items). */
    downloadLinkSent?: DownloadLinkSent;
    /** Shipping tracking number added to order. */
    trackingNumberAdded?: TrackingNumberAdded;
    /** Shipping tracking number was edited. */
    trackingNumberEdited?: TrackingNumberEdited;
    /** Shipping tracking link added to order. */
    trackingLinkAdded?: TrackingLinkAdded;
    /** An email confirmation of order shipment was sent. */
    shippingConfirmationEmailSent?: ShippingConfirmationEmailSent;
    /** Invoice was added to order. */
    invoiceAdded?: InvoiceAdded;
    /** Invoice sent to customer via email. */
    invoiceSent?: InvoiceSent;
    /** Email sent to fulfiller. */
    fulfillerEmailSent?: FulfillerEmailSent;
    /** Shipping address was updated. */
    shippingAddressEdited?: ShippingAddressEdited;
    /** Order email was updated. */
    emailEdited?: EmailEdited;
    /** Email notification for pickup sent. */
    pickupReadyEmailSent?: PickupReadyEmailSent;
    /** Order created as a result of items exchange. */
    orderCreatedFromExchange?: OrderCreatedFromExchange;
    /** New exchange order created. */
    newExchangeOrderCreated?: NewExchangeOrderCreated;
    /** Order partially paid. During the checkout for orders with deposit items. */
    orderPartiallyPaid?: OrderPartiallyPaid;
    /** Draft order changes applied */
    draftOrderChangesApplied?: DraftOrderChangesApplied;
    /** Payment method is saved for order */
    savedPaymentMethod?: SavedPaymentMethod;
    /**
     * Internal activity ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Internal activity author's email.
     * @readonly
     */
    authorEmail?: string | null;
    /**
     * Internal activity creation date and time.
     * @readonly
     */
    _createdDate?: Date | null;
}
/** @oneof */
interface InternalActivityContentOneOf {
    /** Order refunded. */
    orderRefunded?: OrderRefunded$1;
    /** Order placed. */
    orderPlaced?: OrderPlaced;
    /** Order paid. Either by the store owner (for offline orders), or when an online transaction was confirmed. */
    orderPaid?: OrderPaid;
    /** Order shipping status set as fulfilled. */
    orderFulfilled?: OrderFulfilled;
    /** Order shipping status set as not fulfilled. */
    orderNotFulfilled?: OrderNotFulfilled;
    /** Order canceled. */
    orderCanceled?: OrderCanceled;
    /** Download link was sent (relevant for orders with digital line items). */
    downloadLinkSent?: DownloadLinkSent;
    /** Shipping tracking number added to order. */
    trackingNumberAdded?: TrackingNumberAdded;
    /** Shipping tracking number was edited. */
    trackingNumberEdited?: TrackingNumberEdited;
    /** Shipping tracking link added to order. */
    trackingLinkAdded?: TrackingLinkAdded;
    /** An email confirmation of order shipment was sent. */
    shippingConfirmationEmailSent?: ShippingConfirmationEmailSent;
    /** Invoice was added to order. */
    invoiceAdded?: InvoiceAdded;
    /** Invoice sent to customer via email. */
    invoiceSent?: InvoiceSent;
    /** Email sent to fulfiller. */
    fulfillerEmailSent?: FulfillerEmailSent;
    /** Shipping address was updated. */
    shippingAddressEdited?: ShippingAddressEdited;
    /** Order email was updated. */
    emailEdited?: EmailEdited;
    /** Email notification for pickup sent. */
    pickupReadyEmailSent?: PickupReadyEmailSent;
    /** Order created as a result of items exchange. */
    orderCreatedFromExchange?: OrderCreatedFromExchange;
    /** New exchange order created. */
    newExchangeOrderCreated?: NewExchangeOrderCreated;
    /** Order partially paid. During the checkout for orders with deposit items. */
    orderPartiallyPaid?: OrderPartiallyPaid;
    /** Draft order changes applied */
    draftOrderChangesApplied?: DraftOrderChangesApplied;
    /** Payment method is saved for order */
    savedPaymentMethod?: SavedPaymentMethod;
}
/** Order placed */
interface OrderPlaced {
}
/** Order marked as paid, either by the store owner (for offline orders), or when an online transaction was confirmed */
interface OrderPaid {
}
/** Order shipping status set as fulfilled */
interface OrderFulfilled {
}
/** Order shipping status set as not fulfilled */
interface OrderNotFulfilled {
}
/** Order canceled */
interface OrderCanceled {
}
/** A download link was sent (relevant for orders with digital line items) */
interface DownloadLinkSent {
}
/** Shipping tracking number was set */
interface TrackingNumberAdded {
}
/** Shipping tracking number was edited */
interface TrackingNumberEdited {
}
/** Shipping tracking link was set */
interface TrackingLinkAdded {
}
/** An email confirmation of order shipment was sent */
interface ShippingConfirmationEmailSent {
}
/** Invoice was set in the order */
interface InvoiceAdded {
}
/** Invoice sent to customer via email */
interface InvoiceSent {
}
/** Email was sent to fulfiller */
interface FulfillerEmailSent {
}
/** Shipping address was updated */
interface ShippingAddressEdited {
}
/** Order email was updated */
interface EmailEdited {
}
/** An email notification for pickup was sent */
interface PickupReadyEmailSent {
}
/** Order marked as partially paid when an online transaction was confirmed with partial minimal required amount of total sum */
interface OrderPartiallyPaid {
}
/** Order reject */
interface OrderPending {
}
/** Order reject */
interface OrderRejected {
}
interface AddInternalActivityResponse {
    /** Updated order. */
    order?: Order$1;
    /**
     * ID of the added internal activity.
     * Use this ID to either [update](https://bo.wix.com/wix-docs/rest/ecommerce/orders/update-activity) or [delete](https://bo.wix.com/wix-docs/rest/ecommerce/orders/delete-activity) the activity.
     */
    activityId?: string;
}
interface AddActivityRequest {
    /** Order ID. */
    _id?: string;
    /** Activity info. */
    activity?: PublicActivity;
}
interface PublicActivity extends PublicActivityContentOneOf {
    /** Custom activity details. */
    customActivity?: CustomActivity;
    /** Merchant commment. */
    merchantComment?: MerchantComment;
}
/** @oneof */
interface PublicActivityContentOneOf {
    /** Custom activity details. */
    customActivity?: CustomActivity;
    /** Merchant commment. */
    merchantComment?: MerchantComment;
}
interface AddActivityResponse {
    /** Updated order. */
    order?: Order$1;
    /**
     * ID of the added activity.
     * Use this ID to either [update](https://bo.wix.com/wix-docs/rest/ecommerce/orders/update-activity) or [delete](https://bo.wix.com/wix-docs/rest/ecommerce/orders/delete-activity) the activity.
     */
    activityId?: string;
}
interface AddActivitiesRequest {
    /** Order ID. */
    orderId?: string;
    /** Activities to add. */
    activities?: PublicActivity[];
}
interface AddActivitiesResponse {
    /** Updated order. */
    order?: Order$1;
    /**
     * IDs of the added activities.
     * Use this IDs to either [update](https://bo.wix.com/wix-docs/rest/ecommerce/orders/update-activities) or [delete](https://bo.wix.com/wix-docs/rest/ecommerce/orders/delete-activities) the activities.
     */
    activityIds?: string[];
}
interface UpdateActivityRequest {
    /** Order ID. */
    _id?: string;
    /** ID of the activity to update. */
    activityId?: string;
    /** Activity info. */
    activity?: PublicActivity;
}
interface UpdateActivityResponse {
    /** Updated order. */
    order?: Order$1;
}
interface DeleteActivityRequest {
    /** Order ID. */
    _id?: string;
    /** ID of the activity to delete. */
    activityId?: string;
}
interface DeleteActivityResponse {
    /** Updated order. */
    order?: Order$1;
}
interface UpdateLineItemsDescriptionLinesRequest {
    /** Order ID. */
    _id?: string;
    /** Line items. */
    lineItems?: LineItemUpdate[];
}
interface LineItemUpdate {
    /** Line item ID. */
    lineItemId?: string;
    /**
     * Description lines' info.
     * If description line already exists for this name, it will be replaced.
     */
    descriptionLines?: DescriptionLine[];
}
interface UpdateLineItemsDescriptionLinesResponse {
    /** Updated order. */
    order?: Order$1;
}
interface MarkOrderAsSeenByHumanRequest {
    /** Order ID. */
    _id?: string;
}
interface MarkOrderAsSeenByHumanResponse {
    /** Updated order. */
    order?: Order$1;
}
interface CancelOrderRequest {
    /** Order ID. */
    _id: string;
    /** Whether to send an order canceled email to the buyer. */
    sendOrderCanceledEmail?: boolean;
    /** Custom note to be added to the email (optional). */
    customMessage?: string | null;
    /** Whether to restock all items in the order. This will only apply to products in the Wix Stores inventory. */
    restockAllItems?: boolean;
}
interface CancelOrderResponse {
    /** Canceled order. */
    order?: Order$1;
}
interface OrderCanceledEventOrderCanceled {
    /** The order that was cancelled */
    order?: Order$1;
    /** Should restock all items on that order */
    restockAllItems?: boolean;
    /** Should send a confirmation mail to the customer */
    sendOrderCanceledEmail?: boolean;
    /** Personal note added to the email */
    customMessage?: string | null;
}
interface MarkAsFulfilledRequest {
    /** Order ID. */
    _id?: string;
}
interface MarkAsFulfilledResponse {
    /** Updated order. */
    order?: Order$1;
}
/** Triggered when the fulfillment status of an order is updated */
interface FulfillmentStatusUpdated {
    /** The order that was updated */
    order?: Order$1;
    /** The previous status (before the update) */
    previousFulfillmentStatus?: FulfillmentStatus$1;
    /** the new status (after the update) */
    newFulfillmentStatus?: FulfillmentStatus$1;
    /** the action that caused this update */
    action?: string;
}
interface BulkMarkAsFulfilledRequest {
    /** IDs of orders to be marked as fulfilled. */
    ids?: string[];
    /** Whether to return the full updated order entities in the response. */
    returnFullEntity?: boolean;
}
interface BulkMarkAsFulfilledResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkMarkAsFulfilledByFilterRequest {
    /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/ecommerce/orders/filter-and-sort). */
    filter?: Record<string, any> | null;
}
interface BulkMarkAsFulfilledByFilterResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface MarkAsUnfulfilledRequest {
    /** Order ID. */
    _id?: string;
}
interface MarkAsUnfulfilledResponse {
    /** Updated order. */
    order?: Order$1;
}
interface BulkMarkAsUnfulfilledRequest {
    /** IDs of orders to be marked as not fulfilled. */
    ids?: string[];
    /** Whether to return the full updated order entities in the response. */
    returnFullEntity?: boolean;
}
interface BulkMarkAsUnfulfilledResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkMarkAsUnfulfilledByFilterRequest {
    /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/ecommerce/orders/filter-and-sort). */
    filter?: Record<string, any> | null;
}
interface BulkMarkAsUnfulfilledByFilterResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface V1MarkOrderAsPaidRequest {
    /** Order ID. */
    _id?: string;
}
interface V1MarkOrderAsPaidResponse {
    /** Updated order. */
    order?: Order$1;
}
interface V1BulkMarkOrdersAsPaidRequest {
    /** IDs of orders to mark as paid. */
    ids?: string[];
}
interface V1BulkMarkOrdersAsPaidResponse {
    /**
     * Items updated by the bulk action.
     * The Order entity within the results optimistically changes its payment status to paid, however this process is async.
     */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface V1CreatePaymentGatewayOrderRequest {
    /** eCom Order ID */
    ecomOrderId?: string;
}
interface V1CreatePaymentGatewayOrderResponse {
    /** ID of the order created in the payment gateway */
    paymentGatewayOrderId?: string;
}
interface GetShipmentsRequest {
    _id?: string;
}
interface GetShipmentsResponse {
    shipmentIds?: string[];
}
interface AggregateOrdersRequest {
    /** Filter applied to original data */
    filter?: Record<string, any> | null;
    /** This is an object defining aggregation itself */
    aggregation?: Record<string, any> | null;
    /**
     * Optional custom separator string that can be used to override default separator value '|'
     * for hierarchical responses of multifaceted aggregation requests like:
     * '{"aggregation": {"example_request_key": {"$count" : ["deliveryMethod", "shippingRegion"]}}}'
     * with example response for default '|' separator like:
     * '{"aggregates" :{"example_request_key": {"(Mail|Region 1)": 5, "(Pickup|Region 2)": 10}}}'
     */
    hierarchySeparatorOverride?: string | null;
}
interface AggregateOrdersResponse {
    aggregates?: Record<string, any> | null;
}
interface DecrementItemsQuantityRequest {
    /** Order ID */
    _id?: string;
    /** Which items to decrement, and how much to decrement from each one */
    decrementData?: DecrementData[];
}
interface DecrementData {
    /** ID of the line item being decremented. */
    lineItemId?: string;
    /** Line item quantity being decremented. */
    decrementBy?: number;
    /** Whether to restock the line item (triggers inventory update). */
    restock?: boolean;
}
interface DecrementItemsQuantityResponse {
    /** Updated order data */
    order?: Order$1;
}
/** Triggered when order items are marked as restocked */
interface OrderItemsRestocked {
    /** The order which items were restocked */
    order?: Order$1;
    /** Restocked items and quantities */
    restockItems?: V1RestockItem[];
}
interface V1RestockItem {
    /** ID of the line item being restocked. */
    lineItemId?: string;
    /** Line item quantity being restocked. */
    quantity?: number;
}
interface BulkUpdateOrderTagsRequest {
    /** IDs of orders to update tags for. */
    orderIds: string[];
    /** Tags to be added to orders */
    assignTags?: Tags;
    /** Tags to be removed from orders */
    unassignTags?: Tags;
}
interface BulkUpdateOrderTagsResponse {
    results?: BulkUpdateOrderTagsResult[];
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkUpdateOrderTagsResult {
    itemMetadata?: ItemMetadata$1;
}
/** Triggered when the the order status changes to approved */
interface OrderApproved {
    /** The order that was updated */
    order?: Order$1;
}
interface Task {
    key?: TaskKey;
    executeAt?: Date | null;
    payload?: string | null;
}
interface TaskKey {
    appId?: string;
    instanceId?: string;
    subjectId?: string | null;
}
interface TaskAction extends TaskActionActionOneOf {
    complete?: Complete;
    cancel?: Cancel;
    reschedule?: Reschedule;
}
/** @oneof */
interface TaskActionActionOneOf {
    complete?: Complete;
    cancel?: Cancel;
    reschedule?: Reschedule;
}
interface Complete {
}
interface Cancel {
}
interface Reschedule {
    executeAt?: Date | null;
    payload?: string | null;
}
interface InvoiceSentEvent {
    _id?: IdAndVersion;
    /** @readonly */
    data?: InvoiceFields;
    /** @readonly */
    status?: InvoiceStatus;
}
interface IdAndVersion {
    _id?: string | null;
    version?: number | null;
}
interface InvoiceFields {
    /** The invoice number allocated the invoice by the server. The number is limited to at most 11 digits. */
    number?: string | null;
    /** The invoice 3-letter currency code in [ISO-4217 alphabetic](https://www.iso.org/iso-4217-currency-codes.html) format. */
    currencyCode?: string | null;
    /** The invoice customer. The customer must be a contact of the site, with an email. */
    customer?: Customer;
    /**
     * Invoice dates: issue date and due date are mandatory and provided when the invoice is created.
     * Last seen date is the optional date when the invoice was last seen be UoU.
     */
    dates?: InvoiceDates;
    /**
     * Line items containing the details of the products or services relevant to the invoice, with their name, prices,
     * and quantity. There must be at least one line item on the invoice.
     */
    lineItems?: LineItems;
    /**
     * Locale of the invoice, containing the language.
     * This field is not mandatory but is used for display purposes, to determine the appearance of numbers and dates
     * on the invoice.
     */
    locale?: Locale;
    /**
     * The totals on the invoice.
     * The totals.subtotal, totals.total and totals.taxed_amount are calculated by the server based on the line items.
     * Alternatively, these fields can be provided in the invoice creation request, in this case, these values are fixed.
     * The totals contain fees and a discount, that apply to the invoice.
     */
    totals?: TotalPrice;
    /** An optional discount on the invoice. */
    discount?: Discount$1;
    /** The taxes of the invoice. */
    taxes?: CalculatedTaxes;
    /** The payments on the invoice. The invoice has status paid if its payments cover the invoice total. */
    payments?: Payments;
    /** Invoice metadata */
    metaData?: MetaData;
    /**
     * Not used
     * @deprecated
     */
    creationAdditional_BIInformation?: string | null;
    /**
     * The balance and amount paid on the invoice.
     * This read-only field is calculated based on the invoice totals and payments.
     * @readonly
     */
    dynamicTotals?: InvoiceDynamicPriceTotals;
    /** The invoice title */
    title?: string | null;
    /** Invoice custom fields */
    customFields?: CustomFieldValue[];
    /**
     * Not used
     * @deprecated
     */
    designTemplateId?: string | null;
    /**
     * Not used
     * @deprecated
     */
    createOrder?: boolean | null;
    /** The optional deposit of the invoice */
    deposit?: Deposit;
    /** Associated checkout for this invoice */
    ecomCheckoutId?: string | null;
}
interface Customer {
    contactId?: string | null;
    name?: string | null;
    email?: Email;
    address?: QuotesAddress;
    phone?: Phone;
    company?: Company;
    firstName?: string | null;
    lastName?: string | null;
    billingAddress?: CommonAddress;
    shippingAddress?: CommonAddress;
}
interface Email {
    address?: string;
}
interface QuotesAddress {
    street?: string | null;
    city?: string | null;
    zip?: string | null;
    state?: string | null;
    country?: string | null;
    /** @readonly */
    description?: AddressDescription;
}
interface AddressDescription {
    content?: string;
    placement?: Placement;
}
declare enum Placement {
    Unknown = "Unknown",
    Replace = "Replace",
    Before = "Before",
    After = "After"
}
interface Phone {
    number?: string;
}
interface Company {
    name?: string;
    _id?: string | null;
}
/** Physical address */
interface CommonAddress extends CommonAddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress$4;
    /** Main address line, usually street and number as free text. */
    addressLine1?: string | null;
    /** Country code. */
    country?: string | null;
    /** Subdivision shorthand. Usually, a short code (2 or 3 letters) that represents a state, region, prefecture, or province. e.g. NY */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    /** Free text providing more detailed address info. Usually contains Apt, Suite, and Floor. */
    addressLine2?: string | null;
}
/** @oneof */
interface CommonAddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress$4;
    /** Main address line, usually street and number as free text. */
    addressLine?: string | null;
}
interface Subdivision$1 {
    /** Short subdivision code. */
    code?: string;
    /** Subdivision full name. */
    name?: string;
}
declare enum SubdivisionType$1 {
    UNKNOWN_SUBDIVISION_TYPE = "UNKNOWN_SUBDIVISION_TYPE",
    /** State */
    ADMINISTRATIVE_AREA_LEVEL_1 = "ADMINISTRATIVE_AREA_LEVEL_1",
    /** County */
    ADMINISTRATIVE_AREA_LEVEL_2 = "ADMINISTRATIVE_AREA_LEVEL_2",
    /** City/town */
    ADMINISTRATIVE_AREA_LEVEL_3 = "ADMINISTRATIVE_AREA_LEVEL_3",
    /** Neighborhood/quarter */
    ADMINISTRATIVE_AREA_LEVEL_4 = "ADMINISTRATIVE_AREA_LEVEL_4",
    /** Street/block */
    ADMINISTRATIVE_AREA_LEVEL_5 = "ADMINISTRATIVE_AREA_LEVEL_5",
    /** ADMINISTRATIVE_AREA_LEVEL_0. Indicates the national political entity, and is typically the highest order type returned by the Geocoder. */
    COUNTRY = "COUNTRY"
}
/** Subdivision Concordance values */
interface StandardDetails {
    /** subdivision iso-3166-2 code according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). e.g. US-NY, GB-SCT, NO-30 */
    iso31662?: string | null;
}
interface InvoiceDates {
    /** use UTC midnight date to set the issue date according to the site time zone */
    issueDate?: Date | null;
    /** use UTC midnight date to set the due date according to the site time zone */
    dueDate?: Date | null;
    /** <a href="http://joda-time.sourceforge.net/timezones.html">Valid time zones</a> */
    timeZoneCode?: string | null;
    /**
     * ignored in request use in response to get the site time zone
     * @readonly
     */
    lastSeenDate?: Date | null;
}
interface LineItems {
    lineItems?: LineItem$2[];
}
interface LineItem$2 {
    _id?: string;
    name?: string;
    description?: string | null;
    price?: BigDecimalWrapper;
    taxedTotal?: BigDecimalWrapper;
    quantity?: BigDecimalWrapper;
    taxes?: LineItemTax[];
    /** The source of the line item */
    source?: Source$1;
    /** The line-item level metadata. */
    metadata?: LineItemMetaData;
}
interface BigDecimalWrapper {
    serializedValue?: number;
}
interface LineItemTax {
    name?: string;
    rate?: BigDecimalWrapper;
    code?: string | null;
}
interface Source$1 {
    /**
     * Source app or service ID.
     * @readonly
     */
    sourceId?: string;
    /**
     * App or service type.
     * @readonly
     */
    sourceType?: SourceType;
}
declare enum SourceType {
    UNKNOWN_SOURCE_TYPE = "UNKNOWN_SOURCE_TYPE",
    WIX_APP = "WIX_APP",
    EXTERNAL = "EXTERNAL",
    ADMIN = "ADMIN",
    OTHER = "OTHER"
}
interface LineItemMetaData {
    metadata?: Record<string, string>;
}
interface Locale {
    /** ISO 639 alpha-2 or alpha-3 language code, or a language subtag */
    language?: string;
    /** An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code. */
    country?: string | null;
    invariant?: string | null;
}
interface TotalPrice {
    /** the subtotal of the line items without the tax reduction */
    subtotal?: BigDecimalWrapper;
    /** the total price taking into account the itemized fees and the taxes */
    total?: BigDecimalWrapper;
    fees?: ItemizedFee[];
    discountAmount?: BigDecimalWrapper;
    taxedAmount?: BigDecimalWrapper;
}
interface ItemizedFee {
    name?: string;
    price?: BigDecimalWrapper;
}
interface Discount$1 extends DiscountOneDiscountTypeOneOf {
    /** Discount as percentage value. */
    percentage?: BigDecimalWrapper;
}
/** @oneof */
interface DiscountOneDiscountTypeOneOf {
    /** Discount as percentage value. */
    percentage?: BigDecimalWrapper;
}
interface CalculatedTaxes {
    /** consider calculated or not - cannot enforce set */
    taxes?: CalculatedTax[];
}
interface CalculatedTax {
    name?: string;
    rate?: BigDecimalWrapper;
    /** the costs on which the taxes are applied */
    taxable?: BigDecimalWrapper;
    /** the taxes as a result of the */
    taxed?: BigDecimalWrapper;
    code?: string | null;
}
interface Payments {
    payments?: InvoicesPayment[];
}
interface InvoicesPayment {
    /** document */
    _id?: string;
    type?: string;
    amount?: BigDecimalWrapper;
    date?: Date | null;
    /**
     * The orderId of the order in cashier associated with the payment.
     * This field is populated for external payments that are charged by invoices via AddPayment endpoint.
     */
    orderId?: string | null;
    /**
     * The transactionId corresponding to the orderId of the payment which are returned by cashier.
     * This field is populated for external payments that are charged by invoices via AddPayment endpoint as well.
     */
    transactionId?: string | null;
}
interface MetaData {
    notes?: string | null;
    legalTerms?: string | null;
    sourceUrl?: string | null;
    sourceProperties?: Record<string, string>;
    source?: string | null;
    sourceRefId?: string | null;
    /** Optional indicator whether to allow editing of the invoice by other applications other than the source. Default is true. */
    allowEditByOthers?: boolean | null;
}
interface InvoiceDynamicPriceTotals {
    paidAmount?: BigDecimalWrapper;
    balance?: BigDecimalWrapper;
}
/**
 * A custom field value is used to add additional data to a financial document or to a financial document template.
 * The custom field value may be based on a custom field definition.
 */
interface CustomFieldValue {
    /**
     * The unique id of the custom field value
     * @readonly
     */
    _id?: string | null;
    /** The display name of the custom field value */
    displayName?: string;
    /** The optional namespace of the custom field value. This field may be used to indicate intended usage or source. */
    namespace?: string | null;
    /** The group of the custom field indicates its intended placement in the financial document */
    group?: CustomFieldGroup;
    /** The value of the custom field */
    value?: Value;
    /** The optional key of the custom field definition on which the custom field value is based */
    originCustomFieldKey?: string | null;
}
declare enum CustomFieldGroup {
    UNKNOWN_CUSTOM_FIELD_GROUP = "UNKNOWN_CUSTOM_FIELD_GROUP",
    BUSINESS_DETAILS = "BUSINESS_DETAILS",
    CUSTOMER_DETAILS = "CUSTOMER_DETAILS",
    DOCUMENT = "DOCUMENT",
    FOOTER = "FOOTER",
    OTHER = "OTHER"
}
interface Value {
    value?: string;
    valueType?: ValueType;
}
declare enum ValueType {
    UNKNOWN_VALUE_TYPE = "UNKNOWN_VALUE_TYPE",
    STRING = "STRING",
    DATE = "DATE",
    BOOLEAN = "BOOLEAN",
    NUMBER = "NUMBER"
}
interface Deposit {
    /** The flat amount of the deposit. The flat amount of the deposit must be less than the invoice total. */
    flatAmount?: string;
    /**
     * The read-only percentage value of the deposit.
     * It is computed according to the flat_amount and the invoice total and is rounded to 2 digits precision.
     * @readonly
     */
    percentage?: string;
    /** The type of the deposit. The default is FLAT. */
    type?: DepositType;
}
declare enum DepositType {
    UNKNOWN = "UNKNOWN",
    FLAT = "FLAT",
    PERCENTAGE = "PERCENTAGE"
}
/**
 * InvoiceStatus allowed transitions based on current status:
 * Draft -> Deleted, Paid, Partially Paid, Sent
 * Sent -> Draft, Deleted, Void, Paid, Partially Paid, Processing, (Overdue)
 * Processing -> PartiallyPaid, Paid, Sent
 * Paid -> Void
 * PartiallyPaid -> Void, (PartialAndOverdue)
 * Void -> Deleted
 * Deleted
 */
declare enum InvoiceStatus {
    Draft = "Draft",
    Sent = "Sent",
    Processing = "Processing",
    Paid = "Paid",
    Overdue = "Overdue",
    Void = "Void",
    Deleted = "Deleted",
    PartiallyPaid = "PartiallyPaid",
    PartialAndOverdue = "PartialAndOverdue"
}
interface TriggerSideEffectsFromLegacyData {
    storeId?: string;
    orderId?: string;
    ordersExperiments?: OrdersExperiments;
}
interface PreparePaymentCollectionResponseNonNullableFields {
    paymentGatewayOrderId: string;
}
interface PriceNonNullableFields$3 {
    amount: string;
    formattedAmount: string;
}
interface GetPaymentCollectabilityStatusResponseNonNullableFields {
    status: PaymentCollectabilityStatus;
    amount?: PriceNonNullableFields$3;
    authorizationSupported: boolean;
}
interface AuthorizationActionFailureDetailsNonNullableFields$1 {
    failureCode: string;
}
interface AuthorizationCaptureNonNullableFields$1 {
    status: AuthorizationCaptureStatus$1;
    amount?: PriceNonNullableFields$3;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields$1;
}
interface AuthorizationVoidNonNullableFields$1 {
    status: AuthorizationVoidStatus$1;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields$1;
    reason: Reason$1;
}
interface V1ScheduledActionNonNullableFields {
    actionType: ActionType$1;
}
interface AuthorizationDetailsNonNullableFields$1 {
    delayedCapture: boolean;
    captures: AuthorizationCaptureNonNullableFields$1[];
    void?: AuthorizationVoidNonNullableFields$1;
    scheduledAction?: V1ScheduledActionNonNullableFields;
}
interface RegularPaymentDetailsNonNullableFields$1 {
    offlinePayment: boolean;
    status: TransactionStatus$1;
    savedPaymentMethod: boolean;
    authorizationDetails?: AuthorizationDetailsNonNullableFields$1;
}
interface GiftCardPaymentDetailsNonNullableFields$1 {
    giftCardPaymentId: string;
    giftCardId: string;
    appId: string;
    voided: boolean;
}
interface MembershipNameNonNullableFields$2 {
    original: string;
}
interface MembershipPaymentDetailsNonNullableFields$1 {
    membershipId: string;
    lineItemId: string;
    status: MembershipPaymentStatus$1;
    name?: MembershipNameNonNullableFields$2;
    voided: boolean;
    providerAppId: string;
}
interface PaymentNonNullableFields$1 {
    regularPaymentDetails?: RegularPaymentDetailsNonNullableFields$1;
    giftcardPaymentDetails?: GiftCardPaymentDetailsNonNullableFields$1;
    membershipPaymentDetails?: MembershipPaymentDetailsNonNullableFields$1;
    amount?: PriceNonNullableFields$3;
    refundDisabled: boolean;
}
interface RefundTransactionNonNullableFields$1 {
    paymentId: string;
    amount?: PriceNonNullableFields$3;
    refundStatus: RefundStatus$1;
    externalRefund: boolean;
}
interface RefundItemNonNullableFields$1 {
    lineItemId: string;
    quantity: number;
}
interface LineItemRefundNonNullableFields$1 {
    lineItemId: string;
    quantity: number;
}
interface AdditionalFeeRefundNonNullableFields$1 {
    additionalFeeId: string;
    amount?: PriceNonNullableFields$3;
}
interface ShippingRefundNonNullableFields$1 {
    amount?: PriceNonNullableFields$3;
}
interface RefundDetailsNonNullableFields$1 {
    items: RefundItemNonNullableFields$1[];
    shippingIncluded: boolean;
    lineItems: LineItemRefundNonNullableFields$1[];
    additionalFees: AdditionalFeeRefundNonNullableFields$1[];
    shipping?: ShippingRefundNonNullableFields$1;
}
interface AggregatedRefundSummaryNonNullableFields$1 {
    requestedRefund?: PriceNonNullableFields$3;
    pendingRefund?: PriceNonNullableFields$3;
    refunded?: PriceNonNullableFields$3;
    failedRefundAmount?: PriceNonNullableFields$3;
    pending: boolean;
}
interface RefundNonNullableFields$1 {
    _id: string;
    transactions: RefundTransactionNonNullableFields$1[];
    details?: RefundDetailsNonNullableFields$1;
    summary?: AggregatedRefundSummaryNonNullableFields$1;
}
interface OrderTransactionsNonNullableFields$1 {
    orderId: string;
    payments: PaymentNonNullableFields$1[];
    refunds: RefundNonNullableFields$1[];
}
interface VoidAuthorizedPaymentsResponseNonNullableFields {
    orderTransactions?: OrderTransactionsNonNullableFields$1;
}
interface CaptureAuthorizedPaymentsResponseNonNullableFields {
    orderTransactions?: OrderTransactionsNonNullableFields$1;
}
interface ProductNameNonNullableFields {
    original: string;
}
interface CatalogReferenceNonNullableFields {
    catalogItemId: string;
    appId: string;
}
interface PlainTextValueNonNullableFields {
    original: string;
}
interface ColorNonNullableFields {
    original: string;
}
interface DescriptionLineNameNonNullableFields {
    original: string;
}
interface DescriptionLineNonNullableFields {
    plainText?: PlainTextValueNonNullableFields;
    colorInfo?: ColorNonNullableFields;
    plainTextValue?: PlainTextValueNonNullableFields;
    color: string;
    name?: DescriptionLineNameNonNullableFields;
    lineType: DescriptionLineType;
}
interface PhysicalPropertiesNonNullableFields {
    shippable: boolean;
}
interface ItemTypeNonNullableFields {
    preset: ItemTypeItemType$1;
    custom: string;
}
interface ItemTaxFullDetailsNonNullableFields$1 {
    taxableAmount?: PriceNonNullableFields$3;
    taxRate: string;
    totalTax?: PriceNonNullableFields$3;
}
interface LineItemTaxBreakdownNonNullableFields {
    taxAmount?: PriceNonNullableFields$3;
    jurisdictionType: JurisdictionType$1;
    nonTaxableAmount?: PriceNonNullableFields$3;
    taxableAmount?: PriceNonNullableFields$3;
}
interface LineItemTaxInfoNonNullableFields {
    taxAmount?: PriceNonNullableFields$3;
    taxableAmount?: PriceNonNullableFields$3;
    taxIncludedInPrice: boolean;
    taxBreakdown: LineItemTaxBreakdownNonNullableFields[];
}
interface DigitalFileNonNullableFields {
    fileId: string;
}
interface SubscriptionSettingsNonNullableFields {
    frequency: SubscriptionFrequency$2;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
}
interface SubscriptionInfoNonNullableFields {
    cycleNumber: number;
    subscriptionOptionTitle: string;
    subscriptionSettings?: SubscriptionSettingsNonNullableFields;
}
interface PriceDescriptionNonNullableFields {
    original: string;
}
interface LocationAndQuantityNonNullableFields {
    _id: string;
    quantity: number;
}
interface TaxableAddressNonNullableFields$1 {
    addressType: TaxableAddressType$1;
}
interface OrderLineItemNonNullableFields {
    _id: string;
    productName?: ProductNameNonNullableFields;
    catalogReference?: CatalogReferenceNonNullableFields;
    quantity: number;
    totalDiscount?: PriceNonNullableFields$3;
    descriptionLines: DescriptionLineNonNullableFields[];
    image: string;
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    itemType?: ItemTypeNonNullableFields;
    price?: PriceNonNullableFields$3;
    priceBeforeDiscounts?: PriceNonNullableFields$3;
    totalPriceBeforeTax?: PriceNonNullableFields$3;
    totalPriceAfterTax?: PriceNonNullableFields$3;
    paymentOption: PaymentOptionType$1;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$1;
    taxInfo?: LineItemTaxInfoNonNullableFields;
    digitalFile?: DigitalFileNonNullableFields;
    subscriptionInfo?: SubscriptionInfoNonNullableFields;
    priceDescription?: PriceDescriptionNonNullableFields;
    depositAmount?: PriceNonNullableFields$3;
    locations: LocationAndQuantityNonNullableFields[];
    lineItemPrice?: PriceNonNullableFields$3;
    taxableAddress?: TaxableAddressNonNullableFields$1;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
}
interface BuyerInfoNonNullableFields {
    visitorId: string;
    memberId: string;
}
interface PriceSummaryNonNullableFields$1 {
    subtotal?: PriceNonNullableFields$3;
    shipping?: PriceNonNullableFields$3;
    tax?: PriceNonNullableFields$3;
    discount?: PriceNonNullableFields$3;
    totalPrice?: PriceNonNullableFields$3;
    total?: PriceNonNullableFields$3;
    totalWithGiftCard?: PriceNonNullableFields$3;
    totalWithoutGiftCard?: PriceNonNullableFields$3;
    totalAdditionalFees?: PriceNonNullableFields$3;
}
interface StreetAddressNonNullableFields$4 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$4 {
    streetAddress?: StreetAddressNonNullableFields$4;
}
interface VatIdNonNullableFields {
    _id: string;
    type: VatType$2;
}
interface FullAddressContactDetailsNonNullableFields {
    vatId?: VatIdNonNullableFields;
}
interface AddressWithContactNonNullableFields {
    address?: AddressNonNullableFields$4;
    contactDetails?: FullAddressContactDetailsNonNullableFields;
}
interface PickupAddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields$4;
}
interface PickupDetailsNonNullableFields$2 {
    address?: PickupAddressNonNullableFields;
    pickupMethod: PickupMethod$2;
}
interface DeliveryLogisticsNonNullableFields$2 {
    shippingDestination?: AddressWithContactNonNullableFields;
    pickupDetails?: PickupDetailsNonNullableFields$2;
}
interface ShippingPriceNonNullableFields$1 {
    price?: PriceNonNullableFields$3;
    totalPriceBeforeTax?: PriceNonNullableFields$3;
    totalPriceAfterTax?: PriceNonNullableFields$3;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$1;
    discount?: PriceNonNullableFields$3;
}
interface V1ShippingInformationNonNullableFields {
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$2;
    cost?: ShippingPriceNonNullableFields$1;
}
interface TaxSummaryNonNullableFields$1 {
    totalTax?: PriceNonNullableFields$3;
}
interface OrderTaxBreakdownNonNullableFields {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionType: JurisdictionType$1;
    rate: string;
    aggregatedTaxAmount?: PriceNonNullableFields$3;
    aggregatedTaxableAmount?: PriceNonNullableFields$3;
}
interface OrderTaxInfoNonNullableFields {
    totalTax?: PriceNonNullableFields$3;
    taxBreakdown: OrderTaxBreakdownNonNullableFields[];
}
interface CouponNonNullableFields$1 {
    _id: string;
    code: string;
    name: string;
    amount?: PriceNonNullableFields$3;
}
interface MerchantDiscountNonNullableFields$1 {
    discountReason: DiscountReason;
    amount?: PriceNonNullableFields$3;
}
interface DiscountRuleNameNonNullableFields$1 {
    original: string;
}
interface DiscountRuleNonNullableFields$1 {
    _id: string;
    name?: DiscountRuleNameNonNullableFields$1;
    amount?: PriceNonNullableFields$3;
}
interface LineItemDiscountNonNullableFields$1 {
    _id: string;
    totalDiscount?: PriceNonNullableFields$3;
}
interface AppliedDiscountNonNullableFields$1 {
    coupon?: CouponNonNullableFields$1;
    merchantDiscount?: MerchantDiscountNonNullableFields$1;
    discountRule?: DiscountRuleNonNullableFields$1;
    discountType: DiscountType$1;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$1[];
}
interface CustomActivityNonNullableFields {
    appId: string;
    type: string;
}
interface MerchantCommentNonNullableFields {
    message: string;
}
interface OrderRefundedNonNullableFields {
    manual: boolean;
    amount?: PriceNonNullableFields$3;
    reason: string;
}
interface OrderCreatedFromExchangeNonNullableFields {
    originalOrderId: string;
}
interface LineItemExchangeDataNonNullableFields {
    lineItemId: string;
    quantity: number;
}
interface NewExchangeOrderCreatedNonNullableFields {
    exchangeOrderId: string;
    lineItems: LineItemExchangeDataNonNullableFields[];
}
interface LineItemQuantityChangeNonNullableFields {
    originalQuantity: number;
    newQuantity: number;
    diff: number;
    deltaType: LineItemQuantityChangeType;
}
interface LineItemPriceChangeNonNullableFields {
    originalPrice?: PriceNonNullableFields$3;
    newPrice?: PriceNonNullableFields$3;
}
interface LineItemChangesNonNullableFields {
    _id: string;
    name?: ProductNameNonNullableFields;
    quantity?: LineItemQuantityChangeNonNullableFields;
    price?: LineItemPriceChangeNonNullableFields;
}
interface ManagedLineItemNonNullableFields {
    _id: string;
    name?: ProductNameNonNullableFields;
    quantity: number;
}
interface TranslatedValueNonNullableFields {
    original: string;
}
interface LineItemAmountNonNullableFields {
    _id: string;
    name?: ProductNameNonNullableFields;
    amount?: PriceNonNullableFields$3;
}
interface ManagedDiscountNonNullableFields {
    _id: string;
    name?: TranslatedValueNonNullableFields;
    affectedLineItems: LineItemAmountNonNullableFields[];
    totalAmount?: PriceNonNullableFields$3;
}
interface ManagedAdditionalFeeNonNullableFields {
    _id: string;
    name?: TranslatedValueNonNullableFields;
    affectedLineItems: LineItemAmountNonNullableFields[];
    totalAmount?: PriceNonNullableFields$3;
}
interface TotalPriceChangeNonNullableFields {
    originalTotal?: PriceNonNullableFields$3;
    newTotal?: PriceNonNullableFields$3;
}
interface ShippingInformationNonNullableFields$1 {
    total?: PriceNonNullableFields$3;
    shippingTitle: string;
}
interface ShippingInformationChangeNonNullableFields {
    originalShippingInfo?: ShippingInformationNonNullableFields$1;
    newShippingInfo?: ShippingInformationNonNullableFields$1;
}
interface OrderChangeNonNullableFields {
    lineItemChanged?: LineItemChangesNonNullableFields;
    lineItemAdded?: ManagedLineItemNonNullableFields;
    lineItemRemoved?: ManagedLineItemNonNullableFields;
    discountAdded?: ManagedDiscountNonNullableFields;
    discountRemoved?: ManagedDiscountNonNullableFields;
    additionalFeeAdded?: ManagedAdditionalFeeNonNullableFields;
    additionalFeeRemoved?: ManagedAdditionalFeeNonNullableFields;
    totalPriceChanged?: TotalPriceChangeNonNullableFields;
    shippingInformationChanged?: ShippingInformationChangeNonNullableFields;
}
interface DraftOrderChangesAppliedNonNullableFields {
    draftOrderId: string;
    changes: OrderChangeNonNullableFields[];
}
interface SavedPaymentMethodNonNullableFields {
    name: string;
}
interface AuthorizedPaymentCreatedNonNullableFields {
    paymentId: string;
    amount?: PriceNonNullableFields$3;
}
interface AuthorizedPaymentCapturedNonNullableFields {
    paymentId: string;
    amount?: PriceNonNullableFields$3;
}
interface AuthorizedPaymentVoidedNonNullableFields {
    paymentId: string;
    amount?: PriceNonNullableFields$3;
}
interface RegularPaymentRefundNonNullableFields {
    amount?: PriceNonNullableFields$3;
}
interface GiftCardPaymentRefundNonNullableFields {
    amount?: PriceNonNullableFields$3;
}
interface RefundedPaymentNonNullableFields {
    regular?: RegularPaymentRefundNonNullableFields;
    giftCard?: GiftCardPaymentRefundNonNullableFields;
    paymentId: string;
    externalRefund: boolean;
}
interface RefundInitiatedNonNullableFields {
    refundId: string;
    amount?: PriceNonNullableFields$3;
    payments: RefundedPaymentNonNullableFields[];
}
interface PaymentRefundedNonNullableFields {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields;
}
interface PaymentRefundFailedNonNullableFields {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields;
}
interface RefundedAsStoreCreditNonNullableFields {
    amount?: PriceNonNullableFields$3;
}
interface RegularPaymentNonNullableFields {
    amount?: PriceNonNullableFields$3;
}
interface PaymentPendingNonNullableFields {
    regular?: RegularPaymentNonNullableFields;
    paymentId: string;
}
interface PaymentCanceledNonNullableFields {
    regular?: RegularPaymentNonNullableFields;
    paymentId: string;
}
interface PaymentDeclinedNonNullableFields {
    regular?: RegularPaymentNonNullableFields;
    paymentId: string;
}
interface ActivityNonNullableFields {
    customActivity?: CustomActivityNonNullableFields;
    merchantComment?: MerchantCommentNonNullableFields;
    orderRefunded?: OrderRefundedNonNullableFields;
    orderCreatedFromExchange?: OrderCreatedFromExchangeNonNullableFields;
    newExchangeOrderCreated?: NewExchangeOrderCreatedNonNullableFields;
    draftOrderChangesApplied?: DraftOrderChangesAppliedNonNullableFields;
    savedPaymentMethod?: SavedPaymentMethodNonNullableFields;
    authorizedPaymentCreated?: AuthorizedPaymentCreatedNonNullableFields;
    authorizedPaymentCaptured?: AuthorizedPaymentCapturedNonNullableFields;
    authorizedPaymentVoided?: AuthorizedPaymentVoidedNonNullableFields;
    refundInitiated?: RefundInitiatedNonNullableFields;
    paymentRefunded?: PaymentRefundedNonNullableFields;
    paymentRefundFailed?: PaymentRefundFailedNonNullableFields;
    refundedAsStoreCredit?: RefundedAsStoreCreditNonNullableFields;
    paymentPending?: PaymentPendingNonNullableFields;
    paymentCanceled?: PaymentCanceledNonNullableFields;
    paymentDeclined?: PaymentDeclinedNonNullableFields;
    type: ActivityType$1;
}
interface CreatedByNonNullableFields {
    userId: string;
    memberId: string;
    visitorId: string;
    appId: string;
}
interface ChannelInfoNonNullableFields {
    type: ChannelType$1;
}
interface CustomFieldNonNullableFields {
    title: string;
}
interface BalanceNonNullableFields {
    amount: string;
    formattedAmount: string;
}
interface BalanceSummaryNonNullableFields {
    balance?: BalanceNonNullableFields;
    paid?: PriceNonNullableFields$3;
    refunded?: PriceNonNullableFields$3;
    authorized?: PriceNonNullableFields$3;
    pendingRefund?: PriceNonNullableFields$3;
    pending?: PriceNonNullableFields$3;
}
interface AdditionalFeeNonNullableFields {
    name: string;
    price?: PriceNonNullableFields$3;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$1;
    priceBeforeTax?: PriceNonNullableFields$3;
    priceAfterTax?: PriceNonNullableFields$3;
    _id: string;
    lineItemIds: string[];
}
interface TagListNonNullableFields {
    tagIds: string[];
}
interface TagsNonNullableFields {
    privateTags?: TagListNonNullableFields;
    tags?: TagListNonNullableFields;
}
interface OrderNonNullableFields {
    number: string;
    lineItems: OrderLineItemNonNullableFields[];
    buyerInfo?: BuyerInfoNonNullableFields;
    paymentStatus: PaymentStatus$1;
    fulfillmentStatus: FulfillmentStatus$1;
    weightUnit: WeightUnit$3;
    taxIncludedInPrices: boolean;
    priceSummary?: PriceSummaryNonNullableFields$1;
    billingInfo?: AddressWithContactNonNullableFields;
    shippingInfo?: V1ShippingInformationNonNullableFields;
    status: OrderStatus;
    taxSummary?: TaxSummaryNonNullableFields$1;
    taxInfo?: OrderTaxInfoNonNullableFields;
    appliedDiscounts: AppliedDiscountNonNullableFields$1[];
    activities: ActivityNonNullableFields[];
    attributionSource: AttributionSource;
    createdBy?: CreatedByNonNullableFields;
    channelInfo?: ChannelInfoNonNullableFields;
    customFields: CustomFieldNonNullableFields[];
    isInternalOrderCreate: boolean;
    payNow?: PriceSummaryNonNullableFields$1;
    balanceSummary?: BalanceSummaryNonNullableFields;
    additionalFees: AdditionalFeeNonNullableFields[];
    recipientInfo?: AddressWithContactNonNullableFields;
    tags?: TagsNonNullableFields;
}
interface GetOrderResponseNonNullableFields {
    order?: OrderNonNullableFields;
}
interface SearchOrdersResponseNonNullableFields {
    orders: OrderNonNullableFields[];
}
interface CreateOrderResponseNonNullableFields {
    order?: OrderNonNullableFields;
}
interface UpdateOrderResponseNonNullableFields {
    order?: OrderNonNullableFields;
}
interface ApplicationErrorNonNullableFields$4 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$1 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$4;
}
interface BulkOrderResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields$1;
    item?: OrderNonNullableFields;
}
interface BulkActionMetadataNonNullableFields$1 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkUpdateOrdersResponseNonNullableFields {
    results: BulkOrderResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface CancelOrderResponseNonNullableFields {
    order?: OrderNonNullableFields;
}
interface BulkUpdateOrderTagsResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields$1;
}
interface BulkUpdateOrderTagsResponseNonNullableFields {
    results: BulkUpdateOrderTagsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BaseEventMetadata$3 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$9;
}
interface EventMetadata$3 extends BaseEventMetadata$3 {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface OrderPaymentStatusUpdatedEnvelope {
    data: PaymentStatusUpdated;
    metadata: EventMetadata$3;
}
interface OrderUpdatedEnvelope {
    entity: Order$1;
    metadata: EventMetadata$3;
}
interface OrderCreatedEnvelope {
    entity: Order$1;
    metadata: EventMetadata$3;
}
interface OrderCanceledEnvelope {
    data: OrderCanceledEventOrderCanceled;
    metadata: EventMetadata$3;
}
interface OrderApprovedEnvelope {
    data: OrderApproved;
    metadata: EventMetadata$3;
}
interface PreparePaymentCollectionOptions {
    /**
     * Optional parameter. When present, payment collection will be performed using given payment gateway order.
     * Existing payment gateway order will be updated with a new amount.
     * When parameter is absent, new payment gateway order will be created and used for payment collection.
     */
    paymentGatewayOrderId?: string | null;
    /**
     * Whether to delay capture of the payment.
     * Default: false
     * @deprecated Whether to delay capture of the payment.
     * Default: false
     * @replacedBy delayed_capture_settings.scheduled_action
     * @targetRemovalDate 2024-09-30
     */
    delayedCapture?: boolean;
    /** Delayed capture payment settings */
    delayedCaptureSettings?: DelayedCaptureSettings;
}
interface SearchOrdersOptions {
    /** Search options. */
    search?: CursorSearch;
}
interface UpdateOrder {
    /**
     * Order ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Order number displayed in the site owner's dashboard (auto-generated).
     * @readonly
     */
    number?: string;
    /**
     * Date and time the order was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Order line items.
     * @readonly
     */
    lineItems?: OrderLineItem[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo$1;
    /**
     * Order payment status.
     * + `NOT_PAID` - This can be an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.
     * + This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.
     * + `PAID` - All payments associated with this order are paid. For online payments: [`payment.regularPaymentDetails.status: APPROVED`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object). For gift cards: [`payment.giftCardPaymentDetails.voided: false`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object).
     * + `PARTIALLY_REFUNDED` - Order was refunded, but refund amount is less than order total price.
     * + `FULLY_REFUNDED` - Order fully refunded. Refund amount equals total price.
     * + `PENDING` - Payments received but not yet confirmed by the payment provider.
     * + `PARTIALLY_PAID` -  At least one payment was received and approved, covering less than total price amount.
     */
    paymentStatus?: PaymentStatus$1;
    /**
     * Order fulfillment status.
     * @readonly
     */
    fulfillmentStatus?: FulfillmentStatus$1;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$3;
    /** Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format. */
    currency?: string | null;
    /** Whether tax is included in line item prices. */
    taxIncludedInPrices?: boolean;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary$1;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: V1ShippingInformation;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /**
     * Order status.
     * + `INITIALIZED`: Order created, but not yet approved or canceled.
     * + `APPROVED`: Order approved. This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order). Offline orders (cash payment) are automatically approved.
     * + `CANCELED`: Order canceled by the user.
     */
    status?: OrderStatus;
    /** Whether order is archived. */
    archived?: boolean | null;
    /**
     * Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @deprecated Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary$1;
    /** Tax information. */
    taxInfo?: OrderTaxInfo;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$1[];
    /**
     * Order activities.
     * @readonly
     */
    activities?: Activity$1[];
    /** Order attribution source. */
    attributionSource?: AttributionSource;
    /**
     * ID of the order's initiator.
     * @readonly
     */
    createdBy?: CreatedBy;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo$1;
    /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */
    seenByAHuman?: boolean | null;
    /** Checkout ID. */
    checkoutId?: string | null;
    /** Custom fields. */
    customFields?: CustomField$1[];
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: BalanceSummary;
    /** Additional fees applied to the order. */
    additionalFees?: AdditionalFee$1[];
    /**
     * Custom field data for the order object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$4;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact;
    /**
     * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * Used for migration from external systems.
     */
    purchasedDate?: Date | null;
}
interface BulkUpdateOrdersOptions {
    /**
     * Whether to return the full order entities.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface CancelOrderOptions {
    /** Whether to send an order canceled email to the buyer. */
    sendOrderCanceledEmail?: boolean;
    /** Custom note to be added to the email (optional). */
    customMessage?: string | null;
    /** Whether to restock all items in the order. This will only apply to products in the Wix Stores inventory. */
    restockAllItems?: boolean;
}
interface BulkUpdateOrderTagsOptions {
    /** Tags to be added to orders */
    assignTags?: Tags;
    /** Tags to be removed from orders */
    unassignTags?: Tags;
}

declare function preparePaymentCollection$1(httpClient: HttpClient): PreparePaymentCollectionSignature;
interface PreparePaymentCollectionSignature {
    /**
     * Prepares payment collection for given ecom order. This is the first of 2-step process of payment collection.
     * Here we ensure that payment collection is possible for given order and store and prepare payment gateway order for future charge.
     * 2nd step is an actual charge of prepared payment gateway order. This could be done either
     * via Wix-Cashier's API (https://bo.wix.com/wix-docs/rest/wix-cashier/pay/charge/charge-for-order)
     * or using Cashier Payments Widget (https://github.com/wix-private/cashier-client/tree/master/packages/cashier-payments-widget)
     * @param - Ecom order ID.
     * @param - Amount to collect
     */
    (ecomOrderId: string, amount: Price$3, options?: PreparePaymentCollectionOptions | undefined): Promise<PreparePaymentCollectionResponse & PreparePaymentCollectionResponseNonNullableFields>;
}
declare function getPaymentCollectabilityStatus$1(httpClient: HttpClient): GetPaymentCollectabilityStatusSignature;
interface GetPaymentCollectabilityStatusSignature {
    /**
     * Provides payment collectability status for given order. If payment collection is possible
     * response will contain collectable amount for given ecom order. If not - response will contain
     * reason why payment collection is not possible.
     * @param - Ecom order ID.
     */
    (ecomOrderId: string): Promise<GetPaymentCollectabilityStatusResponse & GetPaymentCollectabilityStatusResponseNonNullableFields>;
}
declare function voidAuthorizedPayments$1(httpClient: HttpClient): VoidAuthorizedPaymentsSignature;
interface VoidAuthorizedPaymentsSignature {
    /**
     * Void authorized payments
     * Transaction statuses for related payments will be updated in async way
     * @param - Wix eCommerce order ID
     * @param - Payment IDs
     */
    (ecomOrderId: string, paymentIds: string[]): Promise<VoidAuthorizedPaymentsResponse & VoidAuthorizedPaymentsResponseNonNullableFields>;
}
declare function captureAuthorizedPayments$1(httpClient: HttpClient): CaptureAuthorizedPaymentsSignature;
interface CaptureAuthorizedPaymentsSignature {
    /**
     * Capture authorized payments
     * Transaction statuses for related payments will be updated in async way
     * @param - Wix eCommerce order ID
     * @param - Capture payments information
     */
    (ecomOrderId: string, payments: PaymentCapture[]): Promise<CaptureAuthorizedPaymentsResponse & CaptureAuthorizedPaymentsResponseNonNullableFields>;
}
declare function getOrder$1(httpClient: HttpClient): GetOrderSignature;
interface GetOrderSignature {
    /**
     * Retrieves an order.
     *
     *
     * The `getOrder()` function returns a Promise that resolves when the specified order is retrieved.
     *
     * To retrieve an order's payment and refund details, including amounts, payment methods, and payment statuses, pass the order ID to [`listTransactionsForSingleOrder( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/listtransactionsforsingleorder).
     * @param - ID of the order to retrieve.
     * @returns Fulfilled - The requested order.
     */
    (_id: string): Promise<Order$1 & OrderNonNullableFields>;
}
declare function searchOrders$1(httpClient: HttpClient): SearchOrdersSignature;
interface SearchOrdersSignature {
    /**
     * Retrieves a list of orders, given the provided paging, filtering, and sorting.
     *
     *
     * Search Orders runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     * - `filter: {"status": {"$ne": "INITIALIZED"}}` - other order statuses can be queried, but orders with `status: "INITIALIZED"` are never returned
     *
     * For field support for filters and sorting, see [Orders: Supported Filters and Sorting](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/supported-filters-and-sorting).
     *
     * To learn about working with _Search_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language), and
     * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: SearchOrdersOptions | undefined): Promise<SearchOrdersResponse & SearchOrdersResponseNonNullableFields>;
}
declare function createOrder$1(httpClient: HttpClient): CreateOrderSignature;
interface CreateOrderSignature {
    /**
     * Creates an order.
     *
     *
     * The `createOrder()` function returns a Promise that resolves when the order is created.
     *
     * > **Notes:**
     * > + If an item is digital - `lineItems[i].itemType.preset: DIGITAL` - then `lineItems[i].digitalFile` must be provided.
     * > + If `lineItems[i].id` is passed, it must be either a valid GUID, or empty.
     * @param - Order info.
     * @returns Newly created order.
     */
    (order: Order$1): Promise<Order$1 & OrderNonNullableFields>;
}
declare function updateOrder$1(httpClient: HttpClient): UpdateOrderSignature;
interface UpdateOrderSignature {
    /**
     * Updates an order.
     *
     *
     * The `updateOrder()` function returns a Promise that resolves when the specified order's information is updated.
     *
     * Currently, the following fields can be updated:
     * + `order.buyerInfo.email`
     * + `order.buyerLanguage`
     * + `order.weightUnit`
     * + `order.billingInfo.address`
     * + `order.billingInfo.contactDetails`
     * + `order.archived`
     * + `order.attributionSource`
     * + `order.seenByAHuman`
     * + `order.recipientInfo.address`
     * + `order.recipientInfo.contactDetails`
     * + `order.shippingInfo.logistics.shippingDestination.address`
     * + `order.shippingInfo.logistics.shippingDestination.contactDetails`
     *
     * To update a field's value, include the new value in the `order` object in the method parameters.
     * To remove a field's value, pass `null`.
     *
     * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.
     *
     * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).
     * @param - Order ID.
     * @returns Newly created order.
     */
    (_id: string | null, order: UpdateOrder): Promise<Order$1 & OrderNonNullableFields>;
}
declare function bulkUpdateOrders$1(httpClient: HttpClient): BulkUpdateOrdersSignature;
interface BulkUpdateOrdersSignature {
    /**
     * Updates up to 100 orders.
     *
     *
     * The `bulkUpdateOrders()` function returns a Promise that resolves when the specified orders' information is updated.
     *
     * Currently, the following fields can be updated:
     * + `order.buyerInfo.email`
     * + `order.buyerLanguage`
     * + `order.weightUnit`
     * + `order.billingInfo.address`
     * + `order.billingInfo.contactDetails`
     * + `order.archived`
     * + `order.attributionSource`
     * + `order.seenByAHuman`
     * + `order.recipientInfo.address`
     * + `order.recipientInfo.contactDetails`
     * + `order.shippingInfo.logistics.shippingDestination.address`
     * + `order.shippingInfo.logistics.shippingDestination.contactDetails`
     *
     * To update a field's value, include the new value in the `orders.order` object in the method parameters.
     * To remove a field's value, pass `null`.
     *
     * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.
     *
     * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).
     * @param - Orders to update.
     */
    (orders: MaskedOrder[], options?: BulkUpdateOrdersOptions | undefined): Promise<BulkUpdateOrdersResponse & BulkUpdateOrdersResponseNonNullableFields>;
}
declare function cancelOrder$1(httpClient: HttpClient): CancelOrderSignature;
interface CancelOrderSignature {
    /**
     * Cancels an order.
     *
     *
     * The `cancelOrder()` function returns a Promise that resolves when the specified order is canceled and the `order.status` field changes to `CANCELED`.
     * @param - Order ID.
     */
    (_id: string, options?: CancelOrderOptions | undefined): Promise<CancelOrderResponse & CancelOrderResponseNonNullableFields>;
}
declare function bulkUpdateOrderTags$1(httpClient: HttpClient): BulkUpdateOrderTagsSignature;
interface BulkUpdateOrderTagsSignature {
    /**
     * Synchronously update tags on multiple orders, by list of order ids
     * A tag that appears both in the list of assign and unassign tags, will be assigned
     * @param - IDs of orders to update tags for.
     */
    (orderIds: string[], options?: BulkUpdateOrderTagsOptions | undefined): Promise<BulkUpdateOrderTagsResponse & BulkUpdateOrderTagsResponseNonNullableFields>;
}
declare const onOrderPaymentStatusUpdated$1: EventDefinition<OrderPaymentStatusUpdatedEnvelope, "wix.ecom.v1.order_payment_status_updated">;
declare const onOrderUpdated$1: EventDefinition<OrderUpdatedEnvelope, "wix.ecom.v1.order_updated">;
declare const onOrderCreated$1: EventDefinition<OrderCreatedEnvelope, "wix.ecom.v1.order_created">;
declare const onOrderCanceled$1: EventDefinition<OrderCanceledEnvelope, "wix.ecom.v1.order_canceled">;
declare const onOrderApproved$1: EventDefinition<OrderApprovedEnvelope, "wix.ecom.v1.order_approved">;

declare function createEventModule$3<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const preparePaymentCollection: MaybeContext<BuildRESTFunction<typeof preparePaymentCollection$1> & typeof preparePaymentCollection$1>;
declare const getPaymentCollectabilityStatus: MaybeContext<BuildRESTFunction<typeof getPaymentCollectabilityStatus$1> & typeof getPaymentCollectabilityStatus$1>;
declare const voidAuthorizedPayments: MaybeContext<BuildRESTFunction<typeof voidAuthorizedPayments$1> & typeof voidAuthorizedPayments$1>;
declare const captureAuthorizedPayments: MaybeContext<BuildRESTFunction<typeof captureAuthorizedPayments$1> & typeof captureAuthorizedPayments$1>;
declare const getOrder: MaybeContext<BuildRESTFunction<typeof getOrder$1> & typeof getOrder$1>;
declare const searchOrders: MaybeContext<BuildRESTFunction<typeof searchOrders$1> & typeof searchOrders$1>;
declare const createOrder: MaybeContext<BuildRESTFunction<typeof createOrder$1> & typeof createOrder$1>;
declare const updateOrder: MaybeContext<BuildRESTFunction<typeof updateOrder$1> & typeof updateOrder$1>;
declare const bulkUpdateOrders: MaybeContext<BuildRESTFunction<typeof bulkUpdateOrders$1> & typeof bulkUpdateOrders$1>;
declare const cancelOrder: MaybeContext<BuildRESTFunction<typeof cancelOrder$1> & typeof cancelOrder$1>;
declare const bulkUpdateOrderTags: MaybeContext<BuildRESTFunction<typeof bulkUpdateOrderTags$1> & typeof bulkUpdateOrderTags$1>;

type _publicOnOrderPaymentStatusUpdatedType = typeof onOrderPaymentStatusUpdated$1;
/**
 * Triggered when an order's payment status is updated to `"PAID"`.
 */
declare const onOrderPaymentStatusUpdated: ReturnType<typeof createEventModule$3<_publicOnOrderPaymentStatusUpdatedType>>;

type _publicOnOrderUpdatedType = typeof onOrderUpdated$1;
/** */
declare const onOrderUpdated: ReturnType<typeof createEventModule$3<_publicOnOrderUpdatedType>>;

type _publicOnOrderCreatedType = typeof onOrderCreated$1;
/**
 * Triggered when an order is created.
 * Learn more about [webhook payload structure](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/order-object-conversion#webhook-conversion-table).
 */
declare const onOrderCreated: ReturnType<typeof createEventModule$3<_publicOnOrderCreatedType>>;

type _publicOnOrderCanceledType = typeof onOrderCanceled$1;
/**
 * Triggered when an order is canceled.
 * Learn more about [eCommerce webhook payload structure](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/order-object-conversion#webhook-conversion-table).
 */
declare const onOrderCanceled: ReturnType<typeof createEventModule$3<_publicOnOrderCanceledType>>;

type _publicOnOrderApprovedType = typeof onOrderApproved$1;
/**
 * Triggered when an order is created and its status is updated to `"APPROVED"`.
 * Learn more about [eCommerce webhook payload structure](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/order-object-conversion#webhook-conversion-table).
 */
declare const onOrderApproved: ReturnType<typeof createEventModule$3<_publicOnOrderApprovedType>>;

type index_d$c_ActivityContentOneOf = ActivityContentOneOf;
type index_d$c_AddActivitiesRequest = AddActivitiesRequest;
type index_d$c_AddActivitiesResponse = AddActivitiesResponse;
type index_d$c_AddActivityRequest = AddActivityRequest;
type index_d$c_AddActivityResponse = AddActivityResponse;
type index_d$c_AddInternalActivityRequest = AddInternalActivityRequest;
type index_d$c_AddInternalActivityResponse = AddInternalActivityResponse;
type index_d$c_AdditionalFeeDelta = AdditionalFeeDelta;
type index_d$c_AdditionalFeeDeltaDeltaOneOf = AdditionalFeeDeltaDeltaOneOf;
type index_d$c_AddressDescription = AddressDescription;
type index_d$c_AddressWithContact = AddressWithContact;
type index_d$c_AggregateOrdersRequest = AggregateOrdersRequest;
type index_d$c_AggregateOrdersResponse = AggregateOrdersResponse;
type index_d$c_App = App;
type index_d$c_AppliedDiscountDelta = AppliedDiscountDelta;
type index_d$c_AppliedDiscountDeltaDeltaOneOf = AppliedDiscountDeltaDeltaOneOf;
type index_d$c_ArchiveOrderRequest = ArchiveOrderRequest;
type index_d$c_ArchiveOrderResponse = ArchiveOrderResponse;
type index_d$c_AttributionSource = AttributionSource;
declare const index_d$c_AttributionSource: typeof AttributionSource;
type index_d$c_AuthorizedPaymentCaptured = AuthorizedPaymentCaptured;
type index_d$c_AuthorizedPaymentCreated = AuthorizedPaymentCreated;
type index_d$c_AuthorizedPaymentVoided = AuthorizedPaymentVoided;
type index_d$c_Balance = Balance;
type index_d$c_BalanceSummary = BalanceSummary;
type index_d$c_BatchOfTriggerReindexOrderRequest = BatchOfTriggerReindexOrderRequest;
type index_d$c_BigDecimalWrapper = BigDecimalWrapper;
type index_d$c_BulkArchiveOrdersByFilterRequest = BulkArchiveOrdersByFilterRequest;
type index_d$c_BulkArchiveOrdersByFilterResponse = BulkArchiveOrdersByFilterResponse;
type index_d$c_BulkArchiveOrdersRequest = BulkArchiveOrdersRequest;
type index_d$c_BulkArchiveOrdersResponse = BulkArchiveOrdersResponse;
type index_d$c_BulkMarkAsFulfilledByFilterRequest = BulkMarkAsFulfilledByFilterRequest;
type index_d$c_BulkMarkAsFulfilledByFilterResponse = BulkMarkAsFulfilledByFilterResponse;
type index_d$c_BulkMarkAsFulfilledRequest = BulkMarkAsFulfilledRequest;
type index_d$c_BulkMarkAsFulfilledResponse = BulkMarkAsFulfilledResponse;
type index_d$c_BulkMarkAsUnfulfilledByFilterRequest = BulkMarkAsUnfulfilledByFilterRequest;
type index_d$c_BulkMarkAsUnfulfilledByFilterResponse = BulkMarkAsUnfulfilledByFilterResponse;
type index_d$c_BulkMarkAsUnfulfilledRequest = BulkMarkAsUnfulfilledRequest;
type index_d$c_BulkMarkAsUnfulfilledResponse = BulkMarkAsUnfulfilledResponse;
type index_d$c_BulkMarkOrdersAsPaidRequest = BulkMarkOrdersAsPaidRequest;
type index_d$c_BulkMarkOrdersAsPaidResponse = BulkMarkOrdersAsPaidResponse;
type index_d$c_BulkOrderResult = BulkOrderResult;
type index_d$c_BulkSendBuyerPickupConfirmationEmailsRequest = BulkSendBuyerPickupConfirmationEmailsRequest;
type index_d$c_BulkSendBuyerPickupConfirmationEmailsResponse = BulkSendBuyerPickupConfirmationEmailsResponse;
type index_d$c_BulkSendBuyerShippingConfirmationEmailsRequest = BulkSendBuyerShippingConfirmationEmailsRequest;
type index_d$c_BulkSendBuyerShippingConfirmationEmailsResponse = BulkSendBuyerShippingConfirmationEmailsResponse;
type index_d$c_BulkUnArchiveOrdersByFilterRequest = BulkUnArchiveOrdersByFilterRequest;
type index_d$c_BulkUnArchiveOrdersByFilterResponse = BulkUnArchiveOrdersByFilterResponse;
type index_d$c_BulkUnArchiveOrdersRequest = BulkUnArchiveOrdersRequest;
type index_d$c_BulkUnArchiveOrdersResponse = BulkUnArchiveOrdersResponse;
type index_d$c_BulkUpdateOrderTagsOptions = BulkUpdateOrderTagsOptions;
type index_d$c_BulkUpdateOrderTagsRequest = BulkUpdateOrderTagsRequest;
type index_d$c_BulkUpdateOrderTagsResponse = BulkUpdateOrderTagsResponse;
type index_d$c_BulkUpdateOrderTagsResponseNonNullableFields = BulkUpdateOrderTagsResponseNonNullableFields;
type index_d$c_BulkUpdateOrderTagsResult = BulkUpdateOrderTagsResult;
type index_d$c_BulkUpdateOrdersOptions = BulkUpdateOrdersOptions;
type index_d$c_BulkUpdateOrdersRequest = BulkUpdateOrdersRequest;
type index_d$c_BulkUpdateOrdersResponse = BulkUpdateOrdersResponse;
type index_d$c_BulkUpdateOrdersResponseNonNullableFields = BulkUpdateOrdersResponseNonNullableFields;
type index_d$c_BuyerInfoIdOneOf = BuyerInfoIdOneOf;
type index_d$c_BuyerInfoUpdate = BuyerInfoUpdate;
type index_d$c_CalculatedTax = CalculatedTax;
type index_d$c_CalculatedTaxes = CalculatedTaxes;
type index_d$c_Cancel = Cancel;
type index_d$c_CancelOrderOptions = CancelOrderOptions;
type index_d$c_CancelOrderRequest = CancelOrderRequest;
type index_d$c_CancelOrderResponse = CancelOrderResponse;
type index_d$c_CancelOrderResponseNonNullableFields = CancelOrderResponseNonNullableFields;
type index_d$c_CaptureAuthorizedPaymentsRequest = CaptureAuthorizedPaymentsRequest;
type index_d$c_CaptureAuthorizedPaymentsResponse = CaptureAuthorizedPaymentsResponse;
type index_d$c_CaptureAuthorizedPaymentsResponseNonNullableFields = CaptureAuthorizedPaymentsResponseNonNullableFields;
type index_d$c_ChargeMembershipsRequest = ChargeMembershipsRequest;
type index_d$c_ChargeMembershipsResponse = ChargeMembershipsResponse;
type index_d$c_ChargeSavedPaymentMethodRequest = ChargeSavedPaymentMethodRequest;
type index_d$c_ChargeSavedPaymentMethodResponse = ChargeSavedPaymentMethodResponse;
type index_d$c_ChargedBy = ChargedBy;
type index_d$c_Color = Color;
type index_d$c_CommitDeltasRequest = CommitDeltasRequest;
type index_d$c_CommitDeltasResponse = CommitDeltasResponse;
type index_d$c_CommittedDiffs = CommittedDiffs;
type index_d$c_CommittedDiffsShippingUpdateInfoOneOf = CommittedDiffsShippingUpdateInfoOneOf;
type index_d$c_CommonAddress = CommonAddress;
type index_d$c_CommonAddressStreetOneOf = CommonAddressStreetOneOf;
type index_d$c_Company = Company;
type index_d$c_Complete = Complete;
type index_d$c_ContinueSideEffectsFlowInLegacyData = ContinueSideEffectsFlowInLegacyData;
type index_d$c_CreateOrderRequest = CreateOrderRequest;
type index_d$c_CreateOrderResponse = CreateOrderResponse;
type index_d$c_CreateOrderResponseNonNullableFields = CreateOrderResponseNonNullableFields;
type index_d$c_CreatePaymentGatewayOrderRequest = CreatePaymentGatewayOrderRequest;
type index_d$c_CreatePaymentGatewayOrderResponse = CreatePaymentGatewayOrderResponse;
type index_d$c_CreatedBy = CreatedBy;
type index_d$c_CreatedByStringOneOf = CreatedByStringOneOf;
type index_d$c_CreditCardDetails = CreditCardDetails;
type index_d$c_CursorSearch = CursorSearch;
type index_d$c_CursorSearchPagingMethodOneOf = CursorSearchPagingMethodOneOf;
type index_d$c_CustomActivity = CustomActivity;
type index_d$c_CustomFieldGroup = CustomFieldGroup;
declare const index_d$c_CustomFieldGroup: typeof CustomFieldGroup;
type index_d$c_CustomFieldValue = CustomFieldValue;
type index_d$c_Customer = Customer;
type index_d$c_DecrementData = DecrementData;
type index_d$c_DecrementItemsQuantityRequest = DecrementItemsQuantityRequest;
type index_d$c_DecrementItemsQuantityResponse = DecrementItemsQuantityResponse;
type index_d$c_DelayedCaptureSettings = DelayedCaptureSettings;
type index_d$c_DeleteActivityRequest = DeleteActivityRequest;
type index_d$c_DeleteActivityResponse = DeleteActivityResponse;
type index_d$c_DeleteByFilterOperation = DeleteByFilterOperation;
type index_d$c_DeleteByIdsOperation = DeleteByIdsOperation;
type index_d$c_DeliveryLogisticsAddressOneOf = DeliveryLogisticsAddressOneOf;
type index_d$c_DeltaPaymentOptionType = DeltaPaymentOptionType;
declare const index_d$c_DeltaPaymentOptionType: typeof DeltaPaymentOptionType;
type index_d$c_Deposit = Deposit;
type index_d$c_DepositType = DepositType;
declare const index_d$c_DepositType: typeof DepositType;
type index_d$c_DescriptionLine = DescriptionLine;
type index_d$c_DescriptionLineDescriptionLineValueOneOf = DescriptionLineDescriptionLineValueOneOf;
type index_d$c_DescriptionLineName = DescriptionLineName;
type index_d$c_DescriptionLineType = DescriptionLineType;
declare const index_d$c_DescriptionLineType: typeof DescriptionLineType;
type index_d$c_DescriptionLineValueOneOf = DescriptionLineValueOneOf;
type index_d$c_DiscountOneDiscountTypeOneOf = DiscountOneDiscountTypeOneOf;
type index_d$c_DiscountReason = DiscountReason;
declare const index_d$c_DiscountReason: typeof DiscountReason;
type index_d$c_DownloadLinkSent = DownloadLinkSent;
type index_d$c_DraftOrderChangesApplied = DraftOrderChangesApplied;
type index_d$c_DraftOrderCommitSettings = DraftOrderCommitSettings;
type index_d$c_DraftOrderDiffs = DraftOrderDiffs;
type index_d$c_DraftOrderDiffsBillingUpdateInfoOneOf = DraftOrderDiffsBillingUpdateInfoOneOf;
type index_d$c_DraftOrderDiffsBuyerUpdateInfoOneOf = DraftOrderDiffsBuyerUpdateInfoOneOf;
type index_d$c_DraftOrderDiffsRecipientUpdateInfoOneOf = DraftOrderDiffsRecipientUpdateInfoOneOf;
type index_d$c_DraftOrderDiffsShippingUpdateInfoOneOf = DraftOrderDiffsShippingUpdateInfoOneOf;
type index_d$c_Duration = Duration;
type index_d$c_DurationUnit = DurationUnit;
declare const index_d$c_DurationUnit: typeof DurationUnit;
type index_d$c_Email = Email;
type index_d$c_EmailEdited = EmailEdited;
type index_d$c_ExternalUriMapping = ExternalUriMapping;
type index_d$c_FulfillerEmailSent = FulfillerEmailSent;
type index_d$c_FulfillmentStatusUpdated = FulfillmentStatusUpdated;
type index_d$c_FulfillmentStatusesAggregate = FulfillmentStatusesAggregate;
type index_d$c_GetMetasiteDataRequest = GetMetasiteDataRequest;
type index_d$c_GetMetasiteDataResponse = GetMetasiteDataResponse;
type index_d$c_GetOrderForMetasiteRequest = GetOrderForMetasiteRequest;
type index_d$c_GetOrderForMetasiteResponse = GetOrderForMetasiteResponse;
type index_d$c_GetOrderRequest = GetOrderRequest;
type index_d$c_GetOrderResponse = GetOrderResponse;
type index_d$c_GetOrderResponseNonNullableFields = GetOrderResponseNonNullableFields;
type index_d$c_GetPaymentCollectabilityStatusRequest = GetPaymentCollectabilityStatusRequest;
type index_d$c_GetPaymentCollectabilityStatusResponse = GetPaymentCollectabilityStatusResponse;
type index_d$c_GetPaymentCollectabilityStatusResponseNonNullableFields = GetPaymentCollectabilityStatusResponseNonNullableFields;
type index_d$c_GetShipmentsRequest = GetShipmentsRequest;
type index_d$c_GetShipmentsResponse = GetShipmentsResponse;
type index_d$c_GiftCardPaymentRefund = GiftCardPaymentRefund;
type index_d$c_HtmlApplication = HtmlApplication;
type index_d$c_IdAndVersion = IdAndVersion;
type index_d$c_InternalActivity = InternalActivity;
type index_d$c_InternalActivityContentOneOf = InternalActivityContentOneOf;
type index_d$c_InternalDocument = InternalDocument;
type index_d$c_InternalDocumentUpdateByFilterOperation = InternalDocumentUpdateByFilterOperation;
type index_d$c_InternalDocumentUpdateOperation = InternalDocumentUpdateOperation;
type index_d$c_InternalQueryOrdersRequest = InternalQueryOrdersRequest;
type index_d$c_InternalQueryOrdersResponse = InternalQueryOrdersResponse;
type index_d$c_InternalUpdateExistingOperation = InternalUpdateExistingOperation;
type index_d$c_InventoryAction = InventoryAction;
declare const index_d$c_InventoryAction: typeof InventoryAction;
type index_d$c_InventoryUpdateDetails = InventoryUpdateDetails;
type index_d$c_InvoiceAdded = InvoiceAdded;
type index_d$c_InvoiceDates = InvoiceDates;
type index_d$c_InvoiceDynamicPriceTotals = InvoiceDynamicPriceTotals;
type index_d$c_InvoiceFields = InvoiceFields;
type index_d$c_InvoiceSent = InvoiceSent;
type index_d$c_InvoiceSentEvent = InvoiceSentEvent;
type index_d$c_InvoiceStatus = InvoiceStatus;
declare const index_d$c_InvoiceStatus: typeof InvoiceStatus;
type index_d$c_InvoicesPayment = InvoicesPayment;
type index_d$c_ItemChangedDetails = ItemChangedDetails;
type index_d$c_ItemizedFee = ItemizedFee;
type index_d$c_LineItemAmount = LineItemAmount;
type index_d$c_LineItemChanges = LineItemChanges;
type index_d$c_LineItemDelta = LineItemDelta;
type index_d$c_LineItemDeltaDeltaOneOf = LineItemDeltaDeltaOneOf;
type index_d$c_LineItemExchangeData = LineItemExchangeData;
type index_d$c_LineItemMetaData = LineItemMetaData;
type index_d$c_LineItemPriceChange = LineItemPriceChange;
type index_d$c_LineItemQuantityChange = LineItemQuantityChange;
type index_d$c_LineItemQuantityChangeType = LineItemQuantityChangeType;
declare const index_d$c_LineItemQuantityChangeType: typeof LineItemQuantityChangeType;
type index_d$c_LineItemTax = LineItemTax;
type index_d$c_LineItemTaxBreakdown = LineItemTaxBreakdown;
type index_d$c_LineItemTaxInfo = LineItemTaxInfo;
type index_d$c_LineItemUpdate = LineItemUpdate;
type index_d$c_LineItems = LineItems;
type index_d$c_ListOrderTransactionsForMetasiteRequest = ListOrderTransactionsForMetasiteRequest;
type index_d$c_ListOrderTransactionsForMetasiteResponse = ListOrderTransactionsForMetasiteResponse;
type index_d$c_Locale = Locale;
type index_d$c_LocationAndQuantity = LocationAndQuantity;
type index_d$c_ManagedAdditionalFee = ManagedAdditionalFee;
type index_d$c_ManagedDiscount = ManagedDiscount;
type index_d$c_ManagedLineItem = ManagedLineItem;
type index_d$c_MarkAsFulfilledRequest = MarkAsFulfilledRequest;
type index_d$c_MarkAsFulfilledResponse = MarkAsFulfilledResponse;
type index_d$c_MarkAsUnfulfilledRequest = MarkAsUnfulfilledRequest;
type index_d$c_MarkAsUnfulfilledResponse = MarkAsUnfulfilledResponse;
type index_d$c_MarkOrderAsPaidRequest = MarkOrderAsPaidRequest;
type index_d$c_MarkOrderAsPaidResponse = MarkOrderAsPaidResponse;
type index_d$c_MarkOrderAsSeenByHumanRequest = MarkOrderAsSeenByHumanRequest;
type index_d$c_MarkOrderAsSeenByHumanResponse = MarkOrderAsSeenByHumanResponse;
type index_d$c_MaskedOrder = MaskedOrder;
type index_d$c_MaskedOrderLineItem = MaskedOrderLineItem;
type index_d$c_MembershipChargeItem = MembershipChargeItem;
type index_d$c_MembershipPaymentRefund = MembershipPaymentRefund;
type index_d$c_MerchantComment = MerchantComment;
type index_d$c_MerchantDiscountMerchantDiscountReasonOneOf = MerchantDiscountMerchantDiscountReasonOneOf;
type index_d$c_MetaData = MetaData;
type index_d$c_MetaSite = MetaSite;
type index_d$c_MetaTag = MetaTag;
type index_d$c_Namespace = Namespace;
declare const index_d$c_Namespace: typeof Namespace;
type index_d$c_NewExchangeOrderCreated = NewExchangeOrderCreated;
type index_d$c_OrderApprovalStrategy = OrderApprovalStrategy;
declare const index_d$c_OrderApprovalStrategy: typeof OrderApprovalStrategy;
type index_d$c_OrderApproved = OrderApproved;
type index_d$c_OrderApprovedEnvelope = OrderApprovedEnvelope;
type index_d$c_OrderCanceled = OrderCanceled;
type index_d$c_OrderCanceledEnvelope = OrderCanceledEnvelope;
type index_d$c_OrderCanceledEventOrderCanceled = OrderCanceledEventOrderCanceled;
type index_d$c_OrderChange = OrderChange;
type index_d$c_OrderChangeValueOneOf = OrderChangeValueOneOf;
type index_d$c_OrderCreateNotifications = OrderCreateNotifications;
type index_d$c_OrderCreatedEnvelope = OrderCreatedEnvelope;
type index_d$c_OrderCreatedFromExchange = OrderCreatedFromExchange;
type index_d$c_OrderCreationSettings = OrderCreationSettings;
type index_d$c_OrderDeltasCommitted = OrderDeltasCommitted;
type index_d$c_OrderFulfilled = OrderFulfilled;
type index_d$c_OrderItemsRestocked = OrderItemsRestocked;
type index_d$c_OrderLineItem = OrderLineItem;
type index_d$c_OrderLineItemChangedDetails = OrderLineItemChangedDetails;
type index_d$c_OrderNonNullableFields = OrderNonNullableFields;
type index_d$c_OrderNotFulfilled = OrderNotFulfilled;
type index_d$c_OrderPaid = OrderPaid;
type index_d$c_OrderPartiallyPaid = OrderPartiallyPaid;
type index_d$c_OrderPaymentStatusUpdatedEnvelope = OrderPaymentStatusUpdatedEnvelope;
type index_d$c_OrderPending = OrderPending;
type index_d$c_OrderPlaced = OrderPlaced;
type index_d$c_OrderRejected = OrderRejected;
type index_d$c_OrderRejectedEventOrderRejected = OrderRejectedEventOrderRejected;
type index_d$c_OrderStatus = OrderStatus;
declare const index_d$c_OrderStatus: typeof OrderStatus;
type index_d$c_OrderTaxBreakdown = OrderTaxBreakdown;
type index_d$c_OrderTaxInfo = OrderTaxInfo;
type index_d$c_OrderUpdatedEnvelope = OrderUpdatedEnvelope;
type index_d$c_OrdersExperiments = OrdersExperiments;
type index_d$c_PaymentCanceled = PaymentCanceled;
type index_d$c_PaymentCanceledPaymentDetailsOneOf = PaymentCanceledPaymentDetailsOneOf;
type index_d$c_PaymentCapture = PaymentCapture;
type index_d$c_PaymentCollectabilityStatus = PaymentCollectabilityStatus;
declare const index_d$c_PaymentCollectabilityStatus: typeof PaymentCollectabilityStatus;
type index_d$c_PaymentDeclined = PaymentDeclined;
type index_d$c_PaymentDeclinedPaymentDetailsOneOf = PaymentDeclinedPaymentDetailsOneOf;
type index_d$c_PaymentPending = PaymentPending;
type index_d$c_PaymentPendingPaymentDetailsOneOf = PaymentPendingPaymentDetailsOneOf;
type index_d$c_PaymentRefundFailed = PaymentRefundFailed;
type index_d$c_PaymentRefunded = PaymentRefunded;
type index_d$c_PaymentStatusUpdated = PaymentStatusUpdated;
type index_d$c_Payments = Payments;
type index_d$c_Phone = Phone;
type index_d$c_PickupReadyEmailSent = PickupReadyEmailSent;
type index_d$c_Placement = Placement;
declare const index_d$c_Placement: typeof Placement;
type index_d$c_PlainTextValue = PlainTextValue;
type index_d$c_PlatformPaging = PlatformPaging;
type index_d$c_PlatformPagingMetadata = PlatformPagingMetadata;
type index_d$c_PlatformQuery = PlatformQuery;
type index_d$c_PlatformQueryPagingMethodOneOf = PlatformQueryPagingMethodOneOf;
type index_d$c_PreparePaymentCollectionOptions = PreparePaymentCollectionOptions;
type index_d$c_PreparePaymentCollectionRequest = PreparePaymentCollectionRequest;
type index_d$c_PreparePaymentCollectionResponse = PreparePaymentCollectionResponse;
type index_d$c_PreparePaymentCollectionResponseNonNullableFields = PreparePaymentCollectionResponseNonNullableFields;
type index_d$c_PreviewBuyerConfirmationEmailRequest = PreviewBuyerConfirmationEmailRequest;
type index_d$c_PreviewBuyerConfirmationEmailResponse = PreviewBuyerConfirmationEmailResponse;
type index_d$c_PreviewBuyerPaymentsReceivedEmailRequest = PreviewBuyerPaymentsReceivedEmailRequest;
type index_d$c_PreviewBuyerPaymentsReceivedEmailResponse = PreviewBuyerPaymentsReceivedEmailResponse;
type index_d$c_PreviewBuyerPickupConfirmationEmailRequest = PreviewBuyerPickupConfirmationEmailRequest;
type index_d$c_PreviewBuyerPickupConfirmationEmailResponse = PreviewBuyerPickupConfirmationEmailResponse;
type index_d$c_PreviewCancelEmailRequest = PreviewCancelEmailRequest;
type index_d$c_PreviewCancelEmailResponse = PreviewCancelEmailResponse;
type index_d$c_PreviewCancelRefundEmailRequest = PreviewCancelRefundEmailRequest;
type index_d$c_PreviewCancelRefundEmailResponse = PreviewCancelRefundEmailResponse;
type index_d$c_PreviewEmailByTypeRequest = PreviewEmailByTypeRequest;
type index_d$c_PreviewEmailByTypeResponse = PreviewEmailByTypeResponse;
type index_d$c_PreviewEmailType = PreviewEmailType;
declare const index_d$c_PreviewEmailType: typeof PreviewEmailType;
type index_d$c_PreviewRefundEmailRequest = PreviewRefundEmailRequest;
type index_d$c_PreviewRefundEmailResponse = PreviewRefundEmailResponse;
type index_d$c_PreviewResendDownloadLinksEmailRequest = PreviewResendDownloadLinksEmailRequest;
type index_d$c_PreviewResendDownloadLinksEmailResponse = PreviewResendDownloadLinksEmailResponse;
type index_d$c_PreviewShippingConfirmationEmailRequest = PreviewShippingConfirmationEmailRequest;
type index_d$c_PreviewShippingConfirmationEmailResponse = PreviewShippingConfirmationEmailResponse;
type index_d$c_PriceDescription = PriceDescription;
type index_d$c_ProductName = ProductName;
type index_d$c_PublicActivity = PublicActivity;
type index_d$c_PublicActivityContentOneOf = PublicActivityContentOneOf;
type index_d$c_QueryOrderRequest = QueryOrderRequest;
type index_d$c_QueryOrderResponse = QueryOrderResponse;
type index_d$c_QueryOrdersForMetasiteRequest = QueryOrdersForMetasiteRequest;
type index_d$c_QueryOrdersForMetasiteResponse = QueryOrdersForMetasiteResponse;
type index_d$c_QuotesAddress = QuotesAddress;
type index_d$c_RecordManuallyCollectedPaymentRequest = RecordManuallyCollectedPaymentRequest;
type index_d$c_RecordManuallyCollectedPaymentResponse = RecordManuallyCollectedPaymentResponse;
type index_d$c_RedirectUrls = RedirectUrls;
type index_d$c_RefundCreated = RefundCreated;
type index_d$c_RefundInitiated = RefundInitiated;
type index_d$c_RefundedAsStoreCredit = RefundedAsStoreCredit;
type index_d$c_RefundedPayment = RefundedPayment;
type index_d$c_RefundedPaymentKindOneOf = RefundedPaymentKindOneOf;
type index_d$c_RegularPayment = RegularPayment;
type index_d$c_RegularPaymentPaymentMethodDetailsOneOf = RegularPaymentPaymentMethodDetailsOneOf;
type index_d$c_RegularPaymentRefund = RegularPaymentRefund;
type index_d$c_Reschedule = Reschedule;
type index_d$c_SavedPaymentMethod = SavedPaymentMethod;
type index_d$c_SearchOrdersOptions = SearchOrdersOptions;
type index_d$c_SearchOrdersRequest = SearchOrdersRequest;
type index_d$c_SearchOrdersResponse = SearchOrdersResponse;
type index_d$c_SearchOrdersResponseNonNullableFields = SearchOrdersResponseNonNullableFields;
type index_d$c_SendBuyerConfirmationEmailRequest = SendBuyerConfirmationEmailRequest;
type index_d$c_SendBuyerConfirmationEmailResponse = SendBuyerConfirmationEmailResponse;
type index_d$c_SendBuyerPaymentsReceivedEmailRequest = SendBuyerPaymentsReceivedEmailRequest;
type index_d$c_SendBuyerPaymentsReceivedEmailResponse = SendBuyerPaymentsReceivedEmailResponse;
type index_d$c_SendBuyerPickupConfirmationEmailRequest = SendBuyerPickupConfirmationEmailRequest;
type index_d$c_SendBuyerPickupConfirmationEmailResponse = SendBuyerPickupConfirmationEmailResponse;
type index_d$c_SendBuyerShippingConfirmationEmailRequest = SendBuyerShippingConfirmationEmailRequest;
type index_d$c_SendBuyerShippingConfirmationEmailResponse = SendBuyerShippingConfirmationEmailResponse;
type index_d$c_SendCancelRefundEmailRequest = SendCancelRefundEmailRequest;
type index_d$c_SendCancelRefundEmailResponse = SendCancelRefundEmailResponse;
type index_d$c_SendMerchantOrderReceivedNotificationRequest = SendMerchantOrderReceivedNotificationRequest;
type index_d$c_SendMerchantOrderReceivedNotificationResponse = SendMerchantOrderReceivedNotificationResponse;
type index_d$c_SendMerchantOrderReceivedPushRequest = SendMerchantOrderReceivedPushRequest;
type index_d$c_SendMerchantOrderReceivedPushResponse = SendMerchantOrderReceivedPushResponse;
type index_d$c_SendRefundEmailRequest = SendRefundEmailRequest;
type index_d$c_SendRefundEmailResponse = SendRefundEmailResponse;
type index_d$c_SeoData = SeoData;
type index_d$c_ShippingAddressEdited = ShippingAddressEdited;
type index_d$c_ShippingConfirmationEmailSent = ShippingConfirmationEmailSent;
type index_d$c_ShippingInformationChange = ShippingInformationChange;
type index_d$c_SourceType = SourceType;
declare const index_d$c_SourceType: typeof SourceType;
type index_d$c_StandardDetails = StandardDetails;
type index_d$c_State = State;
declare const index_d$c_State: typeof State;
type index_d$c_TagList = TagList;
type index_d$c_Tags = Tags;
type index_d$c_Task = Task;
type index_d$c_TaskAction = TaskAction;
type index_d$c_TaskActionActionOneOf = TaskActionActionOneOf;
type index_d$c_TaskKey = TaskKey;
type index_d$c_TotalPrice = TotalPrice;
type index_d$c_TotalPriceChange = TotalPriceChange;
type index_d$c_TrackingLinkAdded = TrackingLinkAdded;
type index_d$c_TrackingNumberAdded = TrackingNumberAdded;
type index_d$c_TrackingNumberEdited = TrackingNumberEdited;
type index_d$c_TranslatedValue = TranslatedValue;
type index_d$c_TriggerReindexOrderRequest = TriggerReindexOrderRequest;
type index_d$c_TriggerReindexRequest = TriggerReindexRequest;
type index_d$c_TriggerReindexResponse = TriggerReindexResponse;
type index_d$c_TriggerSideEffectsFromLegacyData = TriggerSideEffectsFromLegacyData;
type index_d$c_UnArchiveOrderRequest = UnArchiveOrderRequest;
type index_d$c_UnArchiveOrderResponse = UnArchiveOrderResponse;
type index_d$c_UpdateActivityRequest = UpdateActivityRequest;
type index_d$c_UpdateActivityResponse = UpdateActivityResponse;
type index_d$c_UpdateBillingContactDetailsRequest = UpdateBillingContactDetailsRequest;
type index_d$c_UpdateBillingContactDetailsResponse = UpdateBillingContactDetailsResponse;
type index_d$c_UpdateBuyerEmailRequest = UpdateBuyerEmailRequest;
type index_d$c_UpdateBuyerEmailResponse = UpdateBuyerEmailResponse;
type index_d$c_UpdateBuyerInfoRequest = UpdateBuyerInfoRequest;
type index_d$c_UpdateBuyerInfoResponse = UpdateBuyerInfoResponse;
type index_d$c_UpdateInternalDocumentsEvent = UpdateInternalDocumentsEvent;
type index_d$c_UpdateInternalDocumentsEventOperationOneOf = UpdateInternalDocumentsEventOperationOneOf;
type index_d$c_UpdateLineItemsDescriptionLinesRequest = UpdateLineItemsDescriptionLinesRequest;
type index_d$c_UpdateLineItemsDescriptionLinesResponse = UpdateLineItemsDescriptionLinesResponse;
type index_d$c_UpdateOrder = UpdateOrder;
type index_d$c_UpdateOrderLineItemRequest = UpdateOrderLineItemRequest;
type index_d$c_UpdateOrderLineItemResponse = UpdateOrderLineItemResponse;
type index_d$c_UpdateOrderLineItemsRequest = UpdateOrderLineItemsRequest;
type index_d$c_UpdateOrderLineItemsResponse = UpdateOrderLineItemsResponse;
type index_d$c_UpdateOrderRequest = UpdateOrderRequest;
type index_d$c_UpdateOrderResponse = UpdateOrderResponse;
type index_d$c_UpdateOrderResponseNonNullableFields = UpdateOrderResponseNonNullableFields;
type index_d$c_UpdateOrderShippingAddressRequest = UpdateOrderShippingAddressRequest;
type index_d$c_UpdateOrderShippingAddressResponse = UpdateOrderShippingAddressResponse;
type index_d$c_UpsertRefundRequest = UpsertRefundRequest;
type index_d$c_UpsertRefundResponse = UpsertRefundResponse;
type index_d$c_UserDataResponse = UserDataResponse;
type index_d$c_V1BulkMarkOrdersAsPaidRequest = V1BulkMarkOrdersAsPaidRequest;
type index_d$c_V1BulkMarkOrdersAsPaidResponse = V1BulkMarkOrdersAsPaidResponse;
type index_d$c_V1CreatePaymentGatewayOrderRequest = V1CreatePaymentGatewayOrderRequest;
type index_d$c_V1CreatePaymentGatewayOrderResponse = V1CreatePaymentGatewayOrderResponse;
type index_d$c_V1LineItemDelta = V1LineItemDelta;
type index_d$c_V1LineItemDeltaDeltaOneOf = V1LineItemDeltaDeltaOneOf;
type index_d$c_V1MarkOrderAsPaidRequest = V1MarkOrderAsPaidRequest;
type index_d$c_V1MarkOrderAsPaidResponse = V1MarkOrderAsPaidResponse;
type index_d$c_V1RestockItem = V1RestockItem;
type index_d$c_V1ScheduledAction = V1ScheduledAction;
type index_d$c_V1ShippingInformation = V1ShippingInformation;
type index_d$c_Value = Value;
type index_d$c_ValueType = ValueType;
declare const index_d$c_ValueType: typeof ValueType;
type index_d$c_VersionedDeleteByIdsOperation = VersionedDeleteByIdsOperation;
type index_d$c_VersionedDocumentId = VersionedDocumentId;
type index_d$c_VersionedDocumentUpdateOperation = VersionedDocumentUpdateOperation;
type index_d$c_VersioningMode = VersioningMode;
declare const index_d$c_VersioningMode: typeof VersioningMode;
type index_d$c_VoidAuthorizedPaymentsRequest = VoidAuthorizedPaymentsRequest;
type index_d$c_VoidAuthorizedPaymentsResponse = VoidAuthorizedPaymentsResponse;
type index_d$c_VoidAuthorizedPaymentsResponseNonNullableFields = VoidAuthorizedPaymentsResponseNonNullableFields;
type index_d$c__publicOnOrderApprovedType = _publicOnOrderApprovedType;
type index_d$c__publicOnOrderCanceledType = _publicOnOrderCanceledType;
type index_d$c__publicOnOrderCreatedType = _publicOnOrderCreatedType;
type index_d$c__publicOnOrderPaymentStatusUpdatedType = _publicOnOrderPaymentStatusUpdatedType;
type index_d$c__publicOnOrderUpdatedType = _publicOnOrderUpdatedType;
declare const index_d$c_bulkUpdateOrderTags: typeof bulkUpdateOrderTags;
declare const index_d$c_bulkUpdateOrders: typeof bulkUpdateOrders;
declare const index_d$c_cancelOrder: typeof cancelOrder;
declare const index_d$c_captureAuthorizedPayments: typeof captureAuthorizedPayments;
declare const index_d$c_createOrder: typeof createOrder;
declare const index_d$c_getOrder: typeof getOrder;
declare const index_d$c_getPaymentCollectabilityStatus: typeof getPaymentCollectabilityStatus;
declare const index_d$c_onOrderApproved: typeof onOrderApproved;
declare const index_d$c_onOrderCanceled: typeof onOrderCanceled;
declare const index_d$c_onOrderCreated: typeof onOrderCreated;
declare const index_d$c_onOrderPaymentStatusUpdated: typeof onOrderPaymentStatusUpdated;
declare const index_d$c_onOrderUpdated: typeof onOrderUpdated;
declare const index_d$c_preparePaymentCollection: typeof preparePaymentCollection;
declare const index_d$c_searchOrders: typeof searchOrders;
declare const index_d$c_updateOrder: typeof updateOrder;
declare const index_d$c_voidAuthorizedPayments: typeof voidAuthorizedPayments;
declare namespace index_d$c {
  export { type ActionEvent$9 as ActionEvent, ActionType$1 as ActionType, type Activity$1 as Activity, type index_d$c_ActivityContentOneOf as ActivityContentOneOf, ActivityType$1 as ActivityType, type index_d$c_AddActivitiesRequest as AddActivitiesRequest, type index_d$c_AddActivitiesResponse as AddActivitiesResponse, type index_d$c_AddActivityRequest as AddActivityRequest, type index_d$c_AddActivityResponse as AddActivityResponse, type index_d$c_AddInternalActivityRequest as AddInternalActivityRequest, type index_d$c_AddInternalActivityResponse as AddInternalActivityResponse, type AdditionalFee$1 as AdditionalFee, type index_d$c_AdditionalFeeDelta as AdditionalFeeDelta, type index_d$c_AdditionalFeeDeltaDeltaOneOf as AdditionalFeeDeltaDeltaOneOf, type AdditionalFeeRefund$1 as AdditionalFeeRefund, type Address$5 as Address, type index_d$c_AddressDescription as AddressDescription, type AddressLocation$3 as AddressLocation, type index_d$c_AddressWithContact as AddressWithContact, type index_d$c_AggregateOrdersRequest as AggregateOrdersRequest, type index_d$c_AggregateOrdersResponse as AggregateOrdersResponse, type AggregatedRefundSummary$1 as AggregatedRefundSummary, type index_d$c_App as App, type ApplicationError$4 as ApplicationError, type AppliedDiscount$1 as AppliedDiscount, type index_d$c_AppliedDiscountDelta as AppliedDiscountDelta, type index_d$c_AppliedDiscountDeltaDeltaOneOf as AppliedDiscountDeltaDeltaOneOf, type AppliedDiscountDiscountSourceOneOf$1 as AppliedDiscountDiscountSourceOneOf, type index_d$c_ArchiveOrderRequest as ArchiveOrderRequest, type index_d$c_ArchiveOrderResponse as ArchiveOrderResponse, index_d$c_AttributionSource as AttributionSource, type AuthorizationActionFailureDetails$1 as AuthorizationActionFailureDetails, type AuthorizationCapture$1 as AuthorizationCapture, AuthorizationCaptureStatus$1 as AuthorizationCaptureStatus, type AuthorizationDetails$1 as AuthorizationDetails, type AuthorizationVoid$1 as AuthorizationVoid, AuthorizationVoidStatus$1 as AuthorizationVoidStatus, type index_d$c_AuthorizedPaymentCaptured as AuthorizedPaymentCaptured, type index_d$c_AuthorizedPaymentCreated as AuthorizedPaymentCreated, type index_d$c_AuthorizedPaymentVoided as AuthorizedPaymentVoided, type index_d$c_Balance as Balance, type index_d$c_BalanceSummary as BalanceSummary, type BaseEventMetadata$3 as BaseEventMetadata, type index_d$c_BatchOfTriggerReindexOrderRequest as BatchOfTriggerReindexOrderRequest, type index_d$c_BigDecimalWrapper as BigDecimalWrapper, type BulkActionMetadata$1 as BulkActionMetadata, type index_d$c_BulkArchiveOrdersByFilterRequest as BulkArchiveOrdersByFilterRequest, type index_d$c_BulkArchiveOrdersByFilterResponse as BulkArchiveOrdersByFilterResponse, type index_d$c_BulkArchiveOrdersRequest as BulkArchiveOrdersRequest, type index_d$c_BulkArchiveOrdersResponse as BulkArchiveOrdersResponse, type index_d$c_BulkMarkAsFulfilledByFilterRequest as BulkMarkAsFulfilledByFilterRequest, type index_d$c_BulkMarkAsFulfilledByFilterResponse as BulkMarkAsFulfilledByFilterResponse, type index_d$c_BulkMarkAsFulfilledRequest as BulkMarkAsFulfilledRequest, type index_d$c_BulkMarkAsFulfilledResponse as BulkMarkAsFulfilledResponse, type index_d$c_BulkMarkAsUnfulfilledByFilterRequest as BulkMarkAsUnfulfilledByFilterRequest, type index_d$c_BulkMarkAsUnfulfilledByFilterResponse as BulkMarkAsUnfulfilledByFilterResponse, type index_d$c_BulkMarkAsUnfulfilledRequest as BulkMarkAsUnfulfilledRequest, type index_d$c_BulkMarkAsUnfulfilledResponse as BulkMarkAsUnfulfilledResponse, type index_d$c_BulkMarkOrdersAsPaidRequest as BulkMarkOrdersAsPaidRequest, type index_d$c_BulkMarkOrdersAsPaidResponse as BulkMarkOrdersAsPaidResponse, type index_d$c_BulkOrderResult as BulkOrderResult, type index_d$c_BulkSendBuyerPickupConfirmationEmailsRequest as BulkSendBuyerPickupConfirmationEmailsRequest, type index_d$c_BulkSendBuyerPickupConfirmationEmailsResponse as BulkSendBuyerPickupConfirmationEmailsResponse, type index_d$c_BulkSendBuyerShippingConfirmationEmailsRequest as BulkSendBuyerShippingConfirmationEmailsRequest, type index_d$c_BulkSendBuyerShippingConfirmationEmailsResponse as BulkSendBuyerShippingConfirmationEmailsResponse, type index_d$c_BulkUnArchiveOrdersByFilterRequest as BulkUnArchiveOrdersByFilterRequest, type index_d$c_BulkUnArchiveOrdersByFilterResponse as BulkUnArchiveOrdersByFilterResponse, type index_d$c_BulkUnArchiveOrdersRequest as BulkUnArchiveOrdersRequest, type index_d$c_BulkUnArchiveOrdersResponse as BulkUnArchiveOrdersResponse, type index_d$c_BulkUpdateOrderTagsOptions as BulkUpdateOrderTagsOptions, type index_d$c_BulkUpdateOrderTagsRequest as BulkUpdateOrderTagsRequest, type index_d$c_BulkUpdateOrderTagsResponse as BulkUpdateOrderTagsResponse, type index_d$c_BulkUpdateOrderTagsResponseNonNullableFields as BulkUpdateOrderTagsResponseNonNullableFields, type index_d$c_BulkUpdateOrderTagsResult as BulkUpdateOrderTagsResult, type index_d$c_BulkUpdateOrdersOptions as BulkUpdateOrdersOptions, type index_d$c_BulkUpdateOrdersRequest as BulkUpdateOrdersRequest, type index_d$c_BulkUpdateOrdersResponse as BulkUpdateOrdersResponse, type index_d$c_BulkUpdateOrdersResponseNonNullableFields as BulkUpdateOrdersResponseNonNullableFields, type BuyerInfo$1 as BuyerInfo, type index_d$c_BuyerInfoIdOneOf as BuyerInfoIdOneOf, type index_d$c_BuyerInfoUpdate as BuyerInfoUpdate, type CalculateRefundItemRequest$1 as CalculateRefundItemRequest, type CalculateRefundItemResponse$1 as CalculateRefundItemResponse, type CalculateRefundRequest$1 as CalculateRefundRequest, type CalculateRefundResponse$1 as CalculateRefundResponse, type index_d$c_CalculatedTax as CalculatedTax, type index_d$c_CalculatedTaxes as CalculatedTaxes, type index_d$c_Cancel as Cancel, type index_d$c_CancelOrderOptions as CancelOrderOptions, type index_d$c_CancelOrderRequest as CancelOrderRequest, type index_d$c_CancelOrderResponse as CancelOrderResponse, type index_d$c_CancelOrderResponseNonNullableFields as CancelOrderResponseNonNullableFields, type index_d$c_CaptureAuthorizedPaymentsRequest as CaptureAuthorizedPaymentsRequest, type index_d$c_CaptureAuthorizedPaymentsResponse as CaptureAuthorizedPaymentsResponse, type index_d$c_CaptureAuthorizedPaymentsResponseNonNullableFields as CaptureAuthorizedPaymentsResponseNonNullableFields, type CatalogReference$3 as CatalogReference, type ChannelInfo$1 as ChannelInfo, ChannelType$1 as ChannelType, type index_d$c_ChargeMembershipsRequest as ChargeMembershipsRequest, type index_d$c_ChargeMembershipsResponse as ChargeMembershipsResponse, type index_d$c_ChargeSavedPaymentMethodRequest as ChargeSavedPaymentMethodRequest, type index_d$c_ChargeSavedPaymentMethodResponse as ChargeSavedPaymentMethodResponse, type index_d$c_ChargedBy as ChargedBy, type index_d$c_Color as Color, type index_d$c_CommitDeltasRequest as CommitDeltasRequest, type index_d$c_CommitDeltasResponse as CommitDeltasResponse, type index_d$c_CommittedDiffs as CommittedDiffs, type index_d$c_CommittedDiffsShippingUpdateInfoOneOf as CommittedDiffsShippingUpdateInfoOneOf, type index_d$c_CommonAddress as CommonAddress, type index_d$c_CommonAddressStreetOneOf as CommonAddressStreetOneOf, type index_d$c_Company as Company, type index_d$c_Complete as Complete, type index_d$c_ContinueSideEffectsFlowInLegacyData as ContinueSideEffectsFlowInLegacyData, type Coupon$1 as Coupon, type index_d$c_CreateOrderRequest as CreateOrderRequest, type index_d$c_CreateOrderResponse as CreateOrderResponse, type index_d$c_CreateOrderResponseNonNullableFields as CreateOrderResponseNonNullableFields, type index_d$c_CreatePaymentGatewayOrderRequest as CreatePaymentGatewayOrderRequest, type index_d$c_CreatePaymentGatewayOrderResponse as CreatePaymentGatewayOrderResponse, type index_d$c_CreatedBy as CreatedBy, type index_d$c_CreatedByStringOneOf as CreatedByStringOneOf, type index_d$c_CreditCardDetails as CreditCardDetails, type CreditCardPaymentMethodDetails$1 as CreditCardPaymentMethodDetails, type CursorPaging$7 as CursorPaging, type CursorPagingMetadata$6 as CursorPagingMetadata, type index_d$c_CursorSearch as CursorSearch, type index_d$c_CursorSearchPagingMethodOneOf as CursorSearchPagingMethodOneOf, type Cursors$7 as Cursors, type index_d$c_CustomActivity as CustomActivity, type CustomField$1 as CustomField, index_d$c_CustomFieldGroup as CustomFieldGroup, type index_d$c_CustomFieldValue as CustomFieldValue, type index_d$c_Customer as Customer, type index_d$c_DecrementData as DecrementData, type index_d$c_DecrementItemsQuantityRequest as DecrementItemsQuantityRequest, type index_d$c_DecrementItemsQuantityResponse as DecrementItemsQuantityResponse, type index_d$c_DelayedCaptureSettings as DelayedCaptureSettings, type index_d$c_DeleteActivityRequest as DeleteActivityRequest, type index_d$c_DeleteActivityResponse as DeleteActivityResponse, type index_d$c_DeleteByFilterOperation as DeleteByFilterOperation, type index_d$c_DeleteByIdsOperation as DeleteByIdsOperation, type DeliveryLogistics$2 as DeliveryLogistics, type index_d$c_DeliveryLogisticsAddressOneOf as DeliveryLogisticsAddressOneOf, type DeliveryTimeSlot$2 as DeliveryTimeSlot, index_d$c_DeltaPaymentOptionType as DeltaPaymentOptionType, type index_d$c_Deposit as Deposit, index_d$c_DepositType as DepositType, type index_d$c_DescriptionLine as DescriptionLine, type index_d$c_DescriptionLineDescriptionLineValueOneOf as DescriptionLineDescriptionLineValueOneOf, type index_d$c_DescriptionLineName as DescriptionLineName, index_d$c_DescriptionLineType as DescriptionLineType, type index_d$c_DescriptionLineValueOneOf as DescriptionLineValueOneOf, type DiffmatokyPayload$2 as DiffmatokyPayload, type DigitalFile$1 as DigitalFile, type Discount$1 as Discount, type index_d$c_DiscountOneDiscountTypeOneOf as DiscountOneDiscountTypeOneOf, index_d$c_DiscountReason as DiscountReason, type DiscountRule$1 as DiscountRule, type DiscountRuleName$1 as DiscountRuleName, DiscountType$1 as DiscountType, type DomainEvent$9 as DomainEvent, type DomainEventBodyOneOf$9 as DomainEventBodyOneOf, type index_d$c_DownloadLinkSent as DownloadLinkSent, type index_d$c_DraftOrderChangesApplied as DraftOrderChangesApplied, type index_d$c_DraftOrderCommitSettings as DraftOrderCommitSettings, type index_d$c_DraftOrderDiffs as DraftOrderDiffs, type index_d$c_DraftOrderDiffsBillingUpdateInfoOneOf as DraftOrderDiffsBillingUpdateInfoOneOf, type index_d$c_DraftOrderDiffsBuyerUpdateInfoOneOf as DraftOrderDiffsBuyerUpdateInfoOneOf, type index_d$c_DraftOrderDiffsRecipientUpdateInfoOneOf as DraftOrderDiffsRecipientUpdateInfoOneOf, type index_d$c_DraftOrderDiffsShippingUpdateInfoOneOf as DraftOrderDiffsShippingUpdateInfoOneOf, type index_d$c_Duration as Duration, index_d$c_DurationUnit as DurationUnit, type index_d$c_Email as Email, type index_d$c_EmailEdited as EmailEdited, type Empty$5 as Empty, type EntityCreatedEvent$9 as EntityCreatedEvent, type EntityDeletedEvent$9 as EntityDeletedEvent, type EntityUpdatedEvent$9 as EntityUpdatedEvent, type ErrorInformation$2 as ErrorInformation, type EventMetadata$3 as EventMetadata, type ExtendedFields$4 as ExtendedFields, type index_d$c_ExternalUriMapping as ExternalUriMapping, type index_d$c_FulfillerEmailSent as FulfillerEmailSent, FulfillmentStatus$1 as FulfillmentStatus, type index_d$c_FulfillmentStatusUpdated as FulfillmentStatusUpdated, type index_d$c_FulfillmentStatusesAggregate as FulfillmentStatusesAggregate, type FullAddressContactDetails$1 as FullAddressContactDetails, type index_d$c_GetMetasiteDataRequest as GetMetasiteDataRequest, type index_d$c_GetMetasiteDataResponse as GetMetasiteDataResponse, type index_d$c_GetOrderForMetasiteRequest as GetOrderForMetasiteRequest, type index_d$c_GetOrderForMetasiteResponse as GetOrderForMetasiteResponse, type index_d$c_GetOrderRequest as GetOrderRequest, type index_d$c_GetOrderResponse as GetOrderResponse, type index_d$c_GetOrderResponseNonNullableFields as GetOrderResponseNonNullableFields, type index_d$c_GetPaymentCollectabilityStatusRequest as GetPaymentCollectabilityStatusRequest, type index_d$c_GetPaymentCollectabilityStatusResponse as GetPaymentCollectabilityStatusResponse, type index_d$c_GetPaymentCollectabilityStatusResponseNonNullableFields as GetPaymentCollectabilityStatusResponseNonNullableFields, type GetRefundabilityStatusRequest$1 as GetRefundabilityStatusRequest, type GetRefundabilityStatusResponse$1 as GetRefundabilityStatusResponse, type index_d$c_GetShipmentsRequest as GetShipmentsRequest, type index_d$c_GetShipmentsResponse as GetShipmentsResponse, type GiftCardPaymentDetails$1 as GiftCardPaymentDetails, type index_d$c_GiftCardPaymentRefund as GiftCardPaymentRefund, type index_d$c_HtmlApplication as HtmlApplication, type index_d$c_IdAndVersion as IdAndVersion, type IdentificationData$9 as IdentificationData, type IdentificationDataIdOneOf$9 as IdentificationDataIdOneOf, type IndexingMessage$1 as IndexingMessage, type index_d$c_InternalActivity as InternalActivity, type index_d$c_InternalActivityContentOneOf as InternalActivityContentOneOf, type index_d$c_InternalDocument as InternalDocument, type index_d$c_InternalDocumentUpdateByFilterOperation as InternalDocumentUpdateByFilterOperation, type index_d$c_InternalDocumentUpdateOperation as InternalDocumentUpdateOperation, type index_d$c_InternalQueryOrdersRequest as InternalQueryOrdersRequest, type index_d$c_InternalQueryOrdersResponse as InternalQueryOrdersResponse, type index_d$c_InternalUpdateExistingOperation as InternalUpdateExistingOperation, index_d$c_InventoryAction as InventoryAction, type index_d$c_InventoryUpdateDetails as InventoryUpdateDetails, type index_d$c_InvoiceAdded as InvoiceAdded, type index_d$c_InvoiceDates as InvoiceDates, type index_d$c_InvoiceDynamicPriceTotals as InvoiceDynamicPriceTotals, type index_d$c_InvoiceFields as InvoiceFields, type index_d$c_InvoiceSent as InvoiceSent, type index_d$c_InvoiceSentEvent as InvoiceSentEvent, index_d$c_InvoiceStatus as InvoiceStatus, type index_d$c_InvoicesPayment as InvoicesPayment, type index_d$c_ItemChangedDetails as ItemChangedDetails, type ItemMetadata$1 as ItemMetadata, type ItemTaxFullDetails$1 as ItemTaxFullDetails, type ItemType$1 as ItemType, ItemTypeItemType$1 as ItemTypeItemType, type ItemTypeItemTypeDataOneOf$1 as ItemTypeItemTypeDataOneOf, type index_d$c_ItemizedFee as ItemizedFee, JurisdictionType$1 as JurisdictionType, type LineItem$2 as LineItem, type index_d$c_LineItemAmount as LineItemAmount, type index_d$c_LineItemChanges as LineItemChanges, type index_d$c_LineItemDelta as LineItemDelta, type index_d$c_LineItemDeltaDeltaOneOf as LineItemDeltaDeltaOneOf, type LineItemDiscount$1 as LineItemDiscount, type index_d$c_LineItemExchangeData as LineItemExchangeData, type index_d$c_LineItemMetaData as LineItemMetaData, type index_d$c_LineItemPriceChange as LineItemPriceChange, type index_d$c_LineItemQuantityChange as LineItemQuantityChange, index_d$c_LineItemQuantityChangeType as LineItemQuantityChangeType, type LineItemRefund$1 as LineItemRefund, type index_d$c_LineItemTax as LineItemTax, type index_d$c_LineItemTaxBreakdown as LineItemTaxBreakdown, type index_d$c_LineItemTaxInfo as LineItemTaxInfo, type index_d$c_LineItemUpdate as LineItemUpdate, type index_d$c_LineItems as LineItems, type index_d$c_ListOrderTransactionsForMetasiteRequest as ListOrderTransactionsForMetasiteRequest, type index_d$c_ListOrderTransactionsForMetasiteResponse as ListOrderTransactionsForMetasiteResponse, type index_d$c_Locale as Locale, type index_d$c_LocationAndQuantity as LocationAndQuantity, type index_d$c_ManagedAdditionalFee as ManagedAdditionalFee, type index_d$c_ManagedDiscount as ManagedDiscount, type index_d$c_ManagedLineItem as ManagedLineItem, ManuallyRefundableReason$1 as ManuallyRefundableReason, type index_d$c_MarkAsFulfilledRequest as MarkAsFulfilledRequest, type index_d$c_MarkAsFulfilledResponse as MarkAsFulfilledResponse, type index_d$c_MarkAsUnfulfilledRequest as MarkAsUnfulfilledRequest, type index_d$c_MarkAsUnfulfilledResponse as MarkAsUnfulfilledResponse, type index_d$c_MarkOrderAsPaidRequest as MarkOrderAsPaidRequest, type index_d$c_MarkOrderAsPaidResponse as MarkOrderAsPaidResponse, type index_d$c_MarkOrderAsSeenByHumanRequest as MarkOrderAsSeenByHumanRequest, type index_d$c_MarkOrderAsSeenByHumanResponse as MarkOrderAsSeenByHumanResponse, type index_d$c_MaskedOrder as MaskedOrder, type index_d$c_MaskedOrderLineItem as MaskedOrderLineItem, type index_d$c_MembershipChargeItem as MembershipChargeItem, type MembershipName$2 as MembershipName, type MembershipPaymentDetails$1 as MembershipPaymentDetails, type index_d$c_MembershipPaymentRefund as MembershipPaymentRefund, MembershipPaymentStatus$1 as MembershipPaymentStatus, type index_d$c_MerchantComment as MerchantComment, type MerchantDiscount$1 as MerchantDiscount, type index_d$c_MerchantDiscountMerchantDiscountReasonOneOf as MerchantDiscountMerchantDiscountReasonOneOf, type MessageEnvelope$8 as MessageEnvelope, type index_d$c_MetaData as MetaData, type index_d$c_MetaSite as MetaSite, type index_d$c_MetaTag as MetaTag, index_d$c_Namespace as Namespace, type index_d$c_NewExchangeOrderCreated as NewExchangeOrderCreated, NonRefundableReason$1 as NonRefundableReason, type Order$1 as Order, index_d$c_OrderApprovalStrategy as OrderApprovalStrategy, type index_d$c_OrderApproved as OrderApproved, type index_d$c_OrderApprovedEnvelope as OrderApprovedEnvelope, type index_d$c_OrderCanceled as OrderCanceled, type index_d$c_OrderCanceledEnvelope as OrderCanceledEnvelope, type index_d$c_OrderCanceledEventOrderCanceled as OrderCanceledEventOrderCanceled, type index_d$c_OrderChange as OrderChange, type index_d$c_OrderChangeValueOneOf as OrderChangeValueOneOf, type index_d$c_OrderCreateNotifications as OrderCreateNotifications, type index_d$c_OrderCreatedEnvelope as OrderCreatedEnvelope, type index_d$c_OrderCreatedFromExchange as OrderCreatedFromExchange, type index_d$c_OrderCreationSettings as OrderCreationSettings, type index_d$c_OrderDeltasCommitted as OrderDeltasCommitted, type index_d$c_OrderFulfilled as OrderFulfilled, type index_d$c_OrderItemsRestocked as OrderItemsRestocked, type index_d$c_OrderLineItem as OrderLineItem, type index_d$c_OrderLineItemChangedDetails as OrderLineItemChangedDetails, type index_d$c_OrderNonNullableFields as OrderNonNullableFields, type index_d$c_OrderNotFulfilled as OrderNotFulfilled, type index_d$c_OrderPaid as OrderPaid, type index_d$c_OrderPartiallyPaid as OrderPartiallyPaid, type index_d$c_OrderPaymentStatusUpdatedEnvelope as OrderPaymentStatusUpdatedEnvelope, type index_d$c_OrderPending as OrderPending, type index_d$c_OrderPlaced as OrderPlaced, type OrderRefunded$1 as OrderRefunded, type index_d$c_OrderRejected as OrderRejected, type index_d$c_OrderRejectedEventOrderRejected as OrderRejectedEventOrderRejected, index_d$c_OrderStatus as OrderStatus, type index_d$c_OrderTaxBreakdown as OrderTaxBreakdown, type index_d$c_OrderTaxInfo as OrderTaxInfo, type OrderTransactions$1 as OrderTransactions, type index_d$c_OrderUpdatedEnvelope as OrderUpdatedEnvelope, type index_d$c_OrdersExperiments as OrdersExperiments, type Payment$1 as Payment, type index_d$c_PaymentCanceled as PaymentCanceled, type index_d$c_PaymentCanceledPaymentDetailsOneOf as PaymentCanceledPaymentDetailsOneOf, type index_d$c_PaymentCapture as PaymentCapture, index_d$c_PaymentCollectabilityStatus as PaymentCollectabilityStatus, type index_d$c_PaymentDeclined as PaymentDeclined, type index_d$c_PaymentDeclinedPaymentDetailsOneOf as PaymentDeclinedPaymentDetailsOneOf, PaymentOptionType$1 as PaymentOptionType, type PaymentPaymentDetailsOneOf$1 as PaymentPaymentDetailsOneOf, type index_d$c_PaymentPending as PaymentPending, type index_d$c_PaymentPendingPaymentDetailsOneOf as PaymentPendingPaymentDetailsOneOf, type PaymentRefund$1 as PaymentRefund, type index_d$c_PaymentRefundFailed as PaymentRefundFailed, type index_d$c_PaymentRefunded as PaymentRefunded, PaymentStatus$1 as PaymentStatus, type index_d$c_PaymentStatusUpdated as PaymentStatusUpdated, type index_d$c_Payments as Payments, type index_d$c_Phone as Phone, type PhysicalProperties$2 as PhysicalProperties, type PickupAddress$1 as PickupAddress, type PickupDetails$3 as PickupDetails, PickupMethod$2 as PickupMethod, type index_d$c_PickupReadyEmailSent as PickupReadyEmailSent, index_d$c_Placement as Placement, type index_d$c_PlainTextValue as PlainTextValue, type index_d$c_PlatformPaging as PlatformPaging, type index_d$c_PlatformPagingMetadata as PlatformPagingMetadata, type index_d$c_PlatformQuery as PlatformQuery, type index_d$c_PlatformQueryPagingMethodOneOf as PlatformQueryPagingMethodOneOf, type index_d$c_PreparePaymentCollectionOptions as PreparePaymentCollectionOptions, type index_d$c_PreparePaymentCollectionRequest as PreparePaymentCollectionRequest, type index_d$c_PreparePaymentCollectionResponse as PreparePaymentCollectionResponse, type index_d$c_PreparePaymentCollectionResponseNonNullableFields as PreparePaymentCollectionResponseNonNullableFields, type index_d$c_PreviewBuyerConfirmationEmailRequest as PreviewBuyerConfirmationEmailRequest, type index_d$c_PreviewBuyerConfirmationEmailResponse as PreviewBuyerConfirmationEmailResponse, type index_d$c_PreviewBuyerPaymentsReceivedEmailRequest as PreviewBuyerPaymentsReceivedEmailRequest, type index_d$c_PreviewBuyerPaymentsReceivedEmailResponse as PreviewBuyerPaymentsReceivedEmailResponse, type index_d$c_PreviewBuyerPickupConfirmationEmailRequest as PreviewBuyerPickupConfirmationEmailRequest, type index_d$c_PreviewBuyerPickupConfirmationEmailResponse as PreviewBuyerPickupConfirmationEmailResponse, type index_d$c_PreviewCancelEmailRequest as PreviewCancelEmailRequest, type index_d$c_PreviewCancelEmailResponse as PreviewCancelEmailResponse, type index_d$c_PreviewCancelRefundEmailRequest as PreviewCancelRefundEmailRequest, type index_d$c_PreviewCancelRefundEmailResponse as PreviewCancelRefundEmailResponse, type index_d$c_PreviewEmailByTypeRequest as PreviewEmailByTypeRequest, type index_d$c_PreviewEmailByTypeResponse as PreviewEmailByTypeResponse, index_d$c_PreviewEmailType as PreviewEmailType, type index_d$c_PreviewRefundEmailRequest as PreviewRefundEmailRequest, type index_d$c_PreviewRefundEmailResponse as PreviewRefundEmailResponse, type index_d$c_PreviewResendDownloadLinksEmailRequest as PreviewResendDownloadLinksEmailRequest, type index_d$c_PreviewResendDownloadLinksEmailResponse as PreviewResendDownloadLinksEmailResponse, type index_d$c_PreviewShippingConfirmationEmailRequest as PreviewShippingConfirmationEmailRequest, type index_d$c_PreviewShippingConfirmationEmailResponse as PreviewShippingConfirmationEmailResponse, type Price$3 as Price, type index_d$c_PriceDescription as PriceDescription, type PriceSummary$1 as PriceSummary, type index_d$c_ProductName as ProductName, type index_d$c_PublicActivity as PublicActivity, type index_d$c_PublicActivityContentOneOf as PublicActivityContentOneOf, type index_d$c_QueryOrderRequest as QueryOrderRequest, type index_d$c_QueryOrderResponse as QueryOrderResponse, type index_d$c_QueryOrdersForMetasiteRequest as QueryOrdersForMetasiteRequest, type index_d$c_QueryOrdersForMetasiteResponse as QueryOrdersForMetasiteResponse, type index_d$c_QuotesAddress as QuotesAddress, Reason$1 as Reason, type index_d$c_RecordManuallyCollectedPaymentRequest as RecordManuallyCollectedPaymentRequest, type index_d$c_RecordManuallyCollectedPaymentResponse as RecordManuallyCollectedPaymentResponse, type index_d$c_RedirectUrls as RedirectUrls, type Refund$1 as Refund, type index_d$c_RefundCreated as RefundCreated, type RefundDetails$1 as RefundDetails, type index_d$c_RefundInitiated as RefundInitiated, type RefundItem$1 as RefundItem, type RefundSideEffects$1 as RefundSideEffects, RefundStatus$1 as RefundStatus, type RefundTransaction$1 as RefundTransaction, type Refundability$1 as Refundability, type RefundabilityAdditionalRefundabilityInfoOneOf$1 as RefundabilityAdditionalRefundabilityInfoOneOf, RefundableStatus$1 as RefundableStatus, type index_d$c_RefundedAsStoreCredit as RefundedAsStoreCredit, type index_d$c_RefundedPayment as RefundedPayment, type index_d$c_RefundedPaymentKindOneOf as RefundedPaymentKindOneOf, type index_d$c_RegularPayment as RegularPayment, type RegularPaymentDetails$1 as RegularPaymentDetails, type RegularPaymentDetailsPaymentMethodDetailsOneOf$1 as RegularPaymentDetailsPaymentMethodDetailsOneOf, type index_d$c_RegularPaymentPaymentMethodDetailsOneOf as RegularPaymentPaymentMethodDetailsOneOf, type index_d$c_RegularPaymentRefund as RegularPaymentRefund, type index_d$c_Reschedule as Reschedule, type RestockInfo$1 as RestockInfo, type RestockItem$1 as RestockItem, RestockType$1 as RestockType, type RestoreInfo$9 as RestoreInfo, type index_d$c_SavedPaymentMethod as SavedPaymentMethod, ScheduledAction$1 as ScheduledAction, type index_d$c_SearchOrdersOptions as SearchOrdersOptions, type index_d$c_SearchOrdersRequest as SearchOrdersRequest, type index_d$c_SearchOrdersResponse as SearchOrdersResponse, type index_d$c_SearchOrdersResponseNonNullableFields as SearchOrdersResponseNonNullableFields, type index_d$c_SendBuyerConfirmationEmailRequest as SendBuyerConfirmationEmailRequest, type index_d$c_SendBuyerConfirmationEmailResponse as SendBuyerConfirmationEmailResponse, type index_d$c_SendBuyerPaymentsReceivedEmailRequest as SendBuyerPaymentsReceivedEmailRequest, type index_d$c_SendBuyerPaymentsReceivedEmailResponse as SendBuyerPaymentsReceivedEmailResponse, type index_d$c_SendBuyerPickupConfirmationEmailRequest as SendBuyerPickupConfirmationEmailRequest, type index_d$c_SendBuyerPickupConfirmationEmailResponse as SendBuyerPickupConfirmationEmailResponse, type index_d$c_SendBuyerShippingConfirmationEmailRequest as SendBuyerShippingConfirmationEmailRequest, type index_d$c_SendBuyerShippingConfirmationEmailResponse as SendBuyerShippingConfirmationEmailResponse, type index_d$c_SendCancelRefundEmailRequest as SendCancelRefundEmailRequest, type index_d$c_SendCancelRefundEmailResponse as SendCancelRefundEmailResponse, type index_d$c_SendMerchantOrderReceivedNotificationRequest as SendMerchantOrderReceivedNotificationRequest, type index_d$c_SendMerchantOrderReceivedNotificationResponse as SendMerchantOrderReceivedNotificationResponse, type index_d$c_SendMerchantOrderReceivedPushRequest as SendMerchantOrderReceivedPushRequest, type index_d$c_SendMerchantOrderReceivedPushResponse as SendMerchantOrderReceivedPushResponse, type index_d$c_SendRefundEmailRequest as SendRefundEmailRequest, type index_d$c_SendRefundEmailResponse as SendRefundEmailResponse, type index_d$c_SeoData as SeoData, type ServiceProperties$1 as ServiceProperties, type index_d$c_ShippingAddressEdited as ShippingAddressEdited, type index_d$c_ShippingConfirmationEmailSent as ShippingConfirmationEmailSent, type ShippingInformation$1 as ShippingInformation, type index_d$c_ShippingInformationChange as ShippingInformationChange, type ShippingPrice$1 as ShippingPrice, type ShippingRefund$1 as ShippingRefund, type ShippingRegion$1 as ShippingRegion, type SnapshotMessage$1 as SnapshotMessage, SortOrder$7 as SortOrder, type Sorting$7 as Sorting, type Source$1 as Source, index_d$c_SourceType as SourceType, type index_d$c_StandardDetails as StandardDetails, index_d$c_State as State, type StreetAddress$4 as StreetAddress, type Subdivision$1 as Subdivision, SubdivisionType$1 as SubdivisionType, SubscriptionFrequency$2 as SubscriptionFrequency, type SubscriptionInfo$1 as SubscriptionInfo, type SubscriptionSettings$2 as SubscriptionSettings, type index_d$c_TagList as TagList, type index_d$c_Tags as Tags, type index_d$c_Task as Task, type index_d$c_TaskAction as TaskAction, type index_d$c_TaskActionActionOneOf as TaskActionActionOneOf, type index_d$c_TaskKey as TaskKey, type TaxSummary$1 as TaxSummary, type TaxableAddress$1 as TaxableAddress, type TaxableAddressTaxableAddressDataOneOf$1 as TaxableAddressTaxableAddressDataOneOf, TaxableAddressType$1 as TaxableAddressType, type index_d$c_TotalPrice as TotalPrice, type index_d$c_TotalPriceChange as TotalPriceChange, type index_d$c_TrackingLinkAdded as TrackingLinkAdded, type index_d$c_TrackingNumberAdded as TrackingNumberAdded, type index_d$c_TrackingNumberEdited as TrackingNumberEdited, TransactionStatus$1 as TransactionStatus, type index_d$c_TranslatedValue as TranslatedValue, type TriggerRefundRequest$1 as TriggerRefundRequest, type TriggerRefundResponse$1 as TriggerRefundResponse, type index_d$c_TriggerReindexOrderRequest as TriggerReindexOrderRequest, type index_d$c_TriggerReindexRequest as TriggerReindexRequest, type index_d$c_TriggerReindexResponse as TriggerReindexResponse, type index_d$c_TriggerSideEffectsFromLegacyData as TriggerSideEffectsFromLegacyData, type index_d$c_UnArchiveOrderRequest as UnArchiveOrderRequest, type index_d$c_UnArchiveOrderResponse as UnArchiveOrderResponse, type index_d$c_UpdateActivityRequest as UpdateActivityRequest, type index_d$c_UpdateActivityResponse as UpdateActivityResponse, type index_d$c_UpdateBillingContactDetailsRequest as UpdateBillingContactDetailsRequest, type index_d$c_UpdateBillingContactDetailsResponse as UpdateBillingContactDetailsResponse, type index_d$c_UpdateBuyerEmailRequest as UpdateBuyerEmailRequest, type index_d$c_UpdateBuyerEmailResponse as UpdateBuyerEmailResponse, type index_d$c_UpdateBuyerInfoRequest as UpdateBuyerInfoRequest, type index_d$c_UpdateBuyerInfoResponse as UpdateBuyerInfoResponse, type index_d$c_UpdateInternalDocumentsEvent as UpdateInternalDocumentsEvent, type index_d$c_UpdateInternalDocumentsEventOperationOneOf as UpdateInternalDocumentsEventOperationOneOf, type index_d$c_UpdateLineItemsDescriptionLinesRequest as UpdateLineItemsDescriptionLinesRequest, type index_d$c_UpdateLineItemsDescriptionLinesResponse as UpdateLineItemsDescriptionLinesResponse, type index_d$c_UpdateOrder as UpdateOrder, type index_d$c_UpdateOrderLineItemRequest as UpdateOrderLineItemRequest, type index_d$c_UpdateOrderLineItemResponse as UpdateOrderLineItemResponse, type index_d$c_UpdateOrderLineItemsRequest as UpdateOrderLineItemsRequest, type index_d$c_UpdateOrderLineItemsResponse as UpdateOrderLineItemsResponse, type index_d$c_UpdateOrderRequest as UpdateOrderRequest, type index_d$c_UpdateOrderResponse as UpdateOrderResponse, type index_d$c_UpdateOrderResponseNonNullableFields as UpdateOrderResponseNonNullableFields, type index_d$c_UpdateOrderShippingAddressRequest as UpdateOrderShippingAddressRequest, type index_d$c_UpdateOrderShippingAddressResponse as UpdateOrderShippingAddressResponse, type index_d$c_UpsertRefundRequest as UpsertRefundRequest, type index_d$c_UpsertRefundResponse as UpsertRefundResponse, type index_d$c_UserDataResponse as UserDataResponse, type index_d$c_V1BulkMarkOrdersAsPaidRequest as V1BulkMarkOrdersAsPaidRequest, type index_d$c_V1BulkMarkOrdersAsPaidResponse as V1BulkMarkOrdersAsPaidResponse, type index_d$c_V1CreatePaymentGatewayOrderRequest as V1CreatePaymentGatewayOrderRequest, type index_d$c_V1CreatePaymentGatewayOrderResponse as V1CreatePaymentGatewayOrderResponse, type index_d$c_V1LineItemDelta as V1LineItemDelta, type index_d$c_V1LineItemDeltaDeltaOneOf as V1LineItemDeltaDeltaOneOf, type index_d$c_V1MarkOrderAsPaidRequest as V1MarkOrderAsPaidRequest, type index_d$c_V1MarkOrderAsPaidResponse as V1MarkOrderAsPaidResponse, type index_d$c_V1RestockItem as V1RestockItem, type index_d$c_V1ScheduledAction as V1ScheduledAction, type index_d$c_V1ShippingInformation as V1ShippingInformation, type index_d$c_Value as Value, index_d$c_ValueType as ValueType, type VatId$2 as VatId, VatType$2 as VatType, type index_d$c_VersionedDeleteByIdsOperation as VersionedDeleteByIdsOperation, type index_d$c_VersionedDocumentId as VersionedDocumentId, type index_d$c_VersionedDocumentUpdateOperation as VersionedDocumentUpdateOperation, index_d$c_VersioningMode as VersioningMode, type index_d$c_VoidAuthorizedPaymentsRequest as VoidAuthorizedPaymentsRequest, type index_d$c_VoidAuthorizedPaymentsResponse as VoidAuthorizedPaymentsResponse, type index_d$c_VoidAuthorizedPaymentsResponseNonNullableFields as VoidAuthorizedPaymentsResponseNonNullableFields, WebhookIdentityType$8 as WebhookIdentityType, WeightUnit$3 as WeightUnit, type index_d$c__publicOnOrderApprovedType as _publicOnOrderApprovedType, type index_d$c__publicOnOrderCanceledType as _publicOnOrderCanceledType, type index_d$c__publicOnOrderCreatedType as _publicOnOrderCreatedType, type index_d$c__publicOnOrderPaymentStatusUpdatedType as _publicOnOrderPaymentStatusUpdatedType, type index_d$c__publicOnOrderUpdatedType as _publicOnOrderUpdatedType, index_d$c_bulkUpdateOrderTags as bulkUpdateOrderTags, index_d$c_bulkUpdateOrders as bulkUpdateOrders, index_d$c_cancelOrder as cancelOrder, index_d$c_captureAuthorizedPayments as captureAuthorizedPayments, index_d$c_createOrder as createOrder, index_d$c_getOrder as getOrder, index_d$c_getPaymentCollectabilityStatus as getPaymentCollectabilityStatus, index_d$c_onOrderApproved as onOrderApproved, index_d$c_onOrderCanceled as onOrderCanceled, index_d$c_onOrderCreated as onOrderCreated, index_d$c_onOrderPaymentStatusUpdated as onOrderPaymentStatusUpdated, index_d$c_onOrderUpdated as onOrderUpdated, index_d$c_preparePaymentCollection as preparePaymentCollection, onOrderApproved$1 as publicOnOrderApproved, onOrderCanceled$1 as publicOnOrderCanceled, onOrderCreated$1 as publicOnOrderCreated, onOrderPaymentStatusUpdated$1 as publicOnOrderPaymentStatusUpdated, onOrderUpdated$1 as publicOnOrderUpdated, index_d$c_searchOrders as searchOrders, index_d$c_updateOrder as updateOrder, index_d$c_voidAuthorizedPayments as voidAuthorizedPayments };
}

interface OrderPaymentRequest {
    /**
     * Order payment request ID.
     * @readonly
     */
    _id?: string | null;
    /** Additional parameters to identify the source of the order payment request. */
    source?: Source;
    /**
     * status.
     * @readonly
     */
    status?: Status;
    /** Order ID. */
    orderId?: string;
    /**
     * Order number.
     * @readonly
     */
    orderNumber?: string | null;
    /**
     * Amount to collect.
     * > **Note:** The amount can only be set once.
     */
    amount?: Price$2;
    /**
     * Currency code. The value will always match the currency used in the order.
     * @readonly
     */
    currency?: string;
    /**
     * Payment gateway order id which is associated with this payment request
     * @readonly
     */
    paymentGatewayOrderId?: string | null;
    /** Title to be displayed to the customer on the payment page. Provide a clear and descriptive title to inform the customer about what they are paying for. */
    title?: string;
    /** Description to be displayed to the customer on the payment page. Write a detailed description so the customer understands what they are paying for. */
    description?: string | null;
    /** Image to be displayed to the customer on the payment page. */
    image?: string;
    /** Time and date the order payment request expires. */
    expirationDate?: Date | null;
    /** [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls. */
    extendedFields?: ExtendedFields$3;
    /**
     * Date and time the OrderPaymentRequest was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the OrderPaymentRequest was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
}
interface Source {
    /** App Def ID that created the order payment request. */
    appId?: string | null;
    /** Reference to an ID from an external system, indicating the original source of the order payment request. */
    externalId?: string;
}
declare enum Status {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    UNPAID = "UNPAID",
    PAID = "PAID",
    EXPIRED = "EXPIRED"
}
interface Price$2 {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface ExtendedFields$3 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
/** Triggered when the the order payment request status changes to paid */
interface OrderPaymentRequestPaid {
    /** The order that was updated */
    orderPaymentRequest?: OrderPaymentRequest;
}
/** Triggered when the the order payment request status changes to expired */
interface OrderPaymentRequestExpired {
    /** The order that was updated */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface CreateOrderPaymentRequestRequest {
    /** OrderPaymentRequest to be created. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface CreateOrderPaymentRequestResponse {
    /** The created OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
    /** Order payment request URL. */
    orderPaymentRequestUrl?: string;
}
interface GetOrderPaymentRequestRequest {
    /** ID of the OrderPaymentRequest to retrieve. */
    orderPaymentRequestId: string;
}
interface GetOrderPaymentRequestResponse {
    /** The requested OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface UpdateOrderPaymentRequestRequest {
    /** OrderPaymentRequest to be updated, may be partial. */
    orderPaymentRequest: OrderPaymentRequest;
}
interface UpdateOrderPaymentRequestResponse {
    /** Updated OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface DeleteOrderPaymentRequestRequest {
    /** Id of the OrderPaymentRequest to delete. */
    orderPaymentRequestId: string;
}
interface DeleteOrderPaymentRequestResponse {
}
interface QueryOrderPaymentRequestsRequest {
    /** WQL expression. */
    query?: CursorQuery$4;
}
interface CursorQuery$4 extends CursorQueryPagingMethodOneOf$4 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$6;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$6[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$4 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$6;
}
interface Sorting$6 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$6;
}
declare enum SortOrder$6 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$6 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryOrderPaymentRequestsResponse {
    /** List of payment requests. */
    orderPaymentRequests?: OrderPaymentRequest[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$5;
}
interface CursorPagingMetadata$5 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$6;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$6 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetOrderPaymentRequestURLRequest {
    /** Order Payment Request ID. */
    orderPaymentRequestId: string;
}
interface GetOrderPaymentRequestURLResponse {
    /** Order Payment Request URL. */
    orderPaymentRequestUrl?: string;
}
interface UpdateExtendedFieldsRequest$2 {
    /** ID of the entity to update. */
    _id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse$2 {
    /** Updated OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface DomainEvent$8 extends DomainEventBodyOneOf$8 {
    createdEvent?: EntityCreatedEvent$8;
    updatedEvent?: EntityUpdatedEvent$8;
    deletedEvent?: EntityDeletedEvent$8;
    actionEvent?: ActionEvent$8;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$8 {
    createdEvent?: EntityCreatedEvent$8;
    updatedEvent?: EntityUpdatedEvent$8;
    deletedEvent?: EntityDeletedEvent$8;
    actionEvent?: ActionEvent$8;
}
interface EntityCreatedEvent$8 {
    entity?: string;
}
interface RestoreInfo$8 {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$8 {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$8 {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$8 {
    body?: string;
}
interface Empty$4 {
}
interface MessageEnvelope$7 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$8;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$8 extends IdentificationDataIdOneOf$8 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$7;
}
/** @oneof */
interface IdentificationDataIdOneOf$8 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$7 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface SourceNonNullableFields {
    externalId: string;
}
interface PriceNonNullableFields$2 {
    amount: string;
    formattedAmount: string;
}
interface OrderPaymentRequestNonNullableFields {
    source?: SourceNonNullableFields;
    status: Status;
    orderId: string;
    amount?: PriceNonNullableFields$2;
    currency: string;
    title: string;
    image: string;
}
interface CreateOrderPaymentRequestResponseNonNullableFields {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields;
    orderPaymentRequestUrl: string;
}
interface GetOrderPaymentRequestResponseNonNullableFields {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields;
}
interface UpdateOrderPaymentRequestResponseNonNullableFields {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields;
}
interface QueryOrderPaymentRequestsResponseNonNullableFields {
    orderPaymentRequests: OrderPaymentRequestNonNullableFields[];
}
interface GetOrderPaymentRequestURLResponseNonNullableFields {
    orderPaymentRequestUrl: string;
}
interface UpdateExtendedFieldsResponseNonNullableFields$2 {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields;
}
interface CreateOrderPaymentRequestOptions {
    /** OrderPaymentRequest to be created. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface UpdateOrderPaymentRequest {
    /**
     * Order payment request ID.
     * @readonly
     */
    _id?: string | null;
    /** Additional parameters to identify the source of the order payment request. */
    source?: Source;
    /**
     * status.
     * @readonly
     */
    status?: Status;
    /** Order ID. */
    orderId?: string;
    /**
     * Order number.
     * @readonly
     */
    orderNumber?: string | null;
    /**
     * Amount to collect.
     * > **Note:** The amount can only be set once.
     */
    amount?: Price$2;
    /**
     * Currency code. The value will always match the currency used in the order.
     * @readonly
     */
    currency?: string;
    /**
     * Payment gateway order id which is associated with this payment request
     * @readonly
     */
    paymentGatewayOrderId?: string | null;
    /** Title to be displayed to the customer on the payment page. Provide a clear and descriptive title to inform the customer about what they are paying for. */
    title?: string;
    /** Description to be displayed to the customer on the payment page. Write a detailed description so the customer understands what they are paying for. */
    description?: string | null;
    /** Image to be displayed to the customer on the payment page. */
    image?: string;
    /** Time and date the order payment request expires. */
    expirationDate?: Date | null;
    /** [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls. */
    extendedFields?: ExtendedFields$3;
    /**
     * Date and time the OrderPaymentRequest was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the OrderPaymentRequest was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
}
interface QueryCursorResult$5 {
    cursors: Cursors$6;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface OrderPaymentRequestsQueryResult extends QueryCursorResult$5 {
    items: OrderPaymentRequest[];
    query: OrderPaymentRequestsQueryBuilder;
    next: () => Promise<OrderPaymentRequestsQueryResult>;
    prev: () => Promise<OrderPaymentRequestsQueryResult>;
}
interface OrderPaymentRequestsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'source.appId' | 'source.externalId' | 'status' | 'orderId' | 'orderNumber' | 'amount.amount' | 'paymentGatewayOrderId' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate', value: any) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'source.appId' | 'source.externalId' | 'status' | 'orderId' | 'orderNumber' | 'paymentGatewayOrderId' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate', value: any) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: 'expirationDate' | '_createdDate' | '_updatedDate', value: any) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: 'expirationDate' | '_createdDate' | '_updatedDate', value: any) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: 'expirationDate' | '_createdDate' | '_updatedDate', value: any) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: 'expirationDate' | '_createdDate' | '_updatedDate', value: any) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'source.appId' | 'source.externalId' | 'orderId' | 'orderNumber' | 'paymentGatewayOrderId' | 'title' | 'description', value: string) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'source.appId' | 'source.externalId' | 'status' | 'orderId' | 'orderNumber' | 'paymentGatewayOrderId' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate', value: any[]) => OrderPaymentRequestsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'source.appId' | 'source.externalId' | 'status' | 'orderId' | 'orderNumber' | 'paymentGatewayOrderId' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate', value: any) => OrderPaymentRequestsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'source.appId' | 'source.externalId' | 'status' | 'orderId' | 'orderNumber' | 'paymentGatewayOrderId' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate', value: boolean) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'status' | 'orderNumber' | 'amount.amount' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate'>) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'status' | 'orderNumber' | 'amount.amount' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate'>) => OrderPaymentRequestsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => OrderPaymentRequestsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => OrderPaymentRequestsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<OrderPaymentRequestsQueryResult>;
}
interface UpdateExtendedFieldsOptions$2 {
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}

declare function createOrderPaymentRequest$1(httpClient: HttpClient): CreateOrderPaymentRequestSignature;
interface CreateOrderPaymentRequestSignature {
    /**
     * Creates a order payment request.
     * @returns The created OrderPaymentRequest.
     */
    (options?: CreateOrderPaymentRequestOptions | undefined): Promise<OrderPaymentRequest & OrderPaymentRequestNonNullableFields>;
}
declare function getOrderPaymentRequest$1(httpClient: HttpClient): GetOrderPaymentRequestSignature;
interface GetOrderPaymentRequestSignature {
    /**
     * Retrieves a order payment request.
     * @param - ID of the OrderPaymentRequest to retrieve.
     * @returns The requested OrderPaymentRequest.
     */
    (orderPaymentRequestId: string): Promise<OrderPaymentRequest & OrderPaymentRequestNonNullableFields>;
}
declare function updateOrderPaymentRequest$1(httpClient: HttpClient): UpdateOrderPaymentRequestSignature;
interface UpdateOrderPaymentRequestSignature {
    /**
     * Updates a order payment request.
     *
     * Please note that only `UNPAID` payment requests can be updated.
     * @param - Order payment request ID.
     * @returns Updated OrderPaymentRequest.
     */
    (_id: string | null, orderPaymentRequest: UpdateOrderPaymentRequest): Promise<OrderPaymentRequest & OrderPaymentRequestNonNullableFields>;
}
declare function deleteOrderPaymentRequest$1(httpClient: HttpClient): DeleteOrderPaymentRequestSignature;
interface DeleteOrderPaymentRequestSignature {
    /**
     * Deletes a order payment request.
     *
     * Please note that only `UNPAID` payment requests can be deleted.
     * @param - Id of the OrderPaymentRequest to delete.
     */
    (orderPaymentRequestId: string): Promise<void>;
}
declare function queryOrderPaymentRequests$1(httpClient: HttpClient): QueryOrderPaymentRequestsSignature;
interface QueryOrderPaymentRequestsSignature {
    /**
     * Retrieves a list of Payment Requests, given the provided [paging, filtering, and sorting][1].
     *
     * Query Payment Requests runs with these defaults, which you can override:
     * - `createdDate` is sorted in DESC order
     * - `cursorPaging.limit` is 100
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language), and
     * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (): OrderPaymentRequestsQueryBuilder;
}
declare function getOrderPaymentRequestUrl$1(httpClient: HttpClient): GetOrderPaymentRequestUrlSignature;
interface GetOrderPaymentRequestUrlSignature {
    /**
     * Retrieves the order payment request page URL of a specified order payment request.
     * @param - Order Payment Request ID.
     */
    (orderPaymentRequestId: string): Promise<GetOrderPaymentRequestURLResponse & GetOrderPaymentRequestURLResponseNonNullableFields>;
}
declare function updateExtendedFields$5(httpClient: HttpClient): UpdateExtendedFieldsSignature$2;
interface UpdateExtendedFieldsSignature$2 {
    /**
     * Updates extended fields of a order payment request
     * @param - ID of the entity to update.
     * @param - Identifier for the app whose extended fields are being updated.
     */
    (_id: string, namespace: string, options: UpdateExtendedFieldsOptions$2): Promise<UpdateExtendedFieldsResponse$2 & UpdateExtendedFieldsResponseNonNullableFields$2>;
}

declare const createOrderPaymentRequest: MaybeContext<BuildRESTFunction<typeof createOrderPaymentRequest$1> & typeof createOrderPaymentRequest$1>;
declare const getOrderPaymentRequest: MaybeContext<BuildRESTFunction<typeof getOrderPaymentRequest$1> & typeof getOrderPaymentRequest$1>;
declare const updateOrderPaymentRequest: MaybeContext<BuildRESTFunction<typeof updateOrderPaymentRequest$1> & typeof updateOrderPaymentRequest$1>;
declare const deleteOrderPaymentRequest: MaybeContext<BuildRESTFunction<typeof deleteOrderPaymentRequest$1> & typeof deleteOrderPaymentRequest$1>;
declare const queryOrderPaymentRequests: MaybeContext<BuildRESTFunction<typeof queryOrderPaymentRequests$1> & typeof queryOrderPaymentRequests$1>;
declare const getOrderPaymentRequestUrl: MaybeContext<BuildRESTFunction<typeof getOrderPaymentRequestUrl$1> & typeof getOrderPaymentRequestUrl$1>;
declare const updateExtendedFields$4: MaybeContext<BuildRESTFunction<typeof updateExtendedFields$5> & typeof updateExtendedFields$5>;

type index_d$b_CreateOrderPaymentRequestOptions = CreateOrderPaymentRequestOptions;
type index_d$b_CreateOrderPaymentRequestRequest = CreateOrderPaymentRequestRequest;
type index_d$b_CreateOrderPaymentRequestResponse = CreateOrderPaymentRequestResponse;
type index_d$b_CreateOrderPaymentRequestResponseNonNullableFields = CreateOrderPaymentRequestResponseNonNullableFields;
type index_d$b_DeleteOrderPaymentRequestRequest = DeleteOrderPaymentRequestRequest;
type index_d$b_DeleteOrderPaymentRequestResponse = DeleteOrderPaymentRequestResponse;
type index_d$b_GetOrderPaymentRequestRequest = GetOrderPaymentRequestRequest;
type index_d$b_GetOrderPaymentRequestResponse = GetOrderPaymentRequestResponse;
type index_d$b_GetOrderPaymentRequestResponseNonNullableFields = GetOrderPaymentRequestResponseNonNullableFields;
type index_d$b_GetOrderPaymentRequestURLRequest = GetOrderPaymentRequestURLRequest;
type index_d$b_GetOrderPaymentRequestURLResponse = GetOrderPaymentRequestURLResponse;
type index_d$b_GetOrderPaymentRequestURLResponseNonNullableFields = GetOrderPaymentRequestURLResponseNonNullableFields;
type index_d$b_OrderPaymentRequest = OrderPaymentRequest;
type index_d$b_OrderPaymentRequestExpired = OrderPaymentRequestExpired;
type index_d$b_OrderPaymentRequestNonNullableFields = OrderPaymentRequestNonNullableFields;
type index_d$b_OrderPaymentRequestPaid = OrderPaymentRequestPaid;
type index_d$b_OrderPaymentRequestsQueryBuilder = OrderPaymentRequestsQueryBuilder;
type index_d$b_OrderPaymentRequestsQueryResult = OrderPaymentRequestsQueryResult;
type index_d$b_QueryOrderPaymentRequestsRequest = QueryOrderPaymentRequestsRequest;
type index_d$b_QueryOrderPaymentRequestsResponse = QueryOrderPaymentRequestsResponse;
type index_d$b_QueryOrderPaymentRequestsResponseNonNullableFields = QueryOrderPaymentRequestsResponseNonNullableFields;
type index_d$b_Source = Source;
type index_d$b_Status = Status;
declare const index_d$b_Status: typeof Status;
type index_d$b_UpdateOrderPaymentRequest = UpdateOrderPaymentRequest;
type index_d$b_UpdateOrderPaymentRequestRequest = UpdateOrderPaymentRequestRequest;
type index_d$b_UpdateOrderPaymentRequestResponse = UpdateOrderPaymentRequestResponse;
type index_d$b_UpdateOrderPaymentRequestResponseNonNullableFields = UpdateOrderPaymentRequestResponseNonNullableFields;
declare const index_d$b_createOrderPaymentRequest: typeof createOrderPaymentRequest;
declare const index_d$b_deleteOrderPaymentRequest: typeof deleteOrderPaymentRequest;
declare const index_d$b_getOrderPaymentRequest: typeof getOrderPaymentRequest;
declare const index_d$b_getOrderPaymentRequestUrl: typeof getOrderPaymentRequestUrl;
declare const index_d$b_queryOrderPaymentRequests: typeof queryOrderPaymentRequests;
declare const index_d$b_updateOrderPaymentRequest: typeof updateOrderPaymentRequest;
declare namespace index_d$b {
  export { type ActionEvent$8 as ActionEvent, type index_d$b_CreateOrderPaymentRequestOptions as CreateOrderPaymentRequestOptions, type index_d$b_CreateOrderPaymentRequestRequest as CreateOrderPaymentRequestRequest, type index_d$b_CreateOrderPaymentRequestResponse as CreateOrderPaymentRequestResponse, type index_d$b_CreateOrderPaymentRequestResponseNonNullableFields as CreateOrderPaymentRequestResponseNonNullableFields, type CursorPaging$6 as CursorPaging, type CursorPagingMetadata$5 as CursorPagingMetadata, type CursorQuery$4 as CursorQuery, type CursorQueryPagingMethodOneOf$4 as CursorQueryPagingMethodOneOf, type Cursors$6 as Cursors, type index_d$b_DeleteOrderPaymentRequestRequest as DeleteOrderPaymentRequestRequest, type index_d$b_DeleteOrderPaymentRequestResponse as DeleteOrderPaymentRequestResponse, type DomainEvent$8 as DomainEvent, type DomainEventBodyOneOf$8 as DomainEventBodyOneOf, type Empty$4 as Empty, type EntityCreatedEvent$8 as EntityCreatedEvent, type EntityDeletedEvent$8 as EntityDeletedEvent, type EntityUpdatedEvent$8 as EntityUpdatedEvent, type ExtendedFields$3 as ExtendedFields, type index_d$b_GetOrderPaymentRequestRequest as GetOrderPaymentRequestRequest, type index_d$b_GetOrderPaymentRequestResponse as GetOrderPaymentRequestResponse, type index_d$b_GetOrderPaymentRequestResponseNonNullableFields as GetOrderPaymentRequestResponseNonNullableFields, type index_d$b_GetOrderPaymentRequestURLRequest as GetOrderPaymentRequestURLRequest, type index_d$b_GetOrderPaymentRequestURLResponse as GetOrderPaymentRequestURLResponse, type index_d$b_GetOrderPaymentRequestURLResponseNonNullableFields as GetOrderPaymentRequestURLResponseNonNullableFields, type IdentificationData$8 as IdentificationData, type IdentificationDataIdOneOf$8 as IdentificationDataIdOneOf, type MessageEnvelope$7 as MessageEnvelope, type index_d$b_OrderPaymentRequest as OrderPaymentRequest, type index_d$b_OrderPaymentRequestExpired as OrderPaymentRequestExpired, type index_d$b_OrderPaymentRequestNonNullableFields as OrderPaymentRequestNonNullableFields, type index_d$b_OrderPaymentRequestPaid as OrderPaymentRequestPaid, type index_d$b_OrderPaymentRequestsQueryBuilder as OrderPaymentRequestsQueryBuilder, type index_d$b_OrderPaymentRequestsQueryResult as OrderPaymentRequestsQueryResult, type Price$2 as Price, type index_d$b_QueryOrderPaymentRequestsRequest as QueryOrderPaymentRequestsRequest, type index_d$b_QueryOrderPaymentRequestsResponse as QueryOrderPaymentRequestsResponse, type index_d$b_QueryOrderPaymentRequestsResponseNonNullableFields as QueryOrderPaymentRequestsResponseNonNullableFields, type RestoreInfo$8 as RestoreInfo, SortOrder$6 as SortOrder, type Sorting$6 as Sorting, type index_d$b_Source as Source, index_d$b_Status as Status, type UpdateExtendedFieldsOptions$2 as UpdateExtendedFieldsOptions, type UpdateExtendedFieldsRequest$2 as UpdateExtendedFieldsRequest, type UpdateExtendedFieldsResponse$2 as UpdateExtendedFieldsResponse, type UpdateExtendedFieldsResponseNonNullableFields$2 as UpdateExtendedFieldsResponseNonNullableFields, type index_d$b_UpdateOrderPaymentRequest as UpdateOrderPaymentRequest, type index_d$b_UpdateOrderPaymentRequestRequest as UpdateOrderPaymentRequestRequest, type index_d$b_UpdateOrderPaymentRequestResponse as UpdateOrderPaymentRequestResponse, type index_d$b_UpdateOrderPaymentRequestResponseNonNullableFields as UpdateOrderPaymentRequestResponseNonNullableFields, WebhookIdentityType$7 as WebhookIdentityType, index_d$b_createOrderPaymentRequest as createOrderPaymentRequest, index_d$b_deleteOrderPaymentRequest as deleteOrderPaymentRequest, index_d$b_getOrderPaymentRequest as getOrderPaymentRequest, index_d$b_getOrderPaymentRequestUrl as getOrderPaymentRequestUrl, index_d$b_queryOrderPaymentRequests as queryOrderPaymentRequests, updateExtendedFields$4 as updateExtendedFields, index_d$b_updateOrderPaymentRequest as updateOrderPaymentRequest };
}

interface OrderTransactions {
    /** Order ID. */
    orderId?: string;
    /** Record of payments made to the merchant. */
    payments?: Payment[];
    /** Record of refunds made to the buyer. */
    refunds?: Refund[];
}
interface Payment extends PaymentPaymentDetailsOneOf {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails;
    /**
     * Payment ID.
     * @readonly
     */
    _id?: string | null;
    /** Date and time the payment was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    _createdDate?: Date | null;
    /**
     * Date and time the payment was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Payment amount. */
    amount?: Price$1;
    /**
     * Whether refunds for this payment are disabled.
     * + `true`: This payment is not refundable.
     * + `false`: This payment may be refunded. However, this ultimately depends on the payment provider.
     */
    refundDisabled?: boolean;
}
/** @oneof */
interface PaymentPaymentDetailsOneOf {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails;
}
interface RegularPaymentDetails extends RegularPaymentDetailsPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails;
    /** Wix Payments order ID. */
    paymentOrderId?: string | null;
    /**
     * Payment gateway's transaction ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `offline_payment` is `false`.
     */
    gatewayTransactionId?: string | null;
    /**
     * Payment method. Non-exhaustive list of supported values:
     * + `CreditCard`, `Alipay`, `AstropayCash`, `AstropayDBT`, `AstropayMBT`, `Bitcoin`, `BitPay`, `Cash`, `ConvenienceStore`, `EPay`, `Fake`, `Giropay`, `IDeal`, `InPerson`, `Klarna`, `MercadoPago`, `Netpay`, `NordeaSolo`, `Offline`, `PagSeguro`, `PayEasy`, `PayPal`, `Paysafecard`, `Paysafecash`, `PointOfSale`, `Poli`, `Privat24`, `Przelewy24`, `RapidTransfer`, `Sepa`, `Skrill`, `Sofort`, `Trustly`, `Neteller`, `Unionpay`, `UniPay`, `Yandex`
     */
    paymentMethod?: string | null;
    /** Transaction ID in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for offline payments. */
    providerTransactionId?: string | null;
    /** Whether the payment was made offline. For example, when using cash or when marked as paid in the Business Manager. */
    offlinePayment?: boolean;
    /** Payment status. */
    status?: TransactionStatus;
    /** Whether there is a payment agreement that allows for future charges. */
    savedPaymentMethod?: boolean;
    /** Authorization details. */
    authorizationDetails?: AuthorizationDetails;
}
/** @oneof */
interface RegularPaymentDetailsPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails;
}
declare enum TransactionStatus {
    UNDEFINED = "UNDEFINED",
    APPROVED = "APPROVED",
    PENDING = "PENDING",
    PENDING_MERCHANT = "PENDING_MERCHANT",
    CANCELED = "CANCELED",
    DECLINED = "DECLINED",
    REFUNDED = "REFUNDED",
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    AUTHORIZED = "AUTHORIZED",
    VOIDED = "VOIDED"
}
interface CreditCardPaymentMethodDetails {
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface AuthorizationDetails {
    /**
     * Whether the authorized payment is of a delayed capture.
     * @readonly
     */
    delayedCapture?: boolean;
    /** Date and time the payment was authorized in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    authorizedDate?: Date | null;
    /**
     * List of captures associated with payment
     * In case of failed it can be replaced with new one with PENDING or SUCCESS statuses
     */
    captures?: AuthorizationCapture[];
    /** Void associated with payment */
    void?: AuthorizationVoid;
    /** Scheduled action for this transaction */
    scheduledAction?: ScheduledAction;
}
interface AuthorizationCapture {
    /**
     * Capture ID.
     * @readonly
     */
    _id?: string | null;
    /** Status of this capture action */
    status?: AuthorizationCaptureStatus;
    /** Amount of this capture */
    amount?: Price$1;
    /** Date and time the capture was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    _createdDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails;
}
declare enum AuthorizationCaptureStatus {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Whether capture operation still in progress */
    PENDING = "PENDING",
    /** The capture operation was succeeded */
    SUCCEEDED = "SUCCEEDED",
    /** The capture operation was failed */
    FAILED = "FAILED"
}
interface Price$1 {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface AuthorizationActionFailureDetails {
    failureCode?: string;
}
interface AuthorizationVoid {
    /** Status of this void action */
    status?: AuthorizationVoidStatus;
    /** Date and time the void was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    voidedDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails;
    /** Reason of void action */
    reason?: Reason;
}
declare enum AuthorizationVoidStatus {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Whether void operation still in progress */
    PENDING = "PENDING",
    /** The void operation was succeeded */
    SUCCEEDED = "SUCCEEDED",
    /** The void operation was failed */
    FAILED = "FAILED"
}
/**
 * Reason the authorization was voided.
 *
 * + `MANUAL`: Authorization was voided by user.
 * + `SCHEDULED`: Authorization passed execution date.
 */
declare enum Reason {
    UNKNOWN_REASON = "UNKNOWN_REASON",
    MANUAL = "MANUAL",
    SCHEDULED = "SCHEDULED"
}
interface ScheduledAction {
    /** type of the action */
    actionType?: ActionType;
    /** the date and time of the action */
    executionDate?: Date | null;
}
declare enum ActionType {
    UNKNOWN_ACTION_TYPE = "UNKNOWN_ACTION_TYPE",
    VOID = "VOID",
    CAPTURE = "CAPTURE"
}
interface GiftCardPaymentDetails {
    /** Gift card payment ID. */
    giftCardPaymentId?: string;
    /** ID of the app that created the gift card. */
    appId?: string;
    /**
     * Whether the gift card is voided.
     * @readonly
     */
    voided?: boolean;
}
interface MembershipPaymentDetails {
    /** Membership ID. */
    membershipId?: string;
    /** ID of the line item this membership applies to. */
    lineItemId?: string;
    /** Payment status. */
    status?: MembershipPaymentStatus;
    /** Membership name. */
    name?: MembershipName$1;
    /** The transaction ID in the membership system. Can be used to void the transaction. */
    externalTransactionId?: string | null;
    /**
     * Whether the membership is voided.
     * @readonly
     */
    voided?: boolean;
    /** ID of the application providing this payment option. */
    providerAppId?: string;
}
declare enum MembershipPaymentStatus {
    /** CHARGED - Payment was charged */
    CHARGED = "CHARGED",
    /** CHARGE_FAILED - The attempt to charge that payment have failed, for example due to lack of credits */
    CHARGE_FAILED = "CHARGE_FAILED"
}
interface MembershipName$1 {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface Refund {
    /**
     * Refund ID.
     * @readonly
     */
    _id?: string;
    /** List of transactions. */
    transactions?: RefundTransaction[];
    /** Refund business details. */
    details?: RefundDetails;
    /** Date and time the refund was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    _createdDate?: Date | null;
}
interface RefundTransaction {
    /** ID of the payment associated with this refund. */
    paymentId?: string;
    /** Refund amount. */
    amount?: Price$1;
    /** Refund status. */
    refundStatus?: RefundStatus;
    /**
     * Payment gateway's refund ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `external_refund` is `false`.
     */
    gatewayRefundId?: string | null;
    /** ID of the refund in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for external refunds. */
    providerRefundId?: string | null;
    /** Whether refund was made externally and manually on the payment provider's side. */
    externalRefund?: boolean;
}
/**
 * Refund transaction status.
 * + `PENDING`: Refund was initiated on payment provider side. PENDING status was assigned by provider.
 * + `SUCCEEDED`: Refund transaction succeeded.
 * + `FAILED`: Refund transaction failed.
 * + `SCHEDULED`: Refund request acknowledged, and will be executed soon.
 * + `STARTED`: Refund was initiated on payment provider side.
 */
declare enum RefundStatus {
    PENDING = "PENDING",
    SUCCEEDED = "SUCCEEDED",
    FAILED = "FAILED",
    SCHEDULED = "SCHEDULED",
    STARTED = "STARTED"
}
/** Business model of a refund request */
interface RefundDetails {
    /** Order line item IDs and quantities that were refunded. */
    items?: RefundItem[];
    /** Whether the shipping fee was also refunded. */
    shippingIncluded?: boolean;
    /** Reason for the refund, provided by customer (optional). */
    reason?: string | null;
}
interface RefundItem {
    /** Line item ID the refunded line item. */
    lineItemId?: string;
    /** Line item quantity refunded. */
    quantity?: number;
}
interface LineItemRefund {
}
interface AdditionalFeeRefund {
}
interface ShippingRefund {
}
interface AggregatedRefundSummary {
}
interface SnapshotMessage {
    _id?: string;
    opType?: number;
}
interface IndexingMessage {
    _id?: string;
    opType?: number;
    requiredVersions?: string[];
}
interface DiffmatokyPayload$1 {
    left?: string;
    right?: string;
    compareChannel?: string;
    entityId?: string;
    errorInformation?: ErrorInformation$1;
    tags?: string[];
}
interface ErrorInformation$1 {
    stackTrace?: string;
}
interface OrderRefunded {
    /**
     * Refund ID.
     * @readonly
     */
    refundId?: string;
    /**
     * Refunded order data.
     * @readonly
     */
    order?: Order;
}
interface Order {
    /**
     * Order ID (auto-generated upon order creation).
     * @readonly
     */
    _id?: string | null;
    /**
     * Order number displayed in the owner's store (auto-generated).
     * @readonly
     */
    number?: number;
    /**
     * Order creation date and time.
     * @readonly
     */
    dateCreated?: Date | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /** Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format. */
    currency?: string | null;
    /** Weight unit used in this store. */
    weightUnit?: WeightUnit$2;
    /** Totals for order's line items. */
    totals?: Totals;
    /** Billing information. */
    billingInfo?: BillingInfo;
    /** Shipping information. */
    shippingInfo?: ShippingInfo;
    /** A note added by the buyer. */
    buyerNote?: string | null;
    /**
     * Deprecated.
     * @readonly
     * @deprecated
     */
    read?: boolean;
    /**
     * Whether or not the order was archived.
     * @readonly
     */
    archived?: boolean;
    /** Current status of the payment. */
    paymentStatus?: PaymentStatus;
    /**
     * Order's current fulfillment status (whether the order received a tracking number or was delivered/picked up).
     * @readonly
     */
    fulfillmentStatus?: FulfillmentStatus;
    /** Line items ordered. */
    lineItems?: LineItem$1[];
    /**
     * Log of updates related to the order.
     * @readonly
     */
    activities?: Activity[];
    /** Invoice information. */
    invoiceInfo?: V2InvoiceInfo;
    /**
     * Order fulfillment information.
     * @readonly
     */
    fulfillments?: Fulfillment[];
    /** Discount information. */
    discount?: Discount;
    /** Custom field information. */
    customField?: CustomField;
    /** Shopping cart ID. */
    cartId?: string | null;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo;
    /**
     * Identity of the order's initiator.
     * @readonly
     */
    enteredBy?: EnteredBy;
    /**
     * Date and time of latest update.
     * @readonly
     */
    lastUpdated?: Date | null;
    /** Subscription information. */
    subscriptionInfo?: SubscriptionInfo;
    /**
     * Order’s unique numeric ID.
     * Primarily used for sorting and filtering when crawling all orders.
     * @readonly
     */
    numericId?: string;
    /**
     * Refund information.
     * @readonly
     */
    refunds?: V2Refund[];
}
/** Buyer Info */
interface BuyerInfo {
    /** Wix customer ID */
    _id?: string | null;
    /**
     * Deprecated (use identityType instead)
     * @readonly
     * @deprecated
     */
    type?: IdentityType$2;
    /** Customer type */
    identityType?: IdentityType$2;
    /**
     * Customer's first name
     * @readonly
     */
    firstName?: string;
    /**
     * Customer's last name
     * @readonly
     */
    lastName?: string;
    /**
     * Customer's phone number
     * @readonly
     */
    phone?: string | null;
    /**
     * Customer's email address
     * @readonly
     */
    email?: string;
}
declare enum IdentityType$2 {
    UNSPECIFIED_IDENTITY_TYPE = "UNSPECIFIED_IDENTITY_TYPE",
    /** Site member */
    MEMBER = "MEMBER",
    /** Contact */
    CONTACT = "CONTACT"
}
declare enum WeightUnit$2 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface Totals {
    /** Subtotal of all the line items, before tax. */
    subtotal?: string;
    /** Total shipping price, before tax. */
    shipping?: string | null;
    /** Total tax. */
    tax?: string | null;
    /** Total calculated discount value. */
    discount?: string | null;
    /** Total price charged. */
    total?: string;
    /**
     * Total items weight.
     * @readonly
     */
    weight?: string;
    /**
     * Total number of line items.
     * @readonly
     */
    quantity?: number;
    /**
     * Total refund.
     * @readonly
     */
    refund?: string | null;
    /** Total calculated gift card value. */
    giftCard?: string | null;
}
interface BillingInfo {
    /** Payment method used for this order */
    paymentMethod?: string | null;
    /**
     * Deprecated (use paymentProviderTransactionId instead)
     * @readonly
     * @deprecated
     */
    externalTransactionId?: string | null;
    /** Transaction ID from payment provider (e.g., PayPal, Square, Stripe) transaction ID */
    paymentProviderTransactionId?: string | null;
    /** Transaction ID from payment gateway (e.g., Wix Payments) */
    paymentGatewayTransactionId?: string | null;
    /** Full billing address */
    address?: Address$4;
    /**
     * Payment date
     * @readonly
     */
    paidDate?: Date | null;
    /** Whether order can be refunded by payment provider (manually or automatic) */
    refundableByPaymentProvider?: boolean | null;
}
interface Address$4 extends AddressAddressLine1OptionsOneOf {
    /** Address line 1 (free text) */
    addressLine1?: string;
    /** Address line 1 (street) */
    street?: Street;
    /** Addressee name */
    fullName?: FullName;
    /** Country code (2 letters) */
    country?: string | null;
    /** State or district */
    subdivision?: string | null;
    /** City name */
    city?: string | null;
    /** ZIP/postal code */
    zipCode?: string | null;
    /** Phone number */
    phone?: string | null;
    /** Company name */
    company?: string | null;
    /** Email address */
    email?: string | null;
    /** address line */
    addressLine2?: string | null;
    /** Tax information (for Brazil only) */
    vatId?: VatId$1;
}
/** @oneof */
interface AddressAddressLine1OptionsOneOf {
    /** Address line 1 (free text) */
    addressLine1?: string;
    /** Address line 1 (street) */
    street?: Street;
}
interface FullName {
    /** Customer's first name */
    firstName?: string;
    /** Customer's last name */
    lastName?: string;
}
interface Street {
    /** Street number */
    number?: string;
    /** Street name */
    name?: string;
}
interface VatId$1 {
    /** Customer's tax ID. */
    number?: string;
    /**
     * Tax type.
     * + `CPF`: For individual tax payers.
     * + `CNPJ`: For corporations.
     */
    type?: VatType$1;
}
/** Brazilian tax info types */
declare enum VatType$1 {
    /** When the tax info type can't be classified, due to an error */
    UNSPECIFIED_TAX_TYPE = "UNSPECIFIED_TAX_TYPE",
    /** CPF - for individual tax payers */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface ShippingInfo extends ShippingInfoDetailsOneOf {
    /** Shipment details (when this object describes shipment). */
    shipmentDetails?: ShipmentDetails;
    /** Pickup details (when this object describes pickup). */
    pickupDetails?: PickupDetails$2;
    /** Shipping option name. */
    deliveryOption?: string;
    /** Shipping option delivery time. */
    estimatedDeliveryTime?: string | null;
    /**
     * Deprecated - Latest expected delivery date.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Shipping region. */
    shippingRegion?: string | null;
    /**
     * Unique code of provided shipping option. For example, `"usps_std_overnight"`.
     * @readonly
     */
    code?: string | null;
}
/** @oneof */
interface ShippingInfoDetailsOneOf {
    /** Shipment details (when this object describes shipment). */
    shipmentDetails?: ShipmentDetails;
    /** Pickup details (when this object describes pickup). */
    pickupDetails?: PickupDetails$2;
}
interface ShipmentDetails {
    /** Shipping destination address. */
    address?: Address$4;
    /**
     * Deprecated (use fulfillments instead).
     * @readonly
     * @deprecated
     */
    trackingInfo?: TrackingInfo;
    /** Discount applied for shipping. */
    discount?: string | null;
    /** Tax applied for shipping. */
    tax?: string | null;
    /** Price data. */
    priceData?: ShippingPriceData;
}
interface TrackingInfo {
    /**
     * Tracking number
     * @readonly
     */
    trackingNumber?: string | null;
    /**
     * Shipping provider
     * @readonly
     */
    shippingProvider?: string | null;
    /**
     * Tracking link
     * @readonly
     */
    trackingLink?: string | null;
}
interface ShippingPriceData {
    /** Whether tax is included in the price. */
    taxIncludedInPrice?: boolean;
    /** Shipping price. */
    price?: string | null;
}
interface PickupDetails$2 {
    /** Pickup address. */
    pickupAddress?: PickupAddress;
    /**
     * Deprecated (use billingInfo instead).
     * @readonly
     * @deprecated
     */
    buyerDetails?: BuyerDetails;
    /** Store owner's pickup instructions. */
    pickupInstructions?: string | null;
}
interface PickupAddress {
    /** Country code (3 letters) */
    country?: string;
    /** State/District */
    subdivision?: string | null;
    /** Address */
    addressLine1?: string;
    /** City */
    city?: string;
    /** ZIP/postal code */
    zipCode?: string;
}
interface BuyerDetails {
    /** Addressee name */
    fullName?: FullName;
    /** Email address */
    email?: string;
    /** Phone number */
    phone?: string;
}
/** This might be extended in the future with pending orders statuses */
declare enum PaymentStatus {
    /** Payment status can't be classified, due to an error */
    UNSPECIFIED_PAYMENT_STATUS = "UNSPECIFIED_PAYMENT_STATUS",
    /** Order is pending response from the payment provider */
    PENDING = "PENDING",
    /** Order is marked as not paid, and can be marked as paid later on. This is relevant for POS and offline orders */
    NOT_PAID = "NOT_PAID",
    /** The order is marked as paid */
    PAID = "PAID",
    /** Order was refunded, refund amount less than order total price */
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    /** Full order total price was refunded */
    FULLY_REFUNDED = "FULLY_REFUNDED",
    /** At least one payment was received and approved, covering less than total price amount */
    PARTIALLY_PAID = "PARTIALLY_PAID"
}
declare enum FulfillmentStatus {
    /** None of the order items are fulfilled */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FULFILLED = "FULFILLED",
    /** Order is canceled */
    CANCELED = "CANCELED",
    /** Some, but not all of the order items are fulfilled */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
interface LineItem$1 {
    /**
     * Line item ID (auto-generated, stable within this order only)
     * @readonly
     */
    index?: number | null;
    /** Line item quantity */
    quantity?: number;
    /**
     * Deprecated (use priceData instead)
     * @readonly
     * @deprecated
     */
    price?: string | null;
    /** Line item name */
    name?: string | null;
    /** Product name, translated into the customer's language */
    translatedName?: string | null;
    /** Line item product ID (optional for POS orders) */
    productId?: string | null;
    /**
     * Deprecated (use priceData instead)
     * @readonly
     * @deprecated
     */
    totalPrice?: string | null;
    /** Line item type (may be extended) */
    lineItemType?: LineItemType;
    /** Line item options ordered */
    options?: OptionSelection[];
    /** Line item custom text field entry */
    customTextFields?: CustomTextFieldSelection[];
    /** Line item weight */
    weight?: string | null;
    /** Primary media for preview of the line item */
    mediaItem?: MediaItem;
    /** Line item SKU */
    sku?: string | null;
    /** Line item notes */
    notes?: string | null;
    /** Line item variantId (from Stores Catalog) */
    variantId?: string | null;
    /** Line item fulfillerId from stores fulfillers. No value equals self fulfilled */
    fulfillerId?: string | null;
    /** Discount applied for this line item */
    discount?: string | null;
    /** Tax applied for this line item */
    tax?: string | null;
    /**
     * Deprecated (use priceData instead)
     * @readonly
     * @deprecated
     */
    taxIncludedInPrice?: boolean;
    /** Tax group ID */
    taxGroupId?: string | null;
    /** Price data */
    priceData?: LineItemPriceData;
}
declare enum LineItemType {
    /** Line item type can't be classified, due to an error */
    UNSPECIFIED_LINE_ITEM_TYPE = "UNSPECIFIED_LINE_ITEM_TYPE",
    /** Physical item type */
    PHYSICAL = "PHYSICAL",
    /** Digital item type */
    DIGITAL = "DIGITAL",
    /** Custom item price */
    CUSTOM_AMOUNT_ITEM = "CUSTOM_AMOUNT_ITEM"
}
interface OptionSelection {
    /** Option name */
    option?: string;
    /** Selected choice for this option */
    selection?: string;
}
interface CustomTextFieldSelection {
    /** Custom text field name */
    title?: string;
    /** Custom text field value */
    value?: string;
}
interface MediaItem {
    /**
     * Media type
     * @readonly
     */
    mediaType?: MediaItemType;
    /**
     * Media URL
     * @readonly
     */
    url?: string;
    /**
     * Media item width
     * @readonly
     */
    width?: number;
    /**
     * Media item height
     * @readonly
     */
    height?: number;
    /**
     * Deprecated
     * @deprecated
     */
    mediaId?: string | null;
    /** Media ID (for media items previously saved in Wix Media) */
    _id?: string | null;
    /** Media external URL */
    externalImageUrl?: string | null;
    /** Alternative text for presentation when media cannot be displayed */
    altText?: string | null;
}
declare enum MediaItemType {
    /** Media item type can't be classified, due to an error */
    UNSPECIFIED_MEDIA_TYPE_ITEM = "UNSPECIFIED_MEDIA_TYPE_ITEM",
    /** Image item type */
    IMAGE = "IMAGE"
}
interface LineItemPriceData {
    /** Whether tax is included in the price set for this line item */
    taxIncludedInPrice?: boolean;
    /** Line item price */
    price?: string;
    /**
     * Total price charged to the customer (per line item) after computation of quantity and discount
     * @readonly
     */
    totalPrice?: string | null;
}
interface DigitalFile {
    /** id of the secure file in media */
    fileId?: string;
}
interface Activity {
    /**
     * Activity item type
     * @readonly
     */
    type?: ActivityType;
    /**
     * Activity item author
     * @readonly
     */
    author?: string | null;
    /**
     * Comment added to activity item
     * @readonly
     */
    message?: string | null;
    /**
     * Activity item timestamp
     * @readonly
     */
    timestamp?: Date | null;
}
declare enum ActivityType {
    /** Activity item type can't be classified, due to an error */
    UNSPECIFIED_ORDER_HISTORY_ITEM_TYPE = "UNSPECIFIED_ORDER_HISTORY_ITEM_TYPE",
    /** Store owner added a comment */
    MERCHANT_COMMENT = "MERCHANT_COMMENT",
    /** Order placed */
    ORDER_PLACED = "ORDER_PLACED",
    /** Order marked as paid, either by the store owner (for offline orders), or when an online transaction was confirmed */
    ORDER_PAID = "ORDER_PAID",
    /** Order shipping status set as fulfilled */
    ORDER_FULFILLED = "ORDER_FULFILLED",
    /** Order shipping status set as not fulfilled */
    ORDER_NOT_FULFILLED = "ORDER_NOT_FULFILLED",
    /** A download link was sent (relevant for orders with digital line items) */
    DOWNLOAD_LINK_SENT = "DOWNLOAD_LINK_SENT",
    /** An email notification for pickup was sent */
    PICKUP_READY_EMAIL_SENT = "PICKUP_READY_EMAIL_SENT",
    /** Shipping tracking number was set */
    TRACKING_NUMBER_ADDED = "TRACKING_NUMBER_ADDED",
    /** Shipping tracking number was edited */
    TRACKING_NUMBER_EDITED = "TRACKING_NUMBER_EDITED",
    /** Shipping tracking link was set */
    TRACKING_LINK_WAS_SET = "TRACKING_LINK_WAS_SET",
    /** An email confirmation of order shipment was sent */
    SHIPPING_CONFIRMATION_EMAIL_SENT = "SHIPPING_CONFIRMATION_EMAIL_SENT",
    /** Invoice was set in the order */
    INVOICE_WAS_SET = "INVOICE_WAS_SET",
    /** Invoice was removed from the order */
    INVOICE_WAS_REMOVED = "INVOICE_WAS_REMOVED",
    /** Invoice was sent to customer via email */
    INVOICE_WAS_SENT = "INVOICE_WAS_SENT",
    /** Email was sent to fulfiller */
    FULFILLER_EMAIL_SENT = "FULFILLER_EMAIL_SENT",
    /** Shipping address was updated */
    SHIPPING_ADDRESS_EDITED = "SHIPPING_ADDRESS_EDITED",
    /** Order email was updated */
    EMAIL_EDITED = "EMAIL_EDITED",
    /** Order partially paid. During the checkout for orders with deposit items. */
    ORDER_PARTIALLY_PAID = "ORDER_PARTIALLY_PAID"
}
interface V2InvoiceInfo {
    /** Invoice ID */
    _id?: string;
    /** Invoice source */
    source?: InvoiceSource;
}
declare enum InvoiceSource {
    /** Invoice source can't be classified, due to an error */
    UNSPECIFIED_INVOICE_SOURCE = "UNSPECIFIED_INVOICE_SOURCE",
    /** Invoice created using the Invoices API */
    WIX = "WIX"
}
interface Fulfillment {
    /**
     * Fulfillment ID (auto generated upon fulfillment creation).
     * @readonly
     */
    _id?: string | null;
    /**
     * Fulfillment creation date and time.
     * @readonly
     */
    dateCreated?: Date | null;
    /** Information about the line items in the fulfilled order. */
    lineItems?: FulfillmentLineItem[];
    /** Tracking information. */
    trackingInfo?: FulfillmentTrackingInfo;
}
interface FulfillmentLineItem {
    /** Line item ID (mirrors the line item index of the order). */
    index?: number;
    /**
     * Line item quantity.
     * On creation, if this parameter isn't passed, the new fulfillment will automatically include all items of this line item that have not already been linked to a fulfillment.
     * If the order does not have the requested quantity of line items available to add to this fulfillment, the fulfillment will not be created and an error will be returned.
     * This property will always have a value when returned.
     */
    quantity?: number | null;
}
interface FulfillmentTrackingInfo {
    /** Tracking number. */
    trackingNumber?: string;
    /**
     * Shipping provider. Using the following shipping providers will allow for autofilling the tracking link:
     * * `fedex`
     * * `ups`
     * * `usps`
     * * `dhl`
     * * `canadaPost`
     */
    shippingProvider?: string;
    /** Tracking link - autofilled if using a predefined shipping provider, otherwise provided on creation. */
    trackingLink?: string | null;
}
interface Discount {
    /**
     * Deprecated (use Totals.discount instead)
     * @readonly
     * @deprecated
     */
    value?: string;
    /** Applied coupon */
    appliedCoupon?: AppliedCoupon;
}
interface AppliedCoupon {
    /** Coupon ID */
    couponId?: string;
    /** Coupon name */
    name?: string;
    /** Coupon code */
    code?: string;
}
/** Custom field */
interface CustomField {
    /** Free text that the customer entered in the custom field during the checkout process */
    value?: string;
    /** Title for the custom field */
    title?: string;
    /** The title translated according to the buyer language */
    translatedTitle?: string;
}
interface ChannelInfo {
    /** Sales channel that submitted the order */
    type?: ChannelType;
    /** Reference to an order ID from an external system, as defined in channelInfo (e.g., eBay or Amazon) */
    externalOrderId?: string | null;
    /** URL to the order in the external system, as defined in channelInfo (e.g., eBay or Amazon) */
    externalOrderUrl?: string | null;
}
declare enum ChannelType {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface EnteredBy {
    _id?: string;
    identityType?: EnteredByIdentityType;
}
declare enum EnteredByIdentityType {
    USER = "USER",
    MEMBER = "MEMBER",
    CONTACT = "CONTACT",
    APP = "APP"
}
interface SubscriptionInfo {
    /** Subscription ID. */
    _id?: string | null;
    /** Current cycle number. For example, if the subscription is in the 3rd month of a 4-month subscription, the value will be `3`. */
    cycleNumber?: number;
    /** Subscription settings. */
    subscriptionSettings?: SubscriptionSettings$1;
    /** Subscription options info. */
    subscriptionOptionInfo?: SubscriptionOptionInfo;
}
interface SubscriptionSettings$1 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$1;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$1 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface SubscriptionOptionInfo {
    /** Subscription option title. */
    title?: string;
    /** Subscription option description. */
    description?: string | null;
}
interface V2Refund {
    /** Refund created timestamp. */
    dateCreated?: Date | null;
    /** Refund amount. */
    amount?: string;
    /** Reason for refund, given by user (optional). */
    reason?: string | null;
    /** Payment provider transaction ID. Used to find refund transaction info on the payment provider's side. */
    paymentProviderTransactionId?: string | null;
    /** Refund ID. */
    _id?: string;
    /** Whether refund was made externally (on the payment provider's side). */
    externalRefund?: boolean;
}
interface GiftCard$1 {
    transactionId?: string;
    /**
     * giftcard internal ID
     * @deprecated giftcard internal ID
     * @targetRemovalDate 2024-12-31
     */
    _id?: string;
    /** giftcard provider appid */
    providerId?: string;
    /** giftcard amount */
    amount?: string;
}
/** Triggered when a payment is updated. */
interface PaymentsUpdated {
    /** Updated order transactions. */
    orderTransactions?: OrderTransactions;
    /** List of IDs of the updated payments. */
    paymentIds?: string[];
    /** List of IDs of the updated refunds. */
    refundIds?: string[];
}
interface RefundCompleted {
    /** Order ID. */
    orderId?: string;
    /** Completed refund. */
    refund?: Refund;
    /** Refund side effects. */
    sideEffects?: RefundSideEffects;
    /** Order transactions after refund is completed. */
    orderTransactions?: OrderTransactions;
}
interface RefundSideEffects {
    /** Inventory restock details as part of this refund. */
    restockInfo?: RestockInfo;
    /** Whether to send a refund confirmation email to the customer. */
    sendOrderRefundedEmail?: boolean;
    /** Custom message added to the refund confirmation email. */
    customMessage?: string | null;
}
interface RestockInfo {
    /** Restock type. */
    type?: RestockType;
    /** Restocked line items and quantities. Only relevant for `{"type": "SOME_ITEMS"}`. */
    items?: RestockItem[];
}
declare enum RestockType {
    NO_ITEMS = "NO_ITEMS",
    ALL_ITEMS = "ALL_ITEMS",
    SOME_ITEMS = "SOME_ITEMS"
}
interface RestockItem {
    /** ID of the line item being restocked. */
    lineItemId?: string;
    /** Line item quantity being restocked. */
    quantity?: number;
}
interface ListTransactionsForSingleOrderRequest {
    /** Order ID. */
    orderId: string;
}
interface ListTransactionsForSingleOrderResponse {
    /** Order ID and its associated transactions. */
    orderTransactions?: OrderTransactions;
}
interface ListTransactionsForMultipleOrdersRequest {
    /** Order IDs for which to retrieve transactions. */
    orderIds: string[];
}
interface ListTransactionsForMultipleOrdersResponse {
    /** List of order IDs and their associated transactions. */
    orderTransactions?: OrderTransactions[];
}
interface AddPaymentsRequest {
    /** Order ID. */
    orderId: string;
    /** Payments to be added to order. */
    payments: Payment[];
}
interface AddPaymentsResponse {
    /** Order ID and its associated transactions. */
    orderTransactions?: OrderTransactions;
    /** IDs of added order payments. */
    paymentsIds?: string[];
}
interface AddRefundRequest {
    /** Order ID this refunds related to */
    orderId?: string;
    /** Refund with refund transactions to be added to order. */
    refund?: Refund;
    /** Side effect details related to refund */
    sideEffects?: RefundSideEffects;
}
interface AddRefundResponse {
    /** Order ID and its associated transactions. */
    orderTransactions?: OrderTransactions;
    /** Created refund ID */
    refundId?: string;
}
interface UpdatePaymentStatusRequest {
    /** Order ID. */
    orderId: string;
    /** Payment ID. */
    paymentId: string;
    /** Payment status. */
    status?: TransactionStatus;
}
interface UpdatePaymentStatusResponse {
    /** Order ID and its associated transactions after update. */
    orderTransactions?: OrderTransactions;
}
interface BulkUpdatePaymentStatusesRequest {
    /** Order and payment IDs for which to update payment status. */
    paymentAndOrderIds: PaymentAndOrderId[];
    /** Whether to return the full payment entity (`results.item`) in the response. */
    returnFullEntity?: boolean;
    /** Payment status. */
    status?: TransactionStatus;
}
interface PaymentAndOrderId {
    /** Order ID. */
    orderId?: string;
    /**
     * Payment ID.
     * todo: remove comment once UI will use BulkMarkOrderAsPaid
     */
    paymentId?: string;
}
interface BulkUpdatePaymentStatusesResponse {
    /** Bulk operation results. */
    results?: BulkPaymentResult[];
    /** Bulk operation metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkPaymentResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata;
    /** Updated payment. Returned if `return_full_entity` set to `true`. */
    item?: Payment;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$3;
}
interface ApplicationError$3 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface UpdateRefundTransactionRequest {
}
interface UpdateRefundTransactionResponse {
}
interface UpdatePaymentsRequest {
}
interface MaskedPayment {
}
interface UpdatePaymentsResponse {
}
interface QueryOrderTransactionsRequest {
}
interface CursorQuery$3 extends CursorQueryPagingMethodOneOf$3 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$5;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$5[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$3 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$5;
}
interface Sorting$5 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$5;
}
declare enum SortOrder$5 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$5 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryOrderTransactionsResponse {
}
interface CursorPagingMetadata$4 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$5;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$5 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface TriggerRefundRequest {
    /** The order this refund related to */
    orderId?: string;
    /**
     * Refund operations information
     * Currently, only *one* payment refund is supported per request
     */
    payments?: PaymentRefund[];
    /** Business model of a refund */
    details?: RefundDetails;
    /** How to restock items as part of this refund */
    restockInfo?: RestockInfo;
    /** Should send a confirmation mail to the customer */
    sendOrderRefundedEmail?: boolean;
    /** Personal note added to the email */
    customMessage?: string | null;
}
interface PaymentRefund {
    /** Specific payment within the order to refund */
    paymentId?: string;
    /** Refund amount. Not relevant for membership and gift card refunds. */
    amount?: Price$1;
    /**
     * Whether refund is made externally and manually (on the payment provider's side)
     * When false (default), the payment gateway will be called in order to make an actual refund, and then the payment will be marked as refunded.
     * When true, the payment will only be *marked* as refunded, and no actual refund will be performed.
     */
    externalRefund?: boolean;
}
interface TriggerRefundResponse {
    /** All order's transactions after the refunds were added */
    orderTransactions?: OrderTransactions;
    /** Created refund ID */
    refundId?: string;
}
interface CalculateRefundRequest {
    /** Order ID */
    orderId?: string;
    /** Refunded line items and quantity */
    refundItems?: CalculateRefundItemRequest[];
    /** Should include shipping in refund calculation */
    refundShipping?: boolean;
}
interface CalculateRefundItemRequest {
    /** ID of the line item being refunded */
    lineItemId?: string;
    /** How much of that line item is being refunded */
    quantity?: number;
    /** Should this item be restocked (used for validation purposes) */
    restock?: boolean;
}
interface CalculateRefundResponse {
    /** Total refundable amount */
    total?: string;
    /** Tax cost of the order */
    tax?: string;
    /** Discount given for this order */
    discount?: string;
    /** Total cost of the order (without tax) */
    subtotal?: string;
    /** Previous refund given on that order */
    previouslyRefundedAmount?: string | null;
    /** The refundable items of that order */
    items?: CalculateRefundItemResponse[];
}
interface CalculateRefundItemResponse {
    /** Line item ID */
    lineItemId?: string;
    /** The line item's price */
    lineItemPrice?: number;
}
interface GetRefundabilityStatusRequest {
    /** Order ID. */
    orderId?: string;
}
interface GetRefundabilityStatusResponse {
    /** Refundability details. */
    refundabilities?: Refundability[];
    /** Whether the order supports refunding per item. */
    refundablePerItem?: boolean;
}
interface Refundability extends RefundabilityAdditionalRefundabilityInfoOneOf {
    /** Reason why payment is not refundable. */
    nonRefundableReason?: NonRefundableReason;
    /** Reason why payment is only refundable manually. */
    manuallyRefundableReason?: ManuallyRefundableReason;
    /** Payment ID. */
    paymentId?: string;
    /** Payment refundability status. */
    refundabilityStatus?: RefundableStatus;
    /** Link to payment provider dashboard. */
    providerLink?: string | null;
}
/** @oneof */
interface RefundabilityAdditionalRefundabilityInfoOneOf {
    /** Reason why payment is not refundable. */
    nonRefundableReason?: NonRefundableReason;
    /** Reason why payment is only refundable manually. */
    manuallyRefundableReason?: ManuallyRefundableReason;
}
declare enum RefundableStatus {
    NOT_REFUNDABLE = "NOT_REFUNDABLE",
    MANUAL = "MANUAL",
    REFUNDABLE = "REFUNDABLE"
}
declare enum NonRefundableReason {
    NONE = "NONE",
    ALREADY_REFUNDED = "ALREADY_REFUNDED",
    PROVIDER_IS_DOWN = "PROVIDER_IS_DOWN",
    INTERNAL_ERROR = "INTERNAL_ERROR",
    NOT_PAID = "NOT_PAID",
    ACCESS_DENIED = "ACCESS_DENIED",
    ZERO_PRICE = "ZERO_PRICE",
    DISABLED_BY_PROVIDER = "DISABLED_BY_PROVIDER",
    PARTIALLY_PAID = "PARTIALLY_PAID",
    DEPOSIT_ONLINE_ITEM = "DEPOSIT_ONLINE_ITEM",
    PENDING_REFUND = "PENDING_REFUND",
    FORBIDDEN = "FORBIDDEN"
}
declare enum ManuallyRefundableReason {
    EXPIRED = "EXPIRED",
    NOT_SUPPORTED = "NOT_SUPPORTED",
    NOT_FOUND = "NOT_FOUND",
    OFFLINE = "OFFLINE"
}
interface ListInvoicesForSingleOrderRequest {
    /** Order ID. */
    orderId?: string;
}
interface ListInvoicesForSingleOrderResponse {
    /** List of invoices. */
    invoices?: InvoiceInfo[];
}
interface InvoiceInfo {
    /** Invoice ID. */
    _id?: string;
    /** ID of the app that set the invoice. */
    appId?: string;
    /**
     * Invoice URL.
     * @deprecated
     */
    url?: string | null;
    /**
     * Invoice creation date and time.
     * @deprecated
     */
    _createdDate?: Date | null;
}
interface ListInvoicesForMultipleOrdersRequest {
    /** Order IDs for which to retrieve invoices. */
    orderIds?: string[];
}
interface ListInvoicesForMultipleOrdersResponse {
    /** List of order IDs and their associated invoices. */
    invoicesForOrder?: InvoicesForOrder[];
}
interface InvoicesForOrder {
    /** Order ID. */
    orderId?: string;
    /** Invoices info. */
    invoicesInfo?: InvoiceInfo[];
}
interface GenerateInvoiceRequest {
    /** Order ID. */
    orderId?: string;
}
interface GenerateInvoiceResponse {
    /** Invoice ID. */
    invoiceId?: string;
}
interface BulkGenerateInvoicesRequest {
    /** Order IDs. */
    orderIds?: string[];
}
interface BulkGenerateInvoicesResponse {
    results?: BulkInvoiceResult[];
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkInvoiceResult {
    itemMetadata?: ItemMetadata;
    item?: InvoiceForOrder;
}
interface InvoiceForOrder {
    /** Order ID. */
    orderId?: string;
    /** Invoice ID. */
    invoiceId?: string;
}
interface AddInvoiceToOrderRequest {
    /** Order ID. */
    orderId?: string;
    /** Invoice info. */
    invoiceInfo?: InvoiceInfo;
}
interface AddInvoiceToOrderResponse {
    /** List of order invoices. */
    orderInvoices?: InvoiceInfo[];
}
interface DomainEvent$7 extends DomainEventBodyOneOf$7 {
    createdEvent?: EntityCreatedEvent$7;
    updatedEvent?: EntityUpdatedEvent$7;
    deletedEvent?: EntityDeletedEvent$7;
    actionEvent?: ActionEvent$7;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$7 {
    createdEvent?: EntityCreatedEvent$7;
    updatedEvent?: EntityUpdatedEvent$7;
    deletedEvent?: EntityDeletedEvent$7;
    actionEvent?: ActionEvent$7;
}
interface EntityCreatedEvent$7 {
    entity?: string;
}
interface RestoreInfo$7 {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$7 {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$7 {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$7 {
    body?: string;
}
interface MessageEnvelope$6 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$7;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$7 extends IdentificationDataIdOneOf$7 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$6;
}
/** @oneof */
interface IdentificationDataIdOneOf$7 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$6 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface PriceNonNullableFields$1 {
    amount: string;
    formattedAmount: string;
}
interface AuthorizationActionFailureDetailsNonNullableFields {
    failureCode: string;
}
interface AuthorizationCaptureNonNullableFields {
    status: AuthorizationCaptureStatus;
    amount?: PriceNonNullableFields$1;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields;
}
interface AuthorizationVoidNonNullableFields {
    status: AuthorizationVoidStatus;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields;
    reason: Reason;
}
interface ScheduledActionNonNullableFields {
    actionType: ActionType;
}
interface AuthorizationDetailsNonNullableFields {
    delayedCapture: boolean;
    captures: AuthorizationCaptureNonNullableFields[];
    void?: AuthorizationVoidNonNullableFields;
    scheduledAction?: ScheduledActionNonNullableFields;
}
interface RegularPaymentDetailsNonNullableFields {
    offlinePayment: boolean;
    status: TransactionStatus;
    savedPaymentMethod: boolean;
    authorizationDetails?: AuthorizationDetailsNonNullableFields;
}
interface GiftCardPaymentDetailsNonNullableFields {
    giftCardPaymentId: string;
    giftCardId: string;
    appId: string;
    voided: boolean;
}
interface MembershipNameNonNullableFields$1 {
    original: string;
}
interface MembershipPaymentDetailsNonNullableFields {
    membershipId: string;
    lineItemId: string;
    status: MembershipPaymentStatus;
    name?: MembershipNameNonNullableFields$1;
    voided: boolean;
    providerAppId: string;
}
interface PaymentNonNullableFields {
    regularPaymentDetails?: RegularPaymentDetailsNonNullableFields;
    giftcardPaymentDetails?: GiftCardPaymentDetailsNonNullableFields;
    membershipPaymentDetails?: MembershipPaymentDetailsNonNullableFields;
    amount?: PriceNonNullableFields$1;
    refundDisabled: boolean;
}
interface RefundTransactionNonNullableFields {
    paymentId: string;
    amount?: PriceNonNullableFields$1;
    refundStatus: RefundStatus;
    externalRefund: boolean;
}
interface RefundItemNonNullableFields {
    lineItemId: string;
    quantity: number;
}
interface LineItemRefundNonNullableFields {
    lineItemId: string;
    quantity: number;
}
interface AdditionalFeeRefundNonNullableFields {
    additionalFeeId: string;
    amount?: PriceNonNullableFields$1;
}
interface ShippingRefundNonNullableFields {
    amount?: PriceNonNullableFields$1;
}
interface RefundDetailsNonNullableFields {
    items: RefundItemNonNullableFields[];
    shippingIncluded: boolean;
    lineItems: LineItemRefundNonNullableFields[];
    additionalFees: AdditionalFeeRefundNonNullableFields[];
    shipping?: ShippingRefundNonNullableFields;
}
interface AggregatedRefundSummaryNonNullableFields {
    requestedRefund?: PriceNonNullableFields$1;
    pendingRefund?: PriceNonNullableFields$1;
    refunded?: PriceNonNullableFields$1;
    failedRefundAmount?: PriceNonNullableFields$1;
    pending: boolean;
}
interface RefundNonNullableFields {
    _id: string;
    transactions: RefundTransactionNonNullableFields[];
    details?: RefundDetailsNonNullableFields;
    summary?: AggregatedRefundSummaryNonNullableFields;
}
interface OrderTransactionsNonNullableFields {
    orderId: string;
    payments: PaymentNonNullableFields[];
    refunds: RefundNonNullableFields[];
}
interface ListTransactionsForSingleOrderResponseNonNullableFields {
    orderTransactions?: OrderTransactionsNonNullableFields;
}
interface ListTransactionsForMultipleOrdersResponseNonNullableFields {
    orderTransactions: OrderTransactionsNonNullableFields[];
}
interface AddPaymentsResponseNonNullableFields {
    orderTransactions?: OrderTransactionsNonNullableFields;
    paymentsIds: string[];
}
interface UpdatePaymentStatusResponseNonNullableFields {
    orderTransactions?: OrderTransactionsNonNullableFields;
}
interface ApplicationErrorNonNullableFields$3 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$3;
}
interface BulkPaymentResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
    item?: PaymentNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkUpdatePaymentStatusesResponseNonNullableFields {
    results: BulkPaymentResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface UpdatePaymentStatusIdentifiers {
    /** Payment ID. */
    paymentId: string;
    /** Order ID. */
    orderId: string;
}
interface UpdatePaymentStatusOptions {
    /** Payment status. */
    status?: TransactionStatus;
}
interface BulkUpdatePaymentStatusesOptions {
    /** Whether to return the full payment entity (`results.item`) in the response. */
    returnFullEntity?: boolean;
    /** Payment status. */
    status?: TransactionStatus;
}

declare function listTransactionsForSingleOrder$1(httpClient: HttpClient): ListTransactionsForSingleOrderSignature;
interface ListTransactionsForSingleOrderSignature {
    /**
     * Retrieves information about payments and refunds associated with a specified order.
     *
     *
     * The `listTransactionsForSingleOrder()` function returns a Promise that resolves when the specified order's transaction records are retrieved.
     * @param - Order ID.
     */
    (orderId: string): Promise<ListTransactionsForSingleOrderResponse & ListTransactionsForSingleOrderResponseNonNullableFields>;
}
declare function listTransactionsForMultipleOrders$1(httpClient: HttpClient): ListTransactionsForMultipleOrdersSignature;
interface ListTransactionsForMultipleOrdersSignature {
    /**
     * Retrieves information about payments and refunds associated with all specified orders.
     *
     *
     * The `listTransactionsForMultipleOrders()` function returns a Promise that resolves when the specified orders' transaction records are retrieved.
     * @param - Order IDs for which to retrieve transactions.
     */
    (orderIds: string[]): Promise<ListTransactionsForMultipleOrdersResponse & ListTransactionsForMultipleOrdersResponseNonNullableFields>;
}
declare function addPayments$1(httpClient: HttpClient): AddPaymentsSignature;
interface AddPaymentsSignature {
    /**
     * Adds up to 50 payment records to an order.
     *
     *
     * The `addPayments()` function returns a Promise that resolves when the payment records are added to an order.
     *
     * > **Note:** This does **NOT** perform the actual charging - the order is only updated with records of the payments.
     * @param - Order ID.
     * @param - Payments to be added to order.
     */
    (orderId: string, payments: Payment[]): Promise<AddPaymentsResponse & AddPaymentsResponseNonNullableFields>;
}
declare function updatePaymentStatus$1(httpClient: HttpClient): UpdatePaymentStatusSignature;
interface UpdatePaymentStatusSignature {
    /**
     * Updates the status of an order's payment.
     *
     *
     * The `updatePaymentStatus()` function returns a Promise that resolves when the payment status is updated.
     */
    (identifiers: UpdatePaymentStatusIdentifiers, options?: UpdatePaymentStatusOptions | undefined): Promise<UpdatePaymentStatusResponse & UpdatePaymentStatusResponseNonNullableFields>;
}
declare function bulkUpdatePaymentStatuses$1(httpClient: HttpClient): BulkUpdatePaymentStatusesSignature;
interface BulkUpdatePaymentStatusesSignature {
    /**
     * Updates multiple order payments with a specified status.
     *
     *
     * The `bulkUpdatePaymentStatus()` function returns a Promise that resolves when the payment statuses are updated.
     * @param - Order and payment IDs for which to update payment status.
     */
    (paymentAndOrderIds: PaymentAndOrderId[], options?: BulkUpdatePaymentStatusesOptions | undefined): Promise<BulkUpdatePaymentStatusesResponse & BulkUpdatePaymentStatusesResponseNonNullableFields>;
}

declare const listTransactionsForSingleOrder: MaybeContext<BuildRESTFunction<typeof listTransactionsForSingleOrder$1> & typeof listTransactionsForSingleOrder$1>;
declare const listTransactionsForMultipleOrders: MaybeContext<BuildRESTFunction<typeof listTransactionsForMultipleOrders$1> & typeof listTransactionsForMultipleOrders$1>;
declare const addPayments: MaybeContext<BuildRESTFunction<typeof addPayments$1> & typeof addPayments$1>;
declare const updatePaymentStatus: MaybeContext<BuildRESTFunction<typeof updatePaymentStatus$1> & typeof updatePaymentStatus$1>;
declare const bulkUpdatePaymentStatuses: MaybeContext<BuildRESTFunction<typeof bulkUpdatePaymentStatuses$1> & typeof bulkUpdatePaymentStatuses$1>;

type index_d$a_ActionType = ActionType;
declare const index_d$a_ActionType: typeof ActionType;
type index_d$a_Activity = Activity;
type index_d$a_ActivityType = ActivityType;
declare const index_d$a_ActivityType: typeof ActivityType;
type index_d$a_AddInvoiceToOrderRequest = AddInvoiceToOrderRequest;
type index_d$a_AddInvoiceToOrderResponse = AddInvoiceToOrderResponse;
type index_d$a_AddPaymentsRequest = AddPaymentsRequest;
type index_d$a_AddPaymentsResponse = AddPaymentsResponse;
type index_d$a_AddPaymentsResponseNonNullableFields = AddPaymentsResponseNonNullableFields;
type index_d$a_AddRefundRequest = AddRefundRequest;
type index_d$a_AddRefundResponse = AddRefundResponse;
type index_d$a_AdditionalFeeRefund = AdditionalFeeRefund;
type index_d$a_AddressAddressLine1OptionsOneOf = AddressAddressLine1OptionsOneOf;
type index_d$a_AggregatedRefundSummary = AggregatedRefundSummary;
type index_d$a_AppliedCoupon = AppliedCoupon;
type index_d$a_AuthorizationActionFailureDetails = AuthorizationActionFailureDetails;
type index_d$a_AuthorizationCapture = AuthorizationCapture;
type index_d$a_AuthorizationCaptureStatus = AuthorizationCaptureStatus;
declare const index_d$a_AuthorizationCaptureStatus: typeof AuthorizationCaptureStatus;
type index_d$a_AuthorizationDetails = AuthorizationDetails;
type index_d$a_AuthorizationVoid = AuthorizationVoid;
type index_d$a_AuthorizationVoidStatus = AuthorizationVoidStatus;
declare const index_d$a_AuthorizationVoidStatus: typeof AuthorizationVoidStatus;
type index_d$a_BillingInfo = BillingInfo;
type index_d$a_BulkActionMetadata = BulkActionMetadata;
type index_d$a_BulkGenerateInvoicesRequest = BulkGenerateInvoicesRequest;
type index_d$a_BulkGenerateInvoicesResponse = BulkGenerateInvoicesResponse;
type index_d$a_BulkInvoiceResult = BulkInvoiceResult;
type index_d$a_BulkPaymentResult = BulkPaymentResult;
type index_d$a_BulkUpdatePaymentStatusesOptions = BulkUpdatePaymentStatusesOptions;
type index_d$a_BulkUpdatePaymentStatusesRequest = BulkUpdatePaymentStatusesRequest;
type index_d$a_BulkUpdatePaymentStatusesResponse = BulkUpdatePaymentStatusesResponse;
type index_d$a_BulkUpdatePaymentStatusesResponseNonNullableFields = BulkUpdatePaymentStatusesResponseNonNullableFields;
type index_d$a_BuyerDetails = BuyerDetails;
type index_d$a_BuyerInfo = BuyerInfo;
type index_d$a_CalculateRefundItemRequest = CalculateRefundItemRequest;
type index_d$a_CalculateRefundItemResponse = CalculateRefundItemResponse;
type index_d$a_CalculateRefundRequest = CalculateRefundRequest;
type index_d$a_CalculateRefundResponse = CalculateRefundResponse;
type index_d$a_ChannelInfo = ChannelInfo;
type index_d$a_ChannelType = ChannelType;
declare const index_d$a_ChannelType: typeof ChannelType;
type index_d$a_CreditCardPaymentMethodDetails = CreditCardPaymentMethodDetails;
type index_d$a_CustomField = CustomField;
type index_d$a_CustomTextFieldSelection = CustomTextFieldSelection;
type index_d$a_DigitalFile = DigitalFile;
type index_d$a_Discount = Discount;
type index_d$a_EnteredBy = EnteredBy;
type index_d$a_EnteredByIdentityType = EnteredByIdentityType;
declare const index_d$a_EnteredByIdentityType: typeof EnteredByIdentityType;
type index_d$a_Fulfillment = Fulfillment;
type index_d$a_FulfillmentLineItem = FulfillmentLineItem;
type index_d$a_FulfillmentStatus = FulfillmentStatus;
declare const index_d$a_FulfillmentStatus: typeof FulfillmentStatus;
type index_d$a_FulfillmentTrackingInfo = FulfillmentTrackingInfo;
type index_d$a_FullName = FullName;
type index_d$a_GenerateInvoiceRequest = GenerateInvoiceRequest;
type index_d$a_GenerateInvoiceResponse = GenerateInvoiceResponse;
type index_d$a_GetRefundabilityStatusRequest = GetRefundabilityStatusRequest;
type index_d$a_GetRefundabilityStatusResponse = GetRefundabilityStatusResponse;
type index_d$a_GiftCardPaymentDetails = GiftCardPaymentDetails;
type index_d$a_IndexingMessage = IndexingMessage;
type index_d$a_InvoiceForOrder = InvoiceForOrder;
type index_d$a_InvoiceInfo = InvoiceInfo;
type index_d$a_InvoiceSource = InvoiceSource;
declare const index_d$a_InvoiceSource: typeof InvoiceSource;
type index_d$a_InvoicesForOrder = InvoicesForOrder;
type index_d$a_ItemMetadata = ItemMetadata;
type index_d$a_LineItemPriceData = LineItemPriceData;
type index_d$a_LineItemRefund = LineItemRefund;
type index_d$a_LineItemType = LineItemType;
declare const index_d$a_LineItemType: typeof LineItemType;
type index_d$a_ListInvoicesForMultipleOrdersRequest = ListInvoicesForMultipleOrdersRequest;
type index_d$a_ListInvoicesForMultipleOrdersResponse = ListInvoicesForMultipleOrdersResponse;
type index_d$a_ListInvoicesForSingleOrderRequest = ListInvoicesForSingleOrderRequest;
type index_d$a_ListInvoicesForSingleOrderResponse = ListInvoicesForSingleOrderResponse;
type index_d$a_ListTransactionsForMultipleOrdersRequest = ListTransactionsForMultipleOrdersRequest;
type index_d$a_ListTransactionsForMultipleOrdersResponse = ListTransactionsForMultipleOrdersResponse;
type index_d$a_ListTransactionsForMultipleOrdersResponseNonNullableFields = ListTransactionsForMultipleOrdersResponseNonNullableFields;
type index_d$a_ListTransactionsForSingleOrderRequest = ListTransactionsForSingleOrderRequest;
type index_d$a_ListTransactionsForSingleOrderResponse = ListTransactionsForSingleOrderResponse;
type index_d$a_ListTransactionsForSingleOrderResponseNonNullableFields = ListTransactionsForSingleOrderResponseNonNullableFields;
type index_d$a_ManuallyRefundableReason = ManuallyRefundableReason;
declare const index_d$a_ManuallyRefundableReason: typeof ManuallyRefundableReason;
type index_d$a_MaskedPayment = MaskedPayment;
type index_d$a_MediaItem = MediaItem;
type index_d$a_MediaItemType = MediaItemType;
declare const index_d$a_MediaItemType: typeof MediaItemType;
type index_d$a_MembershipPaymentDetails = MembershipPaymentDetails;
type index_d$a_MembershipPaymentStatus = MembershipPaymentStatus;
declare const index_d$a_MembershipPaymentStatus: typeof MembershipPaymentStatus;
type index_d$a_NonRefundableReason = NonRefundableReason;
declare const index_d$a_NonRefundableReason: typeof NonRefundableReason;
type index_d$a_OptionSelection = OptionSelection;
type index_d$a_Order = Order;
type index_d$a_OrderRefunded = OrderRefunded;
type index_d$a_OrderTransactions = OrderTransactions;
type index_d$a_Payment = Payment;
type index_d$a_PaymentAndOrderId = PaymentAndOrderId;
type index_d$a_PaymentPaymentDetailsOneOf = PaymentPaymentDetailsOneOf;
type index_d$a_PaymentRefund = PaymentRefund;
type index_d$a_PaymentStatus = PaymentStatus;
declare const index_d$a_PaymentStatus: typeof PaymentStatus;
type index_d$a_PaymentsUpdated = PaymentsUpdated;
type index_d$a_PickupAddress = PickupAddress;
type index_d$a_QueryOrderTransactionsRequest = QueryOrderTransactionsRequest;
type index_d$a_QueryOrderTransactionsResponse = QueryOrderTransactionsResponse;
type index_d$a_Reason = Reason;
declare const index_d$a_Reason: typeof Reason;
type index_d$a_Refund = Refund;
type index_d$a_RefundCompleted = RefundCompleted;
type index_d$a_RefundDetails = RefundDetails;
type index_d$a_RefundItem = RefundItem;
type index_d$a_RefundSideEffects = RefundSideEffects;
type index_d$a_RefundStatus = RefundStatus;
declare const index_d$a_RefundStatus: typeof RefundStatus;
type index_d$a_RefundTransaction = RefundTransaction;
type index_d$a_Refundability = Refundability;
type index_d$a_RefundabilityAdditionalRefundabilityInfoOneOf = RefundabilityAdditionalRefundabilityInfoOneOf;
type index_d$a_RefundableStatus = RefundableStatus;
declare const index_d$a_RefundableStatus: typeof RefundableStatus;
type index_d$a_RegularPaymentDetails = RegularPaymentDetails;
type index_d$a_RegularPaymentDetailsPaymentMethodDetailsOneOf = RegularPaymentDetailsPaymentMethodDetailsOneOf;
type index_d$a_RestockInfo = RestockInfo;
type index_d$a_RestockItem = RestockItem;
type index_d$a_RestockType = RestockType;
declare const index_d$a_RestockType: typeof RestockType;
type index_d$a_ScheduledAction = ScheduledAction;
type index_d$a_ShipmentDetails = ShipmentDetails;
type index_d$a_ShippingInfo = ShippingInfo;
type index_d$a_ShippingInfoDetailsOneOf = ShippingInfoDetailsOneOf;
type index_d$a_ShippingPriceData = ShippingPriceData;
type index_d$a_ShippingRefund = ShippingRefund;
type index_d$a_SnapshotMessage = SnapshotMessage;
type index_d$a_Street = Street;
type index_d$a_SubscriptionInfo = SubscriptionInfo;
type index_d$a_SubscriptionOptionInfo = SubscriptionOptionInfo;
type index_d$a_Totals = Totals;
type index_d$a_TrackingInfo = TrackingInfo;
type index_d$a_TransactionStatus = TransactionStatus;
declare const index_d$a_TransactionStatus: typeof TransactionStatus;
type index_d$a_TriggerRefundRequest = TriggerRefundRequest;
type index_d$a_TriggerRefundResponse = TriggerRefundResponse;
type index_d$a_UpdatePaymentStatusIdentifiers = UpdatePaymentStatusIdentifiers;
type index_d$a_UpdatePaymentStatusOptions = UpdatePaymentStatusOptions;
type index_d$a_UpdatePaymentStatusRequest = UpdatePaymentStatusRequest;
type index_d$a_UpdatePaymentStatusResponse = UpdatePaymentStatusResponse;
type index_d$a_UpdatePaymentStatusResponseNonNullableFields = UpdatePaymentStatusResponseNonNullableFields;
type index_d$a_UpdatePaymentsRequest = UpdatePaymentsRequest;
type index_d$a_UpdatePaymentsResponse = UpdatePaymentsResponse;
type index_d$a_UpdateRefundTransactionRequest = UpdateRefundTransactionRequest;
type index_d$a_UpdateRefundTransactionResponse = UpdateRefundTransactionResponse;
type index_d$a_V2InvoiceInfo = V2InvoiceInfo;
type index_d$a_V2Refund = V2Refund;
declare const index_d$a_addPayments: typeof addPayments;
declare const index_d$a_bulkUpdatePaymentStatuses: typeof bulkUpdatePaymentStatuses;
declare const index_d$a_listTransactionsForMultipleOrders: typeof listTransactionsForMultipleOrders;
declare const index_d$a_listTransactionsForSingleOrder: typeof listTransactionsForSingleOrder;
declare const index_d$a_updatePaymentStatus: typeof updatePaymentStatus;
declare namespace index_d$a {
  export { type ActionEvent$7 as ActionEvent, index_d$a_ActionType as ActionType, type index_d$a_Activity as Activity, index_d$a_ActivityType as ActivityType, type index_d$a_AddInvoiceToOrderRequest as AddInvoiceToOrderRequest, type index_d$a_AddInvoiceToOrderResponse as AddInvoiceToOrderResponse, type index_d$a_AddPaymentsRequest as AddPaymentsRequest, type index_d$a_AddPaymentsResponse as AddPaymentsResponse, type index_d$a_AddPaymentsResponseNonNullableFields as AddPaymentsResponseNonNullableFields, type index_d$a_AddRefundRequest as AddRefundRequest, type index_d$a_AddRefundResponse as AddRefundResponse, type index_d$a_AdditionalFeeRefund as AdditionalFeeRefund, type Address$4 as Address, type index_d$a_AddressAddressLine1OptionsOneOf as AddressAddressLine1OptionsOneOf, type index_d$a_AggregatedRefundSummary as AggregatedRefundSummary, type ApplicationError$3 as ApplicationError, type index_d$a_AppliedCoupon as AppliedCoupon, type index_d$a_AuthorizationActionFailureDetails as AuthorizationActionFailureDetails, type index_d$a_AuthorizationCapture as AuthorizationCapture, index_d$a_AuthorizationCaptureStatus as AuthorizationCaptureStatus, type index_d$a_AuthorizationDetails as AuthorizationDetails, type index_d$a_AuthorizationVoid as AuthorizationVoid, index_d$a_AuthorizationVoidStatus as AuthorizationVoidStatus, type index_d$a_BillingInfo as BillingInfo, type index_d$a_BulkActionMetadata as BulkActionMetadata, type index_d$a_BulkGenerateInvoicesRequest as BulkGenerateInvoicesRequest, type index_d$a_BulkGenerateInvoicesResponse as BulkGenerateInvoicesResponse, type index_d$a_BulkInvoiceResult as BulkInvoiceResult, type index_d$a_BulkPaymentResult as BulkPaymentResult, type index_d$a_BulkUpdatePaymentStatusesOptions as BulkUpdatePaymentStatusesOptions, type index_d$a_BulkUpdatePaymentStatusesRequest as BulkUpdatePaymentStatusesRequest, type index_d$a_BulkUpdatePaymentStatusesResponse as BulkUpdatePaymentStatusesResponse, type index_d$a_BulkUpdatePaymentStatusesResponseNonNullableFields as BulkUpdatePaymentStatusesResponseNonNullableFields, type index_d$a_BuyerDetails as BuyerDetails, type index_d$a_BuyerInfo as BuyerInfo, type index_d$a_CalculateRefundItemRequest as CalculateRefundItemRequest, type index_d$a_CalculateRefundItemResponse as CalculateRefundItemResponse, type index_d$a_CalculateRefundRequest as CalculateRefundRequest, type index_d$a_CalculateRefundResponse as CalculateRefundResponse, type index_d$a_ChannelInfo as ChannelInfo, index_d$a_ChannelType as ChannelType, type index_d$a_CreditCardPaymentMethodDetails as CreditCardPaymentMethodDetails, type CursorPaging$5 as CursorPaging, type CursorPagingMetadata$4 as CursorPagingMetadata, type CursorQuery$3 as CursorQuery, type CursorQueryPagingMethodOneOf$3 as CursorQueryPagingMethodOneOf, type Cursors$5 as Cursors, type index_d$a_CustomField as CustomField, type index_d$a_CustomTextFieldSelection as CustomTextFieldSelection, type DiffmatokyPayload$1 as DiffmatokyPayload, type index_d$a_DigitalFile as DigitalFile, type index_d$a_Discount as Discount, type DomainEvent$7 as DomainEvent, type DomainEventBodyOneOf$7 as DomainEventBodyOneOf, type index_d$a_EnteredBy as EnteredBy, index_d$a_EnteredByIdentityType as EnteredByIdentityType, type EntityCreatedEvent$7 as EntityCreatedEvent, type EntityDeletedEvent$7 as EntityDeletedEvent, type EntityUpdatedEvent$7 as EntityUpdatedEvent, type ErrorInformation$1 as ErrorInformation, type index_d$a_Fulfillment as Fulfillment, type index_d$a_FulfillmentLineItem as FulfillmentLineItem, index_d$a_FulfillmentStatus as FulfillmentStatus, type index_d$a_FulfillmentTrackingInfo as FulfillmentTrackingInfo, type index_d$a_FullName as FullName, type index_d$a_GenerateInvoiceRequest as GenerateInvoiceRequest, type index_d$a_GenerateInvoiceResponse as GenerateInvoiceResponse, type index_d$a_GetRefundabilityStatusRequest as GetRefundabilityStatusRequest, type index_d$a_GetRefundabilityStatusResponse as GetRefundabilityStatusResponse, type GiftCard$1 as GiftCard, type index_d$a_GiftCardPaymentDetails as GiftCardPaymentDetails, type IdentificationData$7 as IdentificationData, type IdentificationDataIdOneOf$7 as IdentificationDataIdOneOf, IdentityType$2 as IdentityType, type index_d$a_IndexingMessage as IndexingMessage, type index_d$a_InvoiceForOrder as InvoiceForOrder, type index_d$a_InvoiceInfo as InvoiceInfo, index_d$a_InvoiceSource as InvoiceSource, type index_d$a_InvoicesForOrder as InvoicesForOrder, type index_d$a_ItemMetadata as ItemMetadata, type LineItem$1 as LineItem, type index_d$a_LineItemPriceData as LineItemPriceData, type index_d$a_LineItemRefund as LineItemRefund, index_d$a_LineItemType as LineItemType, type index_d$a_ListInvoicesForMultipleOrdersRequest as ListInvoicesForMultipleOrdersRequest, type index_d$a_ListInvoicesForMultipleOrdersResponse as ListInvoicesForMultipleOrdersResponse, type index_d$a_ListInvoicesForSingleOrderRequest as ListInvoicesForSingleOrderRequest, type index_d$a_ListInvoicesForSingleOrderResponse as ListInvoicesForSingleOrderResponse, type index_d$a_ListTransactionsForMultipleOrdersRequest as ListTransactionsForMultipleOrdersRequest, type index_d$a_ListTransactionsForMultipleOrdersResponse as ListTransactionsForMultipleOrdersResponse, type index_d$a_ListTransactionsForMultipleOrdersResponseNonNullableFields as ListTransactionsForMultipleOrdersResponseNonNullableFields, type index_d$a_ListTransactionsForSingleOrderRequest as ListTransactionsForSingleOrderRequest, type index_d$a_ListTransactionsForSingleOrderResponse as ListTransactionsForSingleOrderResponse, type index_d$a_ListTransactionsForSingleOrderResponseNonNullableFields as ListTransactionsForSingleOrderResponseNonNullableFields, index_d$a_ManuallyRefundableReason as ManuallyRefundableReason, type index_d$a_MaskedPayment as MaskedPayment, type index_d$a_MediaItem as MediaItem, index_d$a_MediaItemType as MediaItemType, type MembershipName$1 as MembershipName, type index_d$a_MembershipPaymentDetails as MembershipPaymentDetails, index_d$a_MembershipPaymentStatus as MembershipPaymentStatus, type MessageEnvelope$6 as MessageEnvelope, index_d$a_NonRefundableReason as NonRefundableReason, type index_d$a_OptionSelection as OptionSelection, type index_d$a_Order as Order, type index_d$a_OrderRefunded as OrderRefunded, type index_d$a_OrderTransactions as OrderTransactions, type index_d$a_Payment as Payment, type index_d$a_PaymentAndOrderId as PaymentAndOrderId, type index_d$a_PaymentPaymentDetailsOneOf as PaymentPaymentDetailsOneOf, type index_d$a_PaymentRefund as PaymentRefund, index_d$a_PaymentStatus as PaymentStatus, type index_d$a_PaymentsUpdated as PaymentsUpdated, type index_d$a_PickupAddress as PickupAddress, type PickupDetails$2 as PickupDetails, type Price$1 as Price, type index_d$a_QueryOrderTransactionsRequest as QueryOrderTransactionsRequest, type index_d$a_QueryOrderTransactionsResponse as QueryOrderTransactionsResponse, index_d$a_Reason as Reason, type index_d$a_Refund as Refund, type index_d$a_RefundCompleted as RefundCompleted, type index_d$a_RefundDetails as RefundDetails, type index_d$a_RefundItem as RefundItem, type index_d$a_RefundSideEffects as RefundSideEffects, index_d$a_RefundStatus as RefundStatus, type index_d$a_RefundTransaction as RefundTransaction, type index_d$a_Refundability as Refundability, type index_d$a_RefundabilityAdditionalRefundabilityInfoOneOf as RefundabilityAdditionalRefundabilityInfoOneOf, index_d$a_RefundableStatus as RefundableStatus, type index_d$a_RegularPaymentDetails as RegularPaymentDetails, type index_d$a_RegularPaymentDetailsPaymentMethodDetailsOneOf as RegularPaymentDetailsPaymentMethodDetailsOneOf, type index_d$a_RestockInfo as RestockInfo, type index_d$a_RestockItem as RestockItem, index_d$a_RestockType as RestockType, type RestoreInfo$7 as RestoreInfo, type index_d$a_ScheduledAction as ScheduledAction, type index_d$a_ShipmentDetails as ShipmentDetails, type index_d$a_ShippingInfo as ShippingInfo, type index_d$a_ShippingInfoDetailsOneOf as ShippingInfoDetailsOneOf, type index_d$a_ShippingPriceData as ShippingPriceData, type index_d$a_ShippingRefund as ShippingRefund, type index_d$a_SnapshotMessage as SnapshotMessage, SortOrder$5 as SortOrder, type Sorting$5 as Sorting, type index_d$a_Street as Street, SubscriptionFrequency$1 as SubscriptionFrequency, type index_d$a_SubscriptionInfo as SubscriptionInfo, type index_d$a_SubscriptionOptionInfo as SubscriptionOptionInfo, type SubscriptionSettings$1 as SubscriptionSettings, type index_d$a_Totals as Totals, type index_d$a_TrackingInfo as TrackingInfo, index_d$a_TransactionStatus as TransactionStatus, type index_d$a_TriggerRefundRequest as TriggerRefundRequest, type index_d$a_TriggerRefundResponse as TriggerRefundResponse, type index_d$a_UpdatePaymentStatusIdentifiers as UpdatePaymentStatusIdentifiers, type index_d$a_UpdatePaymentStatusOptions as UpdatePaymentStatusOptions, type index_d$a_UpdatePaymentStatusRequest as UpdatePaymentStatusRequest, type index_d$a_UpdatePaymentStatusResponse as UpdatePaymentStatusResponse, type index_d$a_UpdatePaymentStatusResponseNonNullableFields as UpdatePaymentStatusResponseNonNullableFields, type index_d$a_UpdatePaymentsRequest as UpdatePaymentsRequest, type index_d$a_UpdatePaymentsResponse as UpdatePaymentsResponse, type index_d$a_UpdateRefundTransactionRequest as UpdateRefundTransactionRequest, type index_d$a_UpdateRefundTransactionResponse as UpdateRefundTransactionResponse, type index_d$a_V2InvoiceInfo as V2InvoiceInfo, type index_d$a_V2Refund as V2Refund, type VatId$1 as VatId, VatType$1 as VatType, WebhookIdentityType$6 as WebhookIdentityType, WeightUnit$2 as WeightUnit, index_d$a_addPayments as addPayments, index_d$a_bulkUpdatePaymentStatuses as bulkUpdatePaymentStatuses, index_d$a_listTransactionsForMultipleOrders as listTransactionsForMultipleOrders, index_d$a_listTransactionsForSingleOrder as listTransactionsForSingleOrder, index_d$a_updatePaymentStatus as updatePaymentStatus };
}

interface OrdersSettings {
    /**
     * Defines when to update the store inventory.
     *
     * - `ON_ORDER_PAID`: Stock quantities will update only after the payment is approved.
     *  - `ON_ORDER_PLACED`: Stock quantities will update while the payment is being processed. If the payment did not go through, items will restock.
     *
     * Default: `ON_ORDER_PLACED`
     */
    inventoryUpdateTrigger?: InventoryUpdateTrigger;
    /**
     * Whether to automatically create invoices for every new order paid online.
     * Default: `false`
     */
    createInvoice?: boolean | null;
    /**
     * Date and time the orders settings were created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the orders settings were updated.
     * @readonly
     */
    _updatedDate?: Date | null;
}
declare enum InventoryUpdateTrigger {
    UNKNOWN_INVENTORY_UPDATE_TRIGGER = "UNKNOWN_INVENTORY_UPDATE_TRIGGER",
    ON_ORDER_PAID = "ON_ORDER_PAID",
    ON_ORDER_PLACED = "ON_ORDER_PLACED"
}
interface GetOrdersSettingsRequest {
}
interface GetOrdersSettingsResponse {
    /** Orders settings. */
    ordersSettings?: OrdersSettings;
}
interface UpdateOrdersSettingsRequest {
    /** Orders settings to update. */
    ordersSettings: OrdersSettings;
}
interface UpdateOrdersSettingsResponse {
    /** The updated orders settings. */
    ordersSettings?: OrdersSettings;
}
interface DeleteOrdersSettingsRequest {
}
interface DeleteOrdersSettingsResponse {
}
interface ListOrdersSettingsRequest {
}
interface ListOrdersSettingsResponse {
    /** List of retrieved orders settings. */
    ordersSettings?: OrdersSettings[];
}
interface DomainEvent$6 extends DomainEventBodyOneOf$6 {
    createdEvent?: EntityCreatedEvent$6;
    updatedEvent?: EntityUpdatedEvent$6;
    deletedEvent?: EntityDeletedEvent$6;
    actionEvent?: ActionEvent$6;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$6 {
    createdEvent?: EntityCreatedEvent$6;
    updatedEvent?: EntityUpdatedEvent$6;
    deletedEvent?: EntityDeletedEvent$6;
    actionEvent?: ActionEvent$6;
}
interface EntityCreatedEvent$6 {
    entity?: string;
}
interface RestoreInfo$6 {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$6 {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$6 {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$6 {
    body?: string;
}
interface MessageEnvelope$5 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$6;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$6 extends IdentificationDataIdOneOf$6 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$5;
}
/** @oneof */
interface IdentificationDataIdOneOf$6 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$5 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface OrdersSettingsNonNullableFields {
    inventoryUpdateTrigger: InventoryUpdateTrigger;
}
interface GetOrdersSettingsResponseNonNullableFields {
    ordersSettings?: OrdersSettingsNonNullableFields;
}
interface UpdateOrdersSettingsResponseNonNullableFields {
    ordersSettings?: OrdersSettingsNonNullableFields;
}
interface BaseEventMetadata$2 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$6;
}
interface EventMetadata$2 extends BaseEventMetadata$2 {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface OrdersSettingsUpdatedEnvelope {
    entity: OrdersSettings;
    metadata: EventMetadata$2;
}

declare function getOrdersSettings$1(httpClient: HttpClient): GetOrdersSettingsSignature;
interface GetOrdersSettingsSignature {
    /**
     * Retrieves the sites' order settings.
     *
     *
     * The `getOrdersSettings()` function returns a Promise that resolves to orders settings.
     * @returns The requested orders settings.
     */
    (): Promise<GetOrdersSettingsResponse & GetOrdersSettingsResponseNonNullableFields>;
}
declare function updateOrdersSettings$1(httpClient: HttpClient): UpdateOrdersSettingsSignature;
interface UpdateOrdersSettingsSignature {
    /**
     * Updates the sites' orders settings.
     *
     *
     * The `updateOrdersSettings()` function returns a Promise that resolves to the newly updated orders settings.
     * @param - Orders settings to update.
     * @returns The updated orders settings.
     */
    (ordersSettings: OrdersSettings): Promise<UpdateOrdersSettingsResponse & UpdateOrdersSettingsResponseNonNullableFields>;
}
declare const onOrdersSettingsUpdated$1: EventDefinition<OrdersSettingsUpdatedEnvelope, "wix.ecom.v1.orders_settings_updated">;

declare function createEventModule$2<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const getOrdersSettings: MaybeContext<BuildRESTFunction<typeof getOrdersSettings$1> & typeof getOrdersSettings$1>;
declare const updateOrdersSettings: MaybeContext<BuildRESTFunction<typeof updateOrdersSettings$1> & typeof updateOrdersSettings$1>;

type _publicOnOrdersSettingsUpdatedType = typeof onOrdersSettingsUpdated$1;
/**
 * Triggered when orders settings are updated.
 */
declare const onOrdersSettingsUpdated: ReturnType<typeof createEventModule$2<_publicOnOrdersSettingsUpdatedType>>;

type index_d$9_DeleteOrdersSettingsRequest = DeleteOrdersSettingsRequest;
type index_d$9_DeleteOrdersSettingsResponse = DeleteOrdersSettingsResponse;
type index_d$9_GetOrdersSettingsRequest = GetOrdersSettingsRequest;
type index_d$9_GetOrdersSettingsResponse = GetOrdersSettingsResponse;
type index_d$9_GetOrdersSettingsResponseNonNullableFields = GetOrdersSettingsResponseNonNullableFields;
type index_d$9_InventoryUpdateTrigger = InventoryUpdateTrigger;
declare const index_d$9_InventoryUpdateTrigger: typeof InventoryUpdateTrigger;
type index_d$9_ListOrdersSettingsRequest = ListOrdersSettingsRequest;
type index_d$9_ListOrdersSettingsResponse = ListOrdersSettingsResponse;
type index_d$9_OrdersSettings = OrdersSettings;
type index_d$9_OrdersSettingsUpdatedEnvelope = OrdersSettingsUpdatedEnvelope;
type index_d$9_UpdateOrdersSettingsRequest = UpdateOrdersSettingsRequest;
type index_d$9_UpdateOrdersSettingsResponse = UpdateOrdersSettingsResponse;
type index_d$9_UpdateOrdersSettingsResponseNonNullableFields = UpdateOrdersSettingsResponseNonNullableFields;
type index_d$9__publicOnOrdersSettingsUpdatedType = _publicOnOrdersSettingsUpdatedType;
declare const index_d$9_getOrdersSettings: typeof getOrdersSettings;
declare const index_d$9_onOrdersSettingsUpdated: typeof onOrdersSettingsUpdated;
declare const index_d$9_updateOrdersSettings: typeof updateOrdersSettings;
declare namespace index_d$9 {
  export { type ActionEvent$6 as ActionEvent, type BaseEventMetadata$2 as BaseEventMetadata, type index_d$9_DeleteOrdersSettingsRequest as DeleteOrdersSettingsRequest, type index_d$9_DeleteOrdersSettingsResponse as DeleteOrdersSettingsResponse, type DomainEvent$6 as DomainEvent, type DomainEventBodyOneOf$6 as DomainEventBodyOneOf, type EntityCreatedEvent$6 as EntityCreatedEvent, type EntityDeletedEvent$6 as EntityDeletedEvent, type EntityUpdatedEvent$6 as EntityUpdatedEvent, type EventMetadata$2 as EventMetadata, type index_d$9_GetOrdersSettingsRequest as GetOrdersSettingsRequest, type index_d$9_GetOrdersSettingsResponse as GetOrdersSettingsResponse, type index_d$9_GetOrdersSettingsResponseNonNullableFields as GetOrdersSettingsResponseNonNullableFields, type IdentificationData$6 as IdentificationData, type IdentificationDataIdOneOf$6 as IdentificationDataIdOneOf, index_d$9_InventoryUpdateTrigger as InventoryUpdateTrigger, type index_d$9_ListOrdersSettingsRequest as ListOrdersSettingsRequest, type index_d$9_ListOrdersSettingsResponse as ListOrdersSettingsResponse, type MessageEnvelope$5 as MessageEnvelope, type index_d$9_OrdersSettings as OrdersSettings, type index_d$9_OrdersSettingsUpdatedEnvelope as OrdersSettingsUpdatedEnvelope, type RestoreInfo$6 as RestoreInfo, type index_d$9_UpdateOrdersSettingsRequest as UpdateOrdersSettingsRequest, type index_d$9_UpdateOrdersSettingsResponse as UpdateOrdersSettingsResponse, type index_d$9_UpdateOrdersSettingsResponseNonNullableFields as UpdateOrdersSettingsResponseNonNullableFields, WebhookIdentityType$5 as WebhookIdentityType, type index_d$9__publicOnOrdersSettingsUpdatedType as _publicOnOrdersSettingsUpdatedType, index_d$9_getOrdersSettings as getOrdersSettings, index_d$9_onOrdersSettingsUpdated as onOrdersSettingsUpdated, onOrdersSettingsUpdated$1 as publicOnOrdersSettingsUpdated, index_d$9_updateOrdersSettings as updateOrdersSettings };
}

/** PickupLocation is the main entity of PickupLocations that can be used for lorem ipsum dolor */
interface PickupLocation {
    /**
     * PickupLocation ID
     * @readonly
     */
    _id?: string | null;
    /**
     * Represents the current state of an item. Each time the item is modified, its `revision` changes. for an update operation to succeed, you MUST pass the latest revision
     * @readonly
     */
    revision?: string | null;
    /**
     * Represents the time this PickupLocation was created
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Represents the time this PickupLocation was last updated
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Pickup Location Name */
    name?: string | null;
    /** Pickup Location Address */
    address?: Address$3;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /** inactive pickup locations should not be shown in checkout */
    active?: boolean | null;
    /** at runtime for a given pickup input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates$1[];
    /** This pickup location is active for the following delivery regions. */
    deliveryRegionIds?: string[];
}
/** Physical address */
interface Address$3 extends AddressStreetOneOf$1 {
    /** Street name and number. */
    streetAddress?: StreetAddress$3;
    addressLine1?: string | null;
    /** Country code. */
    country?: string | null;
    /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    addressLine2?: string | null;
}
/** @oneof */
interface AddressStreetOneOf$1 {
    /** Street name and number. */
    streetAddress?: StreetAddress$3;
    addressLine?: string | null;
}
interface StreetAddress$3 {
    number?: string;
    name?: string;
}
interface ConditionalRates$1 {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition$1[];
    amount?: string;
}
interface Condition$1 {
    type?: ConditionType$1;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator$1;
}
declare enum ConditionType$1 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
declare enum LogicalOperator$1 {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
interface DiffmatokyPayload {
    left?: string;
    right?: string;
    compareChannel?: string;
    entityId?: string;
    errorInformation?: ErrorInformation;
    tags?: string[];
}
interface ErrorInformation {
    stackTrace?: string;
}
interface CreatePickupLocationRequest {
    /** PickupLocation to be created */
    pickupLocation: PickupLocation;
}
interface CreatePickupLocationResponse {
    /** The created PickupLocation */
    pickupLocation?: PickupLocation;
}
interface GetPickupLocationRequest {
    /** Id of the PickupLocation to retrieve */
    pickupLocationId: string;
}
interface GetPickupLocationResponse {
    /** The retrieved PickupLocation */
    pickupLocation?: PickupLocation;
}
interface UpdatePickupLocationRequest {
    /** PickupLocation to be updated, may be partial */
    pickupLocation: PickupLocation;
}
interface UpdatePickupLocationResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
interface DeletePickupLocationRequest {
    /** Id of the PickupLocation to delete */
    pickupLocationId: string;
}
interface DeletePickupLocationResponse {
}
interface QueryPickupLocationRequest {
    /** WQL expression */
    query: QueryV2$1;
}
interface QueryV2$1 extends QueryV2PagingMethodOneOf$1 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$1;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$4;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$4[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf$1 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$1;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$4;
}
interface Sorting$4 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$4;
}
declare enum SortOrder$4 {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$4 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryPickupLocationResponse {
    /** The retrieved PickupLocations */
    pickupLocations?: PickupLocation[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$3;
}
interface CursorPagingMetadata$3 {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$4;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$4 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface AddDeliveryRegionRequest {
    /** Id of the PickupLocation to add to the delivery region */
    pickupLocationId: string;
    /** Id of the DeliveryRegion to add the PickupLocation to */
    deliveryRegionId: string;
    /** Revision of the PickupLocation */
    revision: string | null;
}
interface AddDeliveryRegionResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
interface RemoveDeliveryRegionRequest {
    /** Id of the PickupLocation to add to the delivery region */
    pickupLocationId: string;
    /** Id of the DeliveryRegion to add the PickupLocation to */
    deliveryRegionId: string;
    /** Revision of the PickupLocation */
    revision: string | null;
}
interface RemoveDeliveryRegionResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
interface BulkCreatePickupLocationRequest {
    pickupLocations: PickupLocation[];
}
interface BulkCreatePickupLocationResponse {
    pickupLocations?: PickupLocation[];
    errors?: PickupLocationError[];
}
interface PickupLocationError {
    _id?: string;
    error?: ApplicationError$2;
}
interface ApplicationError$2 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkUpdatePickupLocationRequest {
    pickupLocations: PickupLocation[];
}
interface BulkUpdatePickupLocationResponse {
    pickupLocations?: PickupLocation[];
    errors?: PickupLocationError[];
}
interface BulkDeletePickupLocationRequest {
    pickupLocationIds: string[];
}
interface BulkDeletePickupLocationResponse {
    errors?: PickupLocationError[];
}
interface Empty$3 {
}
interface DomainEvent$5 extends DomainEventBodyOneOf$5 {
    createdEvent?: EntityCreatedEvent$5;
    updatedEvent?: EntityUpdatedEvent$5;
    deletedEvent?: EntityDeletedEvent$5;
    actionEvent?: ActionEvent$5;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$5 {
    createdEvent?: EntityCreatedEvent$5;
    updatedEvent?: EntityUpdatedEvent$5;
    deletedEvent?: EntityDeletedEvent$5;
    actionEvent?: ActionEvent$5;
}
interface EntityCreatedEvent$5 {
    entity?: string;
}
interface RestoreInfo$5 {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$5 {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$5 {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$5 {
    body?: string;
}
interface MessageEnvelope$4 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$5;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$5 extends IdentificationDataIdOneOf$5 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$4;
}
/** @oneof */
interface IdentificationDataIdOneOf$5 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$4 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface StreetAddressNonNullableFields$3 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$3 {
    streetAddress?: StreetAddressNonNullableFields$3;
}
interface ConditionNonNullableFields$1 {
    type: ConditionType$1;
    value: string;
    operator: LogicalOperator$1;
}
interface ConditionalRatesNonNullableFields$1 {
    conditions: ConditionNonNullableFields$1[];
    amount: string;
}
interface PickupLocationNonNullableFields {
    address?: AddressNonNullableFields$3;
    rates: ConditionalRatesNonNullableFields$1[];
    deliveryRegionIds: string[];
}
interface CreatePickupLocationResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
interface GetPickupLocationResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
interface UpdatePickupLocationResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
interface QueryPickupLocationResponseNonNullableFields {
    pickupLocations: PickupLocationNonNullableFields[];
}
interface AddDeliveryRegionResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
interface RemoveDeliveryRegionResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
interface ApplicationErrorNonNullableFields$2 {
    code: string;
    description: string;
}
interface PickupLocationErrorNonNullableFields {
    _id: string;
    error?: ApplicationErrorNonNullableFields$2;
}
interface BulkCreatePickupLocationResponseNonNullableFields {
    pickupLocations: PickupLocationNonNullableFields[];
    errors: PickupLocationErrorNonNullableFields[];
}
interface BulkUpdatePickupLocationResponseNonNullableFields {
    pickupLocations: PickupLocationNonNullableFields[];
    errors: PickupLocationErrorNonNullableFields[];
}
interface BulkDeletePickupLocationResponseNonNullableFields {
    errors: PickupLocationErrorNonNullableFields[];
}
interface UpdatePickupLocation {
    /**
     * PickupLocation ID
     * @readonly
     */
    _id?: string | null;
    /**
     * Represents the current state of an item. Each time the item is modified, its `revision` changes. for an update operation to succeed, you MUST pass the latest revision
     * @readonly
     */
    revision?: string | null;
    /**
     * Represents the time this PickupLocation was created
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Represents the time this PickupLocation was last updated
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Pickup Location Name */
    name?: string | null;
    /** Pickup Location Address */
    address?: Address$3;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /** inactive pickup locations should not be shown in checkout */
    active?: boolean | null;
    /** at runtime for a given pickup input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates$1[];
    /** This pickup location is active for the following delivery regions. */
    deliveryRegionIds?: string[];
}
interface QueryCursorResult$4 {
    cursors: Cursors$4;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface PickupLocationsQueryResult extends QueryCursorResult$4 {
    items: PickupLocation[];
    query: PickupLocationsQueryBuilder;
    next: () => Promise<PickupLocationsQueryResult>;
    prev: () => Promise<PickupLocationsQueryResult>;
}
interface PickupLocationsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city' | 'deliveryRegionIds', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city' | 'deliveryRegionIds', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate' | '_updatedDate', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate' | '_updatedDate', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate' | '_updatedDate', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate' | '_updatedDate', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: 'name' | 'address.country' | 'address.subdivision' | 'address.city', value: string) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city' | 'deliveryRegionIds', value: any[]) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasAll: (propertyName: 'deliveryRegionIds', value: any[]) => PickupLocationsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city' | 'deliveryRegionIds', value: any) => PickupLocationsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city' | 'deliveryRegionIds', value: boolean) => PickupLocationsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => PickupLocationsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => PickupLocationsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<PickupLocationsQueryResult>;
}
interface AddDeliveryRegionOptions {
    /** Revision of the PickupLocation */
    revision: string | null;
}
interface RemoveDeliveryRegionOptions {
    /** Revision of the PickupLocation */
    revision: string | null;
}

declare function createPickupLocation$1(httpClient: HttpClient): CreatePickupLocationSignature;
interface CreatePickupLocationSignature {
    /**
     * Creates a new PickupLocation
     * @param - PickupLocation to be created
     * @returns The created PickupLocation
     */
    (pickupLocation: PickupLocation): Promise<PickupLocation & PickupLocationNonNullableFields>;
}
declare function getPickupLocation$1(httpClient: HttpClient): GetPickupLocationSignature;
interface GetPickupLocationSignature {
    /**
     * Get a PickupLocation by id
     * @param - Id of the PickupLocation to retrieve
     * @returns The retrieved PickupLocation
     */
    (pickupLocationId: string): Promise<PickupLocation & PickupLocationNonNullableFields>;
}
declare function updatePickupLocation$1(httpClient: HttpClient): UpdatePickupLocationSignature;
interface UpdatePickupLocationSignature {
    /**
     * Update a PickupLocation
     * Delivery regions cannot be updated using this method, use AddDeliveryRegion and RemoveDeliveryRegion instead.
     * @param - PickupLocation ID
     * @returns The updated PickupLocation
     */
    (_id: string | null, pickupLocation: UpdatePickupLocation): Promise<PickupLocation & PickupLocationNonNullableFields>;
}
declare function deletePickupLocation$1(httpClient: HttpClient): DeletePickupLocationSignature;
interface DeletePickupLocationSignature {
    /**
     * Delete a PickupLocation
     * @param - Id of the PickupLocation to delete
     */
    (pickupLocationId: string): Promise<void>;
}
declare function queryPickupLocation$1(httpClient: HttpClient): QueryPickupLocationSignature;
interface QueryPickupLocationSignature {
    /**
     * Query PickupLocations using [WQL - Wix Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language)
     */
    (): PickupLocationsQueryBuilder;
}
declare function addDeliveryRegion$1(httpClient: HttpClient): AddDeliveryRegionSignature;
interface AddDeliveryRegionSignature {
    /**
     * Add a DeliveryRegion to a PickupLocation
     * @param - Id of the PickupLocation to add to the delivery region
     * @param - Id of the DeliveryRegion to add the PickupLocation to
     */
    (pickupLocationId: string, deliveryRegionId: string, options: AddDeliveryRegionOptions): Promise<AddDeliveryRegionResponse & AddDeliveryRegionResponseNonNullableFields>;
}
declare function removeDeliveryRegion$1(httpClient: HttpClient): RemoveDeliveryRegionSignature;
interface RemoveDeliveryRegionSignature {
    /**
     * Remove a DeliveryRegion from a PickupLocation
     * @param - Id of the PickupLocation to add to the delivery region
     * @param - Id of the DeliveryRegion to add the PickupLocation to
     */
    (pickupLocationId: string, deliveryRegionId: string, options: RemoveDeliveryRegionOptions): Promise<RemoveDeliveryRegionResponse & RemoveDeliveryRegionResponseNonNullableFields>;
}
declare function bulkCreatePickupLocation$1(httpClient: HttpClient): BulkCreatePickupLocationSignature;
interface BulkCreatePickupLocationSignature {
    /**
     * Bulk Create for new PickupLocation
     */
    (pickupLocations: PickupLocation[]): Promise<BulkCreatePickupLocationResponse & BulkCreatePickupLocationResponseNonNullableFields>;
}
declare function bulkUpdatePickupLocation$1(httpClient: HttpClient): BulkUpdatePickupLocationSignature;
interface BulkUpdatePickupLocationSignature {
    /**
     * Update a PickupLocation
     */
    (pickupLocations: PickupLocation[]): Promise<BulkUpdatePickupLocationResponse & BulkUpdatePickupLocationResponseNonNullableFields>;
}
declare function bulkDeletePickupLocation$1(httpClient: HttpClient): BulkDeletePickupLocationSignature;
interface BulkDeletePickupLocationSignature {
    /**
     * Delete a PickupLocation
     */
    (pickupLocationIds: string[]): Promise<BulkDeletePickupLocationResponse & BulkDeletePickupLocationResponseNonNullableFields>;
}

declare const createPickupLocation: MaybeContext<BuildRESTFunction<typeof createPickupLocation$1> & typeof createPickupLocation$1>;
declare const getPickupLocation: MaybeContext<BuildRESTFunction<typeof getPickupLocation$1> & typeof getPickupLocation$1>;
declare const updatePickupLocation: MaybeContext<BuildRESTFunction<typeof updatePickupLocation$1> & typeof updatePickupLocation$1>;
declare const deletePickupLocation: MaybeContext<BuildRESTFunction<typeof deletePickupLocation$1> & typeof deletePickupLocation$1>;
declare const queryPickupLocation: MaybeContext<BuildRESTFunction<typeof queryPickupLocation$1> & typeof queryPickupLocation$1>;
declare const addDeliveryRegion: MaybeContext<BuildRESTFunction<typeof addDeliveryRegion$1> & typeof addDeliveryRegion$1>;
declare const removeDeliveryRegion: MaybeContext<BuildRESTFunction<typeof removeDeliveryRegion$1> & typeof removeDeliveryRegion$1>;
declare const bulkCreatePickupLocation: MaybeContext<BuildRESTFunction<typeof bulkCreatePickupLocation$1> & typeof bulkCreatePickupLocation$1>;
declare const bulkUpdatePickupLocation: MaybeContext<BuildRESTFunction<typeof bulkUpdatePickupLocation$1> & typeof bulkUpdatePickupLocation$1>;
declare const bulkDeletePickupLocation: MaybeContext<BuildRESTFunction<typeof bulkDeletePickupLocation$1> & typeof bulkDeletePickupLocation$1>;

type index_d$8_AddDeliveryRegionOptions = AddDeliveryRegionOptions;
type index_d$8_AddDeliveryRegionRequest = AddDeliveryRegionRequest;
type index_d$8_AddDeliveryRegionResponse = AddDeliveryRegionResponse;
type index_d$8_AddDeliveryRegionResponseNonNullableFields = AddDeliveryRegionResponseNonNullableFields;
type index_d$8_BulkCreatePickupLocationRequest = BulkCreatePickupLocationRequest;
type index_d$8_BulkCreatePickupLocationResponse = BulkCreatePickupLocationResponse;
type index_d$8_BulkCreatePickupLocationResponseNonNullableFields = BulkCreatePickupLocationResponseNonNullableFields;
type index_d$8_BulkDeletePickupLocationRequest = BulkDeletePickupLocationRequest;
type index_d$8_BulkDeletePickupLocationResponse = BulkDeletePickupLocationResponse;
type index_d$8_BulkDeletePickupLocationResponseNonNullableFields = BulkDeletePickupLocationResponseNonNullableFields;
type index_d$8_BulkUpdatePickupLocationRequest = BulkUpdatePickupLocationRequest;
type index_d$8_BulkUpdatePickupLocationResponse = BulkUpdatePickupLocationResponse;
type index_d$8_BulkUpdatePickupLocationResponseNonNullableFields = BulkUpdatePickupLocationResponseNonNullableFields;
type index_d$8_CreatePickupLocationRequest = CreatePickupLocationRequest;
type index_d$8_CreatePickupLocationResponse = CreatePickupLocationResponse;
type index_d$8_CreatePickupLocationResponseNonNullableFields = CreatePickupLocationResponseNonNullableFields;
type index_d$8_DeletePickupLocationRequest = DeletePickupLocationRequest;
type index_d$8_DeletePickupLocationResponse = DeletePickupLocationResponse;
type index_d$8_DiffmatokyPayload = DiffmatokyPayload;
type index_d$8_ErrorInformation = ErrorInformation;
type index_d$8_GetPickupLocationRequest = GetPickupLocationRequest;
type index_d$8_GetPickupLocationResponse = GetPickupLocationResponse;
type index_d$8_GetPickupLocationResponseNonNullableFields = GetPickupLocationResponseNonNullableFields;
type index_d$8_PickupLocation = PickupLocation;
type index_d$8_PickupLocationError = PickupLocationError;
type index_d$8_PickupLocationNonNullableFields = PickupLocationNonNullableFields;
type index_d$8_PickupLocationsQueryBuilder = PickupLocationsQueryBuilder;
type index_d$8_PickupLocationsQueryResult = PickupLocationsQueryResult;
type index_d$8_QueryPickupLocationRequest = QueryPickupLocationRequest;
type index_d$8_QueryPickupLocationResponse = QueryPickupLocationResponse;
type index_d$8_QueryPickupLocationResponseNonNullableFields = QueryPickupLocationResponseNonNullableFields;
type index_d$8_RemoveDeliveryRegionOptions = RemoveDeliveryRegionOptions;
type index_d$8_RemoveDeliveryRegionRequest = RemoveDeliveryRegionRequest;
type index_d$8_RemoveDeliveryRegionResponse = RemoveDeliveryRegionResponse;
type index_d$8_RemoveDeliveryRegionResponseNonNullableFields = RemoveDeliveryRegionResponseNonNullableFields;
type index_d$8_UpdatePickupLocation = UpdatePickupLocation;
type index_d$8_UpdatePickupLocationRequest = UpdatePickupLocationRequest;
type index_d$8_UpdatePickupLocationResponse = UpdatePickupLocationResponse;
type index_d$8_UpdatePickupLocationResponseNonNullableFields = UpdatePickupLocationResponseNonNullableFields;
declare const index_d$8_addDeliveryRegion: typeof addDeliveryRegion;
declare const index_d$8_bulkCreatePickupLocation: typeof bulkCreatePickupLocation;
declare const index_d$8_bulkDeletePickupLocation: typeof bulkDeletePickupLocation;
declare const index_d$8_bulkUpdatePickupLocation: typeof bulkUpdatePickupLocation;
declare const index_d$8_createPickupLocation: typeof createPickupLocation;
declare const index_d$8_deletePickupLocation: typeof deletePickupLocation;
declare const index_d$8_getPickupLocation: typeof getPickupLocation;
declare const index_d$8_queryPickupLocation: typeof queryPickupLocation;
declare const index_d$8_removeDeliveryRegion: typeof removeDeliveryRegion;
declare const index_d$8_updatePickupLocation: typeof updatePickupLocation;
declare namespace index_d$8 {
  export { type ActionEvent$5 as ActionEvent, type index_d$8_AddDeliveryRegionOptions as AddDeliveryRegionOptions, type index_d$8_AddDeliveryRegionRequest as AddDeliveryRegionRequest, type index_d$8_AddDeliveryRegionResponse as AddDeliveryRegionResponse, type index_d$8_AddDeliveryRegionResponseNonNullableFields as AddDeliveryRegionResponseNonNullableFields, type Address$3 as Address, type AddressStreetOneOf$1 as AddressStreetOneOf, type ApplicationError$2 as ApplicationError, type index_d$8_BulkCreatePickupLocationRequest as BulkCreatePickupLocationRequest, type index_d$8_BulkCreatePickupLocationResponse as BulkCreatePickupLocationResponse, type index_d$8_BulkCreatePickupLocationResponseNonNullableFields as BulkCreatePickupLocationResponseNonNullableFields, type index_d$8_BulkDeletePickupLocationRequest as BulkDeletePickupLocationRequest, type index_d$8_BulkDeletePickupLocationResponse as BulkDeletePickupLocationResponse, type index_d$8_BulkDeletePickupLocationResponseNonNullableFields as BulkDeletePickupLocationResponseNonNullableFields, type index_d$8_BulkUpdatePickupLocationRequest as BulkUpdatePickupLocationRequest, type index_d$8_BulkUpdatePickupLocationResponse as BulkUpdatePickupLocationResponse, type index_d$8_BulkUpdatePickupLocationResponseNonNullableFields as BulkUpdatePickupLocationResponseNonNullableFields, type Condition$1 as Condition, ConditionType$1 as ConditionType, type ConditionalRates$1 as ConditionalRates, type index_d$8_CreatePickupLocationRequest as CreatePickupLocationRequest, type index_d$8_CreatePickupLocationResponse as CreatePickupLocationResponse, type index_d$8_CreatePickupLocationResponseNonNullableFields as CreatePickupLocationResponseNonNullableFields, type CursorPaging$4 as CursorPaging, type CursorPagingMetadata$3 as CursorPagingMetadata, type Cursors$4 as Cursors, type index_d$8_DeletePickupLocationRequest as DeletePickupLocationRequest, type index_d$8_DeletePickupLocationResponse as DeletePickupLocationResponse, type index_d$8_DiffmatokyPayload as DiffmatokyPayload, type DomainEvent$5 as DomainEvent, type DomainEventBodyOneOf$5 as DomainEventBodyOneOf, type Empty$3 as Empty, type EntityCreatedEvent$5 as EntityCreatedEvent, type EntityDeletedEvent$5 as EntityDeletedEvent, type EntityUpdatedEvent$5 as EntityUpdatedEvent, type index_d$8_ErrorInformation as ErrorInformation, type index_d$8_GetPickupLocationRequest as GetPickupLocationRequest, type index_d$8_GetPickupLocationResponse as GetPickupLocationResponse, type index_d$8_GetPickupLocationResponseNonNullableFields as GetPickupLocationResponseNonNullableFields, type IdentificationData$5 as IdentificationData, type IdentificationDataIdOneOf$5 as IdentificationDataIdOneOf, LogicalOperator$1 as LogicalOperator, type MessageEnvelope$4 as MessageEnvelope, type Paging$1 as Paging, type index_d$8_PickupLocation as PickupLocation, type index_d$8_PickupLocationError as PickupLocationError, type index_d$8_PickupLocationNonNullableFields as PickupLocationNonNullableFields, type index_d$8_PickupLocationsQueryBuilder as PickupLocationsQueryBuilder, type index_d$8_PickupLocationsQueryResult as PickupLocationsQueryResult, type index_d$8_QueryPickupLocationRequest as QueryPickupLocationRequest, type index_d$8_QueryPickupLocationResponse as QueryPickupLocationResponse, type index_d$8_QueryPickupLocationResponseNonNullableFields as QueryPickupLocationResponseNonNullableFields, type QueryV2$1 as QueryV2, type QueryV2PagingMethodOneOf$1 as QueryV2PagingMethodOneOf, type index_d$8_RemoveDeliveryRegionOptions as RemoveDeliveryRegionOptions, type index_d$8_RemoveDeliveryRegionRequest as RemoveDeliveryRegionRequest, type index_d$8_RemoveDeliveryRegionResponse as RemoveDeliveryRegionResponse, type index_d$8_RemoveDeliveryRegionResponseNonNullableFields as RemoveDeliveryRegionResponseNonNullableFields, type RestoreInfo$5 as RestoreInfo, SortOrder$4 as SortOrder, type Sorting$4 as Sorting, type StreetAddress$3 as StreetAddress, type index_d$8_UpdatePickupLocation as UpdatePickupLocation, type index_d$8_UpdatePickupLocationRequest as UpdatePickupLocationRequest, type index_d$8_UpdatePickupLocationResponse as UpdatePickupLocationResponse, type index_d$8_UpdatePickupLocationResponseNonNullableFields as UpdatePickupLocationResponseNonNullableFields, WebhookIdentityType$4 as WebhookIdentityType, index_d$8_addDeliveryRegion as addDeliveryRegion, index_d$8_bulkCreatePickupLocation as bulkCreatePickupLocation, index_d$8_bulkDeletePickupLocation as bulkDeletePickupLocation, index_d$8_bulkUpdatePickupLocation as bulkUpdatePickupLocation, index_d$8_createPickupLocation as createPickupLocation, index_d$8_deletePickupLocation as deletePickupLocation, index_d$8_getPickupLocation as getPickupLocation, index_d$8_queryPickupLocation as queryPickupLocation, index_d$8_removeDeliveryRegion as removeDeliveryRegion, index_d$8_updatePickupLocation as updatePickupLocation };
}

interface ShippingOption$1 {
    /**
     * ShippingOption ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the ShippingOption is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the ShippingOption.
     *
     * Ignored when creating a ShippingOption.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the ShippingOption was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the ShippingOption was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Associated delivery region id. */
    deliveryRegionId?: string;
    /** Delivery option configured for the ShippingOption */
    title?: string | null;
    estimateDeliveryTime?: string | null;
    /** at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates[];
    /** Data Extensions */
    extendedFields?: ExtendedFields$2;
}
interface ConditionalRates {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition[];
    amount?: string;
}
interface Condition {
    type?: ConditionType;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator;
}
declare enum ConditionType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
declare enum LogicalOperator {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
interface ExtendedFields$2 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateShippingOptionRequest {
    /** ShippingOption to be created. */
    shippingOption: ShippingOption$1;
}
interface CreateShippingOptionResponse {
    /** The created ShippingOption. */
    shippingOption?: ShippingOption$1;
}
interface GetShippingOptionRequest {
    /** ID of the ShippingOption to retrieve. */
    shippingOptionId: string;
}
interface GetShippingOptionResponse {
    /** The requested ShippingOption. */
    shippingOption?: ShippingOption$1;
}
interface UpdateShippingOptionRequest {
    /** ShippingOption to be updated, may be partial. */
    shippingOption: ShippingOption$1;
}
interface UpdateShippingOptionResponse {
    /** Updated ShippingOption. */
    shippingOption?: ShippingOption$1;
}
interface DeleteShippingOptionRequest {
    /** Id of the ShippingOption to delete. */
    shippingOptionId: string;
}
interface DeleteShippingOptionResponse {
}
interface QueryShippingOptionsRequest {
    /** WQL expression. */
    query?: CursorQuery$2;
}
interface CursorQuery$2 extends CursorQueryPagingMethodOneOf$2 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$3;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$3[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$2 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$3;
}
interface Sorting$3 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$3;
}
declare enum SortOrder$3 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$3 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryShippingOptionsResponse {
    /** List of ShippingOptions. */
    shippingOptions?: ShippingOption$1[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$2;
}
interface CursorPagingMetadata$2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$3;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$3 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateExtendedFieldsRequest$1 {
    /** ID of the entity to update. */
    _id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse$1 {
    /** Updated ShippingOption. */
    shippingOption?: ShippingOption$1;
}
interface DomainEvent$4 extends DomainEventBodyOneOf$4 {
    createdEvent?: EntityCreatedEvent$4;
    updatedEvent?: EntityUpdatedEvent$4;
    deletedEvent?: EntityDeletedEvent$4;
    actionEvent?: ActionEvent$4;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$4 {
    createdEvent?: EntityCreatedEvent$4;
    updatedEvent?: EntityUpdatedEvent$4;
    deletedEvent?: EntityDeletedEvent$4;
    actionEvent?: ActionEvent$4;
}
interface EntityCreatedEvent$4 {
    entity?: string;
}
interface RestoreInfo$4 {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$4 {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$4 {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$4 {
    body?: string;
}
interface Empty$2 {
}
interface MessageEnvelope$3 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$4;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$4 extends IdentificationDataIdOneOf$4 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$3;
}
/** @oneof */
interface IdentificationDataIdOneOf$4 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$3 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface ConditionNonNullableFields {
    type: ConditionType;
    value: string;
    operator: LogicalOperator;
}
interface ConditionalRatesNonNullableFields {
    conditions: ConditionNonNullableFields[];
    amount: string;
}
interface ShippingOptionNonNullableFields$1 {
    deliveryRegionId: string;
    rates: ConditionalRatesNonNullableFields[];
}
interface CreateShippingOptionResponseNonNullableFields {
    shippingOption?: ShippingOptionNonNullableFields$1;
}
interface GetShippingOptionResponseNonNullableFields {
    shippingOption?: ShippingOptionNonNullableFields$1;
}
interface UpdateShippingOptionResponseNonNullableFields {
    shippingOption?: ShippingOptionNonNullableFields$1;
}
interface QueryShippingOptionsResponseNonNullableFields {
    shippingOptions: ShippingOptionNonNullableFields$1[];
}
interface UpdateExtendedFieldsResponseNonNullableFields$1 {
    shippingOption?: ShippingOptionNonNullableFields$1;
}
interface BaseEventMetadata$1 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$4;
}
interface EventMetadata$1 extends BaseEventMetadata$1 {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface ShippingOptionCreatedEnvelope {
    entity: ShippingOption$1;
    metadata: EventMetadata$1;
}
interface ShippingOptionUpdatedEnvelope {
    entity: ShippingOption$1;
    metadata: EventMetadata$1;
}
interface ShippingOptionDeletedEnvelope {
    entity: ShippingOption$1;
    metadata: EventMetadata$1;
}
interface UpdateShippingOption {
    /**
     * ShippingOption ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the ShippingOption is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the ShippingOption.
     *
     * Ignored when creating a ShippingOption.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the ShippingOption was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the ShippingOption was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Associated delivery region id. */
    deliveryRegionId?: string;
    /** Delivery option configured for the ShippingOption */
    title?: string | null;
    estimateDeliveryTime?: string | null;
    /** at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates[];
    /** Data Extensions */
    extendedFields?: ExtendedFields$2;
}
interface QueryCursorResult$3 {
    cursors: Cursors$3;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface ShippingOptionsQueryResult extends QueryCursorResult$3 {
    items: ShippingOption$1[];
    query: ShippingOptionsQueryBuilder;
    next: () => Promise<ShippingOptionsQueryResult>;
    prev: () => Promise<ShippingOptionsQueryResult>;
}
interface ShippingOptionsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'deliveryRegionId', value: any) => ShippingOptionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'deliveryRegionId', value: any) => ShippingOptionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'deliveryRegionId', value: string) => ShippingOptionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'deliveryRegionId', value: any[]) => ShippingOptionsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'deliveryRegionId', value: any) => ShippingOptionsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'deliveryRegionId', value: boolean) => ShippingOptionsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id' | 'deliveryRegionId'>) => ShippingOptionsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id' | 'deliveryRegionId'>) => ShippingOptionsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => ShippingOptionsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => ShippingOptionsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<ShippingOptionsQueryResult>;
}
interface UpdateExtendedFieldsOptions$1 {
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}

declare function createShippingOption$1(httpClient: HttpClient): CreateShippingOptionSignature;
interface CreateShippingOptionSignature {
    /**
     * Creates a ShippingOption.
     *
     * The request body must include shipping option and delivery region associated to.
     * @param - ShippingOption to be created.
     * @returns The created ShippingOption.
     */
    (shippingOption: ShippingOption$1): Promise<ShippingOption$1 & ShippingOptionNonNullableFields$1>;
}
declare function getShippingOption$1(httpClient: HttpClient): GetShippingOptionSignature;
interface GetShippingOptionSignature {
    /**
     * Retrieves a ShippingOption.
     * @param - ID of the ShippingOption to retrieve.
     * @returns The requested ShippingOption.
     */
    (shippingOptionId: string): Promise<ShippingOption$1 & ShippingOptionNonNullableFields$1>;
}
declare function updateShippingOption$1(httpClient: HttpClient): UpdateShippingOptionSignature;
interface UpdateShippingOptionSignature {
    /**
     * Updates a ShippingOption.
     *
     *
     * Each time the ShippingOption is updated,
     * `revision` increments by 1.
     * The current `revision` must be passed when updating the ShippingOption.
     * This ensures you're working with the latest ShippingOption
     * and prevents unintended overwrites.
     * @param - ShippingOption ID.
     * @returns Updated ShippingOption.
     */
    (_id: string | null, shippingOption: UpdateShippingOption): Promise<ShippingOption$1 & ShippingOptionNonNullableFields$1>;
}
declare function deleteShippingOption$1(httpClient: HttpClient): DeleteShippingOptionSignature;
interface DeleteShippingOptionSignature {
    /**
     * Deletes a ShippingOption.
     * Deleting a ShippingOption permanently removes them from the ShippingOption List.
     * @param - Id of the ShippingOption to delete.
     */
    (shippingOptionId: string): Promise<void>;
}
declare function queryShippingOptions$1(httpClient: HttpClient): QueryShippingOptionsSignature;
interface QueryShippingOptionsSignature {
    /**
     * Retrieves a list of ShippingOptions, given the provided [paging, filtering, and sorting][1].
     *
     * Up to 1,000 ShippingOptions can be returned per request.
     *
     * To learn how to query ShippingOptions, see [API Query Language][2].
     *
     * [1]: https://dev.wix.com/api/rest/getting-started/sorting-and-paging
     * [2]: https://dev.wix.com/api/rest/getting-started/api-query-language
     */
    (): ShippingOptionsQueryBuilder;
}
declare function updateExtendedFields$3(httpClient: HttpClient): UpdateExtendedFieldsSignature$1;
interface UpdateExtendedFieldsSignature$1 {
    /**
     * Updates extended fields of a ShippingOption without incrementing revision
     * @param - ID of the entity to update.
     * @param - Identifier for the app whose extended fields are being updated.
     */
    (_id: string, namespace: string, options: UpdateExtendedFieldsOptions$1): Promise<UpdateExtendedFieldsResponse$1 & UpdateExtendedFieldsResponseNonNullableFields$1>;
}
declare const onShippingOptionCreated$1: EventDefinition<ShippingOptionCreatedEnvelope, "wix.ecom.v1.shipping_option_created">;
declare const onShippingOptionUpdated$1: EventDefinition<ShippingOptionUpdatedEnvelope, "wix.ecom.v1.shipping_option_updated">;
declare const onShippingOptionDeleted$1: EventDefinition<ShippingOptionDeletedEnvelope, "wix.ecom.v1.shipping_option_deleted">;

declare function createEventModule$1<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createShippingOption: MaybeContext<BuildRESTFunction<typeof createShippingOption$1> & typeof createShippingOption$1>;
declare const getShippingOption: MaybeContext<BuildRESTFunction<typeof getShippingOption$1> & typeof getShippingOption$1>;
declare const updateShippingOption: MaybeContext<BuildRESTFunction<typeof updateShippingOption$1> & typeof updateShippingOption$1>;
declare const deleteShippingOption: MaybeContext<BuildRESTFunction<typeof deleteShippingOption$1> & typeof deleteShippingOption$1>;
declare const queryShippingOptions: MaybeContext<BuildRESTFunction<typeof queryShippingOptions$1> & typeof queryShippingOptions$1>;
declare const updateExtendedFields$2: MaybeContext<BuildRESTFunction<typeof updateExtendedFields$3> & typeof updateExtendedFields$3>;

type _publicOnShippingOptionCreatedType = typeof onShippingOptionCreated$1;
/** */
declare const onShippingOptionCreated: ReturnType<typeof createEventModule$1<_publicOnShippingOptionCreatedType>>;

type _publicOnShippingOptionUpdatedType = typeof onShippingOptionUpdated$1;
/** */
declare const onShippingOptionUpdated: ReturnType<typeof createEventModule$1<_publicOnShippingOptionUpdatedType>>;

type _publicOnShippingOptionDeletedType = typeof onShippingOptionDeleted$1;
/** */
declare const onShippingOptionDeleted: ReturnType<typeof createEventModule$1<_publicOnShippingOptionDeletedType>>;

type index_d$7_Condition = Condition;
type index_d$7_ConditionType = ConditionType;
declare const index_d$7_ConditionType: typeof ConditionType;
type index_d$7_ConditionalRates = ConditionalRates;
type index_d$7_CreateShippingOptionRequest = CreateShippingOptionRequest;
type index_d$7_CreateShippingOptionResponse = CreateShippingOptionResponse;
type index_d$7_CreateShippingOptionResponseNonNullableFields = CreateShippingOptionResponseNonNullableFields;
type index_d$7_DeleteShippingOptionRequest = DeleteShippingOptionRequest;
type index_d$7_DeleteShippingOptionResponse = DeleteShippingOptionResponse;
type index_d$7_GetShippingOptionRequest = GetShippingOptionRequest;
type index_d$7_GetShippingOptionResponse = GetShippingOptionResponse;
type index_d$7_GetShippingOptionResponseNonNullableFields = GetShippingOptionResponseNonNullableFields;
type index_d$7_LogicalOperator = LogicalOperator;
declare const index_d$7_LogicalOperator: typeof LogicalOperator;
type index_d$7_QueryShippingOptionsRequest = QueryShippingOptionsRequest;
type index_d$7_QueryShippingOptionsResponse = QueryShippingOptionsResponse;
type index_d$7_QueryShippingOptionsResponseNonNullableFields = QueryShippingOptionsResponseNonNullableFields;
type index_d$7_ShippingOptionCreatedEnvelope = ShippingOptionCreatedEnvelope;
type index_d$7_ShippingOptionDeletedEnvelope = ShippingOptionDeletedEnvelope;
type index_d$7_ShippingOptionUpdatedEnvelope = ShippingOptionUpdatedEnvelope;
type index_d$7_ShippingOptionsQueryBuilder = ShippingOptionsQueryBuilder;
type index_d$7_ShippingOptionsQueryResult = ShippingOptionsQueryResult;
type index_d$7_UpdateShippingOption = UpdateShippingOption;
type index_d$7_UpdateShippingOptionRequest = UpdateShippingOptionRequest;
type index_d$7_UpdateShippingOptionResponse = UpdateShippingOptionResponse;
type index_d$7_UpdateShippingOptionResponseNonNullableFields = UpdateShippingOptionResponseNonNullableFields;
type index_d$7__publicOnShippingOptionCreatedType = _publicOnShippingOptionCreatedType;
type index_d$7__publicOnShippingOptionDeletedType = _publicOnShippingOptionDeletedType;
type index_d$7__publicOnShippingOptionUpdatedType = _publicOnShippingOptionUpdatedType;
declare const index_d$7_createShippingOption: typeof createShippingOption;
declare const index_d$7_deleteShippingOption: typeof deleteShippingOption;
declare const index_d$7_getShippingOption: typeof getShippingOption;
declare const index_d$7_onShippingOptionCreated: typeof onShippingOptionCreated;
declare const index_d$7_onShippingOptionDeleted: typeof onShippingOptionDeleted;
declare const index_d$7_onShippingOptionUpdated: typeof onShippingOptionUpdated;
declare const index_d$7_queryShippingOptions: typeof queryShippingOptions;
declare const index_d$7_updateShippingOption: typeof updateShippingOption;
declare namespace index_d$7 {
  export { type ActionEvent$4 as ActionEvent, type BaseEventMetadata$1 as BaseEventMetadata, type index_d$7_Condition as Condition, index_d$7_ConditionType as ConditionType, type index_d$7_ConditionalRates as ConditionalRates, type index_d$7_CreateShippingOptionRequest as CreateShippingOptionRequest, type index_d$7_CreateShippingOptionResponse as CreateShippingOptionResponse, type index_d$7_CreateShippingOptionResponseNonNullableFields as CreateShippingOptionResponseNonNullableFields, type CursorPaging$3 as CursorPaging, type CursorPagingMetadata$2 as CursorPagingMetadata, type CursorQuery$2 as CursorQuery, type CursorQueryPagingMethodOneOf$2 as CursorQueryPagingMethodOneOf, type Cursors$3 as Cursors, type index_d$7_DeleteShippingOptionRequest as DeleteShippingOptionRequest, type index_d$7_DeleteShippingOptionResponse as DeleteShippingOptionResponse, type DomainEvent$4 as DomainEvent, type DomainEventBodyOneOf$4 as DomainEventBodyOneOf, type Empty$2 as Empty, type EntityCreatedEvent$4 as EntityCreatedEvent, type EntityDeletedEvent$4 as EntityDeletedEvent, type EntityUpdatedEvent$4 as EntityUpdatedEvent, type EventMetadata$1 as EventMetadata, type ExtendedFields$2 as ExtendedFields, type index_d$7_GetShippingOptionRequest as GetShippingOptionRequest, type index_d$7_GetShippingOptionResponse as GetShippingOptionResponse, type index_d$7_GetShippingOptionResponseNonNullableFields as GetShippingOptionResponseNonNullableFields, type IdentificationData$4 as IdentificationData, type IdentificationDataIdOneOf$4 as IdentificationDataIdOneOf, index_d$7_LogicalOperator as LogicalOperator, type MessageEnvelope$3 as MessageEnvelope, type index_d$7_QueryShippingOptionsRequest as QueryShippingOptionsRequest, type index_d$7_QueryShippingOptionsResponse as QueryShippingOptionsResponse, type index_d$7_QueryShippingOptionsResponseNonNullableFields as QueryShippingOptionsResponseNonNullableFields, type RestoreInfo$4 as RestoreInfo, type ShippingOption$1 as ShippingOption, type index_d$7_ShippingOptionCreatedEnvelope as ShippingOptionCreatedEnvelope, type index_d$7_ShippingOptionDeletedEnvelope as ShippingOptionDeletedEnvelope, type ShippingOptionNonNullableFields$1 as ShippingOptionNonNullableFields, type index_d$7_ShippingOptionUpdatedEnvelope as ShippingOptionUpdatedEnvelope, type index_d$7_ShippingOptionsQueryBuilder as ShippingOptionsQueryBuilder, type index_d$7_ShippingOptionsQueryResult as ShippingOptionsQueryResult, SortOrder$3 as SortOrder, type Sorting$3 as Sorting, type UpdateExtendedFieldsOptions$1 as UpdateExtendedFieldsOptions, type UpdateExtendedFieldsRequest$1 as UpdateExtendedFieldsRequest, type UpdateExtendedFieldsResponse$1 as UpdateExtendedFieldsResponse, type UpdateExtendedFieldsResponseNonNullableFields$1 as UpdateExtendedFieldsResponseNonNullableFields, type index_d$7_UpdateShippingOption as UpdateShippingOption, type index_d$7_UpdateShippingOptionRequest as UpdateShippingOptionRequest, type index_d$7_UpdateShippingOptionResponse as UpdateShippingOptionResponse, type index_d$7_UpdateShippingOptionResponseNonNullableFields as UpdateShippingOptionResponseNonNullableFields, WebhookIdentityType$3 as WebhookIdentityType, type index_d$7__publicOnShippingOptionCreatedType as _publicOnShippingOptionCreatedType, type index_d$7__publicOnShippingOptionDeletedType as _publicOnShippingOptionDeletedType, type index_d$7__publicOnShippingOptionUpdatedType as _publicOnShippingOptionUpdatedType, index_d$7_createShippingOption as createShippingOption, index_d$7_deleteShippingOption as deleteShippingOption, index_d$7_getShippingOption as getShippingOption, index_d$7_onShippingOptionCreated as onShippingOptionCreated, index_d$7_onShippingOptionDeleted as onShippingOptionDeleted, index_d$7_onShippingOptionUpdated as onShippingOptionUpdated, onShippingOptionCreated$1 as publicOnShippingOptionCreated, onShippingOptionDeleted$1 as publicOnShippingOptionDeleted, onShippingOptionUpdated$1 as publicOnShippingOptionUpdated, index_d$7_queryShippingOptions as queryShippingOptions, updateExtendedFields$2 as updateExtendedFields, index_d$7_updateShippingOption as updateShippingOption };
}

interface ShippoConfiguration {
    /**
     * ShippoConfiguration ID.
     * @readonly
     */
    _id?: string | null;
    /** @readonly */
    revision?: string | null;
    /**
     * Date and time the ShippoConfiguration was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the ShippoConfiguration was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Associated delivery region ID. */
    deliveryRegionId?: string | null;
    /** Settings of USPS domestic services. */
    domesticServices?: DomesticServiceSettings[];
    /** Settings of USPS international services. */
    internationalServices?: InternationalServiceSettings[];
    /** Package type. */
    packageType?: PackageType;
    /** Package details. */
    packageDetails?: PackageDetails;
    /** Location ID from OS location service. */
    osLocationId?: string | null;
    /**
     * Ship from address materialized from OS location.
     * @readonly
     */
    shipFromAddress?: Address$2;
    /** Backup weight. */
    backupWeight?: string | null;
    /** Data extensions. */
    extendedFields?: ExtendedFields$1;
}
interface DomesticServiceSettings {
    /** USPS domestic service. */
    service?: DomesticService;
    /** Service settings. */
    serviceSettings?: ServiceSettings;
}
declare enum DomesticService {
    UNKNOWN_DOMESTIC_SERVICE = "UNKNOWN_DOMESTIC_SERVICE",
    GROUND_ADVANTAGE = "GROUND_ADVANTAGE",
    PRIORITY_MAIL = "PRIORITY_MAIL",
    PRIORITY_MAIL_EXPRESS = "PRIORITY_MAIL_EXPRESS"
}
interface ServiceSettings {
    /** Estimated delivery time. */
    estimatedDeliveryTime?: string | null;
    /** Handling fee. */
    handlingFee?: HandlingFee;
    /** Amount above which free delivery is offered. */
    freeDeliveryMinimumAmount?: string | null;
}
interface HandlingFee {
    /** Value that will be used to calculate the fee. For example, percentage fee with value 5% to calculate the fee. */
    value?: string;
    /** How to calculate the fee: fixed amount or by percentage. */
    calculationType?: CalculationType;
}
declare enum CalculationType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    FIXED = "FIXED",
    PERCENTAGE = "PERCENTAGE"
}
interface InternationalServiceSettings {
    /** USPS international service. */
    service?: InternationalService;
    /** Service settings. */
    serviceSettings?: ServiceSettings;
}
declare enum InternationalService {
    UNKNOWN_INTERNATIONAL_SERVICE = "UNKNOWN_INTERNATIONAL_SERVICE",
    FIRST_CLASS_PACKAGE_INTERNATIONAL = "FIRST_CLASS_PACKAGE_INTERNATIONAL",
    PRIORITY_MAIL_INTERNATIONAL = "PRIORITY_MAIL_INTERNATIONAL",
    PRIORITY_MAIL_EXPRESS_INTERNATIONAL = "PRIORITY_MAIL_EXPRESS_INTERNATIONAL"
}
declare enum PackageType {
    UNKNOWN_PACKAGE_TYPE = "UNKNOWN_PACKAGE_TYPE",
    CUSTOM = "CUSTOM",
    FLAT_RATE_ENVELOPE = "FLAT_RATE_ENVELOPE",
    PADDED_FLAT_RATE_ENVELOPE = "PADDED_FLAT_RATE_ENVELOPE",
    SMALL_FLAT_RATE_BOX = "SMALL_FLAT_RATE_BOX",
    MEDIUM_FLAT_RATE_BOX_1 = "MEDIUM_FLAT_RATE_BOX_1",
    MEDIUM_FLAT_RATE_BOX_2 = "MEDIUM_FLAT_RATE_BOX_2",
    LARGE_FLAT_RATE_BOX = "LARGE_FLAT_RATE_BOX"
}
interface PackageDetails {
    /**
     * Package name. Must be set when package type is CUSTOM.
     * For other package types, it is read-only, and an exception will be thrown
     * if it set when creating a ShippoConfiguration.
     */
    name?: string | null;
    /**
     * Package dimensions. Can only be set when package type is CUSTOM.
     * For other package types, it is read-only, and an exception will be thrown
     * if it set when creating a ShippoConfiguration.
     */
    dimensions?: PackageDimensions;
    /**
     * Maximum number of products. Must be set when package type is NOT CUSTOM.
     * Otherwise, if the package type is CUSTOM, this field cannot be set and an
     * exception will be thrown if it is set when creating a ShippoConfiguration.
     */
    maxNumberOfProducts?: string | null;
}
interface PackageDimensions {
    /** Package length. */
    length?: string;
    /** Package width. */
    width?: string;
    /** Package height. */
    height?: string;
}
/** Physical address */
interface Address$2 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$2;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$2 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation$2 {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
interface ExtendedFields$1 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateShippoConfigurationRequest {
    /** ShippoConfiguration to be created. */
    shippoConfiguration: ShippoConfiguration;
    backupRate?: string | null;
}
interface CreateShippoConfigurationResponse {
    /** The created ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface GetShippoConfigurationRequest {
    /** ID of the ShippoConfiguration to retrieve. */
    shippoConfigurationId: string;
}
interface GetShippoConfigurationResponse {
    /** The requested ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface UpdateShippoConfigurationRequest {
    /** ShippoConfiguration to be updated, may be partial. */
    shippoConfiguration: ShippoConfiguration;
}
interface UpdateShippoConfigurationResponse {
    /** Updated ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface DeleteShippoConfigurationRequest {
    /** ID of the ShippoConfiguration to delete. */
    shippoConfigurationId: string;
}
interface DeleteShippoConfigurationResponse {
}
interface QueryShippoConfigurationsRequest {
    /** WQL expression. */
    query?: CursorQuery$1;
}
interface CursorQuery$1 extends CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$2;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$2[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$2;
}
interface Sorting$2 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$2;
}
declare enum SortOrder$2 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$2 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryShippoConfigurationsResponse {
    /** List of ShippoConfigurations. */
    shippoConfigurations?: ShippoConfiguration[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$1;
}
interface CursorPagingMetadata$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$2;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$2 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateExtendedFieldsRequest {
    /** ID of the entity to update. */
    _id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse {
    /** Updated ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface DomainEvent$3 extends DomainEventBodyOneOf$3 {
    createdEvent?: EntityCreatedEvent$3;
    updatedEvent?: EntityUpdatedEvent$3;
    deletedEvent?: EntityDeletedEvent$3;
    actionEvent?: ActionEvent$3;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$3 {
    createdEvent?: EntityCreatedEvent$3;
    updatedEvent?: EntityUpdatedEvent$3;
    deletedEvent?: EntityDeletedEvent$3;
    actionEvent?: ActionEvent$3;
}
interface EntityCreatedEvent$3 {
    entity?: string;
}
interface RestoreInfo$3 {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$3 {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$3 {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$3 {
    body?: string;
}
interface Empty$1 {
}
interface MessageEnvelope$2 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$3;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$3 extends IdentificationDataIdOneOf$3 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$2;
}
/** @oneof */
interface IdentificationDataIdOneOf$3 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$2 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface HandlingFeeNonNullableFields {
    value: string;
    calculationType: CalculationType;
}
interface ServiceSettingsNonNullableFields {
    handlingFee?: HandlingFeeNonNullableFields;
}
interface DomesticServiceSettingsNonNullableFields {
    service: DomesticService;
    serviceSettings?: ServiceSettingsNonNullableFields;
}
interface InternationalServiceSettingsNonNullableFields {
    service: InternationalService;
    serviceSettings?: ServiceSettingsNonNullableFields;
}
interface PackageDimensionsNonNullableFields {
    length: string;
    width: string;
    height: string;
}
interface PackageDetailsNonNullableFields {
    dimensions?: PackageDimensionsNonNullableFields;
}
interface StreetAddressNonNullableFields$2 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$2 {
    streetAddress?: StreetAddressNonNullableFields$2;
}
interface ShippoConfigurationNonNullableFields {
    domesticServices: DomesticServiceSettingsNonNullableFields[];
    internationalServices: InternationalServiceSettingsNonNullableFields[];
    packageType: PackageType;
    packageDetails?: PackageDetailsNonNullableFields;
    shipFromAddress?: AddressNonNullableFields$2;
}
interface CreateShippoConfigurationResponseNonNullableFields {
    shippoConfiguration?: ShippoConfigurationNonNullableFields;
}
interface GetShippoConfigurationResponseNonNullableFields {
    shippoConfiguration?: ShippoConfigurationNonNullableFields;
}
interface UpdateShippoConfigurationResponseNonNullableFields {
    shippoConfiguration?: ShippoConfigurationNonNullableFields;
}
interface QueryShippoConfigurationsResponseNonNullableFields {
    shippoConfigurations: ShippoConfigurationNonNullableFields[];
}
interface UpdateExtendedFieldsResponseNonNullableFields {
    shippoConfiguration?: ShippoConfigurationNonNullableFields;
}
interface BaseEventMetadata {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$3;
}
interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface ShippoConfigurationCreatedEnvelope {
    entity: ShippoConfiguration;
    metadata: EventMetadata;
}
interface ShippoConfigurationUpdatedEnvelope {
    entity: ShippoConfiguration;
    metadata: EventMetadata;
}
interface ShippoConfigurationDeletedEnvelope {
    entity: ShippoConfiguration;
    metadata: EventMetadata;
}
interface CreateShippoConfigurationOptions {
    backupRate?: string | null;
}
interface UpdateShippoConfiguration {
    /**
     * ShippoConfiguration ID.
     * @readonly
     */
    _id?: string | null;
    /** @readonly */
    revision?: string | null;
    /**
     * Date and time the ShippoConfiguration was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the ShippoConfiguration was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Associated delivery region ID. */
    deliveryRegionId?: string | null;
    /** Settings of USPS domestic services. */
    domesticServices?: DomesticServiceSettings[];
    /** Settings of USPS international services. */
    internationalServices?: InternationalServiceSettings[];
    /** Package type. */
    packageType?: PackageType;
    /** Package details. */
    packageDetails?: PackageDetails;
    /** Location ID from OS location service. */
    osLocationId?: string | null;
    /**
     * Ship from address materialized from OS location.
     * @readonly
     */
    shipFromAddress?: Address$2;
    /** Backup weight. */
    backupWeight?: string | null;
    /** Data extensions. */
    extendedFields?: ExtendedFields$1;
}
interface QueryCursorResult$2 {
    cursors: Cursors$2;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface ShippoConfigurationsQueryResult extends QueryCursorResult$2 {
    items: ShippoConfiguration[];
    query: ShippoConfigurationsQueryBuilder;
    next: () => Promise<ShippoConfigurationsQueryResult>;
    prev: () => Promise<ShippoConfigurationsQueryResult>;
}
interface ShippoConfigurationsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'deliveryRegionId', value: any) => ShippoConfigurationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'deliveryRegionId', value: any) => ShippoConfigurationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'deliveryRegionId', value: string) => ShippoConfigurationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'deliveryRegionId', value: any[]) => ShippoConfigurationsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'deliveryRegionId', value: any) => ShippoConfigurationsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'deliveryRegionId', value: boolean) => ShippoConfigurationsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id' | 'deliveryRegionId'>) => ShippoConfigurationsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id' | 'deliveryRegionId'>) => ShippoConfigurationsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => ShippoConfigurationsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => ShippoConfigurationsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<ShippoConfigurationsQueryResult>;
}
interface UpdateExtendedFieldsOptions {
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}

declare function createShippoConfiguration$1(httpClient: HttpClient): CreateShippoConfigurationSignature;
interface CreateShippoConfigurationSignature {
    /**
     * Creates a ShippoConfiguration.
     * @param - ShippoConfiguration to be created.
     * @returns The created ShippoConfiguration.
     */
    (shippoConfiguration: ShippoConfiguration, options?: CreateShippoConfigurationOptions | undefined): Promise<ShippoConfiguration & ShippoConfigurationNonNullableFields>;
}
declare function getShippoConfiguration$1(httpClient: HttpClient): GetShippoConfigurationSignature;
interface GetShippoConfigurationSignature {
    /**
     * Retrieves a ShippoConfiguration.
     * @param - ID of the ShippoConfiguration to retrieve.
     * @returns The requested ShippoConfiguration.
     */
    (shippoConfigurationId: string): Promise<ShippoConfiguration & ShippoConfigurationNonNullableFields>;
}
declare function updateShippoConfiguration$1(httpClient: HttpClient): UpdateShippoConfigurationSignature;
interface UpdateShippoConfigurationSignature {
    /**
     * Updates a ShippoConfiguration.
     * @param - ShippoConfiguration ID.
     * @returns Updated ShippoConfiguration.
     */
    (_id: string | null, shippoConfiguration: UpdateShippoConfiguration): Promise<ShippoConfiguration & ShippoConfigurationNonNullableFields>;
}
declare function deleteShippoConfiguration$1(httpClient: HttpClient): DeleteShippoConfigurationSignature;
interface DeleteShippoConfigurationSignature {
    /**
     * Deletes a ShippoConfiguration.
     * @param - ID of the ShippoConfiguration to delete.
     */
    (shippoConfigurationId: string): Promise<void>;
}
declare function queryShippoConfigurations$1(httpClient: HttpClient): QueryShippoConfigurationsSignature;
interface QueryShippoConfigurationsSignature {
    /**
     * Retrieves a list of ShippoConfigurations, given the provided [paging, filtering, and sorting][1].
     *
     * Up to 1,000 ShippoConfigurations can be returned per request.
     *
     * To learn how to query ShippoConfigurations, see [API Query Language][2].
     *
     * [1]: https://dev.wix.com/api/rest/getting-started/sorting-and-paging
     * [2]: https://dev.wix.com/api/rest/getting-started/api-query-language
     */
    (): ShippoConfigurationsQueryBuilder;
}
declare function updateExtendedFields$1(httpClient: HttpClient): UpdateExtendedFieldsSignature;
interface UpdateExtendedFieldsSignature {
    /**
     * Updates extended fields of a ShippoConfiguration without incrementing revision
     * @param - ID of the entity to update.
     * @param - Identifier for the app whose extended fields are being updated.
     */
    (_id: string, namespace: string, options: UpdateExtendedFieldsOptions): Promise<UpdateExtendedFieldsResponse & UpdateExtendedFieldsResponseNonNullableFields>;
}
declare const onShippoConfigurationCreated$1: EventDefinition<ShippoConfigurationCreatedEnvelope, "wix.ecom.v1.shippo_configuration_created">;
declare const onShippoConfigurationUpdated$1: EventDefinition<ShippoConfigurationUpdatedEnvelope, "wix.ecom.v1.shippo_configuration_updated">;
declare const onShippoConfigurationDeleted$1: EventDefinition<ShippoConfigurationDeletedEnvelope, "wix.ecom.v1.shippo_configuration_deleted">;

declare function createEventModule<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createShippoConfiguration: MaybeContext<BuildRESTFunction<typeof createShippoConfiguration$1> & typeof createShippoConfiguration$1>;
declare const getShippoConfiguration: MaybeContext<BuildRESTFunction<typeof getShippoConfiguration$1> & typeof getShippoConfiguration$1>;
declare const updateShippoConfiguration: MaybeContext<BuildRESTFunction<typeof updateShippoConfiguration$1> & typeof updateShippoConfiguration$1>;
declare const deleteShippoConfiguration: MaybeContext<BuildRESTFunction<typeof deleteShippoConfiguration$1> & typeof deleteShippoConfiguration$1>;
declare const queryShippoConfigurations: MaybeContext<BuildRESTFunction<typeof queryShippoConfigurations$1> & typeof queryShippoConfigurations$1>;
declare const updateExtendedFields: MaybeContext<BuildRESTFunction<typeof updateExtendedFields$1> & typeof updateExtendedFields$1>;

type _publicOnShippoConfigurationCreatedType = typeof onShippoConfigurationCreated$1;
/** */
declare const onShippoConfigurationCreated: ReturnType<typeof createEventModule<_publicOnShippoConfigurationCreatedType>>;

type _publicOnShippoConfigurationUpdatedType = typeof onShippoConfigurationUpdated$1;
/** */
declare const onShippoConfigurationUpdated: ReturnType<typeof createEventModule<_publicOnShippoConfigurationUpdatedType>>;

type _publicOnShippoConfigurationDeletedType = typeof onShippoConfigurationDeleted$1;
/** */
declare const onShippoConfigurationDeleted: ReturnType<typeof createEventModule<_publicOnShippoConfigurationDeletedType>>;

type index_d$6_BaseEventMetadata = BaseEventMetadata;
type index_d$6_CalculationType = CalculationType;
declare const index_d$6_CalculationType: typeof CalculationType;
type index_d$6_CreateShippoConfigurationOptions = CreateShippoConfigurationOptions;
type index_d$6_CreateShippoConfigurationRequest = CreateShippoConfigurationRequest;
type index_d$6_CreateShippoConfigurationResponse = CreateShippoConfigurationResponse;
type index_d$6_CreateShippoConfigurationResponseNonNullableFields = CreateShippoConfigurationResponseNonNullableFields;
type index_d$6_DeleteShippoConfigurationRequest = DeleteShippoConfigurationRequest;
type index_d$6_DeleteShippoConfigurationResponse = DeleteShippoConfigurationResponse;
type index_d$6_DomesticService = DomesticService;
declare const index_d$6_DomesticService: typeof DomesticService;
type index_d$6_DomesticServiceSettings = DomesticServiceSettings;
type index_d$6_EventMetadata = EventMetadata;
type index_d$6_GetShippoConfigurationRequest = GetShippoConfigurationRequest;
type index_d$6_GetShippoConfigurationResponse = GetShippoConfigurationResponse;
type index_d$6_GetShippoConfigurationResponseNonNullableFields = GetShippoConfigurationResponseNonNullableFields;
type index_d$6_HandlingFee = HandlingFee;
type index_d$6_InternationalService = InternationalService;
declare const index_d$6_InternationalService: typeof InternationalService;
type index_d$6_InternationalServiceSettings = InternationalServiceSettings;
type index_d$6_PackageDetails = PackageDetails;
type index_d$6_PackageDimensions = PackageDimensions;
type index_d$6_PackageType = PackageType;
declare const index_d$6_PackageType: typeof PackageType;
type index_d$6_QueryShippoConfigurationsRequest = QueryShippoConfigurationsRequest;
type index_d$6_QueryShippoConfigurationsResponse = QueryShippoConfigurationsResponse;
type index_d$6_QueryShippoConfigurationsResponseNonNullableFields = QueryShippoConfigurationsResponseNonNullableFields;
type index_d$6_ServiceSettings = ServiceSettings;
type index_d$6_ShippoConfiguration = ShippoConfiguration;
type index_d$6_ShippoConfigurationCreatedEnvelope = ShippoConfigurationCreatedEnvelope;
type index_d$6_ShippoConfigurationDeletedEnvelope = ShippoConfigurationDeletedEnvelope;
type index_d$6_ShippoConfigurationNonNullableFields = ShippoConfigurationNonNullableFields;
type index_d$6_ShippoConfigurationUpdatedEnvelope = ShippoConfigurationUpdatedEnvelope;
type index_d$6_ShippoConfigurationsQueryBuilder = ShippoConfigurationsQueryBuilder;
type index_d$6_ShippoConfigurationsQueryResult = ShippoConfigurationsQueryResult;
type index_d$6_UpdateExtendedFieldsOptions = UpdateExtendedFieldsOptions;
type index_d$6_UpdateExtendedFieldsRequest = UpdateExtendedFieldsRequest;
type index_d$6_UpdateExtendedFieldsResponse = UpdateExtendedFieldsResponse;
type index_d$6_UpdateExtendedFieldsResponseNonNullableFields = UpdateExtendedFieldsResponseNonNullableFields;
type index_d$6_UpdateShippoConfiguration = UpdateShippoConfiguration;
type index_d$6_UpdateShippoConfigurationRequest = UpdateShippoConfigurationRequest;
type index_d$6_UpdateShippoConfigurationResponse = UpdateShippoConfigurationResponse;
type index_d$6_UpdateShippoConfigurationResponseNonNullableFields = UpdateShippoConfigurationResponseNonNullableFields;
type index_d$6__publicOnShippoConfigurationCreatedType = _publicOnShippoConfigurationCreatedType;
type index_d$6__publicOnShippoConfigurationDeletedType = _publicOnShippoConfigurationDeletedType;
type index_d$6__publicOnShippoConfigurationUpdatedType = _publicOnShippoConfigurationUpdatedType;
declare const index_d$6_createShippoConfiguration: typeof createShippoConfiguration;
declare const index_d$6_deleteShippoConfiguration: typeof deleteShippoConfiguration;
declare const index_d$6_getShippoConfiguration: typeof getShippoConfiguration;
declare const index_d$6_onShippoConfigurationCreated: typeof onShippoConfigurationCreated;
declare const index_d$6_onShippoConfigurationDeleted: typeof onShippoConfigurationDeleted;
declare const index_d$6_onShippoConfigurationUpdated: typeof onShippoConfigurationUpdated;
declare const index_d$6_queryShippoConfigurations: typeof queryShippoConfigurations;
declare const index_d$6_updateExtendedFields: typeof updateExtendedFields;
declare const index_d$6_updateShippoConfiguration: typeof updateShippoConfiguration;
declare namespace index_d$6 {
  export { type ActionEvent$3 as ActionEvent, type Address$2 as Address, type AddressLocation$2 as AddressLocation, type index_d$6_BaseEventMetadata as BaseEventMetadata, index_d$6_CalculationType as CalculationType, type index_d$6_CreateShippoConfigurationOptions as CreateShippoConfigurationOptions, type index_d$6_CreateShippoConfigurationRequest as CreateShippoConfigurationRequest, type index_d$6_CreateShippoConfigurationResponse as CreateShippoConfigurationResponse, type index_d$6_CreateShippoConfigurationResponseNonNullableFields as CreateShippoConfigurationResponseNonNullableFields, type CursorPaging$2 as CursorPaging, type CursorPagingMetadata$1 as CursorPagingMetadata, type CursorQuery$1 as CursorQuery, type CursorQueryPagingMethodOneOf$1 as CursorQueryPagingMethodOneOf, type Cursors$2 as Cursors, type index_d$6_DeleteShippoConfigurationRequest as DeleteShippoConfigurationRequest, type index_d$6_DeleteShippoConfigurationResponse as DeleteShippoConfigurationResponse, type DomainEvent$3 as DomainEvent, type DomainEventBodyOneOf$3 as DomainEventBodyOneOf, index_d$6_DomesticService as DomesticService, type index_d$6_DomesticServiceSettings as DomesticServiceSettings, type Empty$1 as Empty, type EntityCreatedEvent$3 as EntityCreatedEvent, type EntityDeletedEvent$3 as EntityDeletedEvent, type EntityUpdatedEvent$3 as EntityUpdatedEvent, type index_d$6_EventMetadata as EventMetadata, type ExtendedFields$1 as ExtendedFields, type index_d$6_GetShippoConfigurationRequest as GetShippoConfigurationRequest, type index_d$6_GetShippoConfigurationResponse as GetShippoConfigurationResponse, type index_d$6_GetShippoConfigurationResponseNonNullableFields as GetShippoConfigurationResponseNonNullableFields, type index_d$6_HandlingFee as HandlingFee, type IdentificationData$3 as IdentificationData, type IdentificationDataIdOneOf$3 as IdentificationDataIdOneOf, index_d$6_InternationalService as InternationalService, type index_d$6_InternationalServiceSettings as InternationalServiceSettings, type MessageEnvelope$2 as MessageEnvelope, type index_d$6_PackageDetails as PackageDetails, type index_d$6_PackageDimensions as PackageDimensions, index_d$6_PackageType as PackageType, type index_d$6_QueryShippoConfigurationsRequest as QueryShippoConfigurationsRequest, type index_d$6_QueryShippoConfigurationsResponse as QueryShippoConfigurationsResponse, type index_d$6_QueryShippoConfigurationsResponseNonNullableFields as QueryShippoConfigurationsResponseNonNullableFields, type RestoreInfo$3 as RestoreInfo, type index_d$6_ServiceSettings as ServiceSettings, type index_d$6_ShippoConfiguration as ShippoConfiguration, type index_d$6_ShippoConfigurationCreatedEnvelope as ShippoConfigurationCreatedEnvelope, type index_d$6_ShippoConfigurationDeletedEnvelope as ShippoConfigurationDeletedEnvelope, type index_d$6_ShippoConfigurationNonNullableFields as ShippoConfigurationNonNullableFields, type index_d$6_ShippoConfigurationUpdatedEnvelope as ShippoConfigurationUpdatedEnvelope, type index_d$6_ShippoConfigurationsQueryBuilder as ShippoConfigurationsQueryBuilder, type index_d$6_ShippoConfigurationsQueryResult as ShippoConfigurationsQueryResult, SortOrder$2 as SortOrder, type Sorting$2 as Sorting, type StreetAddress$2 as StreetAddress, type index_d$6_UpdateExtendedFieldsOptions as UpdateExtendedFieldsOptions, type index_d$6_UpdateExtendedFieldsRequest as UpdateExtendedFieldsRequest, type index_d$6_UpdateExtendedFieldsResponse as UpdateExtendedFieldsResponse, type index_d$6_UpdateExtendedFieldsResponseNonNullableFields as UpdateExtendedFieldsResponseNonNullableFields, type index_d$6_UpdateShippoConfiguration as UpdateShippoConfiguration, type index_d$6_UpdateShippoConfigurationRequest as UpdateShippoConfigurationRequest, type index_d$6_UpdateShippoConfigurationResponse as UpdateShippoConfigurationResponse, type index_d$6_UpdateShippoConfigurationResponseNonNullableFields as UpdateShippoConfigurationResponseNonNullableFields, WebhookIdentityType$2 as WebhookIdentityType, type index_d$6__publicOnShippoConfigurationCreatedType as _publicOnShippoConfigurationCreatedType, type index_d$6__publicOnShippoConfigurationDeletedType as _publicOnShippoConfigurationDeletedType, type index_d$6__publicOnShippoConfigurationUpdatedType as _publicOnShippoConfigurationUpdatedType, index_d$6_createShippoConfiguration as createShippoConfiguration, index_d$6_deleteShippoConfiguration as deleteShippoConfiguration, index_d$6_getShippoConfiguration as getShippoConfiguration, index_d$6_onShippoConfigurationCreated as onShippoConfigurationCreated, index_d$6_onShippoConfigurationDeleted as onShippoConfigurationDeleted, index_d$6_onShippoConfigurationUpdated as onShippoConfigurationUpdated, onShippoConfigurationCreated$1 as publicOnShippoConfigurationCreated, onShippoConfigurationDeleted$1 as publicOnShippoConfigurationDeleted, onShippoConfigurationUpdated$1 as publicOnShippoConfigurationUpdated, index_d$6_queryShippoConfigurations as queryShippoConfigurations, index_d$6_updateExtendedFields as updateExtendedFields, index_d$6_updateShippoConfiguration as updateShippoConfiguration };
}

interface TotalsCalculationEntity {
}
interface CalculateTotalsRequest extends CalculateTotalsRequestCouponOneOf, CalculateTotalsRequestGiftCardOneOf {
    /** Coupon ID. */
    couponId?: string | null;
    /** Coupon code. */
    couponCode?: string | null;
    /** Gift card ID. */
    giftCardId?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
    /**
     * Calculation ID. An identifier of the entity that you are calculating totals for, for example, cart ID or checkout ID.
     * This value will be used in order to optimise calculations by caching.
     * If not passed, calculation might be slower in some cases.
     */
    calculationId?: string | null;
    /** Line items for calculation. */
    lineItems?: LineItem[];
    /** Shipping address for tax and shipping calculation (if applicable). */
    shippingAddress?: Address$1;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$1;
    /** Details about selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /**
     * Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart/checkout.
     * @deprecated
     */
    merchantDiscounts?: MerchantDiscountInput[];
    /** Buyer email. Used to enforce coupon [single-use per customer](https://support.wix.com/en/article/wix-stores-limiting-coupon-usage). If not passed, single coupon usage per customer will not be enforced. */
    buyerEmail?: string | null;
    /**
     * Member id to use for this calculation
     * When not provided, given that the caller is a member, its member id will be used
     * Providing this require elevated permissions - ECOM.ADMIN_CALCULATE_TOTALS
     */
    memberId?: string | null;
    /**
     * The selected memberships and which line items they apply to
     * When not provided, default selection will be returned
     * You can also set it to empty selection
     */
    selectedMemberships?: SelectedMemberships;
    /** Buyer phone number. Used to get shipping rates. */
    buyerPhone?: string | null;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}
/** @oneof */
interface CalculateTotalsRequestCouponOneOf {
    /** Coupon ID. */
    couponId?: string | null;
    /** Coupon code. */
    couponCode?: string | null;
}
/** @oneof */
interface CalculateTotalsRequestGiftCardOneOf {
    /** Gift card ID. */
    giftCardId?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
}
interface LineItem {
    /** Line item ID. */
    _id?: string;
    /** Quantity. */
    quantity?: number | null;
    /**
     * Optional references to the line item's origin catalog.
     * See [Catalog SPI](https://bo.wix.com/wix-docs/rest/ecommerce/catalog-spi/introduction) for more details.
     * This field may be empty in the case of a custom line item.
     * currently we only use the catalog app id to set tax=0 for specific apps.
     */
    catalogReference?: CatalogReference$2;
    /** Product/booking/event name. */
    productName?: string | null;
    /** Price. */
    price?: string;
    /** Physical properties (if applicable). */
    physicalProperties?: PhysicalProperties$1;
    /** Subscription settings. */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType;
    /** Service properties. When relevant, this contains information such as date and number of participants. */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field has the same value as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Optional - partial amount of item's price to be paid now for checkout cases with DEPOSIT_ONLINE payment option
     * If omitted - item's price will not be split and is expected to be paid in single installment
     */
    depositAmount?: string | null;
    /** full price of the item before all the discounts */
    fullPrice?: string | null;
    /** The Item's Delivery Profile Id */
    deliveryProfileId?: string | null;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$2 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface PhysicalProperties$1 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface Scope {
    /** Scope namespace (Wix Stores, Wix Bookings, Wix Events, Wix Pricing Plans) */
    namespace?: string;
    /** Coupon scope's applied group (e.g., event or ticket in Wix Events) */
    group?: Group;
}
interface Group {
    /** Coupon scope's group (e.g., product or collection in Wix Stores). See [valid scope values](https://dev.wix.com/api/rest/coupons/coupons/valid-scope-values). */
    name?: string;
    /** Item ID (when the coupon scope is limited to just one item). */
    entityId?: string | null;
}
interface SubscriptionSettings {
    /** Frequency of recurring payment. Every day/week/month/year. */
    frequency?: SubscriptionFrequency;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
interface TaxableAddress extends TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType;
}
/** @oneof */
interface TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType;
}
declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Physical address */
interface Address$1 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$1;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$1 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation$1 {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
interface SelectedShippingOption {
    /** Carrier ID. */
    carrierId?: string | null;
    /** Selected shipping option code. For example, "usps_std_overnight". */
    code?: string;
}
interface MerchantDiscountInput {
    /** Discount amount. */
    amount?: string;
    /** IDs of line items the discount applies to. */
    lineItemIds?: string[];
}
interface SelectedMemberships {
    /** Selected memberships. */
    memberships?: SelectedMembership[];
}
interface SelectedMembership {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface CarrierShippingOption {
    /** This carrier's unique ID */
    carrierId?: string | null;
    /** Shipping service options offered by this carrier for this request */
    shippingOptions?: ShippingOption;
}
interface ShippingOption {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics$1;
    /** Sipping price information. */
    cost?: ShippingPrice;
}
interface DeliveryLogistics$1 {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails$1;
}
interface PickupDetails$1 {
    /** Pickup address. */
    address?: Address$1;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod$1;
}
declare enum PickupMethod$1 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$1 {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
interface ShippingPrice {
    /** Shipping price. */
    price?: MultiCurrencyPrice;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge[];
}
interface MultiCurrencyPrice {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface OtherCharge {
    /** Type of additional cost. */
    type?: ChargeType$1;
    /** Price of added cost. */
    price?: MultiCurrencyPrice;
}
declare enum ChargeType$1 {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule;
    /** Discount type. */
    discountType?: DiscountType;
    /**
     * IDs of line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule;
}
declare enum DiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice;
    /** Coupon name. */
    name?: string;
}
interface MerchantDiscount {
    /** Discount value. */
    amount?: MultiCurrencyPrice;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName;
    /** Discount value. */
    amount?: MultiCurrencyPrice;
}
interface DiscountRuleName {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface LineItemDiscount {
    /** ID of line item the discount applies to. */
    _id?: string;
    /** Discount value. */
    totalDiscountAmount?: MultiCurrencyPrice;
}
interface AdditionalFee {
    /** Additional fee's unique code (or ID) for future processing */
    code?: string | null;
    /** Translated additional fee's name */
    name?: string;
    /** Additional fee's price */
    price?: string;
    /** Currency */
    currency?: string;
    /** Tax details */
    taxDetails?: TaxDetails;
    /** Provider's app id */
    providerAppId?: string | null;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
/** Tax Details. */
interface TaxDetails {
    /** Indication if additional fee is taxable or not */
    taxable?: boolean;
    /** Optional tax group ID to use when calculating tax for this additional fee */
    taxGroupId?: string | null;
}
declare enum DataFetchType {
    SHIPPING = "SHIPPING",
    DISCOUNT = "DISCOUNT",
    ADDITIONAL_FEES = "ADDITIONAL_FEES",
    ORDER_VALIDATION = "ORDER_VALIDATION"
}
interface ExternalReference {
    /**
     * ID of the app associated with the purchase flow.
     * For example, the Wix Pay Links app ID.
     */
    appId?: string;
    /**
     * Reference to an external resource ID. Used to link the purchase flow to a specific entity in an external system.
     * For example, a Wix Pay Link ID.
     */
    resourceId?: string | null;
}
interface CalculateTotalsResponse {
    /** Calculate line items. */
    calculatedLineItems?: CalculatedLineItem[];
    /** Price summary. */
    priceSummary?: PriceSummary;
    /** Details of applied gift card. */
    giftCard?: GiftCard;
    /** Tax summary. */
    taxSummary?: TaxSummary;
    /** Shipping information. */
    shippingInfo?: ShippingInformation;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount[];
    /** Calculation errors. */
    calculationErrors?: CalculationErrors;
    /** Weight unit. */
    weightUnit?: WeightUnit$1;
    /** Currency. */
    currency?: string;
    /**
     * This is the display currency. Converted prices are presented in this currency.
     * @readonly
     */
    conversionCurrency?: string;
    /** Whether tax is included in price. */
    taxIncludedInPrice?: boolean;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary;
    /** Information about valid and invalid memberships, and which ones are selected for usage. */
    membershipOptions?: MembershipOptions;
    /** Additional Fees */
    additionalFees?: V1AdditionalFee[];
    /**
     * The site currency.
     * @readonly
     */
    siteCurrency?: string;
    /**
     * The rate used when converting from the site currency to the checkout currency.
     * @readonly
     */
    checkoutConversionRate?: string | null;
    /**
     * The pay now total amount after the gift card is applied.
     * @readonly
     */
    payNowTotalAfterGiftCard?: MultiCurrencyPrice;
    /**
     * The total amount after gift card is applied.
     * @readonly
     */
    totalAfterGiftCard?: MultiCurrencyPrice;
}
interface CalculatedLineItem {
    /** Line item ID. */
    lineItemId?: string;
    /** Price breakdown for this line item. */
    pricesBreakdown?: LineItemPricesData;
    /**
     * Type of selected payment option for current item. Supported values:
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item will happen as part of the checkout
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item will happen after the checkout
     * + `"MEMBERSHIP"` - This item cannot be paid via monetary payment options, only via non monetary option such membership. When this option is used, price must be set to 0
     * + `"DEPOSIT_ONLINE"` -  Partial payment of the given item will happen as part of the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType;
}
interface LineItemPricesData {
    /** Total price after discounts and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price after discounts, and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Total discount for all line items. */
    totalDiscount?: MultiCurrencyPrice;
    /** Catalog price after catalog discount and automatic discounts. */
    price?: MultiCurrencyPrice;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: MultiCurrencyPrice;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: MultiCurrencyPrice;
    /** Item price **before** line item discounts and **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: MultiCurrencyPrice;
}
interface ItemTaxFullDetails {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown[];
}
interface TaxRateBreakdown {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice;
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface TaxBreakdown {
    /** The name of the jurisdiction to which this tax detail applies. For example, "New York" or "Quebec". */
    jurisdiction?: string | null;
    /** The amount of this line item price that was considered nontaxable. (Decimal value) */
    nonTaxableAmount?: MultiCurrencyPrice;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.0000 signifies 200% tax. (Decimal value) */
    rate?: string | null;
    /** The amount of tax estimated for this line item. (Decimal value) */
    taxAmount?: MultiCurrencyPrice;
    /** The taxable amount of this line item. */
    taxableAmount?: MultiCurrencyPrice;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** The type of the jurisdiction in which this tax detail applies. */
    jurisdictionType?: JurisdictionType;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface PriceSummary {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice;
    /** Total tax. */
    tax?: MultiCurrencyPrice;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice;
}
interface GiftCard {
    /**
     * Gift Card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface TaxSummary {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails;
}
interface TaxCalculationDetails extends TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
    /** Rate calculation type. */
    rateType?: RateType;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
}
declare enum RateType {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails {
    /** reason for fallback */
    fallbackReason?: FallbackReason;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError$1;
}
declare enum FallbackReason {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface AggregatedTaxBreakdown {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionTypeEnum?: JurisdictionType;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.000 signifies 200% tax. (Decimal value) */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: MultiCurrencyPrice;
}
interface ShippingInformation {
    /** Shipping region. */
    region?: ShippingRegion;
    /** Selected shipping option. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption;
    /** All shipping options. */
    carrierServiceOptions?: CarrierServiceOption[];
}
interface ShippingRegion {
    /**
     * Shipping region ID.
     * @readonly
     */
    _id?: string;
    /** Shipping region name. */
    name?: string;
}
interface SelectedCarrierServiceOption {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics$1;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface SelectedCarrierServiceOptionPrices {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice;
}
interface SelectedCarrierServiceOptionOtherCharge {
    /** Type of additional cost. */
    type?: ChargeType$1;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices;
}
interface CarrierServiceOption {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption[];
}
interface CalculationErrors extends CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$1;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
    /** Tax calculation error. */
    taxCalculationError?: Details$1;
    /** Coupon calculation error. */
    couponCalculationError?: Details$1;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details$1;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$1[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details$1;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details$1;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$1;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
}
interface Details$1 extends DetailsKindOneOf$1 {
    applicationError?: ApplicationError$1;
    validationError?: ValidationError$1;
    systemError?: SystemError$1;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$1 {
    applicationError?: ApplicationError$1;
    validationError?: ValidationError$1;
    systemError?: SystemError$1;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$1 {
    fieldViolations?: FieldViolation$1[];
}
declare enum RuleType$1 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$1 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$1;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$1 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors {
    /** Carrier errors. */
    errors?: CarrierError$1[];
}
interface CarrierError$1 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$1;
}
declare enum WeightUnit$1 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface MembershipOptions {
    /** List of payment options that can be used. */
    eligibleMemberships?: Membership[];
    /** List of payment options that are owned by the member, but cannot be used due to reason provided. */
    invalidMemberships?: InvalidMembership[];
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMembership[];
}
interface Membership {
    /** Membership ID. */
    _id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface MembershipPaymentCredits {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership {
    /** Membership details. */
    membership?: Membership;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface V1AdditionalFee {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface MultiCurrencyPriceNonNullableFields {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface TaxRateBreakdownNonNullableFields {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields;
    exemptAmount?: MultiCurrencyPriceNonNullableFields;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
}
interface TaxBreakdownNonNullableFields {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields;
    taxAmount?: MultiCurrencyPriceNonNullableFields;
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    jurisdictionType: JurisdictionType;
}
interface ItemTaxFullDetailsNonNullableFields {
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields;
    rateBreakdown: TaxRateBreakdownNonNullableFields[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields;
    taxBreakdown: TaxBreakdownNonNullableFields[];
}
interface LineItemPricesDataNonNullableFields {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    totalDiscount?: MultiCurrencyPriceNonNullableFields;
    price?: MultiCurrencyPriceNonNullableFields;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields;
    fullPrice?: MultiCurrencyPriceNonNullableFields;
}
interface TaxableAddressNonNullableFields {
    addressType: TaxableAddressType;
}
interface CalculatedLineItemNonNullableFields {
    lineItemId: string;
    pricesBreakdown?: LineItemPricesDataNonNullableFields;
    paymentOption: PaymentOptionType;
    taxableAddress?: TaxableAddressNonNullableFields;
}
interface PriceSummaryNonNullableFields {
    subtotal?: MultiCurrencyPriceNonNullableFields;
    shipping?: MultiCurrencyPriceNonNullableFields;
    tax?: MultiCurrencyPriceNonNullableFields;
    discount?: MultiCurrencyPriceNonNullableFields;
    total?: MultiCurrencyPriceNonNullableFields;
    additionalFees?: MultiCurrencyPriceNonNullableFields;
}
interface GiftCardNonNullableFields {
    _id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields;
    appId: string;
}
interface ApplicationErrorNonNullableFields$1 {
    code: string;
    description: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields {
    fallbackReason: FallbackReason;
    error?: ApplicationErrorNonNullableFields$1;
}
interface TaxCalculationDetailsNonNullableFields {
    manualRateReason: ManualCalculationReason;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields;
    rateType: RateType;
}
interface AggregatedTaxBreakdownNonNullableFields {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields;
}
interface TaxSummaryNonNullableFields {
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    totalTax?: MultiCurrencyPriceNonNullableFields;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields;
    totalExempt?: MultiCurrencyPriceNonNullableFields;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields[];
}
interface ShippingRegionNonNullableFields {
    _id: string;
    name: string;
}
interface StreetAddressNonNullableFields$1 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$1 {
    streetAddress?: StreetAddressNonNullableFields$1;
}
interface PickupDetailsNonNullableFields$1 {
    address?: AddressNonNullableFields$1;
    businessLocation: boolean;
    pickupMethod: PickupMethod$1;
}
interface DeliveryLogisticsNonNullableFields$1 {
    pickupDetails?: PickupDetailsNonNullableFields$1;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    totalDiscount?: MultiCurrencyPriceNonNullableFields;
    price?: MultiCurrencyPriceNonNullableFields;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields {
    type: ChargeType$1;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields;
}
interface SelectedCarrierServiceOptionNonNullableFields {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$1;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields[];
}
interface OtherChargeNonNullableFields {
    type: ChargeType$1;
    price?: MultiCurrencyPriceNonNullableFields;
}
interface ShippingPriceNonNullableFields {
    price?: MultiCurrencyPriceNonNullableFields;
    otherCharges: OtherChargeNonNullableFields[];
}
interface ShippingOptionNonNullableFields {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$1;
    cost?: ShippingPriceNonNullableFields;
}
interface CarrierServiceOptionNonNullableFields {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields[];
}
interface ShippingInformationNonNullableFields {
    region?: ShippingRegionNonNullableFields;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields[];
}
interface CouponNonNullableFields {
    _id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields;
    name: string;
    couponType: string;
}
interface MerchantDiscountNonNullableFields {
    amount?: MultiCurrencyPriceNonNullableFields;
}
interface DiscountRuleNameNonNullableFields {
    original: string;
}
interface DiscountRuleNonNullableFields {
    _id: string;
    name?: DiscountRuleNameNonNullableFields;
    amount?: MultiCurrencyPriceNonNullableFields;
}
interface LineItemDiscountNonNullableFields {
    _id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields;
}
interface AppliedDiscountNonNullableFields {
    coupon?: CouponNonNullableFields;
    merchantDiscount?: MerchantDiscountNonNullableFields;
    discountRule?: DiscountRuleNonNullableFields;
    discountType: DiscountType;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields[];
}
interface FieldViolationNonNullableFields$1 {
    field: string;
    description: string;
    violatedRule: RuleType$1;
}
interface ValidationErrorNonNullableFields$1 {
    fieldViolations: FieldViolationNonNullableFields$1[];
}
interface DetailsNonNullableFields$1 {
    applicationError?: ApplicationErrorNonNullableFields$1;
    validationError?: ValidationErrorNonNullableFields$1;
}
interface CarrierErrorNonNullableFields {
    carrierId: string;
    error?: DetailsNonNullableFields$1;
}
interface CarrierErrorsNonNullableFields {
    errors: CarrierErrorNonNullableFields[];
}
interface CalculationErrorsNonNullableFields {
    generalShippingCalculationError?: DetailsNonNullableFields$1;
    carrierErrors?: CarrierErrorsNonNullableFields;
    taxCalculationError?: DetailsNonNullableFields$1;
    couponCalculationError?: DetailsNonNullableFields$1;
    giftCardCalculationError?: DetailsNonNullableFields$1;
    orderValidationErrors: ApplicationErrorNonNullableFields$1[];
    membershipError?: DetailsNonNullableFields$1;
    discountsCalculationError?: DetailsNonNullableFields$1;
}
interface MembershipNameNonNullableFields {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields {
    _id: string;
    appId: string;
    name?: MembershipNameNonNullableFields;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields;
}
interface InvalidMembershipNonNullableFields {
    membership?: MembershipNonNullableFields;
    reason: string;
}
interface SelectedMembershipNonNullableFields {
    _id: string;
    appId: string;
    lineItemIds: string[];
}
interface MembershipOptionsNonNullableFields {
    eligibleMemberships: MembershipNonNullableFields[];
    invalidMemberships: InvalidMembershipNonNullableFields[];
    selectedMemberships: SelectedMembershipNonNullableFields[];
}
interface V1AdditionalFeeNonNullableFields {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields;
    lineItemIds: string[];
}
interface CalculateTotalsResponseNonNullableFields {
    calculatedLineItems: CalculatedLineItemNonNullableFields[];
    priceSummary?: PriceSummaryNonNullableFields;
    giftCard?: GiftCardNonNullableFields;
    taxSummary?: TaxSummaryNonNullableFields;
    shippingInfo?: ShippingInformationNonNullableFields;
    appliedDiscounts: AppliedDiscountNonNullableFields[];
    calculationErrors?: CalculationErrorsNonNullableFields;
    weightUnit: WeightUnit$1;
    currency: string;
    conversionCurrency: string;
    taxIncludedInPrice: boolean;
    payNow?: PriceSummaryNonNullableFields;
    payLater?: PriceSummaryNonNullableFields;
    membershipOptions?: MembershipOptionsNonNullableFields;
    additionalFees: V1AdditionalFeeNonNullableFields[];
    siteCurrency: string;
    payNowTotalAfterGiftCard?: MultiCurrencyPriceNonNullableFields;
    totalAfterGiftCard?: MultiCurrencyPriceNonNullableFields;
}
interface CalculateTotalsOptions extends CalculateTotalsRequestCouponOneOf, CalculateTotalsRequestGiftCardOneOf {
    /**
     * Calculation ID. An identifier of the entity that you are calculating totals for, for example, cart ID or checkout ID.
     * This value will be used in order to optimise calculations by caching.
     * If not passed, calculation might be slower in some cases.
     */
    calculationId?: string | null;
    /** Line items for calculation. */
    lineItems?: LineItem[];
    /** Shipping address for tax and shipping calculation (if applicable). */
    shippingAddress?: Address$1;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$1;
    /** Details about selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /** Coupon ID. */
    couponId?: string | null;
    /** Coupon code. */
    couponCode?: string | null;
    /** Gift card ID. */
    giftCardId?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
    /**
     * Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart/checkout.
     * @deprecated
     */
    merchantDiscounts?: MerchantDiscountInput[];
    /** Buyer email. Used to enforce coupon [single-use per customer](https://support.wix.com/en/article/wix-stores-limiting-coupon-usage). If not passed, single coupon usage per customer will not be enforced. */
    buyerEmail?: string | null;
    /**
     * Member id to use for this calculation
     * When not provided, given that the caller is a member, its member id will be used
     * Providing this require elevated permissions - ECOM.ADMIN_CALCULATE_TOTALS
     */
    memberId?: string | null;
    /**
     * The selected memberships and which line items they apply to
     * When not provided, default selection will be returned
     * You can also set it to empty selection
     */
    selectedMemberships?: SelectedMemberships;
    /** Buyer phone number. Used to get shipping rates. */
    buyerPhone?: string | null;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}

declare function calculateTotals$1(httpClient: HttpClient): CalculateTotalsSignature;
interface CalculateTotalsSignature {
    /**
     * Returns a totals calculation for specified line items.
     */
    (options?: CalculateTotalsOptions | undefined): Promise<CalculateTotalsResponse & CalculateTotalsResponseNonNullableFields>;
}

declare const calculateTotals: MaybeContext<BuildRESTFunction<typeof calculateTotals$1> & typeof calculateTotals$1>;

type index_d$5_AdditionalFee = AdditionalFee;
type index_d$5_AggregatedTaxBreakdown = AggregatedTaxBreakdown;
type index_d$5_AppliedDiscount = AppliedDiscount;
type index_d$5_AppliedDiscountDiscountSourceOneOf = AppliedDiscountDiscountSourceOneOf;
type index_d$5_AutoTaxFallbackCalculationDetails = AutoTaxFallbackCalculationDetails;
type index_d$5_CalculateTotalsOptions = CalculateTotalsOptions;
type index_d$5_CalculateTotalsRequest = CalculateTotalsRequest;
type index_d$5_CalculateTotalsRequestCouponOneOf = CalculateTotalsRequestCouponOneOf;
type index_d$5_CalculateTotalsRequestGiftCardOneOf = CalculateTotalsRequestGiftCardOneOf;
type index_d$5_CalculateTotalsResponse = CalculateTotalsResponse;
type index_d$5_CalculateTotalsResponseNonNullableFields = CalculateTotalsResponseNonNullableFields;
type index_d$5_CalculatedLineItem = CalculatedLineItem;
type index_d$5_CalculationErrors = CalculationErrors;
type index_d$5_CalculationErrorsShippingCalculationErrorOneOf = CalculationErrorsShippingCalculationErrorOneOf;
type index_d$5_CarrierErrors = CarrierErrors;
type index_d$5_CarrierServiceOption = CarrierServiceOption;
type index_d$5_CarrierShippingOption = CarrierShippingOption;
type index_d$5_Coupon = Coupon;
type index_d$5_DataFetchType = DataFetchType;
declare const index_d$5_DataFetchType: typeof DataFetchType;
type index_d$5_DiscountRule = DiscountRule;
type index_d$5_DiscountRuleName = DiscountRuleName;
type index_d$5_DiscountType = DiscountType;
declare const index_d$5_DiscountType: typeof DiscountType;
type index_d$5_ExternalReference = ExternalReference;
type index_d$5_FallbackReason = FallbackReason;
declare const index_d$5_FallbackReason: typeof FallbackReason;
type index_d$5_GiftCard = GiftCard;
type index_d$5_Group = Group;
type index_d$5_InvalidMembership = InvalidMembership;
type index_d$5_ItemTaxFullDetails = ItemTaxFullDetails;
type index_d$5_ItemType = ItemType;
type index_d$5_ItemTypeItemType = ItemTypeItemType;
declare const index_d$5_ItemTypeItemType: typeof ItemTypeItemType;
type index_d$5_ItemTypeItemTypeDataOneOf = ItemTypeItemTypeDataOneOf;
type index_d$5_JurisdictionType = JurisdictionType;
declare const index_d$5_JurisdictionType: typeof JurisdictionType;
type index_d$5_LineItem = LineItem;
type index_d$5_LineItemDiscount = LineItemDiscount;
type index_d$5_LineItemPricesData = LineItemPricesData;
type index_d$5_ManualCalculationReason = ManualCalculationReason;
declare const index_d$5_ManualCalculationReason: typeof ManualCalculationReason;
type index_d$5_Membership = Membership;
type index_d$5_MembershipName = MembershipName;
type index_d$5_MembershipOptions = MembershipOptions;
type index_d$5_MembershipPaymentCredits = MembershipPaymentCredits;
type index_d$5_MerchantDiscount = MerchantDiscount;
type index_d$5_MerchantDiscountInput = MerchantDiscountInput;
type index_d$5_MultiCurrencyPrice = MultiCurrencyPrice;
type index_d$5_OtherCharge = OtherCharge;
type index_d$5_PaymentOptionType = PaymentOptionType;
declare const index_d$5_PaymentOptionType: typeof PaymentOptionType;
type index_d$5_PriceSummary = PriceSummary;
type index_d$5_RateType = RateType;
declare const index_d$5_RateType: typeof RateType;
type index_d$5_Scope = Scope;
type index_d$5_SelectedCarrierServiceOption = SelectedCarrierServiceOption;
type index_d$5_SelectedCarrierServiceOptionOtherCharge = SelectedCarrierServiceOptionOtherCharge;
type index_d$5_SelectedCarrierServiceOptionPrices = SelectedCarrierServiceOptionPrices;
type index_d$5_SelectedMembership = SelectedMembership;
type index_d$5_SelectedMemberships = SelectedMemberships;
type index_d$5_SelectedShippingOption = SelectedShippingOption;
type index_d$5_ServiceProperties = ServiceProperties;
type index_d$5_ShippingInformation = ShippingInformation;
type index_d$5_ShippingOption = ShippingOption;
type index_d$5_ShippingPrice = ShippingPrice;
type index_d$5_ShippingRegion = ShippingRegion;
type index_d$5_SubscriptionFrequency = SubscriptionFrequency;
declare const index_d$5_SubscriptionFrequency: typeof SubscriptionFrequency;
type index_d$5_SubscriptionSettings = SubscriptionSettings;
type index_d$5_TaxBreakdown = TaxBreakdown;
type index_d$5_TaxCalculationDetails = TaxCalculationDetails;
type index_d$5_TaxCalculationDetailsCalculationDetailsOneOf = TaxCalculationDetailsCalculationDetailsOneOf;
type index_d$5_TaxDetails = TaxDetails;
type index_d$5_TaxRateBreakdown = TaxRateBreakdown;
type index_d$5_TaxSummary = TaxSummary;
type index_d$5_TaxableAddress = TaxableAddress;
type index_d$5_TaxableAddressTaxableAddressDataOneOf = TaxableAddressTaxableAddressDataOneOf;
type index_d$5_TaxableAddressType = TaxableAddressType;
declare const index_d$5_TaxableAddressType: typeof TaxableAddressType;
type index_d$5_TotalsCalculationEntity = TotalsCalculationEntity;
type index_d$5_V1AdditionalFee = V1AdditionalFee;
declare const index_d$5_calculateTotals: typeof calculateTotals;
declare namespace index_d$5 {
  export { type index_d$5_AdditionalFee as AdditionalFee, type Address$1 as Address, type AddressLocation$1 as AddressLocation, type index_d$5_AggregatedTaxBreakdown as AggregatedTaxBreakdown, type ApplicationError$1 as ApplicationError, type index_d$5_AppliedDiscount as AppliedDiscount, type index_d$5_AppliedDiscountDiscountSourceOneOf as AppliedDiscountDiscountSourceOneOf, type index_d$5_AutoTaxFallbackCalculationDetails as AutoTaxFallbackCalculationDetails, type index_d$5_CalculateTotalsOptions as CalculateTotalsOptions, type index_d$5_CalculateTotalsRequest as CalculateTotalsRequest, type index_d$5_CalculateTotalsRequestCouponOneOf as CalculateTotalsRequestCouponOneOf, type index_d$5_CalculateTotalsRequestGiftCardOneOf as CalculateTotalsRequestGiftCardOneOf, type index_d$5_CalculateTotalsResponse as CalculateTotalsResponse, type index_d$5_CalculateTotalsResponseNonNullableFields as CalculateTotalsResponseNonNullableFields, type index_d$5_CalculatedLineItem as CalculatedLineItem, type index_d$5_CalculationErrors as CalculationErrors, type index_d$5_CalculationErrorsShippingCalculationErrorOneOf as CalculationErrorsShippingCalculationErrorOneOf, type CarrierError$1 as CarrierError, type index_d$5_CarrierErrors as CarrierErrors, type index_d$5_CarrierServiceOption as CarrierServiceOption, type index_d$5_CarrierShippingOption as CarrierShippingOption, type CatalogReference$2 as CatalogReference, ChargeType$1 as ChargeType, type index_d$5_Coupon as Coupon, index_d$5_DataFetchType as DataFetchType, type DeliveryLogistics$1 as DeliveryLogistics, type DeliveryTimeSlot$1 as DeliveryTimeSlot, type Details$1 as Details, type DetailsKindOneOf$1 as DetailsKindOneOf, type index_d$5_DiscountRule as DiscountRule, type index_d$5_DiscountRuleName as DiscountRuleName, index_d$5_DiscountType as DiscountType, type index_d$5_ExternalReference as ExternalReference, index_d$5_FallbackReason as FallbackReason, type FieldViolation$1 as FieldViolation, type index_d$5_GiftCard as GiftCard, type index_d$5_Group as Group, type index_d$5_InvalidMembership as InvalidMembership, type index_d$5_ItemTaxFullDetails as ItemTaxFullDetails, type index_d$5_ItemType as ItemType, index_d$5_ItemTypeItemType as ItemTypeItemType, type index_d$5_ItemTypeItemTypeDataOneOf as ItemTypeItemTypeDataOneOf, index_d$5_JurisdictionType as JurisdictionType, type index_d$5_LineItem as LineItem, type index_d$5_LineItemDiscount as LineItemDiscount, type index_d$5_LineItemPricesData as LineItemPricesData, index_d$5_ManualCalculationReason as ManualCalculationReason, type index_d$5_Membership as Membership, type index_d$5_MembershipName as MembershipName, type index_d$5_MembershipOptions as MembershipOptions, type index_d$5_MembershipPaymentCredits as MembershipPaymentCredits, type index_d$5_MerchantDiscount as MerchantDiscount, type index_d$5_MerchantDiscountInput as MerchantDiscountInput, type index_d$5_MultiCurrencyPrice as MultiCurrencyPrice, type index_d$5_OtherCharge as OtherCharge, index_d$5_PaymentOptionType as PaymentOptionType, type PhysicalProperties$1 as PhysicalProperties, type PickupDetails$1 as PickupDetails, PickupMethod$1 as PickupMethod, type index_d$5_PriceSummary as PriceSummary, index_d$5_RateType as RateType, RuleType$1 as RuleType, type index_d$5_Scope as Scope, type index_d$5_SelectedCarrierServiceOption as SelectedCarrierServiceOption, type index_d$5_SelectedCarrierServiceOptionOtherCharge as SelectedCarrierServiceOptionOtherCharge, type index_d$5_SelectedCarrierServiceOptionPrices as SelectedCarrierServiceOptionPrices, type index_d$5_SelectedMembership as SelectedMembership, type index_d$5_SelectedMemberships as SelectedMemberships, type index_d$5_SelectedShippingOption as SelectedShippingOption, type index_d$5_ServiceProperties as ServiceProperties, type index_d$5_ShippingInformation as ShippingInformation, type index_d$5_ShippingOption as ShippingOption, type index_d$5_ShippingPrice as ShippingPrice, type index_d$5_ShippingRegion as ShippingRegion, type StreetAddress$1 as StreetAddress, index_d$5_SubscriptionFrequency as SubscriptionFrequency, type index_d$5_SubscriptionSettings as SubscriptionSettings, type SystemError$1 as SystemError, type index_d$5_TaxBreakdown as TaxBreakdown, type index_d$5_TaxCalculationDetails as TaxCalculationDetails, type index_d$5_TaxCalculationDetailsCalculationDetailsOneOf as TaxCalculationDetailsCalculationDetailsOneOf, type index_d$5_TaxDetails as TaxDetails, type index_d$5_TaxRateBreakdown as TaxRateBreakdown, type index_d$5_TaxSummary as TaxSummary, type index_d$5_TaxableAddress as TaxableAddress, type index_d$5_TaxableAddressTaxableAddressDataOneOf as TaxableAddressTaxableAddressDataOneOf, index_d$5_TaxableAddressType as TaxableAddressType, type index_d$5_TotalsCalculationEntity as TotalsCalculationEntity, type index_d$5_V1AdditionalFee as V1AdditionalFee, type ValidationError$1 as ValidationError, WeightUnit$1 as WeightUnit, index_d$5_calculateTotals as calculateTotals };
}

interface CurrencyRate {
}
interface ListCurrenciesRequest {
}
interface ListCurrenciesResponse {
    /** Supported currencies. */
    currencies?: Currency[];
}
interface Currency {
    /** A 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code. */
    code?: string;
    /** Currency symbol. */
    symbol?: string;
}
interface ConvertCurrencyRequest {
    /** Amounts to convert. */
    amounts?: DecimalValue[];
    /** Original currency to convert from as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `from` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function. */
    from: string;
    /** Target currency to convert to as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `to` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function. */
    to: string;
}
interface DecimalValue {
    /** The value without decimal points. For example, the number `10.95` becomes `1095`. */
    value?: string;
    /** Decimal places to apply. For example, the number of decimal places for `10.95`  is `2`. */
    decimalPlaces?: number;
}
interface ConvertCurrencyResponse {
    /** Converted amounts. */
    amounts?: DecimalValue[];
    /** Date and time the conversion rate was last updated. */
    rateTimestamp?: Date | null;
}
interface ConversionRateRequest {
    /** Original currency to get the rate for as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `from` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function. */
    from: string;
    /** Target currency to get the rate for as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `to` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function. */
    to: string;
}
interface ConversionRateResponse {
    /** Conversion rate between 2 currencies. */
    rate?: DecimalValue;
    /** Date and time the conversion rate was last updated. */
    rateTimestamp?: Date | null;
}
interface CurrencyNonNullableFields {
    code: string;
    symbol: string;
}
interface ListCurrenciesResponseNonNullableFields {
    currencies: CurrencyNonNullableFields[];
}
interface DecimalValueNonNullableFields {
    value: string;
    decimalPlaces: number;
}
interface ConvertCurrencyResponseNonNullableFields {
    amounts: DecimalValueNonNullableFields[];
}
interface ConversionRateResponseNonNullableFields {
    rate?: DecimalValueNonNullableFields;
}
interface ConvertCurrencyIdentifiers {
    /** Original currency to convert from as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `from` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function. */
    from: string;
    /** Target currency to convert to as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code.  The `to` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function. */
    to: string;
}
interface GetConversionRateIdentifiers {
    /** Original currency to get the rate for as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `from` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function. */
    from: string;
    /** Target currency to get the rate for as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `to` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function. */
    to: string;
}

declare function listCurrencies$1(httpClient: HttpClient): ListCurrenciesSignature;
interface ListCurrenciesSignature {
    /**
     * Returns an array of currencies. The array lists all currencies for which Wix supports conversion and their symbols.
     */
    (): Promise<ListCurrenciesResponse & ListCurrenciesResponseNonNullableFields>;
}
declare function convertCurrency$1(httpClient: HttpClient): ConvertCurrencySignature;
interface ConvertCurrencySignature {
    /**
     * Returns an array of amounts converted from the original (`from`) currency to the target (`to`) currency and the timestamp for the conversion rate used.
     *
     *
     * Use the `convertCurrency()` function to convert an array of one or more amounts between two currencies. The `convertCurrency()` function returns an array of converted amounts and the timestamp for the conversion rate used.
     *
     * > **Note**:  The currency codes used must exist in the array of supported currencies returned by the [`listCurrencies()`](#listcurrencies) function.
     *
     * @param - Amounts to convert.
     * @param - Identifying details needed to determine which currency rate to convert. The combination of the `from` and `to` properties together comprise the unique ID.
     * @param - Options to use when converting currency.
     */
    (identifiers: ConvertCurrencyIdentifiers, amounts: DecimalValue[]): Promise<ConvertCurrencyResponse & ConvertCurrencyResponseNonNullableFields>;
}
declare function getConversionRate$1(httpClient: HttpClient): GetConversionRateSignature;
interface GetConversionRateSignature {
    /**
     * Returns the conversion rate between 2 currencies.
     * @param - Identifying details needed to get the conversion rate. The combination of the `from` and `to` properties together comprise the unique ID.
     */
    (identifiers: GetConversionRateIdentifiers): Promise<ConversionRateResponse & ConversionRateResponseNonNullableFields>;
}

declare const listCurrencies: MaybeContext<BuildRESTFunction<typeof listCurrencies$1> & typeof listCurrencies$1>;
declare const convertCurrency: MaybeContext<BuildRESTFunction<typeof convertCurrency$1> & typeof convertCurrency$1>;
declare const getConversionRate: MaybeContext<BuildRESTFunction<typeof getConversionRate$1> & typeof getConversionRate$1>;

type index_d$4_ConversionRateRequest = ConversionRateRequest;
type index_d$4_ConversionRateResponse = ConversionRateResponse;
type index_d$4_ConversionRateResponseNonNullableFields = ConversionRateResponseNonNullableFields;
type index_d$4_ConvertCurrencyIdentifiers = ConvertCurrencyIdentifiers;
type index_d$4_ConvertCurrencyRequest = ConvertCurrencyRequest;
type index_d$4_ConvertCurrencyResponse = ConvertCurrencyResponse;
type index_d$4_ConvertCurrencyResponseNonNullableFields = ConvertCurrencyResponseNonNullableFields;
type index_d$4_Currency = Currency;
type index_d$4_CurrencyRate = CurrencyRate;
type index_d$4_DecimalValue = DecimalValue;
type index_d$4_GetConversionRateIdentifiers = GetConversionRateIdentifiers;
type index_d$4_ListCurrenciesRequest = ListCurrenciesRequest;
type index_d$4_ListCurrenciesResponse = ListCurrenciesResponse;
type index_d$4_ListCurrenciesResponseNonNullableFields = ListCurrenciesResponseNonNullableFields;
declare const index_d$4_convertCurrency: typeof convertCurrency;
declare const index_d$4_getConversionRate: typeof getConversionRate;
declare const index_d$4_listCurrencies: typeof listCurrencies;
declare namespace index_d$4 {
  export { type index_d$4_ConversionRateRequest as ConversionRateRequest, type index_d$4_ConversionRateResponse as ConversionRateResponse, type index_d$4_ConversionRateResponseNonNullableFields as ConversionRateResponseNonNullableFields, type index_d$4_ConvertCurrencyIdentifiers as ConvertCurrencyIdentifiers, type index_d$4_ConvertCurrencyRequest as ConvertCurrencyRequest, type index_d$4_ConvertCurrencyResponse as ConvertCurrencyResponse, type index_d$4_ConvertCurrencyResponseNonNullableFields as ConvertCurrencyResponseNonNullableFields, type index_d$4_Currency as Currency, type index_d$4_CurrencyRate as CurrencyRate, type index_d$4_DecimalValue as DecimalValue, type index_d$4_GetConversionRateIdentifiers as GetConversionRateIdentifiers, type index_d$4_ListCurrenciesRequest as ListCurrenciesRequest, type index_d$4_ListCurrenciesResponse as ListCurrenciesResponse, type index_d$4_ListCurrenciesResponseNonNullableFields as ListCurrenciesResponseNonNullableFields, index_d$4_convertCurrency as convertCurrency, index_d$4_getConversionRate as getConversionRate, index_d$4_listCurrencies as listCurrencies };
}

interface DeliveryRatesGateway {
    /** @readonly */
    _id?: string | null;
}
interface GetDeliveryOptionsRequest {
    /** list of items to delivery that each of them points to delivery profile and delivery rule. */
    items?: DeliverableItem[];
    /** Destination the items should deliver to */
    destination?: Address;
    /** Origin the items should deliver from */
    origin?: Address;
    /** Currency - Defaults to site's currency */
    currency?: string | null;
    /** Contact details */
    buyerDetails?: FullAddressContactDetails;
    /** Measure unit - defaults to site's weight unit */
    weightUnit?: WeightUnit;
    /** list of delivery preferences which are delivery options codes combined with provider app id */
    userIntent?: UserIntent[];
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    /** Whether tax is included in the items' prices. */
    taxIncludedInPrices?: boolean | null;
}
interface DeliverableItem {
    /** The ID of the line item. */
    _id?: string;
    /** Item name. */
    name?: string;
    /** The number of items ordered. */
    quantity?: number;
    /** Reference to the item's origin catalog. */
    catalogReference?: CatalogReference$1;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /** Price of a single item after discounts. */
    price?: string;
    /** Total line item price before discounts. */
    totalPriceBeforeDiscount?: string | null;
    /** Price of a single item before discounts. */
    priceBeforeDiscount?: string | null;
    /** Total line item price after discounts. This is equal to `price` multiplied by `quantity`. */
    totalPrice?: string | null;
    /** For delivery rates by delivery profile id */
    deliveryProfileId?: string | null;
    /** whether tax is included in line item price */
    taxIncludedInPrice?: boolean | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$1 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface PhysicalProperties {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
/** Physical address */
interface Address extends AddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress;
    /** Main address line, usually street and number as free text. */
    addressLine1?: string | null;
    /** Country code. */
    country?: string | null;
    /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    /** Free text providing more detailed address info. Usually contains Apt, Suite, and Floor. */
    addressLine2?: string | null;
}
/** @oneof */
interface AddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress;
    /** Main address line, usually street and number as free text. */
    addressLine?: string | null;
}
interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
interface Subdivision {
    /** Short subdivision code. */
    code?: string;
    /** Subdivision full name. */
    name?: string;
}
declare enum SubdivisionType {
    UNKNOWN_SUBDIVISION_TYPE = "UNKNOWN_SUBDIVISION_TYPE",
    /** State */
    ADMINISTRATIVE_AREA_LEVEL_1 = "ADMINISTRATIVE_AREA_LEVEL_1",
    /** County */
    ADMINISTRATIVE_AREA_LEVEL_2 = "ADMINISTRATIVE_AREA_LEVEL_2",
    /** City/town */
    ADMINISTRATIVE_AREA_LEVEL_3 = "ADMINISTRATIVE_AREA_LEVEL_3",
    /** Neighborhood/quarter */
    ADMINISTRATIVE_AREA_LEVEL_4 = "ADMINISTRATIVE_AREA_LEVEL_4",
    /** Street/block */
    ADMINISTRATIVE_AREA_LEVEL_5 = "ADMINISTRATIVE_AREA_LEVEL_5",
    /** ADMINISTRATIVE_AREA_LEVEL_0. Indicates the national political entity, and is typically the highest order type returned by the Geocoder. */
    COUNTRY = "COUNTRY"
}
/** Full contact details for an address */
interface FullAddressContactDetails {
    /** Contact's first name. */
    firstName?: string | null;
    /** Contact's last name. */
    lastName?: string | null;
    /** Contact's phone number. */
    phone?: string | null;
    /** Contact's company name. */
    company?: string | null;
    /** Email associated with the address. */
    email?: string | null;
    /** Tax info. Currently usable only in Brazil. */
    vatId?: VatId;
}
interface VatId {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType;
}
/** tax info types */
declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
declare enum WeightUnit {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface UserIntent {
    /** The provider app id */
    appId?: string | null;
    /** Delivery option code to be used by the TPA as a hint to what delivery option to use */
    code?: string;
}
/**
 * Each delivery option has a list of items that can be delivered by it - the chosen one
 * on Errors throw a business error from TC to catch and trigger destination completion
 */
interface GetDeliveryOptionsResponse {
    /** Delivery Options with their associated items */
    deliveryOptions?: DeliveryOption[];
    /** If a carrier could not calculate shipping rates, the error will be detailed here */
    errors?: CarrierError[];
}
interface DeliveryOption {
    /** If the delivery option is a partial and doesn't apply to all items, this field will be populated. */
    partial?: PartialDeliveryOption;
    /** The delivery option details */
    details?: DeliveryDetails;
    /** The delivery option's carrier details, could be multiple if the delivery option is a combination of multiple carriers */
    carrierDetails?: CarrierDetails[];
    /** The delivery option's region details, could be multiple if the delivery option is a combination of multiple profiles */
    regionDetails?: RegionDetails[];
}
interface PartialDeliveryOption {
    /** Items that the delivery option is for. If empty, the delivery option is for all items. */
    itemIds?: string[];
}
interface DeliveryDetails {
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
    /** Delivery rate title. For example, `"USPS Standard Overnight Delivery"`, `"Standard"`, or `"First-Class Package International"`. */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics;
    /** Delivery cost. */
    cost?: DeliveryCost;
}
interface DeliveryLogistics {
    /** When the item is expected to be delivered in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for delivery. For example, for pickup: `"Ensure to come during business hours, and please don't park in the disabled spot"`. */
    instructions?: string | null;
    /** Pickup details. Should be returned only if order is for pickup. */
    pickupDetails?: PickupDetails;
    /** Date and Time of the delivery option */
    deliveryTimeSlot?: DeliveryTimeSlot;
}
interface PickupDetails {
    /** Pickup address. */
    address?: Address;
    /**
     * Pickup method.
     *
     * Supported values:
     * + `"STORE_PICKUP"`: When pickup is from the merchant's brick and mortar store.
     * + `"PICKUP_POINT"`: When item is shipped to a specified pickup point.
     */
    pickupMethod?: PickupMethod;
}
declare enum PickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
interface DeliveryCost {
    /** The shipping rate's price. Must align with the [currency's decimal separator](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). */
    price?: string;
    /** Currency of the shipping rate price as a 3-letter [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217). Must align with the `currency` passed to the function under the `metadata` field. */
    currency?: string;
    /** Additional costs. For example, a handling fee for packaging fragile items. */
    additionalCharges?: AdditionalCharge[];
}
interface AdditionalCharge {
    /** Additional charge type. */
    type?: ChargeType;
    /** Description of the additional charge. For example, `"Handling fee of $5 applied for gift wrapping"`. */
    description?: string | null;
    /** Cost of additional charge. For example, `12.5`. */
    price?: string;
}
declare enum ChargeType {
    HANDLING_FEE = "HANDLING_FEE"
}
interface CarrierDetails {
    /** The carrier app id */
    appId?: string | null;
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
}
interface RegionDetails {
    /** The delivery region id. */
    _id?: string | null;
    /** The delivery region name. */
    name?: string | null;
}
interface CarrierError {
    /** The carrier app id */
    appId?: string | null;
    /** The error details */
    errorDetails?: Details;
}
interface Details extends DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError {
    fieldViolations?: FieldViolation[];
}
declare enum RuleType {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation {
    field?: string;
    description?: string;
    violatedRule?: RuleType;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError {
    /** Error code. */
    errorCode?: string | null;
}
interface ProviderErrors {
    /** The list of errors the providers returned. */
    errors?: CarrierError[];
}
interface GetDeliverySolutionsRequest {
    /** list of items to delivery that each of them points to delivery profile and delivery rule. */
    lineItems: DeliverableItem[];
    /** Destination the items should deliver to */
    destination: Address;
    /** Origin the items should deliver from */
    origin?: Address;
    /** Currency - Defaults to site's currency */
    currency: string | null;
    /** Contact details */
    contactDetails?: FullAddressContactDetails;
    /** Measure unit - defaults to site's weight unit */
    weightUnit?: WeightUnit;
    /** list of user preferences which are delivery options codes combined with delivery carrier app id */
    userPreferences?: UserPreference[];
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}
interface UserPreference {
    /** The delivery carrier app id */
    appId?: string | null;
    /** The delivery option code */
    code?: string;
}
/**
 * Each delivery option has a list of items that can be delivered by it - the chosen one
 * on Errors throw a business error from TC to catch and trigger destination completion
 */
interface GetDeliverySolutionsResponse {
    /** Delivery Options with their associated items */
    deliverySolutions?: DeliverySolution[];
    /** If a delivery carrier could not calculate rates, the error will be detailed here */
    errors?: DeliveryCarrierError[];
}
interface DeliverySolution {
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
    /** Delivery rate title. For example, `"USPS Standard Overnight Delivery"`, `"Standard"`, or `"First-Class Package International"`. */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics;
    /** Delivery cost. */
    cost?: DeliveryCost;
    /** Delivery solution breakdown by delivery carrier and delivery region */
    breakdown?: Breakdown[];
    /** If the delivery solution is a partial and doesn't apply to all items. */
    partial?: boolean | null;
}
interface Breakdown {
    /** The delivery option's carrier details, could be multiple if the delivery option is a combination of multiple carriers */
    deliveryCarrier?: Carrier;
    /** The delivery region that are relevant for this delivery solution. */
    deliveryRegion?: Region;
    /** Populated if the delivery solution is a partially supplied by this carrier. */
    applicableLineItems?: ApplicableLineItems;
}
interface Carrier {
    /** The carrier app id */
    appId?: string | null;
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
}
interface Region {
    /** The delivery region id. */
    _id?: string | null;
    /** The delivery region name. */
    name?: string | null;
}
interface ApplicableLineItems {
    /** Line items that the delivery solution is for. */
    lineItemIds?: string[];
}
interface DeliveryCarrierError {
    /** The carrier app id */
    appId?: string | null;
    /** The error details */
    errorDetails?: Details;
}
interface DomainEvent$2 extends DomainEventBodyOneOf$2 {
    createdEvent?: EntityCreatedEvent$2;
    updatedEvent?: EntityUpdatedEvent$2;
    deletedEvent?: EntityDeletedEvent$2;
    actionEvent?: ActionEvent$2;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$2 {
    createdEvent?: EntityCreatedEvent$2;
    updatedEvent?: EntityUpdatedEvent$2;
    deletedEvent?: EntityDeletedEvent$2;
    actionEvent?: ActionEvent$2;
}
interface EntityCreatedEvent$2 {
    entity?: string;
}
interface RestoreInfo$2 {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$2 {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$2 {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$2 {
    body?: string;
}
interface Empty {
}
interface StreetAddressNonNullableFields {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields;
}
interface PickupDetailsNonNullableFields {
    address?: AddressNonNullableFields;
    pickupMethod: PickupMethod;
}
interface DeliveryLogisticsNonNullableFields {
    pickupDetails?: PickupDetailsNonNullableFields;
}
interface AdditionalChargeNonNullableFields {
    type: ChargeType;
    price: string;
}
interface DeliveryCostNonNullableFields {
    price: string;
    currency: string;
    additionalCharges: AdditionalChargeNonNullableFields[];
}
interface CarrierNonNullableFields {
    code: string;
}
interface ApplicableLineItemsNonNullableFields {
    lineItemIds: string[];
}
interface BreakdownNonNullableFields {
    deliveryCarrier?: CarrierNonNullableFields;
    applicableLineItems?: ApplicableLineItemsNonNullableFields;
}
interface DeliverySolutionNonNullableFields {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields;
    cost?: DeliveryCostNonNullableFields;
    breakdown: BreakdownNonNullableFields[];
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface FieldViolationNonNullableFields {
    field: string;
    description: string;
    violatedRule: RuleType;
}
interface ValidationErrorNonNullableFields {
    fieldViolations: FieldViolationNonNullableFields[];
}
interface DetailsNonNullableFields {
    applicationError?: ApplicationErrorNonNullableFields;
    validationError?: ValidationErrorNonNullableFields;
}
interface DeliveryCarrierErrorNonNullableFields {
    errorDetails?: DetailsNonNullableFields;
}
interface GetDeliverySolutionsResponseNonNullableFields {
    deliverySolutions: DeliverySolutionNonNullableFields[];
    errors: DeliveryCarrierErrorNonNullableFields[];
}
interface GetDeliverySolutionsOptions {
    /** Destination the items should deliver to */
    destination: Address;
    /** Origin the items should deliver from */
    origin?: Address;
    /** Currency - Defaults to site's currency */
    currency: string | null;
    /** Contact details */
    contactDetails?: FullAddressContactDetails;
    /** Measure unit - defaults to site's weight unit */
    weightUnit?: WeightUnit;
    /** list of user preferences which are delivery options codes combined with delivery carrier app id */
    userPreferences?: UserPreference[];
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}

declare function getDeliverySolutions$1(httpClient: HttpClient): GetDeliverySolutionsSignature;
interface GetDeliverySolutionsSignature {
    /**
     * Get Delivery Solutions for the given line items from all relevant delivery carriers
     * @param - list of items to delivery that each of them points to delivery profile and delivery rule.
     * @returns Each delivery option has a list of items that can be delivered by it - the chosen one
     * on Errors throw a business error from TC to catch and trigger destination completion
     */
    (lineItems: DeliverableItem[], options?: GetDeliverySolutionsOptions | undefined): Promise<GetDeliverySolutionsResponse & GetDeliverySolutionsResponseNonNullableFields>;
}

declare const getDeliverySolutions: MaybeContext<BuildRESTFunction<typeof getDeliverySolutions$1> & typeof getDeliverySolutions$1>;

type index_d$3_AdditionalCharge = AdditionalCharge;
type index_d$3_Address = Address;
type index_d$3_AddressLocation = AddressLocation;
type index_d$3_AddressStreetOneOf = AddressStreetOneOf;
type index_d$3_ApplicableLineItems = ApplicableLineItems;
type index_d$3_ApplicationError = ApplicationError;
type index_d$3_Breakdown = Breakdown;
type index_d$3_Carrier = Carrier;
type index_d$3_CarrierDetails = CarrierDetails;
type index_d$3_CarrierError = CarrierError;
type index_d$3_ChargeType = ChargeType;
declare const index_d$3_ChargeType: typeof ChargeType;
type index_d$3_DeliverableItem = DeliverableItem;
type index_d$3_DeliveryCarrierError = DeliveryCarrierError;
type index_d$3_DeliveryCost = DeliveryCost;
type index_d$3_DeliveryDetails = DeliveryDetails;
type index_d$3_DeliveryLogistics = DeliveryLogistics;
type index_d$3_DeliveryOption = DeliveryOption;
type index_d$3_DeliveryRatesGateway = DeliveryRatesGateway;
type index_d$3_DeliverySolution = DeliverySolution;
type index_d$3_DeliveryTimeSlot = DeliveryTimeSlot;
type index_d$3_Details = Details;
type index_d$3_DetailsKindOneOf = DetailsKindOneOf;
type index_d$3_Empty = Empty;
type index_d$3_FieldViolation = FieldViolation;
type index_d$3_FullAddressContactDetails = FullAddressContactDetails;
type index_d$3_GetDeliveryOptionsRequest = GetDeliveryOptionsRequest;
type index_d$3_GetDeliveryOptionsResponse = GetDeliveryOptionsResponse;
type index_d$3_GetDeliverySolutionsOptions = GetDeliverySolutionsOptions;
type index_d$3_GetDeliverySolutionsRequest = GetDeliverySolutionsRequest;
type index_d$3_GetDeliverySolutionsResponse = GetDeliverySolutionsResponse;
type index_d$3_GetDeliverySolutionsResponseNonNullableFields = GetDeliverySolutionsResponseNonNullableFields;
type index_d$3_PartialDeliveryOption = PartialDeliveryOption;
type index_d$3_PhysicalProperties = PhysicalProperties;
type index_d$3_PickupDetails = PickupDetails;
type index_d$3_PickupMethod = PickupMethod;
declare const index_d$3_PickupMethod: typeof PickupMethod;
type index_d$3_ProviderErrors = ProviderErrors;
type index_d$3_Region = Region;
type index_d$3_RegionDetails = RegionDetails;
type index_d$3_RuleType = RuleType;
declare const index_d$3_RuleType: typeof RuleType;
type index_d$3_StreetAddress = StreetAddress;
type index_d$3_Subdivision = Subdivision;
type index_d$3_SubdivisionType = SubdivisionType;
declare const index_d$3_SubdivisionType: typeof SubdivisionType;
type index_d$3_SystemError = SystemError;
type index_d$3_UserIntent = UserIntent;
type index_d$3_UserPreference = UserPreference;
type index_d$3_ValidationError = ValidationError;
type index_d$3_VatId = VatId;
type index_d$3_VatType = VatType;
declare const index_d$3_VatType: typeof VatType;
type index_d$3_WeightUnit = WeightUnit;
declare const index_d$3_WeightUnit: typeof WeightUnit;
declare const index_d$3_getDeliverySolutions: typeof getDeliverySolutions;
declare namespace index_d$3 {
  export { type ActionEvent$2 as ActionEvent, type index_d$3_AdditionalCharge as AdditionalCharge, type index_d$3_Address as Address, type index_d$3_AddressLocation as AddressLocation, type index_d$3_AddressStreetOneOf as AddressStreetOneOf, type index_d$3_ApplicableLineItems as ApplicableLineItems, type index_d$3_ApplicationError as ApplicationError, type index_d$3_Breakdown as Breakdown, type index_d$3_Carrier as Carrier, type index_d$3_CarrierDetails as CarrierDetails, type index_d$3_CarrierError as CarrierError, type CatalogReference$1 as CatalogReference, index_d$3_ChargeType as ChargeType, type index_d$3_DeliverableItem as DeliverableItem, type index_d$3_DeliveryCarrierError as DeliveryCarrierError, type index_d$3_DeliveryCost as DeliveryCost, type index_d$3_DeliveryDetails as DeliveryDetails, type index_d$3_DeliveryLogistics as DeliveryLogistics, type index_d$3_DeliveryOption as DeliveryOption, type index_d$3_DeliveryRatesGateway as DeliveryRatesGateway, type index_d$3_DeliverySolution as DeliverySolution, type index_d$3_DeliveryTimeSlot as DeliveryTimeSlot, type index_d$3_Details as Details, type index_d$3_DetailsKindOneOf as DetailsKindOneOf, type DomainEvent$2 as DomainEvent, type DomainEventBodyOneOf$2 as DomainEventBodyOneOf, type index_d$3_Empty as Empty, type EntityCreatedEvent$2 as EntityCreatedEvent, type EntityDeletedEvent$2 as EntityDeletedEvent, type EntityUpdatedEvent$2 as EntityUpdatedEvent, type index_d$3_FieldViolation as FieldViolation, type index_d$3_FullAddressContactDetails as FullAddressContactDetails, type index_d$3_GetDeliveryOptionsRequest as GetDeliveryOptionsRequest, type index_d$3_GetDeliveryOptionsResponse as GetDeliveryOptionsResponse, type index_d$3_GetDeliverySolutionsOptions as GetDeliverySolutionsOptions, type index_d$3_GetDeliverySolutionsRequest as GetDeliverySolutionsRequest, type index_d$3_GetDeliverySolutionsResponse as GetDeliverySolutionsResponse, type index_d$3_GetDeliverySolutionsResponseNonNullableFields as GetDeliverySolutionsResponseNonNullableFields, type index_d$3_PartialDeliveryOption as PartialDeliveryOption, type index_d$3_PhysicalProperties as PhysicalProperties, type index_d$3_PickupDetails as PickupDetails, index_d$3_PickupMethod as PickupMethod, type index_d$3_ProviderErrors as ProviderErrors, type index_d$3_Region as Region, type index_d$3_RegionDetails as RegionDetails, type RestoreInfo$2 as RestoreInfo, index_d$3_RuleType as RuleType, type index_d$3_StreetAddress as StreetAddress, type index_d$3_Subdivision as Subdivision, index_d$3_SubdivisionType as SubdivisionType, type index_d$3_SystemError as SystemError, type index_d$3_UserIntent as UserIntent, type index_d$3_UserPreference as UserPreference, type index_d$3_ValidationError as ValidationError, type index_d$3_VatId as VatId, index_d$3_VatType as VatType, index_d$3_WeightUnit as WeightUnit, index_d$3_getDeliverySolutions as getDeliverySolutions };
}

/**
 * Tip settings define how tips are calculated and distributed among staff. When
 * Wix Tips is installed, default settings are automatically created. You can't
 * delete these default settings but you can update them. Creating additional
 * settings allows business owners to customize tip screens for different payment
 * terminals or set specific presets for various products or services.
 */
interface TipSettings extends TipSettingsIdentifierOneOf {
    /**
     * ID of the [location](https://dev.wix.com/docs/rest/business-management/locations/location-object)
     * for which the tip settings apply.
     */
    locationId?: string | null;
    /**
     * ID of the payment terminal for which the tip settings apply. Wix Tips doesn't
     * validate the ID you provide.
     *
     * Max: 30 characters
     */
    paymentTerminalId?: string | null;
    /**
     * ID of the Wix user for whom the tip settings apply. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    userId?: string | null;
    /**
     * ID of the tip settings.
     * @readonly
     */
    _id?: string | null;
    /**
     * Tip type.
     *
     * Supported values:
     * + `UNKNOWN_TIP_TYPE`: There is no information about the tip type.
     * + `PERCENTAGE`: The tip is calculated as a percentage of the subtotal for all related line items.
     * + `AMOUNT`: The tip is a fixed amount.
     */
    tipType?: TipType$1;
    /**
     * Information about the tip choices that Wix Tips displays to customers during the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     *
     * Min: `1` preset
     * Max: `3` presets
     */
    presets?: Preset[];
    /**
     * Whether customer are allowed to tip during the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     *
     * Default: `true`
     */
    allowCustomerTip?: boolean | null;
    /**
     * Whether the business owners are given the option to add a tip during the
     * payment collection flow in their dashboard.
     *
     * Default: `true`
     */
    allowBusinessTipAtPayment?: boolean | null;
    /**
     * Whether customers can enter a custom tip amount. If set to `false`, customers
     * can only select a tip value from the available `presets` and can't enter a
     * custom amount.
     *
     * Default: `true`
     */
    allowCustomAmount?: boolean | null;
    /**
     * Whether business owners are allowed to edit tip distributions. If set to
     * `false`, owners can't edit distributions after they were created.
     *
     * Default: `true`
     */
    allowEditDistribution?: boolean | null;
    /**
     * How the tip is distributed among staff.
     *
     * Supported values:
     * `UNKNOWN_SPLIT_METHOD`: There is no information about the staff distribution method.
     * `EQUAL`: The tip is distributed equally among all staff.
     * `PROPORTIONAL`: The tip is distributed proportionally among staff.
     */
    staffDistributionMethod?: StaffDistributionMethod;
    /**
     * Revision number, which increments by 1 each time `tipSettings` object is
     * updated. To prevent conflicting changes, the current revision must be passed
     * when updating `tipSettings`. Ignored when creating a `tipSettings` object.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the tip settings were created in
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the tip settings were last updated
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Whether these are the default tip settings. Wix Tips automatically creates
     * the default settings during the app's installation. You can't delete these
     * default settings but you can update them. Wix Tips uses the default settings
     * to calculate tips, unless you specify other settings.
     * @readonly
     */
    default?: boolean | null;
    /**
     * ID of the app that has created the settings. See the list of app IDs for
     * [Wix business solutions](https://dev.wix.com/docs/rest/articles/getting-started/wix-business-solutions).
     */
    appId?: string | null;
    /**
     * Custom field data for the `tipSettings` object. Extended fields must be
     * configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
/** @oneof */
interface TipSettingsIdentifierOneOf {
    /**
     * ID of the [location](https://dev.wix.com/docs/rest/business-management/locations/location-object)
     * for which the tip settings apply.
     */
    locationId?: string | null;
    /**
     * ID of the payment terminal for which the tip settings apply. Wix Tips doesn't
     * validate the ID you provide.
     *
     * Max: 30 characters
     */
    paymentTerminalId?: string | null;
    /**
     * ID of the Wix user for whom the tip settings apply. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    userId?: string | null;
}
declare enum TipType$1 {
    /** There is no information about the tip type. */
    UNKNOWN_TIP_TYPE = "UNKNOWN_TIP_TYPE",
    /** The tip is calculated as a percentage of the subtotal of all related line items. */
    PERCENTAGE = "PERCENTAGE",
    /** The tip is a fixed amount. */
    AMOUNT = "AMOUNT"
}
interface Preset {
    /**
     * Value of the preset tip choice that's displayed to customers in the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     * For example, `5`, `10`, and `15` percent or `1`, `3`, and `5` USD.
     *
     * Min: `0`
     */
    value?: number | null;
    /**
     * Whether this tip choice value is the dafault preset that's highlighted automatically in the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     *
     * Default: `false`
     */
    default?: boolean | null;
}
declare enum StaffDistributionMethod {
    /** There is no information about the staff distribution method. */
    UNKNOWN_SPLIT_METHOD = "UNKNOWN_SPLIT_METHOD",
    /** All staff receive an equal amount of the tip. */
    EQUAL = "EQUAL",
    /** Staff receive a proportional amount of the tip. */
    PROPORTIONAL = "PROPORTIONAL"
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface QueryTipSettingsRequest {
    /** WQL expression */
    query: QueryV2;
}
interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$1[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryTipSettingsResponse {
    /** Retrieved `tipSettings` objects. */
    tipSettings?: TipSettings[];
    /** Metadate for the paged set of retrieved `tipSettings` objects. */
    pagingMetadata?: PagingMetadataV2;
}
interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors$1;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateTipSettingsRequest {
    /** Tip settings to update. */
    tipSettings: TipSettings;
}
interface UpdateTipSettingsResponse {
    /** Updated tip settings. */
    tipSettings?: TipSettings;
}
interface CreateTipSettingsRequest {
    /** Tip settings to create. */
    tipSettings: TipSettings;
}
interface CreateTipSettingsResponse {
    /** Created tip settings. */
    tipSettings?: TipSettings;
}
interface CreateDefaultTipSettingsRequest {
    /** Dafault tip settings to create. */
    tipSettings: TipSettings;
}
interface CreateDefaultTipSettingsResponse {
    /** Created default tip settings. */
    tipSettings?: TipSettings;
}
interface DeleteTipSettingsRequest {
    /** ID of the `tipSettings` object to delete. */
    tipSettingsId: string | null;
}
interface DeleteTipSettingsResponse {
}
interface DomainEvent$1 extends DomainEventBodyOneOf$1 {
    createdEvent?: EntityCreatedEvent$1;
    updatedEvent?: EntityUpdatedEvent$1;
    deletedEvent?: EntityDeletedEvent$1;
    actionEvent?: ActionEvent$1;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$1 {
    createdEvent?: EntityCreatedEvent$1;
    updatedEvent?: EntityUpdatedEvent$1;
    deletedEvent?: EntityDeletedEvent$1;
    actionEvent?: ActionEvent$1;
}
interface EntityCreatedEvent$1 {
    entity?: string;
}
interface RestoreInfo$1 {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$1 {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$1 {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$1 {
    body?: string;
}
interface MessageEnvelope$1 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$2;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$2 extends IdentificationDataIdOneOf$2 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$1;
}
/** @oneof */
interface IdentificationDataIdOneOf$2 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$1 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface TipSettingsNonNullableFields {
    tipType: TipType$1;
    staffDistributionMethod: StaffDistributionMethod;
}
interface QueryTipSettingsResponseNonNullableFields {
    tipSettings: TipSettingsNonNullableFields[];
}
interface UpdateTipSettingsResponseNonNullableFields {
    tipSettings?: TipSettingsNonNullableFields;
}
interface CreateTipSettingsResponseNonNullableFields {
    tipSettings?: TipSettingsNonNullableFields;
}
interface CreateDefaultTipSettingsResponseNonNullableFields {
    tipSettings?: TipSettingsNonNullableFields;
}
interface QueryCursorResult$1 {
    cursors: Cursors$1;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface TipSettingsQueryResult extends QueryCursorResult$1 {
    items: TipSettings[];
    query: TipSettingsQueryBuilder;
    next: () => Promise<TipSettingsQueryResult>;
    prev: () => Promise<TipSettingsQueryResult>;
}
interface TipSettingsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: 'locationId' | 'paymentTerminalId' | '_id' | 'tipType' | 'allowCustomerTip' | 'allowBusinessTipAtPayment' | 'allowCustomAmount' | 'allowEditDistribution' | 'default', value: any) => TipSettingsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: 'locationId' | 'paymentTerminalId' | '_id' | 'tipType' | 'allowCustomerTip' | 'allowBusinessTipAtPayment' | 'allowCustomAmount' | 'allowEditDistribution' | 'default', value: any) => TipSettingsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: 'locationId' | 'paymentTerminalId' | '_id', value: string) => TipSettingsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: 'locationId' | 'paymentTerminalId' | '_id' | 'tipType' | 'allowCustomerTip' | 'allowBusinessTipAtPayment' | 'allowCustomAmount' | 'allowEditDistribution' | 'default', value: any[]) => TipSettingsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: 'locationId' | 'paymentTerminalId' | '_id' | 'tipType' | 'allowCustomerTip' | 'allowBusinessTipAtPayment' | 'allowCustomAmount' | 'allowEditDistribution' | 'default', value: any) => TipSettingsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: 'locationId' | 'paymentTerminalId' | '_id' | 'tipType' | 'allowCustomerTip' | 'allowBusinessTipAtPayment' | 'allowCustomAmount' | 'allowEditDistribution' | 'default', value: boolean) => TipSettingsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'locationId' | 'paymentTerminalId' | '_id' | 'tipType' | 'allowCustomerTip' | 'allowBusinessTipAtPayment' | 'allowCustomAmount' | 'allowEditDistribution' | 'default'>) => TipSettingsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'locationId' | 'paymentTerminalId' | '_id' | 'tipType' | 'allowCustomerTip' | 'allowBusinessTipAtPayment' | 'allowCustomAmount' | 'allowEditDistribution' | 'default'>) => TipSettingsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => TipSettingsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => TipSettingsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<TipSettingsQueryResult>;
}

declare function queryTipSettings$1(httpClient: HttpClient): QueryTipSettingsSignature;
interface QueryTipSettingsSignature {
    /**
     * Retrieves a list of tip of up to 100 tip settings, given the provided paging, filtering, and sorting.
     *
     * Query Tip Settings runs with these defaults, which you can override:
     * - `cursorPaging.limit` is `50`.
     * - Sorted by `id` in ascending order.
     *
     * For field support for filters and sorting, see
     * [Tip Settings: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tip-settings/supported-filters).
     *
     * Use [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time)
     * when setting a filter for dates.
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language),
     * [Sorting and Paging](https://dev.wix.com/api/rest/getting-started/sorting-and-paging),
     * and [Field Projection](https://dev.wix.com/api/rest/getting-started/field-projection).
     */
    (): TipSettingsQueryBuilder;
}
declare function updateTipSettings$1(httpClient: HttpClient): UpdateTipSettingsSignature;
interface UpdateTipSettingsSignature {
    /**
     * Updates a `tipSettings` object.
     *
     *
     * You can't update the `default` field.
     * @param - Tip settings to update.
     * @returns Updated tip settings.
     */
    (tipSettings: TipSettings): Promise<TipSettings & TipSettingsNonNullableFields>;
}
declare function createTipSettings$1(httpClient: HttpClient): CreateTipSettingsSignature;
interface CreateTipSettingsSignature {
    /**
     * Creates a `tipSettings` object.
     *
     *
     * You can't create a `tipSettings` object with `{"default": true}`.
     * @param - Tip settings to create.
     * @returns Created tip settings.
     */
    (tipSettings: TipSettings): Promise<TipSettings & TipSettingsNonNullableFields>;
}
declare function createDefaultTipSettings$1(httpClient: HttpClient): CreateDefaultTipSettingsSignature;
interface CreateDefaultTipSettingsSignature {
    /**
     * Creates a default `tipSettings` object.
     *
     *
     * The call fails if there is already an existing default `tipSettings` object.
     * @param - Dafault tip settings to create.
     */
    (tipSettings: TipSettings): Promise<CreateDefaultTipSettingsResponse & CreateDefaultTipSettingsResponseNonNullableFields>;
}
declare function deleteTipSettings$1(httpClient: HttpClient): DeleteTipSettingsSignature;
interface DeleteTipSettingsSignature {
    /**
     * Deletes a `tipSettings` object.
     *
     *
     * You can't delete the default `tipSettings` object.
     * @param - ID of the `tipSettings` object to delete.
     */
    (tipSettingsId: string | null): Promise<void>;
}

declare const queryTipSettings: MaybeContext<BuildRESTFunction<typeof queryTipSettings$1> & typeof queryTipSettings$1>;
declare const updateTipSettings: MaybeContext<BuildRESTFunction<typeof updateTipSettings$1> & typeof updateTipSettings$1>;
declare const createTipSettings: MaybeContext<BuildRESTFunction<typeof createTipSettings$1> & typeof createTipSettings$1>;
declare const createDefaultTipSettings: MaybeContext<BuildRESTFunction<typeof createDefaultTipSettings$1> & typeof createDefaultTipSettings$1>;
declare const deleteTipSettings: MaybeContext<BuildRESTFunction<typeof deleteTipSettings$1> & typeof deleteTipSettings$1>;

type index_d$2_CreateDefaultTipSettingsRequest = CreateDefaultTipSettingsRequest;
type index_d$2_CreateDefaultTipSettingsResponse = CreateDefaultTipSettingsResponse;
type index_d$2_CreateDefaultTipSettingsResponseNonNullableFields = CreateDefaultTipSettingsResponseNonNullableFields;
type index_d$2_CreateTipSettingsRequest = CreateTipSettingsRequest;
type index_d$2_CreateTipSettingsResponse = CreateTipSettingsResponse;
type index_d$2_CreateTipSettingsResponseNonNullableFields = CreateTipSettingsResponseNonNullableFields;
type index_d$2_DeleteTipSettingsRequest = DeleteTipSettingsRequest;
type index_d$2_DeleteTipSettingsResponse = DeleteTipSettingsResponse;
type index_d$2_ExtendedFields = ExtendedFields;
type index_d$2_Paging = Paging;
type index_d$2_PagingMetadataV2 = PagingMetadataV2;
type index_d$2_Preset = Preset;
type index_d$2_QueryTipSettingsRequest = QueryTipSettingsRequest;
type index_d$2_QueryTipSettingsResponse = QueryTipSettingsResponse;
type index_d$2_QueryTipSettingsResponseNonNullableFields = QueryTipSettingsResponseNonNullableFields;
type index_d$2_QueryV2 = QueryV2;
type index_d$2_QueryV2PagingMethodOneOf = QueryV2PagingMethodOneOf;
type index_d$2_StaffDistributionMethod = StaffDistributionMethod;
declare const index_d$2_StaffDistributionMethod: typeof StaffDistributionMethod;
type index_d$2_TipSettings = TipSettings;
type index_d$2_TipSettingsIdentifierOneOf = TipSettingsIdentifierOneOf;
type index_d$2_TipSettingsNonNullableFields = TipSettingsNonNullableFields;
type index_d$2_TipSettingsQueryBuilder = TipSettingsQueryBuilder;
type index_d$2_TipSettingsQueryResult = TipSettingsQueryResult;
type index_d$2_UpdateTipSettingsRequest = UpdateTipSettingsRequest;
type index_d$2_UpdateTipSettingsResponse = UpdateTipSettingsResponse;
type index_d$2_UpdateTipSettingsResponseNonNullableFields = UpdateTipSettingsResponseNonNullableFields;
declare const index_d$2_createDefaultTipSettings: typeof createDefaultTipSettings;
declare const index_d$2_createTipSettings: typeof createTipSettings;
declare const index_d$2_deleteTipSettings: typeof deleteTipSettings;
declare const index_d$2_queryTipSettings: typeof queryTipSettings;
declare const index_d$2_updateTipSettings: typeof updateTipSettings;
declare namespace index_d$2 {
  export { type ActionEvent$1 as ActionEvent, type index_d$2_CreateDefaultTipSettingsRequest as CreateDefaultTipSettingsRequest, type index_d$2_CreateDefaultTipSettingsResponse as CreateDefaultTipSettingsResponse, type index_d$2_CreateDefaultTipSettingsResponseNonNullableFields as CreateDefaultTipSettingsResponseNonNullableFields, type index_d$2_CreateTipSettingsRequest as CreateTipSettingsRequest, type index_d$2_CreateTipSettingsResponse as CreateTipSettingsResponse, type index_d$2_CreateTipSettingsResponseNonNullableFields as CreateTipSettingsResponseNonNullableFields, type CursorPaging$1 as CursorPaging, type Cursors$1 as Cursors, type index_d$2_DeleteTipSettingsRequest as DeleteTipSettingsRequest, type index_d$2_DeleteTipSettingsResponse as DeleteTipSettingsResponse, type DomainEvent$1 as DomainEvent, type DomainEventBodyOneOf$1 as DomainEventBodyOneOf, type EntityCreatedEvent$1 as EntityCreatedEvent, type EntityDeletedEvent$1 as EntityDeletedEvent, type EntityUpdatedEvent$1 as EntityUpdatedEvent, type index_d$2_ExtendedFields as ExtendedFields, type IdentificationData$2 as IdentificationData, type IdentificationDataIdOneOf$2 as IdentificationDataIdOneOf, type MessageEnvelope$1 as MessageEnvelope, type index_d$2_Paging as Paging, type index_d$2_PagingMetadataV2 as PagingMetadataV2, type index_d$2_Preset as Preset, type index_d$2_QueryTipSettingsRequest as QueryTipSettingsRequest, type index_d$2_QueryTipSettingsResponse as QueryTipSettingsResponse, type index_d$2_QueryTipSettingsResponseNonNullableFields as QueryTipSettingsResponseNonNullableFields, type index_d$2_QueryV2 as QueryV2, type index_d$2_QueryV2PagingMethodOneOf as QueryV2PagingMethodOneOf, type RestoreInfo$1 as RestoreInfo, SortOrder$1 as SortOrder, type Sorting$1 as Sorting, index_d$2_StaffDistributionMethod as StaffDistributionMethod, type index_d$2_TipSettings as TipSettings, type index_d$2_TipSettingsIdentifierOneOf as TipSettingsIdentifierOneOf, type index_d$2_TipSettingsNonNullableFields as TipSettingsNonNullableFields, type index_d$2_TipSettingsQueryBuilder as TipSettingsQueryBuilder, type index_d$2_TipSettingsQueryResult as TipSettingsQueryResult, TipType$1 as TipType, type index_d$2_UpdateTipSettingsRequest as UpdateTipSettingsRequest, type index_d$2_UpdateTipSettingsResponse as UpdateTipSettingsResponse, type index_d$2_UpdateTipSettingsResponseNonNullableFields as UpdateTipSettingsResponseNonNullableFields, WebhookIdentityType$1 as WebhookIdentityType, index_d$2_createDefaultTipSettings as createDefaultTipSettings, index_d$2_createTipSettings as createTipSettings, index_d$2_deleteTipSettings as deleteTipSettings, index_d$2_queryTipSettings as queryTipSettings, index_d$2_updateTipSettings as updateTipSettings };
}

/**
 * Information about a team member who's eligible to receive a portion of the tip.
 * Currently, only [Bookings staff members](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/introduction)
 * and [site collaborators](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site)
 * are eligible for tip distributions.
 */
interface Staff$1 {
    /**
     * Staff ID. Matches `staffMemberId` if available, or
     * `identificationData.wixUserId` if not.
     * @readonly
     */
    _id?: string | null;
    /**
     * Staff name. Matches the name of the
     * [Bookings staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/staff-member-object)
     * if available.
     */
    name?: string | null;
    /**
     * Staff member ID. Available only if the staff is connected to a
     * [Bookings staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/staff-member-object).
     */
    staffMemberId?: string | null;
    /**
     * Identification data of the staff. Available only if the staff is a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    identificationData?: IdentificationData$1;
}
interface IdentificationData$1 extends IdentificationDataIdOneOf$1 {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /**
     * ID of the [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/introduction)
     * in the site's [CRM by Ascend](https://www.wix.com/ascend/crm) system.
     */
    contactId?: string | null;
}
/** @oneof */
interface IdentificationDataIdOneOf$1 {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum IdentityType$1 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface ListTippableStaffRequest {
    /**
     * Whether to include staff who are only Wix users and not
     * [Bookings staff members](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/about-staff-members-and-resources)
     * in the response. Setting `{"includeWixUsers": true}` returns all tippable
     * staff, including Bookings staff, site collaborators, or those who are both.
     * By default, or if you provide `{"includeWixUsers": false}`, only Bookings
     * staff members or those who are both are returned.
     *
     * Default: `false`.
     */
    includeWixUsers?: boolean;
    /**
     * Filters the returned staff by name. If you provide a name as filter, only
     * staff whose names start with the given input are returned. The filter isn't
     * case sensitive.
     *
     * Max: 500 characters
     */
    filterByName?: string | null;
    /**
     * Filters the returned staff by ID. If you provide a list of IDs as filter,
     * only staff members with exact matching IDs are returned.
     *
     * Max: 100 IDs
     */
    filterByIds?: string[] | null;
}
interface ListTippableStaffResponse {
    /** Retrieved staff. */
    staff?: Staff$1[];
}
interface IdentificationDataNonNullableFields {
    anonymousVisitorId: string;
    memberId: string;
    wixUserId: string;
    appId: string;
    identityType: IdentityType$1;
}
interface StaffNonNullableFields$1 {
    identificationData?: IdentificationDataNonNullableFields;
}
interface ListTippableStaffResponseNonNullableFields {
    staff: StaffNonNullableFields$1[];
}
interface ListTippableStaffOptions {
    /**
     * Whether to include staff who are only Wix users and not
     * [Bookings staff members](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/about-staff-members-and-resources)
     * in the response. Setting `{"includeWixUsers": true}` returns all tippable
     * staff, including Bookings staff, site collaborators, or those who are both.
     * By default, or if you provide `{"includeWixUsers": false}`, only Bookings
     * staff members or those who are both are returned.
     *
     * Default: `false`.
     */
    includeWixUsers?: boolean;
    /**
     * Filters the returned staff by name. If you provide a name as filter, only
     * staff whose names start with the given input are returned. The filter isn't
     * case sensitive.
     *
     * Max: 500 characters
     */
    filterByName?: string | null;
    /**
     * Filters the returned staff by ID. If you provide a list of IDs as filter,
     * only staff members with exact matching IDs are returned.
     *
     * Max: 100 IDs
     */
    filterByIds?: string[] | null;
}

declare function listTippableStaff$1(httpClient: HttpClient): ListTippableStaffSignature;
interface ListTippableStaffSignature {
    /**
     * Retrieves a list of up to 100 staff who are eligible to receive tips, given
     * the provided filtering.
     */
    (options?: ListTippableStaffOptions | undefined): Promise<ListTippableStaffResponse & ListTippableStaffResponseNonNullableFields>;
}

declare const listTippableStaff: MaybeContext<BuildRESTFunction<typeof listTippableStaff$1> & typeof listTippableStaff$1>;

type index_d$1_ListTippableStaffOptions = ListTippableStaffOptions;
type index_d$1_ListTippableStaffRequest = ListTippableStaffRequest;
type index_d$1_ListTippableStaffResponse = ListTippableStaffResponse;
type index_d$1_ListTippableStaffResponseNonNullableFields = ListTippableStaffResponseNonNullableFields;
declare const index_d$1_listTippableStaff: typeof listTippableStaff;
declare namespace index_d$1 {
  export { type IdentificationData$1 as IdentificationData, type IdentificationDataIdOneOf$1 as IdentificationDataIdOneOf, IdentityType$1 as IdentityType, type index_d$1_ListTippableStaffOptions as ListTippableStaffOptions, type index_d$1_ListTippableStaffRequest as ListTippableStaffRequest, type index_d$1_ListTippableStaffResponse as ListTippableStaffResponse, type index_d$1_ListTippableStaffResponseNonNullableFields as ListTippableStaffResponseNonNullableFields, type Staff$1 as Staff, index_d$1_listTippableStaff as listTippableStaff };
}

/**
 * A tip holds information about how much a customer has tipped, how the tip is
 * distributed among staff, and the associated order’s line item subtotal.
 */
interface Tip {
    /**
     * ID of the tip. Identical to the `code` of the related `order.additionalFee`.
     * @readonly
     */
    _id?: string | null;
    /**
     * Subtotal of all line items from the [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)
     * that's related to the tip. In the response of
     * [Preview Tip](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/preview-tip),
     * there is no related eCommerce order. Then, value of this field corresponds to
     * the sum of all line item prices passed in the request.
     * @readonly
     */
    lineItemSubtotal?: string | null;
    /**
     * Total amount of the tip.
     *
     * Min: `0.00`
     */
    amount?: string | null;
    /**
     * Details about how the tip is shared among staff. Available only if at least
     * one staff member receives part of the tip, and it's not entirely allocated to
     * the business.
     *
     * Max: 50 distributions
     */
    distributions?: TipDistribution[];
    /**
     * Undistributed tip amount. Calculated as the difference between `tip.amount`
     * and the sum of all `tip.tipDistributions.amount` values.
     *
     * Min: `0.01`
     * @readonly
     */
    undistributedAmount?: string | null;
}
interface TipDistribution {
    /**
     * ID of the tip distribution.
     * @readonly
     */
    _id?: string | null;
    /**
     * ID of the tip associated with the distribution. Matches the corresponding
     * `order.additionalFee.code`.
     * @readonly
     */
    tipId?: string | null;
    /** Information about the business staff receiving the tip distribution. */
    staff?: Staff;
    /**
     * Amount of the tip distribution.
     *
     * Min: `0.00`
     */
    amount?: string | null;
    /**
     * Details about the related line items from the
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object).
     *
     * Max: 10 `lineItemInfo` objects
     */
    lineItemInfo?: LineItemInfo[];
    /**
     * Details of how the customer is charged for the tip. Available only if the
     * [transcation](https://dev.wix.com/docs/rest/business-management/payments/cashier/payments/transaction/transaction-object)
     * has been created.
     */
    transaction?: Transaction;
    /**
     * ID of the [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)
     * associated with the tip distribution. Identical for all distributions that
     * belong to the same tip.
     * @readonly
     */
    orderId?: string | null;
    /**
     * Date and time the distribution was created in
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    _createdDate?: Date | null;
}
interface CommonIdentificationData extends CommonIdentificationDataIdOneOf {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /**
     * ID of the [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/introduction)
     * in the site's [CRM by Ascend](https://www.wix.com/ascend/crm) system.
     */
    contactId?: string | null;
}
/** @oneof */
interface CommonIdentificationDataIdOneOf {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum IdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface Staff {
    /**
     * ID of the staff receiving the tip. Matches `staffMemberId` if available, or
     * `identificationData.wixUserId` if not.
     * @readonly
     */
    _id?: string | null;
    /**
     * Staff name. Matches `staffMember.name` if the staff is a
     * [Bookings staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/staff-member-object),
     * or the [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/contact-v4/contact-object)'s
     * `info.name` if not.
     *
     * Max: 500 characters
     * @readonly
     */
    name?: string | null;
    /**
     * ID of the [staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/staff-member-object).
     * Available only if the staff is a staff member and not a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    staffMemberId?: string | null;
    /**
     * Identification data. Available only if the staff is a
     * [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/contact-v4/contact-object)
     * on the Wix site. Note that not all site collaborators are also
     * [staff members](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/introduction).
     */
    identificationData?: CommonIdentificationData;
}
interface LineItemInfo {
    /**
     * IDs of the line items associated with the tip.
     *
     * Min: 1 character
     * Max: 100 characters
     */
    lineItemId?: string | null;
    /**
     * Information about the line item and the corresponding catalog. Catalogs
     * include Wix Bookings and Wix Stores.
     */
    catalogReference?: CatalogReference;
    /**
     * Price of the line item.
     *
     * Min: `0.00`
     */
    price?: string | null;
    /**
     * Name of the line item, which is identical to:
     * + `product.name` for [Stores](https://dev.wix.com/docs/rest/business-solutions/stores/about-wix-stores).
     * + `service.name` for [Bookings](https://dev.wix.com/docs/rest/business-solutions/bookings/about-wix-bookings).
     *
     * Min: 1 character
     * Max: 200 characters
     */
    name?: string | null;
    /**
     * Quantity of the line item.
     *
     * Min: `1`
     * Max: `100000` (one hundred thousand)
     */
    quantity?: number | null;
}
interface CatalogReference {
    /**
     * ID of the line item within its catalog, corresponding to:
     * + `product.id` for [Stores](https://dev.wix.com/docs/rest/business-solutions/stores/about-wix-stores).
     * + `service.id` for [Bookings](https://dev.wix.com/docs/rest/business-solutions/bookings/about-wix-bookings).
     */
    catalogItemId?: string | null;
    /**
     * ID of the [app](https://dev.wix.com/docs/rest/articles/getting-started/wix-business-solutions)
     * to which the catalog belongs.
     *
     * Supported app IDs:
     * + [Wix Tips](https://www.wix.com/app-market/wix-tips): `"869a50c8-dd38-4324-b201-e33dc0747a5f"`
     * + [Wix Stores](https://www.wix.com/app-market/wix-stores): `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + [Wix Bookings](https://www.wix.com/app-market/bookings): `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + [Wix Restaurants Orders](https://www.wix.com/app-market/web-solution/wix-restaurants-orders-new): `"13e8d036-5516-6104-b456-c8466db39542"`
     */
    appId?: string | null;
}
interface Transaction {
    /** ID of the transaction that's associated with the tip distribution. */
    _id?: string | null;
    /**
     * Date and time the transaction was created in `YYYY-MM-DDThh:mm:ss.sssZ`
     * format. Isn't identical to the time the customer was actually charged.
     */
    date?: Date | null;
}
interface PreviewTipRequest {
    /**
     * Information about the line items to preview the tip for.
     *
     * Min: 1 line item
     * Max: 50 line items
     */
    lineItemInfo: LineItemInfo[];
    /**
     * Information about how to calculate the total tip amount and the distribution
     * amounts.
     */
    tipChoice: TipChoice;
    /**
     * ID of the tip settings used to preview the tip. If you don't provide a
     * `tipSettingsId`, the `staffDistributionMethod` is based on the site's
     * default tip settings.
     */
    tipSettingsId?: string | null;
}
interface TipChoice {
    /** Value of the tip choice. */
    value?: string | null;
    /**
     * Type of the tip choice.
     *
     * Supported values:
     * + `UNKNOWN_TIP_TYPE`: There is no information about the tip type.
     * + `PERCENTAGE`: The tip is calculated as a percentage of the subtotal of associated line items.
     * + `AMOUNT`: The tip is a fixed value, pre-configured from the relevant settings presets.
     * + `CUSTOM`: The customer, or the business on behalf of the customer, manually set a tip amount, which may not match any preset values.
     */
    tipType?: TipType;
}
declare enum TipType {
    /** There is no information about the tip type. */
    UNKNOWN_TIP_TYPE = "UNKNOWN_TIP_TYPE",
    /** The tip is calculated as a percentage of the subtotal of associated line items. */
    PERCENTAGE = "PERCENTAGE",
    /** The tip is a fixed value, pre-configured from the relevant settings presets. */
    AMOUNT = "AMOUNT",
    /** The customer, or the business on behalf of the customer, manually set a tip amount, which may not match any preset values. */
    CUSTOM = "CUSTOM"
}
interface PreviewTipResponse {
    /** Tip. */
    tip?: Tip;
}
interface GetTipByOrderIdRequest {
    /** ID of the order to retrieve the tip for. */
    orderId: string | null;
}
interface GetTipByOrderIdResponse {
    /** Retrieved tip. */
    tip?: Tip;
}
interface GetTipByDraftOrderIdRequest {
    /** ID of the draft order to retrieve the tip for. */
    draftOrderId: string | null;
}
interface GetTipByDraftOrderIdResponse {
    /** Retrieved tip. */
    tip?: Tip;
}
interface GetTipChoiceRequest {
    /**
     * ID of the [eCommerce purchase flow](https://dev.wix.com/docs/rest/business-solutions/e-commerce/wix-e-commerce-platform-handbook/overview/architecture-data-flow)
     * to retrieve the tip choice for.
     */
    purchaseFlowId: string | null;
}
interface GetTipChoiceResponse {
    /** Tip choice that's currently selected for the given purchase flow. */
    tipChoice?: TipChoice;
}
interface UpdateTipChoiceRequest {
    /**
     * Tip choice to select for the purchase flow. The call fails if you provide a
     * value for `tipChoice.tipType` that doesn't match the relevant tip settings
     * configuration. For example:
     * + `AMOUNT` when `tipSettings.tipType` isn't `AMOUNT`.
     * + `PERCENTAGE` when `tipSettings.tipType` isn't `PERCENTAGE`.
     * + `CUSTOM` when `tipSettings.allowCustomTip` is `false`.
     */
    tipChoice: TipChoice;
    /**
     * ID of the purchase flow that's associated with the
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/order/introduction)
     */
    purchaseFlowId: string | null;
}
interface UpdateTipChoiceResponse {
    /**
     * Tip choice currently selected in the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)
     * for the given purchase flow.
     */
    tipChoice?: TipChoice;
}
interface SetTipOnOrderRequest extends SetTipOnOrderRequestIdentifierOneOf {
    /** ID of the order for which to set the tip. */
    orderId?: string | null;
    /** Tip to set on the order. */
    tip: Tip;
}
/** @oneof */
interface SetTipOnOrderRequestIdentifierOneOf {
    /** ID of the order for which to set the tip. */
    orderId?: string | null;
}
interface SetTipOnOrderResponse {
    /** Set tip. */
    tip?: Tip;
    /** Information about the order on which the tip was set. */
    orderInfo?: OrderInfo;
}
interface OrderInfo extends OrderInfoIdentifierOneOf {
    /** Order ID. */
    orderId?: string | null;
    /** ID of the order's additional fee that's associated with the tip. */
    additionalFeeId?: string | null;
    /** Price of the order's additional fee that's associated with the tip. */
    additionalFeePrice?: Price;
}
/** @oneof */
interface OrderInfoIdentifierOneOf {
    /** Order ID. */
    orderId?: string | null;
}
interface Price {
    /** Amount of the additional fee that's associated with the tip. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     *
     * Max: 100 characters
     * @readonly
     */
    formattedAmount?: string;
}
interface RemoveTipFromOrderRequest extends RemoveTipFromOrderRequestIdentifierOneOf {
    /** ID of the order from which to remove the tip. */
    orderId?: string | null;
}
/** @oneof */
interface RemoveTipFromOrderRequestIdentifierOneOf {
    /** ID of the order from which to remove the tip. */
    orderId?: string | null;
}
interface RemoveTipFromOrderResponse {
    /** Information about the order from which the tip was removed. */
    orderInfo?: OrderInfo;
}
interface CreateTipDistributionsRequest {
    /**
     * Tip distributions to create.
     *
     * Min: 1 distribution
     * Max: 50 distributions
     */
    tipDistributions?: TipDistribution[];
    /** ID of the tip for which to create distributions. */
    tipId?: string | null;
}
interface CreateTipDistributionsResponse {
    /**
     * ID of the tip for which the distributions were created.
     * @readonly
     */
    tipId?: string | null;
    /** Created tip distributions. */
    tipDistributions?: TipDistribution[];
}
interface DeleteTipDistributionsRequest extends DeleteTipDistributionsRequestDeleteByOneOf {
    /** ID of the tip for which to delete all associated tip distributions. */
    tipId?: string | null;
    /** ID of the order for which to delete all associated tip distributions. */
    orderId?: string | null;
}
/** @oneof */
interface DeleteTipDistributionsRequestDeleteByOneOf {
    /** ID of the tip for which to delete all associated tip distributions. */
    tipId?: string | null;
    /** ID of the order for which to delete all associated tip distributions. */
    orderId?: string | null;
}
interface DeleteTipDistributionsResponse {
}
interface AddTipDistributionsToOrderRequest extends AddTipDistributionsToOrderRequestIdentifierOneOf {
    /** ID of the order for which to add tip distributions. */
    orderId?: string | null;
    /** Tip distributions to add to the order. */
    tipDistributions: TipDistribution[];
}
/** @oneof */
interface AddTipDistributionsToOrderRequestIdentifierOneOf {
    /** ID of the order for which to add tip distributions. */
    orderId?: string | null;
}
interface AddTipDistributionsToOrderResponse {
    /** Tip distributions that were added to the order. */
    tipDistributions?: TipDistribution[];
    /** Information about the order to which the tip distributions were added. */
    orderInfo?: OrderInfo;
}
interface QueryTipDistributionsRequest {
    /** WQL expression. */
    query: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryTipDistributionsResponse {
    /** Retrieved tip distributions. */
    tipDistributions?: TipDistribution[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors;
    /**
     * Indicates if there are more results after the current page.
     * If `true`, another page of results can be retrieved.
     * If `false`, this is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
interface SumTipDistributionAmountsRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter: Record<string, any> | null;
}
interface SumTipDistributionAmountsResponse {
    /** Total amount of tip distributions matching the filter. */
    totalAmount?: string | null;
}
interface ApplyTipDistributionsRequest {
    /** ID of the tip for which all tip distributions are applied to the order. */
    tipId?: string | null;
    /** ID of the order for which to apply all tip distributions. */
    orderId?: string | null;
    /** Whether to query by order ID or tip ID. */
    queryBy?: QueryBy;
}
declare enum QueryBy {
    UNKNOWN_QUERY_BY = "UNKNOWN_QUERY_BY",
    ORDER = "ORDER",
    TIP = "TIP"
}
interface ApplyTipDistributionsResponse {
    /** Applied tip distributions. */
    tipDistributions?: TipDistribution[];
}
interface PublishTipDistributionsCreatedEventRequest {
    /** The tip distributions that will be published on the event. */
    tipDistributions?: TipDistribution[];
    /** The tip ID of the distributions */
    tipId?: string | null;
    /** The order ID that the tip is connected to */
    orderId?: string | null;
}
interface PublishTipDistributionsCreatedEventResponse {
}
interface TipDistributionsCreated {
    /** ID of the tip to which the distribution belongs. */
    tipId?: string | null;
    /**
     * Created tip distributions.
     *
     * Min: 1 tip distribution
     * Max: 100 tip distributions
     */
    tipDistributions?: TipDistribution[];
    /** The order ID that the tip is connected to */
    orderId?: string | null;
    /** The undistributed tip amount */
    undistributedAmount?: string | null;
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface CommonIdentificationDataNonNullableFields {
    anonymousVisitorId: string;
    memberId: string;
    wixUserId: string;
    appId: string;
    identityType: IdentityType;
}
interface StaffNonNullableFields {
    identificationData?: CommonIdentificationDataNonNullableFields;
}
interface TipDistributionNonNullableFields {
    staff?: StaffNonNullableFields;
}
interface TipNonNullableFields {
    distributions: TipDistributionNonNullableFields[];
}
interface PreviewTipResponseNonNullableFields {
    tip?: TipNonNullableFields;
}
interface GetTipByOrderIdResponseNonNullableFields {
    tip?: TipNonNullableFields;
}
interface GetTipByDraftOrderIdResponseNonNullableFields {
    tip?: TipNonNullableFields;
}
interface TipChoiceNonNullableFields {
    tipType: TipType;
}
interface GetTipChoiceResponseNonNullableFields {
    tipChoice?: TipChoiceNonNullableFields;
}
interface UpdateTipChoiceResponseNonNullableFields {
    tipChoice?: TipChoiceNonNullableFields;
}
interface PriceNonNullableFields {
    amount: string;
    formattedAmount: string;
}
interface OrderInfoNonNullableFields {
    additionalFeePrice?: PriceNonNullableFields;
}
interface SetTipOnOrderResponseNonNullableFields {
    tip?: TipNonNullableFields;
    orderInfo?: OrderInfoNonNullableFields;
}
interface RemoveTipFromOrderResponseNonNullableFields {
    orderInfo?: OrderInfoNonNullableFields;
}
interface AddTipDistributionsToOrderResponseNonNullableFields {
    tipDistributions: TipDistributionNonNullableFields[];
    orderInfo?: OrderInfoNonNullableFields;
}
interface QueryTipDistributionsResponseNonNullableFields {
    tipDistributions: TipDistributionNonNullableFields[];
}
interface PreviewTipOptions {
    /**
     * Information about how to calculate the total tip amount and the distribution
     * amounts.
     */
    tipChoice: TipChoice;
    /**
     * ID of the tip settings used to preview the tip. If you don't provide a
     * `tipSettingsId`, the `staffDistributionMethod` is based on the site's
     * default tip settings.
     */
    tipSettingsId?: string | null;
}
interface UpdateTipChoiceOptions {
    /**
     * ID of the purchase flow that's associated with the
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/order/introduction)
     */
    purchaseFlowId: string | null;
}
interface SetTipOnOrderOptions extends SetTipOnOrderRequestIdentifierOneOf {
    /** ID of the order for which to set the tip. */
    orderId?: string | null;
    /** Tip to set on the order. */
    tip: Tip;
}
interface RemoveTipFromOrderOptions extends RemoveTipFromOrderRequestIdentifierOneOf {
    /** ID of the order from which to remove the tip. */
    orderId?: string | null;
}
interface AddTipDistributionsToOrderOptions extends AddTipDistributionsToOrderRequestIdentifierOneOf {
    /** ID of the order for which to add tip distributions. */
    orderId?: string | null;
    /** Tip distributions to add to the order. */
    tipDistributions: TipDistribution[];
}
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface TipDistributionsQueryResult extends QueryCursorResult {
    items: TipDistribution[];
    query: TipDistributionsQueryBuilder;
    next: () => Promise<TipDistributionsQueryResult>;
    prev: () => Promise<TipDistributionsQueryResult>;
}
interface TipDistributionsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id', value: any) => TipDistributionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id', value: any) => TipDistributionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id', value: string) => TipDistributionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id', value: any[]) => TipDistributionsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id', value: any) => TipDistributionsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id', value: boolean) => TipDistributionsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id'>) => TipDistributionsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id'>) => TipDistributionsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => TipDistributionsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => TipDistributionsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<TipDistributionsQueryResult>;
}

declare function previewTip$1(httpClient: HttpClient): PreviewTipSignature;
interface PreviewTipSignature {
    /**
     * Previews a tip for a list of line items.
     *
     *
     * If you provide the [Wix Bookings app ID](https://dev.wix.com/docs/rest/articles/getting-started/wix-business-solutions)
     * as `lineItemInfo.catalogReference.appId`, the response includes tip
     * distributions for each associated
     * [Bookings staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/about-staff-members-and-resources).
     *
     * If you don't provide a `tipSettingsId`, the `staffDistributionMethod` is
     * based on the site's default tip settings.
     * @param - Information about the line items to preview the tip for.
     *
     * Min: 1 line item
     * Max: 50 line items
     */
    (lineItemInfo: LineItemInfo[], options?: PreviewTipOptions | undefined): Promise<PreviewTipResponse & PreviewTipResponseNonNullableFields>;
}
declare function getTipByOrderId$1(httpClient: HttpClient): GetTipByOrderIdSignature;
interface GetTipByOrderIdSignature {
    /**
     * Retrieves the tip that's associated with an
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction).
     * @param - ID of the order to retrieve the tip for.
     */
    (orderId: string | null): Promise<GetTipByOrderIdResponse & GetTipByOrderIdResponseNonNullableFields>;
}
declare function getTipByDraftOrderId$1(httpClient: HttpClient): GetTipByDraftOrderIdSignature;
interface GetTipByDraftOrderIdSignature {
    /**
     * Retrieves the tip that's associated with an
     * [eCommerce draft order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/draft-orders/introduction).
     * @param - ID of the draft order to retrieve the tip for.
     */
    (draftOrderId: string | null): Promise<GetTipByDraftOrderIdResponse & GetTipByDraftOrderIdResponseNonNullableFields>;
}
declare function getTipChoice$1(httpClient: HttpClient): GetTipChoiceSignature;
interface GetTipChoiceSignature {
    /**
     * Retrieves the tip choice that's currently selected by the customer for a specific [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction).
     * If the customer hasn't yet selected a tip choice, the response is empty.
     *
     * Please refer to the [sample flow](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/sample-flows#add-or-update-a-tip-in-a-custom-checkout-flow) for more information.
     * @param - ID of the [eCommerce purchase flow](https://dev.wix.com/docs/rest/business-solutions/e-commerce/wix-e-commerce-platform-handbook/overview/architecture-data-flow)
     * to retrieve the tip choice for.
     */
    (purchaseFlowId: string | null): Promise<GetTipChoiceResponse & GetTipChoiceResponseNonNullableFields>;
}
declare function updateTipChoice$1(httpClient: HttpClient): UpdateTipChoiceSignature;
interface UpdateTipChoiceSignature {
    /**
     * Updates the tip choice that's currently selected by the customer for a specific [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction).
     *
     * Please refer to the [sample flow](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/sample-flows#add-or-update-a-tip-in-a-custom-checkout-flow) for more information.
     * @param - Tip choice to select for the purchase flow. The call fails if you provide a
     * value for `tipChoice.tipType` that doesn't match the relevant tip settings
     * configuration. For example:
     * + `AMOUNT` when `tipSettings.tipType` isn't `AMOUNT`.
     * + `PERCENTAGE` when `tipSettings.tipType` isn't `PERCENTAGE`.
     * + `CUSTOM` when `tipSettings.allowCustomTip` is `false`.
     */
    (tipChoice: TipChoice, options: UpdateTipChoiceOptions): Promise<UpdateTipChoiceResponse & UpdateTipChoiceResponseNonNullableFields>;
}
declare function setTipOnOrder$1(httpClient: HttpClient): SetTipOnOrderSignature;
interface SetTipOnOrderSignature {
    /**
     * Creates or updates a tip on an
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction).
     *
     *
     * If no tip exists on the order, an `additionalFee` is added. If a tip is already
     * present, the existing `additionalFee` is replaced.
     *
     * If you specify `tip.distributions.transaction`, that distribution
     * amount can't be changed in the future. Then, you also can't remove any of the
     * other distributions.
     *
     * The call fails if:
     * + The order's `paymentStatus` is either `FULLY_REFUNDED` or `PARTIALLY_REFUNDED`.
     * + The total tip amount is zero or negative.
     * + The sum of all tip distribution amounts and `undistributedAmount` doesn't match the total tip amount.
     * + You omit `tip.distributions` with an existing `transaction`.
     */
    (options?: SetTipOnOrderOptions | undefined): Promise<SetTipOnOrderResponse & SetTipOnOrderResponseNonNullableFields>;
}
declare function removeTipFromOrder$1(httpClient: HttpClient): RemoveTipFromOrderSignature;
interface RemoveTipFromOrderSignature {
    /**
     * Removes a tip from an
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction).
     *
     *
     * If no tip exists on the order, the call succeeds and the response contains an
     * empty `OrderInfo` object.
     *
     * The call fails if the customer has already been charged for at least one of
     * the associated tip distributions.
     */
    (options?: RemoveTipFromOrderOptions | undefined): Promise<RemoveTipFromOrderResponse & RemoveTipFromOrderResponseNonNullableFields>;
}
declare function addTipDistributionsToOrder$1(httpClient: HttpClient): AddTipDistributionsToOrderSignature;
interface AddTipDistributionsToOrderSignature {
    /**
     * Adds tip distributions to an
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction).
     *
     *
     * If no tip exists on the order, an `additionalFee` is added and the total tip
     * amount is equal to the sum of all distribution amounts. If a tip is already
     * present, the existing `additionalFee` is replaced and the total tip amount is
     * increased by the sum of the new tip distributions.
     *
     * The call fails if:
     * + The order's `paymentStatus` is either `FULLY_REFUNDED` or `PARTIALLY_REFUNDED`.
     * + Any of the tip distribution amounts is zero or negative.
     */
    (options?: AddTipDistributionsToOrderOptions | undefined): Promise<AddTipDistributionsToOrderResponse & AddTipDistributionsToOrderResponseNonNullableFields>;
}
declare function queryTipDistributions$1(httpClient: HttpClient): QueryTipDistributionsSignature;
interface QueryTipDistributionsSignature {
    /**
     * Retrieves a list of up to 100 tip distributions, given the provided paging, filtering, and sorting.
     *
     * Query Tip Distributions runs with these defaults, which you can override:
     * - `cursorPaging.limit` is `50`
     *
     * For field support for filters and sorting, see
     * [Tips: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/supported-filters).
     *
     * When setting a date filter remember to use
     * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language),
     * [Sorting and Paging](https://dev.wix.com/api/rest/getting-started/sorting-and-paging),
     * and [Field Projection](https://dev.wix.com/api/rest/getting-started/field-projection).
     */
    (): TipDistributionsQueryBuilder;
}
declare function sumTipDistributionAmounts$1(httpClient: HttpClient): SumTipDistributionAmountsSignature;
interface SumTipDistributionAmountsSignature {
    /**
     * Sums tip distribution amounts, given the provided filtering.
     *
     * For field support for filters and sorting, see
     * [Tips: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/supported-filters).
     * @param - Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    (filter: Record<string, any> | null): Promise<SumTipDistributionAmountsResponse>;
}

declare const previewTip: MaybeContext<BuildRESTFunction<typeof previewTip$1> & typeof previewTip$1>;
declare const getTipByOrderId: MaybeContext<BuildRESTFunction<typeof getTipByOrderId$1> & typeof getTipByOrderId$1>;
declare const getTipByDraftOrderId: MaybeContext<BuildRESTFunction<typeof getTipByDraftOrderId$1> & typeof getTipByDraftOrderId$1>;
declare const getTipChoice: MaybeContext<BuildRESTFunction<typeof getTipChoice$1> & typeof getTipChoice$1>;
declare const updateTipChoice: MaybeContext<BuildRESTFunction<typeof updateTipChoice$1> & typeof updateTipChoice$1>;
declare const setTipOnOrder: MaybeContext<BuildRESTFunction<typeof setTipOnOrder$1> & typeof setTipOnOrder$1>;
declare const removeTipFromOrder: MaybeContext<BuildRESTFunction<typeof removeTipFromOrder$1> & typeof removeTipFromOrder$1>;
declare const addTipDistributionsToOrder: MaybeContext<BuildRESTFunction<typeof addTipDistributionsToOrder$1> & typeof addTipDistributionsToOrder$1>;
declare const queryTipDistributions: MaybeContext<BuildRESTFunction<typeof queryTipDistributions$1> & typeof queryTipDistributions$1>;
declare const sumTipDistributionAmounts: MaybeContext<BuildRESTFunction<typeof sumTipDistributionAmounts$1> & typeof sumTipDistributionAmounts$1>;

type index_d_ActionEvent = ActionEvent;
type index_d_AddTipDistributionsToOrderOptions = AddTipDistributionsToOrderOptions;
type index_d_AddTipDistributionsToOrderRequest = AddTipDistributionsToOrderRequest;
type index_d_AddTipDistributionsToOrderRequestIdentifierOneOf = AddTipDistributionsToOrderRequestIdentifierOneOf;
type index_d_AddTipDistributionsToOrderResponse = AddTipDistributionsToOrderResponse;
type index_d_AddTipDistributionsToOrderResponseNonNullableFields = AddTipDistributionsToOrderResponseNonNullableFields;
type index_d_ApplyTipDistributionsRequest = ApplyTipDistributionsRequest;
type index_d_ApplyTipDistributionsResponse = ApplyTipDistributionsResponse;
type index_d_CatalogReference = CatalogReference;
type index_d_CommonIdentificationData = CommonIdentificationData;
type index_d_CommonIdentificationDataIdOneOf = CommonIdentificationDataIdOneOf;
type index_d_CreateTipDistributionsRequest = CreateTipDistributionsRequest;
type index_d_CreateTipDistributionsResponse = CreateTipDistributionsResponse;
type index_d_CursorPaging = CursorPaging;
type index_d_CursorPagingMetadata = CursorPagingMetadata;
type index_d_CursorQuery = CursorQuery;
type index_d_CursorQueryPagingMethodOneOf = CursorQueryPagingMethodOneOf;
type index_d_Cursors = Cursors;
type index_d_DeleteTipDistributionsRequest = DeleteTipDistributionsRequest;
type index_d_DeleteTipDistributionsRequestDeleteByOneOf = DeleteTipDistributionsRequestDeleteByOneOf;
type index_d_DeleteTipDistributionsResponse = DeleteTipDistributionsResponse;
type index_d_DomainEvent = DomainEvent;
type index_d_DomainEventBodyOneOf = DomainEventBodyOneOf;
type index_d_EntityCreatedEvent = EntityCreatedEvent;
type index_d_EntityDeletedEvent = EntityDeletedEvent;
type index_d_EntityUpdatedEvent = EntityUpdatedEvent;
type index_d_GetTipByDraftOrderIdRequest = GetTipByDraftOrderIdRequest;
type index_d_GetTipByDraftOrderIdResponse = GetTipByDraftOrderIdResponse;
type index_d_GetTipByDraftOrderIdResponseNonNullableFields = GetTipByDraftOrderIdResponseNonNullableFields;
type index_d_GetTipByOrderIdRequest = GetTipByOrderIdRequest;
type index_d_GetTipByOrderIdResponse = GetTipByOrderIdResponse;
type index_d_GetTipByOrderIdResponseNonNullableFields = GetTipByOrderIdResponseNonNullableFields;
type index_d_GetTipChoiceRequest = GetTipChoiceRequest;
type index_d_GetTipChoiceResponse = GetTipChoiceResponse;
type index_d_GetTipChoiceResponseNonNullableFields = GetTipChoiceResponseNonNullableFields;
type index_d_IdentificationData = IdentificationData;
type index_d_IdentificationDataIdOneOf = IdentificationDataIdOneOf;
type index_d_IdentityType = IdentityType;
declare const index_d_IdentityType: typeof IdentityType;
type index_d_LineItemInfo = LineItemInfo;
type index_d_MessageEnvelope = MessageEnvelope;
type index_d_OrderInfo = OrderInfo;
type index_d_OrderInfoIdentifierOneOf = OrderInfoIdentifierOneOf;
type index_d_PreviewTipOptions = PreviewTipOptions;
type index_d_PreviewTipRequest = PreviewTipRequest;
type index_d_PreviewTipResponse = PreviewTipResponse;
type index_d_PreviewTipResponseNonNullableFields = PreviewTipResponseNonNullableFields;
type index_d_Price = Price;
type index_d_PublishTipDistributionsCreatedEventRequest = PublishTipDistributionsCreatedEventRequest;
type index_d_PublishTipDistributionsCreatedEventResponse = PublishTipDistributionsCreatedEventResponse;
type index_d_QueryBy = QueryBy;
declare const index_d_QueryBy: typeof QueryBy;
type index_d_QueryTipDistributionsRequest = QueryTipDistributionsRequest;
type index_d_QueryTipDistributionsResponse = QueryTipDistributionsResponse;
type index_d_QueryTipDistributionsResponseNonNullableFields = QueryTipDistributionsResponseNonNullableFields;
type index_d_RemoveTipFromOrderOptions = RemoveTipFromOrderOptions;
type index_d_RemoveTipFromOrderRequest = RemoveTipFromOrderRequest;
type index_d_RemoveTipFromOrderRequestIdentifierOneOf = RemoveTipFromOrderRequestIdentifierOneOf;
type index_d_RemoveTipFromOrderResponse = RemoveTipFromOrderResponse;
type index_d_RemoveTipFromOrderResponseNonNullableFields = RemoveTipFromOrderResponseNonNullableFields;
type index_d_RestoreInfo = RestoreInfo;
type index_d_SetTipOnOrderOptions = SetTipOnOrderOptions;
type index_d_SetTipOnOrderRequest = SetTipOnOrderRequest;
type index_d_SetTipOnOrderRequestIdentifierOneOf = SetTipOnOrderRequestIdentifierOneOf;
type index_d_SetTipOnOrderResponse = SetTipOnOrderResponse;
type index_d_SetTipOnOrderResponseNonNullableFields = SetTipOnOrderResponseNonNullableFields;
type index_d_SortOrder = SortOrder;
declare const index_d_SortOrder: typeof SortOrder;
type index_d_Sorting = Sorting;
type index_d_Staff = Staff;
type index_d_SumTipDistributionAmountsRequest = SumTipDistributionAmountsRequest;
type index_d_SumTipDistributionAmountsResponse = SumTipDistributionAmountsResponse;
type index_d_Tip = Tip;
type index_d_TipChoice = TipChoice;
type index_d_TipDistribution = TipDistribution;
type index_d_TipDistributionsCreated = TipDistributionsCreated;
type index_d_TipDistributionsQueryBuilder = TipDistributionsQueryBuilder;
type index_d_TipDistributionsQueryResult = TipDistributionsQueryResult;
type index_d_TipType = TipType;
declare const index_d_TipType: typeof TipType;
type index_d_Transaction = Transaction;
type index_d_UpdateTipChoiceOptions = UpdateTipChoiceOptions;
type index_d_UpdateTipChoiceRequest = UpdateTipChoiceRequest;
type index_d_UpdateTipChoiceResponse = UpdateTipChoiceResponse;
type index_d_UpdateTipChoiceResponseNonNullableFields = UpdateTipChoiceResponseNonNullableFields;
type index_d_WebhookIdentityType = WebhookIdentityType;
declare const index_d_WebhookIdentityType: typeof WebhookIdentityType;
declare const index_d_addTipDistributionsToOrder: typeof addTipDistributionsToOrder;
declare const index_d_getTipByDraftOrderId: typeof getTipByDraftOrderId;
declare const index_d_getTipByOrderId: typeof getTipByOrderId;
declare const index_d_getTipChoice: typeof getTipChoice;
declare const index_d_previewTip: typeof previewTip;
declare const index_d_queryTipDistributions: typeof queryTipDistributions;
declare const index_d_removeTipFromOrder: typeof removeTipFromOrder;
declare const index_d_setTipOnOrder: typeof setTipOnOrder;
declare const index_d_sumTipDistributionAmounts: typeof sumTipDistributionAmounts;
declare const index_d_updateTipChoice: typeof updateTipChoice;
declare namespace index_d {
  export { type index_d_ActionEvent as ActionEvent, type index_d_AddTipDistributionsToOrderOptions as AddTipDistributionsToOrderOptions, type index_d_AddTipDistributionsToOrderRequest as AddTipDistributionsToOrderRequest, type index_d_AddTipDistributionsToOrderRequestIdentifierOneOf as AddTipDistributionsToOrderRequestIdentifierOneOf, type index_d_AddTipDistributionsToOrderResponse as AddTipDistributionsToOrderResponse, type index_d_AddTipDistributionsToOrderResponseNonNullableFields as AddTipDistributionsToOrderResponseNonNullableFields, type index_d_ApplyTipDistributionsRequest as ApplyTipDistributionsRequest, type index_d_ApplyTipDistributionsResponse as ApplyTipDistributionsResponse, type index_d_CatalogReference as CatalogReference, type index_d_CommonIdentificationData as CommonIdentificationData, type index_d_CommonIdentificationDataIdOneOf as CommonIdentificationDataIdOneOf, type index_d_CreateTipDistributionsRequest as CreateTipDistributionsRequest, type index_d_CreateTipDistributionsResponse as CreateTipDistributionsResponse, type index_d_CursorPaging as CursorPaging, type index_d_CursorPagingMetadata as CursorPagingMetadata, type index_d_CursorQuery as CursorQuery, type index_d_CursorQueryPagingMethodOneOf as CursorQueryPagingMethodOneOf, type index_d_Cursors as Cursors, type index_d_DeleteTipDistributionsRequest as DeleteTipDistributionsRequest, type index_d_DeleteTipDistributionsRequestDeleteByOneOf as DeleteTipDistributionsRequestDeleteByOneOf, type index_d_DeleteTipDistributionsResponse as DeleteTipDistributionsResponse, type index_d_DomainEvent as DomainEvent, type index_d_DomainEventBodyOneOf as DomainEventBodyOneOf, type index_d_EntityCreatedEvent as EntityCreatedEvent, type index_d_EntityDeletedEvent as EntityDeletedEvent, type index_d_EntityUpdatedEvent as EntityUpdatedEvent, type index_d_GetTipByDraftOrderIdRequest as GetTipByDraftOrderIdRequest, type index_d_GetTipByDraftOrderIdResponse as GetTipByDraftOrderIdResponse, type index_d_GetTipByDraftOrderIdResponseNonNullableFields as GetTipByDraftOrderIdResponseNonNullableFields, type index_d_GetTipByOrderIdRequest as GetTipByOrderIdRequest, type index_d_GetTipByOrderIdResponse as GetTipByOrderIdResponse, type index_d_GetTipByOrderIdResponseNonNullableFields as GetTipByOrderIdResponseNonNullableFields, type index_d_GetTipChoiceRequest as GetTipChoiceRequest, type index_d_GetTipChoiceResponse as GetTipChoiceResponse, type index_d_GetTipChoiceResponseNonNullableFields as GetTipChoiceResponseNonNullableFields, type index_d_IdentificationData as IdentificationData, type index_d_IdentificationDataIdOneOf as IdentificationDataIdOneOf, index_d_IdentityType as IdentityType, type index_d_LineItemInfo as LineItemInfo, type index_d_MessageEnvelope as MessageEnvelope, type index_d_OrderInfo as OrderInfo, type index_d_OrderInfoIdentifierOneOf as OrderInfoIdentifierOneOf, type index_d_PreviewTipOptions as PreviewTipOptions, type index_d_PreviewTipRequest as PreviewTipRequest, type index_d_PreviewTipResponse as PreviewTipResponse, type index_d_PreviewTipResponseNonNullableFields as PreviewTipResponseNonNullableFields, type index_d_Price as Price, type index_d_PublishTipDistributionsCreatedEventRequest as PublishTipDistributionsCreatedEventRequest, type index_d_PublishTipDistributionsCreatedEventResponse as PublishTipDistributionsCreatedEventResponse, index_d_QueryBy as QueryBy, type index_d_QueryTipDistributionsRequest as QueryTipDistributionsRequest, type index_d_QueryTipDistributionsResponse as QueryTipDistributionsResponse, type index_d_QueryTipDistributionsResponseNonNullableFields as QueryTipDistributionsResponseNonNullableFields, type index_d_RemoveTipFromOrderOptions as RemoveTipFromOrderOptions, type index_d_RemoveTipFromOrderRequest as RemoveTipFromOrderRequest, type index_d_RemoveTipFromOrderRequestIdentifierOneOf as RemoveTipFromOrderRequestIdentifierOneOf, type index_d_RemoveTipFromOrderResponse as RemoveTipFromOrderResponse, type index_d_RemoveTipFromOrderResponseNonNullableFields as RemoveTipFromOrderResponseNonNullableFields, type index_d_RestoreInfo as RestoreInfo, type index_d_SetTipOnOrderOptions as SetTipOnOrderOptions, type index_d_SetTipOnOrderRequest as SetTipOnOrderRequest, type index_d_SetTipOnOrderRequestIdentifierOneOf as SetTipOnOrderRequestIdentifierOneOf, type index_d_SetTipOnOrderResponse as SetTipOnOrderResponse, type index_d_SetTipOnOrderResponseNonNullableFields as SetTipOnOrderResponseNonNullableFields, index_d_SortOrder as SortOrder, type index_d_Sorting as Sorting, type index_d_Staff as Staff, type index_d_SumTipDistributionAmountsRequest as SumTipDistributionAmountsRequest, type index_d_SumTipDistributionAmountsResponse as SumTipDistributionAmountsResponse, type index_d_Tip as Tip, type index_d_TipChoice as TipChoice, type index_d_TipDistribution as TipDistribution, type index_d_TipDistributionsCreated as TipDistributionsCreated, type index_d_TipDistributionsQueryBuilder as TipDistributionsQueryBuilder, type index_d_TipDistributionsQueryResult as TipDistributionsQueryResult, index_d_TipType as TipType, type index_d_Transaction as Transaction, type index_d_UpdateTipChoiceOptions as UpdateTipChoiceOptions, type index_d_UpdateTipChoiceRequest as UpdateTipChoiceRequest, type index_d_UpdateTipChoiceResponse as UpdateTipChoiceResponse, type index_d_UpdateTipChoiceResponseNonNullableFields as UpdateTipChoiceResponseNonNullableFields, index_d_WebhookIdentityType as WebhookIdentityType, index_d_addTipDistributionsToOrder as addTipDistributionsToOrder, index_d_getTipByDraftOrderId as getTipByDraftOrderId, index_d_getTipByOrderId as getTipByOrderId, index_d_getTipChoice as getTipChoice, index_d_previewTip as previewTip, index_d_queryTipDistributions as queryTipDistributions, index_d_removeTipFromOrder as removeTipFromOrder, index_d_setTipOnOrder as setTipOnOrder, index_d_sumTipDistributionAmounts as sumTipDistributionAmounts, index_d_updateTipChoice as updateTipChoice };
}

export { index_d$p as abandonedCheckouts, index_d$o as backInStockNotifications, index_d$n as backInStockSettings, index_d$m as cart, index_d$k as checkout, index_d$v as checkoutContent, index_d$j as checkoutSettings, index_d$i as checkoutTemplates, index_d$4 as currencies, index_d$l as currentCart, index_d$h as deliveryProfile, index_d$3 as deliverySolutions, index_d$t as discountRules, index_d$u as discountsCustomTrigger, index_d$g as draftOrders, index_d$e as giftVouchers, index_d$d as localDeliveryOptions, index_d$f as orderFulfillments, index_d$s as orderInvoices, index_d$b as orderPaymentRequests, index_d$a as orderTransactions, index_d$c as orders, index_d$9 as ordersSettings, index_d$8 as pickupLocations, index_d$r as recommendations, index_d$7 as shippingOptions, index_d$6 as shippoConfigurations, index_d$q as subscriptionContracts, index_d$2 as tipSettings, index_d$1 as tippableStaff, index_d as tips, index_d$5 as totalsCalculator };
