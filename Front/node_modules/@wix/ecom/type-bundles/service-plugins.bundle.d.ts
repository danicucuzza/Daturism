interface GiftCardProviderEntity {
    /** Dummy id for docs generation. */
    _id?: string | null;
}
interface GetBalanceRequest {
    /** Gift card code. */
    code?: string;
    /**
     * App ID of the Gift Card provider. Deprecated.
     * @deprecated App ID of the Gift Card provider. Deprecated.
     * @targetRemovalDate 2025-07-01
     */
    appInstanceId?: string;
    /** The physical location ID. Can be based on the Locations API or an external provider. */
    locationId?: string | null;
}
interface GetBalanceResponse {
    /** Current balance. */
    balance?: number;
    /** Currency code. */
    currencyCode?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface RedeemRequest {
    /** Gift card code. */
    code?: string;
    /**
     * App ID of the Gift Card provider. Deprecated.
     * @deprecated App ID of the Gift Card provider. Deprecated.
     * @targetRemovalDate 2025-07-01
     */
    appInstanceId?: string;
    /** Amount to redeem from the gift card. */
    amount?: number;
    /** Order ID the gift card transaction is applied to. Order details can be collected from eCommerce Search Orders. */
    orderId?: string;
    /** Currency code. */
    currencyCode?: string;
    /** Physical location ID. Can be based on the Locations API or an external provider. */
    locationId?: string | null;
}
interface RedeemResponse {
    /** Remaining balance on the Gift Card after the redemption. */
    remainingBalance?: number;
    /** Currency code. */
    currencyCode?: string;
    /** Transaction ID. */
    transactionId?: string;
}
interface VoidRequest {
    /**
     * App ID of the Gift Card provider. Deprecated.
     * @deprecated App ID of the Gift Card provider. Deprecated.
     * @targetRemovalDate 2025-07-01
     */
    appInstanceId?: string;
    /** Transaction ID to void. */
    transactionId?: string;
    /** Physical location ID. Can be based on the Locations API or an external provider. */
    locationId?: string | null;
}
interface VoidResponse {
    /** Remaining balance on the Gift Card after voiding the transaction. */
    remainingBalance?: number;
    /** Currency code. */
    currencyCode?: string;
}
interface GiftCardProviderConfig {
    /** Base URI where the endpoints are called. Wix eCommerce appends the endpoint path to the base URI. For example, to call the Get Balance endpoint at https://my-gift-cards.com/v1/balance, the base URI you provide here is https://my-gift-cards.com/. */
    deploymentUri?: string;
}
/**
 * this message is not directly used by any service,
 * it exists to describe the expected parameters that SHOULD be provided to invoked Velo methods as part of open-platform.
 * e.g. SPIs, event-handlers, etc..
 * NOTE: this context object MUST be provided as the last argument in each Velo method signature.
 *
 * Example:
 * ```typescript
 * export function wixStores_onOrderCanceled({ event, metadata }: OrderCanceledEvent) {
 * ...
 * }
 * ```
 */
interface Context$8 {
    /** A unique identifier of the request. You may print this ID to your logs to help with future debugging and easier correlation with Wix's logs. */
    requestId?: string | null;
    /** [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) 3-letter currency code. */
    currency?: string | null;
    /** An object that describes the identity that triggered this request. */
    identity?: IdentificationData$8;
    /** A string representing a language and region in the format of `"xx-XX"`. First 2 letters represent the language code according to ISO 639-1. This is followed by a dash "-", and then a by 2 capital letters representing the region according to ISO 3166-2. For example, `"en-US"`. */
    languages?: string[];
    /** The service provider app's instance ID. */
    instanceId?: string | null;
}
declare enum IdentityType$8 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface IdentificationData$8 extends IdentificationDataIdOneOf$8 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: IdentityType$8;
}
/** @oneof */
interface IdentificationDataIdOneOf$8 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}

type ServicePluginMethodInput = {
    request: any;
    metadata: any;
};
type ServicePluginContract = Record<string, (payload: ServicePluginMethodInput) => unknown | Promise<unknown>>;
type ServicePluginMethodMetadata = {
    name: string;
    primaryHttpMappingPath: string;
    transformations: {
        fromREST: (...args: unknown[]) => ServicePluginMethodInput;
        toREST: (...args: unknown[]) => unknown;
    };
};
type ServicePluginDefinition<Contract extends ServicePluginContract> = {
    __type: 'service-plugin-definition';
    componentType: string;
    methods: ServicePluginMethodMetadata[];
    __contract: Contract;
};
declare function ServicePluginDefinition<Contract extends ServicePluginContract>(componentType: string, methods: ServicePluginMethodMetadata[]): ServicePluginDefinition<Contract>;
type BuildServicePluginDefinition<T extends ServicePluginDefinition<any>> = (implementation: T['__contract']) => void;

declare global {
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- It has to be an `interface` so that it can be merged.
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}

declare global {
    interface ContextualClient {
    }
}

interface GetBalanceEnvelope {
    request: GetBalanceRequest;
    metadata: Context$8;
}
interface RedeemEnvelope {
    request: RedeemRequest;
    metadata: Context$8;
}
interface _voidEnvelope {
    request: VoidRequest;
    metadata: Context$8;
}
declare const provideHandlers$h: ServicePluginDefinition<{
    /**
     *
     * This method retrieves gift card data from your app.
     * Wix calls this method when a customer applies a gift card as a payment method at checkout. */
    getBalance(payload: GetBalanceEnvelope): GetBalanceResponse | Promise<GetBalanceResponse>;
    /**
     *
     * This method requests that a transaction be created by your app.
     * Wix calls this method when a customer completes a purchase that includes a gift card as a payment method at checkout. */
    redeem(payload: RedeemEnvelope): RedeemResponse | Promise<RedeemResponse>;
    /**
     *
     * This method requests that a gift card transaction be voided by your app.
     * Wix calls this method when a purchase fails after gift card redemption. */
    _void(payload: _voidEnvelope): VoidResponse | Promise<VoidResponse>;
}>;

declare function createServicePluginModule$8<T extends ServicePluginDefinition<any>>(servicePluginDefinition: T): BuildServicePluginDefinition<T> & T;

type _publicProvideHandlersType$8 = typeof provideHandlers$h;
declare const provideHandlers$g: ReturnType<typeof createServicePluginModule$8<_publicProvideHandlersType>>;

/**
 * Gift card not found
 */
declare class GiftCardNotFoundWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Gift card is disabled
 */
declare class GiftCardDisabledWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Gift card was expired
 */
declare class GiftCardExpiredWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Insufficient funds for redeem
 */
declare class InsufficientFundsWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Gift card already redeemed for the given order
 */
declare class AlreadyRedeemedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Currency code not supported
 */
declare class CurrencyNotSupportedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Transaction not found.
 */
declare class TransactionNotFoundWixError$1 extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Transaction already voided
 */
declare class AlreadyVoidedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}

type index_d$8_AlreadyRedeemedWixError = AlreadyRedeemedWixError;
declare const index_d$8_AlreadyRedeemedWixError: typeof AlreadyRedeemedWixError;
type index_d$8_AlreadyVoidedWixError = AlreadyVoidedWixError;
declare const index_d$8_AlreadyVoidedWixError: typeof AlreadyVoidedWixError;
type index_d$8_CurrencyNotSupportedWixError = CurrencyNotSupportedWixError;
declare const index_d$8_CurrencyNotSupportedWixError: typeof CurrencyNotSupportedWixError;
type index_d$8_GetBalanceRequest = GetBalanceRequest;
type index_d$8_GetBalanceResponse = GetBalanceResponse;
type index_d$8_GiftCardDisabledWixError = GiftCardDisabledWixError;
declare const index_d$8_GiftCardDisabledWixError: typeof GiftCardDisabledWixError;
type index_d$8_GiftCardExpiredWixError = GiftCardExpiredWixError;
declare const index_d$8_GiftCardExpiredWixError: typeof GiftCardExpiredWixError;
type index_d$8_GiftCardNotFoundWixError = GiftCardNotFoundWixError;
declare const index_d$8_GiftCardNotFoundWixError: typeof GiftCardNotFoundWixError;
type index_d$8_GiftCardProviderConfig = GiftCardProviderConfig;
type index_d$8_GiftCardProviderEntity = GiftCardProviderEntity;
type index_d$8_InsufficientFundsWixError = InsufficientFundsWixError;
declare const index_d$8_InsufficientFundsWixError: typeof InsufficientFundsWixError;
type index_d$8_RedeemRequest = RedeemRequest;
type index_d$8_RedeemResponse = RedeemResponse;
type index_d$8_VoidRequest = VoidRequest;
type index_d$8_VoidResponse = VoidResponse;
declare namespace index_d$8 {
  export { index_d$8_AlreadyRedeemedWixError as AlreadyRedeemedWixError, index_d$8_AlreadyVoidedWixError as AlreadyVoidedWixError, type Context$8 as Context, index_d$8_CurrencyNotSupportedWixError as CurrencyNotSupportedWixError, type index_d$8_GetBalanceRequest as GetBalanceRequest, type index_d$8_GetBalanceResponse as GetBalanceResponse, index_d$8_GiftCardDisabledWixError as GiftCardDisabledWixError, index_d$8_GiftCardExpiredWixError as GiftCardExpiredWixError, index_d$8_GiftCardNotFoundWixError as GiftCardNotFoundWixError, type index_d$8_GiftCardProviderConfig as GiftCardProviderConfig, type index_d$8_GiftCardProviderEntity as GiftCardProviderEntity, type IdentificationData$8 as IdentificationData, type IdentificationDataIdOneOf$8 as IdentificationDataIdOneOf, IdentityType$8 as IdentityType, index_d$8_InsufficientFundsWixError as InsufficientFundsWixError, type index_d$8_RedeemRequest as RedeemRequest, type index_d$8_RedeemResponse as RedeemResponse, TransactionNotFoundWixError$1 as TransactionNotFoundWixError, type index_d$8_VoidRequest as VoidRequest, type index_d$8_VoidResponse as VoidResponse, type _publicProvideHandlersType$8 as _publicProvideHandlersType, provideHandlers$g as provideHandlers, provideHandlers$h as publicProvideHandlers };
}

interface ListEligibleMembershipsRequest {
    /** The line items for which to list eligible memberships. */
    lineItems: LineItem$5[];
    /**
     * Member ID.
     *
     * Do not retrieve this from the request context. In some cases the caller is not a member, but a user who is using the membership on behalf of a member.
     */
    memberId: string;
    /**
     * The selected payment memberships and which line items they apply to.
     *
     * When not provided, your implementation is expected to return the default selection.
     * When provided, your implementation is expected to validate and return it.
     */
    selectedMemberships?: SelectedMemberships$1;
}
interface LineItem$5 {
    /** Line item ID. */
    _id?: string;
    /** Catalog and item reference info. */
    catalogReference?: CatalogReference$7;
    /** Properties of the service. When relevant, contains information such as date and number of participants. */
    serviceProperties?: ServiceProperties$1;
    /**
     * Root catalog item ID.
     *
     * The value will usually be the same as `catalogReference.catalogItemId`.
     * In cases when these are not the same, this field will return the actual ID of the item in the catalog.
     * For example, for Wix bookings, the value of `catalogReference.catalogItemId` is the booking ID, but `rootCatalogItemId` is set to the service ID.
     */
    rootCatalogItemId?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$7 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ServiceProperties$1 {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface SelectedMemberships$1 {
    /** Selected memberships. */
    memberships?: SelectedMembership$1[];
}
interface SelectedMembership$1 {
    /** Membership ID. */
    _id?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface ListEligibleMembershipsResponse {
    /** List of memberships that are eligible for the given member and line items. */
    eligibleMemberships?: Membership$1[];
    /** List of memberships owned by the member, but cannot be used due to the reason provided. */
    invalidMemberships?: InvalidMembership$1[];
    /** List of selected memberships and which line items they apply to. */
    selectedMemberships?: SelectedMembership$1[];
}
interface Membership$1 {
    /** Membership ID. */
    _id?: string;
    /** Membership name. */
    name?: MembershipName$1;
    /** Line item IDs this membership applies to. */
    lineItemIds?: string[];
    /** Total and remaining membership credits. */
    credits?: MembershipPaymentCredits$1;
    /** Membership expiration date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName$1 {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface MembershipPaymentCredits$1 {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership$1 {
    /** The membership that is invalid and cannot be used. */
    membership?: Membership$1;
    /** Reason why this membership is invalid. */
    reason?: string;
}
interface MembershipInvalidSelectionErrors {
    /** Error details for invalid memberships. */
    membershipInvalidSelectionErrors?: MembershipInvalidSelectionError[];
}
interface MembershipInvalidSelectionError extends MembershipInvalidSelectionErrorErrorDataOneOf {
    /** Line item IDs that were missing. */
    lineItemNotFoundInfo?: LineItemNotFoundInfo;
    /** Error details for line items that cannot be used with this membership. */
    membershipCannotBeUsedForLineItemsInfo?: MembershipCannotBeUsedForLineItemsInfo;
    /** Reason why this membership selection is invalid. */
    membershipSelectionInvalidReason?: string | null;
    /** Membership ID. */
    membershipId?: string;
    /**
     * Error type.
     *
     * + MEMBERSHIP_NOT_FOUND: Membership not found.
     * + LINE_ITEM_NOT_FOUND: The selection points to a line item ID that wasn't provided.
     * + MEMBERSHIP_CANNOT_BE_USED_FOR_LINE_ITEMS: The membership cannot be used for the specific line items provided.
     * + MEMBERSHIP_SELECTION_INVALID: The membership can be used for each individual line item, but combining all of them is invalid.
     */
    errorType?: MembershipErrorType;
}
/** @oneof */
interface MembershipInvalidSelectionErrorErrorDataOneOf {
    /** Line item IDs that were missing. */
    lineItemNotFoundInfo?: LineItemNotFoundInfo;
    /** Error details for line items that cannot be used with this membership. */
    membershipCannotBeUsedForLineItemsInfo?: MembershipCannotBeUsedForLineItemsInfo;
    /** Reason why this membership selection is invalid. */
    membershipSelectionInvalidReason?: string | null;
}
declare enum MembershipErrorType {
    UNKNOWN = "UNKNOWN",
    MEMBERSHIP_NOT_FOUND = "MEMBERSHIP_NOT_FOUND",
    /** which line item ids */
    LINE_ITEM_NOT_FOUND = "LINE_ITEM_NOT_FOUND",
    /** which ids and why */
    MEMBERSHIP_CANNOT_BE_USED_FOR_LINE_ITEMS = "MEMBERSHIP_CANNOT_BE_USED_FOR_LINE_ITEMS",
    /** reason */
    MEMBERSHIP_SELECTION_INVALID = "MEMBERSHIP_SELECTION_INVALID"
}
interface LineItemNotFoundInfo {
    /** Line item IDs that were missing. */
    lineItemIds?: string[];
}
interface MembershipCannotBeUsedForLineItemsInfo {
    /** Line items that cannot be used with this membership, and the reason why. */
    lineItems?: MembershipCannotBeUsedForLineItemInfo[];
}
interface MembershipCannotBeUsedForLineItemInfo {
    /** Line item ID. */
    lineItemId?: string;
    /** Reason why this line item cannot be used with this membership. */
    reason?: string;
}
interface ChargeMembershipRequest {
    /**
     * Member ID.
     *
     * Do not retrieve this from the request context. In some cases the caller is not a member, but a user who is using the membership on behalf of a member.
     */
    memberId: string;
    /** Membership ID, as returned from the List Eligible Memberships call. */
    membershipId: string;
    /**
     * Idempotency key to avoid duplicate charge.
     * The value will usually would be the same as `membershipId` + `orderId` + `rootCatalogItemId`.
     */
    idempotencyKey: string;
    /**
     * Service properties.
     *
     * When relevant, this contains information such as date and number of participants.
     */
    serviceProperties?: ServiceProperties$1;
    /** Catalog and item reference info. */
    catalogReference: CatalogReference$7;
    /**
     * Root catalog item ID.
     *
     * The value will usually be the same as `catalogReference.catalogItemId`.
     * In cases when these are not the same, this field will return the actual ID of the item in the catalog.
     * For example, for Wix bookings, the value of `catalogReference.catalogItemId` is the booking ID, but `rootCatalogItemId` is set to the service ID.
     */
    rootCatalogItemId?: string | null;
    /** Additional data about this charge. */
    additionalData?: Record<string, any> | null;
}
interface ChargeMembershipResponse {
    /**
     * The transaction ID for this charge.
     *
     * Use this ID to void the charge.
     */
    transactionId?: string;
}
interface MembershipCannotBeChargedError extends MembershipCannotBeChargedErrorErrorDataOneOf {
    /** Membership is out of credits. For example, 5 are required, but only 4 remain. */
    outOfCredits?: OutOfCredits;
    /** Membership has not become active yet. */
    notStartedYet?: NotStartedYet;
    /** Membership has expired or ended. */
    ended?: Ended;
    /** Error type. */
    errorType?: MembershipCannotBeChargedType;
}
/** @oneof */
interface MembershipCannotBeChargedErrorErrorDataOneOf {
    /** Membership is out of credits. For example, 5 are required, but only 4 remain. */
    outOfCredits?: OutOfCredits;
    /** Membership has not become active yet. */
    notStartedYet?: NotStartedYet;
    /** Membership has expired or ended. */
    ended?: Ended;
}
declare enum MembershipCannotBeChargedType {
    OUT_OF_CREDITS = "OUT_OF_CREDITS",
    NOT_STARTED_YET = "NOT_STARTED_YET",
    ENDED = "ENDED",
    NOT_APPLICABLE_FOR_MULTIPLE_PARTICIPANTS = "NOT_APPLICABLE_FOR_MULTIPLE_PARTICIPANTS"
}
interface OutOfCredits {
    /** Required amount of credits. */
    required?: number;
    /** Remaining amount of credits. */
    remaining?: number;
}
interface NotStartedYet {
    /** Start date of the membership. */
    membershipStartDate?: Date | null;
}
interface Ended {
    /** End date of the membership. */
    endDate?: Date | null;
}
interface MembershipAlreadyChargedError {
    /** ID of the transaction that was already used for membership charge. */
    transactionId?: string;
}
interface GetMembershipVoidabilityRequest {
    /** Transaction ID to check if it can be voided. */
    transactionId: string;
}
interface GetMembershipVoidabilityResponse {
    /** Whether the membership charge can be voided. */
    voidable?: boolean;
    /** Reason why the membership charge cannot be voided. */
    reason?: string | null;
}
interface VoidMembershipChargeRequest {
    /** Transaction ID to void. */
    transactionId: string;
}
interface VoidMembershipChargeResponse {
}
interface MembershipsSPIConfig {
    /**
     * The base URI where the endpoints are called. Wix eCommerce appends the endpoint path to the base URI.
     * For example, to call the Charge Membership endpoint at https://my-memberships.com/v1/charge-membership, the base URI you provide here is https://my-memberships.com/.
     */
    deploymentUri?: string;
    /** The app IDs of the catalogs your app supports. */
    catalogAppDefIds?: string[];
}
/**
 * this message is not directly used by any service,
 * it exists to describe the expected parameters that SHOULD be provided to invoked Velo methods as part of open-platform.
 * e.g. SPIs, event-handlers, etc..
 * NOTE: this context object MUST be provided as the last argument in each Velo method signature.
 *
 * Example:
 * ```typescript
 * export function wixStores_onOrderCanceled({ event, metadata }: OrderCanceledEvent) {
 * ...
 * }
 * ```
 */
interface Context$7 {
    /** A unique identifier of the request. You may print this ID to your logs to help with future debugging and easier correlation with Wix's logs. */
    requestId?: string | null;
    /** [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) 3-letter currency code. */
    currency?: string | null;
    /** An object that describes the identity that triggered this request. */
    identity?: IdentificationData$7;
    /** A string representing a language and region in the format of `"xx-XX"`. First 2 letters represent the language code according to ISO 639-1. This is followed by a dash "-", and then a by 2 capital letters representing the region according to ISO 3166-2. For example, `"en-US"`. */
    languages?: string[];
    /** The service provider app's instance ID. */
    instanceId?: string | null;
}
declare enum IdentityType$7 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface IdentificationData$7 extends IdentificationDataIdOneOf$7 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: IdentityType$7;
}
/** @oneof */
interface IdentificationDataIdOneOf$7 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}

interface ListEligibleMembershipsEnvelope {
    request: ListEligibleMembershipsRequest;
    metadata: Context$7;
}
interface ChargeMembershipEnvelope {
    request: ChargeMembershipRequest;
    metadata: Context$7;
}
interface GetMembershipVoidabilityEnvelope {
    request: GetMembershipVoidabilityRequest;
    metadata: Context$7;
}
interface VoidMembershipChargeEnvelope {
    request: VoidMembershipChargeRequest;
    metadata: Context$7;
}
declare const provideHandlers$f: ServicePluginDefinition<{
    /**
     *
     * This method retrieves eligible memberships from your app. */
    listEligibleMemberships(payload: ListEligibleMembershipsEnvelope): ListEligibleMembershipsResponse | Promise<ListEligibleMembershipsResponse>;
    /**
     *
     * This method requests that a membership be charged by your app. */
    chargeMembership(payload: ChargeMembershipEnvelope): ChargeMembershipResponse | Promise<ChargeMembershipResponse>;
    /**
     *
     * This method retrieves from your app whether a membership can be voided. */
    getMembershipVoidability(payload: GetMembershipVoidabilityEnvelope): GetMembershipVoidabilityResponse | Promise<GetMembershipVoidabilityResponse>;
    /**
     *
     * This method requests that a membership charge be voided by your app. */
    voidMembershipCharge(payload: VoidMembershipChargeEnvelope): VoidMembershipChargeResponse | Promise<VoidMembershipChargeResponse>;
}>;

declare function createServicePluginModule$7<T extends ServicePluginDefinition<any>>(servicePluginDefinition: T): BuildServicePluginDefinition<T> & T;

type _publicProvideHandlersType$7 = typeof provideHandlers$f;
declare const provideHandlers$e: ReturnType<typeof createServicePluginModule$7<_publicProvideHandlersType>>;

/**
 * The provided membership selection is invalid
 */
declare class InvalidSelectionWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorSchemaName: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    data: MembershipInvalidSelectionErrors;
    constructor(data: MembershipInvalidSelectionErrors);
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * The membership was found, but does not apply for the provided item
 */
declare class MembershipDoesNotApplyToItemWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * The membership was found, applied to the provided item but cannot be charged. For example because a limited membership doesn't have enough credits
 */
declare class MembershipCannotBeUsedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorSchemaName: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    data: MembershipCannotBeChargedError;
    constructor(data: MembershipCannotBeChargedError);
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * This charge was already done, per the idempotency key of membershipId + orderId + rootCatalogItemId
 */
declare class MembershipAlreadyChargedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorSchemaName: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    data: MembershipAlreadyChargedError;
    constructor(data: MembershipAlreadyChargedError);
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Transaction not found
 */
declare class TransactionNotFoundWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Transaction exists but cannot be voided
 */
declare class TransactionCannotBeVoidedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Transaction was already voided
 */
declare class TransactionAlreadyVoidedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}

type index_d$7_ChargeMembershipRequest = ChargeMembershipRequest;
type index_d$7_ChargeMembershipResponse = ChargeMembershipResponse;
type index_d$7_Ended = Ended;
type index_d$7_GetMembershipVoidabilityRequest = GetMembershipVoidabilityRequest;
type index_d$7_GetMembershipVoidabilityResponse = GetMembershipVoidabilityResponse;
type index_d$7_InvalidSelectionWixError = InvalidSelectionWixError;
declare const index_d$7_InvalidSelectionWixError: typeof InvalidSelectionWixError;
type index_d$7_LineItemNotFoundInfo = LineItemNotFoundInfo;
type index_d$7_ListEligibleMembershipsRequest = ListEligibleMembershipsRequest;
type index_d$7_ListEligibleMembershipsResponse = ListEligibleMembershipsResponse;
type index_d$7_MembershipAlreadyChargedError = MembershipAlreadyChargedError;
type index_d$7_MembershipAlreadyChargedWixError = MembershipAlreadyChargedWixError;
declare const index_d$7_MembershipAlreadyChargedWixError: typeof MembershipAlreadyChargedWixError;
type index_d$7_MembershipCannotBeChargedError = MembershipCannotBeChargedError;
type index_d$7_MembershipCannotBeChargedErrorErrorDataOneOf = MembershipCannotBeChargedErrorErrorDataOneOf;
type index_d$7_MembershipCannotBeChargedType = MembershipCannotBeChargedType;
declare const index_d$7_MembershipCannotBeChargedType: typeof MembershipCannotBeChargedType;
type index_d$7_MembershipCannotBeUsedForLineItemInfo = MembershipCannotBeUsedForLineItemInfo;
type index_d$7_MembershipCannotBeUsedForLineItemsInfo = MembershipCannotBeUsedForLineItemsInfo;
type index_d$7_MembershipCannotBeUsedWixError = MembershipCannotBeUsedWixError;
declare const index_d$7_MembershipCannotBeUsedWixError: typeof MembershipCannotBeUsedWixError;
type index_d$7_MembershipDoesNotApplyToItemWixError = MembershipDoesNotApplyToItemWixError;
declare const index_d$7_MembershipDoesNotApplyToItemWixError: typeof MembershipDoesNotApplyToItemWixError;
type index_d$7_MembershipErrorType = MembershipErrorType;
declare const index_d$7_MembershipErrorType: typeof MembershipErrorType;
type index_d$7_MembershipInvalidSelectionError = MembershipInvalidSelectionError;
type index_d$7_MembershipInvalidSelectionErrorErrorDataOneOf = MembershipInvalidSelectionErrorErrorDataOneOf;
type index_d$7_MembershipInvalidSelectionErrors = MembershipInvalidSelectionErrors;
type index_d$7_MembershipsSPIConfig = MembershipsSPIConfig;
type index_d$7_NotStartedYet = NotStartedYet;
type index_d$7_OutOfCredits = OutOfCredits;
type index_d$7_TransactionAlreadyVoidedWixError = TransactionAlreadyVoidedWixError;
declare const index_d$7_TransactionAlreadyVoidedWixError: typeof TransactionAlreadyVoidedWixError;
type index_d$7_TransactionCannotBeVoidedWixError = TransactionCannotBeVoidedWixError;
declare const index_d$7_TransactionCannotBeVoidedWixError: typeof TransactionCannotBeVoidedWixError;
type index_d$7_TransactionNotFoundWixError = TransactionNotFoundWixError;
declare const index_d$7_TransactionNotFoundWixError: typeof TransactionNotFoundWixError;
type index_d$7_VoidMembershipChargeRequest = VoidMembershipChargeRequest;
type index_d$7_VoidMembershipChargeResponse = VoidMembershipChargeResponse;
declare namespace index_d$7 {
  export { type CatalogReference$7 as CatalogReference, type index_d$7_ChargeMembershipRequest as ChargeMembershipRequest, type index_d$7_ChargeMembershipResponse as ChargeMembershipResponse, type Context$7 as Context, type index_d$7_Ended as Ended, type index_d$7_GetMembershipVoidabilityRequest as GetMembershipVoidabilityRequest, type index_d$7_GetMembershipVoidabilityResponse as GetMembershipVoidabilityResponse, type IdentificationData$7 as IdentificationData, type IdentificationDataIdOneOf$7 as IdentificationDataIdOneOf, IdentityType$7 as IdentityType, type InvalidMembership$1 as InvalidMembership, index_d$7_InvalidSelectionWixError as InvalidSelectionWixError, type LineItem$5 as LineItem, type index_d$7_LineItemNotFoundInfo as LineItemNotFoundInfo, type index_d$7_ListEligibleMembershipsRequest as ListEligibleMembershipsRequest, type index_d$7_ListEligibleMembershipsResponse as ListEligibleMembershipsResponse, type Membership$1 as Membership, type index_d$7_MembershipAlreadyChargedError as MembershipAlreadyChargedError, index_d$7_MembershipAlreadyChargedWixError as MembershipAlreadyChargedWixError, type index_d$7_MembershipCannotBeChargedError as MembershipCannotBeChargedError, type index_d$7_MembershipCannotBeChargedErrorErrorDataOneOf as MembershipCannotBeChargedErrorErrorDataOneOf, index_d$7_MembershipCannotBeChargedType as MembershipCannotBeChargedType, type index_d$7_MembershipCannotBeUsedForLineItemInfo as MembershipCannotBeUsedForLineItemInfo, type index_d$7_MembershipCannotBeUsedForLineItemsInfo as MembershipCannotBeUsedForLineItemsInfo, index_d$7_MembershipCannotBeUsedWixError as MembershipCannotBeUsedWixError, index_d$7_MembershipDoesNotApplyToItemWixError as MembershipDoesNotApplyToItemWixError, index_d$7_MembershipErrorType as MembershipErrorType, type index_d$7_MembershipInvalidSelectionError as MembershipInvalidSelectionError, type index_d$7_MembershipInvalidSelectionErrorErrorDataOneOf as MembershipInvalidSelectionErrorErrorDataOneOf, type index_d$7_MembershipInvalidSelectionErrors as MembershipInvalidSelectionErrors, type MembershipName$1 as MembershipName, type MembershipPaymentCredits$1 as MembershipPaymentCredits, type index_d$7_MembershipsSPIConfig as MembershipsSPIConfig, type index_d$7_NotStartedYet as NotStartedYet, type index_d$7_OutOfCredits as OutOfCredits, type SelectedMembership$1 as SelectedMembership, type SelectedMemberships$1 as SelectedMemberships, type ServiceProperties$1 as ServiceProperties, index_d$7_TransactionAlreadyVoidedWixError as TransactionAlreadyVoidedWixError, index_d$7_TransactionCannotBeVoidedWixError as TransactionCannotBeVoidedWixError, index_d$7_TransactionNotFoundWixError as TransactionNotFoundWixError, type index_d$7_VoidMembershipChargeRequest as VoidMembershipChargeRequest, type index_d$7_VoidMembershipChargeResponse as VoidMembershipChargeResponse, type _publicProvideHandlersType$7 as _publicProvideHandlersType, provideHandlers$e as provideHandlers, provideHandlers$f as publicProvideHandlers };
}

/** additional information can be passed via aspects, for example GEO */
interface GetRecommendationsRequest {
    /** The set of items used by algorithms with the `RELATED_ITEMS` `algorithmType` to determine related item recommendations. */
    items?: CatalogReference$6[];
    /** List of algorithms used to find recommended items. Items will be returned in a separate object for each algorithm */
    algorithmIds?: string[];
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$6 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface GetRecommendationsResponse {
    /**
     * Related items returned by each algorithm.
     *
     * Each object in the array contains an `algorithmId` and a list of the item recommendations provided by that algorithm.
     */
    recommendationPerAlgorithm?: RecommendationForAlgorithm[];
}
interface RecommendationForAlgorithm {
    /** Id of the algorithm that provided the recommendation. */
    algorithmId?: string;
    /** Item recommendations provided by the algorithm. Depending on the algorithm, these recommendations may be influenced by the items provided in the request. */
    recommendedItems?: CatalogReference$6[];
}
interface RecommendationAlgorithmNotSupported {
    /** Not supported algorithms. */
    unsupportedAlgorithms?: string[];
}
interface ItemAppIdNotSupportedError {
    /** Items with not supported catalogs. */
    items?: CatalogReference$6[];
}
interface RecommendationsProviderConfig {
    /** URI where the application implementing the SPI is deployed. */
    deploymentUri?: string;
    /** App IDs of catalogs for which recommended items can be found. */
    catalogAppIds?: string[];
    /** The algorithms that this application can use to calculate item recommendations. */
    supportedAlgorithms?: AlgorithmConfig[];
}
interface AlgorithmConfig {
    /** Algorithm name. This value is not translatable. */
    name?: string;
    /** Algorithm description. This describes how the algorithm works and if it has any limitations regarding site content, number of items in the catalog, site traffic, and so on. This value is not translatable. */
    description?: string;
    /** A supplemental `description`. It can be used to help break up and organize information. You can, for example, display this information as a tooltip or as an additional section that is collapsed by default. */
    additionalInfo?: string | null;
    /**
     * Algorithms may have the following types:
     * * `RELATED_ITEMS` - This type of algorithm provides recommendations based on 1 or more other provided items. For example, when an item is added to a cart, the algorithm can suggest other items frequently bought together with that item.
     * * `GLOBAL` - This type of algorithm provides general recommendations based on site or project statistics. For example, bestsellers or new arrivals.
     */
    algorithmType?: AlgorithmType;
    /** Algorithm ID. This must be unique for a specific app but does not have to be unique across all apps on the site or in the project. */
    algorithmId?: string;
}
declare enum AlgorithmType {
    UNSPECIFIED = "UNSPECIFIED",
    RELATED_ITEMS = "RELATED_ITEMS",
    GLOBAL = "GLOBAL"
}
/**
 * this message is not directly used by any service,
 * it exists to describe the expected parameters that SHOULD be provided to invoked Velo methods as part of open-platform.
 * e.g. SPIs, event-handlers, etc..
 * NOTE: this context object MUST be provided as the last argument in each Velo method signature.
 *
 * Example:
 * ```typescript
 * export function wixStores_onOrderCanceled({ event, metadata }: OrderCanceledEvent) {
 * ...
 * }
 * ```
 */
interface Context$6 {
    /** A unique identifier of the request. You may print this ID to your logs to help with future debugging and easier correlation with Wix's logs. */
    requestId?: string | null;
    /** [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) 3-letter currency code. */
    currency?: string | null;
    /** An object that describes the identity that triggered this request. */
    identity?: IdentificationData$6;
    /** A string representing a language and region in the format of `"xx-XX"`. First 2 letters represent the language code according to ISO 639-1. This is followed by a dash "-", and then a by 2 capital letters representing the region according to ISO 3166-2. For example, `"en-US"`. */
    languages?: string[];
    /** The service provider app's instance ID. */
    instanceId?: string | null;
}
declare enum IdentityType$6 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface IdentificationData$6 extends IdentificationDataIdOneOf$6 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: IdentityType$6;
}
/** @oneof */
interface IdentificationDataIdOneOf$6 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}

interface GetRecommendationsEnvelope {
    request: GetRecommendationsRequest;
    metadata: Context$6;
}
declare const provideHandlers$d: ServicePluginDefinition<{
    /**
     *
     * This method retrieves an array containing the lists of recommended items returned by each algorithm. Items must be selected from catalogs in Wix apps installed on the site.
     *
     * If a requested recommendation algorithm's type is `RELATED_ITEMS` then the `items` field is included in the request. The response should contain items related to those submitted.
     * How the related items are selected depends on the recommendation algorithms used. For example, items can be in the same category, or can be frequently bought or watched together. */
    getRecommendations(payload: GetRecommendationsEnvelope): GetRecommendationsResponse | Promise<GetRecommendationsResponse>;
}>;

declare function createServicePluginModule$6<T extends ServicePluginDefinition<any>>(servicePluginDefinition: T): BuildServicePluginDefinition<T> & T;

type _publicProvideHandlersType$6 = typeof provideHandlers$d;
declare const provideHandlers$c: ReturnType<typeof createServicePluginModule$6<_publicProvideHandlersType>>;

declare class AlgorithmNotSupportedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorSchemaName: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    data: RecommendationAlgorithmNotSupported;
    constructor(data: RecommendationAlgorithmNotSupported);
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
declare class ItemAppIdNotSupportedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorSchemaName: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    data: ItemAppIdNotSupportedError;
    constructor(data: ItemAppIdNotSupportedError);
    /** @hidden */
    static readonly __type = "wix_spi_error";
}

type index_d$6_AlgorithmConfig = AlgorithmConfig;
type index_d$6_AlgorithmNotSupportedWixError = AlgorithmNotSupportedWixError;
declare const index_d$6_AlgorithmNotSupportedWixError: typeof AlgorithmNotSupportedWixError;
type index_d$6_AlgorithmType = AlgorithmType;
declare const index_d$6_AlgorithmType: typeof AlgorithmType;
type index_d$6_GetRecommendationsRequest = GetRecommendationsRequest;
type index_d$6_GetRecommendationsResponse = GetRecommendationsResponse;
type index_d$6_ItemAppIdNotSupportedError = ItemAppIdNotSupportedError;
type index_d$6_ItemAppIdNotSupportedWixError = ItemAppIdNotSupportedWixError;
declare const index_d$6_ItemAppIdNotSupportedWixError: typeof ItemAppIdNotSupportedWixError;
type index_d$6_RecommendationAlgorithmNotSupported = RecommendationAlgorithmNotSupported;
type index_d$6_RecommendationForAlgorithm = RecommendationForAlgorithm;
type index_d$6_RecommendationsProviderConfig = RecommendationsProviderConfig;
declare namespace index_d$6 {
  export { type index_d$6_AlgorithmConfig as AlgorithmConfig, index_d$6_AlgorithmNotSupportedWixError as AlgorithmNotSupportedWixError, index_d$6_AlgorithmType as AlgorithmType, type CatalogReference$6 as CatalogReference, type Context$6 as Context, type index_d$6_GetRecommendationsRequest as GetRecommendationsRequest, type index_d$6_GetRecommendationsResponse as GetRecommendationsResponse, type IdentificationData$6 as IdentificationData, type IdentificationDataIdOneOf$6 as IdentificationDataIdOneOf, IdentityType$6 as IdentityType, type index_d$6_ItemAppIdNotSupportedError as ItemAppIdNotSupportedError, index_d$6_ItemAppIdNotSupportedWixError as ItemAppIdNotSupportedWixError, type index_d$6_RecommendationAlgorithmNotSupported as RecommendationAlgorithmNotSupported, type index_d$6_RecommendationForAlgorithm as RecommendationForAlgorithm, type index_d$6_RecommendationsProviderConfig as RecommendationsProviderConfig, type _publicProvideHandlersType$6 as _publicProvideHandlersType, provideHandlers$c as provideHandlers, provideHandlers$d as publicProvideHandlers };
}

interface GetShippingRatesRequest {
    /** The line items to be shipped. */
    lineItems?: ProductItem[];
    /** Address to ship to. */
    shippingDestination?: Address$3;
    /** Address item is shipped from. This is the site owner's business address. */
    shippingOrigin?: Address$3;
    /** Buyer's contact details. */
    buyerContactDetails?: FullAddressContactDetails$3;
    /**
     * Weight measurement unit used for all items in the shipment.
     *
     * Supported values:
     * + `"KG"`: kilograms
     * + `"LB"`: pounds
     */
    weightUnit?: WeightUnit$2;
    /**
     * Whether tax is included in the items' prices.
     * @deprecated Whether tax is included in the items' prices.
     * @targetRemovalDate 2025-05-01
     */
    taxIncludedInPrices?: boolean;
    /** List of delivery preferences, for example preferred delivery code (`shippingOptionId`). */
    deliveryPreferences?: DeliveryPreferences;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    /**
     * Reference to an external resource ID. Used to link the purchase flow to a specific entity in an external system.
     * Used for integration and tracking across different platforms.
     */
    externalReferences?: ExternalReference$2[];
}
interface ProductItem {
    /** Item name. */
    name?: string;
    /** The number of items ordered. */
    quantity?: number;
    /** Reference to the item's origin catalog. */
    catalogReference?: CatalogReference$5;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$3;
    /** Price of a single item after discounts. */
    price?: string;
    /** Total line item price before discounts. */
    totalPriceBeforeDiscount?: string | null;
    /** Price of a single item before discounts. */
    priceBeforeDiscount?: string | null;
    /** Total line item price after discounts. This is equal to `price` multiplied by `quantity`. */
    totalPrice?: string | null;
    /** item delivery destination index in the shipping addresses list */
    deliveryDestinationIndex?: number | null;
    /** where the item is delivered from index in the from addresses list */
    deliveryOriginIndex?: number | null;
    /** whether tax is included in line item price */
    taxIncludedInPrice?: boolean | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$5 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface PhysicalProperties$3 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
/** Physical address */
interface Address$3 extends AddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress$3;
    /** Main address line, usually street and number as free text. */
    addressLine1?: string | null;
    /** Country code. */
    country?: string | null;
    /** Subdivision shorthand. Usually, a short code (2 or 3 letters) that represents a state, region, prefecture, or province. e.g. NY */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    /** Free text providing more detailed address info. Usually contains Apt, Suite, and Floor. */
    addressLine2?: string | null;
}
/** @oneof */
interface AddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress$3;
    /** Main address line, usually street and number as free text. */
    addressLine?: string | null;
}
interface StreetAddress$3 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation$3 {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
interface Subdivision {
    /** Short subdivision code. */
    code?: string;
    /** Subdivision full name. */
    name?: string;
}
declare enum SubdivisionType {
    UNKNOWN_SUBDIVISION_TYPE = "UNKNOWN_SUBDIVISION_TYPE",
    /** State */
    ADMINISTRATIVE_AREA_LEVEL_1 = "ADMINISTRATIVE_AREA_LEVEL_1",
    /** County */
    ADMINISTRATIVE_AREA_LEVEL_2 = "ADMINISTRATIVE_AREA_LEVEL_2",
    /** City/town */
    ADMINISTRATIVE_AREA_LEVEL_3 = "ADMINISTRATIVE_AREA_LEVEL_3",
    /** Neighborhood/quarter */
    ADMINISTRATIVE_AREA_LEVEL_4 = "ADMINISTRATIVE_AREA_LEVEL_4",
    /** Street/block */
    ADMINISTRATIVE_AREA_LEVEL_5 = "ADMINISTRATIVE_AREA_LEVEL_5",
    /** ADMINISTRATIVE_AREA_LEVEL_0. Indicates the national political entity, and is typically the highest order type returned by the Geocoder. */
    COUNTRY = "COUNTRY"
}
/** Subdivision Concordance values */
interface StandardDetails {
    /** subdivision iso-3166-2 code according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). e.g. US-NY, GB-SCT, NO-30 */
    iso31662?: string | null;
}
/** Full contact details for an address */
interface FullAddressContactDetails$3 {
    /** Contact's first name. */
    firstName?: string | null;
    /** Contact's last name. */
    lastName?: string | null;
    /** Contact's phone number. */
    phone?: string | null;
    /** Contact's company name. */
    company?: string | null;
    /** Email associated with the address. */
    email?: string | null;
    /** Tax info. Currently usable only in Brazil. */
    vatId?: VatId$3;
}
interface VatId$3 {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$3;
}
/** tax info types */
declare enum VatType$3 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
declare enum WeightUnit$2 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
/**
 * delivery preferences, for example preferred delivery "code" (shippingOptionId).
 * enrich the delivery providers with more data about the delivery
 */
interface DeliveryPreferences {
    preferredCode?: string | null;
}
interface ExternalReference$2 {
    /**
     * ID of the app associated with the purchase flow.
     * For example, the Wix Pay Links app ID.
     */
    appId?: string;
    /**
     * Reference to an external resource ID. Used to link the purchase flow to a specific entity in an external system.
     * For example, a Wix Pay Link ID.
     */
    resourceId?: string | null;
}
interface GetShippingRatesResponse {
    /** Available shipping rates. These define the shipping rate options that are displayed to site visitors on the cart and checkout pages. */
    shippingRates?: ShippingOption$1[];
}
interface ShippingOption$1 {
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
    /** Shipping rate title. For example, `"USPS Standard Overnight Delivery"`, `"Standard"`, or `"First-Class Package International"`. */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics$2;
    /** Shipping cost. */
    cost?: ShippingPrice$1;
}
interface DeliveryLogistics$2 {
    /** When the item is expected to be delivered in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for delivery. For example, for pickup: `"Ensure to come during business hours, and please don't park in the disabled spot"`. */
    instructions?: string | null;
    /** Pickup details. Should be returned only if order is for pickup. */
    pickupDetails?: PickupDetails$2;
}
interface PickupDetails$2 {
    /** Pickup address. */
    address?: Address$3;
    /**
     * Pickup method.
     *
     * Supported values:
     * + `"STORE_PICKUP"`: When pickup is from the merchant's brick and mortar store.
     * + `"PICKUP_POINT"`: When item is shipped to a specified pickup point.
     */
    pickupMethod?: PickupMethod$2;
}
declare enum PickupMethod$2 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$1 {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
interface ShippingPrice$1 {
    /** The shipping rate's price. Must align with the [currency's decimal separator](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). */
    price?: string;
    /** Currency of the shipping rate price as a 3-letter [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217). Must align with the `currency` passed to the function under the `metadata` field. */
    currency?: string;
    /** Additional costs. For example, a handling fee for packaging fragile items. */
    additionalCharges?: AdditionalCharge[];
}
interface AdditionalCharge {
    /** Additional charge type. */
    type?: ChargeType$2;
    /** Details of the additional charge. For example, `"Handling fee of $5 applied for gift wrapping"`. */
    details?: string | null;
    /** Cost of additional charge. For example, `12.5`. */
    price?: string;
}
declare enum ChargeType$2 {
    HANDLING_FEE = "HANDLING_FEE"
}
interface PartialOption {
    /** Items that the delivery option is for. If empty, the delivery option is for all items. */
    lineItemIds?: string[];
}
interface MissingPostalCodeError {
    error?: ApplicationError$1;
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface InvalidPostalCodeError {
    error?: ApplicationError$1;
}
interface InvalidAddressError {
    fields?: FieldViolation$1[];
}
interface FieldViolation$1 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$1;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
declare enum RuleType$1 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface GenericShippingRatesError {
    errors?: ApplicationError$1[];
}
interface GetDashboardTablesRequest {
    /** Delivery profile id. */
    deliveryProfileId?: string;
    /** Delivery region ids to get settings for. */
    deliveryRegionId?: string[];
}
interface GetDashboardTablesResponse {
    /** The list of settings for the given requests. */
    dashboardTableResults?: RegionDashboardTables[];
}
interface RegionDashboardTables {
    /** The delivery rule id. */
    deliveryRegionId?: string;
    /** The shipping table values that are associated with the delivery rule. Can be multiple if the provider is an aggregator of multiple carriers. */
    dashboardTables?: DashboardTable[];
}
interface DashboardTable {
    /** The title of the delivery settings that will be displayed in the UI. */
    title?: string;
    /** The columns of the delivery settings that will be displayed in the UI. */
    columns?: Column[];
    /** The content of the delivery settings. Each row is a map of column name to value. */
    rows?: Row[];
}
interface Column {
    /** The name of the column. This is used to get the data from the row. */
    key?: string;
    /** The title of the column that will be displayed in the UI. */
    name?: string;
}
interface Row {
    /** The external key of the data presented in a row. This is used to identify the row in the UI for editing. */
    key?: string;
    /**
     * The data presented in the row. The key is the column `name` and the value is the data in the specific row and column.
     * Data will be in JSON format.
     */
    data?: Record<string, any> | null;
}
interface ShippingRatesConfig {
    /**
     * Base URI where the endpoints are called.
     * Wix eCommerce appends the endpoint path to the base URI.
     * For example, to call the Get Shipping Rates endpoint at `https://my-shipping-provider.com/v1/getRates`,
     * the base URI you provide here is `https://my-shipping-provider.com/`.
     */
    deploymentUri?: string;
    /** Human-readable name of the shipping provider. */
    name?: string;
    /** Description of the shipping provider. */
    description?: string | null;
    /** URL to more info about the shipping provider. */
    learnMoreUrl?: string | null;
    /** URL to reach the shipping provider app's dashboard. */
    dashboardUrl?: string | null;
    /** Whether to require the site owner to define a fallback/default rate. Set to `true` if you do not provide rates as part of the integration. */
    fallbackDefinitionMandatory?: boolean;
    /**
     * Thumbnail image of the shipping rates provider. Displayed in the shipping settings section in the Dashboard.
     * The URL must be of an image uploaded to the [Wix Media Manager](https://support.wix.com/en/article/wix-media-uploading-media-to-the-media-manager).
     */
    thumbnailUrl?: string | null;
}
/**
 * this message is not directly used by any service,
 * it exists to describe the expected parameters that SHOULD be provided to invoked Velo methods as part of open-platform.
 * e.g. SPIs, event-handlers, etc..
 * NOTE: this context object MUST be provided as the last argument in each Velo method signature.
 *
 * Example:
 * ```typescript
 * export function wixStores_onOrderCanceled({ event, metadata }: OrderCanceledEvent) {
 * ...
 * }
 * ```
 */
interface Context$5 {
    /** A unique identifier of the request. You may print this ID to your logs to help with future debugging and easier correlation with Wix's logs. */
    requestId?: string | null;
    /** [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) 3-letter currency code. */
    currency?: string | null;
    /** An object that describes the identity that triggered this request. */
    identity?: IdentificationData$5;
    /** A string representing a language and region in the format of `"xx-XX"`. First 2 letters represent the language code according to ISO 639-1. This is followed by a dash "-", and then a by 2 capital letters representing the region according to ISO 3166-2. For example, `"en-US"`. */
    languages?: string[];
    /** The service provider app's instance ID. */
    instanceId?: string | null;
}
declare enum IdentityType$5 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface IdentificationData$5 extends IdentificationDataIdOneOf$5 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: IdentityType$5;
}
/** @oneof */
interface IdentificationDataIdOneOf$5 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}

interface GetShippingRatesEnvelope {
    request: GetShippingRatesRequest;
    metadata: Context$5;
}
declare const provideHandlers$b: ServicePluginDefinition<{
    /**
     *
     * This method retrieves applicable shipping rates for a delivery from your app.
     *
     * Wix calls this method when certain actions are performed on the cart and/or checkout. For example, when an item is added to the cart, or the shipping destination is changed.
     *
     * > __Note:__ Do not call the Estimate Cart Totals, Estimate Current Cart Totals or Get Checkout methods from your implementation code for Get Shipping Rates. Doing so will result in an error. */
    getShippingRates(payload: GetShippingRatesEnvelope): GetShippingRatesResponse | Promise<GetShippingRatesResponse>;
}>;

declare function createServicePluginModule$5<T extends ServicePluginDefinition<any>>(servicePluginDefinition: T): BuildServicePluginDefinition<T> & T;

type _publicProvideHandlersType$5 = typeof provideHandlers$b;
declare const provideHandlers$a: ReturnType<typeof createServicePluginModule$5<_publicProvideHandlersType>>;

/**
 * Missing postal code error.

Throw this error when a postal code is not provided in the request.
This error tells Wix that a valid postal code is required to calculate the shipping rate.
You can optionally provide error data to help debug the issue.
Error data you provide appears in the monitoring log but is not exposed to the user.
This error may block the site visitor from proceeding to checkout, so throw it only if there is no other way to proceed.
 */
declare class MissingPostalCodeWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorSchemaName: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    data: MissingPostalCodeError;
    constructor(data: MissingPostalCodeError);
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Invalid postal code error.

Throw this error when an invalid postal code is provided in the request.
This error tells Wix that a valid postal code is required to calculate the shipping rate.
You can optionally provide error data to help debug the issue.
Error data you provide appears in the monitoring log but is not exposed to the user.
This error may block the site visitor from proceeding to checkout, so throw it only if there is no other way to proceed.
 */
declare class InvalidPostalCodeWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorSchemaName: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    data: InvalidPostalCodeError;
    constructor(data: InvalidPostalCodeError);
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Invalid address error.

Throw this error when one or more fields in the address provided are invalid.
This error tells Wix that more address details are needed to calculate the shipping rate.
Wix may then prompt the user to provide more detailed address information.
The error data must include the invalid fields in the address. For example: `ShippingDestination.subdivision`.
 */
declare class InvalidAddressWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorSchemaName: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    data: InvalidAddressError;
    constructor(data: InvalidAddressError);
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Generic shipping rate calculation error.

Throw this error for cases the other errors don't cover.
You can optionally provide error data to help debug the issue.
Error data you provide appears in the monitoring log but is not exposed to the user.
This error may block the site visitor from proceeding to checkout, so throw it only if there is no other way to proceed.
 */
declare class GenericShippingRatesWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorSchemaName: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    data: GenericShippingRatesError;
    constructor(data: GenericShippingRatesError);
    /** @hidden */
    static readonly __type = "wix_spi_error";
}

type index_d$5_AdditionalCharge = AdditionalCharge;
type index_d$5_AddressStreetOneOf = AddressStreetOneOf;
type index_d$5_Column = Column;
type index_d$5_DashboardTable = DashboardTable;
type index_d$5_DeliveryPreferences = DeliveryPreferences;
type index_d$5_GenericShippingRatesError = GenericShippingRatesError;
type index_d$5_GenericShippingRatesWixError = GenericShippingRatesWixError;
declare const index_d$5_GenericShippingRatesWixError: typeof GenericShippingRatesWixError;
type index_d$5_GetDashboardTablesRequest = GetDashboardTablesRequest;
type index_d$5_GetDashboardTablesResponse = GetDashboardTablesResponse;
type index_d$5_GetShippingRatesRequest = GetShippingRatesRequest;
type index_d$5_GetShippingRatesResponse = GetShippingRatesResponse;
type index_d$5_InvalidAddressError = InvalidAddressError;
type index_d$5_InvalidAddressWixError = InvalidAddressWixError;
declare const index_d$5_InvalidAddressWixError: typeof InvalidAddressWixError;
type index_d$5_InvalidPostalCodeError = InvalidPostalCodeError;
type index_d$5_InvalidPostalCodeWixError = InvalidPostalCodeWixError;
declare const index_d$5_InvalidPostalCodeWixError: typeof InvalidPostalCodeWixError;
type index_d$5_MissingPostalCodeError = MissingPostalCodeError;
type index_d$5_MissingPostalCodeWixError = MissingPostalCodeWixError;
declare const index_d$5_MissingPostalCodeWixError: typeof MissingPostalCodeWixError;
type index_d$5_PartialOption = PartialOption;
type index_d$5_ProductItem = ProductItem;
type index_d$5_RegionDashboardTables = RegionDashboardTables;
type index_d$5_Row = Row;
type index_d$5_ShippingRatesConfig = ShippingRatesConfig;
type index_d$5_StandardDetails = StandardDetails;
type index_d$5_Subdivision = Subdivision;
type index_d$5_SubdivisionType = SubdivisionType;
declare const index_d$5_SubdivisionType: typeof SubdivisionType;
declare namespace index_d$5 {
  export { type index_d$5_AdditionalCharge as AdditionalCharge, type Address$3 as Address, type AddressLocation$3 as AddressLocation, type index_d$5_AddressStreetOneOf as AddressStreetOneOf, type ApplicationError$1 as ApplicationError, type CatalogReference$5 as CatalogReference, ChargeType$2 as ChargeType, type index_d$5_Column as Column, type Context$5 as Context, type index_d$5_DashboardTable as DashboardTable, type DeliveryLogistics$2 as DeliveryLogistics, type index_d$5_DeliveryPreferences as DeliveryPreferences, type DeliveryTimeSlot$1 as DeliveryTimeSlot, type ExternalReference$2 as ExternalReference, type FieldViolation$1 as FieldViolation, type FullAddressContactDetails$3 as FullAddressContactDetails, type index_d$5_GenericShippingRatesError as GenericShippingRatesError, index_d$5_GenericShippingRatesWixError as GenericShippingRatesWixError, type index_d$5_GetDashboardTablesRequest as GetDashboardTablesRequest, type index_d$5_GetDashboardTablesResponse as GetDashboardTablesResponse, type index_d$5_GetShippingRatesRequest as GetShippingRatesRequest, type index_d$5_GetShippingRatesResponse as GetShippingRatesResponse, type IdentificationData$5 as IdentificationData, type IdentificationDataIdOneOf$5 as IdentificationDataIdOneOf, IdentityType$5 as IdentityType, type index_d$5_InvalidAddressError as InvalidAddressError, index_d$5_InvalidAddressWixError as InvalidAddressWixError, type index_d$5_InvalidPostalCodeError as InvalidPostalCodeError, index_d$5_InvalidPostalCodeWixError as InvalidPostalCodeWixError, type index_d$5_MissingPostalCodeError as MissingPostalCodeError, index_d$5_MissingPostalCodeWixError as MissingPostalCodeWixError, type index_d$5_PartialOption as PartialOption, type PhysicalProperties$3 as PhysicalProperties, type PickupDetails$2 as PickupDetails, PickupMethod$2 as PickupMethod, type index_d$5_ProductItem as ProductItem, type index_d$5_RegionDashboardTables as RegionDashboardTables, type index_d$5_Row as Row, RuleType$1 as RuleType, type ShippingOption$1 as ShippingOption, type ShippingPrice$1 as ShippingPrice, type index_d$5_ShippingRatesConfig as ShippingRatesConfig, type index_d$5_StandardDetails as StandardDetails, type StreetAddress$3 as StreetAddress, type index_d$5_Subdivision as Subdivision, index_d$5_SubdivisionType as SubdivisionType, type VatId$3 as VatId, VatType$3 as VatType, WeightUnit$2 as WeightUnit, type _publicProvideHandlersType$5 as _publicProvideHandlersType, provideHandlers$a as provideHandlers, provideHandlers$b as publicProvideHandlers };
}

interface CalculateAdditionalFeesRequest {
    /**
     * Line items to calculate additional fees for.
     *
     * Max: 300 items
     */
    lineItems?: LineItem$4[];
    /** Shipping address. */
    shippingAddress?: Address$2;
    /** Information about the buyer, such as contact details. */
    buyerDetails?: BuyerDetails$1;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$2[];
    /** Shipping information. */
    shippingInfo?: ShippingInformation$1;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}
interface LineItem$4 {
    /** Line item ID. */
    _id?: string;
    /**
     * Quantity of item.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$4;
    /** Item name. */
    productName?: string | null;
    /** Price for a single item. */
    price?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability. */
    physicalProperties?: PhysicalProperties$2;
    /**
     * Partial payment to be paid upfront during the checkout.
     * Only eligible for catalog items with `lineItem.paymentOption` type of `DEPOSIT_ONLINE`.
     */
    depositAmount?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$4 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface PhysicalProperties$2 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
/** Physical address */
interface Address$2 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$2;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$2 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation$2 {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
interface BuyerDetails$1 {
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$2;
}
/** Full contact details for an address */
interface FullAddressContactDetails$2 {
    /** Contact's first name. */
    firstName?: string | null;
    /** Contact's last name. */
    lastName?: string | null;
    /** Contact's phone number. */
    phone?: string | null;
    /** Contact's company name. */
    company?: string | null;
    /** Email associated with the address. */
    email?: string | null;
    /** Tax info. Currently usable only in Brazil. */
    vatId?: VatId$2;
}
interface VatId$2 {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$2;
}
/** tax info types */
declare enum VatType$2 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface AppliedDiscount$2 extends AppliedDiscountDiscountSourceOneOf$2 {
    /** Coupon details. */
    coupon?: Coupon$2;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$2;
    /** Discount rule */
    discountRule?: DiscountRule$2;
    /** Discount type. */
    discountType?: DiscountType$2;
    /** IDs of line items the discount applies to. */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$2 {
    /** Coupon details. */
    coupon?: Coupon$2;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$2;
    /** Discount rule */
    discountRule?: DiscountRule$2;
}
declare enum DiscountType$2 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$2 {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    amount?: string;
}
interface MerchantDiscount$2 {
    amount?: string;
}
interface DiscountRule$2 {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$2;
    amount?: string;
}
interface DiscountRuleName$2 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface ShippingInformation$1 {
    /** Selected carrier shipping option. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption$2;
}
interface SelectedCarrierServiceOption$2 {
    /** Unique identifier of selected option. For example, `"usps_std_overnight"`. */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics$1;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices$2;
    /** Other charges. */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge$1[];
}
interface DeliveryLogistics$1 {
    /** Expected delivery time. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for deliver. For example, "Please deliver during open hours and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails$1;
}
interface PickupDetails$1 {
    /** Pickup address. */
    address?: Address$2;
    /**
     * Whether the pickup address is a business. This may affect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method. */
    pickupMethod?: PickupMethod$1;
}
declare enum PickupMethod$1 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface SelectedCarrierServiceOptionPrices$2 {
    /** Price. */
    price?: string;
    /** Total shipping discount. */
    totalDiscount?: string | null;
}
interface SelectedCarrierServiceOptionOtherCharge$1 {
    /** Type of charge. */
    type?: ChargeType$1;
    /**
     * Details of the charge.
     *
     * Max: 200 characters
     */
    details?: string | null;
    /**
     * Cost.
     *
     * `cost` is `price` minus `totalDiscount`.
     */
    cost?: SelectedCarrierServiceOptionPrices$2;
}
declare enum ChargeType$1 {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface CalculateAdditionalFeesResponse {
    /** Additional fees calculated. */
    additionalFees?: AdditionalFee$1[];
    /**
     * Currency of additional fees calculated. In three-letter currency code
     * [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     *
     * The currency returned in the response object must match the wix site's currency or those fees will
     * be filtered out and not returned. Extract the `currency` from the
     * [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions-with-rest#request-envelope)
     * to ensure the correct currency is used in your calculation.
     */
    currency?: string;
}
/** Additional fees calculated. */
interface AdditionalFee$1 {
    /** Additional fee's unique code or ID. */
    code?: string | null;
    /**
     * Additional fee's name.
     *
     * Max: 50 characters
     */
    name?: string;
    /** Total additional fees. This `price` does not include any taxes that may apply to these additional fees. */
    price?: string;
    /**
     * Tax details.
     *
     * > **Note:** Tax is not calculated in the returned `price` even when `taxDetails.taxable` is `true`.
     */
    taxDetails?: TaxDetails;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
/** Tax details. */
interface TaxDetails {
    /** Whether additional fee is taxable. */
    taxable?: boolean;
    /** Reserved for internal use. */
    taxGroupId?: string | null;
}
interface AdditionalFeesSPIConfig {
    /**
     * Base URI where the endpoints are called.
     * Wix eCommerce appends the endpoint path to the base URI.
     * For example, to call the Calculate Additional Fees endpoint at `https://my-additional-fees.com/v1/calculateAdditionalFees`,
     * the base URI you provide here is `https://my-additional-fees.com/`.
     */
    deploymentUri?: string;
}
/**
 * this message is not directly used by any service,
 * it exists to describe the expected parameters that SHOULD be provided to invoked Velo methods as part of open-platform.
 * e.g. SPIs, event-handlers, etc..
 * NOTE: this context object MUST be provided as the last argument in each Velo method signature.
 *
 * Example:
 * ```typescript
 * export function wixStores_onOrderCanceled({ event, metadata }: OrderCanceledEvent) {
 * ...
 * }
 * ```
 */
interface Context$4 {
    /** A unique identifier of the request. You may print this ID to your logs to help with future debugging and easier correlation with Wix's logs. */
    requestId?: string | null;
    /** [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) 3-letter currency code. */
    currency?: string | null;
    /** An object that describes the identity that triggered this request. */
    identity?: IdentificationData$4;
    /** A string representing a language and region in the format of `"xx-XX"`. First 2 letters represent the language code according to ISO 639-1. This is followed by a dash "-", and then a by 2 capital letters representing the region according to ISO 3166-2. For example, `"en-US"`. */
    languages?: string[];
    /** The service provider app's instance ID. */
    instanceId?: string | null;
}
declare enum IdentityType$4 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface IdentificationData$4 extends IdentificationDataIdOneOf$4 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: IdentityType$4;
}
/** @oneof */
interface IdentificationDataIdOneOf$4 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}

interface CalculateAdditionalFeesEnvelope {
    request: CalculateAdditionalFeesRequest;
    metadata: Context$4;
}
declare const provideHandlers$9: ServicePluginDefinition<{
    /**
     *
     * This method retrieves additional fees calculated by your app.
     *
     * Wix calls this method when certain actions are performed on the cart or checkout.
     * For example, when an item is added to the cart or the amount of an item is updated in the checkout.
     *
     * > __Notes:__
     * > + Do not call the Estimate Cart Totals, Estimate Current Cart Totals or Get Checkout methods from your implementation code for Calculate Additional Fees. Doing so will result in an error.
     * > + The currency returned in the response object must match the site's currency or those fees will be filtered out and not returned. */
    calculateAdditionalFees(payload: CalculateAdditionalFeesEnvelope): CalculateAdditionalFeesResponse | Promise<CalculateAdditionalFeesResponse>;
}>;

declare function createServicePluginModule$4<T extends ServicePluginDefinition<any>>(servicePluginDefinition: T): BuildServicePluginDefinition<T> & T;

type _publicProvideHandlersType$4 = typeof provideHandlers$9;
declare const provideHandlers$8: ReturnType<typeof createServicePluginModule$4<_publicProvideHandlersType>>;

type index_d$4_AdditionalFeesSPIConfig = AdditionalFeesSPIConfig;
type index_d$4_CalculateAdditionalFeesRequest = CalculateAdditionalFeesRequest;
type index_d$4_CalculateAdditionalFeesResponse = CalculateAdditionalFeesResponse;
type index_d$4_TaxDetails = TaxDetails;
declare namespace index_d$4 {
  export { type AdditionalFee$1 as AdditionalFee, type index_d$4_AdditionalFeesSPIConfig as AdditionalFeesSPIConfig, type Address$2 as Address, type AddressLocation$2 as AddressLocation, type AppliedDiscount$2 as AppliedDiscount, type AppliedDiscountDiscountSourceOneOf$2 as AppliedDiscountDiscountSourceOneOf, type BuyerDetails$1 as BuyerDetails, type index_d$4_CalculateAdditionalFeesRequest as CalculateAdditionalFeesRequest, type index_d$4_CalculateAdditionalFeesResponse as CalculateAdditionalFeesResponse, type CatalogReference$4 as CatalogReference, ChargeType$1 as ChargeType, type Context$4 as Context, type Coupon$2 as Coupon, type DeliveryLogistics$1 as DeliveryLogistics, type DiscountRule$2 as DiscountRule, type DiscountRuleName$2 as DiscountRuleName, DiscountType$2 as DiscountType, type FullAddressContactDetails$2 as FullAddressContactDetails, type IdentificationData$4 as IdentificationData, type IdentificationDataIdOneOf$4 as IdentificationDataIdOneOf, IdentityType$4 as IdentityType, type LineItem$4 as LineItem, type MerchantDiscount$2 as MerchantDiscount, type PhysicalProperties$2 as PhysicalProperties, type PickupDetails$1 as PickupDetails, PickupMethod$1 as PickupMethod, type SelectedCarrierServiceOption$2 as SelectedCarrierServiceOption, type SelectedCarrierServiceOptionOtherCharge$1 as SelectedCarrierServiceOptionOtherCharge, type SelectedCarrierServiceOptionPrices$2 as SelectedCarrierServiceOptionPrices, type ShippingInformation$1 as ShippingInformation, type StreetAddress$2 as StreetAddress, type index_d$4_TaxDetails as TaxDetails, type VatId$2 as VatId, VatType$2 as VatType, type _publicProvideHandlersType$4 as _publicProvideHandlersType, provideHandlers$8 as provideHandlers, provideHandlers$9 as publicProvideHandlers };
}

interface CustomTrigger {
    /** Custom trigger ID. */
    _id?: string;
}
interface ListTriggersRequest {
}
interface ListTriggersResponse {
    /** Custom triggers. */
    customTriggers?: ListTriggersResponseCustomTrigger[];
}
interface ListTriggersResponseCustomTrigger {
    /** Custom trigger ID. */
    _id?: string;
    /** Custom trigger name to display in the dashboard. */
    name?: string;
}
interface GetEligibleTriggersRequest {
    /** List of line items in the cart/checkout. */
    lineItems?: LineItem$3[];
    /** List of triggers to be checked for discount eligibility. */
    triggers?: TriggerToFilterBy[];
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}
interface LineItem$3 {
    /** Line item ID. */
    _id?: string;
    /** Item quantity in this line item. */
    quantity?: number | null;
    /**
     * Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference$3;
    /** Price of a single item. */
    price?: string;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$3 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [Wix Dev Center](https://dev.wix.com/apps).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface TriggerToFilterBy {
    /** Custom trigger info. */
    customTrigger?: CustomTrigger;
    /** Unique trigger identifier. The same value must be returned in `eligibleTriggers[i].identifier`. */
    identifier?: string | null;
}
interface GetEligibleTriggersResponse {
    /** List of eligible triggers. These are used by the Discount Rules API and Wix eCommerce to apply the relevant discount. */
    eligibleTriggers?: EligibleTrigger[];
}
interface EligibleTrigger {
    /** Custom trigger ID. Must be passed with relevant `identifier`. */
    customTriggerId?: string;
    /** Unique trigger identifier. The value must be the same as its equivalent in `triggers[i].identifier` in the request payload. */
    identifier?: string | null;
}
interface CustomTriggerConfig {
    /**
     * Required. Base URI where the endpoints are called.
     * Wix appends the endpoint path to the base URI. For example, to call the Get Eligible Triggers endpoint at `https://my-discount-app.com/v1/getEligibleTriggers`, the base URI you provide here is `https://my-discount-app.com/`.
     */
    deploymentUri?: string;
}
/**
 * this message is not directly used by any service,
 * it exists to describe the expected parameters that SHOULD be provided to invoked Velo methods as part of open-platform.
 * e.g. SPIs, event-handlers, etc..
 * NOTE: this context object MUST be provided as the last argument in each Velo method signature.
 *
 * Example:
 * ```typescript
 * export function wixStores_onOrderCanceled({ event, metadata }: OrderCanceledEvent) {
 * ...
 * }
 * ```
 */
interface Context$3 {
    /** A unique identifier of the request. You may print this ID to your logs to help with future debugging and easier correlation with Wix's logs. */
    requestId?: string | null;
    /** [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) 3-letter currency code. */
    currency?: string | null;
    /** An object that describes the identity that triggered this request. */
    identity?: IdentificationData$3;
    /** A string representing a language and region in the format of `"xx-XX"`. First 2 letters represent the language code according to ISO 639-1. This is followed by a dash "-", and then a by 2 capital letters representing the region according to ISO 3166-2. For example, `"en-US"`. */
    languages?: string[];
    /** The service provider app's instance ID. */
    instanceId?: string | null;
}
declare enum IdentityType$3 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface IdentificationData$3 extends IdentificationDataIdOneOf$3 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: IdentityType$3;
}
/** @oneof */
interface IdentificationDataIdOneOf$3 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}

interface ListTriggersEnvelope {
    request: ListTriggersRequest;
    metadata: Context$3;
}
interface GetEligibleTriggersEnvelope {
    request: GetEligibleTriggersRequest;
    metadata: Context$3;
}
declare const provideHandlers$7: ServicePluginDefinition<{
    /**
     *
     * Lists all custom triggers provided by your service plugin integration.
     *
     * This method is automatically called by Wix eCommerce to populate the custom [minimum requirements section of an automatic discount](https://support.wix.com/en/article/wix-stores-creating-automatic-discounts#:~:text=Create%20minimum%20requirements). */
    listTriggers(payload: ListTriggersEnvelope): ListTriggersResponse | Promise<ListTriggersResponse>;
    /**
     *
     * Retrieves eligible custom discount triggers based on the provided items.
     *
     * This method is automatically called by Wix eCommerce to retrieve the custom discount triggers provided by your extension.
     * This happens when actions are performed on the cart and checkout entities/pages. For example, when an item is added to the cart. */
    getEligibleTriggers(payload: GetEligibleTriggersEnvelope): GetEligibleTriggersResponse | Promise<GetEligibleTriggersResponse>;
}>;

declare function createServicePluginModule$3<T extends ServicePluginDefinition<any>>(servicePluginDefinition: T): BuildServicePluginDefinition<T> & T;

type _publicProvideHandlersType$3 = typeof provideHandlers$7;
declare const provideHandlers$6: ReturnType<typeof createServicePluginModule$3<_publicProvideHandlersType>>;

type index_d$3_CustomTrigger = CustomTrigger;
type index_d$3_CustomTriggerConfig = CustomTriggerConfig;
type index_d$3_EligibleTrigger = EligibleTrigger;
type index_d$3_GetEligibleTriggersRequest = GetEligibleTriggersRequest;
type index_d$3_GetEligibleTriggersResponse = GetEligibleTriggersResponse;
type index_d$3_ListTriggersRequest = ListTriggersRequest;
type index_d$3_ListTriggersResponse = ListTriggersResponse;
type index_d$3_ListTriggersResponseCustomTrigger = ListTriggersResponseCustomTrigger;
type index_d$3_TriggerToFilterBy = TriggerToFilterBy;
declare namespace index_d$3 {
  export { type CatalogReference$3 as CatalogReference, type Context$3 as Context, type index_d$3_CustomTrigger as CustomTrigger, type index_d$3_CustomTriggerConfig as CustomTriggerConfig, type index_d$3_EligibleTrigger as EligibleTrigger, type index_d$3_GetEligibleTriggersRequest as GetEligibleTriggersRequest, type index_d$3_GetEligibleTriggersResponse as GetEligibleTriggersResponse, type IdentificationData$3 as IdentificationData, type IdentificationDataIdOneOf$3 as IdentificationDataIdOneOf, IdentityType$3 as IdentityType, type LineItem$3 as LineItem, type index_d$3_ListTriggersRequest as ListTriggersRequest, type index_d$3_ListTriggersResponse as ListTriggersResponse, type index_d$3_ListTriggersResponseCustomTrigger as ListTriggersResponseCustomTrigger, type index_d$3_TriggerToFilterBy as TriggerToFilterBy, type _publicProvideHandlersType$3 as _publicProvideHandlersType, provideHandlers$6 as provideHandlers, provideHandlers$7 as publicProvideHandlers };
}

interface GetEligibleDiscountsRequest {
    /** Line items */
    lineItems?: LineItem$2[];
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    /** Number of coupons is limited to 1 due to limitations in Checkout. */
    couponCodes?: string[];
    /** Buyer email */
    buyerEmail?: string | null;
}
interface LineItem$2 {
    /** Line item ID. */
    _id?: string;
    /** Line item quantity. */
    quantity?: number | null;
    /** Catalog and item reference info. Learn more about [integrating Wix Stores products with Wix eCommerce](https://dev.wix.com/api/rest/wix-stores/catalog/ecommerce-integration). */
    catalogReference?: CatalogReference$2;
    /** Line item price. */
    price?: string;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$2 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface GetEligibleDiscountsResponse {
    /** List of discounts to apply */
    discounts?: Discount[];
}
/** Discount */
interface Discount extends DiscountDiscountTypeOneOf, DiscountDiscountScopesOneOf {
    /** Global discounts */
    globalDiscounts?: BaseDiscounts;
    /** Shipping discounts */
    shippingDiscounts?: BaseDiscounts;
    /** line items discounts */
    lineItemsDiscounts?: LineItemsDiscounts;
    /** Coupon options */
    couponOptions?: CouponOptions;
    /** Target type */
    targetType?: TargetType;
    /** Name */
    name?: DiscountName;
    /** external id used by the implementor */
    externalId?: string | null;
    /** Source */
    source?: DiscountSource;
}
/** @oneof */
interface DiscountDiscountTypeOneOf {
    /** Global discounts */
    globalDiscounts?: BaseDiscounts;
    /** Shipping discounts */
    shippingDiscounts?: BaseDiscounts;
    /** line items discounts */
    lineItemsDiscounts?: LineItemsDiscounts;
}
/** @oneof */
interface DiscountDiscountScopesOneOf {
    /** Coupon options */
    couponOptions?: CouponOptions;
}
declare enum TargetType {
    UNKNOWN_TARGET = "UNKNOWN_TARGET",
    GLOBAL = "GLOBAL",
    SHIPPING = "SHIPPING",
    LINE_ITEMS = "LINE_ITEMS"
}
interface DiscountName {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /**
     * Translated discount rule name according to buyer language.
     *
     * Default: `original`
     */
    translated?: string | null;
}
interface BaseDiscounts {
    /** The rate of the discount. */
    rate?: DiscountRate;
}
interface DiscountRate extends DiscountRateRateOneOf {
    /** Global discounts */
    fixedAmountValue?: string;
    /** Shipping discounts */
    percentageValue?: string;
    /** Type of calculation */
    type?: Type;
}
/** @oneof */
interface DiscountRateRateOneOf {
    /** Global discounts */
    fixedAmountValue?: string;
    /** Shipping discounts */
    percentageValue?: string;
}
declare enum Type {
    UNKNOWN_RATE = "UNKNOWN_RATE",
    FIXED_AMOUNT = "FIXED_AMOUNT",
    PERCENTAGE = "PERCENTAGE"
}
interface LineItemsDiscounts {
    /** Line items */
    lineItems?: LineItemRate[];
}
interface LineItemRate {
    /** The rate of the discount. */
    rate?: DiscountRate;
    /** id of the line item. */
    _id?: string;
}
declare enum DiscountSource {
    UNKNOWN_SOURCE = "UNKNOWN_SOURCE",
    COUPON = "COUPON",
    AUTOMATIC = "AUTOMATIC",
    CUSTOM = "CUSTOM"
}
interface CouponOptions {
    /** Coupon code, only relevant when source is coupon. */
    code?: string | null;
}
interface DiscountsSPIConfig {
    /**
     * Base URI where the endpoints are called.
     * Wix eCommerce appends the endpoint path to the base URI.
     */
    deploymentUri?: string;
}
/**
 * this message is not directly used by any service,
 * it exists to describe the expected parameters that SHOULD be provided to invoked Velo methods as part of open-platform.
 * e.g. SPIs, event-handlers, etc..
 * NOTE: this context object MUST be provided as the last argument in each Velo method signature.
 *
 * Example:
 * ```typescript
 * export function wixStores_onOrderCanceled({ event, metadata }: OrderCanceledEvent) {
 * ...
 * }
 * ```
 */
interface Context$2 {
    /** A unique identifier of the request. You may print this ID to your logs to help with future debugging and easier correlation with Wix's logs. */
    requestId?: string | null;
    /** [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) 3-letter currency code. */
    currency?: string | null;
    /** An object that describes the identity that triggered this request. */
    identity?: IdentificationData$2;
    /** A string representing a language and region in the format of `"xx-XX"`. First 2 letters represent the language code according to ISO 639-1. This is followed by a dash "-", and then a by 2 capital letters representing the region according to ISO 3166-2. For example, `"en-US"`. */
    languages?: string[];
    /** The service provider app's instance ID. */
    instanceId?: string | null;
}
declare enum IdentityType$2 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface IdentificationData$2 extends IdentificationDataIdOneOf$2 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: IdentityType$2;
}
/** @oneof */
interface IdentificationDataIdOneOf$2 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}

interface GetEligibleDiscountsEnvelope {
    request: GetEligibleDiscountsRequest;
    metadata: Context$2;
}
declare const provideHandlers$5: ServicePluginDefinition<{
    /**
     *
     * Wix calls this method when certain actions are performed on the cart or checkout.
     * For example, when an item is added to the cart or the amount of an item is updated in the checkout. */
    getEligibleDiscounts(payload: GetEligibleDiscountsEnvelope): GetEligibleDiscountsResponse | Promise<GetEligibleDiscountsResponse>;
}>;

declare function createServicePluginModule$2<T extends ServicePluginDefinition<any>>(servicePluginDefinition: T): BuildServicePluginDefinition<T> & T;

type _publicProvideHandlersType$2 = typeof provideHandlers$5;
declare const provideHandlers$4: ReturnType<typeof createServicePluginModule$2<_publicProvideHandlersType>>;

declare class CouponLimitPerCustomerExceededWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
declare class CouponIsDisabledWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
declare class CouponUsageExceededWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
declare class CouponHasExpiredWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
declare class CouponIsNotActiveYetWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
declare class CouponDoesNotExistWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}

type index_d$2_BaseDiscounts = BaseDiscounts;
type index_d$2_CouponDoesNotExistWixError = CouponDoesNotExistWixError;
declare const index_d$2_CouponDoesNotExistWixError: typeof CouponDoesNotExistWixError;
type index_d$2_CouponHasExpiredWixError = CouponHasExpiredWixError;
declare const index_d$2_CouponHasExpiredWixError: typeof CouponHasExpiredWixError;
type index_d$2_CouponIsDisabledWixError = CouponIsDisabledWixError;
declare const index_d$2_CouponIsDisabledWixError: typeof CouponIsDisabledWixError;
type index_d$2_CouponIsNotActiveYetWixError = CouponIsNotActiveYetWixError;
declare const index_d$2_CouponIsNotActiveYetWixError: typeof CouponIsNotActiveYetWixError;
type index_d$2_CouponLimitPerCustomerExceededWixError = CouponLimitPerCustomerExceededWixError;
declare const index_d$2_CouponLimitPerCustomerExceededWixError: typeof CouponLimitPerCustomerExceededWixError;
type index_d$2_CouponOptions = CouponOptions;
type index_d$2_CouponUsageExceededWixError = CouponUsageExceededWixError;
declare const index_d$2_CouponUsageExceededWixError: typeof CouponUsageExceededWixError;
type index_d$2_Discount = Discount;
type index_d$2_DiscountDiscountScopesOneOf = DiscountDiscountScopesOneOf;
type index_d$2_DiscountDiscountTypeOneOf = DiscountDiscountTypeOneOf;
type index_d$2_DiscountName = DiscountName;
type index_d$2_DiscountRate = DiscountRate;
type index_d$2_DiscountRateRateOneOf = DiscountRateRateOneOf;
type index_d$2_DiscountSource = DiscountSource;
declare const index_d$2_DiscountSource: typeof DiscountSource;
type index_d$2_DiscountsSPIConfig = DiscountsSPIConfig;
type index_d$2_GetEligibleDiscountsRequest = GetEligibleDiscountsRequest;
type index_d$2_GetEligibleDiscountsResponse = GetEligibleDiscountsResponse;
type index_d$2_LineItemRate = LineItemRate;
type index_d$2_LineItemsDiscounts = LineItemsDiscounts;
type index_d$2_TargetType = TargetType;
declare const index_d$2_TargetType: typeof TargetType;
type index_d$2_Type = Type;
declare const index_d$2_Type: typeof Type;
declare namespace index_d$2 {
  export { type index_d$2_BaseDiscounts as BaseDiscounts, type CatalogReference$2 as CatalogReference, type Context$2 as Context, index_d$2_CouponDoesNotExistWixError as CouponDoesNotExistWixError, index_d$2_CouponHasExpiredWixError as CouponHasExpiredWixError, index_d$2_CouponIsDisabledWixError as CouponIsDisabledWixError, index_d$2_CouponIsNotActiveYetWixError as CouponIsNotActiveYetWixError, index_d$2_CouponLimitPerCustomerExceededWixError as CouponLimitPerCustomerExceededWixError, type index_d$2_CouponOptions as CouponOptions, index_d$2_CouponUsageExceededWixError as CouponUsageExceededWixError, type index_d$2_Discount as Discount, type index_d$2_DiscountDiscountScopesOneOf as DiscountDiscountScopesOneOf, type index_d$2_DiscountDiscountTypeOneOf as DiscountDiscountTypeOneOf, type index_d$2_DiscountName as DiscountName, type index_d$2_DiscountRate as DiscountRate, type index_d$2_DiscountRateRateOneOf as DiscountRateRateOneOf, index_d$2_DiscountSource as DiscountSource, type index_d$2_DiscountsSPIConfig as DiscountsSPIConfig, type index_d$2_GetEligibleDiscountsRequest as GetEligibleDiscountsRequest, type index_d$2_GetEligibleDiscountsResponse as GetEligibleDiscountsResponse, type IdentificationData$2 as IdentificationData, type IdentificationDataIdOneOf$2 as IdentificationDataIdOneOf, IdentityType$2 as IdentityType, type LineItem$2 as LineItem, type index_d$2_LineItemRate as LineItemRate, type index_d$2_LineItemsDiscounts as LineItemsDiscounts, index_d$2_TargetType as TargetType, index_d$2_Type as Type, type _publicProvideHandlersType$2 as _publicProvideHandlersType, provideHandlers$4 as provideHandlers, provideHandlers$5 as publicProvideHandlers };
}

interface GetPaymentSettingsRequest {
    /** Order. */
    order?: Order;
}
interface Order {
    /**
     * Order ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Order number displayed in the site owner's dashboard (auto-generated).
     * @readonly
     */
    number?: string;
    /**
     * Date and time the order was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Order line items.
     * @readonly
     */
    lineItems?: OrderLineItem[];
    /** Buyer information. */
    buyerInfo?: V1BuyerInfo;
    /**
     * Order payment status.
     * + `NOT_PAID` - This can be an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.
     * + This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.
     * + `PAID` - All payments associated with this order are paid. For online payments: [`payment.regularPaymentDetails.status: APPROVED`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object). For gift cards: [`payment.giftCardPaymentDetails.voided: false`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object).
     * + `PARTIALLY_REFUNDED` - Order was refunded, but refund amount is less than order total price.
     * + `FULLY_REFUNDED` - Order fully refunded. Refund amount equals total price.
     * + `PENDING` - Payments received but not yet confirmed by the payment provider.
     * + `PARTIALLY_PAID` -  At least one payment was received and approved, covering less than total price amount.
     */
    paymentStatus?: PaymentStatus;
    /**
     * Order fulfillment status.
     * @readonly
     */
    fulfillmentStatus?: FulfillmentStatus;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$1;
    /** Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format. */
    currency?: string | null;
    /** Whether tax is included in line item prices. */
    taxIncludedInPrices?: boolean;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary$1;
    /** Billing address and contact details. */
    billingInfo?: ApiAddressWithContact;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: V1ShippingInformation;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /**
     * Order status.
     * + `INITIALIZED`: Order created, but not yet approved or canceled.
     * + `APPROVED`: Order approved. This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order). Offline orders (cash payment) are automatically approved.
     * + `CANCELED`: Order canceled by the user.
     */
    status?: OrderStatus;
    /** Whether order is archived. */
    archived?: boolean | null;
    /**
     * Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @deprecated Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary;
    /** Tax information. */
    taxInfo?: OrderTaxInfo;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$1[];
    /**
     * Order activities.
     * @readonly
     */
    activities?: Activity[];
    /** Order attribution source. */
    attributionSource?: AttributionSource;
    /**
     * ID of the order's initiator.
     * @readonly
     */
    createdBy?: V1CreatedBy;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo;
    /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */
    seenByAHuman?: boolean | null;
    /** Checkout ID. */
    checkoutId?: string | null;
    /** Custom fields. */
    customFields?: CustomField$1[];
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: BalanceSummary;
    /** Additional fees applied to the order. */
    additionalFees?: AdditionalFee[];
    /**
     * Custom field data for the order object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$1;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: ApiAddressWithContact;
    /**
     * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * Used for migration from external systems.
     */
    purchasedDate?: Date | null;
}
interface OrderLineItem {
    /** Line item ID. */
    _id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName$1;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference$1;
    /** Line item quantity. */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price;
    /** Line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine[];
    /** Line item image. */
    image?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties$1;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$1;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
     */
    fulfillerId?: string | null;
    /**
     * Number of items that were refunded.
     * @readonly
     */
    refundQuantity?: number | null;
    /**
     * Number of items restocked.
     * @readonly
     */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` - Partial payment for the given item to be paid upfront during the checkout. Eligible for catalog items with type `DEPOSIT_ONLINE` only.
     */
    paymentOption?: PaymentOptionType;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails$1;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price;
}
interface ProductName$1 {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$1 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface Price {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface DescriptionLine extends DescriptionLineValueOneOf, DescriptionLineDescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
    /** Description line name. */
    name?: DescriptionLineName;
}
/** @oneof */
interface DescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf {
}
interface DescriptionLineName {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface PhysicalProperties$1 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$1 extends ItemTypeItemTypeDataOneOf$1 {
    /** Preset item type. */
    preset?: ItemTypeItemType$1;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$1 {
    /** Preset item type. */
    preset?: ItemTypeItemType$1;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$1 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ItemTaxFullDetails$1 {
    /** Taxable amount of this line item. */
    taxableAmount?: Price;
    /** Tax rate percentage, as a decimal numeral between 0 and 1. For example, `"0.13"`. */
    taxRate?: string;
    /** The calculated tax, based on the `taxableAmount` and `taxRate`. */
    totalTax?: Price;
}
interface LineItemTaxInfo {
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    taxAmount?: Price;
    /** Amount for which tax is calculated. */
    taxableAmount?: Price;
    /** Tax rate %, as a decimal point. */
    taxRate?: string | null;
    /**
     * Tax group ID.
     * Learn more about [Tax Groups](https://dev.wix.com/docs/rest/business-management/payments/tax/tax-groups/introduction).
     */
    taxGroupId?: string | null;
    /** Indicates whether the price already includes tax. */
    taxIncludedInPrice?: boolean;
    /** Tax information for a line item. */
    taxBreakdown?: LineItemTaxBreakdown[];
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface LineItemTaxBreakdown {
    /** Jurisdiction that taxes were calculated for. For example, "New York", or "Quebec". */
    jurisdiction?: string | null;
    /** Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000. */
    rate?: string | null;
    /** Amount of tax calculated for this line item. */
    taxAmount?: Price;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** Type of jurisdiction that taxes were calculated for. */
    jurisdictionType?: JurisdictionType$1;
    /** Non-taxable amount of the line item price. */
    nonTaxableAmount?: Price;
    /** Taxable amount of the line item price. */
    taxableAmount?: Price;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$1 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DigitalFile {
    /** ID of the secure file in media. */
    fileId?: string;
    /** Link will exist after the digital links have been generated on the order. */
    link?: string | null;
    /**
     * Link expiration time and date.
     * @readonly
     */
    expirationDate?: Date | null;
}
interface SubscriptionInfo {
    /** Subscription ID. */
    _id?: string | null;
    /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */
    cycleNumber?: number;
    /** Subscription option title. For example, `"Monthly coffee Subscription"`. */
    subscriptionOptionTitle?: string;
    /** Subscription option description. For example, `"1kg of selected coffee, once a month"`. */
    subscriptionOptionDescription?: string | null;
    /** Subscription detailed information. */
    subscriptionSettings?: SubscriptionSettings$1;
}
interface SubscriptionSettings$1 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$1;
    /** Interval of recurring payment. */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$1 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface PriceDescription {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface LocationAndQuantity {
    /** Location id in the associated owner app. */
    _id?: string;
    /** Location owner app, if not provided then the site business info locations will be used. */
    appId?: string | null;
    /** Quantity for specific location. */
    quantity?: number;
}
interface TaxableAddress extends TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType;
}
/** @oneof */
interface TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType;
}
declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Buyer Info */
interface V1BuyerInfo extends V1BuyerInfoIdOneOf {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
    /** Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction). */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface V1BuyerInfoIdOneOf {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
}
declare enum PaymentStatus {
    UNSPECIFIED = "UNSPECIFIED",
    /** Order is not paid */
    NOT_PAID = "NOT_PAID",
    /** Order is paid */
    PAID = "PAID",
    /** Order was refunded, refund amount less than order total price */
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    /** Full order total price was refunded */
    FULLY_REFUNDED = "FULLY_REFUNDED",
    /** Payments received but not yet confirmed by the payment provider */
    PENDING = "PENDING",
    /** At least one payment was received and approved, covering less than total price amount */
    PARTIALLY_PAID = "PARTIALLY_PAID"
}
declare enum FulfillmentStatus {
    /** none of the order items are fulfilled or order was manually marked as unfulfilled */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled or order was manually marked as fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FULFILLED = "FULFILLED",
    /** Some, but not all of the order items are fulfilled */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
declare enum WeightUnit$1 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface PriceSummary$1 {
    /** Subtotal of all the line items, before discounts and before tax. */
    subtotal?: Price;
    /** Total shipping price, before discounts and before tax. */
    shipping?: Price;
    /** Total tax on this order. */
    tax?: Price;
    /** Total calculated discount value. */
    discount?: Price;
    /** Order’s total price after discounts and tax. */
    total?: Price;
    /** Total price of additional fees before tax. */
    totalAdditionalFees?: Price;
}
/** Billing Info and shipping details */
interface ApiAddressWithContact {
    /** Address. */
    address?: Address$1;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$1;
}
/** Physical address */
interface Address$1 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$1;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$1 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation$1 {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
/** Full contact details for an address */
interface FullAddressContactDetails$1 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$1;
}
interface VatId$1 {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$1;
}
/** tax info types */
declare enum VatType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface V1ShippingInformation {
    /** App Def Id of external provider which was a source of shipping info */
    carrierId?: string | null;
    /** Unique code (or ID) of selected shipping option. For example, `"usps_std_overnight"``. */
    code?: string | null;
    /**
     * Shipping option title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"` or `"First-Class Package International"`.
     */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics;
    /** Shipping costs. */
    cost?: ShippingPrice;
    /** Shipping region. */
    region?: ShippingRegion;
}
interface DeliveryLogistics extends DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: ApiAddressWithContact;
    /** Pickup details. */
    pickupDetails?: PickupDetails;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /**
     * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Expected delivery time. */
    deliveryTimeSlot?: DeliveryTimeSlot;
}
/** @oneof */
interface DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: ApiAddressWithContact;
    /** Pickup details. */
    pickupDetails?: PickupDetails;
}
interface PickupDetails {
    /** Pickup address. */
    address?: PickupAddress;
    /** Pickup method */
    pickupMethod?: PickupMethod;
}
/** Physical address */
interface PickupAddress {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address object, with number, name, and apartment number in separate fields. */
    streetAddress?: StreetAddress$1;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
declare enum PickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot {
    /** Delivery slot starting time. */
    from?: Date | null;
    /** Delivery slot ending time. */
    to?: Date | null;
}
interface ShippingPrice {
    /** Shipping price for display purposes. */
    price?: Price;
    /**
     * Total price of shipping after discounts (when relevant), and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price;
    /**
     * Shipping price after all discounts (if any exist), and after tax.
     * @readonly
     */
    totalPriceAfterTax?: Price;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$1;
    /**
     * Shipping discount before tax.
     * @readonly
     */
    discount?: Price;
}
interface ShippingRegion {
    /** Name of shipping region. For example, `"Metropolitan London"`, or `"Outer Melbourne suburbs"`. */
    name?: string | null;
}
declare enum OrderStatus {
    INITIALIZED = "INITIALIZED",
    APPROVED = "APPROVED",
    CANCELED = "CANCELED"
}
interface TaxSummary {
    /**
     * Total tax.
     * @readonly
     */
    totalTax?: Price;
}
interface OrderTaxInfo {
    /** Calculated tax, added from line items. */
    totalTax?: Price;
    /** The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate. */
    taxBreakdown?: OrderTaxBreakdown[];
    /**
     * Whether the draft order is exempt from tax calculations.
     *
     * Default: `false`
     * @readonly
     */
    taxExempt?: boolean | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface OrderTaxBreakdown {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionType?: JurisdictionType$1;
    /** The rate at which this tax detail was calculated. */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: Price;
}
interface AppliedDiscount$1 extends AppliedDiscountDiscountSourceOneOf$1 {
    /** Applied coupon info. */
    coupon?: Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$1;
    /** Automatic Discount */
    discountRule?: DiscountRule$1;
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to specific items.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: DiscountType$1;
    /**
     * IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @deprecated IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemIds?: string[];
    /** Discount id. */
    _id?: string | null;
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$1 {
    /** Applied coupon info. */
    coupon?: Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$1;
    /** Automatic Discount */
    discountRule?: DiscountRule$1;
}
declare enum DiscountType$1 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$1 {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** Coupon value. */
    amount?: Price;
}
interface MerchantDiscount$1 extends MerchantDiscountMerchantDiscountReasonOneOf {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason;
    /** Discount description as free text (optional). */
    description?: string | null;
    /** Discount amount. */
    amount?: Price;
}
/** @oneof */
interface MerchantDiscountMerchantDiscountReasonOneOf {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason;
    /** Discount description as free text (optional). */
    description?: string | null;
}
declare enum DiscountReason {
    UNSPECIFIED = "UNSPECIFIED",
    EXCHANGED_ITEMS = "EXCHANGED_ITEMS"
}
interface DiscountRule$1 {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$1;
    /** Discount value. */
    amount?: Price;
}
interface DiscountRuleName$1 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface LineItemDiscount {
    /** ID of line item the discount applies to. */
    _id?: string;
    /** Total discount for this line item. */
    totalDiscount?: Price;
}
interface Activity extends ActivityContentOneOf {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded;
    /**
     * Activity ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Activity author's email.
     * @readonly
     */
    authorEmail?: string | null;
    /**
     * Activity creation date and time.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Activity type. */
    type?: ActivityType;
}
/** @oneof */
interface ActivityContentOneOf {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded;
}
interface CustomActivity {
    /** ID of the app that created the custom activity. */
    appId?: string;
    /** Custom activity type. For example, `"Ticket number set"`. */
    type?: string;
    /** Additional data in key-value form. For example, `{ "Ticket number": "123456" }`. */
    additionalData?: Record<string, string>;
}
/** Store owner added a comment */
interface MerchantComment {
    /** Merchant comment message. */
    message?: string;
}
interface OrderRefunded {
    /** Whether order was refunded manually. For example, via payment provider or using cash. */
    manual?: boolean;
    /** Refund amount. */
    amount?: Price;
    /** Reason for refund. */
    reason?: string;
}
interface OrderCreatedFromExchange {
    /** ID of the original order for which the exchange happened. */
    originalOrderId?: string;
}
interface NewExchangeOrderCreated {
    /** ID of the new order created as a result of an exchange of items. */
    exchangeOrderId?: string;
    /** IDs of the items that were exchanged. */
    lineItems?: LineItemExchangeData[];
}
interface LineItemExchangeData {
    /** ID of the exchanged line item. */
    lineItemId?: string;
    /** Line item quantity being exchanged. */
    quantity?: number;
}
interface DraftOrderChangesApplied {
    /** Draft order id. */
    draftOrderId?: string;
    /** Reason for edit, given by user (optional). */
    reason?: string | null;
    /** Changes applied to order. */
    changes?: OrderChange[];
}
interface OrderChange extends OrderChangeValueOneOf {
    lineItemChanged?: LineItemChanges;
    lineItemAdded?: ManagedLineItem;
    lineItemRemoved?: ManagedLineItem;
    discountAdded?: ManagedDiscount;
    discountRemoved?: ManagedDiscount;
    additionalFeeAdded?: ManagedAdditionalFee;
    additionalFeeRemoved?: ManagedAdditionalFee;
    totalPriceChanged?: TotalPriceChange;
    shippingInformationChanged?: ShippingInformationChange;
}
/** @oneof */
interface OrderChangeValueOneOf {
    lineItemChanged?: LineItemChanges;
    lineItemAdded?: ManagedLineItem;
    lineItemRemoved?: ManagedLineItem;
    discountAdded?: ManagedDiscount;
    discountRemoved?: ManagedDiscount;
    additionalFeeAdded?: ManagedAdditionalFee;
    additionalFeeRemoved?: ManagedAdditionalFee;
    totalPriceChanged?: TotalPriceChange;
    shippingInformationChanged?: ShippingInformationChange;
}
interface LineItemChanges {
    /** Line item ID. */
    _id?: string;
    /** Item name. */
    name?: ProductName$1;
    /** Item quantity change. */
    quantity?: LineItemQuantityChange;
    /** Item price change. */
    price?: LineItemPriceChange;
}
interface LineItemQuantityChange {
    /** Item quantity before update. */
    originalQuantity?: number;
    /** Item quantity after update. */
    newQuantity?: number;
    /** Difference between original and new quantity. Absolute value. */
    diff?: number;
    /** Type of quantity change: increase or decrease. */
    deltaType?: LineItemQuantityChangeType;
}
declare enum LineItemQuantityChangeType {
    QUANTITY_INCREASED = "QUANTITY_INCREASED",
    QUANTITY_DECREASED = "QUANTITY_DECREASED"
}
interface LineItemPriceChange {
    /** Item price before update. */
    originalPrice?: Price;
    /** Item price after update. */
    newPrice?: Price;
}
interface ManagedLineItem {
    /** Line item ID. */
    _id?: string;
    /** Item name. */
    name?: ProductName$1;
    /** Added or removed item quantity. */
    quantity?: number;
}
interface ManagedDiscount {
    /** Discount id. */
    _id?: string;
    /** Discount name: coupon name / discount rule name / merchant discount description. */
    name?: TranslatedValue;
    /** Line items discount applies to. */
    affectedLineItems?: LineItemAmount[];
    /** Discount amount. */
    totalAmount?: Price;
}
interface TranslatedValue {
    /** Value in site default language. */
    original?: string;
    /** Translated value. */
    translated?: string | null;
}
interface LineItemAmount {
    /** Order line item id */
    _id?: string;
    /** Item name. */
    name?: ProductName$1;
    /** Amount associated with this item. (Discount amount for item / additional fee amount for item) */
    amount?: Price;
}
interface ManagedAdditionalFee {
    /** Additional fee id. */
    _id?: string;
    /** Additional fee name. */
    name?: TranslatedValue;
    /** Line items additional fee applies to. */
    affectedLineItems?: LineItemAmount[];
    /** Additional fee amount. */
    totalAmount?: Price;
}
interface TotalPriceChange {
    /** Order’s total price after discounts and tax. Before update */
    originalTotal?: Price;
    /** Order’s total price after discounts and tax. After update */
    newTotal?: Price;
}
interface ShippingInformationChange {
    /** Order’s Shipping Information. Before update */
    originalShippingInfo?: ShippingInformation;
    /** Order’s Shipping Information. After update */
    newShippingInfo?: ShippingInformation;
}
interface ShippingInformation {
    /** Order’s shipping price. */
    total?: Price;
    /** Order’s shipping title. */
    shippingTitle?: string;
}
/** Payment method is saved for order */
interface SavedPaymentMethod {
    /** Payment method name */
    name?: string;
    /** Payment method description */
    description?: string | null;
}
interface AuthorizedPaymentCreated {
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
    /** Payment amount */
    amount?: Price;
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface AuthorizedPaymentCaptured {
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
    /** Payment amount */
    amount?: Price;
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface AuthorizedPaymentVoided {
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
    /** Payment amount */
    amount?: Price;
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface RefundInitiated {
    /** Refund ID. */
    refundId?: string;
    /** Refund amount. */
    amount?: Price;
    /** Details about the payments being refunded. */
    payments?: RefundedPayment[];
    /** Reason for refund. */
    reason?: string | null;
}
interface RefundedPayment extends RefundedPaymentKindOneOf {
    /** Regular payment refund. */
    regular?: RegularPaymentRefund;
    /** Gift card payment refund. */
    giftCard?: GiftCardPaymentRefund;
    /** Membership payment refund. */
    membership?: MembershipPaymentRefund;
    /** Payment ID. */
    paymentId?: string;
    /** Whether refund was made externally and manually on the payment provider's side. */
    externalRefund?: boolean;
}
/** @oneof */
interface RefundedPaymentKindOneOf {
    /** Regular payment refund. */
    regular?: RegularPaymentRefund;
    /** Gift card payment refund. */
    giftCard?: GiftCardPaymentRefund;
    /** Membership payment refund. */
    membership?: MembershipPaymentRefund;
}
interface RegularPaymentRefund {
    /** Refund amount */
    amount?: Price;
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface GiftCardPaymentRefund {
    /** Gift card payment ID */
    giftCardPaymentId?: string | null;
    /** Refund amount */
    amount?: Price;
}
interface MembershipPaymentRefund {
    /** Membership ID */
    membershipId?: string | null;
}
interface PaymentRefunded {
    /** Refund ID. */
    refundId?: string;
    /** Details about the refunded payment. */
    payment?: RefundedPayment;
}
interface PaymentRefundFailed {
    /** Refund ID. */
    refundId?: string;
    /** Details about the failed payment refund. */
    payment?: RefundedPayment;
}
interface RefundedAsStoreCredit {
    /** Refund amount */
    amount?: Price;
    /** Reason for refund */
    reason?: string | null;
}
interface PaymentPending extends PaymentPendingPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
}
/** @oneof */
interface PaymentPendingPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
}
interface RegularPayment extends RegularPaymentPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardDetails;
    /** Payment amount */
    amount?: Price;
}
/** @oneof */
interface RegularPaymentPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardDetails;
}
interface CreditCardDetails {
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface PaymentCanceled extends PaymentCanceledPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
}
/** @oneof */
interface PaymentCanceledPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
}
interface PaymentDeclined extends PaymentDeclinedPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
}
/** @oneof */
interface PaymentDeclinedPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
}
declare enum ActivityType {
    ORDER_REFUNDED = "ORDER_REFUNDED",
    ORDER_PLACED = "ORDER_PLACED",
    ORDER_PAID = "ORDER_PAID",
    ORDER_FULFILLED = "ORDER_FULFILLED",
    ORDER_NOT_FULFILLED = "ORDER_NOT_FULFILLED",
    ORDER_CANCELED = "ORDER_CANCELED",
    DOWNLOAD_LINK_SENT = "DOWNLOAD_LINK_SENT",
    TRACKING_NUMBER_ADDED = "TRACKING_NUMBER_ADDED",
    TRACKING_NUMBER_EDITED = "TRACKING_NUMBER_EDITED",
    TRACKING_LINK_ADDED = "TRACKING_LINK_ADDED",
    SHIPPING_CONFIRMATION_EMAIL_SENT = "SHIPPING_CONFIRMATION_EMAIL_SENT",
    INVOICE_ADDED = "INVOICE_ADDED",
    INVOICE_REMOVED = "INVOICE_REMOVED",
    INVOICE_SENT = "INVOICE_SENT",
    FULFILLER_EMAIL_SENT = "FULFILLER_EMAIL_SENT",
    SHIPPING_ADDRESS_EDITED = "SHIPPING_ADDRESS_EDITED",
    EMAIL_EDITED = "EMAIL_EDITED",
    PICKUP_READY_EMAIL_SENT = "PICKUP_READY_EMAIL_SENT",
    CUSTOM_ACTIVITY = "CUSTOM_ACTIVITY",
    MERCHANT_COMMENT = "MERCHANT_COMMENT",
    ORDER_CREATED_FROM_EXCHANGE = "ORDER_CREATED_FROM_EXCHANGE",
    NEW_EXCHANGE_ORDER_CREATED = "NEW_EXCHANGE_ORDER_CREATED",
    ORDER_PARTIALLY_PAID = "ORDER_PARTIALLY_PAID",
    DRAFT_ORDER_CHANGES_APPLIED = "DRAFT_ORDER_CHANGES_APPLIED",
    SAVED_PAYMENT_METHOD = "SAVED_PAYMENT_METHOD"
}
declare enum AttributionSource {
    UNSPECIFIED = "UNSPECIFIED",
    FACEBOOK_ADS = "FACEBOOK_ADS"
}
interface V1CreatedBy extends V1CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
/** @oneof */
interface V1CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
interface ChannelInfo {
    /** Sales channel that submitted the order. */
    type?: ChannelType;
    /** Reference to an order ID from an external system. */
    externalOrderId?: string | null;
    /** URL to the order in the external system. */
    externalOrderUrl?: string | null;
}
declare enum ChannelType {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CustomField$1 {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
interface BalanceSummary {
    /**
     * Current amount left to pay.
     * @readonly
     */
    balance?: Balance;
    /**
     * Sum of all approved and successful payments.
     *
     * The value includes payments that have subsequently been fully or partially refunded.
     * @readonly
     */
    paid?: Price;
    /**
     * Sum of all successfully refunded payments.
     * @readonly
     */
    refunded?: Price;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price;
}
/**
 * Order balance. Reflects amount left to be paid on order and is calculated dynamically. Can be negative per balance definition.
 * `amount` field depends on order payment status:
 * + UNSPECIFIED, NOT_PAID: price_summary.total_price
 * + PARTIALLY_PAID : price_summary.total_price - pay_now.total_price
 * + PENDING, REFUNDED, PARTIALLY_REFUNDED, PAID : 0
 */
interface Balance {
    /**
     * Balance amount.
     *
     * A negative `amount` represents the amount to be refunded. This can happen due to overcharging or the order being modified after a payment has been made.
     * @readonly
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface AdditionalFee {
    /** Additional fee's unique code for future processing. */
    code?: string | null;
    /** Name of additional fee. */
    name?: string;
    /** Additional fee's price. */
    price?: Price;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$1;
    /** SPI implementer's `appId`. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: Price;
    /** Additional fee's price after tax. */
    priceAfterTax?: Price;
    /** Additional fee's id. */
    _id?: string;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface FulfillmentStatusesAggregate {
    /** Unique string values based on Fulfillment entities statuses */
    statuses?: string[] | null;
}
interface ExtendedFields$1 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
/**
 * Common object for tags.
 * Should be use as in this example:
 * message Foo {
 * string id = 1;
 * ...
 * Tags tags = 5
 * }
 *
 * example of taggable entity
 * {
 * id: "123"
 * tags: {
 * tags: {
 * tag_ids:["11","22"]
 * },
 * private_tags: {
 * tag_ids: ["33", "44"]
 * }
 * }
 * }
 */
interface Tags {
    /** Tags that require an additional permission in order to access them, normally not given to site members or visitors. */
    privateTags?: TagList;
    /** Tags that are exposed to anyone who has access to the labeled entity itself, including site members and visitors. */
    tags?: TagList;
}
interface TagList {
    /** List of tag IDs */
    tagIds?: string[];
}
interface GetPaymentSettingsResponse {
    /** Retrieved payment settings. */
    paymentSettings?: PaymentSettings;
}
interface PaymentSettings {
    /**
     * Whether to apply [3D Secure](https://support.wix.com/en/article/about-3d-secure-3ds-payments-with-third-party-payment-providers) during the payment process.
     *
     * > __Note:__
     * > + Not all payment providers offer this feature in their Wix integration.
     * > + If the service plugin call fails, the value set in the [extension configuration](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/payment-settings-integration-spi/introduction#configuration) for `fallbackValueForRequires3dSecure` will be used.
     */
    requires3dSecure?: boolean | null;
}
interface GetPaymentSettingsForCheckoutRequest {
    /** Checkout. */
    checkout?: Checkout;
}
interface Checkout {
    /**
     * Checkout ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Line items.
     *
     * Max: 300 items
     * @readonly
     */
    lineItems?: LineItem$1[];
    /** Billing information. */
    billingInfo?: AddressWithContact$1;
    /** Shipping information. */
    shippingInfo?: ShippingInfo$1;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /**
     * All converted prices are displayed in this currency in three-letter [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Calculated price summary for the checkout.
     * @readonly
     */
    priceSummary?: V1PriceSummary;
    /**
     * Errors when calculating totals.
     * @readonly
     */
    calculationErrors?: CalculationErrors;
    /**
     * Applied gift card details.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     * @readonly
     */
    giftCard?: GiftCard$1;
    /**
     * Applied discounts.
     * @readonly
     */
    appliedDiscounts?: V1AppliedDiscount[];
    /** Custom fields. */
    customFields?: CustomField$1[];
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit$1;
    /**
     * Tax summary.
     * @readonly
     */
    taxSummary?: V1TaxSummary;
    /**
     * The currency used when submitting the order.
     * @readonly
     */
    currency?: string;
    /**
     * Sales channel that submitted the order.
     * + `"UNSPECIFIED"`: Unspecified sales channel. This value is not supported.
     * + `"WEB"`: A web client.
     * + `"POS"`: [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395)
     * + `"EBAY"`: [eBay](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop)
     * + `"AMAZON"`: [Amazon](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop)
     * + `"WISH"`: [Wish](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-a-wish-shop)
     * + `"WIX_INVOICES"`: Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings)
     * + `"WIX_APP_STORE"`: [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview)
     * + `"BACKOFFICE_MERCHANT"`: Wix merchant backoffice
     * + `"OTHER_PLATFORM"`: Other sales platform.
     * @readonly
     */
    channelType?: ChannelType;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string;
    /**
     * Whether an order was successfully created from this checkout.
     * For an order to be successful, it must be successfully paid for (unless the total is 0).
     * @readonly
     */
    completed?: boolean;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrice?: boolean;
    /**
     * ID of the checkout's initiator.
     * @readonly
     */
    createdBy?: CreatedBy;
    /**
     * Date and time the checkout was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the checkout was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: V1PriceSummary;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: V1PriceSummary;
    /** Memberships to apply when creating the order. */
    membershipOptions?: MembershipOptions;
    /** Additional Fees. */
    additionalFees?: V1AdditionalFee[];
    /** Cart ID that this checkout was created from. Empty if this checkout wasn't created from a cart. */
    cartId?: string | null;
    /**
     * List of validation violations raised by the [Validations service plugin](https://dev.wix.com/api/rest/wix-ecommerce/validations-integration-spi/introduction).
     * @readonly
     */
    violations?: Violation$1[];
    /**
     * Custom field data for the checkout object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$1;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /**
     * Additional settings for customization of the checkout process.
     *
     * > **Notes:**
     * > * Custom settings can only be set when [creating a checkout](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/checkout/create-checkout).
     * > * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions". Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customSettings?: CustomSettings;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference;
}
interface LineItem$1 {
    /**
     * Line item ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Item quantity.
     *
     * Min: `"1"`
     * Max: `"100000"`
     */
    quantity?: number;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$1;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName$1;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: string;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice$1;
    /**
     * Total line item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    lineItemPrice?: MultiCurrencyPrice$1;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice$1;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice$1;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: MultiCurrencyPrice$1;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: MultiCurrencyPrice$1;
    /**
     * Tax details for this line item.
     * @readonly
     */
    taxDetails?: V1ItemTaxFullDetails;
    /**
     * Discount for this line item's entire quantity.
     * @readonly
     */
    discount?: MultiCurrencyPrice$1;
    /**
     * Line item description lines. Used for display purposes for the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine[];
    /**
     * Line item image details.
     * @readonly
     */
    media?: string;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties$1;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType$1;
    /**
     * Subscription option information.
     * @readonly
     */
    subscriptionOptionInfo?: SubscriptionOptionInfo$1;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is defined by `lineItem.deposit`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be performed by using a membership and must be manually redeemed in the dashboard by the site owner. When this option is used, `lineItem.price.amount` is `0`.
     * @readonly
     */
    paymentOption?: PaymentOptionType;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field has the same value as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice$1;
    /**
     * Whether the line item is a custom line item. Custom line items don't trigger the Catalog service plugin.
     * @readonly
     */
    customLineItem?: boolean;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface MultiCurrencyPrice$1 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface V1ItemTaxFullDetails {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice$1;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice$1;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown[];
}
interface TaxRateBreakdown {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice$1;
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface TaxBreakdown$1 {
    /** The name of the jurisdiction to which this tax detail applies. For example, "New York" or "Quebec". */
    jurisdiction?: string | null;
    /** The amount of this line item price that was considered nontaxable. (Decimal value) */
    nonTaxableAmount?: MultiCurrencyPrice$1;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.0000 signifies 200% tax. (Decimal value) */
    rate?: string | null;
    /** The amount of tax estimated for this line item. (Decimal value) */
    taxAmount?: MultiCurrencyPrice$1;
    /** The taxable amount of this line item. */
    taxableAmount?: MultiCurrencyPrice$1;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** The type of the jurisdiction in which this tax detail applies. */
    jurisdictionType?: V1JurisdictionType;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum V1JurisdictionType {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface ItemAvailabilityInfo {
    /**
     * Item availability status.
     * + `"NOT_FOUND"`: Item does not exist
     * + `"NOT_AVAILABLE"`: Item not in stock
     * + `"PARTIALLY_AVAILABLE"`: Available quantity is less than requested
     */
    status?: ItemAvailabilityStatus;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus {
    AVAILABLE = "AVAILABLE",
    NOT_FOUND = "NOT_FOUND",
    /** Not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
interface Scope {
    /** Scope namespace (Wix Stores, Wix Bookings, Wix Events, Wix Pricing Plans) */
    namespace?: string;
    /** Coupon scope's applied group (e.g., event or ticket in Wix Events) */
    group?: Group;
}
interface Group {
    /** Coupon scope's group (e.g., product or collection in Wix Stores). See [valid scope values](https://dev.wix.com/api/rest/coupons/coupons/valid-scope-values). */
    name?: string;
    /** Item ID (when the coupon scope is limited to just one item). */
    entityId?: string | null;
}
interface SubscriptionOptionInfo$1 {
    /** Subscription option settings. */
    subscriptionSettings?: V1SubscriptionSettings;
    /** Subscription option title. */
    title?: Title$1;
    /** Subscription option description. */
    description?: Description$1;
}
interface V1SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$1;
    /**
     * Interval of recurring payment.
     *
     * Default: `1`.
     * If SubscriptionFrequency is Day the minimum interval is 7
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal` is `true`. */
    billingCycles?: number | null;
    /**
     * Period until first cycle starts. If applied payNow will be 0
     * If None => no free trial
     */
    freeTrialPeriod?: FreeTrialPeriod$1;
    /** The date the subscription will start. The subscription will be charged either now or according to freeTrialDays. */
    startDate?: Date | null;
    /**
     * Whether to generate an order each billing cycle. An order will always be generated for the first billing cycle.
     * Default None => will behave like true
     */
    generateOrderEachBillingCycle?: boolean | null;
}
interface FreeTrialPeriod$1 {
    /** Frequency of priod. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequency$1;
    /** interval of period */
    interval?: number;
}
interface Title$1 {
    /** Subscription option name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Subscription option name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Description$1 {
    /** Subscription option description. */
    original?: string;
    /** Translated subscription option description. */
    translated?: string | null;
}
interface SecuredMedia {
    /** Media ID in Wix Media Manager. */
    _id?: string;
    /** Original filename. */
    fileName?: string;
    /** File type. */
    fileType?: FileType;
}
declare enum FileType {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
interface ServiceProperties {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface CatalogOverrideFields {
    /** Item name. */
    productName?: ProductName$1;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$1;
    /** Item image. */
    image?: string;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface PaymentOption {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType;
}
interface Policy {
    /** Policy title - should be translated */
    title?: string;
    /** Policy content - should be translated */
    content?: string;
}
/** Billing Info and shipping details */
interface AddressWithContact$1 {
    /** Address. */
    address?: Address$1;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$1;
}
interface ShippingInfo$1 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$1;
    /** Selected option out of the options allowed for the `region`. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption$1;
    /**
     * Shipping region. Based on the address provided.
     * @readonly
     */
    region?: V1ShippingRegion;
    /**
     * All carrier options for this shipping rule.
     * @readonly
     */
    carrierServiceOptions?: CarrierServiceOption[];
}
interface SelectedCarrierServiceOption$1 {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: V1DeliveryLogistics;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices$1;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface V1DeliveryLogistics {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: V1PickupDetails;
}
interface V1PickupDetails {
    /** Pickup address. */
    address?: Address$1;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupDetailsPickupMethod;
}
declare enum PickupDetailsPickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface V1DeliveryTimeSlot {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
interface SelectedCarrierServiceOptionPrices$1 {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$1;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$1;
    /** Tax details. */
    taxDetails?: V1ItemTaxFullDetails;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice$1;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice$1;
}
interface SelectedCarrierServiceOptionOtherCharge {
    /** Type of additional cost. */
    type?: ChargeType;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices$1;
}
declare enum ChargeType {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface V1ShippingRegion {
    /**
     * Shipping region ID.
     * @readonly
     */
    _id?: string;
    /** Shipping region name. */
    name?: string;
}
interface CarrierServiceOption {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption[];
}
interface ShippingOption {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: V1DeliveryLogistics;
    /** Sipping price information. */
    cost?: V1ShippingPrice;
}
interface V1ShippingPrice {
    /** Shipping price. */
    price?: MultiCurrencyPrice$1;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge[];
}
interface OtherCharge {
    /** Type of additional cost. */
    type?: ChargeType;
    /** Price of added cost. */
    price?: MultiCurrencyPrice$1;
}
interface BuyerInfo extends BuyerInfoIdOneOf {
    /**
     * Visitor ID (if site visitor is **not** a member).
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID (if site visitor is a site member).
     * @readonly
     */
    memberId?: string;
    /**
     * Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction).
     * @readonly
     */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf {
    /**
     * Visitor ID (if site visitor is **not** a member).
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID (if site visitor is a site member).
     * @readonly
     */
    memberId?: string;
}
interface V1PriceSummary {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice$1;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice$1;
    /** Total tax. */
    tax?: MultiCurrencyPrice$1;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice$1;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice$1;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice$1;
}
interface CalculationErrors extends CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
    /** Tax calculation error. */
    taxCalculationError?: Details;
    /** Coupon calculation error. */
    couponCalculationError?: Details;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
}
interface Details extends DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError {
    fieldViolations?: FieldViolation[];
}
declare enum RuleType {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation {
    field?: string;
    description?: string;
    violatedRule?: RuleType;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors {
    /** Carrier errors. */
    errors?: CarrierError[];
}
interface CarrierError {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details;
}
interface GiftCard$1 {
    /**
     * Gift Card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice$1;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface V1AppliedDiscount extends V1AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: V1Coupon;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount;
    /** Discount rule */
    discountRule?: V1DiscountRule;
    /** Discount type. */
    discountType?: AppliedDiscountDiscountType;
    /**
     * IDs of line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface V1AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: V1Coupon;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount;
    /** Discount rule */
    discountRule?: V1DiscountRule;
}
declare enum AppliedDiscountDiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface V1Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice$1;
    /** Coupon name. */
    name?: string;
}
interface V1MerchantDiscount {
    /** Discount value. */
    amount?: MultiCurrencyPrice$1;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface V1DiscountRule {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: V1DiscountRuleName;
    /** Discount value. */
    amount?: MultiCurrencyPrice$1;
}
interface V1DiscountRuleName {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface V1LineItemDiscount {
    /** ID of line item the discount applies to. */
    _id?: string;
    /** Discount value. */
    totalDiscountAmount?: MultiCurrencyPrice$1;
}
interface V1TaxSummary {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice$1;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice$1;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails;
}
interface TaxCalculationDetails extends TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
    /** Rate calculation type. */
    rateType?: RateType;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
}
declare enum RateType {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails {
    /** reason for fallback */
    fallbackReason?: FallbackReason;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError;
}
declare enum FallbackReason {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface AggregatedTaxBreakdown {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionTypeEnum?: V1JurisdictionType;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.000 signifies 200% tax. (Decimal value) */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: MultiCurrencyPrice$1;
}
interface CreatedBy extends CreatedByIdOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** @oneof */
interface CreatedByIdOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** Reserved for internal use. */
interface MembershipOptions {
    /**
     * Reserved for internal use.
     * @readonly
     */
    eligibleMemberships?: Membership[];
    /**
     * Reserved for internal use.
     * @readonly
     */
    invalidMemberships?: InvalidMembership[];
    /** Selected membership to apply to this checkout. */
    selectedMemberships?: SelectedMemberships;
}
interface Membership {
    /** Membership ID. */
    _id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface MembershipPaymentCredits {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership {
    /** Membership details. */
    membership?: Membership;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface SelectedMemberships {
    /** Selected memberships. */
    memberships?: SelectedMembership[];
}
interface SelectedMembership {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface V1AdditionalFee {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice$1;
    /** Tax details. */
    taxDetails?: V1ItemTaxFullDetails;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice$1;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice$1;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface ConversionInfo {
    /**
     * The site currency.
     * @readonly
     */
    siteCurrency?: string;
    /**
     * The rate used when converting from the site currency to the checkout currency.
     * @readonly
     */
    conversionRate?: string;
}
interface Violation$1 {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity$1;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target$1;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity$1 {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target$1 extends TargetTargetTypeOneOf$1 {
    /** General (other) violation. */
    other?: Other$1;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$1;
}
/** @oneof */
interface TargetTargetTypeOneOf$1 {
    /** General (other) violation. */
    other?: Other$1;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$1;
}
/** Available locations on the webpage */
declare enum NameInOther$1 {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem$1 {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix$1 {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other$1 {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther$1;
}
/** Specific line item violation. */
interface TargetLineItem$1 {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem$1;
    /** ID of the line item containing the violation. */
    _id?: string | null;
}
interface CustomSettings {
    /**
     * Whether to restrict the option to add or remove a gift card on the checkout page.
     *
     * Default: `false`
     */
    lockGiftCard?: boolean;
    /**
     * Whether to restrict the option to add or remove a coupon code on the checkout page.
     *
     * Default: `false`
     */
    lockCouponCode?: boolean;
    /**
     * Whether to disable policy agreement checkout in the checkout page
     *
     * Default: `false`
     */
    disabledPolicyAgreementCheckbox?: boolean;
    /**
     * Whether to disable manual payment option for this checkout.
     *
     * Default: `false`
     */
    disabledManualPayment?: boolean;
}
interface CustomContentReference {
    /**
     * ID of the app providing the content.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    appId?: string;
    /**
     * ID of the component within the app it belongs to.
     *
     * You can get your component's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    componentId?: string;
}
interface ExternalReference$1 {
    /**
     * ID of the app associated with the purchase flow.
     * For example, the Wix Pay Links app ID.
     */
    appId?: string;
    /**
     * Reference to an external resource ID. Used to link the purchase flow to a specific entity in an external system.
     * For example, a Wix Pay Link ID.
     */
    resourceId?: string | null;
}
interface GetPaymentSettingsForCheckoutResponse {
    /** Blocked payment options. */
    blockedPaymentOptions?: V1PaymentOption[];
}
declare enum V1PaymentOption {
    UNKNOWN_PAYMENT_OPTION = "UNKNOWN_PAYMENT_OPTION",
    MANUAL = "MANUAL"
}
interface PaymentSettingsSPIConfig {
    /**
     * *Required.** Base URI where the endpoints are called. Wix eCommerce appends the endpoint path to the base URI.
     * For example, to call the Get Payment Settings endpoint at `https://my-payment-settings.com/v1/payment-settings`,
     * the base URI you provide here is `https://my-payment-settings.com/`.
     */
    deploymentUri?: string;
    /**
     * The value to set for `paymentSettings.requires3dSecure` if the service plugin call fails.
     *
     * Default: `false`
     */
    fallbackValueForRequires3dSecure?: boolean;
    /**
     * `true` if SPI implementer provides payments settings for checkout
     *
     * Default: `false`
     */
    providePaymentsSettingsForCheckout?: boolean;
}
/**
 * this message is not directly used by any service,
 * it exists to describe the expected parameters that SHOULD be provided to invoked Velo methods as part of open-platform.
 * e.g. SPIs, event-handlers, etc..
 * NOTE: this context object MUST be provided as the last argument in each Velo method signature.
 *
 * Example:
 * ```typescript
 * export function wixStores_onOrderCanceled({ event, metadata }: OrderCanceledEvent) {
 * ...
 * }
 * ```
 */
interface Context$1 {
    /** A unique identifier of the request. You may print this ID to your logs to help with future debugging and easier correlation with Wix's logs. */
    requestId?: string | null;
    /** [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) 3-letter currency code. */
    currency?: string | null;
    /** An object that describes the identity that triggered this request. */
    identity?: IdentificationData$1;
    /** A string representing a language and region in the format of `"xx-XX"`. First 2 letters represent the language code according to ISO 639-1. This is followed by a dash "-", and then a by 2 capital letters representing the region according to ISO 3166-2. For example, `"en-US"`. */
    languages?: string[];
    /** The service provider app's instance ID. */
    instanceId?: string | null;
}
declare enum IdentityType$1 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface IdentificationData$1 extends IdentificationDataIdOneOf$1 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: IdentityType$1;
}
/** @oneof */
interface IdentificationDataIdOneOf$1 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}

interface GetPaymentSettingsEnvelope {
    request: GetPaymentSettingsRequest;
    metadata: Context$1;
}
interface GetPaymentSettingsForCheckoutEnvelope {
    request: GetPaymentSettingsForCheckoutRequest;
    metadata: Context$1;
}
declare const provideHandlers$3: ServicePluginDefinition<{
    /**
     *
     * This method retrieves payment settings from your app.
     *
     * Wix calls this method during the payment process. For example, when a customer inserts credit card details and places an order.
     * This method retrieves the payment settings to apply, and Wix passes on the settings to the payment provider. */
    getPaymentSettings(payload: GetPaymentSettingsEnvelope): GetPaymentSettingsResponse | Promise<GetPaymentSettingsResponse>;
    /**
     * Returns payment settings for provided Checkout entity. */
    getPaymentSettingsForCheckout(payload: GetPaymentSettingsForCheckoutEnvelope): GetPaymentSettingsForCheckoutResponse | Promise<GetPaymentSettingsForCheckoutResponse>;
}>;

declare function createServicePluginModule$1<T extends ServicePluginDefinition<any>>(servicePluginDefinition: T): BuildServicePluginDefinition<T> & T;

type _publicProvideHandlersType$1 = typeof provideHandlers$3;
declare const provideHandlers$2: ReturnType<typeof createServicePluginModule$1<_publicProvideHandlersType>>;

type index_d$1_Activity = Activity;
type index_d$1_ActivityContentOneOf = ActivityContentOneOf;
type index_d$1_ActivityType = ActivityType;
declare const index_d$1_ActivityType: typeof ActivityType;
type index_d$1_AdditionalFee = AdditionalFee;
type index_d$1_AggregatedTaxBreakdown = AggregatedTaxBreakdown;
type index_d$1_ApiAddressWithContact = ApiAddressWithContact;
type index_d$1_ApplicationError = ApplicationError;
type index_d$1_AppliedDiscountDiscountType = AppliedDiscountDiscountType;
declare const index_d$1_AppliedDiscountDiscountType: typeof AppliedDiscountDiscountType;
type index_d$1_AttributionSource = AttributionSource;
declare const index_d$1_AttributionSource: typeof AttributionSource;
type index_d$1_AuthorizedPaymentCaptured = AuthorizedPaymentCaptured;
type index_d$1_AuthorizedPaymentCreated = AuthorizedPaymentCreated;
type index_d$1_AuthorizedPaymentVoided = AuthorizedPaymentVoided;
type index_d$1_AutoTaxFallbackCalculationDetails = AutoTaxFallbackCalculationDetails;
type index_d$1_Balance = Balance;
type index_d$1_BalanceSummary = BalanceSummary;
type index_d$1_BuyerInfo = BuyerInfo;
type index_d$1_BuyerInfoIdOneOf = BuyerInfoIdOneOf;
type index_d$1_CalculationErrors = CalculationErrors;
type index_d$1_CalculationErrorsShippingCalculationErrorOneOf = CalculationErrorsShippingCalculationErrorOneOf;
type index_d$1_CarrierError = CarrierError;
type index_d$1_CarrierErrors = CarrierErrors;
type index_d$1_CarrierServiceOption = CarrierServiceOption;
type index_d$1_CatalogOverrideFields = CatalogOverrideFields;
type index_d$1_ChannelInfo = ChannelInfo;
type index_d$1_ChannelType = ChannelType;
declare const index_d$1_ChannelType: typeof ChannelType;
type index_d$1_ChargeType = ChargeType;
declare const index_d$1_ChargeType: typeof ChargeType;
type index_d$1_Checkout = Checkout;
type index_d$1_Color = Color;
type index_d$1_ConversionInfo = ConversionInfo;
type index_d$1_CreatedBy = CreatedBy;
type index_d$1_CreatedByIdOneOf = CreatedByIdOneOf;
type index_d$1_CreditCardDetails = CreditCardDetails;
type index_d$1_CustomActivity = CustomActivity;
type index_d$1_CustomContentReference = CustomContentReference;
type index_d$1_CustomSettings = CustomSettings;
type index_d$1_DeliveryLogistics = DeliveryLogistics;
type index_d$1_DeliveryLogisticsAddressOneOf = DeliveryLogisticsAddressOneOf;
type index_d$1_DeliveryTimeSlot = DeliveryTimeSlot;
type index_d$1_DescriptionLine = DescriptionLine;
type index_d$1_DescriptionLineDescriptionLineValueOneOf = DescriptionLineDescriptionLineValueOneOf;
type index_d$1_DescriptionLineName = DescriptionLineName;
type index_d$1_DescriptionLineType = DescriptionLineType;
declare const index_d$1_DescriptionLineType: typeof DescriptionLineType;
type index_d$1_DescriptionLineValueOneOf = DescriptionLineValueOneOf;
type index_d$1_Details = Details;
type index_d$1_DetailsKindOneOf = DetailsKindOneOf;
type index_d$1_DigitalFile = DigitalFile;
type index_d$1_DiscountReason = DiscountReason;
declare const index_d$1_DiscountReason: typeof DiscountReason;
type index_d$1_DraftOrderChangesApplied = DraftOrderChangesApplied;
type index_d$1_FallbackReason = FallbackReason;
declare const index_d$1_FallbackReason: typeof FallbackReason;
type index_d$1_FieldViolation = FieldViolation;
type index_d$1_FileType = FileType;
declare const index_d$1_FileType: typeof FileType;
type index_d$1_FulfillmentStatus = FulfillmentStatus;
declare const index_d$1_FulfillmentStatus: typeof FulfillmentStatus;
type index_d$1_FulfillmentStatusesAggregate = FulfillmentStatusesAggregate;
type index_d$1_GetPaymentSettingsForCheckoutRequest = GetPaymentSettingsForCheckoutRequest;
type index_d$1_GetPaymentSettingsForCheckoutResponse = GetPaymentSettingsForCheckoutResponse;
type index_d$1_GetPaymentSettingsRequest = GetPaymentSettingsRequest;
type index_d$1_GetPaymentSettingsResponse = GetPaymentSettingsResponse;
type index_d$1_GiftCardPaymentRefund = GiftCardPaymentRefund;
type index_d$1_Group = Group;
type index_d$1_InvalidMembership = InvalidMembership;
type index_d$1_ItemAvailabilityInfo = ItemAvailabilityInfo;
type index_d$1_ItemAvailabilityStatus = ItemAvailabilityStatus;
declare const index_d$1_ItemAvailabilityStatus: typeof ItemAvailabilityStatus;
type index_d$1_LineItemAmount = LineItemAmount;
type index_d$1_LineItemChanges = LineItemChanges;
type index_d$1_LineItemDiscount = LineItemDiscount;
type index_d$1_LineItemExchangeData = LineItemExchangeData;
type index_d$1_LineItemPriceChange = LineItemPriceChange;
type index_d$1_LineItemQuantityChange = LineItemQuantityChange;
type index_d$1_LineItemQuantityChangeType = LineItemQuantityChangeType;
declare const index_d$1_LineItemQuantityChangeType: typeof LineItemQuantityChangeType;
type index_d$1_LineItemTaxBreakdown = LineItemTaxBreakdown;
type index_d$1_LineItemTaxInfo = LineItemTaxInfo;
type index_d$1_LocationAndQuantity = LocationAndQuantity;
type index_d$1_ManagedAdditionalFee = ManagedAdditionalFee;
type index_d$1_ManagedDiscount = ManagedDiscount;
type index_d$1_ManagedLineItem = ManagedLineItem;
type index_d$1_ManualCalculationReason = ManualCalculationReason;
declare const index_d$1_ManualCalculationReason: typeof ManualCalculationReason;
type index_d$1_Membership = Membership;
type index_d$1_MembershipName = MembershipName;
type index_d$1_MembershipOptions = MembershipOptions;
type index_d$1_MembershipPaymentCredits = MembershipPaymentCredits;
type index_d$1_MembershipPaymentRefund = MembershipPaymentRefund;
type index_d$1_MerchantComment = MerchantComment;
type index_d$1_MerchantDiscountMerchantDiscountReasonOneOf = MerchantDiscountMerchantDiscountReasonOneOf;
type index_d$1_NewExchangeOrderCreated = NewExchangeOrderCreated;
type index_d$1_Order = Order;
type index_d$1_OrderChange = OrderChange;
type index_d$1_OrderChangeValueOneOf = OrderChangeValueOneOf;
type index_d$1_OrderCreatedFromExchange = OrderCreatedFromExchange;
type index_d$1_OrderLineItem = OrderLineItem;
type index_d$1_OrderRefunded = OrderRefunded;
type index_d$1_OrderStatus = OrderStatus;
declare const index_d$1_OrderStatus: typeof OrderStatus;
type index_d$1_OrderTaxBreakdown = OrderTaxBreakdown;
type index_d$1_OrderTaxInfo = OrderTaxInfo;
type index_d$1_OtherCharge = OtherCharge;
type index_d$1_PaymentCanceled = PaymentCanceled;
type index_d$1_PaymentCanceledPaymentDetailsOneOf = PaymentCanceledPaymentDetailsOneOf;
type index_d$1_PaymentDeclined = PaymentDeclined;
type index_d$1_PaymentDeclinedPaymentDetailsOneOf = PaymentDeclinedPaymentDetailsOneOf;
type index_d$1_PaymentOption = PaymentOption;
type index_d$1_PaymentOptionType = PaymentOptionType;
declare const index_d$1_PaymentOptionType: typeof PaymentOptionType;
type index_d$1_PaymentPending = PaymentPending;
type index_d$1_PaymentPendingPaymentDetailsOneOf = PaymentPendingPaymentDetailsOneOf;
type index_d$1_PaymentRefundFailed = PaymentRefundFailed;
type index_d$1_PaymentRefunded = PaymentRefunded;
type index_d$1_PaymentSettings = PaymentSettings;
type index_d$1_PaymentSettingsSPIConfig = PaymentSettingsSPIConfig;
type index_d$1_PaymentStatus = PaymentStatus;
declare const index_d$1_PaymentStatus: typeof PaymentStatus;
type index_d$1_PickupAddress = PickupAddress;
type index_d$1_PickupDetails = PickupDetails;
type index_d$1_PickupDetailsPickupMethod = PickupDetailsPickupMethod;
declare const index_d$1_PickupDetailsPickupMethod: typeof PickupDetailsPickupMethod;
type index_d$1_PickupMethod = PickupMethod;
declare const index_d$1_PickupMethod: typeof PickupMethod;
type index_d$1_PlainTextValue = PlainTextValue;
type index_d$1_Policy = Policy;
type index_d$1_Price = Price;
type index_d$1_PriceDescription = PriceDescription;
type index_d$1_RateType = RateType;
declare const index_d$1_RateType: typeof RateType;
type index_d$1_RefundInitiated = RefundInitiated;
type index_d$1_RefundedAsStoreCredit = RefundedAsStoreCredit;
type index_d$1_RefundedPayment = RefundedPayment;
type index_d$1_RefundedPaymentKindOneOf = RefundedPaymentKindOneOf;
type index_d$1_RegularPayment = RegularPayment;
type index_d$1_RegularPaymentPaymentMethodDetailsOneOf = RegularPaymentPaymentMethodDetailsOneOf;
type index_d$1_RegularPaymentRefund = RegularPaymentRefund;
type index_d$1_RuleType = RuleType;
declare const index_d$1_RuleType: typeof RuleType;
type index_d$1_SavedPaymentMethod = SavedPaymentMethod;
type index_d$1_Scope = Scope;
type index_d$1_SecuredMedia = SecuredMedia;
type index_d$1_SelectedCarrierServiceOptionOtherCharge = SelectedCarrierServiceOptionOtherCharge;
type index_d$1_SelectedMembership = SelectedMembership;
type index_d$1_SelectedMemberships = SelectedMemberships;
type index_d$1_ServiceProperties = ServiceProperties;
type index_d$1_ShippingInformation = ShippingInformation;
type index_d$1_ShippingInformationChange = ShippingInformationChange;
type index_d$1_ShippingOption = ShippingOption;
type index_d$1_ShippingPrice = ShippingPrice;
type index_d$1_ShippingRegion = ShippingRegion;
type index_d$1_SubscriptionInfo = SubscriptionInfo;
type index_d$1_SystemError = SystemError;
type index_d$1_TagList = TagList;
type index_d$1_Tags = Tags;
type index_d$1_TaxCalculationDetails = TaxCalculationDetails;
type index_d$1_TaxCalculationDetailsCalculationDetailsOneOf = TaxCalculationDetailsCalculationDetailsOneOf;
type index_d$1_TaxRateBreakdown = TaxRateBreakdown;
type index_d$1_TaxSummary = TaxSummary;
type index_d$1_TaxableAddress = TaxableAddress;
type index_d$1_TaxableAddressTaxableAddressDataOneOf = TaxableAddressTaxableAddressDataOneOf;
type index_d$1_TaxableAddressType = TaxableAddressType;
declare const index_d$1_TaxableAddressType: typeof TaxableAddressType;
type index_d$1_TotalPriceChange = TotalPriceChange;
type index_d$1_TranslatedValue = TranslatedValue;
type index_d$1_V1AdditionalFee = V1AdditionalFee;
type index_d$1_V1AppliedDiscount = V1AppliedDiscount;
type index_d$1_V1AppliedDiscountDiscountSourceOneOf = V1AppliedDiscountDiscountSourceOneOf;
type index_d$1_V1BuyerInfo = V1BuyerInfo;
type index_d$1_V1BuyerInfoIdOneOf = V1BuyerInfoIdOneOf;
type index_d$1_V1Coupon = V1Coupon;
type index_d$1_V1CreatedBy = V1CreatedBy;
type index_d$1_V1CreatedByStringOneOf = V1CreatedByStringOneOf;
type index_d$1_V1DeliveryLogistics = V1DeliveryLogistics;
type index_d$1_V1DeliveryTimeSlot = V1DeliveryTimeSlot;
type index_d$1_V1DiscountRule = V1DiscountRule;
type index_d$1_V1DiscountRuleName = V1DiscountRuleName;
type index_d$1_V1ItemTaxFullDetails = V1ItemTaxFullDetails;
type index_d$1_V1JurisdictionType = V1JurisdictionType;
declare const index_d$1_V1JurisdictionType: typeof V1JurisdictionType;
type index_d$1_V1LineItemDiscount = V1LineItemDiscount;
type index_d$1_V1MerchantDiscount = V1MerchantDiscount;
type index_d$1_V1PaymentOption = V1PaymentOption;
declare const index_d$1_V1PaymentOption: typeof V1PaymentOption;
type index_d$1_V1PickupDetails = V1PickupDetails;
type index_d$1_V1PriceSummary = V1PriceSummary;
type index_d$1_V1ShippingInformation = V1ShippingInformation;
type index_d$1_V1ShippingPrice = V1ShippingPrice;
type index_d$1_V1ShippingRegion = V1ShippingRegion;
type index_d$1_V1SubscriptionSettings = V1SubscriptionSettings;
type index_d$1_V1TaxSummary = V1TaxSummary;
type index_d$1_ValidationError = ValidationError;
declare namespace index_d$1 {
  export { type index_d$1_Activity as Activity, type index_d$1_ActivityContentOneOf as ActivityContentOneOf, index_d$1_ActivityType as ActivityType, type index_d$1_AdditionalFee as AdditionalFee, type Address$1 as Address, type AddressLocation$1 as AddressLocation, type AddressWithContact$1 as AddressWithContact, type index_d$1_AggregatedTaxBreakdown as AggregatedTaxBreakdown, type index_d$1_ApiAddressWithContact as ApiAddressWithContact, type index_d$1_ApplicationError as ApplicationError, type AppliedDiscount$1 as AppliedDiscount, type AppliedDiscountDiscountSourceOneOf$1 as AppliedDiscountDiscountSourceOneOf, index_d$1_AppliedDiscountDiscountType as AppliedDiscountDiscountType, index_d$1_AttributionSource as AttributionSource, type index_d$1_AuthorizedPaymentCaptured as AuthorizedPaymentCaptured, type index_d$1_AuthorizedPaymentCreated as AuthorizedPaymentCreated, type index_d$1_AuthorizedPaymentVoided as AuthorizedPaymentVoided, type index_d$1_AutoTaxFallbackCalculationDetails as AutoTaxFallbackCalculationDetails, type index_d$1_Balance as Balance, type index_d$1_BalanceSummary as BalanceSummary, type index_d$1_BuyerInfo as BuyerInfo, type index_d$1_BuyerInfoIdOneOf as BuyerInfoIdOneOf, type index_d$1_CalculationErrors as CalculationErrors, type index_d$1_CalculationErrorsShippingCalculationErrorOneOf as CalculationErrorsShippingCalculationErrorOneOf, type index_d$1_CarrierError as CarrierError, type index_d$1_CarrierErrors as CarrierErrors, type index_d$1_CarrierServiceOption as CarrierServiceOption, type index_d$1_CatalogOverrideFields as CatalogOverrideFields, type CatalogReference$1 as CatalogReference, type index_d$1_ChannelInfo as ChannelInfo, index_d$1_ChannelType as ChannelType, index_d$1_ChargeType as ChargeType, type index_d$1_Checkout as Checkout, type index_d$1_Color as Color, type Context$1 as Context, type index_d$1_ConversionInfo as ConversionInfo, type Coupon$1 as Coupon, type index_d$1_CreatedBy as CreatedBy, type index_d$1_CreatedByIdOneOf as CreatedByIdOneOf, type index_d$1_CreditCardDetails as CreditCardDetails, type index_d$1_CustomActivity as CustomActivity, type index_d$1_CustomContentReference as CustomContentReference, type CustomField$1 as CustomField, type index_d$1_CustomSettings as CustomSettings, type index_d$1_DeliveryLogistics as DeliveryLogistics, type index_d$1_DeliveryLogisticsAddressOneOf as DeliveryLogisticsAddressOneOf, type index_d$1_DeliveryTimeSlot as DeliveryTimeSlot, type Description$1 as Description, type index_d$1_DescriptionLine as DescriptionLine, type index_d$1_DescriptionLineDescriptionLineValueOneOf as DescriptionLineDescriptionLineValueOneOf, type index_d$1_DescriptionLineName as DescriptionLineName, index_d$1_DescriptionLineType as DescriptionLineType, type index_d$1_DescriptionLineValueOneOf as DescriptionLineValueOneOf, type index_d$1_Details as Details, type index_d$1_DetailsKindOneOf as DetailsKindOneOf, type index_d$1_DigitalFile as DigitalFile, index_d$1_DiscountReason as DiscountReason, type DiscountRule$1 as DiscountRule, type DiscountRuleName$1 as DiscountRuleName, DiscountType$1 as DiscountType, type index_d$1_DraftOrderChangesApplied as DraftOrderChangesApplied, type ExtendedFields$1 as ExtendedFields, type ExternalReference$1 as ExternalReference, index_d$1_FallbackReason as FallbackReason, type index_d$1_FieldViolation as FieldViolation, index_d$1_FileType as FileType, type FreeTrialPeriod$1 as FreeTrialPeriod, index_d$1_FulfillmentStatus as FulfillmentStatus, type index_d$1_FulfillmentStatusesAggregate as FulfillmentStatusesAggregate, type FullAddressContactDetails$1 as FullAddressContactDetails, type index_d$1_GetPaymentSettingsForCheckoutRequest as GetPaymentSettingsForCheckoutRequest, type index_d$1_GetPaymentSettingsForCheckoutResponse as GetPaymentSettingsForCheckoutResponse, type index_d$1_GetPaymentSettingsRequest as GetPaymentSettingsRequest, type index_d$1_GetPaymentSettingsResponse as GetPaymentSettingsResponse, type GiftCard$1 as GiftCard, type index_d$1_GiftCardPaymentRefund as GiftCardPaymentRefund, type index_d$1_Group as Group, type IdentificationData$1 as IdentificationData, type IdentificationDataIdOneOf$1 as IdentificationDataIdOneOf, IdentityType$1 as IdentityType, type index_d$1_InvalidMembership as InvalidMembership, type index_d$1_ItemAvailabilityInfo as ItemAvailabilityInfo, index_d$1_ItemAvailabilityStatus as ItemAvailabilityStatus, type ItemTaxFullDetails$1 as ItemTaxFullDetails, type ItemType$1 as ItemType, ItemTypeItemType$1 as ItemTypeItemType, type ItemTypeItemTypeDataOneOf$1 as ItemTypeItemTypeDataOneOf, JurisdictionType$1 as JurisdictionType, type LineItem$1 as LineItem, type index_d$1_LineItemAmount as LineItemAmount, type index_d$1_LineItemChanges as LineItemChanges, type index_d$1_LineItemDiscount as LineItemDiscount, type index_d$1_LineItemExchangeData as LineItemExchangeData, type index_d$1_LineItemPriceChange as LineItemPriceChange, type index_d$1_LineItemQuantityChange as LineItemQuantityChange, index_d$1_LineItemQuantityChangeType as LineItemQuantityChangeType, type index_d$1_LineItemTaxBreakdown as LineItemTaxBreakdown, type index_d$1_LineItemTaxInfo as LineItemTaxInfo, type index_d$1_LocationAndQuantity as LocationAndQuantity, type index_d$1_ManagedAdditionalFee as ManagedAdditionalFee, type index_d$1_ManagedDiscount as ManagedDiscount, type index_d$1_ManagedLineItem as ManagedLineItem, index_d$1_ManualCalculationReason as ManualCalculationReason, type index_d$1_Membership as Membership, type index_d$1_MembershipName as MembershipName, type index_d$1_MembershipOptions as MembershipOptions, type index_d$1_MembershipPaymentCredits as MembershipPaymentCredits, type index_d$1_MembershipPaymentRefund as MembershipPaymentRefund, type index_d$1_MerchantComment as MerchantComment, type MerchantDiscount$1 as MerchantDiscount, type index_d$1_MerchantDiscountMerchantDiscountReasonOneOf as MerchantDiscountMerchantDiscountReasonOneOf, type MultiCurrencyPrice$1 as MultiCurrencyPrice, NameInLineItem$1 as NameInLineItem, NameInOther$1 as NameInOther, type index_d$1_NewExchangeOrderCreated as NewExchangeOrderCreated, type index_d$1_Order as Order, type index_d$1_OrderChange as OrderChange, type index_d$1_OrderChangeValueOneOf as OrderChangeValueOneOf, type index_d$1_OrderCreatedFromExchange as OrderCreatedFromExchange, type index_d$1_OrderLineItem as OrderLineItem, type index_d$1_OrderRefunded as OrderRefunded, index_d$1_OrderStatus as OrderStatus, type index_d$1_OrderTaxBreakdown as OrderTaxBreakdown, type index_d$1_OrderTaxInfo as OrderTaxInfo, type Other$1 as Other, type index_d$1_OtherCharge as OtherCharge, type index_d$1_PaymentCanceled as PaymentCanceled, type index_d$1_PaymentCanceledPaymentDetailsOneOf as PaymentCanceledPaymentDetailsOneOf, type index_d$1_PaymentDeclined as PaymentDeclined, type index_d$1_PaymentDeclinedPaymentDetailsOneOf as PaymentDeclinedPaymentDetailsOneOf, type index_d$1_PaymentOption as PaymentOption, index_d$1_PaymentOptionType as PaymentOptionType, type index_d$1_PaymentPending as PaymentPending, type index_d$1_PaymentPendingPaymentDetailsOneOf as PaymentPendingPaymentDetailsOneOf, type index_d$1_PaymentRefundFailed as PaymentRefundFailed, type index_d$1_PaymentRefunded as PaymentRefunded, type index_d$1_PaymentSettings as PaymentSettings, type index_d$1_PaymentSettingsSPIConfig as PaymentSettingsSPIConfig, index_d$1_PaymentStatus as PaymentStatus, type PhysicalProperties$1 as PhysicalProperties, type index_d$1_PickupAddress as PickupAddress, type index_d$1_PickupDetails as PickupDetails, index_d$1_PickupDetailsPickupMethod as PickupDetailsPickupMethod, index_d$1_PickupMethod as PickupMethod, type index_d$1_PlainTextValue as PlainTextValue, type index_d$1_Policy as Policy, type index_d$1_Price as Price, type index_d$1_PriceDescription as PriceDescription, type PriceSummary$1 as PriceSummary, type ProductName$1 as ProductName, index_d$1_RateType as RateType, type index_d$1_RefundInitiated as RefundInitiated, type index_d$1_RefundedAsStoreCredit as RefundedAsStoreCredit, type index_d$1_RefundedPayment as RefundedPayment, type index_d$1_RefundedPaymentKindOneOf as RefundedPaymentKindOneOf, type index_d$1_RegularPayment as RegularPayment, type index_d$1_RegularPaymentPaymentMethodDetailsOneOf as RegularPaymentPaymentMethodDetailsOneOf, type index_d$1_RegularPaymentRefund as RegularPaymentRefund, index_d$1_RuleType as RuleType, type index_d$1_SavedPaymentMethod as SavedPaymentMethod, type index_d$1_Scope as Scope, type index_d$1_SecuredMedia as SecuredMedia, type SelectedCarrierServiceOption$1 as SelectedCarrierServiceOption, type index_d$1_SelectedCarrierServiceOptionOtherCharge as SelectedCarrierServiceOptionOtherCharge, type SelectedCarrierServiceOptionPrices$1 as SelectedCarrierServiceOptionPrices, type index_d$1_SelectedMembership as SelectedMembership, type index_d$1_SelectedMemberships as SelectedMemberships, type index_d$1_ServiceProperties as ServiceProperties, Severity$1 as Severity, type ShippingInfo$1 as ShippingInfo, type index_d$1_ShippingInformation as ShippingInformation, type index_d$1_ShippingInformationChange as ShippingInformationChange, type index_d$1_ShippingOption as ShippingOption, type index_d$1_ShippingPrice as ShippingPrice, type index_d$1_ShippingRegion as ShippingRegion, type StreetAddress$1 as StreetAddress, SubscriptionFrequency$1 as SubscriptionFrequency, type index_d$1_SubscriptionInfo as SubscriptionInfo, type SubscriptionOptionInfo$1 as SubscriptionOptionInfo, type SubscriptionSettings$1 as SubscriptionSettings, SuggestedFix$1 as SuggestedFix, type index_d$1_SystemError as SystemError, type index_d$1_TagList as TagList, type index_d$1_Tags as Tags, type Target$1 as Target, type TargetLineItem$1 as TargetLineItem, type TargetTargetTypeOneOf$1 as TargetTargetTypeOneOf, type TaxBreakdown$1 as TaxBreakdown, type index_d$1_TaxCalculationDetails as TaxCalculationDetails, type index_d$1_TaxCalculationDetailsCalculationDetailsOneOf as TaxCalculationDetailsCalculationDetailsOneOf, type index_d$1_TaxRateBreakdown as TaxRateBreakdown, type index_d$1_TaxSummary as TaxSummary, type index_d$1_TaxableAddress as TaxableAddress, type index_d$1_TaxableAddressTaxableAddressDataOneOf as TaxableAddressTaxableAddressDataOneOf, index_d$1_TaxableAddressType as TaxableAddressType, type Title$1 as Title, type index_d$1_TotalPriceChange as TotalPriceChange, type index_d$1_TranslatedValue as TranslatedValue, type index_d$1_V1AdditionalFee as V1AdditionalFee, type index_d$1_V1AppliedDiscount as V1AppliedDiscount, type index_d$1_V1AppliedDiscountDiscountSourceOneOf as V1AppliedDiscountDiscountSourceOneOf, type index_d$1_V1BuyerInfo as V1BuyerInfo, type index_d$1_V1BuyerInfoIdOneOf as V1BuyerInfoIdOneOf, type index_d$1_V1Coupon as V1Coupon, type index_d$1_V1CreatedBy as V1CreatedBy, type index_d$1_V1CreatedByStringOneOf as V1CreatedByStringOneOf, type index_d$1_V1DeliveryLogistics as V1DeliveryLogistics, type index_d$1_V1DeliveryTimeSlot as V1DeliveryTimeSlot, type index_d$1_V1DiscountRule as V1DiscountRule, type index_d$1_V1DiscountRuleName as V1DiscountRuleName, type index_d$1_V1ItemTaxFullDetails as V1ItemTaxFullDetails, index_d$1_V1JurisdictionType as V1JurisdictionType, type index_d$1_V1LineItemDiscount as V1LineItemDiscount, type index_d$1_V1MerchantDiscount as V1MerchantDiscount, index_d$1_V1PaymentOption as V1PaymentOption, type index_d$1_V1PickupDetails as V1PickupDetails, type index_d$1_V1PriceSummary as V1PriceSummary, type index_d$1_V1ShippingInformation as V1ShippingInformation, type index_d$1_V1ShippingPrice as V1ShippingPrice, type index_d$1_V1ShippingRegion as V1ShippingRegion, type index_d$1_V1SubscriptionSettings as V1SubscriptionSettings, type index_d$1_V1TaxSummary as V1TaxSummary, type index_d$1_ValidationError as ValidationError, type VatId$1 as VatId, VatType$1 as VatType, type Violation$1 as Violation, WeightUnit$1 as WeightUnit, type _publicProvideHandlersType$1 as _publicProvideHandlersType, provideHandlers$2 as provideHandlers, provideHandlers$3 as publicProvideHandlers };
}

interface GetValidationViolationsRequest {
    /** Information about the source of the request. */
    sourceInfo?: SourceInfo;
    /** Information to validate. */
    validationInfo?: ValidationInfo;
}
interface SourceInfo {
    /** Source of the request. */
    source?: Source;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    /** The stage at which the service plugin is called. */
    stage?: Stage;
}
declare enum Source {
    /** Context cannot be recognized */
    OTHER = "OTHER",
    /** Called from Ecom's Cart service */
    CART = "CART",
    /** Called from Ecom's Checkout service */
    CHECKOUT = "CHECKOUT"
}
interface Stage extends StageStagesOneOf {
    /**
     * Supported values:
     * + "INITIALIZATION":Used during the initialization of the checkout (Create Checkout).
     * + "IN_PROGRESS": Used during the checkout process, such as updating or retrieving the checkout.
     * + "ORDER_CREATION": Used during the creation of an order from the checkout.
     */
    checkoutStage?: CheckoutStage;
}
/** @oneof */
interface StageStagesOneOf {
    /**
     * Supported values:
     * + "INITIALIZATION":Used during the initialization of the checkout (Create Checkout).
     * + "IN_PROGRESS": Used during the checkout process, such as updating or retrieving the checkout.
     * + "ORDER_CREATION": Used during the creation of an order from the checkout.
     */
    checkoutStage?: CheckoutStage;
}
declare enum CheckoutStage {
    UNKNOWN_CHECKOUT_STAGE = "UNKNOWN_CHECKOUT_STAGE",
    INITIALIZATION = "INITIALIZATION",
    IN_PROGRESS = "IN_PROGRESS",
    ORDER_CREATION = "ORDER_CREATION"
}
/** ValidationsData is the main entity of ValidationsSPI, which contains all the data required for validations */
interface ValidationInfo {
    /** Buyer details. */
    buyerDetails?: BuyerDetails;
    /** Line items. Max: 300 line items */
    lineItems?: LineItem[];
    /**
     * Applied gift card details.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     */
    giftCard?: GiftCard;
    /**
     * Weight measurement unit.
     * Default: Site's weight unit
     */
    weightUnit?: WeightUnit;
    /** Price summary. */
    priceSummary?: PriceSummary;
    /** Billing information. */
    billingInfo?: AddressWithContact;
    /** Shipping address and contact details. */
    shippingAddress?: AddressWithContact;
    /** Shipping information. */
    shippingInfo?: ShippingInfo;
    /** Custom fields. */
    customFields?: CustomFields;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount[];
}
interface BuyerDetails {
    /** Buyer's email address. */
    email?: string | null;
    /** Contact ID if one exists. */
    contactId?: string | null;
}
interface LineItem {
    /** Line item ID. */
    _id?: string | null;
    /**
     * Item quantity.
     * Min: `0`
     * Max: `100000`
     */
    quantity?: number;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. */
    catalogReference?: CatalogReference;
    /**
     * Product name. For example,
     * + Stores: `product.name`
     * + Bookings: `service.info.name`
     * + Events: `ticket.name`
     */
    productName?: ProductName;
    /** Price of the item **after** catalog-defined discount and line item discounts. */
    price?: MultiCurrencyPrice;
    /** Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability. */
    physicalProperties?: PhysicalProperties;
    /** Item type. */
    itemType?: ItemType;
    /** [Subscription option](https://dev.wix.com/api/rest/wix-stores/subscription-options/introduction) information. A subscription is a product that is sold on a recurring basis. */
    subscriptionOptionInfo?: SubscriptionOptionInfo;
    /** Price breakdown for this line item. */
    pricesBreakdown?: LineItemPricesData;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ProductName {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface MultiCurrencyPrice {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface PhysicalProperties {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
interface SubscriptionOptionInfo {
    /** Subscription option settings. */
    subscriptionSettings?: SubscriptionSettings;
    /** Subscription option title. */
    title?: Title;
    /** Subscription option description. */
    description?: Description;
}
interface SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency;
    /**
     * Interval of recurring payment.
     *
     * Default: `1`.
     * If SubscriptionFrequency is Day the minimum interval is 7
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal` is `true`. */
    billingCycles?: number | null;
    /**
     * Period until first cycle starts. If applied payNow will be 0
     * If None => no free trial
     */
    freeTrialPeriod?: FreeTrialPeriod;
    /** The date the subscription will start. The subscription will be charged either now or according to freeTrialDays. */
    startDate?: Date | null;
    /**
     * Whether to generate an order each billing cycle. An order will always be generated for the first billing cycle.
     * Default None => will behave like true
     */
    generateOrderEachBillingCycle?: boolean | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface FreeTrialPeriod {
    /** Frequency of priod. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequency;
    /** interval of period */
    interval?: number;
}
interface Title {
    /** Subscription option name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Subscription option name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Description {
    /** Subscription option description. */
    original?: string;
    /** Translated subscription option description. */
    translated?: string | null;
}
interface LineItemPricesData {
    /** Total price after discounts and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price after discounts, and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Total discount for all line items. */
    totalDiscount?: MultiCurrencyPrice;
    /** Catalog price after catalog discount and automatic discounts. */
    price?: MultiCurrencyPrice;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: MultiCurrencyPrice;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: MultiCurrencyPrice;
    /** Item price **before** line item discounts and **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: MultiCurrencyPrice;
}
interface ItemTaxFullDetails {
    /** The portion of the total amount of this estimate that was taxable. */
    taxableAmount?: MultiCurrencyPrice;
    /** Calculated tax, based on `taxable_amount`. */
    totalTax?: MultiCurrencyPrice;
    /** Indicates whether the price already includes tax. */
    isTaxIncluded?: boolean | null;
    /** A detailed description of all the tax authorities applied on this item. */
    taxBreakdown?: TaxBreakdown[];
}
interface TaxBreakdown {
    /** The name of the jurisdiction to which this tax detail applies. For example, "New York" or "Quebec". */
    jurisdiction?: string | null;
    /** The amount of this line item price that was considered nontaxable. (Decimal value) */
    nonTaxableAmount?: MultiCurrencyPrice;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.0000 signifies 200% tax. (Decimal value) */
    rate?: string | null;
    /** The amount of tax estimated for this line item. (Decimal value) */
    taxAmount?: MultiCurrencyPrice;
    /** The taxable amount of this line item. */
    taxableAmount?: MultiCurrencyPrice;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** The type of the jurisdiction in which this tax detail applies. */
    jurisdictionType?: JurisdictionType;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface GiftCard {
    /**
     * Gift card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice;
    /** App ID of the gift card provider. */
    appId?: string;
}
declare enum WeightUnit {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface PriceSummary {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice;
    /** Total tax. */
    tax?: MultiCurrencyPrice;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice;
    /** Total price **after** discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice;
    /** Total additional fees price **before** tax. */
    additionalFees?: MultiCurrencyPrice;
}
/** Billing Info and shipping details */
interface AddressWithContact {
    /** Address. */
    address?: Address;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
}
/** Physical address */
interface Address {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
/** Full contact details for an address */
interface FullAddressContactDetails {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId;
}
interface VatId {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType;
}
/** tax info types */
declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface ShippingInfo {
    /** Selected option out of the options allowed for the `region`. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption;
}
interface SelectedCarrierServiceOption {
    /** Unique identifier of selected option. For example, `usps_std_overnight`. */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Shipping costs. */
    cost?: SelectedCarrierServiceOptionPrices;
}
interface SelectedCarrierServiceOptionPrices {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice;
}
interface CustomFields {
    /** List of custom fields */
    fields?: CustomField[];
}
interface CustomField {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Discount rule. */
    discountRule?: DiscountRule;
    /** Discount type. */
    discountType?: DiscountType;
    /** IDs of the line items the discount applies to. */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Discount rule. */
    discountRule?: DiscountRule;
}
declare enum DiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    amount?: string;
}
interface MerchantDiscount {
    amount?: string;
}
interface DiscountRule {
    /** Discount rule ID. */
    _id?: string;
    /** Discount rule name. */
    name?: DiscountRuleName;
    amount?: string;
}
interface DiscountRuleName {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface ExternalReference {
    /**
     * ID of the app associated with the purchase flow.
     * For example, the Wix Pay Links app ID.
     */
    appId?: string;
    /**
     * Reference to an external resource ID. Used to link the purchase flow to a specific entity in an external system.
     * For example, a Wix Pay Link ID.
     */
    resourceId?: string | null;
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface GetValidationViolationsResponse {
    /** List of validation violations. */
    violations?: Violation[];
}
interface Violation {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target extends TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** @oneof */
interface TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** Available locations on the webpage */
declare enum NameInOther {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther;
}
/** Specific line item violation. */
interface TargetLineItem {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem;
    /** ID of the line item containing the violation. */
    _id?: string | null;
}
interface ValidationsSPIConfig {
    /** Whether to validate the cart page in addition to the checkout page. Default: `false` */
    validateInCart?: boolean;
    /**
     * Required. Base URI where the endpoints are called. Wix appends the endpoint path to the base URI.
     * For example, to call the Get Validation Violations endpoint at `https://my-validations.com/v1/get-violations`, the base URI you provide here is `https://my-validations.com`.
     */
    deploymentUri?: string;
}
/**
 * this message is not directly used by any service,
 * it exists to describe the expected parameters that SHOULD be provided to invoked Velo methods as part of open-platform.
 * e.g. SPIs, event-handlers, etc..
 * NOTE: this context object MUST be provided as the last argument in each Velo method signature.
 *
 * Example:
 * ```typescript
 * export function wixStores_onOrderCanceled({ event, metadata }: OrderCanceledEvent) {
 * ...
 * }
 * ```
 */
interface Context {
    /** A unique identifier of the request. You may print this ID to your logs to help with future debugging and easier correlation with Wix's logs. */
    requestId?: string | null;
    /** [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) 3-letter currency code. */
    currency?: string | null;
    /** An object that describes the identity that triggered this request. */
    identity?: IdentificationData;
    /** A string representing a language and region in the format of `"xx-XX"`. First 2 letters represent the language code according to ISO 639-1. This is followed by a dash "-", and then a by 2 capital letters representing the region according to ISO 3166-2. For example, `"en-US"`. */
    languages?: string[];
    /** The service provider app's instance ID. */
    instanceId?: string | null;
}
declare enum IdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: IdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}

interface GetValidationViolationsEnvelope {
    request: GetValidationViolationsRequest;
    metadata: Context;
}
declare const provideHandlers$1: ServicePluginDefinition<{
    /**
     *
     * This method retrieves validation violations from your app.
     *
     * Wix calls this method when certain actions are performed on a visitor's cart and checkout. For example, when an item is added to the cart, or when a coupon is added to a checkout.
     * This method validates a visitor's cart and checkout, and returns any validation violations (using the structure provided by Wix eCommerce). Site visitors can see the validation violations in their cart and checkout pages. If there aren't any validation violations, the method returns an object containing an empty list.
     *
     * > __Notes:__
     * > + Do not call the Estimate Cart Totals, Estimate Current Cart Totals or Get Checkout methods from your implementation code for Get Validation Violations. Doing so will result in an error.
     * > + By default, this method only retrieves validation violations from a visitor's checkout. If you want to also retrieve validation violations from a visitor's cart, set the `validateInCart` parameter to `true` in the Ecom Validations Integration's config file. */
    getValidationViolations(payload: GetValidationViolationsEnvelope): GetValidationViolationsResponse | Promise<GetValidationViolationsResponse>;
}>;

declare function createServicePluginModule<T extends ServicePluginDefinition<any>>(servicePluginDefinition: T): BuildServicePluginDefinition<T> & T;

type _publicProvideHandlersType = typeof provideHandlers$1;
declare const provideHandlers: ReturnType<typeof createServicePluginModule<_publicProvideHandlersType>>;

type index_d_Address = Address;
type index_d_AddressLocation = AddressLocation;
type index_d_AddressWithContact = AddressWithContact;
type index_d_AppliedDiscount = AppliedDiscount;
type index_d_AppliedDiscountDiscountSourceOneOf = AppliedDiscountDiscountSourceOneOf;
type index_d_BuyerDetails = BuyerDetails;
type index_d_CatalogReference = CatalogReference;
type index_d_CheckoutStage = CheckoutStage;
declare const index_d_CheckoutStage: typeof CheckoutStage;
type index_d_Context = Context;
type index_d_Coupon = Coupon;
type index_d_CustomField = CustomField;
type index_d_CustomFields = CustomFields;
type index_d_Description = Description;
type index_d_DiscountRule = DiscountRule;
type index_d_DiscountRuleName = DiscountRuleName;
type index_d_DiscountType = DiscountType;
declare const index_d_DiscountType: typeof DiscountType;
type index_d_ExtendedFields = ExtendedFields;
type index_d_ExternalReference = ExternalReference;
type index_d_FreeTrialPeriod = FreeTrialPeriod;
type index_d_FullAddressContactDetails = FullAddressContactDetails;
type index_d_GetValidationViolationsRequest = GetValidationViolationsRequest;
type index_d_GetValidationViolationsResponse = GetValidationViolationsResponse;
type index_d_GiftCard = GiftCard;
type index_d_IdentificationData = IdentificationData;
type index_d_IdentificationDataIdOneOf = IdentificationDataIdOneOf;
type index_d_IdentityType = IdentityType;
declare const index_d_IdentityType: typeof IdentityType;
type index_d_ItemTaxFullDetails = ItemTaxFullDetails;
type index_d_ItemType = ItemType;
type index_d_ItemTypeItemType = ItemTypeItemType;
declare const index_d_ItemTypeItemType: typeof ItemTypeItemType;
type index_d_ItemTypeItemTypeDataOneOf = ItemTypeItemTypeDataOneOf;
type index_d_JurisdictionType = JurisdictionType;
declare const index_d_JurisdictionType: typeof JurisdictionType;
type index_d_LineItem = LineItem;
type index_d_LineItemPricesData = LineItemPricesData;
type index_d_MerchantDiscount = MerchantDiscount;
type index_d_MultiCurrencyPrice = MultiCurrencyPrice;
type index_d_NameInLineItem = NameInLineItem;
declare const index_d_NameInLineItem: typeof NameInLineItem;
type index_d_NameInOther = NameInOther;
declare const index_d_NameInOther: typeof NameInOther;
type index_d_Other = Other;
type index_d_PhysicalProperties = PhysicalProperties;
type index_d_PriceSummary = PriceSummary;
type index_d_ProductName = ProductName;
type index_d_SelectedCarrierServiceOption = SelectedCarrierServiceOption;
type index_d_SelectedCarrierServiceOptionPrices = SelectedCarrierServiceOptionPrices;
type index_d_Severity = Severity;
declare const index_d_Severity: typeof Severity;
type index_d_ShippingInfo = ShippingInfo;
type index_d_Source = Source;
declare const index_d_Source: typeof Source;
type index_d_SourceInfo = SourceInfo;
type index_d_Stage = Stage;
type index_d_StageStagesOneOf = StageStagesOneOf;
type index_d_StreetAddress = StreetAddress;
type index_d_SubscriptionFrequency = SubscriptionFrequency;
declare const index_d_SubscriptionFrequency: typeof SubscriptionFrequency;
type index_d_SubscriptionOptionInfo = SubscriptionOptionInfo;
type index_d_SubscriptionSettings = SubscriptionSettings;
type index_d_SuggestedFix = SuggestedFix;
declare const index_d_SuggestedFix: typeof SuggestedFix;
type index_d_Target = Target;
type index_d_TargetLineItem = TargetLineItem;
type index_d_TargetTargetTypeOneOf = TargetTargetTypeOneOf;
type index_d_TaxBreakdown = TaxBreakdown;
type index_d_Title = Title;
type index_d_ValidationInfo = ValidationInfo;
type index_d_ValidationsSPIConfig = ValidationsSPIConfig;
type index_d_VatId = VatId;
type index_d_VatType = VatType;
declare const index_d_VatType: typeof VatType;
type index_d_Violation = Violation;
type index_d_WeightUnit = WeightUnit;
declare const index_d_WeightUnit: typeof WeightUnit;
type index_d__publicProvideHandlersType = _publicProvideHandlersType;
declare const index_d_provideHandlers: typeof provideHandlers;
declare namespace index_d {
  export { type index_d_Address as Address, type index_d_AddressLocation as AddressLocation, type index_d_AddressWithContact as AddressWithContact, type index_d_AppliedDiscount as AppliedDiscount, type index_d_AppliedDiscountDiscountSourceOneOf as AppliedDiscountDiscountSourceOneOf, type index_d_BuyerDetails as BuyerDetails, type index_d_CatalogReference as CatalogReference, index_d_CheckoutStage as CheckoutStage, type index_d_Context as Context, type index_d_Coupon as Coupon, type index_d_CustomField as CustomField, type index_d_CustomFields as CustomFields, type index_d_Description as Description, type index_d_DiscountRule as DiscountRule, type index_d_DiscountRuleName as DiscountRuleName, index_d_DiscountType as DiscountType, type index_d_ExtendedFields as ExtendedFields, type index_d_ExternalReference as ExternalReference, type index_d_FreeTrialPeriod as FreeTrialPeriod, type index_d_FullAddressContactDetails as FullAddressContactDetails, type index_d_GetValidationViolationsRequest as GetValidationViolationsRequest, type index_d_GetValidationViolationsResponse as GetValidationViolationsResponse, type index_d_GiftCard as GiftCard, type index_d_IdentificationData as IdentificationData, type index_d_IdentificationDataIdOneOf as IdentificationDataIdOneOf, index_d_IdentityType as IdentityType, type index_d_ItemTaxFullDetails as ItemTaxFullDetails, type index_d_ItemType as ItemType, index_d_ItemTypeItemType as ItemTypeItemType, type index_d_ItemTypeItemTypeDataOneOf as ItemTypeItemTypeDataOneOf, index_d_JurisdictionType as JurisdictionType, type index_d_LineItem as LineItem, type index_d_LineItemPricesData as LineItemPricesData, type index_d_MerchantDiscount as MerchantDiscount, type index_d_MultiCurrencyPrice as MultiCurrencyPrice, index_d_NameInLineItem as NameInLineItem, index_d_NameInOther as NameInOther, type index_d_Other as Other, type index_d_PhysicalProperties as PhysicalProperties, type index_d_PriceSummary as PriceSummary, type index_d_ProductName as ProductName, type index_d_SelectedCarrierServiceOption as SelectedCarrierServiceOption, type index_d_SelectedCarrierServiceOptionPrices as SelectedCarrierServiceOptionPrices, index_d_Severity as Severity, type index_d_ShippingInfo as ShippingInfo, index_d_Source as Source, type index_d_SourceInfo as SourceInfo, type index_d_Stage as Stage, type index_d_StageStagesOneOf as StageStagesOneOf, type index_d_StreetAddress as StreetAddress, index_d_SubscriptionFrequency as SubscriptionFrequency, type index_d_SubscriptionOptionInfo as SubscriptionOptionInfo, type index_d_SubscriptionSettings as SubscriptionSettings, index_d_SuggestedFix as SuggestedFix, type index_d_Target as Target, type index_d_TargetLineItem as TargetLineItem, type index_d_TargetTargetTypeOneOf as TargetTargetTypeOneOf, type index_d_TaxBreakdown as TaxBreakdown, type index_d_Title as Title, type index_d_ValidationInfo as ValidationInfo, type index_d_ValidationsSPIConfig as ValidationsSPIConfig, type index_d_VatId as VatId, index_d_VatType as VatType, type index_d_Violation as Violation, index_d_WeightUnit as WeightUnit, type index_d__publicProvideHandlersType as _publicProvideHandlersType, index_d_provideHandlers as provideHandlers, provideHandlers$1 as publicProvideHandlers };
}

export { index_d$4 as additionalFees, index_d$3 as customTriggers, index_d$2 as discounts, index_d$8 as giftVouchersProvider, index_d$7 as memberships, index_d$1 as paymentSettings, index_d$6 as recommendationsProvider, index_d$5 as shippingRates, index_d as validations };
