interface GetCheckoutContentRequest$1 {
    /** ID of the app that provides the content. */
    appId: string;
    /** ID of the specific component content. */
    componentId: string;
    /** When a language is specified, it will be retrieved the content in that language. */
    languageCode?: string | null;
}
interface GetCheckoutContentResponse$1 {
    /** The requested CheckoutContent. */
    checkoutContent?: CheckoutContent$1;
}
interface CheckoutContent$1 {
    /**
     * Text to display in place of the "Continue shopping" link.
     * @readonly
     */
    continueShoppingLink?: string | null;
    /**
     * Text to display in place of the "Order summary" title.
     * @readonly
     */
    orderSummary?: string | null;
    /**
     * Text to display in place of the "Customer details" title.
     * @readonly
     */
    customerDetails?: string | null;
    /**
     * Text to display in place of the "Review and place order" title.
     * @readonly
     */
    reviewAndPlaceOrder?: string | null;
    /**
     * Text to display in place of the "Place order" button.
     * @readonly
     */
    placeOrderButton?: string | null;
    /**
     * Text to display in place of the "Place order & pay" button.
     * @readonly
     */
    placeOrderPayButton?: string | null;
}

interface GetCheckoutContentRequest {
    /** ID of the app that provides the content. */
    appId: string;
    /** ID of the specific component content. */
    componentId: string;
    /** When a language is specified, it will be retrieved the content in that language. */
    languageCode?: string | null;
}
interface GetCheckoutContentResponse {
    /** The requested CheckoutContent. */
    checkoutContent?: CheckoutContent;
}
interface CheckoutContent {
    /**
     * Text to display in place of the "Continue shopping" link.
     * @readonly
     */
    continueShoppingLink?: string | null;
    /**
     * Text to display in place of the "Order summary" title.
     * @readonly
     */
    orderSummary?: string | null;
    /**
     * Text to display in place of the "Customer details" title.
     * @readonly
     */
    customerDetails?: string | null;
    /**
     * Text to display in place of the "Review and place order" title.
     * @readonly
     */
    reviewAndPlaceOrder?: string | null;
    /**
     * Text to display in place of the "Place order" button.
     * @readonly
     */
    placeOrderButton?: string | null;
    /**
     * Text to display in place of the "Place order & pay" button.
     * @readonly
     */
    placeOrderPayButton?: string | null;
}

type __PublicMethodMetaInfo$v<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getCheckoutContent(): __PublicMethodMetaInfo$v<'GET', {
    appId: string;
    componentId: string;
}, GetCheckoutContentRequest, GetCheckoutContentRequest$1, GetCheckoutContentResponse, GetCheckoutContentResponse$1>;

declare const meta$v_getCheckoutContent: typeof getCheckoutContent;
declare namespace meta$v {
  export { type __PublicMethodMetaInfo$v as __PublicMethodMetaInfo, meta$v_getCheckoutContent as getCheckoutContent };
}

interface ListTriggersRequest$1 {
}
interface ListTriggersResponse$1 {
    /** A list of all custom triggers */
    triggers?: ListTriggersResponseCustomTrigger$1[];
}
interface ListTriggersResponseCustomTrigger$1 {
    /** Unique ID of the custom trigger */
    id?: string;
    /** App ID of the custom trigger provider */
    appId?: string;
    /** Custom Trigger display name */
    name?: string;
}
interface ListTriggersResponseCustomTriggerNonNullableFields$1 {
    id: string;
    appId: string;
    name: string;
}
interface ListTriggersResponseNonNullableFields$1 {
    triggers: ListTriggersResponseCustomTriggerNonNullableFields$1[];
}

interface ListTriggersRequest {
}
interface ListTriggersResponse {
    /** A list of all custom triggers */
    triggers?: ListTriggersResponseCustomTrigger[];
}
interface ListTriggersResponseCustomTrigger {
    /** Unique ID of the custom trigger */
    _id?: string;
    /** App ID of the custom trigger provider */
    appId?: string;
    /** Custom Trigger display name */
    name?: string;
}
interface ListTriggersResponseCustomTriggerNonNullableFields {
    _id: string;
    appId: string;
    name: string;
}
interface ListTriggersResponseNonNullableFields {
    triggers: ListTriggersResponseCustomTriggerNonNullableFields[];
}

type __PublicMethodMetaInfo$u<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function listTriggers(): __PublicMethodMetaInfo$u<'POST', {}, ListTriggersRequest, ListTriggersRequest$1, ListTriggersResponse & ListTriggersResponseNonNullableFields, ListTriggersResponse$1 & ListTriggersResponseNonNullableFields$1>;

declare const meta$u_listTriggers: typeof listTriggers;
declare namespace meta$u {
  export { type __PublicMethodMetaInfo$u as __PublicMethodMetaInfo, meta$u_listTriggers as listTriggers };
}

interface DiscountRule$f {
    /**
     * Discount rule ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the discount rule is updated.
     * To prevent conflicting changes, the current `revision` must be passed when updating the discount rule.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the discount rule was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the discount rule was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Whether the discount rule is active.
     *
     * Default: `true`
     */
    active?: boolean | null;
    /** Discount rule name. */
    name?: string | null;
    /**
     * Discount rule trigger.
     * A set of conditions that must be met for the `discounts` to be applied.
     * Not passing a trigger will cause the discount to always apply.
     */
    trigger?: DiscountTrigger$1;
    /** Time frame in which the discount rule is active. */
    activeTimeInfo?: ActiveTimeInfo$1;
    /**
     * List of discounts that are applied when one or more triggers are met.
     *
     * > **Notes:**
     * >
     * > + Currently, only 1 discount can be defined per discount rule.
     * > + A discount rule can be applied on multiple items per cart.
     * > + A discount rule can only be applied once per item.
     */
    discounts?: Discounts$1;
    /**
     * Discount rule status.
     * @readonly
     */
    status?: Status$b;
    /**
     * Number of times the discount rule was used.
     * @readonly
     */
    usageCount?: number;
}
/** DiscountTrigger - description of a set of conditions, that if met, will trigger the associated rule actions */
interface DiscountTrigger$1 extends DiscountTriggerTriggerOneOf$1 {
    /** Chain multiple triggers with the `and` operator. */
    and?: And$1;
    /** Chain multiple triggers with the `or` operator. */
    or?: Or$1;
    /** Custom trigger. */
    customTrigger?: Custom$1;
    /** Subtotal trigger range. */
    subtotalRange?: SubtotalRange$1;
    /** Item quantity trigger range. */
    itemQuantityRange?: ItemQuantityRange$1;
    /**
     * Trigger type.
     *
     * + `AND`: Operator used for chaining multiple triggers. Currently 1 `AND` chain operator is supported.
     * + `SUBTOTAL_RANGE`: Subtotal must be within the specified `subtotalRange` values.
     * + `ITEM_QUANTITY_RANGE`: Quantity of items in scope must be within specified `itemQuantityRange` values.
     * + `CUSTOM`: Custom trigger type defined in `customTrigger` object.
     */
    triggerType?: TriggerType$1;
}
/** @oneof */
interface DiscountTriggerTriggerOneOf$1 {
    /** Chain multiple triggers with the `and` operator. */
    and?: And$1;
    /** Chain multiple triggers with the `or` operator. */
    or?: Or$1;
    /** Custom trigger. */
    customTrigger?: Custom$1;
    /** Subtotal trigger range. */
    subtotalRange?: SubtotalRange$1;
    /** Item quantity trigger range. */
    itemQuantityRange?: ItemQuantityRange$1;
}
/**
 * This object represents a scope of catalog items. Examples:
 * 1. All catalog items of a specific app - type = CATALOG_ITEM, CatalogItemFilter with `catalog_app_id`
 * 2. Specific catalog item - type = CATALOG_ITEM, CatalogItemFilter with `catalog_app_id` + `catalog_item_ids`
 * 3. External catalog filter - type = CUSTOM_FILTER, CustomFilter with 'app_id' + 'params'
 */
interface Scope$1 extends ScopeScopeItemsOneOf$1 {
    /** Catalog item filter. Must be passed with `type."CATALOG_ITEM"`. */
    catalogItemFilter?: CatalogItemFilter$1;
    /** Custom filter. Must be passed with `type."CATALOG_ITEM"`. */
    customFilter?: CustomFilter$1;
    /** Scope ID. */
    id?: string;
    /** Scope type. */
    type?: ScopeType$1;
}
/** @oneof */
interface ScopeScopeItemsOneOf$1 {
    /** Catalog item filter. Must be passed with `type."CATALOG_ITEM"`. */
    catalogItemFilter?: CatalogItemFilter$1;
    /** Custom filter. Must be passed with `type."CATALOG_ITEM"`. */
    customFilter?: CustomFilter$1;
}
declare enum ScopeType$1 {
    UNDEFINED_SCOPE = "UNDEFINED_SCOPE",
    /** Specific catalog items */
    CATALOG_ITEM = "CATALOG_ITEM",
    /** Specific items by custom filters */
    CUSTOM_FILTER = "CUSTOM_FILTER"
}
interface CatalogItemFilter$1 {
    /** Catalog App ID. For example, the Wix Stores, Wix Bookings, or 3rd-party `appId`. */
    catalogAppId?: string;
    /** ID of the item within its Wix or 3rd-party catalog. For example, `productId` for Wix Stores. */
    catalogItemIds?: string[];
}
interface CustomFilter$1 {
    /** Custom filter app ID, when relevant. */
    appId?: string;
    /**
     * Custom filter in `{ "key": "value" }` form.
     * For example, an array of `collectionIDs`:
     * `{ ["collectionId": "12345"], ["collectionId": "67890"] }`.
     */
    params?: Record<string, any> | null;
}
interface And$1 {
    /** List of triggers to have an "AND" operator between their results. */
    triggers?: DiscountTrigger$1[];
}
interface Or$1 {
    /** List of triggers to have an "OR" operator between their results. */
    triggers?: DiscountTrigger$1[];
}
interface Custom$1 {
    /** Trigger ID. */
    id?: string;
    /** ID of the app that created the trigger. */
    appId?: string;
}
interface SubtotalRange$1 {
    /** Relevant scopes for `SPECIFIC_ITEMS` target type. */
    scopes?: Scope$1[];
    /** Minimum subtotal price (inclusive). */
    from?: string | null;
    /** Maximum subtotal price (inclusive). */
    to?: string | null;
}
interface ItemQuantityRange$1 {
    /** Relevant scopes for `SPECIFIC_ITEMS` target type. */
    scopes?: Scope$1[];
    /** Minimum item quantity (inclusive). */
    from?: number | null;
    /** Maximum item quantity (inclusive). */
    to?: number | null;
}
declare enum TriggerType$1 {
    UNDEFINED = "UNDEFINED",
    /** Chain multiple triggers with AND operator */
    AND = "AND",
    /** Subtotal range trigger */
    SUBTOTAL_RANGE = "SUBTOTAL_RANGE",
    /** Item quantity range trigger */
    ITEM_QUANTITY_RANGE = "ITEM_QUANTITY_RANGE",
    /** Custom trigger, see Custom Triggers SPI for more details */
    CUSTOM = "CUSTOM",
    /** Chain multiple triggers with OR operator */
    OR = "OR"
}
interface ActiveTimeInfo$1 {
    /** Date and time the discount rule is active **from**, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    start?: Date | null;
    /** Date and time the discount rule is active **till**, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    end?: Date | null;
}
interface Discounts$1 {
    /** Discounts. */
    values?: Discount$1[];
}
interface Discount$1 extends DiscountDiscountOneOf$1 {
    /** Percentage to discount from original price. */
    percentage?: number;
    /** Amount to discount from original price. */
    fixedAmount?: string;
    /** Fixed price. Line item will be fixed to this price. */
    fixedPrice?: string;
    /**
     * Discount target.
     *
     * + `SPECIFIC_ITEMS`: Discount applies to a specific set of items.
     */
    targetType?: Type$1;
    /** Data related to `SPECIFIC_ITEMS` target type. */
    specificItemsInfo?: SpecificItemsInfo$1;
    /**
     * Discount type.
     *
     * + `PERCENTAGE`: Price is reduced by percentage value.
     * + `FIXED_AMOUNT`: Price is reduced by fixed amount.
     * + `FIXED_PRICE`: Price will be set to fixed amount.
     */
    discountType?: DiscountType$f;
}
/** @oneof */
interface DiscountDiscountOneOf$1 {
    /** Percentage to discount from original price. */
    percentage?: number;
    /** Amount to discount from original price. */
    fixedAmount?: string;
    /** Fixed price. Line item will be fixed to this price. */
    fixedPrice?: string;
}
declare enum Type$1 {
    /** Target type is not defined */
    UNDEFINED = "UNDEFINED",
    /** Target type is a set of specific items */
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS"
}
interface SpecificItemsInfo$1 {
    /** All associated scopes for `SPECIFIC_ITEMS` target type. */
    scopes?: Scope$1[];
}
declare enum DiscountType$f {
    UNDEFINED = "UNDEFINED",
    /** Percentage discount */
    PERCENTAGE = "PERCENTAGE",
    /** Fixed amount discount */
    FIXED_AMOUNT = "FIXED_AMOUNT",
    /** Fixed price discount */
    FIXED_PRICE = "FIXED_PRICE"
}
declare enum Status$b {
    /** Rule status is not defined. */
    UNDEFINED = "UNDEFINED",
    /** Rule status is live. */
    LIVE = "LIVE",
    /** Rule status is expired, it might have been live in the past. */
    EXPIRED = "EXPIRED",
    /** Rule status is pending, it might be live in the future. */
    PENDING = "PENDING"
}
/** TODO: check if can be removed */
declare enum AppliedSubjectType$1 {
    UNDEFINED = "UNDEFINED",
    /** Discount applies to all items at checkout. */
    ALL_ITEMS = "ALL_ITEMS",
    /** Discount applies to the lowest priced item at checkout. */
    LOWEST_PRICED_ITEM = "LOWEST_PRICED_ITEM"
}
interface CreateDiscountRuleRequest$1 {
    /** Discount rule info. */
    discountRule: DiscountRule$f;
}
interface CreateDiscountRuleResponse$1 {
    /** Discount rule. */
    discountRule?: DiscountRule$f;
}
interface GetDiscountRuleRequest$1 {
    /** ID of the discount rule to retrieve. */
    discountRuleId: string;
}
interface GetDiscountRuleResponse$1 {
    /** The requested discount rule. */
    discountRule?: DiscountRule$f;
}
interface UpdateDiscountRuleRequest$1 {
    /** Discount rule info. */
    discountRule: DiscountRule$f;
}
interface UpdateDiscountRuleResponse$1 {
    /** Updated discount rule. */
    discountRule?: DiscountRule$f;
}
interface DeleteDiscountRuleRequest$1 {
    /** ID of the discount rule to delete. */
    discountRuleId: string;
}
interface DeleteDiscountRuleResponse$1 {
}
interface QueryDiscountRulesRequest$1 {
    /** Query options. */
    query?: PlatformQuery$3;
}
interface PlatformQuery$3 extends PlatformQueryPagingMethodOneOf$3 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$3;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$t;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting$t[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf$3 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$3;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$t;
}
interface Sorting$t {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$t;
}
declare enum SortOrder$t {
    ASC = "ASC",
    DESC = "DESC"
}
interface PlatformPaging$3 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$t {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryDiscountRulesResponse$1 {
    /** List of discount rules. */
    discountRules?: DiscountRule$f[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: PlatformPagingMetadata$3;
}
interface PlatformPagingMetadata$3 {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors$t;
}
interface Cursors$t {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface AndNonNullableFields$1 {
    triggers: DiscountTriggerNonNullableFields$1[];
}
interface OrNonNullableFields$1 {
    triggers: DiscountTriggerNonNullableFields$1[];
}
interface CustomNonNullableFields$1 {
    id: string;
    appId: string;
}
interface CatalogItemFilterNonNullableFields$1 {
    catalogAppId: string;
    catalogItemIds: string[];
}
interface CustomFilterNonNullableFields$1 {
    appId: string;
}
interface ScopeNonNullableFields$7 {
    catalogItemFilter?: CatalogItemFilterNonNullableFields$1;
    customFilter?: CustomFilterNonNullableFields$1;
    id: string;
    type: ScopeType$1;
}
interface SubtotalRangeNonNullableFields$1 {
    scopes: ScopeNonNullableFields$7[];
}
interface ItemQuantityRangeNonNullableFields$1 {
    scopes: ScopeNonNullableFields$7[];
}
interface DiscountTriggerNonNullableFields$1 {
    and?: AndNonNullableFields$1;
    or?: OrNonNullableFields$1;
    customTrigger?: CustomNonNullableFields$1;
    subtotalRange?: SubtotalRangeNonNullableFields$1;
    itemQuantityRange?: ItemQuantityRangeNonNullableFields$1;
    triggerType: TriggerType$1;
}
interface SpecificItemsInfoNonNullableFields$1 {
    scopes: ScopeNonNullableFields$7[];
}
interface CustomerBuyNonNullableFields$1 {
    minimumQuantity: number;
    scopes: ScopeNonNullableFields$7[];
}
interface CustomerGetNonNullableFields$1 {
    quantity: number;
    scopes: ScopeNonNullableFields$7[];
}
interface BuyXGetYInfoNonNullableFields$1 {
    customerBuys?: CustomerBuyNonNullableFields$1;
    customerGets?: CustomerGetNonNullableFields$1;
}
interface DiscountNonNullableFields$1 {
    percentage: number;
    fixedAmount: string;
    fixedPrice: string;
    targetType: Type$1;
    specificItemsInfo?: SpecificItemsInfoNonNullableFields$1;
    discountType: DiscountType$f;
    buyXGetYInfo?: BuyXGetYInfoNonNullableFields$1;
}
interface DiscountsNonNullableFields$1 {
    values: DiscountNonNullableFields$1[];
}
interface DiscountSettingsNonNullableFields$1 {
    appliesTo: AppliedSubjectType$1;
}
interface DiscountRuleNonNullableFields$f {
    trigger?: DiscountTriggerNonNullableFields$1;
    discounts?: DiscountsNonNullableFields$1;
    status: Status$b;
    usageCount: number;
    settings?: DiscountSettingsNonNullableFields$1;
}
interface CreateDiscountRuleResponseNonNullableFields$1 {
    discountRule?: DiscountRuleNonNullableFields$f;
}
interface GetDiscountRuleResponseNonNullableFields$1 {
    discountRule?: DiscountRuleNonNullableFields$f;
}
interface UpdateDiscountRuleResponseNonNullableFields$1 {
    discountRule?: DiscountRuleNonNullableFields$f;
}
interface QueryDiscountRulesResponseNonNullableFields$1 {
    discountRules: DiscountRuleNonNullableFields$f[];
}

interface DiscountRule$e {
    /**
     * Discount rule ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the discount rule is updated.
     * To prevent conflicting changes, the current `revision` must be passed when updating the discount rule.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the discount rule was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the discount rule was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Whether the discount rule is active.
     *
     * Default: `true`
     */
    active?: boolean | null;
    /** Discount rule name. */
    name?: string | null;
    /**
     * Discount rule trigger.
     * A set of conditions that must be met for the `discounts` to be applied.
     * Not passing a trigger will cause the discount to always apply.
     */
    trigger?: DiscountTrigger;
    /** Time frame in which the discount rule is active. */
    activeTimeInfo?: ActiveTimeInfo;
    /**
     * List of discounts that are applied when one or more triggers are met.
     *
     * > **Notes:**
     * >
     * > + Currently, only 1 discount can be defined per discount rule.
     * > + A discount rule can be applied on multiple items per cart.
     * > + A discount rule can only be applied once per item.
     */
    discounts?: Discounts;
    /**
     * Discount rule status.
     * @readonly
     */
    status?: Status$a;
    /**
     * Number of times the discount rule was used.
     * @readonly
     */
    usageCount?: number;
}
/** DiscountTrigger - description of a set of conditions, that if met, will trigger the associated rule actions */
interface DiscountTrigger extends DiscountTriggerTriggerOneOf {
    /** Chain multiple triggers with the `and` operator. */
    and?: And;
    /** Chain multiple triggers with the `or` operator. */
    or?: Or;
    /** Custom trigger. */
    customTrigger?: Custom;
    /** Subtotal trigger range. */
    subtotalRange?: SubtotalRange;
    /** Item quantity trigger range. */
    itemQuantityRange?: ItemQuantityRange;
    /**
     * Trigger type.
     *
     * + `"AND"`: Operator used for chaining multiple triggers. Currently 1 `"AND"` chain operator is supported.
     * + `"SUBTOTAL_RANGE"`: Subtotal must be within the specified `subtotalRange` values.
     * + `"ITEM_QUANTITY_RANGE"`: Quantity of items in scope must be within specified `itemQuantityRange` values.
     * + `"CUSTOM"`: Custom trigger type defined in `customTrigger` object.
     */
    triggerType?: TriggerType;
}
/** @oneof */
interface DiscountTriggerTriggerOneOf {
    /** Chain multiple triggers with the `and` operator. */
    and?: And;
    /** Chain multiple triggers with the `or` operator. */
    or?: Or;
    /** Custom trigger. */
    customTrigger?: Custom;
    /** Subtotal trigger range. */
    subtotalRange?: SubtotalRange;
    /** Item quantity trigger range. */
    itemQuantityRange?: ItemQuantityRange;
}
/**
 * This object represents a scope of catalog items. Examples:
 * 1. All catalog items of a specific app - type = CATALOG_ITEM, CatalogItemFilter with `catalog_app_id`
 * 2. Specific catalog item - type = CATALOG_ITEM, CatalogItemFilter with `catalog_app_id` + `catalog_item_ids`
 * 3. External catalog filter - type = CUSTOM_FILTER, CustomFilter with 'app_id' + 'params'
 */
interface Scope extends ScopeScopeItemsOneOf {
    /** Catalog item filter. Must be passed with `type."CATALOG_ITEM"`. */
    catalogItemFilter?: CatalogItemFilter;
    /** Custom filter. Must be passed with `type."CATALOG_ITEM"`. */
    customFilter?: CustomFilter;
    /** Scope ID. */
    _id?: string;
    /** Scope type. */
    type?: ScopeType;
}
/** @oneof */
interface ScopeScopeItemsOneOf {
    /** Catalog item filter. Must be passed with `type."CATALOG_ITEM"`. */
    catalogItemFilter?: CatalogItemFilter;
    /** Custom filter. Must be passed with `type."CATALOG_ITEM"`. */
    customFilter?: CustomFilter;
}
declare enum ScopeType {
    UNDEFINED_SCOPE = "UNDEFINED_SCOPE",
    /** Specific catalog items */
    CATALOG_ITEM = "CATALOG_ITEM",
    /** Specific items by custom filters */
    CUSTOM_FILTER = "CUSTOM_FILTER"
}
interface CatalogItemFilter {
    /** Catalog App ID. For example, the Wix Stores, Wix Bookings, or 3rd-party `appId`. */
    catalogAppId?: string;
    /** ID of the item within its Wix or 3rd-party catalog. For example, `productId` for Wix Stores. */
    catalogItemIds?: string[];
}
interface CustomFilter {
    /** Custom filter app ID, when relevant. */
    appId?: string;
    /**
     * Custom filter in `{ "key": "value" }` form.
     * For example, an array of `collectionIDs`:
     * `{ ["collectionId": "12345"], ["collectionId": "67890"] }`.
     */
    params?: Record<string, any> | null;
}
interface And {
    /** List of triggers to have an "AND" operator between their results. */
    triggers?: DiscountTrigger[];
}
interface Or {
    /** List of triggers to have an "OR" operator between their results. */
    triggers?: DiscountTrigger[];
}
interface Custom {
    /** Trigger ID. */
    _id?: string;
    /** ID of the app that created the trigger. */
    appId?: string;
}
interface SubtotalRange {
    /** Relevant scopes for `"SPECIFIC_ITEMS"` target type. */
    scopes?: Scope[];
    /** Minimum subtotal price (inclusive). */
    from?: string | null;
    /** Maximum subtotal price (inclusive). */
    to?: string | null;
}
interface ItemQuantityRange {
    /** Relevant scopes for `"SPECIFIC_ITEMS"` target type. */
    scopes?: Scope[];
    /** Minimum item quantity (inclusive). */
    from?: number | null;
    /** Maximum item quantity (inclusive). */
    to?: number | null;
}
declare enum TriggerType {
    UNDEFINED = "UNDEFINED",
    /** Chain multiple triggers with AND operator */
    AND = "AND",
    /** Subtotal range trigger */
    SUBTOTAL_RANGE = "SUBTOTAL_RANGE",
    /** Item quantity range trigger */
    ITEM_QUANTITY_RANGE = "ITEM_QUANTITY_RANGE",
    /** Custom trigger, see Custom Triggers SPI for more details */
    CUSTOM = "CUSTOM",
    /** Chain multiple triggers with OR operator */
    OR = "OR"
}
interface ActiveTimeInfo {
    /** Date and time the discount rule is active **from**, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    start?: Date | null;
    /** Date and time the discount rule is active **till**, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    end?: Date | null;
}
interface Discounts {
    /** Discounts. */
    values?: Discount[];
}
interface Discount extends DiscountDiscountOneOf {
    /** Percentage to discount from original price. */
    percentage?: number;
    /** Amount to discount from original price. */
    fixedAmount?: string;
    /** Fixed price. Line item will be fixed to this price. */
    fixedPrice?: string;
    /**
     * Discount target.
     *
     * + `"SPECIFIC_ITEMS"`: Discount applies to a specific set of items.
     */
    targetType?: Type;
    /** Data related to `"SPECIFIC_ITEMS"` target type. */
    specificItemsInfo?: SpecificItemsInfo;
    /**
     * Discount type.
     *
     * + `"PERCENTAGE"`: Price is reduced by percentage value.
     * + `"FIXED_AMOUNT"`: Price is reduced by fixed amount.
     * + `"FIXED_PRICE"`: Price will be set to fixed amount.
     */
    discountType?: DiscountType$e;
}
/** @oneof */
interface DiscountDiscountOneOf {
    /** Percentage to discount from original price. */
    percentage?: number;
    /** Amount to discount from original price. */
    fixedAmount?: string;
    /** Fixed price. Line item will be fixed to this price. */
    fixedPrice?: string;
}
declare enum Type {
    /** Target type is not defined */
    UNDEFINED = "UNDEFINED",
    /** Target type is a set of specific items */
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS"
}
interface SpecificItemsInfo {
    /** All associated scopes for `"SPECIFIC_ITEMS"` target type. */
    scopes?: Scope[];
}
declare enum DiscountType$e {
    UNDEFINED = "UNDEFINED",
    /** Percentage discount */
    PERCENTAGE = "PERCENTAGE",
    /** Fixed amount discount */
    FIXED_AMOUNT = "FIXED_AMOUNT",
    /** Fixed price discount */
    FIXED_PRICE = "FIXED_PRICE"
}
declare enum Status$a {
    /** Rule status is not defined. */
    UNDEFINED = "UNDEFINED",
    /** Rule status is live. */
    LIVE = "LIVE",
    /** Rule status is expired, it might have been live in the past. */
    EXPIRED = "EXPIRED",
    /** Rule status is pending, it might be live in the future. */
    PENDING = "PENDING"
}
/** TODO: check if can be removed */
declare enum AppliedSubjectType {
    UNDEFINED = "UNDEFINED",
    /** Discount applies to all items at checkout. */
    ALL_ITEMS = "ALL_ITEMS",
    /** Discount applies to the lowest priced item at checkout. */
    LOWEST_PRICED_ITEM = "LOWEST_PRICED_ITEM"
}
interface CreateDiscountRuleRequest {
    /** Discount rule info. */
    discountRule: DiscountRule$e;
}
interface CreateDiscountRuleResponse {
    /** Discount rule. */
    discountRule?: DiscountRule$e;
}
interface GetDiscountRuleRequest {
    /** ID of the discount rule to retrieve. */
    discountRuleId: string;
}
interface GetDiscountRuleResponse {
    /** The requested discount rule. */
    discountRule?: DiscountRule$e;
}
interface UpdateDiscountRuleRequest {
    /** Discount rule info. */
    discountRule: DiscountRule$e;
}
interface UpdateDiscountRuleResponse {
    /** Updated discount rule. */
    discountRule?: DiscountRule$e;
}
interface DeleteDiscountRuleRequest {
    /** ID of the discount rule to delete. */
    discountRuleId: string;
}
interface DeleteDiscountRuleResponse {
}
interface QueryDiscountRulesRequest {
    /** Query options. */
    query?: PlatformQuery$2;
}
interface PlatformQuery$2 extends PlatformQueryPagingMethodOneOf$2 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$2;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$s;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting$s[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf$2 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$2;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$s;
}
interface Sorting$s {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$s;
}
declare enum SortOrder$s {
    ASC = "ASC",
    DESC = "DESC"
}
interface PlatformPaging$2 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$s {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryDiscountRulesResponse {
    /** List of discount rules. */
    discountRules?: DiscountRule$e[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: PlatformPagingMetadata$2;
}
interface PlatformPagingMetadata$2 {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors$s;
}
interface Cursors$s {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface AndNonNullableFields {
    triggers: DiscountTriggerNonNullableFields[];
}
interface OrNonNullableFields {
    triggers: DiscountTriggerNonNullableFields[];
}
interface CustomNonNullableFields {
    _id: string;
    appId: string;
}
interface CatalogItemFilterNonNullableFields {
    catalogAppId: string;
    catalogItemIds: string[];
}
interface CustomFilterNonNullableFields {
    appId: string;
}
interface ScopeNonNullableFields$6 {
    catalogItemFilter?: CatalogItemFilterNonNullableFields;
    customFilter?: CustomFilterNonNullableFields;
    _id: string;
    type: ScopeType;
}
interface SubtotalRangeNonNullableFields {
    scopes: ScopeNonNullableFields$6[];
}
interface ItemQuantityRangeNonNullableFields {
    scopes: ScopeNonNullableFields$6[];
}
interface DiscountTriggerNonNullableFields {
    and?: AndNonNullableFields;
    or?: OrNonNullableFields;
    customTrigger?: CustomNonNullableFields;
    subtotalRange?: SubtotalRangeNonNullableFields;
    itemQuantityRange?: ItemQuantityRangeNonNullableFields;
    triggerType: TriggerType;
}
interface SpecificItemsInfoNonNullableFields {
    scopes: ScopeNonNullableFields$6[];
}
interface CustomerBuyNonNullableFields {
    minimumQuantity: number;
    scopes: ScopeNonNullableFields$6[];
}
interface CustomerGetNonNullableFields {
    quantity: number;
    scopes: ScopeNonNullableFields$6[];
}
interface BuyXGetYInfoNonNullableFields {
    customerBuys?: CustomerBuyNonNullableFields;
    customerGets?: CustomerGetNonNullableFields;
}
interface DiscountNonNullableFields {
    percentage: number;
    fixedAmount: string;
    fixedPrice: string;
    targetType: Type;
    specificItemsInfo?: SpecificItemsInfoNonNullableFields;
    discountType: DiscountType$e;
    buyXGetYInfo?: BuyXGetYInfoNonNullableFields;
}
interface DiscountsNonNullableFields {
    values: DiscountNonNullableFields[];
}
interface DiscountSettingsNonNullableFields {
    appliesTo: AppliedSubjectType;
}
interface DiscountRuleNonNullableFields$e {
    trigger?: DiscountTriggerNonNullableFields;
    discounts?: DiscountsNonNullableFields;
    status: Status$a;
    usageCount: number;
    settings?: DiscountSettingsNonNullableFields;
}
interface CreateDiscountRuleResponseNonNullableFields {
    discountRule?: DiscountRuleNonNullableFields$e;
}
interface GetDiscountRuleResponseNonNullableFields {
    discountRule?: DiscountRuleNonNullableFields$e;
}
interface UpdateDiscountRuleResponseNonNullableFields {
    discountRule?: DiscountRuleNonNullableFields$e;
}
interface QueryDiscountRulesResponseNonNullableFields {
    discountRules: DiscountRuleNonNullableFields$e[];
}

type __PublicMethodMetaInfo$t<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createDiscountRule(): __PublicMethodMetaInfo$t<'POST', {}, CreateDiscountRuleRequest, CreateDiscountRuleRequest$1, CreateDiscountRuleResponse & CreateDiscountRuleResponseNonNullableFields, CreateDiscountRuleResponse$1 & CreateDiscountRuleResponseNonNullableFields$1>;
declare function getDiscountRule(): __PublicMethodMetaInfo$t<'GET', {
    discountRuleId: string;
}, GetDiscountRuleRequest, GetDiscountRuleRequest$1, GetDiscountRuleResponse & GetDiscountRuleResponseNonNullableFields, GetDiscountRuleResponse$1 & GetDiscountRuleResponseNonNullableFields$1>;
declare function updateDiscountRule(): __PublicMethodMetaInfo$t<'PATCH', {
    discountRuleId: string;
}, UpdateDiscountRuleRequest, UpdateDiscountRuleRequest$1, UpdateDiscountRuleResponse & UpdateDiscountRuleResponseNonNullableFields, UpdateDiscountRuleResponse$1 & UpdateDiscountRuleResponseNonNullableFields$1>;
declare function deleteDiscountRule(): __PublicMethodMetaInfo$t<'DELETE', {
    discountRuleId: string;
}, DeleteDiscountRuleRequest, DeleteDiscountRuleRequest$1, DeleteDiscountRuleResponse, DeleteDiscountRuleResponse$1>;
declare function queryDiscountRules(): __PublicMethodMetaInfo$t<'POST', {}, QueryDiscountRulesRequest, QueryDiscountRulesRequest$1, QueryDiscountRulesResponse & QueryDiscountRulesResponseNonNullableFields, QueryDiscountRulesResponse$1 & QueryDiscountRulesResponseNonNullableFields$1>;

declare const meta$t_createDiscountRule: typeof createDiscountRule;
declare const meta$t_deleteDiscountRule: typeof deleteDiscountRule;
declare const meta$t_getDiscountRule: typeof getDiscountRule;
declare const meta$t_queryDiscountRules: typeof queryDiscountRules;
declare const meta$t_updateDiscountRule: typeof updateDiscountRule;
declare namespace meta$t {
  export { type __PublicMethodMetaInfo$t as __PublicMethodMetaInfo, meta$t_createDiscountRule as createDiscountRule, meta$t_deleteDiscountRule as deleteDiscountRule, meta$t_getDiscountRule as getDiscountRule, meta$t_queryDiscountRules as queryDiscountRules, meta$t_updateDiscountRule as updateDiscountRule };
}

interface Invoice$1 {
    /** Invoice ID. */
    id?: string;
    /** ID of the app that set the invoice. */
    appId?: string;
}
interface ListInvoicesForMultipleOrdersRequest$1 {
    /** Order IDs for which to retrieve invoices. */
    orderIds: string[];
}
interface ListInvoicesForMultipleOrdersResponse$1 {
    /** List of order IDs and their associated invoices. */
    invoicesForOrder?: InvoicesForOrder$1[];
}
interface InvoicesForOrder$1 {
    /** Order ID. */
    orderId?: string;
    /** Invoices info. */
    invoicesInfo?: Invoice$1[];
}
interface InvoiceNonNullableFields$1 {
    id: string;
    appId: string;
}
interface InvoicesForOrderNonNullableFields$1 {
    orderId: string;
    invoices: InvoiceNonNullableFields$1[];
    invoicesInfo: InvoiceNonNullableFields$1[];
}
interface ListInvoicesForMultipleOrdersResponseNonNullableFields$1 {
    invoicesForOrder: InvoicesForOrderNonNullableFields$1[];
}

interface Invoice {
    /** Invoice ID. */
    _id?: string;
    /** ID of the app that set the invoice. */
    appId?: string;
}
interface ListInvoicesForMultipleOrdersRequest {
    /** Order IDs for which to retrieve invoices. */
    orderIds: string[];
}
interface ListInvoicesForMultipleOrdersResponse {
    /** List of order IDs and their associated invoices. */
    invoicesForOrder?: InvoicesForOrder[];
}
interface InvoicesForOrder {
    /** Order ID. */
    orderId?: string;
    /** Invoices info. */
    invoicesInfo?: Invoice[];
}
interface InvoiceNonNullableFields {
    _id: string;
    appId: string;
}
interface InvoicesForOrderNonNullableFields {
    orderId: string;
    invoices: InvoiceNonNullableFields[];
    invoicesInfo: InvoiceNonNullableFields[];
}
interface ListInvoicesForMultipleOrdersResponseNonNullableFields {
    invoicesForOrder: InvoicesForOrderNonNullableFields[];
}

type __PublicMethodMetaInfo$s<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function listInvoicesForMultipleOrders(): __PublicMethodMetaInfo$s<'POST', {}, ListInvoicesForMultipleOrdersRequest, ListInvoicesForMultipleOrdersRequest$1, ListInvoicesForMultipleOrdersResponse & ListInvoicesForMultipleOrdersResponseNonNullableFields, ListInvoicesForMultipleOrdersResponse$1 & ListInvoicesForMultipleOrdersResponseNonNullableFields$1>;

declare const meta$s_listInvoicesForMultipleOrders: typeof listInvoicesForMultipleOrders;
declare namespace meta$s {
  export { type __PublicMethodMetaInfo$s as __PublicMethodMetaInfo, meta$s_listInvoicesForMultipleOrders as listInvoicesForMultipleOrders };
}

interface Recommendation$1 {
    /** Recommended items. */
    items?: CatalogReference$n[];
    /** The algorithm used to provide the recommendation. */
    algorithm?: Algorithm$1;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$n {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface Algorithm$1 {
    /** Algorithm ID defined by the app providing the algorithm. */
    id?: string;
    /**
     * App ID of the Wix or 3rd-party app providing the algorithm.
     *
     * Wix app IDs are <a href="https://dev.wix.com/api/rest/getting-started/wix-business-solutions#getting-started_wix-business-solutions_about-wix-business-solutions" target="_blank">listed here</a>.
     */
    appId?: string;
}
interface ListAvailableAlgorithmsRequest$1 {
}
interface ListAvailableAlgorithmsResponse$1 {
    /** Algorithms available for use on your Wix site or project. See the method description for more information. */
    availableAlgorithms?: AlgorithmInfo$1[];
}
interface AlgorithmInfo$1 {
    /** How the algorithm is configured. */
    config?: AlgorithmConfig$1;
    /**
     * The app ID of the application providing the algorithm.
     *
     * Wix app IDs are <a href="https://dev.wix.com/api/rest/getting-started/wix-business-solutions#getting-started_wix-business-solutions_about-wix-business-solutions" target="_blank">listed here</a>.
     */
    appId?: string;
    /**
     * App IDs of catalogs to which the algorithm can be applied.
     *
     * Wix app IDs are <a href="https://dev.wix.com/api/rest/getting-started/wix-business-solutions#getting-started_wix-business-solutions_about-wix-business-solutions" target="_blank">listed here</a>.
     */
    catalogAppIds?: string[];
}
interface AlgorithmConfig$1 {
    /** Algorithm name. This value is not translatable. */
    name?: string;
    /** Algorithm description. This describes how the algorithm works and if it has any limitations regarding site content, number of items in the catalog, site traffic, and so on. This value is not translatable. */
    description?: string;
    /** A supplemental `description`. It can be used to help break up and organize information. You can, for example, display this information as a tooltip or as an additional section that is collapsed by default. */
    additionalInfo?: string | null;
    /**
     * Algorithms may have the following types:
     * * `RELATED_ITEMS` - This type of algorithm provides recommendations based on 1 or more other provided items. For example, when an item is added to a cart, the algorithm can suggest other items frequently bought together with that item.
     * * `GLOBAL` - This type of algorithm provides general recommendations based on site or project statistics. For example, bestsellers or new arrivals.
     */
    algorithmType?: AlgorithmType$1;
    /** Algorithm ID. This must be unique for a specific app but does not have to be unique across all apps on the site or in the project. */
    algorithmId?: string;
}
declare enum AlgorithmType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    RELATED_ITEMS = "RELATED_ITEMS",
    GLOBAL = "GLOBAL"
}
interface GetRecommendationRequest$1 {
    /** The set of items for which to get recommendations. Required if the `algorithmType` is `RELATED_ITEMS`. */
    items?: CatalogReference$n[];
    /**
     * A list of algorithms checked in a specific order determined by their `appID` and their position in the `algorithms` array.
     * See the method description for more information.
     *
     * If no algorithm is able to return at least `minimumRecommendedItems` items, an empty array is returned.
     */
    algorithms: Algorithm$1[];
    /**
     * The minimum number of items that must be recommended by the algorithm for those items to be returned in the response.
     *
     * Max: `100`
     */
    minimumRecommendedItems?: number;
}
interface GetRecommendationResponse$1 {
    /** An object containing a list of items recommended by 1 of the specified algorithms. The recommendation is empty if none of the specified algorithms recommended enough items. */
    recommendation?: Recommendation$1;
}
interface AlgorithmConfigNonNullableFields$1 {
    name: string;
    description: string;
    algorithmType: AlgorithmType$1;
    algorithmId: string;
}
interface AlgorithmInfoNonNullableFields$1 {
    config?: AlgorithmConfigNonNullableFields$1;
    appId: string;
    catalogAppIds: string[];
}
interface ListAvailableAlgorithmsResponseNonNullableFields$1 {
    availableAlgorithms: AlgorithmInfoNonNullableFields$1[];
}
interface CatalogReferenceNonNullableFields$h {
    catalogItemId: string;
    appId: string;
}
interface AlgorithmNonNullableFields$1 {
    id: string;
    appId: string;
}
interface RecommendationNonNullableFields$1 {
    items: CatalogReferenceNonNullableFields$h[];
    algorithm?: AlgorithmNonNullableFields$1;
}
interface GetRecommendationResponseNonNullableFields$1 {
    recommendation?: RecommendationNonNullableFields$1;
}

interface Recommendation {
    /** Recommended items. */
    items?: CatalogReference$m[];
    /** The algorithm used to provide the recommendation. */
    algorithm?: Algorithm;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$m {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface Algorithm {
    /** Algorithm ID defined by the app providing the algorithm. */
    _id?: string;
    /**
     * App ID of the Wix or 3rd-party app providing the algorithm.
     *
     * Wix app IDs are <a href="https://dev.wix.com/api/rest/getting-started/wix-business-solutions#getting-started_wix-business-solutions_about-wix-business-solutions" target="_blank">listed here</a>.
     */
    appId?: string;
}
interface ListAvailableAlgorithmsRequest {
}
interface ListAvailableAlgorithmsResponse {
    /** Algorithms available for use on your Wix site or project. See the method description for more information. */
    availableAlgorithms?: AlgorithmInfo[];
}
interface AlgorithmInfo {
    /** How the algorithm is configured. */
    config?: AlgorithmConfig;
    /**
     * The app ID of the application providing the algorithm.
     *
     * Wix app IDs are <a href="https://dev.wix.com/api/rest/getting-started/wix-business-solutions#getting-started_wix-business-solutions_about-wix-business-solutions" target="_blank">listed here</a>.
     */
    appId?: string;
    /**
     * App IDs of catalogs to which the algorithm can be applied.
     *
     * Wix app IDs are <a href="https://dev.wix.com/api/rest/getting-started/wix-business-solutions#getting-started_wix-business-solutions_about-wix-business-solutions" target="_blank">listed here</a>.
     */
    catalogAppIds?: string[];
}
interface AlgorithmConfig {
    /** Algorithm name. This value is not translatable. */
    name?: string;
    /** Algorithm description. This describes how the algorithm works and if it has any limitations regarding site content, number of items in the catalog, site traffic, and so on. This value is not translatable. */
    description?: string;
    /** A supplemental `description`. It can be used to help break up and organize information. You can, for example, display this information as a tooltip or as an additional section that is collapsed by default. */
    additionalInfo?: string | null;
    /**
     * Algorithms may have the following types:
     * * `RELATED_ITEMS` - This type of algorithm provides recommendations based on 1 or more other provided items. For example, when an item is added to a cart, the algorithm can suggest other items frequently bought together with that item.
     * * `GLOBAL` - This type of algorithm provides general recommendations based on site or project statistics. For example, bestsellers or new arrivals.
     */
    algorithmType?: AlgorithmType;
    /** Algorithm ID. This must be unique for a specific app but does not have to be unique across all apps on the site or in the project. */
    algorithmId?: string;
}
declare enum AlgorithmType {
    UNSPECIFIED = "UNSPECIFIED",
    RELATED_ITEMS = "RELATED_ITEMS",
    GLOBAL = "GLOBAL"
}
interface GetRecommendationRequest {
    /** The set of items for which to get recommendations. Required if the `algorithmType` is `RELATED_ITEMS`. */
    items?: CatalogReference$m[];
    /**
     * A list of algorithms checked in a specific order determined by their `appID` and their position in the `algorithms` array.
     * See the method description for more information.
     *
     * If no algorithm is able to return at least `minimumRecommendedItems` items, an empty array is returned.
     */
    algorithms: Algorithm[];
    /**
     * The minimum number of items that must be recommended by the algorithm for those items to be returned in the response.
     *
     * Max: `100`
     */
    minimumRecommendedItems?: number;
}
interface GetRecommendationResponse {
    /** An object containing a list of items recommended by 1 of the specified algorithms. The recommendation is empty if none of the specified algorithms recommended enough items. */
    recommendation?: Recommendation;
}
interface AlgorithmConfigNonNullableFields {
    name: string;
    description: string;
    algorithmType: AlgorithmType;
    algorithmId: string;
}
interface AlgorithmInfoNonNullableFields {
    config?: AlgorithmConfigNonNullableFields;
    appId: string;
    catalogAppIds: string[];
}
interface ListAvailableAlgorithmsResponseNonNullableFields {
    availableAlgorithms: AlgorithmInfoNonNullableFields[];
}
interface CatalogReferenceNonNullableFields$g {
    catalogItemId: string;
    appId: string;
}
interface AlgorithmNonNullableFields {
    _id: string;
    appId: string;
}
interface RecommendationNonNullableFields {
    items: CatalogReferenceNonNullableFields$g[];
    algorithm?: AlgorithmNonNullableFields;
}
interface GetRecommendationResponseNonNullableFields {
    recommendation?: RecommendationNonNullableFields;
}

type __PublicMethodMetaInfo$r<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function listAvailableAlgorithms(): __PublicMethodMetaInfo$r<'GET', {}, ListAvailableAlgorithmsRequest, ListAvailableAlgorithmsRequest$1, ListAvailableAlgorithmsResponse & ListAvailableAlgorithmsResponseNonNullableFields, ListAvailableAlgorithmsResponse$1 & ListAvailableAlgorithmsResponseNonNullableFields$1>;
declare function getRecommendation(): __PublicMethodMetaInfo$r<'POST', {}, GetRecommendationRequest, GetRecommendationRequest$1, GetRecommendationResponse & GetRecommendationResponseNonNullableFields, GetRecommendationResponse$1 & GetRecommendationResponseNonNullableFields$1>;

declare const meta$r_getRecommendation: typeof getRecommendation;
declare const meta$r_listAvailableAlgorithms: typeof listAvailableAlgorithms;
declare namespace meta$r {
  export { type __PublicMethodMetaInfo$r as __PublicMethodMetaInfo, meta$r_getRecommendation as getRecommendation, meta$r_listAvailableAlgorithms as listAvailableAlgorithms };
}

/**
 * A SubscriptionContract is a ...
 * You can ...
 * Read more about SubscriptionContracts
 * in this [article](<LINK_TO_KB_ARTICLE>).
 */
interface SubscriptionContract$1 {
    /**
     * SubscriptionContract ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the SubscriptionContract is updated.
     * To prevent conflicting changes, the current revision must be passed when updating the SubscriptionContract.
     *
     * Ignored when creating a SubscriptionOrderContract.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the subscription contract was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the subscription contract was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Subscription option description. For example, `"1kg of selected coffee, once a month"`. */
    description?: string | null;
    /** Subscription detailed information. */
    subscriptionSettings?: V1SubscriptionSettings$1;
    /**
     * Order line items.
     * @readonly
     */
    lineItems?: OrderLineItem$5[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo$b;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$f;
    /** Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format. */
    currency?: string | null;
    /**
     * Whether tax is included in line item prices.
     *
     * Default: `false`
     */
    taxIncludedInPrices?: boolean;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary$d;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact$b;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: ShippingInformation$7;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$d[];
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo$5;
    /** Custom fields. */
    customFields?: CustomField$7[];
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact$b;
    /**
     * Custom field data for the subscription contract object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$h;
    /** Subscription option title. For example, `"Monthly coffee Subscription"`. */
    title?: string | null;
}
interface V1SubscriptionSettings$1 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$f;
    /** Interval of recurring payment. */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
    /** Whether to allow the customer to cancel the subscription. */
    enableCustomerCancellation?: boolean;
}
declare enum SubscriptionFrequency$f {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface OrderLineItem$5 {
    /** Line item ID. */
    id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName$d;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference$l;
    /** Line item quantity. */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price$b;
    /** Line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine$d[];
    /** Line item image. */
    image?: Image$8;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties$h;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$f;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
     */
    fulfillerId?: string | null;
    /**
     * Number of items that were refunded.
     * @readonly
     */
    refundQuantity?: number | null;
    /**
     * Number of items restocked.
     * @readonly
     */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price$b;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price$b;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$b;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$b;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` - Partial payment for the given item to be paid upfront during the checkout. Eligible for catalog items with type `DEPOSIT_ONLINE` only.
     */
    paymentOption?: PaymentOptionType$f;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails$d;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo$5;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile$5;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo$5;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$d;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price$b;
}
interface ProductName$d {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$l {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface Price$b {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface DescriptionLine$d extends DescriptionLineValueOneOf$d, DescriptionLineDescriptionLineValueOneOf$d {
    /** Description line plain text value. */
    plainText?: PlainTextValue$d;
    /** Description line color value. */
    colorInfo?: Color$d;
    /** Description line name. */
    name?: DescriptionLineName$d;
}
/** @oneof */
interface DescriptionLineValueOneOf$d {
    /** Description line plain text value. */
    plainText?: PlainTextValue$d;
    /** Description line color value. */
    colorInfo?: Color$d;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$d {
}
interface DescriptionLineName$d {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$d {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$d {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$d {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface Image$8 {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface PhysicalProperties$h {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$f extends ItemTypeItemTypeDataOneOf$f {
    /** Preset item type. */
    preset?: ItemTypeItemType$f;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$f {
    /** Preset item type. */
    preset?: ItemTypeItemType$f;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$f {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$f {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ItemTaxFullDetails$d {
    /** Taxable amount of this line item. */
    taxableAmount?: Price$b;
    /** Tax rate percentage, as a decimal numeral between 0 and 1. For example, `"0.13"`. */
    taxRate?: string;
    /** The calculated tax, based on the `taxableAmount` and `taxRate`. */
    totalTax?: Price$b;
}
interface LineItemTaxInfo$5 {
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    taxAmount?: Price$b;
    /** Amount for which tax is calculated. */
    taxableAmount?: Price$b;
    /** Tax rate %, as a decimal point. */
    taxRate?: string | null;
    /**
     * Tax group ID.
     * Learn more about [Tax Groups](https://dev.wix.com/docs/rest/business-management/payments/tax/tax-groups/introduction).
     */
    taxGroupId?: string | null;
    /** Indicates whether the price already includes tax. */
    taxIncludedInPrice?: boolean;
    /** Tax information for a line item. */
    taxBreakdown?: LineItemTaxBreakdown$5[];
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface LineItemTaxBreakdown$5 {
    /** Jurisdiction that taxes were calculated for. For example, "New York", or "Quebec". */
    jurisdiction?: string | null;
    /** Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000. */
    rate?: string | null;
    /** Amount of tax calculated for this line item. */
    taxAmount?: Price$b;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** Type of jurisdiction that taxes were calculated for. */
    jurisdictionType?: JurisdictionType$d;
    /** Non-taxable amount of the line item price. */
    nonTaxableAmount?: Price$b;
    /** Taxable amount of the line item price. */
    taxableAmount?: Price$b;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$d {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DigitalFile$5 {
    /** ID of the secure file in media. */
    fileId?: string;
    /** Link will exist after the digital links have been generated on the order. */
    link?: string | null;
    /**
     * Link expiration time and date.
     * @readonly
     */
    expirationDate?: Date | null;
}
interface SubscriptionInfo$5 {
    /** Subscription ID. */
    id?: string | null;
    /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */
    cycleNumber?: number;
    /** Subscription option title. For example, `"Monthly coffee Subscription"`. */
    subscriptionOptionTitle?: string;
    /** Subscription option description. For example, `"1kg of selected coffee, once a month"`. */
    subscriptionOptionDescription?: string | null;
    /** Subscription detailed information. */
    subscriptionSettings?: SubscriptionSettings$9;
}
interface SubscriptionSettings$9 {
    /** Frequency of recurring payment. */
    frequency?: V2SubscriptionFrequency$1;
    /** Interval of recurring payment. */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum V2SubscriptionFrequency$1 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface PriceDescription$d {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
declare enum TaxableAddressType$d {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Buyer Info */
interface BuyerInfo$b extends BuyerInfoIdOneOf$b {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
    /** Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction). */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$b {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
}
declare enum WeightUnit$f {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface PriceSummary$d {
    /** Subtotal of all the line items, before discounts and before tax. */
    subtotal?: Price$b;
    /** Total shipping price, before discounts and before tax. */
    shipping?: Price$b;
    /** Total tax on this order. */
    tax?: Price$b;
    /** Total calculated discount value. */
    discount?: Price$b;
    /** Order’s total price after discounts and tax. */
    total?: Price$b;
    /** Total price of additional fees before tax. */
    totalAdditionalFees?: Price$b;
}
/** Billing Info and shipping details */
interface AddressWithContact$b {
    /** Address. */
    address?: Address$h;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$f;
}
/** Physical address */
interface Address$h {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$j;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress$j {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$f {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$d;
}
interface VatId$d {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$d;
}
/** tax info types */
declare enum VatType$d {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface ShippingInformation$7 {
    /** App Def Id of external provider which was a source of shipping info */
    carrierId?: string | null;
    /** Unique code (or ID) of selected shipping option. For example, `"usps_std_overnight"``. */
    code?: string | null;
    /**
     * Shipping option title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"` or `"First-Class Package International"`.
     */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics$f;
    /** Shipping costs. */
    cost?: ShippingPrice$d;
    /** Shipping region. */
    region?: ShippingRegion$d;
}
interface DeliveryLogistics$f extends DeliveryLogisticsAddressOneOf$3 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$b;
    /** Pickup details. */
    pickupDetails?: PickupDetails$f;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /**
     * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Expected delivery time. */
    deliveryTimeSlot?: DeliveryTimeSlot$7;
}
/** @oneof */
interface DeliveryLogisticsAddressOneOf$3 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$b;
    /** Pickup details. */
    pickupDetails?: PickupDetails$f;
}
interface PickupDetails$f {
    /** Pickup address. */
    address?: PickupAddress$5;
    /** Pickup method */
    pickupMethod?: PickupMethod$f;
}
/** Physical address */
interface PickupAddress$5 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address object, with number, name, and apartment number in separate fields. */
    streetAddress?: StreetAddress$j;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
declare enum PickupMethod$f {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$7 {
    /** Delivery slot starting time. */
    from?: Date | null;
    /** Delivery slot ending time. */
    to?: Date | null;
}
interface ShippingPrice$d {
    /** Shipping price for display purposes. */
    price?: Price$b;
    /**
     * Total price of shipping after discounts (when relevant), and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$b;
    /**
     * Shipping price after all discounts (if any exist), and after tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$b;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$d;
    /**
     * Shipping discount before tax.
     * @readonly
     */
    discount?: Price$b;
}
interface ShippingRegion$d {
    /** Name of shipping region. For example, `"Metropolitan London"`, or `"Outer Melbourne suburbs"`. */
    name?: string | null;
}
interface AppliedDiscount$d extends AppliedDiscountDiscountSourceOneOf$d {
    /** Applied coupon info. */
    coupon?: Coupon$d;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$d;
    /** Automatic Discount */
    discountRule?: DiscountRule$d;
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to specific items.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: DiscountType$d;
    /**
     * IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @deprecated IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemIds?: string[];
    /** Discount id. */
    id?: string | null;
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$d {
    /** Applied coupon info. */
    coupon?: Coupon$d;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$d;
    /** Automatic Discount */
    discountRule?: DiscountRule$d;
}
declare enum DiscountType$d {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$d {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** Coupon value. */
    amount?: Price$b;
}
interface MerchantDiscount$d extends MerchantDiscountMerchantDiscountReasonOneOf$5 {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason$5;
    /** Discount description as free text (optional). */
    description?: string | null;
    /** Discount amount. */
    amount?: Price$b;
}
/** @oneof */
interface MerchantDiscountMerchantDiscountReasonOneOf$5 {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason$5;
    /** Discount description as free text (optional). */
    description?: string | null;
}
declare enum DiscountReason$5 {
    UNSPECIFIED = "UNSPECIFIED",
    EXCHANGED_ITEMS = "EXCHANGED_ITEMS"
}
interface DiscountRule$d {
    /** Discount rule ID */
    id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$d;
    /** Discount value. */
    amount?: Price$b;
}
interface DiscountRuleName$d {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface ChannelInfo$5 {
    /** Sales channel that submitted the order. */
    type?: ChannelType$b;
    /** Reference to an order ID from an external system. */
    externalOrderId?: string | null;
    /** URL to the order in the external system. */
    externalOrderUrl?: string | null;
}
declare enum ChannelType$b {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CustomField$7 {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
interface ExtendedFields$h {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface GetSubscriptionContractRequest$1 {
    /** ID of the SubscriptionContract to retrieve. */
    subscriptionContractId: string;
}
interface GetSubscriptionContractResponse$1 {
    /** The requested SubscriptionContract. */
    subscriptionContract?: SubscriptionContract$1;
}
interface QuerySubscriptionContractsRequest$1 {
    /** WQL expression. */
    query?: CursorQuery$f;
}
interface CursorQuery$f extends CursorQueryPagingMethodOneOf$f {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$r;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     * Learn more about the [filter format](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * Learn more about the [sort format](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$r[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$f {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$r;
}
interface Sorting$r {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$r;
}
declare enum SortOrder$r {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$r {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QuerySubscriptionContractsResponse$1 {
    /** List of SubscriptionContracts. */
    subscriptionContracts?: SubscriptionContract$1[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$l;
}
interface CursorPagingMetadata$l {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$r;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$r {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface V1SubscriptionSettingsNonNullableFields$1 {
    frequency: SubscriptionFrequency$f;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
}
interface ProductNameNonNullableFields$d {
    original: string;
}
interface CatalogReferenceNonNullableFields$f {
    catalogItemId: string;
    appId: string;
}
interface PriceNonNullableFields$b {
    amount: string;
    formattedAmount: string;
}
interface PlainTextValueNonNullableFields$d {
    original: string;
}
interface ColorNonNullableFields$d {
    original: string;
}
interface DescriptionLineNameNonNullableFields$d {
    original: string;
}
interface DescriptionLineNonNullableFields$d {
    plainText?: PlainTextValueNonNullableFields$d;
    colorInfo?: ColorNonNullableFields$d;
    plainTextValue?: PlainTextValueNonNullableFields$d;
    color: string;
    name?: DescriptionLineNameNonNullableFields$d;
    lineType: DescriptionLineType$d;
}
interface ImageNonNullableFields$8 {
    id: string;
    url: string;
    height: number;
    width: number;
}
interface PhysicalPropertiesNonNullableFields$d {
    shippable: boolean;
}
interface ItemTypeNonNullableFields$d {
    preset: ItemTypeItemType$f;
    custom: string;
}
interface ItemTaxFullDetailsNonNullableFields$d {
    taxableAmount?: PriceNonNullableFields$b;
    taxRate: string;
    totalTax?: PriceNonNullableFields$b;
}
interface LineItemTaxBreakdownNonNullableFields$5 {
    taxAmount?: PriceNonNullableFields$b;
    jurisdictionType: JurisdictionType$d;
    nonTaxableAmount?: PriceNonNullableFields$b;
    taxableAmount?: PriceNonNullableFields$b;
}
interface LineItemTaxInfoNonNullableFields$5 {
    taxAmount?: PriceNonNullableFields$b;
    taxableAmount?: PriceNonNullableFields$b;
    taxIncludedInPrice: boolean;
    taxBreakdown: LineItemTaxBreakdownNonNullableFields$5[];
}
interface DigitalFileNonNullableFields$5 {
    fileId: string;
}
interface SubscriptionSettingsNonNullableFields$d {
    frequency: V2SubscriptionFrequency$1;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
}
interface SubscriptionInfoNonNullableFields$5 {
    cycleNumber: number;
    subscriptionOptionTitle: string;
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$d;
}
interface PriceDescriptionNonNullableFields$d {
    original: string;
}
interface LocationAndQuantityNonNullableFields$5 {
    id: string;
    quantity: number;
}
interface TaxableAddressNonNullableFields$d {
    addressType: TaxableAddressType$d;
}
interface OrderLineItemNonNullableFields$5 {
    id: string;
    productName?: ProductNameNonNullableFields$d;
    catalogReference?: CatalogReferenceNonNullableFields$f;
    quantity: number;
    totalDiscount?: PriceNonNullableFields$b;
    descriptionLines: DescriptionLineNonNullableFields$d[];
    image?: ImageNonNullableFields$8;
    physicalProperties?: PhysicalPropertiesNonNullableFields$d;
    itemType?: ItemTypeNonNullableFields$d;
    price?: PriceNonNullableFields$b;
    priceBeforeDiscounts?: PriceNonNullableFields$b;
    totalPriceBeforeTax?: PriceNonNullableFields$b;
    totalPriceAfterTax?: PriceNonNullableFields$b;
    paymentOption: PaymentOptionType$f;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$d;
    taxInfo?: LineItemTaxInfoNonNullableFields$5;
    digitalFile?: DigitalFileNonNullableFields$5;
    subscriptionInfo?: SubscriptionInfoNonNullableFields$5;
    priceDescription?: PriceDescriptionNonNullableFields$d;
    depositAmount?: PriceNonNullableFields$b;
    locations: LocationAndQuantityNonNullableFields$5[];
    lineItemPrice?: PriceNonNullableFields$b;
    taxableAddress?: TaxableAddressNonNullableFields$d;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
}
interface BuyerInfoNonNullableFields$b {
    visitorId: string;
    memberId: string;
}
interface PriceSummaryNonNullableFields$d {
    subtotal?: PriceNonNullableFields$b;
    shipping?: PriceNonNullableFields$b;
    tax?: PriceNonNullableFields$b;
    discount?: PriceNonNullableFields$b;
    totalPrice?: PriceNonNullableFields$b;
    total?: PriceNonNullableFields$b;
    totalWithGiftCard?: PriceNonNullableFields$b;
    totalWithoutGiftCard?: PriceNonNullableFields$b;
    totalAdditionalFees?: PriceNonNullableFields$b;
}
interface StreetAddressNonNullableFields$j {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$h {
    streetAddress?: StreetAddressNonNullableFields$j;
}
interface VatIdNonNullableFields$b {
    id: string;
    type: VatType$d;
}
interface FullAddressContactDetailsNonNullableFields$d {
    vatId?: VatIdNonNullableFields$b;
}
interface AddressWithContactNonNullableFields$b {
    address?: AddressNonNullableFields$h;
    contactDetails?: FullAddressContactDetailsNonNullableFields$d;
}
interface PickupAddressNonNullableFields$5 {
    streetAddress?: StreetAddressNonNullableFields$j;
}
interface PickupDetailsNonNullableFields$f {
    address?: PickupAddressNonNullableFields$5;
    pickupMethod: PickupMethod$f;
}
interface DeliveryLogisticsNonNullableFields$f {
    shippingDestination?: AddressWithContactNonNullableFields$b;
    pickupDetails?: PickupDetailsNonNullableFields$f;
}
interface ShippingPriceNonNullableFields$d {
    price?: PriceNonNullableFields$b;
    totalPriceBeforeTax?: PriceNonNullableFields$b;
    totalPriceAfterTax?: PriceNonNullableFields$b;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$d;
    discount?: PriceNonNullableFields$b;
}
interface ShippingInformationNonNullableFields$b {
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$f;
    cost?: ShippingPriceNonNullableFields$d;
}
interface OrderTaxBreakdownNonNullableFields$5 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionType: JurisdictionType$d;
    rate: string;
    aggregatedTaxAmount?: PriceNonNullableFields$b;
    aggregatedTaxableAmount?: PriceNonNullableFields$b;
}
interface OrderTaxInfoNonNullableFields$5 {
    totalTax?: PriceNonNullableFields$b;
    taxBreakdown: OrderTaxBreakdownNonNullableFields$5[];
}
interface CouponNonNullableFields$d {
    id: string;
    code: string;
    name: string;
    amount?: PriceNonNullableFields$b;
}
interface MerchantDiscountNonNullableFields$d {
    discountReason: DiscountReason$5;
    amount?: PriceNonNullableFields$b;
}
interface DiscountRuleNameNonNullableFields$d {
    original: string;
}
interface DiscountRuleNonNullableFields$d {
    id: string;
    name?: DiscountRuleNameNonNullableFields$d;
    amount?: PriceNonNullableFields$b;
}
interface LineItemDiscountNonNullableFields$d {
    id: string;
    totalDiscount?: PriceNonNullableFields$b;
}
interface AppliedDiscountNonNullableFields$d {
    coupon?: CouponNonNullableFields$d;
    merchantDiscount?: MerchantDiscountNonNullableFields$d;
    discountRule?: DiscountRuleNonNullableFields$d;
    discountType: DiscountType$d;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$d[];
}
interface ChannelInfoNonNullableFields$5 {
    type: ChannelType$b;
}
interface CustomFieldNonNullableFields$7 {
    title: string;
}
interface SubscriptionContractNonNullableFields$1 {
    subscriptionSettings?: V1SubscriptionSettingsNonNullableFields$1;
    lineItems: OrderLineItemNonNullableFields$5[];
    buyerInfo?: BuyerInfoNonNullableFields$b;
    weightUnit: WeightUnit$f;
    taxIncludedInPrices: boolean;
    priceSummary?: PriceSummaryNonNullableFields$d;
    billingInfo?: AddressWithContactNonNullableFields$b;
    shippingInfo?: ShippingInformationNonNullableFields$b;
    taxInfo?: OrderTaxInfoNonNullableFields$5;
    appliedDiscounts: AppliedDiscountNonNullableFields$d[];
    channelInfo?: ChannelInfoNonNullableFields$5;
    customFields: CustomFieldNonNullableFields$7[];
    recipientInfo?: AddressWithContactNonNullableFields$b;
}
interface GetSubscriptionContractResponseNonNullableFields$1 {
    subscriptionContract?: SubscriptionContractNonNullableFields$1;
}
interface QuerySubscriptionContractsResponseNonNullableFields$1 {
    subscriptionContracts: SubscriptionContractNonNullableFields$1[];
}

/**
 * A SubscriptionContract is a ...
 * You can ...
 * Read more about SubscriptionContracts
 * in this [article](<LINK_TO_KB_ARTICLE>).
 */
interface SubscriptionContract {
    /**
     * SubscriptionContract ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the SubscriptionContract is updated.
     * To prevent conflicting changes, the current revision must be passed when updating the SubscriptionContract.
     *
     * Ignored when creating a SubscriptionOrderContract.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the subscription contract was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the subscription contract was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Subscription option description. For example, `"1kg of selected coffee, once a month"`. */
    description?: string | null;
    /** Subscription detailed information. */
    subscriptionSettings?: V1SubscriptionSettings;
    /**
     * Order line items.
     * @readonly
     */
    lineItems?: OrderLineItem$4[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo$a;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$e;
    /** Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format. */
    currency?: string | null;
    /**
     * Whether tax is included in line item prices.
     *
     * Default: `false`
     */
    taxIncludedInPrices?: boolean;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary$c;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact$a;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: ShippingInformation$6;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$c[];
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo$4;
    /** Custom fields. */
    customFields?: CustomField$6[];
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact$a;
    /**
     * Custom field data for the subscription contract object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$g;
    /** Subscription option title. For example, `"Monthly coffee Subscription"`. */
    title?: string | null;
}
interface V1SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$e;
    /** Interval of recurring payment. */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
    /** Whether to allow the customer to cancel the subscription. */
    enableCustomerCancellation?: boolean;
}
declare enum SubscriptionFrequency$e {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface OrderLineItem$4 {
    /** Line item ID. */
    _id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName$c;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference$k;
    /** Line item quantity. */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price$a;
    /** Line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine$c[];
    /** Line item image. */
    image?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties$g;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$e;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
     */
    fulfillerId?: string | null;
    /**
     * Number of items that were refunded.
     * @readonly
     */
    refundQuantity?: number | null;
    /**
     * Number of items restocked.
     * @readonly
     */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price$a;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price$a;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$a;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$a;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` - Partial payment for the given item to be paid upfront during the checkout. Eligible for catalog items with type `DEPOSIT_ONLINE` only.
     */
    paymentOption?: PaymentOptionType$e;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails$c;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo$4;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile$4;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo$4;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$c;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price$a;
}
interface ProductName$c {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$k {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface Price$a {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface DescriptionLine$c extends DescriptionLineValueOneOf$c, DescriptionLineDescriptionLineValueOneOf$c {
    /** Description line plain text value. */
    plainText?: PlainTextValue$c;
    /** Description line color value. */
    colorInfo?: Color$c;
    /** Description line name. */
    name?: DescriptionLineName$c;
}
/** @oneof */
interface DescriptionLineValueOneOf$c {
    /** Description line plain text value. */
    plainText?: PlainTextValue$c;
    /** Description line color value. */
    colorInfo?: Color$c;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$c {
}
interface DescriptionLineName$c {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$c {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$c {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$c {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface PhysicalProperties$g {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$e extends ItemTypeItemTypeDataOneOf$e {
    /** Preset item type. */
    preset?: ItemTypeItemType$e;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$e {
    /** Preset item type. */
    preset?: ItemTypeItemType$e;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$e {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$e {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ItemTaxFullDetails$c {
    /** Taxable amount of this line item. */
    taxableAmount?: Price$a;
    /** Tax rate percentage, as a decimal numeral between 0 and 1. For example, `"0.13"`. */
    taxRate?: string;
    /** The calculated tax, based on the `taxableAmount` and `taxRate`. */
    totalTax?: Price$a;
}
interface LineItemTaxInfo$4 {
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    taxAmount?: Price$a;
    /** Amount for which tax is calculated. */
    taxableAmount?: Price$a;
    /** Tax rate %, as a decimal point. */
    taxRate?: string | null;
    /**
     * Tax group ID.
     * Learn more about [Tax Groups](https://dev.wix.com/docs/rest/business-management/payments/tax/tax-groups/introduction).
     */
    taxGroupId?: string | null;
    /** Indicates whether the price already includes tax. */
    taxIncludedInPrice?: boolean;
    /** Tax information for a line item. */
    taxBreakdown?: LineItemTaxBreakdown$4[];
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface LineItemTaxBreakdown$4 {
    /** Jurisdiction that taxes were calculated for. For example, "New York", or "Quebec". */
    jurisdiction?: string | null;
    /** Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000. */
    rate?: string | null;
    /** Amount of tax calculated for this line item. */
    taxAmount?: Price$a;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** Type of jurisdiction that taxes were calculated for. */
    jurisdictionType?: JurisdictionType$c;
    /** Non-taxable amount of the line item price. */
    nonTaxableAmount?: Price$a;
    /** Taxable amount of the line item price. */
    taxableAmount?: Price$a;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$c {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DigitalFile$4 {
    /** ID of the secure file in media. */
    fileId?: string;
    /** Link will exist after the digital links have been generated on the order. */
    link?: string | null;
    /**
     * Link expiration time and date.
     * @readonly
     */
    expirationDate?: Date | null;
}
interface SubscriptionInfo$4 {
    /** Subscription ID. */
    _id?: string | null;
    /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */
    cycleNumber?: number;
    /** Subscription option title. For example, `"Monthly coffee Subscription"`. */
    subscriptionOptionTitle?: string;
    /** Subscription option description. For example, `"1kg of selected coffee, once a month"`. */
    subscriptionOptionDescription?: string | null;
    /** Subscription detailed information. */
    subscriptionSettings?: SubscriptionSettings$8;
}
interface SubscriptionSettings$8 {
    /** Frequency of recurring payment. */
    frequency?: V2SubscriptionFrequency;
    /** Interval of recurring payment. */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum V2SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface PriceDescription$c {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
declare enum TaxableAddressType$c {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Buyer Info */
interface BuyerInfo$a extends BuyerInfoIdOneOf$a {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
    /** Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction). */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$a {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
}
declare enum WeightUnit$e {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface PriceSummary$c {
    /** Subtotal of all the line items, before discounts and before tax. */
    subtotal?: Price$a;
    /** Total shipping price, before discounts and before tax. */
    shipping?: Price$a;
    /** Total tax on this order. */
    tax?: Price$a;
    /** Total calculated discount value. */
    discount?: Price$a;
    /** Order’s total price after discounts and tax. */
    total?: Price$a;
    /** Total price of additional fees before tax. */
    totalAdditionalFees?: Price$a;
}
/** Billing Info and shipping details */
interface AddressWithContact$a {
    /** Address. */
    address?: Address$g;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$e;
}
/** Physical address */
interface Address$g {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$i;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$i {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$e {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$c;
}
interface VatId$c {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$c;
}
/** tax info types */
declare enum VatType$c {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface ShippingInformation$6 {
    /** App Def Id of external provider which was a source of shipping info */
    carrierId?: string | null;
    /** Unique code (or ID) of selected shipping option. For example, `"usps_std_overnight"``. */
    code?: string | null;
    /**
     * Shipping option title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"` or `"First-Class Package International"`.
     */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics$e;
    /** Shipping costs. */
    cost?: ShippingPrice$c;
    /** Shipping region. */
    region?: ShippingRegion$c;
}
interface DeliveryLogistics$e extends DeliveryLogisticsAddressOneOf$2 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$a;
    /** Pickup details. */
    pickupDetails?: PickupDetails$e;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /**
     * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Expected delivery time. */
    deliveryTimeSlot?: DeliveryTimeSlot$6;
}
/** @oneof */
interface DeliveryLogisticsAddressOneOf$2 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$a;
    /** Pickup details. */
    pickupDetails?: PickupDetails$e;
}
interface PickupDetails$e {
    /** Pickup address. */
    address?: PickupAddress$4;
    /** Pickup method */
    pickupMethod?: PickupMethod$e;
}
/** Physical address */
interface PickupAddress$4 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address object, with number, name, and apartment number in separate fields. */
    streetAddress?: StreetAddress$i;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
declare enum PickupMethod$e {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$6 {
    /** Delivery slot starting time. */
    from?: Date | null;
    /** Delivery slot ending time. */
    to?: Date | null;
}
interface ShippingPrice$c {
    /** Shipping price for display purposes. */
    price?: Price$a;
    /**
     * Total price of shipping after discounts (when relevant), and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$a;
    /**
     * Shipping price after all discounts (if any exist), and after tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$a;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$c;
    /**
     * Shipping discount before tax.
     * @readonly
     */
    discount?: Price$a;
}
interface ShippingRegion$c {
    /** Name of shipping region. For example, `"Metropolitan London"`, or `"Outer Melbourne suburbs"`. */
    name?: string | null;
}
interface AppliedDiscount$c extends AppliedDiscountDiscountSourceOneOf$c {
    /** Applied coupon info. */
    coupon?: Coupon$c;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$c;
    /** Automatic Discount */
    discountRule?: DiscountRule$c;
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to specific items.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: DiscountType$c;
    /**
     * IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @deprecated IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemIds?: string[];
    /** Discount id. */
    _id?: string | null;
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$c {
    /** Applied coupon info. */
    coupon?: Coupon$c;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$c;
    /** Automatic Discount */
    discountRule?: DiscountRule$c;
}
declare enum DiscountType$c {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$c {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** Coupon value. */
    amount?: Price$a;
}
interface MerchantDiscount$c extends MerchantDiscountMerchantDiscountReasonOneOf$4 {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason$4;
    /** Discount description as free text (optional). */
    description?: string | null;
    /** Discount amount. */
    amount?: Price$a;
}
/** @oneof */
interface MerchantDiscountMerchantDiscountReasonOneOf$4 {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason$4;
    /** Discount description as free text (optional). */
    description?: string | null;
}
declare enum DiscountReason$4 {
    UNSPECIFIED = "UNSPECIFIED",
    EXCHANGED_ITEMS = "EXCHANGED_ITEMS"
}
interface DiscountRule$c {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$c;
    /** Discount value. */
    amount?: Price$a;
}
interface DiscountRuleName$c {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface ChannelInfo$4 {
    /** Sales channel that submitted the order. */
    type?: ChannelType$a;
    /** Reference to an order ID from an external system. */
    externalOrderId?: string | null;
    /** URL to the order in the external system. */
    externalOrderUrl?: string | null;
}
declare enum ChannelType$a {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CustomField$6 {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
interface ExtendedFields$g {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface GetSubscriptionContractRequest {
    /** ID of the SubscriptionContract to retrieve. */
    subscriptionContractId: string;
}
interface GetSubscriptionContractResponse {
    /** The requested SubscriptionContract. */
    subscriptionContract?: SubscriptionContract;
}
interface QuerySubscriptionContractsRequest {
    /** WQL expression. */
    query?: CursorQuery$e;
}
interface CursorQuery$e extends CursorQueryPagingMethodOneOf$e {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$q;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     * Learn more about the [filter format](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * Learn more about the [sort format](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$q[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$e {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$q;
}
interface Sorting$q {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$q;
}
declare enum SortOrder$q {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$q {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QuerySubscriptionContractsResponse {
    /** List of SubscriptionContracts. */
    subscriptionContracts?: SubscriptionContract[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$k;
}
interface CursorPagingMetadata$k {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$q;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$q {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface V1SubscriptionSettingsNonNullableFields {
    frequency: SubscriptionFrequency$e;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
}
interface ProductNameNonNullableFields$c {
    original: string;
}
interface CatalogReferenceNonNullableFields$e {
    catalogItemId: string;
    appId: string;
}
interface PriceNonNullableFields$a {
    amount: string;
    formattedAmount: string;
}
interface PlainTextValueNonNullableFields$c {
    original: string;
}
interface ColorNonNullableFields$c {
    original: string;
}
interface DescriptionLineNameNonNullableFields$c {
    original: string;
}
interface DescriptionLineNonNullableFields$c {
    plainText?: PlainTextValueNonNullableFields$c;
    colorInfo?: ColorNonNullableFields$c;
    plainTextValue?: PlainTextValueNonNullableFields$c;
    color: string;
    name?: DescriptionLineNameNonNullableFields$c;
    lineType: DescriptionLineType$c;
}
interface PhysicalPropertiesNonNullableFields$c {
    shippable: boolean;
}
interface ItemTypeNonNullableFields$c {
    preset: ItemTypeItemType$e;
    custom: string;
}
interface ItemTaxFullDetailsNonNullableFields$c {
    taxableAmount?: PriceNonNullableFields$a;
    taxRate: string;
    totalTax?: PriceNonNullableFields$a;
}
interface LineItemTaxBreakdownNonNullableFields$4 {
    taxAmount?: PriceNonNullableFields$a;
    jurisdictionType: JurisdictionType$c;
    nonTaxableAmount?: PriceNonNullableFields$a;
    taxableAmount?: PriceNonNullableFields$a;
}
interface LineItemTaxInfoNonNullableFields$4 {
    taxAmount?: PriceNonNullableFields$a;
    taxableAmount?: PriceNonNullableFields$a;
    taxIncludedInPrice: boolean;
    taxBreakdown: LineItemTaxBreakdownNonNullableFields$4[];
}
interface DigitalFileNonNullableFields$4 {
    fileId: string;
}
interface SubscriptionSettingsNonNullableFields$c {
    frequency: V2SubscriptionFrequency;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
}
interface SubscriptionInfoNonNullableFields$4 {
    cycleNumber: number;
    subscriptionOptionTitle: string;
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$c;
}
interface PriceDescriptionNonNullableFields$c {
    original: string;
}
interface LocationAndQuantityNonNullableFields$4 {
    _id: string;
    quantity: number;
}
interface TaxableAddressNonNullableFields$c {
    addressType: TaxableAddressType$c;
}
interface OrderLineItemNonNullableFields$4 {
    _id: string;
    productName?: ProductNameNonNullableFields$c;
    catalogReference?: CatalogReferenceNonNullableFields$e;
    quantity: number;
    totalDiscount?: PriceNonNullableFields$a;
    descriptionLines: DescriptionLineNonNullableFields$c[];
    image: string;
    physicalProperties?: PhysicalPropertiesNonNullableFields$c;
    itemType?: ItemTypeNonNullableFields$c;
    price?: PriceNonNullableFields$a;
    priceBeforeDiscounts?: PriceNonNullableFields$a;
    totalPriceBeforeTax?: PriceNonNullableFields$a;
    totalPriceAfterTax?: PriceNonNullableFields$a;
    paymentOption: PaymentOptionType$e;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$c;
    taxInfo?: LineItemTaxInfoNonNullableFields$4;
    digitalFile?: DigitalFileNonNullableFields$4;
    subscriptionInfo?: SubscriptionInfoNonNullableFields$4;
    priceDescription?: PriceDescriptionNonNullableFields$c;
    depositAmount?: PriceNonNullableFields$a;
    locations: LocationAndQuantityNonNullableFields$4[];
    lineItemPrice?: PriceNonNullableFields$a;
    taxableAddress?: TaxableAddressNonNullableFields$c;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
}
interface BuyerInfoNonNullableFields$a {
    visitorId: string;
    memberId: string;
}
interface PriceSummaryNonNullableFields$c {
    subtotal?: PriceNonNullableFields$a;
    shipping?: PriceNonNullableFields$a;
    tax?: PriceNonNullableFields$a;
    discount?: PriceNonNullableFields$a;
    totalPrice?: PriceNonNullableFields$a;
    total?: PriceNonNullableFields$a;
    totalWithGiftCard?: PriceNonNullableFields$a;
    totalWithoutGiftCard?: PriceNonNullableFields$a;
    totalAdditionalFees?: PriceNonNullableFields$a;
}
interface StreetAddressNonNullableFields$i {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$g {
    streetAddress?: StreetAddressNonNullableFields$i;
}
interface VatIdNonNullableFields$a {
    _id: string;
    type: VatType$c;
}
interface FullAddressContactDetailsNonNullableFields$c {
    vatId?: VatIdNonNullableFields$a;
}
interface AddressWithContactNonNullableFields$a {
    address?: AddressNonNullableFields$g;
    contactDetails?: FullAddressContactDetailsNonNullableFields$c;
}
interface PickupAddressNonNullableFields$4 {
    streetAddress?: StreetAddressNonNullableFields$i;
}
interface PickupDetailsNonNullableFields$e {
    address?: PickupAddressNonNullableFields$4;
    pickupMethod: PickupMethod$e;
}
interface DeliveryLogisticsNonNullableFields$e {
    shippingDestination?: AddressWithContactNonNullableFields$a;
    pickupDetails?: PickupDetailsNonNullableFields$e;
}
interface ShippingPriceNonNullableFields$c {
    price?: PriceNonNullableFields$a;
    totalPriceBeforeTax?: PriceNonNullableFields$a;
    totalPriceAfterTax?: PriceNonNullableFields$a;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$c;
    discount?: PriceNonNullableFields$a;
}
interface ShippingInformationNonNullableFields$a {
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$e;
    cost?: ShippingPriceNonNullableFields$c;
}
interface OrderTaxBreakdownNonNullableFields$4 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionType: JurisdictionType$c;
    rate: string;
    aggregatedTaxAmount?: PriceNonNullableFields$a;
    aggregatedTaxableAmount?: PriceNonNullableFields$a;
}
interface OrderTaxInfoNonNullableFields$4 {
    totalTax?: PriceNonNullableFields$a;
    taxBreakdown: OrderTaxBreakdownNonNullableFields$4[];
}
interface CouponNonNullableFields$c {
    _id: string;
    code: string;
    name: string;
    amount?: PriceNonNullableFields$a;
}
interface MerchantDiscountNonNullableFields$c {
    discountReason: DiscountReason$4;
    amount?: PriceNonNullableFields$a;
}
interface DiscountRuleNameNonNullableFields$c {
    original: string;
}
interface DiscountRuleNonNullableFields$c {
    _id: string;
    name?: DiscountRuleNameNonNullableFields$c;
    amount?: PriceNonNullableFields$a;
}
interface LineItemDiscountNonNullableFields$c {
    _id: string;
    totalDiscount?: PriceNonNullableFields$a;
}
interface AppliedDiscountNonNullableFields$c {
    coupon?: CouponNonNullableFields$c;
    merchantDiscount?: MerchantDiscountNonNullableFields$c;
    discountRule?: DiscountRuleNonNullableFields$c;
    discountType: DiscountType$c;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$c[];
}
interface ChannelInfoNonNullableFields$4 {
    type: ChannelType$a;
}
interface CustomFieldNonNullableFields$6 {
    title: string;
}
interface SubscriptionContractNonNullableFields {
    subscriptionSettings?: V1SubscriptionSettingsNonNullableFields;
    lineItems: OrderLineItemNonNullableFields$4[];
    buyerInfo?: BuyerInfoNonNullableFields$a;
    weightUnit: WeightUnit$e;
    taxIncludedInPrices: boolean;
    priceSummary?: PriceSummaryNonNullableFields$c;
    billingInfo?: AddressWithContactNonNullableFields$a;
    shippingInfo?: ShippingInformationNonNullableFields$a;
    taxInfo?: OrderTaxInfoNonNullableFields$4;
    appliedDiscounts: AppliedDiscountNonNullableFields$c[];
    channelInfo?: ChannelInfoNonNullableFields$4;
    customFields: CustomFieldNonNullableFields$6[];
    recipientInfo?: AddressWithContactNonNullableFields$a;
}
interface GetSubscriptionContractResponseNonNullableFields {
    subscriptionContract?: SubscriptionContractNonNullableFields;
}
interface QuerySubscriptionContractsResponseNonNullableFields {
    subscriptionContracts: SubscriptionContractNonNullableFields[];
}

type __PublicMethodMetaInfo$q<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getSubscriptionContract(): __PublicMethodMetaInfo$q<'GET', {
    subscriptionContractId: string;
}, GetSubscriptionContractRequest, GetSubscriptionContractRequest$1, GetSubscriptionContractResponse & GetSubscriptionContractResponseNonNullableFields, GetSubscriptionContractResponse$1 & GetSubscriptionContractResponseNonNullableFields$1>;
declare function querySubscriptionContracts(): __PublicMethodMetaInfo$q<'GET', {}, QuerySubscriptionContractsRequest, QuerySubscriptionContractsRequest$1, QuerySubscriptionContractsResponse & QuerySubscriptionContractsResponseNonNullableFields, QuerySubscriptionContractsResponse$1 & QuerySubscriptionContractsResponseNonNullableFields$1>;

declare const meta$q_getSubscriptionContract: typeof getSubscriptionContract;
declare const meta$q_querySubscriptionContracts: typeof querySubscriptionContracts;
declare namespace meta$q {
  export { type __PublicMethodMetaInfo$q as __PublicMethodMetaInfo, meta$q_getSubscriptionContract as getSubscriptionContract, meta$q_querySubscriptionContracts as querySubscriptionContracts };
}

interface AbandonedCheckout$1 {
    /** Abandoned checkout ID. */
    id?: string;
    /** Date and time the abandoned checkout was created. */
    createdDate?: Date | null;
    /** Date and time the abandoned checkout was updated. */
    updatedDate?: Date | null;
    /** The associated checkout ID. */
    checkoutId?: string | null;
    /** The associated cart ID. */
    cartId?: string | null;
    /** Status of the abandoned checkout. */
    status?: Status$9;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Buyer information. */
    buyerInfo?: V1BuyerInfo$1;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$d;
    /** The store's currency. */
    currency?: string;
    /** Currency the buyer used in checkout. */
    conversionCurrency?: string | null;
    /** Total price after discounts, gift cards, and tax. */
    totalPrice?: MultiCurrencyPrice$9;
    /**
     * List of all automation activities performed by [Wix Automations](https://support.wix.com/en/article/wix-automations-getting-started) regarding the abandoned checkout.
     * Wix Automations updates the `activities` field for each actvity in the automation flow. Only relevant if the site owner set up [automations in the Dashboard](https://support.wix.com/en/article/wix-automations-creating-a-new-automation). Read more about `activities` in the [introduction](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/abandoned-checkout/introduction).
     */
    activities?: Activity$5[];
    /** Date and time the abandoned checkout was recovered. */
    checkoutRecoveredDate?: Date | null;
    /** Checkout URL. */
    checkoutUrl?: string;
    /** Subtotal price of all line items, before discounts and before tax. */
    subtotalPrice?: MultiCurrencyPrice$9;
}
declare enum ActivityType$5 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    SCHEDULED = "SCHEDULED",
    EMAIL_SENT = "EMAIL_SENT",
    EMAIL_NOT_SENT = "EMAIL_NOT_SENT",
    NOTIFICATION_SENT = "NOTIFICATION_SENT",
    TASK_CREATED = "TASK_CREATED"
}
/** Status of the abandoned checkout. */
declare enum Status$9 {
    ABANDONED = "ABANDONED",
    RECOVERED = "RECOVERED"
}
/** Buyer information. */
interface V1BuyerInfo$1 extends V1BuyerInfoIdOneOf$1 {
    /** Visitor ID (if the site visitor is **not** a site member). */
    visitorId?: string;
    /** Member ID (if the site visitor is a site member). */
    memberId?: string;
    /** User ID (if the site visitor is a site owner or collaborator). */
    userId?: string;
    /**
     * Contact ID. For more information, see the [Contacts API](https://dev.wix.com/docs/rest/api-reference/contacts/introduction).
     * @readonly
     */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface V1BuyerInfoIdOneOf$1 {
    /** Visitor ID (if the site visitor is **not** a site member). */
    visitorId?: string;
    /** Member ID (if the site visitor is a site member). */
    memberId?: string;
    /** User ID (if the site visitor is a site owner or collaborator). */
    userId?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$d {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$b;
}
interface VatId$b {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$b;
}
/** tax info types */
declare enum VatType$b {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface MultiCurrencyPrice$9 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface Activity$5 {
    /** Date and time the automation activity was created. */
    createdDate?: Date | null;
    /** Automation activity type. */
    type?: ActivityType$5;
}
interface GetAbandonedCheckoutRequest$1 {
    /** Abandoned checkout ID. */
    abandonedCheckoutId: string;
}
interface GetAbandonedCheckoutResponse$1 {
    /** The requested abandoned checkout. */
    abandonedCheckout?: AbandonedCheckout$1;
}
interface DeleteAbandonedCheckoutRequest$1 {
    /** Id of the abandoned checkout to delete */
    abandonedCheckoutId: string;
}
interface DeleteAbandonedCheckoutResponse$1 {
}
interface QueryAbandonedCheckoutsRequest$1 {
    /** Query options. */
    query: QueryV2$7;
}
interface QueryV2$7 extends QueryV2PagingMethodOneOf$7 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$7;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$p;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$p[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf$7 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$7;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$p;
}
interface Sorting$p {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$p;
}
declare enum SortOrder$p {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging$7 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$p {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryAbandonedCheckoutsResponse$1 {
    /**
     * __Deprecated.__ Use `abandonedCheckouts` instead.
     * @deprecated
     */
    results?: AbandonedCheckout$1[];
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout$1[];
    /** Details on the paged set of results returned. */
    metadata?: PagingMetadataV2$3;
}
interface PagingMetadataV2$3 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors$p;
}
interface Cursors$p {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface SearchAbandonedCheckoutsRequest$1 {
    /** WQL query expression. */
    search?: Search$1;
}
interface Search$1 extends SearchPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: CommonPaging$1;
    /** Cursor pointing to page of results. Can't be used together with 'paging'. 'cursor_paging.cursor' can not be used together with 'filter' or 'sort' */
    cursorPaging?: CommonCursorPaging$1;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: CommonSorting$1[];
    /** free text to match in searchable fields */
    search?: SearchDetails$1;
}
/** @oneof */
interface SearchPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: CommonPaging$1;
    /** Cursor pointing to page of results. Can't be used together with 'paging'. 'cursor_paging.cursor' can not be used together with 'filter' or 'sort' */
    cursorPaging?: CommonCursorPaging$1;
}
interface CommonSorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: CommonSortOrder$1;
}
declare enum CommonSortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface SearchDetails$1 {
    /** boolean search mode */
    mode?: Mode$1;
    /** search term or expression */
    expression?: string | null;
    /** fields to search in. if empty - server will search in own default fields */
    fields?: string[];
    /** flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
declare enum Mode$1 {
    /** any */
    OR = "OR",
    /** all */
    AND = "AND"
}
interface CommonPaging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CommonCursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface SearchAbandonedCheckoutsResponse$1 {
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout$1[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CommonPagingMetadataV2$1;
}
interface CommonPagingMetadataV2$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: CommonCursors$1;
}
interface CommonCursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface RedirectToCheckoutRequest$1 {
    /** abandoned checkout id */
    abandonedCheckoutId: string;
    /** Identifier of the metaSite this checkout uses */
    metasiteId: string;
}
interface RawHttpResponse$3 {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry$3[];
}
interface HeadersEntry$3 {
    key?: string;
    value?: string;
}
interface V1BuyerInfoNonNullableFields$1 {
    visitorId: string;
    memberId: string;
    userId: string;
}
interface VatIdNonNullableFields$9 {
    id: string;
    type: VatType$b;
}
interface FullAddressContactDetailsNonNullableFields$b {
    vatId?: VatIdNonNullableFields$9;
}
interface MultiCurrencyPriceNonNullableFields$9 {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface ActivityNonNullableFields$5 {
    type: ActivityType$5;
}
interface AbandonedCheckoutNonNullableFields$1 {
    id: string;
    status: Status$9;
    buyerInfo?: V1BuyerInfoNonNullableFields$1;
    contactDetails?: FullAddressContactDetailsNonNullableFields$b;
    currency: string;
    totalPrice?: MultiCurrencyPriceNonNullableFields$9;
    activities: ActivityNonNullableFields$5[];
    checkoutUrl: string;
    subtotalPrice?: MultiCurrencyPriceNonNullableFields$9;
}
interface GetAbandonedCheckoutResponseNonNullableFields$1 {
    abandonedCheckout?: AbandonedCheckoutNonNullableFields$1;
}
interface QueryAbandonedCheckoutsResponseNonNullableFields$1 {
    results: AbandonedCheckoutNonNullableFields$1[];
    abandonedCheckouts: AbandonedCheckoutNonNullableFields$1[];
}
interface SearchAbandonedCheckoutsResponseNonNullableFields$1 {
    abandonedCheckouts: AbandonedCheckoutNonNullableFields$1[];
}
interface HeadersEntryNonNullableFields$3 {
    key: string;
    value: string;
}
interface RawHttpResponseNonNullableFields$3 {
    body: Uint8Array;
    headers: HeadersEntryNonNullableFields$3[];
}

interface AbandonedCheckout {
    /** Abandoned checkout ID. */
    _id?: string;
    /** Date and time the abandoned checkout was created. */
    _createdDate?: Date | null;
    /** Date and time the abandoned checkout was updated. */
    _updatedDate?: Date | null;
    /** The associated checkout ID. */
    checkoutId?: string | null;
    /** The associated cart ID. */
    cartId?: string | null;
    /** Status of the abandoned checkout. */
    status?: Status$8;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Buyer information. */
    buyerInfo?: V1BuyerInfo;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$c;
    /** The store's currency. */
    currency?: string;
    /** Currency the buyer used in checkout. */
    conversionCurrency?: string | null;
    /** Total price after discounts, gift cards, and tax. */
    totalPrice?: MultiCurrencyPrice$8;
    /**
     * List of all automation activities performed by [Wix Automations](https://support.wix.com/en/article/wix-automations-getting-started) regarding the abandoned checkout.
     * Wix Automations updates the `activities` field for each actvity in the automation flow. Only relevant if you've set up [automations in the Dashboard](https://support.wix.com/en/article/wix-automations-creating-a-new-automation). Read more about `activities` in the [introduction](https://www.wix.com/velo/reference/wix-ecom-backend/abandonedcheckout/introduction).
     */
    activities?: Activity$4[];
    /** Date and time the abandoned checkout was recovered. */
    checkoutRecoveredDate?: Date | null;
    /** Checkout URL. */
    checkoutUrl?: string;
    /** Subtotal price of all line items, before discounts and before tax. */
    subtotalPrice?: MultiCurrencyPrice$8;
}
declare enum ActivityType$4 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    SCHEDULED = "SCHEDULED",
    EMAIL_SENT = "EMAIL_SENT",
    EMAIL_NOT_SENT = "EMAIL_NOT_SENT",
    NOTIFICATION_SENT = "NOTIFICATION_SENT",
    TASK_CREATED = "TASK_CREATED"
}
/** Status of the abandoned checkout. */
declare enum Status$8 {
    ABANDONED = "ABANDONED",
    RECOVERED = "RECOVERED"
}
/** Buyer information. */
interface V1BuyerInfo extends V1BuyerInfoIdOneOf {
    /** Visitor ID (if the site visitor is **not** a site member). */
    visitorId?: string;
    /** Member ID (if the site visitor is a site member). */
    memberId?: string;
    /** User ID (if the site visitor is a site owner or collaborator). */
    userId?: string;
    /**
     * Contact ID. For more information, see the [Contacts API](https://www.wix.com/velo/reference/wix-crm-v2/contacts).
     * @readonly
     */
    contactId?: string | null;
    /**
     * Buyer email address.
     * Max: `50`
     */
    email?: string | null;
}
/** @oneof */
interface V1BuyerInfoIdOneOf {
    /** Visitor ID (if the site visitor is **not** a site member). */
    visitorId?: string;
    /** Member ID (if the site visitor is a site member). */
    memberId?: string;
    /** User ID (if the site visitor is a site owner or collaborator). */
    userId?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$c {
    /**
     * First name.
     * Max length: `100`
     */
    firstName?: string | null;
    /**
     * Last name.
     * Max length: `100`
     */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /**
     * Company name.
     * Max length: `50`
     */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$a;
}
interface VatId$a {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$a;
}
/** tax info types */
declare enum VatType$a {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface MultiCurrencyPrice$8 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface Activity$4 {
    /** Date and time the automation activity was created. */
    _createdDate?: Date | null;
    /**
     * Automation activity type.
     *
     * Supported properties: `UNKNOWN_TYPE`, `SCHEDULED`, `EMAIL_SENT`, `EMAIL_NOT_SENT`, `NOTIFICATION_SENT`, `TASK_CREATED`
     */
    type?: ActivityType$4;
}
interface GetAbandonedCheckoutRequest {
    /** Abandoned checkout ID. */
    abandonedCheckoutId: string;
}
interface GetAbandonedCheckoutResponse {
    /** The requested abandoned checkout. */
    abandonedCheckout?: AbandonedCheckout;
}
interface DeleteAbandonedCheckoutRequest {
    /** Id of the abandoned checkout to delete */
    abandonedCheckoutId: string;
}
interface DeleteAbandonedCheckoutResponse {
}
interface QueryAbandonedCheckoutsRequest {
    /** Query options. */
    query: QueryV2$6;
}
interface QueryV2$6 extends QueryV2PagingMethodOneOf$6 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$6;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$o;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$o[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf$6 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$6;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$o;
}
interface Sorting$o {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$o;
}
declare enum SortOrder$o {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging$6 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$o {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryAbandonedCheckoutsResponse {
    /**
     * __Deprecated.__ Use `abandonedCheckouts` instead.
     * @deprecated
     */
    results?: AbandonedCheckout[];
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout[];
    /** Details on the paged set of results returned. */
    metadata?: PagingMetadataV2$2;
}
interface PagingMetadataV2$2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors$o;
}
interface Cursors$o {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface SearchAbandonedCheckoutsRequest {
    /** WQL query expression. */
    search?: Search;
}
interface Search extends SearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: CommonPaging;
    /** Cursor pointing to page of results. Can't be used together with 'paging'. 'cursor_paging.cursor' can not be used together with 'filter' or 'sort' */
    cursorPaging?: CommonCursorPaging;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: CommonSorting[];
    /** free text to match in searchable fields */
    search?: SearchDetails;
}
/** @oneof */
interface SearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: CommonPaging;
    /** Cursor pointing to page of results. Can't be used together with 'paging'. 'cursor_paging.cursor' can not be used together with 'filter' or 'sort' */
    cursorPaging?: CommonCursorPaging;
}
interface CommonSorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: CommonSortOrder;
}
declare enum CommonSortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface SearchDetails {
    /** boolean search mode */
    mode?: Mode;
    /** search term or expression */
    expression?: string | null;
    /** fields to search in. if empty - server will search in own default fields */
    fields?: string[];
    /** flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
declare enum Mode {
    /** any */
    OR = "OR",
    /** all */
    AND = "AND"
}
interface CommonPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CommonCursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface SearchAbandonedCheckoutsResponse {
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CommonPagingMetadataV2;
}
interface CommonPagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: CommonCursors;
}
interface CommonCursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface RedirectToCheckoutRequest {
    /** abandoned checkout id */
    abandonedCheckoutId: string;
    /** Identifier of the metaSite this checkout uses */
    metasiteId: string;
}
interface RawHttpResponse$2 {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry$2[];
}
interface HeadersEntry$2 {
    key?: string;
    value?: string;
}
interface V1BuyerInfoNonNullableFields {
    visitorId: string;
    memberId: string;
    userId: string;
}
interface VatIdNonNullableFields$8 {
    _id: string;
    type: VatType$a;
}
interface FullAddressContactDetailsNonNullableFields$a {
    vatId?: VatIdNonNullableFields$8;
}
interface MultiCurrencyPriceNonNullableFields$8 {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface ActivityNonNullableFields$4 {
    type: ActivityType$4;
}
interface AbandonedCheckoutNonNullableFields {
    _id: string;
    status: Status$8;
    buyerInfo?: V1BuyerInfoNonNullableFields;
    contactDetails?: FullAddressContactDetailsNonNullableFields$a;
    currency: string;
    totalPrice?: MultiCurrencyPriceNonNullableFields$8;
    activities: ActivityNonNullableFields$4[];
    checkoutUrl: string;
    subtotalPrice?: MultiCurrencyPriceNonNullableFields$8;
}
interface GetAbandonedCheckoutResponseNonNullableFields {
    abandonedCheckout?: AbandonedCheckoutNonNullableFields;
}
interface QueryAbandonedCheckoutsResponseNonNullableFields {
    results: AbandonedCheckoutNonNullableFields[];
    abandonedCheckouts: AbandonedCheckoutNonNullableFields[];
}
interface SearchAbandonedCheckoutsResponseNonNullableFields {
    abandonedCheckouts: AbandonedCheckoutNonNullableFields[];
}
interface HeadersEntryNonNullableFields$2 {
    key: string;
    value: string;
}
interface RawHttpResponseNonNullableFields$2 {
    body: Uint8Array;
    headers: HeadersEntryNonNullableFields$2[];
}

type __PublicMethodMetaInfo$p<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getAbandonedCheckout(): __PublicMethodMetaInfo$p<'GET', {
    abandonedCheckoutId: string;
}, GetAbandonedCheckoutRequest, GetAbandonedCheckoutRequest$1, GetAbandonedCheckoutResponse & GetAbandonedCheckoutResponseNonNullableFields, GetAbandonedCheckoutResponse$1 & GetAbandonedCheckoutResponseNonNullableFields$1>;
declare function deleteAbandonedCheckout(): __PublicMethodMetaInfo$p<'DELETE', {
    abandonedCheckoutId: string;
}, DeleteAbandonedCheckoutRequest, DeleteAbandonedCheckoutRequest$1, DeleteAbandonedCheckoutResponse, DeleteAbandonedCheckoutResponse$1>;
declare function queryAbandonedCheckouts(): __PublicMethodMetaInfo$p<'POST', {}, QueryAbandonedCheckoutsRequest, QueryAbandonedCheckoutsRequest$1, QueryAbandonedCheckoutsResponse & QueryAbandonedCheckoutsResponseNonNullableFields, QueryAbandonedCheckoutsResponse$1 & QueryAbandonedCheckoutsResponseNonNullableFields$1>;
declare function searchAbandonedCheckouts(): __PublicMethodMetaInfo$p<'POST', {}, SearchAbandonedCheckoutsRequest, SearchAbandonedCheckoutsRequest$1, SearchAbandonedCheckoutsResponse & SearchAbandonedCheckoutsResponseNonNullableFields, SearchAbandonedCheckoutsResponse$1 & SearchAbandonedCheckoutsResponseNonNullableFields$1>;
declare function redirectToCheckout(): __PublicMethodMetaInfo$p<'GET', {
    abandonedCheckoutId: string;
}, RedirectToCheckoutRequest, RedirectToCheckoutRequest$1, RawHttpResponse$2 & RawHttpResponseNonNullableFields$2, RawHttpResponse$3 & RawHttpResponseNonNullableFields$3>;

declare const meta$p_deleteAbandonedCheckout: typeof deleteAbandonedCheckout;
declare const meta$p_getAbandonedCheckout: typeof getAbandonedCheckout;
declare const meta$p_queryAbandonedCheckouts: typeof queryAbandonedCheckouts;
declare const meta$p_redirectToCheckout: typeof redirectToCheckout;
declare const meta$p_searchAbandonedCheckouts: typeof searchAbandonedCheckouts;
declare namespace meta$p {
  export { type __PublicMethodMetaInfo$p as __PublicMethodMetaInfo, meta$p_deleteAbandonedCheckout as deleteAbandonedCheckout, meta$p_getAbandonedCheckout as getAbandonedCheckout, meta$p_queryAbandonedCheckouts as queryAbandonedCheckouts, meta$p_redirectToCheckout as redirectToCheckout, meta$p_searchAbandonedCheckouts as searchAbandonedCheckouts };
}

/**
 * The back in stock notification request allows a customer to receive a notifiction when a specific item
 * is available again. The request includes information about the person making the request, the item
 * they want to receive a notification for, and the status of the notification.
 */
interface BackInStockNotificationRequest$1 {
    /**
     * Request ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Catalog and item reference that the notification request is for.
     *
     * Includes IDs for the catalog and item it came from, as well as additional, optional information.
     */
    catalogReference?: CatalogReference$j;
    /** Email address to send notification to about item being back in stock. */
    email?: string;
    /**
     * Contact ID for the contact with this `email`.
     *
     * If a contact does not already exist with the email address submitted when creating this request, then a new contact is created.
     * For more information about contacts, see the [Contacts API](https://dev.wix.com/docs/rest/api-reference/contacts/introduction).
     * @readonly
     */
    contactId?: string | null;
    /**
     * Status of the notification.
     *
     * `status` is set to `RECEIVED` when the notification request is created.
     * The `status` changes once a notification email is sent for this request object:
     * + When a notification email is sent through the site, either automatically or with [Report Items Back In Stock](/report-items-back-in-stock), then the `status` is briefly set to `PROCESSING` and then set to `NOTIFICATION_SENT` if the email is successul, and `FAILED` if it fails.
     * + When a notification email is sent offline, use [Mark As Notification Sent](/mark-as-notification-sent) to set `status` to `NOTIFICATION_SENT`.
     * @readonly
     */
    status?: Status$7;
    /**
     * Whether a notification was sent automatically.
     *
     * `autoNotified` is empty when the notification request is created and is not returned until
     * the field has a value. `autoNotified` receives a value when a notification email is sent for this request object.
     *
     * `autoNotified` sets to `TRUE` if the notification is sent through the site, either automatically or with [Report Items Back In Stock](/report-items-back-in-stock).
     * If the notification email is sent offline but the `status` is updated with [Mark As Notification Sent](/mark-as-notification-sent),
     * then `autoNotified` sets to `FALSE`.
     * @readonly
     */
    autoNotified?: boolean | null;
    /**
     * Date and time the notification request was created.
     * @readonly
     */
    createdDate?: Date | null;
    /** Item URL for this request. */
    itemUrl?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$j {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
declare enum Status$7 {
    UNSPECIFIED = "UNSPECIFIED",
    /** initial status of all new requests */
    RECEIVED = "RECEIVED",
    PROCESSING = "PROCESSING",
    NOTIFICATION_SENT = "NOTIFICATION_SENT",
    FAILED = "FAILED"
}
interface CreateBackInStockNotificationRequestRequest$1 {
    /**
     * Notification request information.
     *
     * Includes details for the out of stock item and the email address
     * requesting to be notified when it's back in stock.
     */
    request: BackInStockNotificationRequest$1;
    /** Item details to include in the notification when the item is back in stock. */
    itemDetails: BackInStockItemDetails$1;
}
interface BackInStockItemDetails$1 {
    /** Item name. */
    name?: string;
    /** Item price. */
    price?: string;
    /** Item image. */
    image?: Image$7;
}
interface Image$7 {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface CreateBackInStockNotificationRequestResponse$1 {
    /** Created back in stock notification request. */
    request?: BackInStockNotificationRequest$1;
}
interface GetBackInStockNotificationRequestRequest$1 {
    /** ID of the notification request to retrieve. */
    id: string;
}
interface GetBackInStockNotificationRequestResponse$1 {
    /** Retrieved back in stock notification request. */
    request?: BackInStockNotificationRequest$1;
}
interface DeleteBackInStockNotificationRequestRequest$1 {
    /** ID of the notification request to delete. */
    id: string;
}
interface DeleteBackInStockNotificationRequestResponse$1 {
}
interface MarkAsNotificationSentRequest$1 {
    /** ID of the notification request to mark. */
    id: string;
}
interface MarkAsNotificationSentResponse$1 {
    /** Marked back in stock notification request. */
    request?: BackInStockNotificationRequest$1;
}
interface QueryBackInStockNotificationRequestsRequest$1 {
    /** Query options. */
    query: PlatformQuery$1;
}
interface PlatformQuery$1 extends PlatformQueryPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$1;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$n;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting$n[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$1;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$n;
}
interface Sorting$n {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$n;
}
declare enum SortOrder$n {
    ASC = "ASC",
    DESC = "DESC"
}
interface PlatformPaging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$n {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryBackInStockNotificationRequestsResponse$1 {
    /** Retrieved back in stock requests. */
    requests?: BackInStockNotificationRequest$1[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata$1;
}
interface PlatformPagingMetadata$1 {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors$n;
}
interface Cursors$n {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesRequest$1 {
    /** `catalogReference` items to retrieve the notification request for. */
    catalogReferences: CatalogReference$j[];
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesResponse$1 {
    /** Amount of back in stock notifications for each of the retrieved `catalogReference` items. */
    countsPerCatalogReference?: BackInStockNotificationRequestsCount$1[];
}
/** Maps each back in stock CatalogReference to the results (the number of unique occurrences). */
interface BackInStockNotificationRequestsCount$1 {
    /**
     * Catalog and item reference.
     *
     * Includes IDs and additional, optional information related to the item.
     */
    catalogReference?: CatalogReference$j;
    /** The number of unique back in stock requests for given `catalogReference`. */
    count?: number;
}
interface ReportItemsBackInStockRequest$1 {
    /**
     * `catalogReference` item to send notifications for.
     *
     * Cannot be used with `requestIds`.
     */
    catalogReference?: CatalogReference$j;
    /**
     * IDs of requests to send notifications for.
     *
     * Cannot be used with `catalogReference`.
     */
    requestIds?: string[];
    /**
     * Item details to use in notifications.
     *
     * `itemDetails` may populate dynamic valyes in the notification template, as follows:
     * + `itemDetails.name` passes to the template as `item.name`
     * + `itemDetails.price` passes to the template as `item.price`
     * + `itemDetails.image.url` passes to the template as `item.image.url`
     *
     * Use `extraAutomationTemplateParameters` to pass additional dynamic values.
     */
    itemDetails: BackInStockItemDetails$1;
    /** Additional key-value pairs to pass to the back in stock notification template. */
    extraAutomationTemplateParameters?: Record<string, string>;
}
interface ReportItemsBackInStockResponse$1 {
}
interface CatalogReferenceNonNullableFields$d {
    catalogItemId: string;
    appId: string;
}
interface BackInStockNotificationRequestNonNullableFields$1 {
    catalogReference?: CatalogReferenceNonNullableFields$d;
    email: string;
    status: Status$7;
}
interface CreateBackInStockNotificationRequestResponseNonNullableFields$1 {
    request?: BackInStockNotificationRequestNonNullableFields$1;
}
interface GetBackInStockNotificationRequestResponseNonNullableFields$1 {
    request?: BackInStockNotificationRequestNonNullableFields$1;
}
interface MarkAsNotificationSentResponseNonNullableFields$1 {
    request?: BackInStockNotificationRequestNonNullableFields$1;
}
interface QueryBackInStockNotificationRequestsResponseNonNullableFields$1 {
    requests: BackInStockNotificationRequestNonNullableFields$1[];
}
interface BackInStockNotificationRequestsCountNonNullableFields$1 {
    catalogReference?: CatalogReferenceNonNullableFields$d;
    count: number;
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields$1 {
    countsPerCatalogReference: BackInStockNotificationRequestsCountNonNullableFields$1[];
}

/**
 * The back in stock notification request allows a customer to receive a notifiction when a specific item
 * is available again. The request includes information about the person making the request, the item
 * they want to receive a notification for, and the status of the notification.
 */
interface BackInStockNotificationRequest {
    /**
     * Request ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Catalog and item reference that the notification request is for.
     *
     * Includes IDs for the catalog and item it came from, as well as additional, optional information.
     */
    catalogReference?: CatalogReference$i;
    /** Email address to send notification to about item being back in stock. */
    email?: string;
    /**
     * Contact ID for the contact with this `email`.
     *
     * If a contact does not already exist with the email address submitted when creating this request, then a new contact is created.
     * For more information about contacts, see the Contacts API.
     * @readonly
     */
    contactId?: string | null;
    /**
     * Status of the notification.
     *
     * `status` is set to `RECEIVED` when the notification request is created. The `status` changes once a notification email is sent for this request object:
     * + When a notification email is sent through the site, either automatically or with the `reportItemsBackInStock()` function, then the `status` is briefly set to `PROCESSING` and then set to `NOTIFICATION_SENT` if the email is successul, and `FAILED` if it fails.
     * + When a notification email is sent offline, use the `markAsNotificationSent()` function to set `status` to `NOTIFICATION_SENT`.
     * @readonly
     */
    status?: Status$6;
    /**
     * Whether a notification was sent automatically.
     *
     * `autoNotified` is empty when the notification request is created and is not returned until the field has a value. `autoNotified` receives a value when a notification email is sent for this request object.
     *
     * `autoNotified` sets to `true` if the notification is sent through the site, either automatically or with the `reportItemsBackInStock()` function. If the notification email is sent offline but the `status` is updated with the `markAsNotificationSent()` function, then `autoNotified` sets to `false`.
     * @readonly
     */
    autoNotified?: boolean | null;
    /**
     * Date and time the notification request was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Item URL for this request. */
    itemUrl?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$i {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
declare enum Status$6 {
    UNSPECIFIED = "UNSPECIFIED",
    /** initial status of all new requests */
    RECEIVED = "RECEIVED",
    PROCESSING = "PROCESSING",
    NOTIFICATION_SENT = "NOTIFICATION_SENT",
    FAILED = "FAILED"
}
interface CreateBackInStockNotificationRequestRequest {
    /**
     * Notification request information.
     *
     * Includes details for the out of stock item and the email address
     * requesting to be notified when it's back in stock.
     */
    request: BackInStockNotificationRequest;
    /** Item details to include in the notification when the item is back in stock. */
    itemDetails: BackInStockItemDetails;
}
interface BackInStockItemDetails {
    /** Item name. */
    name?: string;
    /** Item price. */
    price?: string;
    /** Item image. */
    image?: string;
}
interface CreateBackInStockNotificationRequestResponse {
    /** Created back in stock notification request. */
    request?: BackInStockNotificationRequest;
}
interface GetBackInStockNotificationRequestRequest {
    /** ID of the notification request to retrieve. */
    _id: string;
}
interface GetBackInStockNotificationRequestResponse {
    /** Retrieved back in stock notification request. */
    request?: BackInStockNotificationRequest;
}
interface DeleteBackInStockNotificationRequestRequest {
    /** ID of the notification request to delete. */
    _id: string;
}
interface DeleteBackInStockNotificationRequestResponse {
}
interface MarkAsNotificationSentRequest {
    /** ID of the notification request to mark. */
    _id: string;
}
interface MarkAsNotificationSentResponse {
    /** Marked back in stock notification request. */
    request?: BackInStockNotificationRequest;
}
interface QueryBackInStockNotificationRequestsRequest {
    /** Query options. */
    query: PlatformQuery;
}
interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$m;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting$m[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$m;
}
interface Sorting$m {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$m;
}
declare enum SortOrder$m {
    ASC = "ASC",
    DESC = "DESC"
}
interface PlatformPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$m {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryBackInStockNotificationRequestsResponse {
    /** Retrieved back in stock requests. */
    requests?: BackInStockNotificationRequest[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata;
}
interface PlatformPagingMetadata {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors$m;
}
interface Cursors$m {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesRequest {
    /** `catalogReference` items to retrieve the notification request for. */
    catalogReferences: CatalogReference$i[];
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesResponse {
    /** Amount of back in stock notifications for each of the retrieved `catalogReference` items. */
    countsPerCatalogReference?: BackInStockNotificationRequestsCount[];
}
/** Maps each back in stock CatalogReference to the results (the number of unique occurrences). */
interface BackInStockNotificationRequestsCount {
    /**
     * Catalog and item reference.
     *
     * Includes IDs and additional, optional information related to the item.
     */
    catalogReference?: CatalogReference$i;
    /** The number of unique back in stock requests for given `catalogReference`. */
    count?: number;
}
interface ReportItemsBackInStockRequest {
    /**
     * `catalogReference` item to send notifications for.
     *
     * Cannot be used with `requestIds`.
     */
    catalogReference?: CatalogReference$i;
    /**
     * IDs of requests to send notifications for.
     *
     * Cannot be used with `catalogReference`.
     */
    requestIds?: string[];
    /**
     * Item details to use in notifications.
     *
     * `itemDetails` may populate dynamic valyes in the notification template, as follows:
     * + `itemDetails.name` passes to the template as `item.name`
     * + `itemDetails.price` passes to the template as `item.price`
     * + `itemDetails.image.url` passes to the template as `item.image.url`
     *
     * Use `extraAutomationTemplateParameters` to pass additional dynamic values.
     */
    itemDetails: BackInStockItemDetails;
    /** Additional key-value pairs to pass to the back in stock notification template. */
    extraAutomationTemplateParameters?: Record<string, string>;
}
interface ReportItemsBackInStockResponse {
}
interface CatalogReferenceNonNullableFields$c {
    catalogItemId: string;
    appId: string;
}
interface BackInStockNotificationRequestNonNullableFields {
    catalogReference?: CatalogReferenceNonNullableFields$c;
    email: string;
    status: Status$6;
}
interface CreateBackInStockNotificationRequestResponseNonNullableFields {
    request?: BackInStockNotificationRequestNonNullableFields;
}
interface GetBackInStockNotificationRequestResponseNonNullableFields {
    request?: BackInStockNotificationRequestNonNullableFields;
}
interface MarkAsNotificationSentResponseNonNullableFields {
    request?: BackInStockNotificationRequestNonNullableFields;
}
interface QueryBackInStockNotificationRequestsResponseNonNullableFields {
    requests: BackInStockNotificationRequestNonNullableFields[];
}
interface BackInStockNotificationRequestsCountNonNullableFields {
    catalogReference?: CatalogReferenceNonNullableFields$c;
    count: number;
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields {
    countsPerCatalogReference: BackInStockNotificationRequestsCountNonNullableFields[];
}

type __PublicMethodMetaInfo$o<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createBackInStockNotificationRequest(): __PublicMethodMetaInfo$o<'POST', {}, CreateBackInStockNotificationRequestRequest, CreateBackInStockNotificationRequestRequest$1, CreateBackInStockNotificationRequestResponse & CreateBackInStockNotificationRequestResponseNonNullableFields, CreateBackInStockNotificationRequestResponse$1 & CreateBackInStockNotificationRequestResponseNonNullableFields$1>;
declare function getBackInStockNotificationRequest(): __PublicMethodMetaInfo$o<'GET', {
    id: string;
}, GetBackInStockNotificationRequestRequest, GetBackInStockNotificationRequestRequest$1, GetBackInStockNotificationRequestResponse & GetBackInStockNotificationRequestResponseNonNullableFields, GetBackInStockNotificationRequestResponse$1 & GetBackInStockNotificationRequestResponseNonNullableFields$1>;
declare function deleteBackInStockNotificationRequest(): __PublicMethodMetaInfo$o<'DELETE', {
    id: string;
}, DeleteBackInStockNotificationRequestRequest, DeleteBackInStockNotificationRequestRequest$1, DeleteBackInStockNotificationRequestResponse, DeleteBackInStockNotificationRequestResponse$1>;
declare function markAsNotificationSent(): __PublicMethodMetaInfo$o<'PUT', {
    id: string;
}, MarkAsNotificationSentRequest, MarkAsNotificationSentRequest$1, MarkAsNotificationSentResponse & MarkAsNotificationSentResponseNonNullableFields, MarkAsNotificationSentResponse$1 & MarkAsNotificationSentResponseNonNullableFields$1>;
declare function queryBackInStockNotificationRequests(): __PublicMethodMetaInfo$o<'GET', {}, QueryBackInStockNotificationRequestsRequest, QueryBackInStockNotificationRequestsRequest$1, QueryBackInStockNotificationRequestsResponse & QueryBackInStockNotificationRequestsResponseNonNullableFields, QueryBackInStockNotificationRequestsResponse$1 & QueryBackInStockNotificationRequestsResponseNonNullableFields$1>;
declare function getBackInStockNotificationRequestsCountByCatalogReferences(): __PublicMethodMetaInfo$o<'GET', {}, GetBackInStockNotificationRequestsCountByCatalogReferencesRequest, GetBackInStockNotificationRequestsCountByCatalogReferencesRequest$1, GetBackInStockNotificationRequestsCountByCatalogReferencesResponse & GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields, GetBackInStockNotificationRequestsCountByCatalogReferencesResponse$1 & GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields$1>;
declare function reportItemsBackInStock(): __PublicMethodMetaInfo$o<'POST', {}, ReportItemsBackInStockRequest, ReportItemsBackInStockRequest$1, ReportItemsBackInStockResponse, ReportItemsBackInStockResponse$1>;

declare const meta$o_createBackInStockNotificationRequest: typeof createBackInStockNotificationRequest;
declare const meta$o_deleteBackInStockNotificationRequest: typeof deleteBackInStockNotificationRequest;
declare const meta$o_getBackInStockNotificationRequest: typeof getBackInStockNotificationRequest;
declare const meta$o_getBackInStockNotificationRequestsCountByCatalogReferences: typeof getBackInStockNotificationRequestsCountByCatalogReferences;
declare const meta$o_markAsNotificationSent: typeof markAsNotificationSent;
declare const meta$o_queryBackInStockNotificationRequests: typeof queryBackInStockNotificationRequests;
declare const meta$o_reportItemsBackInStock: typeof reportItemsBackInStock;
declare namespace meta$o {
  export { type __PublicMethodMetaInfo$o as __PublicMethodMetaInfo, meta$o_createBackInStockNotificationRequest as createBackInStockNotificationRequest, meta$o_deleteBackInStockNotificationRequest as deleteBackInStockNotificationRequest, meta$o_getBackInStockNotificationRequest as getBackInStockNotificationRequest, meta$o_getBackInStockNotificationRequestsCountByCatalogReferences as getBackInStockNotificationRequestsCountByCatalogReferences, meta$o_markAsNotificationSent as markAsNotificationSent, meta$o_queryBackInStockNotificationRequests as queryBackInStockNotificationRequests, meta$o_reportItemsBackInStock as reportItemsBackInStock };
}

/**
 * The back in stock settings object holds information related to the state of collecting back in stock
 * notification requests.
 */
interface BackInStockSettings$1 {
    /**
     * Information about collecting customer requests to receive
     * back in stock notifications.
     */
    collectionStates?: BackInStockCollectionState$1[];
}
interface BackInStockCollectionState$1 {
    /** ID of the app to receive notification requests for. */
    appId?: string;
    /** Whether to collect requests for items from this app. */
    collectingRequests?: boolean;
}
interface StartCollectingRequestsRequest$1 {
    /** ID of the app to start accepting notification requests for. */
    appId: string;
}
interface StartCollectingRequestsResponse$1 {
    /** Back in stock settings info. */
    settings?: BackInStockSettings$1;
}
interface StopCollectingRequestsRequest$1 {
    /** ID of the app to stop accepting notification requests for. */
    appId: string;
}
interface StopCollectingRequestsResponse$1 {
    /** Back in stock settings info. */
    settings?: BackInStockSettings$1;
}
interface GetSettingsRequest$1 {
}
interface GetSettingsResponse$1 {
    /** Retrieved back in stock request settings. */
    settings?: BackInStockSettings$1;
}
interface BackInStockCollectionStateNonNullableFields$1 {
    appId: string;
    collectingRequests: boolean;
}
interface BackInStockSettingsNonNullableFields$1 {
    collectionStates: BackInStockCollectionStateNonNullableFields$1[];
}
interface StartCollectingRequestsResponseNonNullableFields$1 {
    settings?: BackInStockSettingsNonNullableFields$1;
}
interface StopCollectingRequestsResponseNonNullableFields$1 {
    settings?: BackInStockSettingsNonNullableFields$1;
}
interface GetSettingsResponseNonNullableFields$1 {
    settings?: BackInStockSettingsNonNullableFields$1;
}

/**
 * The back in stock settings object holds information related to the state of collecting back in stock
 * notification requests.
 */
interface BackInStockSettings {
    /**
     * Information about collecting customer requests to receive
     * back in stock notifications.
     */
    collectionStates?: BackInStockCollectionState[];
}
interface BackInStockCollectionState {
    /** ID of the app to receive notification requests for. */
    appId?: string;
    /** Whether to collect requests for items from this app. */
    collectingRequests?: boolean;
}
interface StartCollectingRequestsRequest {
    /** ID of the app to start accepting notification requests for. */
    appId: string;
}
interface StartCollectingRequestsResponse {
    /** Back in stock settings info. */
    settings?: BackInStockSettings;
}
interface StopCollectingRequestsRequest {
    /** ID of the app to stop accepting notification requests for. */
    appId: string;
}
interface StopCollectingRequestsResponse {
    /** Back in stock settings info. */
    settings?: BackInStockSettings;
}
interface GetSettingsRequest {
}
interface GetSettingsResponse {
    /** Retrieved back in stock request settings. */
    settings?: BackInStockSettings;
}
interface BackInStockCollectionStateNonNullableFields {
    appId: string;
    collectingRequests: boolean;
}
interface BackInStockSettingsNonNullableFields {
    collectionStates: BackInStockCollectionStateNonNullableFields[];
}
interface StartCollectingRequestsResponseNonNullableFields {
    settings?: BackInStockSettingsNonNullableFields;
}
interface StopCollectingRequestsResponseNonNullableFields {
    settings?: BackInStockSettingsNonNullableFields;
}
interface GetSettingsResponseNonNullableFields {
    settings?: BackInStockSettingsNonNullableFields;
}

type __PublicMethodMetaInfo$n<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function startCollectingRequests(): __PublicMethodMetaInfo$n<'POST', {}, StartCollectingRequestsRequest, StartCollectingRequestsRequest$1, StartCollectingRequestsResponse & StartCollectingRequestsResponseNonNullableFields, StartCollectingRequestsResponse$1 & StartCollectingRequestsResponseNonNullableFields$1>;
declare function stopCollectingRequests(): __PublicMethodMetaInfo$n<'POST', {}, StopCollectingRequestsRequest, StopCollectingRequestsRequest$1, StopCollectingRequestsResponse & StopCollectingRequestsResponseNonNullableFields, StopCollectingRequestsResponse$1 & StopCollectingRequestsResponseNonNullableFields$1>;
declare function getSettings(): __PublicMethodMetaInfo$n<'PUT', {}, GetSettingsRequest, GetSettingsRequest$1, GetSettingsResponse & GetSettingsResponseNonNullableFields, GetSettingsResponse$1 & GetSettingsResponseNonNullableFields$1>;

declare const meta$n_getSettings: typeof getSettings;
declare const meta$n_startCollectingRequests: typeof startCollectingRequests;
declare const meta$n_stopCollectingRequests: typeof stopCollectingRequests;
declare namespace meta$n {
  export { type __PublicMethodMetaInfo$n as __PublicMethodMetaInfo, meta$n_getSettings as getSettings, meta$n_startCollectingRequests as startCollectingRequests, meta$n_stopCollectingRequests as stopCollectingRequests };
}

interface Cart$3 {
    /** Cart ID. */
    id?: string | null;
    /**
     * Line items.
     * @readonly
     */
    lineItems?: LineItem$7[];
    /** Note left by the buyer/customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo$9;
    /**
     * Currency used for pricing.
     * @readonly
     */
    currency?: string;
    /**
     * Currency code used for all the converted prices that are returned.
     * For a site that supports multiple currencies, this is the currency the buyer selected.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string | null;
    /**
     * Site language in which original values are displayed.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrices?: boolean | null;
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit$d;
    /**
     * ID of the checkout that originated from this cart.
     * @readonly
     */
    checkoutId?: string | null;
    /**
     * Cart discounts.
     * @readonly
     */
    appliedDiscounts?: CartDiscount$3[];
    /**
     * Date and time the cart was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the cart was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Contact info. */
    contactInfo?: AddressWithContact$9;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used in the [Abandoned Checkout API](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/abandoned-checkout/introduction)
     * to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a
     * standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$5;
}
interface LineItem$7 {
    /**
     * Line item ID.
     * @readonly
     */
    id?: string | null;
    /** Item quantity. */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$h;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName$b;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: PageUrlV2$4;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice$7;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice$7;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice$7;
    /**
     * Line item description lines. Used for displaying the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine$b[];
    /**
     * Line item image details.
     * @readonly
     */
    image?: CommonImage$2;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo$5;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties$f;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType$d;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` - Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is defined by `lineItem.deposit`.
     * + `MEMBERSHIP_OFFLINE` - Payment for this item can only be performed by using a membership and must be manually redeemed in the dashboard by the site owner. When this option is used, `lineItem.price.amount` is 0.
     * @readonly
     */
    paymentOption?: PaymentOptionType$d;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties$9;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + in most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription$b;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice$7;
    /** Selected membership to be used as payment for this item. Must be used with `lineItem.paymentOption` set to `MEMBERSHIP` or `MEMBERSHIP_OFFLINE`. This field can be empty when `lineItem.paymentOption` is set to `MEMBERSHIP_OFFLINE`. */
    selectedMembership?: SelectedMembership$7;
    /**
     * Tax group ID for this line item.
     * @readonly
     */
    taxGroupId?: string | null;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields$7;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$h {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ProductName$b {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PageUrlV2$4 {
    /** The relative path for the page within the site. For example, `/product-page/a-product`. */
    relativePath?: string;
    /** The page's full URL. For example, `https://mysite.com/product-page/a-product`. */
    url?: string | null;
}
interface MultiCurrencyPrice$7 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface DescriptionLine$b extends DescriptionLineValueOneOf$b, DescriptionLineDescriptionLineValueOneOf$b {
    /** Description line plain text value. */
    plainText?: PlainTextValue$b;
    /** Description line color value. */
    colorInfo?: Color$b;
    /** Description line name. */
    name?: DescriptionLineName$b;
}
/** @oneof */
interface DescriptionLineValueOneOf$b {
    /** Description line plain text value. */
    plainText?: PlainTextValue$b;
    /** Description line color value. */
    colorInfo?: Color$b;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$b {
}
interface DescriptionLineName$b {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$b {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$b {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$b {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface CommonImage$2 {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface ItemAvailabilityInfo$5 {
    /**
     * Item availability status.
     * + `"NOT_FOUND"`: Item does not exist
     * + `"NOT_AVAILABLE"`: Item not in stock
     * + `"PARTIALLY_AVAILABLE"`: Available quantity is less than requested
     */
    status?: ItemAvailabilityStatus$5;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus$5 {
    AVAILABLE = "AVAILABLE",
    NOT_FOUND = "NOT_FOUND",
    /** Not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
interface PhysicalProperties$f {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$d extends ItemTypeItemTypeDataOneOf$d {
    /** Preset item type. */
    preset?: ItemTypeItemType$d;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$d {
    /** Preset item type. */
    preset?: ItemTypeItemType$d;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$d {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$d {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
declare enum FileType$7 {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$d {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties$9 {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface PriceDescription$b {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
/** Selected Membership */
interface SelectedMembership$7 {
    /** Membership ID. */
    id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
}
interface CatalogOverrideFields$7 {
    /** Item name. */
    productName?: ProductName$b;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine$b[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$f;
    /** Item image. */
    image?: Image$6;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption$7;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface Image$6 {
    /** WixMedia image ID. */
    id?: string;
    /** Original image height. */
    height?: number;
    /** Original image width. */
    width?: number;
    /** Image alt text. Optional. */
    altText?: string | null;
    /** Image filename. Optional. */
    filename?: string | null;
}
interface PaymentOption$7 {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType$d;
}
declare enum TaxableAddressType$b {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Buyer Info */
interface BuyerInfo$9 extends BuyerInfoIdOneOf$9 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the buyer (or cart owner) is a Wix user.
     * @readonly
     */
    userId?: string;
    /** Contact ID. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction). */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$9 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the buyer (or cart owner) is a Wix user.
     * @readonly
     */
    userId?: string;
}
declare enum WeightUnit$d {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface CartDiscount$3 extends CartDiscountDiscountSourceOneOf$3 {
    /** Coupon details. */
    coupon?: Coupon$b;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$b;
}
/** @oneof */
interface CartDiscountDiscountSourceOneOf$3 {
    /** Coupon details. */
    coupon?: Coupon$b;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$b;
}
interface Coupon$b {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
}
interface MerchantDiscount$b {
    /** Discount value. */
    amount?: MultiCurrencyPrice$7;
}
/** Billing Info and shipping details */
interface AddressWithContact$9 {
    /** Address. */
    address?: Address$f;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$b;
}
/** Physical address */
interface Address$f {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$h;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress$h {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$b {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$9;
}
interface VatId$9 {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$9;
}
/** tax info types */
declare enum VatType$9 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface SelectedShippingOption$5 {
    /** Carrier ID. */
    carrierId?: string | null;
    /** Selected shipping option code. For example, "usps_std_overnight". */
    code?: string;
}
interface UpdateCartRequest$3 {
    /** Cart info. */
    cartInfo?: Cart$3;
    /** Coupon code. For more information, see [Coupons API](https://dev.wix.com/api/rest/wix-coupons/coupons/introduction). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput$5[];
    /** Catalog line items. */
    lineItems?: LineItem$7[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$9[];
}
interface MerchantDiscountInput$5 {
    /** Discount amount. */
    amount?: string;
    /** IDs of line items the discount applies to. */
    lineItemIds?: string[];
}
interface CustomLineItem$9 {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$b;
    /** Custom line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine$b[];
    /** Custom line item's media. */
    media?: Image$6;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName$b;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: PageUrlV2$4;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$d;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$f;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$d;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties$9;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$h;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface UpdateCartResponse$3 {
    /** Updated Cart. */
    cart?: Cart$3;
}
interface AddToCartResponse$3 {
    /** Updated cart. */
    cart?: Cart$3;
}
interface SelectedMemberships$7 {
    /** Selected memberships. */
    memberships?: HostSelectedMembership$3[];
}
interface HostSelectedMembership$3 {
    /** Membership ID. */
    id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface EstimateTotalsResponse$3 {
    /** Cart. */
    cart?: Cart$3;
    /** Calculated line items. */
    calculatedLineItems?: CalculatedLineItem$5[];
    /** Price summary. */
    priceSummary?: PriceSummary$b;
    /** Applied gift card. */
    giftCard?: GiftCard$9;
    /** Tax summary. */
    taxSummary?: TaxSummary$b;
    /** Shipping information. */
    shippingInfo?: ShippingInformation$5;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$b[];
    /** Calculation errors. */
    calculationErrors?: CalculationErrors$9;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$d;
    /** Currency used for pricing in this store. */
    currency?: string;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary$b;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary$b;
    /** Information about valid and invalid memberships, and which ones are selected for usage. */
    membershipOptions?: MembershipOptions$7;
    /** Additional fees */
    additionalFees?: AdditionalFee$9[];
    /**
     * List of validation violations raised by the [Validations service plugin](https://dev.wix.com/api/rest/wix-ecommerce/validations-integration-spi/introduction).
     * @readonly
     */
    violations?: Violation$5[];
}
interface CalculatedLineItem$5 {
    /** Line item ID. */
    lineItemId?: string;
    /** Price breakdown for this line item. */
    pricesBreakdown?: LineItemPricesData$5;
    /**
     * Type of selected payment option for current item. Supported values:
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item will happen as part of the checkout
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item will happen after the checkout
     * + `"MEMBERSHIP"` - This item cannot be paid via monetary payment options, only via non monetary option such membership. When this option is used, price must be set to 0
     * + `"DEPOSIT_ONLINE"` -  Partial payment of the given item will happen as part of the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$d;
}
interface LineItemPricesData$5 {
    /** Total price after discounts and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$7;
    /** Total price after discounts, and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$7;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$b;
    /** Total discount for all line items. */
    totalDiscount?: MultiCurrencyPrice$7;
    /** Catalog price after catalog discount and automatic discounts. */
    price?: MultiCurrencyPrice$7;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: MultiCurrencyPrice$7;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: MultiCurrencyPrice$7;
    /** Item price **before** line item discounts and **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: MultiCurrencyPrice$7;
}
interface ItemTaxFullDetails$b {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice$7;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice$7;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown$7[];
}
interface TaxRateBreakdown$7 {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice$7;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$b {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface PriceSummary$b {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice$7;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice$7;
    /** Total tax. */
    tax?: MultiCurrencyPrice$7;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice$7;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice$7;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice$7;
}
interface GiftCard$9 {
    /**
     * Gift Card ID.
     * @deprecated
     */
    id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice$7;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface TaxSummary$b {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice$7;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice$7;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails$7;
}
interface TaxCalculationDetails$7 extends TaxCalculationDetailsCalculationDetailsOneOf$7 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$7;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$7;
    /** Rate calculation type. */
    rateType?: RateType$7;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf$7 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$7;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$7;
}
declare enum RateType$7 {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason$7 {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails$7 {
    /** reason for fallback */
    fallbackReason?: FallbackReason$7;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError$l;
}
declare enum FallbackReason$7 {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
interface ApplicationError$l {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface ShippingInformation$5 {
    /** Shipping region. */
    region?: ShippingRegion$b;
    /** Selected shipping option. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption$7;
    /** All shipping options. */
    carrierServiceOptions?: CarrierServiceOption$7[];
}
interface ShippingRegion$b {
    /**
     * Shipping region ID.
     * @readonly
     */
    id?: string;
    /** Shipping region name. */
    name?: string;
}
interface SelectedCarrierServiceOption$7 {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics$d;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices$7;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge$7[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface DeliveryLogistics$d {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails$d;
}
interface PickupDetails$d {
    /** Pickup address. */
    address?: Address$f;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod$d;
}
declare enum PickupMethod$d {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface SelectedCarrierServiceOptionPrices$7 {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$7;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$7;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$b;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice$7;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice$7;
}
interface SelectedCarrierServiceOptionOtherCharge$7 {
    /** Type of additional cost. */
    type?: ChargeType$b;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices$7;
}
declare enum ChargeType$b {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface CarrierServiceOption$7 {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption$b[];
}
interface ShippingOption$b {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics$d;
    /** Sipping price information. */
    cost?: ShippingPrice$b;
}
interface ShippingPrice$b {
    /** Shipping price. */
    price?: MultiCurrencyPrice$7;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge$7[];
}
interface OtherCharge$7 {
    /** Type of additional cost. */
    type?: ChargeType$b;
    /** Price of added cost. */
    price?: MultiCurrencyPrice$7;
}
interface AppliedDiscount$b extends AppliedDiscountDiscountSourceOneOf$b {
    /** Coupon details. */
    coupon?: V1Coupon$3;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount$3;
    /** Discount rule */
    discountRule?: DiscountRule$b;
    /** Discount type. */
    discountType?: DiscountType$b;
    /**
     * IDs of line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$b {
    /** Coupon details. */
    coupon?: V1Coupon$3;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount$3;
    /** Discount rule */
    discountRule?: DiscountRule$b;
}
declare enum DiscountType$b {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface V1Coupon$3 {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice$7;
    /** Coupon name. */
    name?: string;
}
interface V1MerchantDiscount$3 {
    /** Discount value. */
    amount?: MultiCurrencyPrice$7;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule$b {
    /** Discount rule ID */
    id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$b;
    /** Discount value. */
    amount?: MultiCurrencyPrice$7;
}
interface DiscountRuleName$b {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface CalculationErrors$9 extends CalculationErrorsShippingCalculationErrorOneOf$9 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$b;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$9;
    /** Tax calculation error. */
    taxCalculationError?: Details$b;
    /** Coupon calculation error. */
    couponCalculationError?: Details$b;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details$b;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$l[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details$b;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details$b;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$9 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$b;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$9;
}
interface Details$b extends DetailsKindOneOf$b {
    applicationError?: ApplicationError$l;
    validationError?: ValidationError$b;
    systemError?: SystemError$b;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$b {
    applicationError?: ApplicationError$l;
    validationError?: ValidationError$b;
    systemError?: SystemError$b;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$b {
    fieldViolations?: FieldViolation$b[];
}
declare enum RuleType$b {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$b {
    field?: string;
    description?: string;
    violatedRule?: RuleType$b;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$b {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$9 {
    /** Carrier errors. */
    errors?: CarrierError$9[];
}
interface CarrierError$9 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$b;
}
interface MembershipOptions$7 {
    /** List of payment options that can be used. */
    eligibleMemberships?: Membership$7[];
    /** List of payment options that are owned by the member, but cannot be used due to reason provided. */
    invalidMemberships?: InvalidMembership$7[];
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: HostSelectedMembership$3[];
}
interface Membership$7 {
    /** Membership ID. */
    id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName$7;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits$7;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName$7 {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface MembershipPaymentCredits$7 {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership$7 {
    /** Membership details. */
    membership?: Membership$7;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface AdditionalFee$9 {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice$7;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$b;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice$7;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice$7;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface Violation$5 {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity$5;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target$5;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity$5 {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target$5 extends TargetTargetTypeOneOf$5 {
    /** General (other) violation. */
    other?: Other$5;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$5;
}
/** @oneof */
interface TargetTargetTypeOneOf$5 {
    /** General (other) violation. */
    other?: Other$5;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$5;
}
/** Available locations on the webpage */
declare enum NameInOther$5 {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem$5 {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix$5 {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other$5 {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther$5;
}
/** Specific line item violation. */
interface TargetLineItem$5 {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem$5;
    /** ID of the line item containing the violation. */
    id?: string | null;
}
interface RemoveLineItemsResponse$5 {
    /** Updated cart. */
    cart?: Cart$3;
}
declare enum ChannelType$9 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CreateCheckoutResponse$5 {
    /** The newly created checkout's ID. */
    checkoutId?: string;
}
interface RemoveCouponResponse$5 {
    /** Updated cart. */
    cart?: Cart$3;
}
interface LineItemQuantityUpdate$5 {
    /** Line item ID. Required. */
    id?: string;
    /** New quantity. Number must be 1 or higher. Required. */
    quantity?: number;
}
interface UpdateLineItemsQuantityResponse$5 {
    /** Updated cart. */
    cart?: Cart$3;
}
interface DeleteCartResponse$3 {
}
interface CreateCartRequest$1 {
    /** Cart info. */
    cartInfo?: Cart$3;
    /** Code of an existing coupon to apply to cart. For more information, see the [Coupons API](https://dev.wix.com/api/rest/coupons/coupons/introduction). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput$5[];
    /** Catalog line items. */
    lineItems?: LineItem$7[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$9[];
}
interface CreateCartResponse$1 {
    /** Cart. */
    cart?: Cart$3;
}
interface GetCartRequest$1 {
    /** Cart ID. */
    id: string;
}
interface GetCartResponse$1 {
    /** The requested cart. */
    cart?: Cart$3;
}
interface AddToCartRequest$1 {
    /** Cart ID. */
    id: string;
    /** Catalog line items. */
    lineItems?: LineItem$7[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$9[];
}
interface RemoveLineItemsRequest$3 {
    /** Cart ID. */
    id: string;
    /** Line item IDs to remove from cart. */
    lineItemIds: string[];
}
interface CreateCheckoutRequest$3 {
    /** Cart ID. */
    id: string;
    /** __Required.__ Sales channel type. */
    channelType?: ChannelType$9;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$f;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$f;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$5;
    /** Required when setting a billing or shipping address if the site visitor isn't logged in. */
    email?: string | null;
}
interface RemoveCouponRequest$3 {
    /** Cart ID. */
    id: string;
}
interface UpdateLineItemsQuantityRequest$3 {
    /** Cart ID. */
    id: string;
    /** Line item IDs and their new quantity. */
    lineItems: LineItemQuantityUpdate$5[];
}
interface EstimateTotalsRequest$1 {
    /** Cart ID. */
    id: string;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$5;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$f;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$f;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships$7;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
interface DeleteCartRequest$1 {
    /** ID of the cart to delete. */
    id: string;
}
interface CatalogReferenceNonNullableFields$b {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields$b {
    original: string;
}
interface PageUrlV2NonNullableFields$3 {
    relativePath: string;
}
interface MultiCurrencyPriceNonNullableFields$7 {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface PlainTextValueNonNullableFields$b {
    original: string;
}
interface ColorNonNullableFields$b {
    original: string;
}
interface DescriptionLineNameNonNullableFields$b {
    original: string;
}
interface DescriptionLineNonNullableFields$b {
    plainText?: PlainTextValueNonNullableFields$b;
    colorInfo?: ColorNonNullableFields$b;
    plainTextValue?: PlainTextValueNonNullableFields$b;
    color: string;
    name?: DescriptionLineNameNonNullableFields$b;
    lineType: DescriptionLineType$b;
}
interface CommonImageNonNullableFields$2 {
    id: string;
    url: string;
    height: number;
    width: number;
}
interface ItemAvailabilityInfoNonNullableFields$5 {
    status: ItemAvailabilityStatus$5;
}
interface PhysicalPropertiesNonNullableFields$b {
    shippable: boolean;
}
interface GroupNonNullableFields$5 {
    name: string;
}
interface ScopeNonNullableFields$5 {
    namespace: string;
    group?: GroupNonNullableFields$5;
}
interface ItemTypeNonNullableFields$b {
    preset: ItemTypeItemType$d;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields$7 {
    frequency: SubscriptionFrequency$d;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields$b {
    frequency: SubscriptionFrequency$d;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields$7;
}
interface TitleNonNullableFields$7 {
    original: string;
}
interface DescriptionNonNullableFields$7 {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields$7 {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$b;
    title?: TitleNonNullableFields$7;
    description?: DescriptionNonNullableFields$7;
}
interface SecuredMediaNonNullableFields$7 {
    id: string;
    fileName: string;
    fileType: FileType$7;
}
interface PriceDescriptionNonNullableFields$b {
    original: string;
}
interface SelectedMembershipNonNullableFields$7 {
    id: string;
    appId: string;
}
interface ImageNonNullableFields$7 {
    id: string;
    height: number;
    width: number;
}
interface PaymentOptionNonNullableFields$7 {
    value: PaymentOptionType$d;
}
interface CatalogOverrideFieldsNonNullableFields$7 {
    productName?: ProductNameNonNullableFields$b;
    descriptionLines: DescriptionLineNonNullableFields$b[];
    physicalProperties?: PhysicalPropertiesNonNullableFields$b;
    image?: ImageNonNullableFields$7;
    paymentOption?: PaymentOptionNonNullableFields$7;
}
interface TaxableAddressNonNullableFields$b {
    addressType: TaxableAddressType$b;
}
interface PolicyNonNullableFields$7 {
    title: string;
    content: string;
}
interface LineItemNonNullableFields$5 {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields$b;
    productName?: ProductNameNonNullableFields$b;
    url?: PageUrlV2NonNullableFields$3;
    price?: MultiCurrencyPriceNonNullableFields$7;
    fullPrice?: MultiCurrencyPriceNonNullableFields$7;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$7;
    descriptionLines: DescriptionLineNonNullableFields$b[];
    image?: CommonImageNonNullableFields$2;
    availability?: ItemAvailabilityInfoNonNullableFields$5;
    physicalProperties?: PhysicalPropertiesNonNullableFields$b;
    couponScopes: ScopeNonNullableFields$5[];
    itemType?: ItemTypeNonNullableFields$b;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields$7;
    digitalFile?: SecuredMediaNonNullableFields$7;
    paymentOption: PaymentOptionType$d;
    priceDescription?: PriceDescriptionNonNullableFields$b;
    depositAmount?: MultiCurrencyPriceNonNullableFields$7;
    selectedMembership?: SelectedMembershipNonNullableFields$7;
    customLineItem: boolean;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields$7;
    savePaymentMethod: boolean;
    taxableAddress?: TaxableAddressNonNullableFields$b;
    policies: PolicyNonNullableFields$7[];
}
interface BuyerInfoNonNullableFields$9 {
    visitorId: string;
    memberId: string;
    userId: string;
}
interface CouponNonNullableFields$b {
    id: string;
    code: string;
}
interface MerchantDiscountNonNullableFields$b {
    amount?: MultiCurrencyPriceNonNullableFields$7;
}
interface CartDiscountNonNullableFields$3 {
    coupon?: CouponNonNullableFields$b;
    merchantDiscount?: MerchantDiscountNonNullableFields$b;
}
interface StreetAddressNonNullableFields$h {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$f {
    streetAddress?: StreetAddressNonNullableFields$h;
}
interface VatIdNonNullableFields$7 {
    id: string;
    type: VatType$9;
}
interface FullAddressContactDetailsNonNullableFields$9 {
    vatId?: VatIdNonNullableFields$7;
}
interface AddressWithContactNonNullableFields$9 {
    address?: AddressNonNullableFields$f;
    contactDetails?: FullAddressContactDetailsNonNullableFields$9;
}
interface SelectedShippingOptionNonNullableFields$3 {
    code: string;
}
interface CartNonNullableFields$3 {
    lineItems: LineItemNonNullableFields$5[];
    buyerInfo?: BuyerInfoNonNullableFields$9;
    currency: string;
    conversionCurrency: string;
    weightUnit: WeightUnit$d;
    subtotal?: MultiCurrencyPriceNonNullableFields$7;
    appliedDiscounts: CartDiscountNonNullableFields$3[];
    contactInfo?: AddressWithContactNonNullableFields$9;
    selectedShippingOption?: SelectedShippingOptionNonNullableFields$3;
}
interface UpdateCartResponseNonNullableFields$3 {
    cart?: CartNonNullableFields$3;
}
interface AddToCartResponseNonNullableFields$3 {
    cart?: CartNonNullableFields$3;
}
interface RemoveLineItemsResponseNonNullableFields$5 {
    cart?: CartNonNullableFields$3;
}
interface CreateCheckoutResponseNonNullableFields$5 {
    checkoutId: string;
}
interface RemoveCouponResponseNonNullableFields$5 {
    cart?: CartNonNullableFields$3;
}
interface UpdateLineItemsQuantityResponseNonNullableFields$5 {
    cart?: CartNonNullableFields$3;
}
interface TaxRateBreakdownNonNullableFields$7 {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields$7;
    exemptAmount?: MultiCurrencyPriceNonNullableFields$7;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields$7;
}
interface TaxBreakdownNonNullableFields$7 {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields$7;
    taxAmount?: MultiCurrencyPriceNonNullableFields$7;
    taxableAmount?: MultiCurrencyPriceNonNullableFields$7;
    jurisdictionType: JurisdictionType$b;
}
interface ItemTaxFullDetailsNonNullableFields$b {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$7;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields$7;
    rateBreakdown: TaxRateBreakdownNonNullableFields$7[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields$7;
    taxBreakdown: TaxBreakdownNonNullableFields$7[];
}
interface LineItemPricesDataNonNullableFields$5 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$7;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$7;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$b;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$7;
    price?: MultiCurrencyPriceNonNullableFields$7;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$7;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields$7;
    fullPrice?: MultiCurrencyPriceNonNullableFields$7;
}
interface CalculatedLineItemNonNullableFields$5 {
    lineItemId: string;
    pricesBreakdown?: LineItemPricesDataNonNullableFields$5;
    paymentOption: PaymentOptionType$d;
    taxableAddress?: TaxableAddressNonNullableFields$b;
}
interface PriceSummaryNonNullableFields$b {
    subtotal?: MultiCurrencyPriceNonNullableFields$7;
    shipping?: MultiCurrencyPriceNonNullableFields$7;
    tax?: MultiCurrencyPriceNonNullableFields$7;
    discount?: MultiCurrencyPriceNonNullableFields$7;
    total?: MultiCurrencyPriceNonNullableFields$7;
    additionalFees?: MultiCurrencyPriceNonNullableFields$7;
}
interface GiftCardNonNullableFields$9 {
    id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields$7;
    appId: string;
}
interface ApplicationErrorNonNullableFields$l {
    code: string;
    description: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields$7 {
    fallbackReason: FallbackReason$7;
    error?: ApplicationErrorNonNullableFields$l;
}
interface TaxCalculationDetailsNonNullableFields$7 {
    manualRateReason: ManualCalculationReason$7;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields$7;
    rateType: RateType$7;
}
interface AggregatedTaxBreakdownNonNullableFields$7 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType$b;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields$7;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields$7;
}
interface TaxSummaryNonNullableFields$b {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$7;
    totalTax?: MultiCurrencyPriceNonNullableFields$7;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields$7;
    totalExempt?: MultiCurrencyPriceNonNullableFields$7;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields$7[];
}
interface ShippingRegionNonNullableFields$7 {
    id: string;
    name: string;
}
interface PickupDetailsNonNullableFields$d {
    address?: AddressNonNullableFields$f;
    businessLocation: boolean;
    pickupMethod: PickupMethod$d;
}
interface DeliveryLogisticsNonNullableFields$d {
    pickupDetails?: PickupDetailsNonNullableFields$d;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields$7 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$7;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$7;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$b;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$7;
    price?: MultiCurrencyPriceNonNullableFields$7;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields$7 {
    type: ChargeType$b;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$7;
}
interface SelectedCarrierServiceOptionNonNullableFields$7 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$d;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$7;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields$7[];
}
interface OtherChargeNonNullableFields$7 {
    type: ChargeType$b;
    price?: MultiCurrencyPriceNonNullableFields$7;
}
interface ShippingPriceNonNullableFields$b {
    price?: MultiCurrencyPriceNonNullableFields$7;
    otherCharges: OtherChargeNonNullableFields$7[];
}
interface ShippingOptionNonNullableFields$b {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$d;
    cost?: ShippingPriceNonNullableFields$b;
}
interface CarrierServiceOptionNonNullableFields$7 {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields$b[];
}
interface ShippingInformationNonNullableFields$9 {
    region?: ShippingRegionNonNullableFields$7;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields$7;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields$7[];
}
interface V1CouponNonNullableFields$3 {
    id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields$7;
    name: string;
    couponType: string;
}
interface V1MerchantDiscountNonNullableFields$3 {
    amount?: MultiCurrencyPriceNonNullableFields$7;
}
interface DiscountRuleNameNonNullableFields$b {
    original: string;
}
interface DiscountRuleNonNullableFields$b {
    id: string;
    name?: DiscountRuleNameNonNullableFields$b;
    amount?: MultiCurrencyPriceNonNullableFields$7;
}
interface LineItemDiscountNonNullableFields$b {
    id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields$7;
}
interface AppliedDiscountNonNullableFields$b {
    coupon?: V1CouponNonNullableFields$3;
    merchantDiscount?: V1MerchantDiscountNonNullableFields$3;
    discountRule?: DiscountRuleNonNullableFields$b;
    discountType: DiscountType$b;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$b[];
}
interface FieldViolationNonNullableFields$b {
    field: string;
    description: string;
    violatedRule: RuleType$b;
}
interface ValidationErrorNonNullableFields$b {
    fieldViolations: FieldViolationNonNullableFields$b[];
}
interface DetailsNonNullableFields$b {
    applicationError?: ApplicationErrorNonNullableFields$l;
    validationError?: ValidationErrorNonNullableFields$b;
}
interface CarrierErrorNonNullableFields$9 {
    carrierId: string;
    error?: DetailsNonNullableFields$b;
}
interface CarrierErrorsNonNullableFields$9 {
    errors: CarrierErrorNonNullableFields$9[];
}
interface CalculationErrorsNonNullableFields$9 {
    generalShippingCalculationError?: DetailsNonNullableFields$b;
    carrierErrors?: CarrierErrorsNonNullableFields$9;
    taxCalculationError?: DetailsNonNullableFields$b;
    couponCalculationError?: DetailsNonNullableFields$b;
    giftCardCalculationError?: DetailsNonNullableFields$b;
    orderValidationErrors: ApplicationErrorNonNullableFields$l[];
    membershipError?: DetailsNonNullableFields$b;
    discountsCalculationError?: DetailsNonNullableFields$b;
}
interface MembershipNameNonNullableFields$b {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields$7 {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields$7 {
    id: string;
    appId: string;
    name?: MembershipNameNonNullableFields$b;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields$7;
}
interface InvalidMembershipNonNullableFields$7 {
    membership?: MembershipNonNullableFields$7;
    reason: string;
}
interface HostSelectedMembershipNonNullableFields$3 {
    id: string;
    appId: string;
    lineItemIds: string[];
}
interface MembershipOptionsNonNullableFields$7 {
    eligibleMemberships: MembershipNonNullableFields$7[];
    invalidMemberships: InvalidMembershipNonNullableFields$7[];
    selectedMemberships: HostSelectedMembershipNonNullableFields$3[];
}
interface AdditionalFeeNonNullableFields$9 {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields$7;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$b;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields$7;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields$7;
    lineItemIds: string[];
}
interface OtherNonNullableFields$5 {
    name: NameInOther$5;
}
interface TargetLineItemNonNullableFields$5 {
    name: NameInLineItem$5;
    suggestedFix: SuggestedFix$5;
}
interface TargetNonNullableFields$5 {
    other?: OtherNonNullableFields$5;
    lineItem?: TargetLineItemNonNullableFields$5;
}
interface ViolationNonNullableFields$5 {
    severity: Severity$5;
    target?: TargetNonNullableFields$5;
}
interface EstimateTotalsResponseNonNullableFields$3 {
    cart?: CartNonNullableFields$3;
    calculatedLineItems: CalculatedLineItemNonNullableFields$5[];
    priceSummary?: PriceSummaryNonNullableFields$b;
    giftCard?: GiftCardNonNullableFields$9;
    taxSummary?: TaxSummaryNonNullableFields$b;
    shippingInfo?: ShippingInformationNonNullableFields$9;
    appliedDiscounts: AppliedDiscountNonNullableFields$b[];
    calculationErrors?: CalculationErrorsNonNullableFields$9;
    weightUnit: WeightUnit$d;
    currency: string;
    payNow?: PriceSummaryNonNullableFields$b;
    payLater?: PriceSummaryNonNullableFields$b;
    membershipOptions?: MembershipOptionsNonNullableFields$7;
    additionalFees: AdditionalFeeNonNullableFields$9[];
    violations: ViolationNonNullableFields$5[];
}
interface CreateCartResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$3;
}
interface GetCartResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$3;
}

interface Cart$2 {
    /** Cart ID. */
    _id?: string | null;
    /**
     * Line items.
     * @readonly
     */
    lineItems?: LineItem$6[];
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo$8;
    /**
     * Currency used for pricing.
     * @readonly
     */
    currency?: string;
    /**
     * Currency code used for all the converted prices that are returned.
     * For a site that supports multiple currencies, this is the currency the buyer selected.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string | null;
    /**
     * Site language in which original values are displayed.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrices?: boolean | null;
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit$c;
    /**
     * ID of the checkout that originated from this cart.
     * @readonly
     */
    checkoutId?: string | null;
    /**
     * Cart discounts.
     * @readonly
     */
    appliedDiscounts?: CartDiscount$2[];
    /**
     * Date and time the cart was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the cart was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Contact info. */
    contactInfo?: AddressWithContact$8;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$4;
}
interface LineItem$6 {
    /**
     * Line item ID.
     * @readonly
     */
    _id?: string | null;
    /** Item quantity. */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$g;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName$a;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: string;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice$6;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice$6;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice$6;
    /**
     * Line item description lines. Used for displaying the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine$a[];
    /**
     * Line item image details.
     * @readonly
     */
    image?: string;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo$4;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties$e;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType$c;
    /**
     * Type of selected payment option for current item. Defaults to `"FULL_PAYMENT_ONLINE"`.
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item happens as part of the checkout.
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `"MEMBERSHIP"` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` will be 0.
     * @readonly
     */
    paymentOption?: PaymentOptionType$c;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties$8;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + in most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription$a;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice$6;
    /** Selected membership to be used as payment for this item. Must be used with `lineItem.paymentOption` set to `MEMBERSHIP` or `MEMBERSHIP_OFFLINE`. This field can be empty when `lineItem.paymentOption` is set to `MEMBERSHIP_OFFLINE`. */
    selectedMembership?: SelectedMembership$6;
    /**
     * Tax group ID for this line item.
     * @readonly
     */
    taxGroupId?: string | null;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields$6;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$g {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs.
     *
     * Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from your Wix Stores catalog, learn more about [eCommerce integration](https://www.wix.com/velo/reference/wix-stores-backend/ecommerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ProductName$a {
    /** **Required** - Original product name (in site's default language). */
    original?: string;
    /** Description product name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface MultiCurrencyPrice$6 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface DescriptionLine$a extends DescriptionLineValueOneOf$a, DescriptionLineDescriptionLineValueOneOf$a {
    /** Description line plain text value. */
    plainText?: PlainTextValue$a;
    /** Description line color value. */
    colorInfo?: Color$a;
    /** Description line name. */
    name?: DescriptionLineName$a;
}
/** @oneof */
interface DescriptionLineValueOneOf$a {
    /** Description line plain text value. */
    plainText?: PlainTextValue$a;
    /** Description line color value. */
    colorInfo?: Color$a;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$a {
}
interface DescriptionLineName$a {
    /** Description line name in site's default language. */
    original?: string;
    /** Description line name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface PlainTextValue$a {
    /** Description line plain text value in site's default language. */
    original?: string;
    /** Description line plain text value translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface Color$a {
    /** Description line color name in site's default language. */
    original?: string;
    /** Description line color name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
    /**
     * HEX or RGB color code for display.
     *
     */
    code?: string | null;
}
declare enum DescriptionLineType$a {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface ItemAvailabilityInfo$4 {
    /**
     * Item availability status.
     *
     * NOT_FOUND - Item does not exist.
     * NOT_AVAILABLE - Not in stock.
     * PARTIALLY_AVAILABLE - Available quantity is less than requested.
     */
    status?: ItemAvailabilityStatus$4;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus$4 {
    AVAILABLE = "AVAILABLE",
    NOT_FOUND = "NOT_FOUND",
    /** Not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
interface PhysicalProperties$e {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$c extends ItemTypeItemTypeDataOneOf$c {
    /** Preset item type. */
    preset?: ItemTypeItemType$c;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$c {
    /** Preset item type. */
    preset?: ItemTypeItemType$c;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$c {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$c {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
declare enum FileType$6 {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$c {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties$8 {
    /** The date and time for which the service is supposed to be provided. For example, the time of the class. */
    scheduledDate?: Date | null;
    /** The number of people participating in this service. For example, the number of people attending the class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface PriceDescription$a {
    /**
     * **Required** - Original price description (in site's default language).
     *
     */
    original?: string;
    /** Product name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
/** Selected Membership */
interface SelectedMembership$6 {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
}
interface CatalogOverrideFields$6 {
    /** Item name. */
    productName?: ProductName$a;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine$a[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$e;
    /** Item image. */
    image?: string;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption$6;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface PaymentOption$6 {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType$c;
}
declare enum TaxableAddressType$a {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Buyer Info */
interface BuyerInfo$8 extends BuyerInfoIdOneOf$8 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the cart owner is a Wix user.
     * @readonly
     */
    userId?: string;
    /** Contact ID. For more information, see the Contacts API. */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$8 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the cart owner is a Wix user.
     * @readonly
     */
    userId?: string;
}
declare enum WeightUnit$c {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface CartDiscount$2 extends CartDiscountDiscountSourceOneOf$2 {
    /** Coupon details. */
    coupon?: Coupon$a;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$a;
}
/** @oneof */
interface CartDiscountDiscountSourceOneOf$2 {
    /** Coupon details. */
    coupon?: Coupon$a;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$a;
}
interface Coupon$a {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
}
interface MerchantDiscount$a {
    /** Discount value. */
    amount?: MultiCurrencyPrice$6;
}
/** Billing Info and shipping details */
interface AddressWithContact$8 {
    /** Address. */
    address?: Address$e;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$a;
}
/** Physical address */
interface Address$e {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$g;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$g {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$a {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$8;
}
interface VatId$8 {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$8;
}
/** tax info types */
declare enum VatType$8 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface SelectedShippingOption$4 {
    /** Carrier ID. */
    carrierId?: string | null;
    /** Selected shipping option code. For example, "usps_std_overnight". */
    code?: string;
}
interface UpdateCartRequest$2 {
    /** Cart info. */
    cartInfo?: Cart$2;
    /** The code of an existing coupon to apply to the cart. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput$4[];
    /** Catalog line items. */
    lineItems?: LineItem$6[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$8[];
}
interface MerchantDiscountInput$4 {
    /** Discount amount. */
    amount?: string;
    /** IDs of the line items the discount applies to. */
    lineItemIds?: string[];
}
interface CustomLineItem$8 {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$a;
    /** Custom line item description lines. Used for displaying the cart, checkout and order. */
    descriptionLines?: DescriptionLine$a[];
    /**
     * Custom line item media. Supported formats:
     * + Link to an image/video from the [Wix Media Manager](https://support.wix.com/en/article/wix-media-about-the-media-manager) - `"wix:image://v1/3c76e2_c53...4ea4~mv2.jpg#originWidth=1000&originHeight=1000"`.
     * + An image from the web - `"http(s)://<image url>"`.
     */
    media?: string;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    _id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName$a;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: string;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$c;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$e;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$c;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties$8;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$g;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface UpdateCartResponse$2 {
    /** Updated Cart. */
    cart?: Cart$2;
}
interface AddToCartResponse$2 {
    /** Updated cart. */
    cart?: Cart$2;
}
interface SelectedMemberships$6 {
    /** Selected memberships. */
    memberships?: HostSelectedMembership$2[];
}
interface HostSelectedMembership$2 {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface EstimateTotalsResponse$2 {
    /** Cart. */
    cart?: Cart$2;
    /** Calculated line items. */
    calculatedLineItems?: CalculatedLineItem$4[];
    /** Price summary. */
    priceSummary?: PriceSummary$a;
    /** Applied gift card. */
    giftCard?: GiftCard$8;
    /** Tax summary. */
    taxSummary?: TaxSummary$a;
    /** Shipping information. */
    shippingInfo?: ShippingInformation$4;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$a[];
    /** Calculation errors. */
    calculationErrors?: CalculationErrors$8;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$c;
    /** Currency used for pricing in this store. */
    currency?: string;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary$a;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary$a;
    /** Information about valid and invalid memberships, and which ones are selected for usage. */
    membershipOptions?: MembershipOptions$6;
    /** Additional fees */
    additionalFees?: AdditionalFee$8[];
    /**
     * List of validation violations raised by the [Validations Custom Extension SPI](https://www.wix.com/velo/reference/spis/wix-ecom/ecom-validations/introduction).
     * @readonly
     */
    violations?: Violation$4[];
}
interface CalculatedLineItem$4 {
    /** Line item ID. */
    lineItemId?: string;
    /** Price breakdown for this line item. */
    pricesBreakdown?: LineItemPricesData$4;
    /**
     * Type of selected payment option for current item. Defaults to `"FULL_PAYMENT_ONLINE"`.
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item happens as part of the checkout.
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `"MEMBERSHIP"` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` will be 0.
     */
    paymentOption?: PaymentOptionType$c;
}
interface LineItemPricesData$4 {
    /** Total price after discounts and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$6;
    /** Total price after discounts, and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$6;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$a;
    /** Total discount for all line items. */
    totalDiscount?: MultiCurrencyPrice$6;
    /** Catalog price after catalog discount and automatic discounts. */
    price?: MultiCurrencyPrice$6;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: MultiCurrencyPrice$6;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: MultiCurrencyPrice$6;
    /** Item price **before** line item discounts and **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: MultiCurrencyPrice$6;
}
interface ItemTaxFullDetails$a {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice$6;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice$6;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown$6[];
}
interface TaxRateBreakdown$6 {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice$6;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$a {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface PriceSummary$a {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice$6;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice$6;
    /** Total tax. */
    tax?: MultiCurrencyPrice$6;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice$6;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice$6;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice$6;
}
interface GiftCard$8 {
    /**
     * Gift Card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice$6;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface TaxSummary$a {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice$6;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice$6;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails$6;
}
interface TaxCalculationDetails$6 extends TaxCalculationDetailsCalculationDetailsOneOf$6 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$6;
    /** Error details and reason for tax rate fallback. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$6;
    /**
     * Rate calculation type. Supported values:
     * + `"AUTO_RATE"`
     * + `"FALLBACK_RATE"`
     * + `"MANUAL_RATE"`
     * + `"NO_TAX_COLLECTED"`
     */
    rateType?: RateType$6;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf$6 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$6;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$6;
}
declare enum RateType$6 {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason$6 {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails$6 {
    /**
     * Reason for fallback. Supported values:
     * + `"AUTO_TAX_FAILED"`
     * + `"AUTO_TAX_DEACTIVATED"`
     */
    fallbackReason?: FallbackReason$6;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError$k;
}
declare enum FallbackReason$6 {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
interface ApplicationError$k {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface ShippingInformation$4 {
    /** Shipping region. */
    region?: ShippingRegion$a;
    /** Selected shipping option. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption$6;
    /** All shipping options. */
    carrierServiceOptions?: CarrierServiceOption$6[];
}
interface ShippingRegion$a {
    /**
     * Shipping region ID.
     * @readonly
     */
    _id?: string;
    /** Shipping region name. */
    name?: string;
}
interface SelectedCarrierServiceOption$6 {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics$c;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices$6;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge$6[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface DeliveryLogistics$c {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails$c;
}
interface PickupDetails$c {
    /** Pickup address. */
    address?: Address$e;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod$c;
}
declare enum PickupMethod$c {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface SelectedCarrierServiceOptionPrices$6 {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$6;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$6;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$a;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice$6;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice$6;
}
interface SelectedCarrierServiceOptionOtherCharge$6 {
    /** Type of additional cost. */
    type?: ChargeType$a;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices$6;
}
declare enum ChargeType$a {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface CarrierServiceOption$6 {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption$a[];
}
interface ShippingOption$a {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics$c;
    /** Sipping price information. */
    cost?: ShippingPrice$a;
}
interface ShippingPrice$a {
    /** Shipping price. */
    price?: MultiCurrencyPrice$6;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge$6[];
}
interface OtherCharge$6 {
    /** Type of additional cost. */
    type?: ChargeType$a;
    /** Price of added cost. */
    price?: MultiCurrencyPrice$6;
}
interface AppliedDiscount$a extends AppliedDiscountDiscountSourceOneOf$a {
    /** Coupon details. */
    coupon?: V1Coupon$2;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount$2;
    /** Discount rule */
    discountRule?: DiscountRule$a;
    /** Discount type. */
    discountType?: DiscountType$a;
    /**
     * IDs of the line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$a {
    /** Coupon details. */
    coupon?: V1Coupon$2;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount$2;
    /** Discount rule */
    discountRule?: DiscountRule$a;
}
declare enum DiscountType$a {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface V1Coupon$2 {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice$6;
    /** Coupon name. */
    name?: string;
}
interface V1MerchantDiscount$2 {
    /** Discount value. */
    amount?: MultiCurrencyPrice$6;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule$a {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$a;
    /** Discount value. */
    amount?: MultiCurrencyPrice$6;
}
interface DiscountRuleName$a {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Discount rule name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface CalculationErrors$8 extends CalculationErrorsShippingCalculationErrorOneOf$8 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$a;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$8;
    /** Tax calculation error. */
    taxCalculationError?: Details$a;
    /** Coupon calculation error. */
    couponCalculationError?: Details$a;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details$a;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$k[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details$a;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details$a;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$8 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$a;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$8;
}
interface Details$a extends DetailsKindOneOf$a {
    applicationError?: ApplicationError$k;
    validationError?: ValidationError$a;
    systemError?: SystemError$a;
    /**
     * Deprecated in APIs. Used to enable migration from rendering arbitrary tracing to rest response.
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$a {
    applicationError?: ApplicationError$k;
    validationError?: ValidationError$a;
    systemError?: SystemError$a;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$a {
    fieldViolations?: FieldViolation$a[];
}
declare enum RuleType$a {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$a {
    field?: string;
    description?: string;
    violatedRule?: RuleType$a;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$a {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$8 {
    /** Carrier errors. */
    errors?: CarrierError$8[];
}
interface CarrierError$8 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$a;
}
interface MembershipOptions$6 {
    /** List of payment options that can be used. */
    eligibleMemberships?: Membership$6[];
    /** List of payment options that are owned by the member, but cannot be used due to reason provided. */
    invalidMemberships?: InvalidMembership$6[];
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: HostSelectedMembership$2[];
}
interface Membership$6 {
    /** Membership ID. */
    _id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName$6;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits$6;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName$6 {
    /** Membership name. */
    original?: string;
    /** Membership name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface MembershipPaymentCredits$6 {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership$6 {
    /** Membership details. */
    membership?: Membership$6;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface AdditionalFee$8 {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice$6;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$a;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice$6;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice$6;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface Violation$4 {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity$4;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target$4;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity$4 {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target$4 extends TargetTargetTypeOneOf$4 {
    /** General (other) violation. */
    other?: Other$4;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$4;
}
/** @oneof */
interface TargetTargetTypeOneOf$4 {
    /** General (other) violation. */
    other?: Other$4;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$4;
}
/** Available locations on the webpage */
declare enum NameInOther$4 {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem$4 {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix$4 {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other$4 {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther$4;
}
/** Specific line item violation. */
interface TargetLineItem$4 {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem$4;
    /** ID of the line item containing the violation. */
    _id?: string | null;
}
interface RemoveLineItemsResponse$4 {
    /** Updated cart. */
    cart?: Cart$2;
}
declare enum ChannelType$8 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CreateCheckoutResponse$4 {
    /** The newly created checkout's ID. */
    checkoutId?: string;
}
interface RemoveCouponResponse$4 {
    /** Updated cart. */
    cart?: Cart$2;
}
interface LineItemQuantityUpdate$4 {
    /** Line item ID. Required. */
    _id?: string;
    /** New quantity. Number must be 1 or higher. Required. */
    quantity?: number;
}
interface UpdateLineItemsQuantityResponse$4 {
    /** Updated cart. */
    cart?: Cart$2;
}
interface DeleteCartResponse$2 {
}
interface CreateCartRequest {
    /** Cart info. */
    cartInfo?: Cart$2;
    /** The code of an existing coupon to apply to the cart. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will apply to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput$4[];
    /** Catalog line items. */
    lineItems?: LineItem$6[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$8[];
}
interface CreateCartResponse {
    /** Cart. */
    cart?: Cart$2;
}
interface GetCartRequest {
    /** ID of the cart to retrieve. */
    _id: string;
}
interface GetCartResponse {
    /** The requested cart. */
    cart?: Cart$2;
}
interface AddToCartRequest {
    /** Cart ID. */
    _id: string;
    /** Catalog line items. */
    lineItems?: LineItem$6[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$8[];
}
interface RemoveLineItemsRequest$2 {
    /** Cart ID. */
    _id: string;
    /** IDs of the line items to remove from the cart. */
    lineItemIds: string[];
}
interface CreateCheckoutRequest$2 {
    /** Cart ID. */
    _id: string;
    /** **Required**. Sales channel type. */
    channelType?: ChannelType$8;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$e;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$e;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$4;
    /** Mandatory when setting a billing or shipping address if the site visitor isn't logged in. */
    email?: string | null;
}
interface RemoveCouponRequest$2 {
    /** Cart ID. */
    _id: string;
}
interface UpdateLineItemsQuantityRequest$2 {
    /** Cart ID. */
    _id: string;
    /** Line item IDs and their new quantity. */
    lineItems: LineItemQuantityUpdate$4[];
}
interface EstimateTotalsRequest {
    /** Cart ID. */
    _id: string;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$4;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$e;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$e;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships$6;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
interface DeleteCartRequest {
    /** ID of the cart to delete. */
    _id: string;
}
interface CatalogReferenceNonNullableFields$a {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields$a {
    original: string;
}
interface MultiCurrencyPriceNonNullableFields$6 {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface PlainTextValueNonNullableFields$a {
    original: string;
}
interface ColorNonNullableFields$a {
    original: string;
}
interface DescriptionLineNameNonNullableFields$a {
    original: string;
}
interface DescriptionLineNonNullableFields$a {
    plainText?: PlainTextValueNonNullableFields$a;
    colorInfo?: ColorNonNullableFields$a;
    plainTextValue?: PlainTextValueNonNullableFields$a;
    color: string;
    name?: DescriptionLineNameNonNullableFields$a;
    lineType: DescriptionLineType$a;
}
interface ItemAvailabilityInfoNonNullableFields$4 {
    status: ItemAvailabilityStatus$4;
}
interface PhysicalPropertiesNonNullableFields$a {
    shippable: boolean;
}
interface GroupNonNullableFields$4 {
    name: string;
}
interface ScopeNonNullableFields$4 {
    namespace: string;
    group?: GroupNonNullableFields$4;
}
interface ItemTypeNonNullableFields$a {
    preset: ItemTypeItemType$c;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields$6 {
    frequency: SubscriptionFrequency$c;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields$a {
    frequency: SubscriptionFrequency$c;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields$6;
}
interface TitleNonNullableFields$6 {
    original: string;
}
interface DescriptionNonNullableFields$6 {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields$6 {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$a;
    title?: TitleNonNullableFields$6;
    description?: DescriptionNonNullableFields$6;
}
interface SecuredMediaNonNullableFields$6 {
    _id: string;
    fileName: string;
    fileType: FileType$6;
}
interface PriceDescriptionNonNullableFields$a {
    original: string;
}
interface SelectedMembershipNonNullableFields$6 {
    _id: string;
    appId: string;
}
interface PaymentOptionNonNullableFields$6 {
    value: PaymentOptionType$c;
}
interface CatalogOverrideFieldsNonNullableFields$6 {
    productName?: ProductNameNonNullableFields$a;
    descriptionLines: DescriptionLineNonNullableFields$a[];
    physicalProperties?: PhysicalPropertiesNonNullableFields$a;
    image: string;
    paymentOption?: PaymentOptionNonNullableFields$6;
}
interface TaxableAddressNonNullableFields$a {
    addressType: TaxableAddressType$a;
}
interface PolicyNonNullableFields$6 {
    title: string;
    content: string;
}
interface LineItemNonNullableFields$4 {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields$a;
    productName?: ProductNameNonNullableFields$a;
    url: string;
    price?: MultiCurrencyPriceNonNullableFields$6;
    fullPrice?: MultiCurrencyPriceNonNullableFields$6;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$6;
    descriptionLines: DescriptionLineNonNullableFields$a[];
    image: string;
    availability?: ItemAvailabilityInfoNonNullableFields$4;
    physicalProperties?: PhysicalPropertiesNonNullableFields$a;
    couponScopes: ScopeNonNullableFields$4[];
    itemType?: ItemTypeNonNullableFields$a;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields$6;
    digitalFile?: SecuredMediaNonNullableFields$6;
    paymentOption: PaymentOptionType$c;
    priceDescription?: PriceDescriptionNonNullableFields$a;
    depositAmount?: MultiCurrencyPriceNonNullableFields$6;
    selectedMembership?: SelectedMembershipNonNullableFields$6;
    customLineItem: boolean;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields$6;
    savePaymentMethod: boolean;
    taxableAddress?: TaxableAddressNonNullableFields$a;
    policies: PolicyNonNullableFields$6[];
}
interface BuyerInfoNonNullableFields$8 {
    visitorId: string;
    memberId: string;
    userId: string;
}
interface CouponNonNullableFields$a {
    _id: string;
    code: string;
}
interface MerchantDiscountNonNullableFields$a {
    amount?: MultiCurrencyPriceNonNullableFields$6;
}
interface CartDiscountNonNullableFields$2 {
    coupon?: CouponNonNullableFields$a;
    merchantDiscount?: MerchantDiscountNonNullableFields$a;
}
interface StreetAddressNonNullableFields$g {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$e {
    streetAddress?: StreetAddressNonNullableFields$g;
}
interface VatIdNonNullableFields$6 {
    _id: string;
    type: VatType$8;
}
interface FullAddressContactDetailsNonNullableFields$8 {
    vatId?: VatIdNonNullableFields$6;
}
interface AddressWithContactNonNullableFields$8 {
    address?: AddressNonNullableFields$e;
    contactDetails?: FullAddressContactDetailsNonNullableFields$8;
}
interface SelectedShippingOptionNonNullableFields$2 {
    code: string;
}
interface CartNonNullableFields$2 {
    lineItems: LineItemNonNullableFields$4[];
    buyerInfo?: BuyerInfoNonNullableFields$8;
    currency: string;
    conversionCurrency: string;
    weightUnit: WeightUnit$c;
    subtotal?: MultiCurrencyPriceNonNullableFields$6;
    appliedDiscounts: CartDiscountNonNullableFields$2[];
    contactInfo?: AddressWithContactNonNullableFields$8;
    selectedShippingOption?: SelectedShippingOptionNonNullableFields$2;
}
interface UpdateCartResponseNonNullableFields$2 {
    cart?: CartNonNullableFields$2;
}
interface AddToCartResponseNonNullableFields$2 {
    cart?: CartNonNullableFields$2;
}
interface RemoveLineItemsResponseNonNullableFields$4 {
    cart?: CartNonNullableFields$2;
}
interface CreateCheckoutResponseNonNullableFields$4 {
    checkoutId: string;
}
interface RemoveCouponResponseNonNullableFields$4 {
    cart?: CartNonNullableFields$2;
}
interface UpdateLineItemsQuantityResponseNonNullableFields$4 {
    cart?: CartNonNullableFields$2;
}
interface TaxRateBreakdownNonNullableFields$6 {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields$6;
    exemptAmount?: MultiCurrencyPriceNonNullableFields$6;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields$6;
}
interface TaxBreakdownNonNullableFields$6 {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields$6;
    taxAmount?: MultiCurrencyPriceNonNullableFields$6;
    taxableAmount?: MultiCurrencyPriceNonNullableFields$6;
    jurisdictionType: JurisdictionType$a;
}
interface ItemTaxFullDetailsNonNullableFields$a {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$6;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields$6;
    rateBreakdown: TaxRateBreakdownNonNullableFields$6[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields$6;
    taxBreakdown: TaxBreakdownNonNullableFields$6[];
}
interface LineItemPricesDataNonNullableFields$4 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$6;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$6;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$a;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$6;
    price?: MultiCurrencyPriceNonNullableFields$6;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$6;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields$6;
    fullPrice?: MultiCurrencyPriceNonNullableFields$6;
}
interface CalculatedLineItemNonNullableFields$4 {
    lineItemId: string;
    pricesBreakdown?: LineItemPricesDataNonNullableFields$4;
    paymentOption: PaymentOptionType$c;
    taxableAddress?: TaxableAddressNonNullableFields$a;
}
interface PriceSummaryNonNullableFields$a {
    subtotal?: MultiCurrencyPriceNonNullableFields$6;
    shipping?: MultiCurrencyPriceNonNullableFields$6;
    tax?: MultiCurrencyPriceNonNullableFields$6;
    discount?: MultiCurrencyPriceNonNullableFields$6;
    total?: MultiCurrencyPriceNonNullableFields$6;
    additionalFees?: MultiCurrencyPriceNonNullableFields$6;
}
interface GiftCardNonNullableFields$8 {
    _id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields$6;
    appId: string;
}
interface ApplicationErrorNonNullableFields$k {
    code: string;
    description: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields$6 {
    fallbackReason: FallbackReason$6;
    error?: ApplicationErrorNonNullableFields$k;
}
interface TaxCalculationDetailsNonNullableFields$6 {
    manualRateReason: ManualCalculationReason$6;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields$6;
    rateType: RateType$6;
}
interface AggregatedTaxBreakdownNonNullableFields$6 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType$a;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields$6;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields$6;
}
interface TaxSummaryNonNullableFields$a {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$6;
    totalTax?: MultiCurrencyPriceNonNullableFields$6;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields$6;
    totalExempt?: MultiCurrencyPriceNonNullableFields$6;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields$6[];
}
interface ShippingRegionNonNullableFields$6 {
    _id: string;
    name: string;
}
interface PickupDetailsNonNullableFields$c {
    address?: AddressNonNullableFields$e;
    businessLocation: boolean;
    pickupMethod: PickupMethod$c;
}
interface DeliveryLogisticsNonNullableFields$c {
    pickupDetails?: PickupDetailsNonNullableFields$c;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields$6 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$6;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$6;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$a;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$6;
    price?: MultiCurrencyPriceNonNullableFields$6;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields$6 {
    type: ChargeType$a;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$6;
}
interface SelectedCarrierServiceOptionNonNullableFields$6 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$c;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$6;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields$6[];
}
interface OtherChargeNonNullableFields$6 {
    type: ChargeType$a;
    price?: MultiCurrencyPriceNonNullableFields$6;
}
interface ShippingPriceNonNullableFields$a {
    price?: MultiCurrencyPriceNonNullableFields$6;
    otherCharges: OtherChargeNonNullableFields$6[];
}
interface ShippingOptionNonNullableFields$a {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$c;
    cost?: ShippingPriceNonNullableFields$a;
}
interface CarrierServiceOptionNonNullableFields$6 {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields$a[];
}
interface ShippingInformationNonNullableFields$8 {
    region?: ShippingRegionNonNullableFields$6;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields$6;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields$6[];
}
interface V1CouponNonNullableFields$2 {
    _id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields$6;
    name: string;
    couponType: string;
}
interface V1MerchantDiscountNonNullableFields$2 {
    amount?: MultiCurrencyPriceNonNullableFields$6;
}
interface DiscountRuleNameNonNullableFields$a {
    original: string;
}
interface DiscountRuleNonNullableFields$a {
    _id: string;
    name?: DiscountRuleNameNonNullableFields$a;
    amount?: MultiCurrencyPriceNonNullableFields$6;
}
interface LineItemDiscountNonNullableFields$a {
    _id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields$6;
}
interface AppliedDiscountNonNullableFields$a {
    coupon?: V1CouponNonNullableFields$2;
    merchantDiscount?: V1MerchantDiscountNonNullableFields$2;
    discountRule?: DiscountRuleNonNullableFields$a;
    discountType: DiscountType$a;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$a[];
}
interface FieldViolationNonNullableFields$a {
    field: string;
    description: string;
    violatedRule: RuleType$a;
}
interface ValidationErrorNonNullableFields$a {
    fieldViolations: FieldViolationNonNullableFields$a[];
}
interface DetailsNonNullableFields$a {
    applicationError?: ApplicationErrorNonNullableFields$k;
    validationError?: ValidationErrorNonNullableFields$a;
}
interface CarrierErrorNonNullableFields$8 {
    carrierId: string;
    error?: DetailsNonNullableFields$a;
}
interface CarrierErrorsNonNullableFields$8 {
    errors: CarrierErrorNonNullableFields$8[];
}
interface CalculationErrorsNonNullableFields$8 {
    generalShippingCalculationError?: DetailsNonNullableFields$a;
    carrierErrors?: CarrierErrorsNonNullableFields$8;
    taxCalculationError?: DetailsNonNullableFields$a;
    couponCalculationError?: DetailsNonNullableFields$a;
    giftCardCalculationError?: DetailsNonNullableFields$a;
    orderValidationErrors: ApplicationErrorNonNullableFields$k[];
    membershipError?: DetailsNonNullableFields$a;
    discountsCalculationError?: DetailsNonNullableFields$a;
}
interface MembershipNameNonNullableFields$a {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields$6 {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields$6 {
    _id: string;
    appId: string;
    name?: MembershipNameNonNullableFields$a;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields$6;
}
interface InvalidMembershipNonNullableFields$6 {
    membership?: MembershipNonNullableFields$6;
    reason: string;
}
interface HostSelectedMembershipNonNullableFields$2 {
    _id: string;
    appId: string;
    lineItemIds: string[];
}
interface MembershipOptionsNonNullableFields$6 {
    eligibleMemberships: MembershipNonNullableFields$6[];
    invalidMemberships: InvalidMembershipNonNullableFields$6[];
    selectedMemberships: HostSelectedMembershipNonNullableFields$2[];
}
interface AdditionalFeeNonNullableFields$8 {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields$6;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$a;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields$6;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields$6;
    lineItemIds: string[];
}
interface OtherNonNullableFields$4 {
    name: NameInOther$4;
}
interface TargetLineItemNonNullableFields$4 {
    name: NameInLineItem$4;
    suggestedFix: SuggestedFix$4;
}
interface TargetNonNullableFields$4 {
    other?: OtherNonNullableFields$4;
    lineItem?: TargetLineItemNonNullableFields$4;
}
interface ViolationNonNullableFields$4 {
    severity: Severity$4;
    target?: TargetNonNullableFields$4;
}
interface EstimateTotalsResponseNonNullableFields$2 {
    cart?: CartNonNullableFields$2;
    calculatedLineItems: CalculatedLineItemNonNullableFields$4[];
    priceSummary?: PriceSummaryNonNullableFields$a;
    giftCard?: GiftCardNonNullableFields$8;
    taxSummary?: TaxSummaryNonNullableFields$a;
    shippingInfo?: ShippingInformationNonNullableFields$8;
    appliedDiscounts: AppliedDiscountNonNullableFields$a[];
    calculationErrors?: CalculationErrorsNonNullableFields$8;
    weightUnit: WeightUnit$c;
    currency: string;
    payNow?: PriceSummaryNonNullableFields$a;
    payLater?: PriceSummaryNonNullableFields$a;
    membershipOptions?: MembershipOptionsNonNullableFields$6;
    additionalFees: AdditionalFeeNonNullableFields$8[];
    violations: ViolationNonNullableFields$4[];
}
interface CreateCartResponseNonNullableFields {
    cart?: CartNonNullableFields$2;
}
interface GetCartResponseNonNullableFields {
    cart?: CartNonNullableFields$2;
}

type __PublicMethodMetaInfo$m<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createCart(): __PublicMethodMetaInfo$m<'POST', {}, CreateCartRequest, CreateCartRequest$1, CreateCartResponse & CreateCartResponseNonNullableFields, CreateCartResponse$1 & CreateCartResponseNonNullableFields$1>;
declare function updateCart(): __PublicMethodMetaInfo$m<'PATCH', {
    cartInfoId: string;
}, UpdateCartRequest$2, UpdateCartRequest$3, UpdateCartResponse$2 & UpdateCartResponseNonNullableFields$2, UpdateCartResponse$3 & UpdateCartResponseNonNullableFields$3>;
declare function getCart(): __PublicMethodMetaInfo$m<'GET', {
    id: string;
}, GetCartRequest, GetCartRequest$1, GetCartResponse & GetCartResponseNonNullableFields, GetCartResponse$1 & GetCartResponseNonNullableFields$1>;
declare function addToCart(): __PublicMethodMetaInfo$m<'POST', {
    id: string;
}, AddToCartRequest, AddToCartRequest$1, AddToCartResponse$2 & AddToCartResponseNonNullableFields$2, AddToCartResponse$3 & AddToCartResponseNonNullableFields$3>;
declare function removeLineItems$1(): __PublicMethodMetaInfo$m<'POST', {
    id: string;
}, RemoveLineItemsRequest$2, RemoveLineItemsRequest$3, RemoveLineItemsResponse$4 & RemoveLineItemsResponseNonNullableFields$4, RemoveLineItemsResponse$5 & RemoveLineItemsResponseNonNullableFields$5>;
declare function createCheckout$1(): __PublicMethodMetaInfo$m<'POST', {
    id: string;
}, CreateCheckoutRequest$2, CreateCheckoutRequest$3, CreateCheckoutResponse$4 & CreateCheckoutResponseNonNullableFields$4, CreateCheckoutResponse$5 & CreateCheckoutResponseNonNullableFields$5>;
declare function removeCoupon$1(): __PublicMethodMetaInfo$m<'POST', {
    id: string;
}, RemoveCouponRequest$2, RemoveCouponRequest$3, RemoveCouponResponse$4 & RemoveCouponResponseNonNullableFields$4, RemoveCouponResponse$5 & RemoveCouponResponseNonNullableFields$5>;
declare function updateLineItemsQuantity$1(): __PublicMethodMetaInfo$m<'POST', {
    id: string;
}, UpdateLineItemsQuantityRequest$2, UpdateLineItemsQuantityRequest$3, UpdateLineItemsQuantityResponse$4 & UpdateLineItemsQuantityResponseNonNullableFields$4, UpdateLineItemsQuantityResponse$5 & UpdateLineItemsQuantityResponseNonNullableFields$5>;
declare function estimateTotals(): __PublicMethodMetaInfo$m<'POST', {
    id: string;
}, EstimateTotalsRequest, EstimateTotalsRequest$1, EstimateTotalsResponse$2 & EstimateTotalsResponseNonNullableFields$2, EstimateTotalsResponse$3 & EstimateTotalsResponseNonNullableFields$3>;
declare function deleteCart(): __PublicMethodMetaInfo$m<'DELETE', {
    id: string;
}, DeleteCartRequest, DeleteCartRequest$1, DeleteCartResponse$2, DeleteCartResponse$3>;

declare const meta$m_addToCart: typeof addToCart;
declare const meta$m_createCart: typeof createCart;
declare const meta$m_deleteCart: typeof deleteCart;
declare const meta$m_estimateTotals: typeof estimateTotals;
declare const meta$m_getCart: typeof getCart;
declare const meta$m_updateCart: typeof updateCart;
declare namespace meta$m {
  export { type __PublicMethodMetaInfo$m as __PublicMethodMetaInfo, meta$m_addToCart as addToCart, meta$m_createCart as createCart, createCheckout$1 as createCheckout, meta$m_deleteCart as deleteCart, meta$m_estimateTotals as estimateTotals, meta$m_getCart as getCart, removeCoupon$1 as removeCoupon, removeLineItems$1 as removeLineItems, meta$m_updateCart as updateCart, updateLineItemsQuantity$1 as updateLineItemsQuantity };
}

interface Cart$1 {
    /** Cart ID. */
    id?: string | null;
    /**
     * Line items.
     * @readonly
     */
    lineItems?: LineItem$5[];
    /** Note left by the buyer/customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo$7;
    /**
     * Currency used for pricing.
     * @readonly
     */
    currency?: string;
    /**
     * Currency code used for all the converted prices that are returned.
     * For a site that supports multiple currencies, this is the currency the buyer selected.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string | null;
    /**
     * Site language in which original values are displayed.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrices?: boolean | null;
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit$b;
    /**
     * ID of the checkout that originated from this cart.
     * @readonly
     */
    checkoutId?: string | null;
    /**
     * Cart discounts.
     * @readonly
     */
    appliedDiscounts?: CartDiscount$1[];
    /**
     * Date and time the cart was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the cart was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Contact info. */
    contactInfo?: AddressWithContact$7;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used in the [Abandoned Checkout API](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/abandoned-checkout/introduction)
     * to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a
     * standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$3;
}
interface LineItem$5 {
    /**
     * Line item ID.
     * @readonly
     */
    id?: string | null;
    /** Item quantity. */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$f;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName$9;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: PageUrlV2$3;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice$5;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice$5;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice$5;
    /**
     * Line item description lines. Used for displaying the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine$9[];
    /**
     * Line item image details.
     * @readonly
     */
    image?: CommonImage$1;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo$3;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties$d;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType$b;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` - Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is defined by `lineItem.deposit`.
     * + `MEMBERSHIP_OFFLINE` - Payment for this item can only be performed by using a membership and must be manually redeemed in the dashboard by the site owner. When this option is used, `lineItem.price.amount` is 0.
     * @readonly
     */
    paymentOption?: PaymentOptionType$b;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties$7;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + in most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription$9;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice$5;
    /** Selected membership to be used as payment for this item. Must be used with `lineItem.paymentOption` set to `MEMBERSHIP` or `MEMBERSHIP_OFFLINE`. This field can be empty when `lineItem.paymentOption` is set to `MEMBERSHIP_OFFLINE`. */
    selectedMembership?: SelectedMembership$5;
    /**
     * Tax group ID for this line item.
     * @readonly
     */
    taxGroupId?: string | null;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields$5;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$f {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ProductName$9 {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PageUrlV2$3 {
    /** The relative path for the page within the site. For example, `/product-page/a-product`. */
    relativePath?: string;
    /** The page's full URL. For example, `https://mysite.com/product-page/a-product`. */
    url?: string | null;
}
interface MultiCurrencyPrice$5 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface DescriptionLine$9 extends DescriptionLineValueOneOf$9, DescriptionLineDescriptionLineValueOneOf$9 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$9;
    /** Description line color value. */
    colorInfo?: Color$9;
    /** Description line name. */
    name?: DescriptionLineName$9;
}
/** @oneof */
interface DescriptionLineValueOneOf$9 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$9;
    /** Description line color value. */
    colorInfo?: Color$9;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$9 {
}
interface DescriptionLineName$9 {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$9 {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$9 {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$9 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface CommonImage$1 {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface ItemAvailabilityInfo$3 {
    /**
     * Item availability status.
     * + `"NOT_FOUND"`: Item does not exist
     * + `"NOT_AVAILABLE"`: Item not in stock
     * + `"PARTIALLY_AVAILABLE"`: Available quantity is less than requested
     */
    status?: ItemAvailabilityStatus$3;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus$3 {
    AVAILABLE = "AVAILABLE",
    NOT_FOUND = "NOT_FOUND",
    /** Not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
interface PhysicalProperties$d {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$b extends ItemTypeItemTypeDataOneOf$b {
    /** Preset item type. */
    preset?: ItemTypeItemType$b;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$b {
    /** Preset item type. */
    preset?: ItemTypeItemType$b;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$b {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$b {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
declare enum FileType$5 {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$b {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties$7 {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface PriceDescription$9 {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
/** Selected Membership */
interface SelectedMembership$5 {
    /** Membership ID. */
    id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
}
interface CatalogOverrideFields$5 {
    /** Item name. */
    productName?: ProductName$9;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine$9[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$d;
    /** Item image. */
    image?: Image$5;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption$5;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface Image$5 {
    /** WixMedia image ID. */
    id?: string;
    /** Original image height. */
    height?: number;
    /** Original image width. */
    width?: number;
    /** Image alt text. Optional. */
    altText?: string | null;
    /** Image filename. Optional. */
    filename?: string | null;
}
interface PaymentOption$5 {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType$b;
}
declare enum TaxableAddressType$9 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Buyer Info */
interface BuyerInfo$7 extends BuyerInfoIdOneOf$7 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the buyer (or cart owner) is a Wix user.
     * @readonly
     */
    userId?: string;
    /** Contact ID. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction). */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$7 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the buyer (or cart owner) is a Wix user.
     * @readonly
     */
    userId?: string;
}
declare enum WeightUnit$b {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface CartDiscount$1 extends CartDiscountDiscountSourceOneOf$1 {
    /** Coupon details. */
    coupon?: Coupon$9;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$9;
}
/** @oneof */
interface CartDiscountDiscountSourceOneOf$1 {
    /** Coupon details. */
    coupon?: Coupon$9;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$9;
}
interface Coupon$9 {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
}
interface MerchantDiscount$9 {
    /** Discount value. */
    amount?: MultiCurrencyPrice$5;
}
/** Billing Info and shipping details */
interface AddressWithContact$7 {
    /** Address. */
    address?: Address$d;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$9;
}
/** Physical address */
interface Address$d {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$f;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress$f {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$9 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$7;
}
interface VatId$7 {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$7;
}
/** tax info types */
declare enum VatType$7 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface SelectedShippingOption$3 {
    /** Carrier ID. */
    carrierId?: string | null;
    /** Selected shipping option code. For example, "usps_std_overnight". */
    code?: string;
}
interface GetCurrentCartRequest$1 {
}
interface GetCurrentCartResponse$1 {
    /** Current session's active cart. */
    cart?: Cart$1;
}
interface UpdateCartRequest$1 {
    /** Cart info. */
    cartInfo?: Cart$1;
    /** Coupon code. For more information, see [Coupons API](https://dev.wix.com/api/rest/wix-coupons/coupons/introduction). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput$3[];
    /** Catalog line items. */
    lineItems?: LineItem$5[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$7[];
}
interface MerchantDiscountInput$3 {
    /** Discount amount. */
    amount?: string;
    /** IDs of line items the discount applies to. */
    lineItemIds?: string[];
}
interface CustomLineItem$7 {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$9;
    /** Custom line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine$9[];
    /** Custom line item's media. */
    media?: Image$5;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName$9;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: PageUrlV2$3;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$b;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$d;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$b;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties$7;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$f;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface UpdateCartResponse$1 {
    /** Updated Cart. */
    cart?: Cart$1;
}
interface AddToCurrentCartRequest$1 {
    /** Catalog line items. */
    lineItems?: LineItem$5[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$7[];
}
interface AddToCartResponse$1 {
    /** Updated cart. */
    cart?: Cart$1;
}
interface SelectedMemberships$5 {
    /** Selected memberships. */
    memberships?: HostSelectedMembership$1[];
}
interface HostSelectedMembership$1 {
    /** Membership ID. */
    id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface EstimateTotalsResponse$1 {
    /** Cart. */
    cart?: Cart$1;
    /** Calculated line items. */
    calculatedLineItems?: CalculatedLineItem$3[];
    /** Price summary. */
    priceSummary?: PriceSummary$9;
    /** Applied gift card. */
    giftCard?: GiftCard$7;
    /** Tax summary. */
    taxSummary?: TaxSummary$9;
    /** Shipping information. */
    shippingInfo?: ShippingInformation$3;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$9[];
    /** Calculation errors. */
    calculationErrors?: CalculationErrors$7;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$b;
    /** Currency used for pricing in this store. */
    currency?: string;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary$9;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary$9;
    /** Information about valid and invalid memberships, and which ones are selected for usage. */
    membershipOptions?: MembershipOptions$5;
    /** Additional fees */
    additionalFees?: AdditionalFee$7[];
    /**
     * List of validation violations raised by the [Validations service plugin](https://dev.wix.com/api/rest/wix-ecommerce/validations-integration-spi/introduction).
     * @readonly
     */
    violations?: Violation$3[];
}
interface CalculatedLineItem$3 {
    /** Line item ID. */
    lineItemId?: string;
    /** Price breakdown for this line item. */
    pricesBreakdown?: LineItemPricesData$3;
    /**
     * Type of selected payment option for current item. Supported values:
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item will happen as part of the checkout
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item will happen after the checkout
     * + `"MEMBERSHIP"` - This item cannot be paid via monetary payment options, only via non monetary option such membership. When this option is used, price must be set to 0
     * + `"DEPOSIT_ONLINE"` -  Partial payment of the given item will happen as part of the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$b;
}
interface LineItemPricesData$3 {
    /** Total price after discounts and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$5;
    /** Total price after discounts, and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$5;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$9;
    /** Total discount for all line items. */
    totalDiscount?: MultiCurrencyPrice$5;
    /** Catalog price after catalog discount and automatic discounts. */
    price?: MultiCurrencyPrice$5;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: MultiCurrencyPrice$5;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: MultiCurrencyPrice$5;
    /** Item price **before** line item discounts and **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: MultiCurrencyPrice$5;
}
interface ItemTaxFullDetails$9 {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice$5;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice$5;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown$5[];
}
interface TaxRateBreakdown$5 {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice$5;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$9 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface PriceSummary$9 {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice$5;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice$5;
    /** Total tax. */
    tax?: MultiCurrencyPrice$5;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice$5;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice$5;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice$5;
}
interface GiftCard$7 {
    /**
     * Gift Card ID.
     * @deprecated
     */
    id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice$5;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface TaxSummary$9 {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice$5;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice$5;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails$5;
}
interface TaxCalculationDetails$5 extends TaxCalculationDetailsCalculationDetailsOneOf$5 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$5;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$5;
    /** Rate calculation type. */
    rateType?: RateType$5;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf$5 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$5;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$5;
}
declare enum RateType$5 {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason$5 {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails$5 {
    /** reason for fallback */
    fallbackReason?: FallbackReason$5;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError$j;
}
declare enum FallbackReason$5 {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
interface ApplicationError$j {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface ShippingInformation$3 {
    /** Shipping region. */
    region?: ShippingRegion$9;
    /** Selected shipping option. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption$5;
    /** All shipping options. */
    carrierServiceOptions?: CarrierServiceOption$5[];
}
interface ShippingRegion$9 {
    /**
     * Shipping region ID.
     * @readonly
     */
    id?: string;
    /** Shipping region name. */
    name?: string;
}
interface SelectedCarrierServiceOption$5 {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics$b;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices$5;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge$5[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface DeliveryLogistics$b {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails$b;
}
interface PickupDetails$b {
    /** Pickup address. */
    address?: Address$d;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod$b;
}
declare enum PickupMethod$b {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface SelectedCarrierServiceOptionPrices$5 {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$5;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$5;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$9;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice$5;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice$5;
}
interface SelectedCarrierServiceOptionOtherCharge$5 {
    /** Type of additional cost. */
    type?: ChargeType$9;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices$5;
}
declare enum ChargeType$9 {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface CarrierServiceOption$5 {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption$9[];
}
interface ShippingOption$9 {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics$b;
    /** Sipping price information. */
    cost?: ShippingPrice$9;
}
interface ShippingPrice$9 {
    /** Shipping price. */
    price?: MultiCurrencyPrice$5;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge$5[];
}
interface OtherCharge$5 {
    /** Type of additional cost. */
    type?: ChargeType$9;
    /** Price of added cost. */
    price?: MultiCurrencyPrice$5;
}
interface AppliedDiscount$9 extends AppliedDiscountDiscountSourceOneOf$9 {
    /** Coupon details. */
    coupon?: V1Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount$1;
    /** Discount rule */
    discountRule?: DiscountRule$9;
    /** Discount type. */
    discountType?: DiscountType$9;
    /**
     * IDs of line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$9 {
    /** Coupon details. */
    coupon?: V1Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount$1;
    /** Discount rule */
    discountRule?: DiscountRule$9;
}
declare enum DiscountType$9 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface V1Coupon$1 {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice$5;
    /** Coupon name. */
    name?: string;
}
interface V1MerchantDiscount$1 {
    /** Discount value. */
    amount?: MultiCurrencyPrice$5;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule$9 {
    /** Discount rule ID */
    id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$9;
    /** Discount value. */
    amount?: MultiCurrencyPrice$5;
}
interface DiscountRuleName$9 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface CalculationErrors$7 extends CalculationErrorsShippingCalculationErrorOneOf$7 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$9;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$7;
    /** Tax calculation error. */
    taxCalculationError?: Details$9;
    /** Coupon calculation error. */
    couponCalculationError?: Details$9;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details$9;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$j[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details$9;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details$9;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$7 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$9;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$7;
}
interface Details$9 extends DetailsKindOneOf$9 {
    applicationError?: ApplicationError$j;
    validationError?: ValidationError$9;
    systemError?: SystemError$9;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$9 {
    applicationError?: ApplicationError$j;
    validationError?: ValidationError$9;
    systemError?: SystemError$9;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$9 {
    fieldViolations?: FieldViolation$9[];
}
declare enum RuleType$9 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$9 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$9;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$9 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$7 {
    /** Carrier errors. */
    errors?: CarrierError$7[];
}
interface CarrierError$7 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$9;
}
interface MembershipOptions$5 {
    /** List of payment options that can be used. */
    eligibleMemberships?: Membership$5[];
    /** List of payment options that are owned by the member, but cannot be used due to reason provided. */
    invalidMemberships?: InvalidMembership$5[];
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: HostSelectedMembership$1[];
}
interface Membership$5 {
    /** Membership ID. */
    id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName$5;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits$5;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName$5 {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface MembershipPaymentCredits$5 {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership$5 {
    /** Membership details. */
    membership?: Membership$5;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface AdditionalFee$7 {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice$5;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$9;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice$5;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice$5;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface Violation$3 {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity$3;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target$3;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity$3 {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target$3 extends TargetTargetTypeOneOf$3 {
    /** General (other) violation. */
    other?: Other$3;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$3;
}
/** @oneof */
interface TargetTargetTypeOneOf$3 {
    /** General (other) violation. */
    other?: Other$3;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$3;
}
/** Available locations on the webpage */
declare enum NameInOther$3 {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem$3 {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix$3 {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other$3 {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther$3;
}
/** Specific line item violation. */
interface TargetLineItem$3 {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem$3;
    /** ID of the line item containing the violation. */
    id?: string | null;
}
interface RemoveLineItemsFromCurrentCartRequest$1 {
    /** Line item IDs to remove from cart. */
    lineItemIds: string[];
}
interface RemoveLineItemsResponse$3 {
    /** Updated cart. */
    cart?: Cart$1;
}
interface CreateCheckoutFromCurrentCartRequest$1 {
    /** __Required.__ Sales channel type. */
    channelType?: ChannelType$7;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$d;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$d;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$3;
    /** Mandatory when setting billing or shipping address and user is not logged in. */
    email?: string | null;
}
declare enum ChannelType$7 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CreateCheckoutResponse$3 {
    /** The newly created checkout's ID. */
    checkoutId?: string;
}
interface RemoveCouponFromCurrentCartRequest$1 {
}
interface RemoveCouponResponse$3 {
    /** Updated cart. */
    cart?: Cart$1;
}
interface UpdateCurrentCartLineItemQuantityRequest$1 {
    /** Line item IDs and their new quantity. */
    lineItems: LineItemQuantityUpdate$3[];
}
interface LineItemQuantityUpdate$3 {
    /** Line item ID. Required. */
    id?: string;
    /** New quantity. Number must be 1 or higher. Required. */
    quantity?: number;
}
interface UpdateLineItemsQuantityResponse$3 {
    /** Updated cart. */
    cart?: Cart$1;
}
interface EstimateCurrentCartTotalsRequest$1 {
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$3;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$d;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$d;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships$5;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
interface DeleteCurrentCartRequest$1 {
}
interface DeleteCartResponse$1 {
}
interface CatalogReferenceNonNullableFields$9 {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields$9 {
    original: string;
}
interface PageUrlV2NonNullableFields$2 {
    relativePath: string;
}
interface MultiCurrencyPriceNonNullableFields$5 {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface PlainTextValueNonNullableFields$9 {
    original: string;
}
interface ColorNonNullableFields$9 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$9 {
    original: string;
}
interface DescriptionLineNonNullableFields$9 {
    plainText?: PlainTextValueNonNullableFields$9;
    colorInfo?: ColorNonNullableFields$9;
    plainTextValue?: PlainTextValueNonNullableFields$9;
    color: string;
    name?: DescriptionLineNameNonNullableFields$9;
    lineType: DescriptionLineType$9;
}
interface CommonImageNonNullableFields$1 {
    id: string;
    url: string;
    height: number;
    width: number;
}
interface ItemAvailabilityInfoNonNullableFields$3 {
    status: ItemAvailabilityStatus$3;
}
interface PhysicalPropertiesNonNullableFields$9 {
    shippable: boolean;
}
interface GroupNonNullableFields$3 {
    name: string;
}
interface ScopeNonNullableFields$3 {
    namespace: string;
    group?: GroupNonNullableFields$3;
}
interface ItemTypeNonNullableFields$9 {
    preset: ItemTypeItemType$b;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields$5 {
    frequency: SubscriptionFrequency$b;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields$9 {
    frequency: SubscriptionFrequency$b;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields$5;
}
interface TitleNonNullableFields$5 {
    original: string;
}
interface DescriptionNonNullableFields$5 {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields$5 {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$9;
    title?: TitleNonNullableFields$5;
    description?: DescriptionNonNullableFields$5;
}
interface SecuredMediaNonNullableFields$5 {
    id: string;
    fileName: string;
    fileType: FileType$5;
}
interface PriceDescriptionNonNullableFields$9 {
    original: string;
}
interface SelectedMembershipNonNullableFields$5 {
    id: string;
    appId: string;
}
interface ImageNonNullableFields$6 {
    id: string;
    height: number;
    width: number;
}
interface PaymentOptionNonNullableFields$5 {
    value: PaymentOptionType$b;
}
interface CatalogOverrideFieldsNonNullableFields$5 {
    productName?: ProductNameNonNullableFields$9;
    descriptionLines: DescriptionLineNonNullableFields$9[];
    physicalProperties?: PhysicalPropertiesNonNullableFields$9;
    image?: ImageNonNullableFields$6;
    paymentOption?: PaymentOptionNonNullableFields$5;
}
interface TaxableAddressNonNullableFields$9 {
    addressType: TaxableAddressType$9;
}
interface PolicyNonNullableFields$5 {
    title: string;
    content: string;
}
interface LineItemNonNullableFields$3 {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields$9;
    productName?: ProductNameNonNullableFields$9;
    url?: PageUrlV2NonNullableFields$2;
    price?: MultiCurrencyPriceNonNullableFields$5;
    fullPrice?: MultiCurrencyPriceNonNullableFields$5;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$5;
    descriptionLines: DescriptionLineNonNullableFields$9[];
    image?: CommonImageNonNullableFields$1;
    availability?: ItemAvailabilityInfoNonNullableFields$3;
    physicalProperties?: PhysicalPropertiesNonNullableFields$9;
    couponScopes: ScopeNonNullableFields$3[];
    itemType?: ItemTypeNonNullableFields$9;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields$5;
    digitalFile?: SecuredMediaNonNullableFields$5;
    paymentOption: PaymentOptionType$b;
    priceDescription?: PriceDescriptionNonNullableFields$9;
    depositAmount?: MultiCurrencyPriceNonNullableFields$5;
    selectedMembership?: SelectedMembershipNonNullableFields$5;
    customLineItem: boolean;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields$5;
    savePaymentMethod: boolean;
    taxableAddress?: TaxableAddressNonNullableFields$9;
    policies: PolicyNonNullableFields$5[];
}
interface BuyerInfoNonNullableFields$7 {
    visitorId: string;
    memberId: string;
    userId: string;
}
interface CouponNonNullableFields$9 {
    id: string;
    code: string;
}
interface MerchantDiscountNonNullableFields$9 {
    amount?: MultiCurrencyPriceNonNullableFields$5;
}
interface CartDiscountNonNullableFields$1 {
    coupon?: CouponNonNullableFields$9;
    merchantDiscount?: MerchantDiscountNonNullableFields$9;
}
interface StreetAddressNonNullableFields$f {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$d {
    streetAddress?: StreetAddressNonNullableFields$f;
}
interface VatIdNonNullableFields$5 {
    id: string;
    type: VatType$7;
}
interface FullAddressContactDetailsNonNullableFields$7 {
    vatId?: VatIdNonNullableFields$5;
}
interface AddressWithContactNonNullableFields$7 {
    address?: AddressNonNullableFields$d;
    contactDetails?: FullAddressContactDetailsNonNullableFields$7;
}
interface SelectedShippingOptionNonNullableFields$1 {
    code: string;
}
interface CartNonNullableFields$1 {
    lineItems: LineItemNonNullableFields$3[];
    buyerInfo?: BuyerInfoNonNullableFields$7;
    currency: string;
    conversionCurrency: string;
    weightUnit: WeightUnit$b;
    subtotal?: MultiCurrencyPriceNonNullableFields$5;
    appliedDiscounts: CartDiscountNonNullableFields$1[];
    contactInfo?: AddressWithContactNonNullableFields$7;
    selectedShippingOption?: SelectedShippingOptionNonNullableFields$1;
}
interface GetCurrentCartResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
}
interface UpdateCartResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
}
interface AddToCartResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
}
interface RemoveLineItemsResponseNonNullableFields$3 {
    cart?: CartNonNullableFields$1;
}
interface CreateCheckoutResponseNonNullableFields$3 {
    checkoutId: string;
}
interface RemoveCouponResponseNonNullableFields$3 {
    cart?: CartNonNullableFields$1;
}
interface UpdateLineItemsQuantityResponseNonNullableFields$3 {
    cart?: CartNonNullableFields$1;
}
interface TaxRateBreakdownNonNullableFields$5 {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields$5;
    exemptAmount?: MultiCurrencyPriceNonNullableFields$5;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields$5;
}
interface TaxBreakdownNonNullableFields$5 {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields$5;
    taxAmount?: MultiCurrencyPriceNonNullableFields$5;
    taxableAmount?: MultiCurrencyPriceNonNullableFields$5;
    jurisdictionType: JurisdictionType$9;
}
interface ItemTaxFullDetailsNonNullableFields$9 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$5;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields$5;
    rateBreakdown: TaxRateBreakdownNonNullableFields$5[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields$5;
    taxBreakdown: TaxBreakdownNonNullableFields$5[];
}
interface LineItemPricesDataNonNullableFields$3 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$5;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$5;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$9;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$5;
    price?: MultiCurrencyPriceNonNullableFields$5;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$5;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields$5;
    fullPrice?: MultiCurrencyPriceNonNullableFields$5;
}
interface CalculatedLineItemNonNullableFields$3 {
    lineItemId: string;
    pricesBreakdown?: LineItemPricesDataNonNullableFields$3;
    paymentOption: PaymentOptionType$b;
    taxableAddress?: TaxableAddressNonNullableFields$9;
}
interface PriceSummaryNonNullableFields$9 {
    subtotal?: MultiCurrencyPriceNonNullableFields$5;
    shipping?: MultiCurrencyPriceNonNullableFields$5;
    tax?: MultiCurrencyPriceNonNullableFields$5;
    discount?: MultiCurrencyPriceNonNullableFields$5;
    total?: MultiCurrencyPriceNonNullableFields$5;
    additionalFees?: MultiCurrencyPriceNonNullableFields$5;
}
interface GiftCardNonNullableFields$7 {
    id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields$5;
    appId: string;
}
interface ApplicationErrorNonNullableFields$j {
    code: string;
    description: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields$5 {
    fallbackReason: FallbackReason$5;
    error?: ApplicationErrorNonNullableFields$j;
}
interface TaxCalculationDetailsNonNullableFields$5 {
    manualRateReason: ManualCalculationReason$5;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields$5;
    rateType: RateType$5;
}
interface AggregatedTaxBreakdownNonNullableFields$5 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType$9;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields$5;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields$5;
}
interface TaxSummaryNonNullableFields$9 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$5;
    totalTax?: MultiCurrencyPriceNonNullableFields$5;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields$5;
    totalExempt?: MultiCurrencyPriceNonNullableFields$5;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields$5[];
}
interface ShippingRegionNonNullableFields$5 {
    id: string;
    name: string;
}
interface PickupDetailsNonNullableFields$b {
    address?: AddressNonNullableFields$d;
    businessLocation: boolean;
    pickupMethod: PickupMethod$b;
}
interface DeliveryLogisticsNonNullableFields$b {
    pickupDetails?: PickupDetailsNonNullableFields$b;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields$5 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$5;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$5;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$9;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$5;
    price?: MultiCurrencyPriceNonNullableFields$5;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields$5 {
    type: ChargeType$9;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$5;
}
interface SelectedCarrierServiceOptionNonNullableFields$5 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$b;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$5;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields$5[];
}
interface OtherChargeNonNullableFields$5 {
    type: ChargeType$9;
    price?: MultiCurrencyPriceNonNullableFields$5;
}
interface ShippingPriceNonNullableFields$9 {
    price?: MultiCurrencyPriceNonNullableFields$5;
    otherCharges: OtherChargeNonNullableFields$5[];
}
interface ShippingOptionNonNullableFields$9 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$b;
    cost?: ShippingPriceNonNullableFields$9;
}
interface CarrierServiceOptionNonNullableFields$5 {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields$9[];
}
interface ShippingInformationNonNullableFields$7 {
    region?: ShippingRegionNonNullableFields$5;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields$5;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields$5[];
}
interface V1CouponNonNullableFields$1 {
    id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields$5;
    name: string;
    couponType: string;
}
interface V1MerchantDiscountNonNullableFields$1 {
    amount?: MultiCurrencyPriceNonNullableFields$5;
}
interface DiscountRuleNameNonNullableFields$9 {
    original: string;
}
interface DiscountRuleNonNullableFields$9 {
    id: string;
    name?: DiscountRuleNameNonNullableFields$9;
    amount?: MultiCurrencyPriceNonNullableFields$5;
}
interface LineItemDiscountNonNullableFields$9 {
    id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields$5;
}
interface AppliedDiscountNonNullableFields$9 {
    coupon?: V1CouponNonNullableFields$1;
    merchantDiscount?: V1MerchantDiscountNonNullableFields$1;
    discountRule?: DiscountRuleNonNullableFields$9;
    discountType: DiscountType$9;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$9[];
}
interface FieldViolationNonNullableFields$9 {
    field: string;
    description: string;
    violatedRule: RuleType$9;
}
interface ValidationErrorNonNullableFields$9 {
    fieldViolations: FieldViolationNonNullableFields$9[];
}
interface DetailsNonNullableFields$9 {
    applicationError?: ApplicationErrorNonNullableFields$j;
    validationError?: ValidationErrorNonNullableFields$9;
}
interface CarrierErrorNonNullableFields$7 {
    carrierId: string;
    error?: DetailsNonNullableFields$9;
}
interface CarrierErrorsNonNullableFields$7 {
    errors: CarrierErrorNonNullableFields$7[];
}
interface CalculationErrorsNonNullableFields$7 {
    generalShippingCalculationError?: DetailsNonNullableFields$9;
    carrierErrors?: CarrierErrorsNonNullableFields$7;
    taxCalculationError?: DetailsNonNullableFields$9;
    couponCalculationError?: DetailsNonNullableFields$9;
    giftCardCalculationError?: DetailsNonNullableFields$9;
    orderValidationErrors: ApplicationErrorNonNullableFields$j[];
    membershipError?: DetailsNonNullableFields$9;
    discountsCalculationError?: DetailsNonNullableFields$9;
}
interface MembershipNameNonNullableFields$9 {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields$5 {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields$5 {
    id: string;
    appId: string;
    name?: MembershipNameNonNullableFields$9;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields$5;
}
interface InvalidMembershipNonNullableFields$5 {
    membership?: MembershipNonNullableFields$5;
    reason: string;
}
interface HostSelectedMembershipNonNullableFields$1 {
    id: string;
    appId: string;
    lineItemIds: string[];
}
interface MembershipOptionsNonNullableFields$5 {
    eligibleMemberships: MembershipNonNullableFields$5[];
    invalidMemberships: InvalidMembershipNonNullableFields$5[];
    selectedMemberships: HostSelectedMembershipNonNullableFields$1[];
}
interface AdditionalFeeNonNullableFields$7 {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields$5;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$9;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields$5;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields$5;
    lineItemIds: string[];
}
interface OtherNonNullableFields$3 {
    name: NameInOther$3;
}
interface TargetLineItemNonNullableFields$3 {
    name: NameInLineItem$3;
    suggestedFix: SuggestedFix$3;
}
interface TargetNonNullableFields$3 {
    other?: OtherNonNullableFields$3;
    lineItem?: TargetLineItemNonNullableFields$3;
}
interface ViolationNonNullableFields$3 {
    severity: Severity$3;
    target?: TargetNonNullableFields$3;
}
interface EstimateTotalsResponseNonNullableFields$1 {
    cart?: CartNonNullableFields$1;
    calculatedLineItems: CalculatedLineItemNonNullableFields$3[];
    priceSummary?: PriceSummaryNonNullableFields$9;
    giftCard?: GiftCardNonNullableFields$7;
    taxSummary?: TaxSummaryNonNullableFields$9;
    shippingInfo?: ShippingInformationNonNullableFields$7;
    appliedDiscounts: AppliedDiscountNonNullableFields$9[];
    calculationErrors?: CalculationErrorsNonNullableFields$7;
    weightUnit: WeightUnit$b;
    currency: string;
    payNow?: PriceSummaryNonNullableFields$9;
    payLater?: PriceSummaryNonNullableFields$9;
    membershipOptions?: MembershipOptionsNonNullableFields$5;
    additionalFees: AdditionalFeeNonNullableFields$7[];
    violations: ViolationNonNullableFields$3[];
}

interface Cart {
    /** Cart ID. */
    _id?: string | null;
    /**
     * Line items.
     * @readonly
     */
    lineItems?: LineItem$4[];
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo$6;
    /**
     * Currency used for pricing.
     * @readonly
     */
    currency?: string;
    /**
     * Currency code used for all the converted prices that are returned.
     * For a site that supports multiple currencies, this is the currency the buyer selected.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string | null;
    /**
     * Site language in which original values are displayed.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrices?: boolean | null;
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit$a;
    /**
     * ID of the checkout that originated from this cart.
     * @readonly
     */
    checkoutId?: string | null;
    /**
     * Cart discounts.
     * @readonly
     */
    appliedDiscounts?: CartDiscount[];
    /**
     * Date and time the cart was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the cart was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Contact info. */
    contactInfo?: AddressWithContact$6;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$2;
}
interface LineItem$4 {
    /**
     * Line item ID.
     * @readonly
     */
    _id?: string | null;
    /** Item quantity. */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$e;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName$8;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: string;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice$4;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice$4;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice$4;
    /**
     * Line item description lines. Used for displaying the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine$8[];
    /**
     * Line item image details.
     * @readonly
     */
    image?: string;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo$2;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties$c;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType$a;
    /**
     * Type of selected payment option for current item. Defaults to `"FULL_PAYMENT_ONLINE"`.
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item happens as part of the checkout.
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `"MEMBERSHIP"` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` will be 0.
     * @readonly
     */
    paymentOption?: PaymentOptionType$a;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties$6;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + in most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription$8;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice$4;
    /** Selected membership to be used as payment for this item. Must be used with `lineItem.paymentOption` set to `MEMBERSHIP` or `MEMBERSHIP_OFFLINE`. This field can be empty when `lineItem.paymentOption` is set to `MEMBERSHIP_OFFLINE`. */
    selectedMembership?: SelectedMembership$4;
    /**
     * Tax group ID for this line item.
     * @readonly
     */
    taxGroupId?: string | null;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields$4;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$e {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs.
     *
     * Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from your Wix Stores catalog, learn more about [eCommerce integration](https://www.wix.com/velo/reference/wix-stores-backend/ecommerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ProductName$8 {
    /** **Required** - Original product name (in site's default language). */
    original?: string;
    /** Description product name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface MultiCurrencyPrice$4 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface DescriptionLine$8 extends DescriptionLineValueOneOf$8, DescriptionLineDescriptionLineValueOneOf$8 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$8;
    /** Description line color value. */
    colorInfo?: Color$8;
    /** Description line name. */
    name?: DescriptionLineName$8;
}
/** @oneof */
interface DescriptionLineValueOneOf$8 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$8;
    /** Description line color value. */
    colorInfo?: Color$8;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$8 {
}
interface DescriptionLineName$8 {
    /** Description line name in site's default language. */
    original?: string;
    /** Description line name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface PlainTextValue$8 {
    /** Description line plain text value in site's default language. */
    original?: string;
    /** Description line plain text value translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface Color$8 {
    /** Description line color name in site's default language. */
    original?: string;
    /** Description line color name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
    /**
     * HEX or RGB color code for display.
     *
     */
    code?: string | null;
}
declare enum DescriptionLineType$8 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface ItemAvailabilityInfo$2 {
    /**
     * Item availability status.
     *
     * NOT_FOUND - Item does not exist.
     * NOT_AVAILABLE - Not in stock.
     * PARTIALLY_AVAILABLE - Available quantity is less than requested.
     */
    status?: ItemAvailabilityStatus$2;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus$2 {
    AVAILABLE = "AVAILABLE",
    NOT_FOUND = "NOT_FOUND",
    /** Not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
interface PhysicalProperties$c {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$a extends ItemTypeItemTypeDataOneOf$a {
    /** Preset item type. */
    preset?: ItemTypeItemType$a;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$a {
    /** Preset item type. */
    preset?: ItemTypeItemType$a;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$a {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$a {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
declare enum FileType$4 {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$a {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties$6 {
    /** The date and time for which the service is supposed to be provided. For example, the time of the class. */
    scheduledDate?: Date | null;
    /** The number of people participating in this service. For example, the number of people attending the class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface PriceDescription$8 {
    /**
     * **Required** - Original price description (in site's default language).
     *
     */
    original?: string;
    /** Product name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
/** Selected Membership */
interface SelectedMembership$4 {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
}
interface CatalogOverrideFields$4 {
    /** Item name. */
    productName?: ProductName$8;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine$8[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$c;
    /** Item image. */
    image?: string;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption$4;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface PaymentOption$4 {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType$a;
}
declare enum TaxableAddressType$8 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Buyer Info */
interface BuyerInfo$6 extends BuyerInfoIdOneOf$6 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the cart owner is a Wix user.
     * @readonly
     */
    userId?: string;
    /** Contact ID. For more information, see the Contacts API. */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$6 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the cart owner is a Wix user.
     * @readonly
     */
    userId?: string;
}
declare enum WeightUnit$a {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface CartDiscount extends CartDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon$8;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$8;
}
/** @oneof */
interface CartDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon$8;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$8;
}
interface Coupon$8 {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
}
interface MerchantDiscount$8 {
    /** Discount value. */
    amount?: MultiCurrencyPrice$4;
}
/** Billing Info and shipping details */
interface AddressWithContact$6 {
    /** Address. */
    address?: Address$c;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$8;
}
/** Physical address */
interface Address$c {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$e;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$e {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$8 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$6;
}
interface VatId$6 {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$6;
}
/** tax info types */
declare enum VatType$6 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface SelectedShippingOption$2 {
    /** Carrier ID. */
    carrierId?: string | null;
    /** Selected shipping option code. For example, "usps_std_overnight". */
    code?: string;
}
interface GetCurrentCartRequest {
}
interface GetCurrentCartResponse {
    /** Current session's active cart. */
    cart?: Cart;
}
interface UpdateCartRequest {
    /** Cart info. */
    cartInfo?: Cart;
    /** The code of an existing coupon to apply to the cart. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput$2[];
    /** Catalog line items. */
    lineItems?: LineItem$4[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$6[];
}
interface MerchantDiscountInput$2 {
    /** Discount amount. */
    amount?: string;
    /** IDs of the line items the discount applies to. */
    lineItemIds?: string[];
}
interface CustomLineItem$6 {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$8;
    /** Custom line item description lines. Used for displaying the cart, checkout and order. */
    descriptionLines?: DescriptionLine$8[];
    /**
     * Custom line item media. Supported formats:
     * + Link to an image/video from the [Wix Media Manager](https://support.wix.com/en/article/wix-media-about-the-media-manager) - `"wix:image://v1/3c76e2_c53...4ea4~mv2.jpg#originWidth=1000&originHeight=1000"`.
     * + An image from the web - `"http(s)://<image url>"`.
     */
    media?: string;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    _id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName$8;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: string;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$a;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$c;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$a;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties$6;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$e;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface UpdateCartResponse {
    /** Updated Cart. */
    cart?: Cart;
}
interface AddToCurrentCartRequest {
    /** Catalog line items. */
    lineItems?: LineItem$4[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$6[];
}
interface AddToCartResponse {
    /** Updated cart. */
    cart?: Cart;
}
interface SelectedMemberships$4 {
    /** Selected memberships. */
    memberships?: HostSelectedMembership[];
}
interface HostSelectedMembership {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface EstimateTotalsResponse {
    /** Cart. */
    cart?: Cart;
    /** Calculated line items. */
    calculatedLineItems?: CalculatedLineItem$2[];
    /** Price summary. */
    priceSummary?: PriceSummary$8;
    /** Applied gift card. */
    giftCard?: GiftCard$6;
    /** Tax summary. */
    taxSummary?: TaxSummary$8;
    /** Shipping information. */
    shippingInfo?: ShippingInformation$2;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$8[];
    /** Calculation errors. */
    calculationErrors?: CalculationErrors$6;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$a;
    /** Currency used for pricing in this store. */
    currency?: string;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary$8;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary$8;
    /** Information about valid and invalid memberships, and which ones are selected for usage. */
    membershipOptions?: MembershipOptions$4;
    /** Additional fees */
    additionalFees?: AdditionalFee$6[];
    /**
     * List of validation violations raised by the [Validations Custom Extension SPI](https://www.wix.com/velo/reference/spis/wix-ecom/ecom-validations/introduction).
     * @readonly
     */
    violations?: Violation$2[];
}
interface CalculatedLineItem$2 {
    /** Line item ID. */
    lineItemId?: string;
    /** Price breakdown for this line item. */
    pricesBreakdown?: LineItemPricesData$2;
    /**
     * Type of selected payment option for current item. Defaults to `"FULL_PAYMENT_ONLINE"`.
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item happens as part of the checkout.
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `"MEMBERSHIP"` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` will be 0.
     */
    paymentOption?: PaymentOptionType$a;
}
interface LineItemPricesData$2 {
    /** Total price after discounts and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$4;
    /** Total price after discounts, and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$4;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$8;
    /** Total discount for all line items. */
    totalDiscount?: MultiCurrencyPrice$4;
    /** Catalog price after catalog discount and automatic discounts. */
    price?: MultiCurrencyPrice$4;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: MultiCurrencyPrice$4;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: MultiCurrencyPrice$4;
    /** Item price **before** line item discounts and **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: MultiCurrencyPrice$4;
}
interface ItemTaxFullDetails$8 {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice$4;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice$4;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown$4[];
}
interface TaxRateBreakdown$4 {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice$4;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$8 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface PriceSummary$8 {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice$4;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice$4;
    /** Total tax. */
    tax?: MultiCurrencyPrice$4;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice$4;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice$4;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice$4;
}
interface GiftCard$6 {
    /**
     * Gift Card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice$4;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface TaxSummary$8 {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice$4;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice$4;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails$4;
}
interface TaxCalculationDetails$4 extends TaxCalculationDetailsCalculationDetailsOneOf$4 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$4;
    /** Error details and reason for tax rate fallback. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$4;
    /**
     * Rate calculation type. Supported values:
     * + `"AUTO_RATE"`
     * + `"FALLBACK_RATE"`
     * + `"MANUAL_RATE"`
     * + `"NO_TAX_COLLECTED"`
     */
    rateType?: RateType$4;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf$4 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$4;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$4;
}
declare enum RateType$4 {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason$4 {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails$4 {
    /**
     * Reason for fallback. Supported values:
     * + `"AUTO_TAX_FAILED"`
     * + `"AUTO_TAX_DEACTIVATED"`
     */
    fallbackReason?: FallbackReason$4;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError$i;
}
declare enum FallbackReason$4 {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
interface ApplicationError$i {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface ShippingInformation$2 {
    /** Shipping region. */
    region?: ShippingRegion$8;
    /** Selected shipping option. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption$4;
    /** All shipping options. */
    carrierServiceOptions?: CarrierServiceOption$4[];
}
interface ShippingRegion$8 {
    /**
     * Shipping region ID.
     * @readonly
     */
    _id?: string;
    /** Shipping region name. */
    name?: string;
}
interface SelectedCarrierServiceOption$4 {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics$a;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices$4;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge$4[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface DeliveryLogistics$a {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails$a;
}
interface PickupDetails$a {
    /** Pickup address. */
    address?: Address$c;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod$a;
}
declare enum PickupMethod$a {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface SelectedCarrierServiceOptionPrices$4 {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$4;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$4;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$8;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice$4;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice$4;
}
interface SelectedCarrierServiceOptionOtherCharge$4 {
    /** Type of additional cost. */
    type?: ChargeType$8;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices$4;
}
declare enum ChargeType$8 {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface CarrierServiceOption$4 {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption$8[];
}
interface ShippingOption$8 {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics$a;
    /** Sipping price information. */
    cost?: ShippingPrice$8;
}
interface ShippingPrice$8 {
    /** Shipping price. */
    price?: MultiCurrencyPrice$4;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge$4[];
}
interface OtherCharge$4 {
    /** Type of additional cost. */
    type?: ChargeType$8;
    /** Price of added cost. */
    price?: MultiCurrencyPrice$4;
}
interface AppliedDiscount$8 extends AppliedDiscountDiscountSourceOneOf$8 {
    /** Coupon details. */
    coupon?: V1Coupon;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule$8;
    /** Discount type. */
    discountType?: DiscountType$8;
    /**
     * IDs of the line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$8 {
    /** Coupon details. */
    coupon?: V1Coupon;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule$8;
}
declare enum DiscountType$8 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface V1Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice$4;
    /** Coupon name. */
    name?: string;
}
interface V1MerchantDiscount {
    /** Discount value. */
    amount?: MultiCurrencyPrice$4;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule$8 {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$8;
    /** Discount value. */
    amount?: MultiCurrencyPrice$4;
}
interface DiscountRuleName$8 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Discount rule name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface CalculationErrors$6 extends CalculationErrorsShippingCalculationErrorOneOf$6 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$8;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$6;
    /** Tax calculation error. */
    taxCalculationError?: Details$8;
    /** Coupon calculation error. */
    couponCalculationError?: Details$8;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details$8;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$i[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details$8;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details$8;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$6 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$8;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$6;
}
interface Details$8 extends DetailsKindOneOf$8 {
    applicationError?: ApplicationError$i;
    validationError?: ValidationError$8;
    systemError?: SystemError$8;
    /**
     * Deprecated in APIs. Used to enable migration from rendering arbitrary tracing to rest response.
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$8 {
    applicationError?: ApplicationError$i;
    validationError?: ValidationError$8;
    systemError?: SystemError$8;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$8 {
    fieldViolations?: FieldViolation$8[];
}
declare enum RuleType$8 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$8 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$8;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$8 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$6 {
    /** Carrier errors. */
    errors?: CarrierError$6[];
}
interface CarrierError$6 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$8;
}
interface MembershipOptions$4 {
    /** List of payment options that can be used. */
    eligibleMemberships?: Membership$4[];
    /** List of payment options that are owned by the member, but cannot be used due to reason provided. */
    invalidMemberships?: InvalidMembership$4[];
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: HostSelectedMembership[];
}
interface Membership$4 {
    /** Membership ID. */
    _id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName$4;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits$4;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName$4 {
    /** Membership name. */
    original?: string;
    /** Membership name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
interface MembershipPaymentCredits$4 {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership$4 {
    /** Membership details. */
    membership?: Membership$4;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface AdditionalFee$6 {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice$4;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$8;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice$4;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice$4;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface Violation$2 {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity$2;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target$2;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity$2 {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target$2 extends TargetTargetTypeOneOf$2 {
    /** General (other) violation. */
    other?: Other$2;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$2;
}
/** @oneof */
interface TargetTargetTypeOneOf$2 {
    /** General (other) violation. */
    other?: Other$2;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$2;
}
/** Available locations on the webpage */
declare enum NameInOther$2 {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem$2 {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix$2 {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other$2 {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther$2;
}
/** Specific line item violation. */
interface TargetLineItem$2 {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem$2;
    /** ID of the line item containing the violation. */
    _id?: string | null;
}
interface RemoveLineItemsFromCurrentCartRequest {
    /** IDs of the line items to remove from the cart. */
    lineItemIds: string[];
}
interface RemoveLineItemsResponse$2 {
    /** Updated cart. */
    cart?: Cart;
}
interface CreateCheckoutFromCurrentCartRequest {
    /** **Required**. Sales channel type. */
    channelType?: ChannelType$6;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$c;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$c;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$2;
    /** Mandatory when setting a billing or shipping address if the site visitor isn't logged in. */
    email?: string | null;
}
declare enum ChannelType$6 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CreateCheckoutResponse$2 {
    /** The newly created checkout's ID. */
    checkoutId?: string;
}
interface RemoveCouponFromCurrentCartRequest {
}
interface RemoveCouponResponse$2 {
    /** Updated cart. */
    cart?: Cart;
}
interface UpdateCurrentCartLineItemQuantityRequest {
    /** Line item IDs and their new quantity. */
    lineItems: LineItemQuantityUpdate$2[];
}
interface LineItemQuantityUpdate$2 {
    /** Line item ID. Required. */
    _id?: string;
    /** New quantity. Number must be 1 or higher. Required. */
    quantity?: number;
}
interface UpdateLineItemsQuantityResponse$2 {
    /** Updated cart. */
    cart?: Cart;
}
interface EstimateCurrentCartTotalsRequest {
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$2;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address$c;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$c;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships$4;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
interface DeleteCurrentCartRequest {
}
interface DeleteCartResponse {
}
interface CatalogReferenceNonNullableFields$8 {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields$8 {
    original: string;
}
interface MultiCurrencyPriceNonNullableFields$4 {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface PlainTextValueNonNullableFields$8 {
    original: string;
}
interface ColorNonNullableFields$8 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$8 {
    original: string;
}
interface DescriptionLineNonNullableFields$8 {
    plainText?: PlainTextValueNonNullableFields$8;
    colorInfo?: ColorNonNullableFields$8;
    plainTextValue?: PlainTextValueNonNullableFields$8;
    color: string;
    name?: DescriptionLineNameNonNullableFields$8;
    lineType: DescriptionLineType$8;
}
interface ItemAvailabilityInfoNonNullableFields$2 {
    status: ItemAvailabilityStatus$2;
}
interface PhysicalPropertiesNonNullableFields$8 {
    shippable: boolean;
}
interface GroupNonNullableFields$2 {
    name: string;
}
interface ScopeNonNullableFields$2 {
    namespace: string;
    group?: GroupNonNullableFields$2;
}
interface ItemTypeNonNullableFields$8 {
    preset: ItemTypeItemType$a;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields$4 {
    frequency: SubscriptionFrequency$a;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields$8 {
    frequency: SubscriptionFrequency$a;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields$4;
}
interface TitleNonNullableFields$4 {
    original: string;
}
interface DescriptionNonNullableFields$4 {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields$4 {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$8;
    title?: TitleNonNullableFields$4;
    description?: DescriptionNonNullableFields$4;
}
interface SecuredMediaNonNullableFields$4 {
    _id: string;
    fileName: string;
    fileType: FileType$4;
}
interface PriceDescriptionNonNullableFields$8 {
    original: string;
}
interface SelectedMembershipNonNullableFields$4 {
    _id: string;
    appId: string;
}
interface PaymentOptionNonNullableFields$4 {
    value: PaymentOptionType$a;
}
interface CatalogOverrideFieldsNonNullableFields$4 {
    productName?: ProductNameNonNullableFields$8;
    descriptionLines: DescriptionLineNonNullableFields$8[];
    physicalProperties?: PhysicalPropertiesNonNullableFields$8;
    image: string;
    paymentOption?: PaymentOptionNonNullableFields$4;
}
interface TaxableAddressNonNullableFields$8 {
    addressType: TaxableAddressType$8;
}
interface PolicyNonNullableFields$4 {
    title: string;
    content: string;
}
interface LineItemNonNullableFields$2 {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields$8;
    productName?: ProductNameNonNullableFields$8;
    url: string;
    price?: MultiCurrencyPriceNonNullableFields$4;
    fullPrice?: MultiCurrencyPriceNonNullableFields$4;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$4;
    descriptionLines: DescriptionLineNonNullableFields$8[];
    image: string;
    availability?: ItemAvailabilityInfoNonNullableFields$2;
    physicalProperties?: PhysicalPropertiesNonNullableFields$8;
    couponScopes: ScopeNonNullableFields$2[];
    itemType?: ItemTypeNonNullableFields$8;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields$4;
    digitalFile?: SecuredMediaNonNullableFields$4;
    paymentOption: PaymentOptionType$a;
    priceDescription?: PriceDescriptionNonNullableFields$8;
    depositAmount?: MultiCurrencyPriceNonNullableFields$4;
    selectedMembership?: SelectedMembershipNonNullableFields$4;
    customLineItem: boolean;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields$4;
    savePaymentMethod: boolean;
    taxableAddress?: TaxableAddressNonNullableFields$8;
    policies: PolicyNonNullableFields$4[];
}
interface BuyerInfoNonNullableFields$6 {
    visitorId: string;
    memberId: string;
    userId: string;
}
interface CouponNonNullableFields$8 {
    _id: string;
    code: string;
}
interface MerchantDiscountNonNullableFields$8 {
    amount?: MultiCurrencyPriceNonNullableFields$4;
}
interface CartDiscountNonNullableFields {
    coupon?: CouponNonNullableFields$8;
    merchantDiscount?: MerchantDiscountNonNullableFields$8;
}
interface StreetAddressNonNullableFields$e {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$c {
    streetAddress?: StreetAddressNonNullableFields$e;
}
interface VatIdNonNullableFields$4 {
    _id: string;
    type: VatType$6;
}
interface FullAddressContactDetailsNonNullableFields$6 {
    vatId?: VatIdNonNullableFields$4;
}
interface AddressWithContactNonNullableFields$6 {
    address?: AddressNonNullableFields$c;
    contactDetails?: FullAddressContactDetailsNonNullableFields$6;
}
interface SelectedShippingOptionNonNullableFields {
    code: string;
}
interface CartNonNullableFields {
    lineItems: LineItemNonNullableFields$2[];
    buyerInfo?: BuyerInfoNonNullableFields$6;
    currency: string;
    conversionCurrency: string;
    weightUnit: WeightUnit$a;
    subtotal?: MultiCurrencyPriceNonNullableFields$4;
    appliedDiscounts: CartDiscountNonNullableFields[];
    contactInfo?: AddressWithContactNonNullableFields$6;
    selectedShippingOption?: SelectedShippingOptionNonNullableFields;
}
interface GetCurrentCartResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
interface UpdateCartResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
interface AddToCartResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
interface RemoveLineItemsResponseNonNullableFields$2 {
    cart?: CartNonNullableFields;
}
interface CreateCheckoutResponseNonNullableFields$2 {
    checkoutId: string;
}
interface RemoveCouponResponseNonNullableFields$2 {
    cart?: CartNonNullableFields;
}
interface UpdateLineItemsQuantityResponseNonNullableFields$2 {
    cart?: CartNonNullableFields;
}
interface TaxRateBreakdownNonNullableFields$4 {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields$4;
    exemptAmount?: MultiCurrencyPriceNonNullableFields$4;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields$4;
}
interface TaxBreakdownNonNullableFields$4 {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields$4;
    taxAmount?: MultiCurrencyPriceNonNullableFields$4;
    taxableAmount?: MultiCurrencyPriceNonNullableFields$4;
    jurisdictionType: JurisdictionType$8;
}
interface ItemTaxFullDetailsNonNullableFields$8 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$4;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields$4;
    rateBreakdown: TaxRateBreakdownNonNullableFields$4[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields$4;
    taxBreakdown: TaxBreakdownNonNullableFields$4[];
}
interface LineItemPricesDataNonNullableFields$2 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$4;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$4;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$8;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$4;
    price?: MultiCurrencyPriceNonNullableFields$4;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$4;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields$4;
    fullPrice?: MultiCurrencyPriceNonNullableFields$4;
}
interface CalculatedLineItemNonNullableFields$2 {
    lineItemId: string;
    pricesBreakdown?: LineItemPricesDataNonNullableFields$2;
    paymentOption: PaymentOptionType$a;
    taxableAddress?: TaxableAddressNonNullableFields$8;
}
interface PriceSummaryNonNullableFields$8 {
    subtotal?: MultiCurrencyPriceNonNullableFields$4;
    shipping?: MultiCurrencyPriceNonNullableFields$4;
    tax?: MultiCurrencyPriceNonNullableFields$4;
    discount?: MultiCurrencyPriceNonNullableFields$4;
    total?: MultiCurrencyPriceNonNullableFields$4;
    additionalFees?: MultiCurrencyPriceNonNullableFields$4;
}
interface GiftCardNonNullableFields$6 {
    _id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields$4;
    appId: string;
}
interface ApplicationErrorNonNullableFields$i {
    code: string;
    description: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields$4 {
    fallbackReason: FallbackReason$4;
    error?: ApplicationErrorNonNullableFields$i;
}
interface TaxCalculationDetailsNonNullableFields$4 {
    manualRateReason: ManualCalculationReason$4;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields$4;
    rateType: RateType$4;
}
interface AggregatedTaxBreakdownNonNullableFields$4 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType$8;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields$4;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields$4;
}
interface TaxSummaryNonNullableFields$8 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$4;
    totalTax?: MultiCurrencyPriceNonNullableFields$4;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields$4;
    totalExempt?: MultiCurrencyPriceNonNullableFields$4;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields$4[];
}
interface ShippingRegionNonNullableFields$4 {
    _id: string;
    name: string;
}
interface PickupDetailsNonNullableFields$a {
    address?: AddressNonNullableFields$c;
    businessLocation: boolean;
    pickupMethod: PickupMethod$a;
}
interface DeliveryLogisticsNonNullableFields$a {
    pickupDetails?: PickupDetailsNonNullableFields$a;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields$4 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$4;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$4;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$8;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$4;
    price?: MultiCurrencyPriceNonNullableFields$4;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields$4 {
    type: ChargeType$8;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$4;
}
interface SelectedCarrierServiceOptionNonNullableFields$4 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$a;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$4;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields$4[];
}
interface OtherChargeNonNullableFields$4 {
    type: ChargeType$8;
    price?: MultiCurrencyPriceNonNullableFields$4;
}
interface ShippingPriceNonNullableFields$8 {
    price?: MultiCurrencyPriceNonNullableFields$4;
    otherCharges: OtherChargeNonNullableFields$4[];
}
interface ShippingOptionNonNullableFields$8 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$a;
    cost?: ShippingPriceNonNullableFields$8;
}
interface CarrierServiceOptionNonNullableFields$4 {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields$8[];
}
interface ShippingInformationNonNullableFields$6 {
    region?: ShippingRegionNonNullableFields$4;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields$4;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields$4[];
}
interface V1CouponNonNullableFields {
    _id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields$4;
    name: string;
    couponType: string;
}
interface V1MerchantDiscountNonNullableFields {
    amount?: MultiCurrencyPriceNonNullableFields$4;
}
interface DiscountRuleNameNonNullableFields$8 {
    original: string;
}
interface DiscountRuleNonNullableFields$8 {
    _id: string;
    name?: DiscountRuleNameNonNullableFields$8;
    amount?: MultiCurrencyPriceNonNullableFields$4;
}
interface LineItemDiscountNonNullableFields$8 {
    _id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields$4;
}
interface AppliedDiscountNonNullableFields$8 {
    coupon?: V1CouponNonNullableFields;
    merchantDiscount?: V1MerchantDiscountNonNullableFields;
    discountRule?: DiscountRuleNonNullableFields$8;
    discountType: DiscountType$8;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$8[];
}
interface FieldViolationNonNullableFields$8 {
    field: string;
    description: string;
    violatedRule: RuleType$8;
}
interface ValidationErrorNonNullableFields$8 {
    fieldViolations: FieldViolationNonNullableFields$8[];
}
interface DetailsNonNullableFields$8 {
    applicationError?: ApplicationErrorNonNullableFields$i;
    validationError?: ValidationErrorNonNullableFields$8;
}
interface CarrierErrorNonNullableFields$6 {
    carrierId: string;
    error?: DetailsNonNullableFields$8;
}
interface CarrierErrorsNonNullableFields$6 {
    errors: CarrierErrorNonNullableFields$6[];
}
interface CalculationErrorsNonNullableFields$6 {
    generalShippingCalculationError?: DetailsNonNullableFields$8;
    carrierErrors?: CarrierErrorsNonNullableFields$6;
    taxCalculationError?: DetailsNonNullableFields$8;
    couponCalculationError?: DetailsNonNullableFields$8;
    giftCardCalculationError?: DetailsNonNullableFields$8;
    orderValidationErrors: ApplicationErrorNonNullableFields$i[];
    membershipError?: DetailsNonNullableFields$8;
    discountsCalculationError?: DetailsNonNullableFields$8;
}
interface MembershipNameNonNullableFields$8 {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields$4 {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields$4 {
    _id: string;
    appId: string;
    name?: MembershipNameNonNullableFields$8;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields$4;
}
interface InvalidMembershipNonNullableFields$4 {
    membership?: MembershipNonNullableFields$4;
    reason: string;
}
interface HostSelectedMembershipNonNullableFields {
    _id: string;
    appId: string;
    lineItemIds: string[];
}
interface MembershipOptionsNonNullableFields$4 {
    eligibleMemberships: MembershipNonNullableFields$4[];
    invalidMemberships: InvalidMembershipNonNullableFields$4[];
    selectedMemberships: HostSelectedMembershipNonNullableFields[];
}
interface AdditionalFeeNonNullableFields$6 {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields$4;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$8;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields$4;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields$4;
    lineItemIds: string[];
}
interface OtherNonNullableFields$2 {
    name: NameInOther$2;
}
interface TargetLineItemNonNullableFields$2 {
    name: NameInLineItem$2;
    suggestedFix: SuggestedFix$2;
}
interface TargetNonNullableFields$2 {
    other?: OtherNonNullableFields$2;
    lineItem?: TargetLineItemNonNullableFields$2;
}
interface ViolationNonNullableFields$2 {
    severity: Severity$2;
    target?: TargetNonNullableFields$2;
}
interface EstimateTotalsResponseNonNullableFields {
    cart?: CartNonNullableFields;
    calculatedLineItems: CalculatedLineItemNonNullableFields$2[];
    priceSummary?: PriceSummaryNonNullableFields$8;
    giftCard?: GiftCardNonNullableFields$6;
    taxSummary?: TaxSummaryNonNullableFields$8;
    shippingInfo?: ShippingInformationNonNullableFields$6;
    appliedDiscounts: AppliedDiscountNonNullableFields$8[];
    calculationErrors?: CalculationErrorsNonNullableFields$6;
    weightUnit: WeightUnit$a;
    currency: string;
    payNow?: PriceSummaryNonNullableFields$8;
    payLater?: PriceSummaryNonNullableFields$8;
    membershipOptions?: MembershipOptionsNonNullableFields$4;
    additionalFees: AdditionalFeeNonNullableFields$6[];
    violations: ViolationNonNullableFields$2[];
}

type __PublicMethodMetaInfo$l<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getCurrentCart(): __PublicMethodMetaInfo$l<'GET', {}, GetCurrentCartRequest, GetCurrentCartRequest$1, GetCurrentCartResponse & GetCurrentCartResponseNonNullableFields, GetCurrentCartResponse$1 & GetCurrentCartResponseNonNullableFields$1>;
declare function updateCurrentCart(): __PublicMethodMetaInfo$l<'PATCH', {}, UpdateCartRequest, UpdateCartRequest$1, UpdateCartResponse & UpdateCartResponseNonNullableFields, UpdateCartResponse$1 & UpdateCartResponseNonNullableFields$1>;
declare function addToCurrentCart(): __PublicMethodMetaInfo$l<'POST', {}, AddToCurrentCartRequest, AddToCurrentCartRequest$1, AddToCartResponse & AddToCartResponseNonNullableFields, AddToCartResponse$1 & AddToCartResponseNonNullableFields$1>;
declare function removeLineItemsFromCurrentCart(): __PublicMethodMetaInfo$l<'POST', {}, RemoveLineItemsFromCurrentCartRequest, RemoveLineItemsFromCurrentCartRequest$1, RemoveLineItemsResponse$2 & RemoveLineItemsResponseNonNullableFields$2, RemoveLineItemsResponse$3 & RemoveLineItemsResponseNonNullableFields$3>;
declare function createCheckoutFromCurrentCart(): __PublicMethodMetaInfo$l<'POST', {}, CreateCheckoutFromCurrentCartRequest, CreateCheckoutFromCurrentCartRequest$1, CreateCheckoutResponse$2 & CreateCheckoutResponseNonNullableFields$2, CreateCheckoutResponse$3 & CreateCheckoutResponseNonNullableFields$3>;
declare function removeCouponFromCurrentCart(): __PublicMethodMetaInfo$l<'POST', {}, RemoveCouponFromCurrentCartRequest, RemoveCouponFromCurrentCartRequest$1, RemoveCouponResponse$2 & RemoveCouponResponseNonNullableFields$2, RemoveCouponResponse$3 & RemoveCouponResponseNonNullableFields$3>;
declare function updateCurrentCartLineItemQuantity(): __PublicMethodMetaInfo$l<'POST', {}, UpdateCurrentCartLineItemQuantityRequest, UpdateCurrentCartLineItemQuantityRequest$1, UpdateLineItemsQuantityResponse$2 & UpdateLineItemsQuantityResponseNonNullableFields$2, UpdateLineItemsQuantityResponse$3 & UpdateLineItemsQuantityResponseNonNullableFields$3>;
declare function estimateCurrentCartTotals(): __PublicMethodMetaInfo$l<'POST', {}, EstimateCurrentCartTotalsRequest, EstimateCurrentCartTotalsRequest$1, EstimateTotalsResponse & EstimateTotalsResponseNonNullableFields, EstimateTotalsResponse$1 & EstimateTotalsResponseNonNullableFields$1>;
declare function deleteCurrentCart(): __PublicMethodMetaInfo$l<'DELETE', {}, DeleteCurrentCartRequest, DeleteCurrentCartRequest$1, DeleteCartResponse, DeleteCartResponse$1>;

declare const meta$l_addToCurrentCart: typeof addToCurrentCart;
declare const meta$l_createCheckoutFromCurrentCart: typeof createCheckoutFromCurrentCart;
declare const meta$l_deleteCurrentCart: typeof deleteCurrentCart;
declare const meta$l_estimateCurrentCartTotals: typeof estimateCurrentCartTotals;
declare const meta$l_getCurrentCart: typeof getCurrentCart;
declare const meta$l_removeCouponFromCurrentCart: typeof removeCouponFromCurrentCart;
declare const meta$l_removeLineItemsFromCurrentCart: typeof removeLineItemsFromCurrentCart;
declare const meta$l_updateCurrentCart: typeof updateCurrentCart;
declare const meta$l_updateCurrentCartLineItemQuantity: typeof updateCurrentCartLineItemQuantity;
declare namespace meta$l {
  export { type __PublicMethodMetaInfo$l as __PublicMethodMetaInfo, meta$l_addToCurrentCart as addToCurrentCart, meta$l_createCheckoutFromCurrentCart as createCheckoutFromCurrentCart, meta$l_deleteCurrentCart as deleteCurrentCart, meta$l_estimateCurrentCartTotals as estimateCurrentCartTotals, meta$l_getCurrentCart as getCurrentCart, meta$l_removeCouponFromCurrentCart as removeCouponFromCurrentCart, meta$l_removeLineItemsFromCurrentCart as removeLineItemsFromCurrentCart, meta$l_updateCurrentCart as updateCurrentCart, meta$l_updateCurrentCartLineItemQuantity as updateCurrentCartLineItemQuantity };
}

interface Checkout$1 {
    /**
     * Checkout ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Line items.
     *
     * Max: 300 items
     * @readonly
     */
    lineItems?: LineItem$3[];
    /** Billing information. */
    billingInfo?: AddressWithContact$5;
    /** Shipping information. */
    shippingInfo?: ShippingInfo$1;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo$5;
    /**
     * All converted prices are displayed in this currency in three-letter [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Calculated price summary for the checkout.
     * @readonly
     */
    priceSummary?: PriceSummary$7;
    /**
     * Errors when calculating totals.
     * @readonly
     */
    calculationErrors?: CalculationErrors$5;
    /**
     * Applied gift card details.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     * @readonly
     */
    giftCard?: GiftCard$5;
    /**
     * Applied discounts.
     * @readonly
     */
    appliedDiscounts?: AppliedDiscount$7[];
    /** Custom fields. */
    customFields?: CustomField$5[];
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit$9;
    /**
     * Tax summary.
     * @readonly
     */
    taxSummary?: TaxSummary$7;
    /**
     * The currency used when submitting the order.
     * @readonly
     */
    currency?: string;
    /**
     * Sales channel that submitted the order.
     * + `"UNSPECIFIED"`: Unspecified sales channel. This value is not supported.
     * + `"WEB"`: A web client.
     * + `"POS"`: [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395)
     * + `"EBAY"`: [eBay](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop)
     * + `"AMAZON"`: [Amazon](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop)
     * + `"WISH"`: [Wish](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-a-wish-shop)
     * + `"WIX_INVOICES"`: Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings)
     * + `"WIX_APP_STORE"`: [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview)
     * + `"BACKOFFICE_MERCHANT"`: Wix merchant backoffice
     * + `"OTHER_PLATFORM"`: Other sales platform.
     * @readonly
     */
    channelType?: ChannelType$5;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string;
    /**
     * Whether an order was successfully created from this checkout.
     * For an order to be successful, it must be successfully paid for (unless the total is 0).
     * @readonly
     */
    completed?: boolean;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrice?: boolean;
    /**
     * ID of the checkout's initiator.
     * @readonly
     */
    createdBy?: CreatedBy$5;
    /**
     * Date and time the checkout was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the checkout was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary$7;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary$7;
    /** Memberships to apply when creating the order. */
    membershipOptions?: MembershipOptions$3;
    /** Additional Fees. */
    additionalFees?: AdditionalFee$5[];
    /** Cart ID that this checkout was created from. Empty if this checkout wasn't created from a cart. */
    cartId?: string | null;
    /**
     * List of validation violations raised by the [Validations service plugin](https://dev.wix.com/api/rest/wix-ecommerce/validations-integration-spi/introduction).
     * @readonly
     */
    violations?: Violation$1[];
    /**
     * Custom field data for the checkout object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$f;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /**
     * Additional settings for customization of the checkout process.
     *
     * > **Notes:**
     * > * Custom settings can only be set when [creating a checkout](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/checkout/create-checkout).
     * > * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions". Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customSettings?: CustomSettings$1;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference$3;
}
interface LineItem$3 {
    /**
     * Line item ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Item quantity.
     *
     * Min: `"1"`
     * Max: `"100000"`
     */
    quantity?: number;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$d;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName$7;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: PageUrlV2$2;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice$3;
    /**
     * Total line item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    lineItemPrice?: MultiCurrencyPrice$3;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice$3;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice$3;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: MultiCurrencyPrice$3;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: MultiCurrencyPrice$3;
    /**
     * Tax details for this line item.
     * @readonly
     */
    taxDetails?: ItemTaxFullDetails$7;
    /**
     * Discount for this line item's entire quantity.
     * @readonly
     */
    discount?: MultiCurrencyPrice$3;
    /**
     * Line item description lines. Used for display purposes for the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine$7[];
    /**
     * Line item image details.
     * @readonly
     */
    media?: CommonImage;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo$1;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties$b;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType$9;
    /**
     * Subscription option information.
     * @readonly
     */
    subscriptionOptionInfo?: SubscriptionOptionInfo$1;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is defined by `lineItem.deposit`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be performed by using a membership and must be manually redeemed in the dashboard by the site owner. When this option is used, `lineItem.price.amount` is `0`.
     * @readonly
     */
    paymentOption?: PaymentOptionType$9;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties$5;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field has the same value as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription$7;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice$3;
    /**
     * Whether the line item is a custom line item. Custom line items don't trigger the Catalog service plugin.
     * @readonly
     */
    customLineItem?: boolean;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields$3;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$d {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ProductName$7 {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PageUrlV2$2 {
    /** The relative path for the page within the site. For example, `/product-page/a-product`. */
    relativePath?: string;
    /** The page's full URL. For example, `https://mysite.com/product-page/a-product`. */
    url?: string | null;
}
interface MultiCurrencyPrice$3 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface ItemTaxFullDetails$7 {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice$3;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice$3;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown$3[];
}
interface TaxRateBreakdown$3 {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice$3;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$7 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DescriptionLine$7 extends DescriptionLineValueOneOf$7, DescriptionLineDescriptionLineValueOneOf$7 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$7;
    /** Description line color value. */
    colorInfo?: Color$7;
    /** Description line name. */
    name?: DescriptionLineName$7;
}
/** @oneof */
interface DescriptionLineValueOneOf$7 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$7;
    /** Description line color value. */
    colorInfo?: Color$7;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$7 {
}
interface DescriptionLineName$7 {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$7 {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$7 {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$7 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface CommonImage {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface ItemAvailabilityInfo$1 {
    /**
     * Item availability status.
     * + `"NOT_FOUND"`: Item does not exist
     * + `"NOT_AVAILABLE"`: Item not in stock
     * + `"PARTIALLY_AVAILABLE"`: Available quantity is less than requested
     */
    status?: ItemAvailabilityStatus$1;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus$1 {
    AVAILABLE = "AVAILABLE",
    NOT_FOUND = "NOT_FOUND",
    /** Not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
interface PhysicalProperties$b {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$9 extends ItemTypeItemTypeDataOneOf$9 {
    /** Preset item type. */
    preset?: ItemTypeItemType$9;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$9 {
    /** Preset item type. */
    preset?: ItemTypeItemType$9;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$9 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
interface SubscriptionOptionInfo$1 {
    /** Subscription option settings. */
    subscriptionSettings?: SubscriptionSettings$7;
    /** Subscription option title. */
    title?: Title$1;
    /** Subscription option description. */
    description?: Description$1;
}
interface SubscriptionSettings$7 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$9;
    /**
     * Interval of recurring payment.
     *
     * Default: `1`.
     * If SubscriptionFrequency is Day the minimum interval is 7
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal` is `true`. */
    billingCycles?: number | null;
    /**
     * Period until first cycle starts. If applied payNow will be 0
     * If None => no free trial
     */
    freeTrialPeriod?: FreeTrialPeriod$1;
    /** The date the subscription will start. The subscription will be charged either now or according to freeTrialDays. */
    startDate?: Date | null;
    /**
     * Whether to generate an order each billing cycle. An order will always be generated for the first billing cycle.
     * Default None => will behave like true
     */
    generateOrderEachBillingCycle?: boolean | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$9 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface FreeTrialPeriod$1 {
    /** Frequency of priod. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequency$9;
    /** interval of period */
    interval?: number;
}
interface Title$1 {
    /** Subscription option name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Subscription option name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Description$1 {
    /** Subscription option description. */
    original?: string;
    /** Translated subscription option description. */
    translated?: string | null;
}
declare enum FileType$3 {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$9 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties$5 {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface PriceDescription$7 {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface CatalogOverrideFields$3 {
    /** Item name. */
    productName?: ProductName$7;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine$7[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$b;
    /** Item image. */
    image?: Image$4;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption$3;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface Image$4 {
    /** WixMedia image ID. */
    id?: string;
    /** Original image height. */
    height?: number;
    /** Original image width. */
    width?: number;
    /** Image alt text. Optional. */
    altText?: string | null;
    /** Image filename. Optional. */
    filename?: string | null;
}
interface PaymentOption$3 {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType$9;
}
declare enum TaxableAddressType$7 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
interface ExtendedFields$f {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
/** Billing Info and shipping details */
interface AddressWithContact$5 {
    /** Address. */
    address?: ApiAddress$1;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$7;
}
/** Physical address */
interface ApiAddress$1 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$d;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress$d {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$7 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: CommonVatId$1;
}
interface CommonVatId$1 {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: CommonVatType$1;
}
/** tax info types */
declare enum CommonVatType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface ShippingInfo$1 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$5;
    /** Selected option out of the options allowed for the `region`. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption$3;
    /**
     * Shipping region. Based on the address provided.
     * @readonly
     */
    region?: ShippingRegion$7;
    /**
     * All carrier options for this shipping rule.
     * @readonly
     */
    carrierServiceOptions?: CarrierServiceOption$3[];
}
interface SelectedCarrierServiceOption$3 {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics$9;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices$3;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge$3[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface DeliveryLogistics$9 {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails$9;
}
interface PickupDetails$9 {
    /** Pickup address. */
    address?: ApiAddress$1;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod$9;
}
declare enum PickupMethod$9 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface SelectedCarrierServiceOptionPrices$3 {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$3;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$3;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$7;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice$3;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice$3;
}
interface SelectedCarrierServiceOptionOtherCharge$3 {
    /** Type of additional cost. */
    type?: ChargeType$7;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices$3;
}
declare enum ChargeType$7 {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface ShippingRegion$7 {
    /**
     * Shipping region ID.
     * @readonly
     */
    id?: string;
    /** Shipping region name. */
    name?: string;
}
interface CarrierServiceOption$3 {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption$7[];
}
interface ShippingOption$7 {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics$9;
    /** Sipping price information. */
    cost?: ShippingPrice$7;
}
interface ShippingPrice$7 {
    /** Shipping price. */
    price?: MultiCurrencyPrice$3;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge$3[];
}
interface OtherCharge$3 {
    /** Type of additional cost. */
    type?: ChargeType$7;
    /** Price of added cost. */
    price?: MultiCurrencyPrice$3;
}
interface BuyerInfo$5 extends BuyerInfoIdOneOf$5 {
    /**
     * Visitor ID (if site visitor is **not** a member).
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID (if site visitor is a site member).
     * @readonly
     */
    memberId?: string;
    /**
     * Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction).
     * @readonly
     */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$5 {
    /**
     * Visitor ID (if site visitor is **not** a member).
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID (if site visitor is a site member).
     * @readonly
     */
    memberId?: string;
}
interface PriceSummary$7 {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice$3;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice$3;
    /** Total tax. */
    tax?: MultiCurrencyPrice$3;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice$3;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice$3;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice$3;
}
interface CalculationErrors$5 extends CalculationErrorsShippingCalculationErrorOneOf$5 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$7;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$5;
    /** Tax calculation error. */
    taxCalculationError?: Details$7;
    /** Coupon calculation error. */
    couponCalculationError?: Details$7;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details$7;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$h[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details$7;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details$7;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$5 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$7;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$5;
}
interface Details$7 extends DetailsKindOneOf$7 {
    applicationError?: ApplicationError$h;
    validationError?: ValidationError$7;
    systemError?: SystemError$7;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$7 {
    applicationError?: ApplicationError$h;
    validationError?: ValidationError$7;
    systemError?: SystemError$7;
}
interface ApplicationError$h {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$7 {
    fieldViolations?: FieldViolation$7[];
}
declare enum RuleType$7 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$7 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$7;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$7 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$5 {
    /** Carrier errors. */
    errors?: CarrierError$5[];
}
interface CarrierError$5 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$7;
}
interface GiftCard$5 {
    /**
     * Gift Card ID.
     * @deprecated
     */
    id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice$3;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface AppliedDiscount$7 extends AppliedDiscountDiscountSourceOneOf$7 {
    /** Coupon details. */
    coupon?: Coupon$7;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$7;
    /** Discount rule */
    discountRule?: DiscountRule$7;
    /** Discount type. */
    discountType?: DiscountType$7;
    /**
     * IDs of line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$7 {
    /** Coupon details. */
    coupon?: Coupon$7;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$7;
    /** Discount rule */
    discountRule?: DiscountRule$7;
}
declare enum DiscountType$7 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$7 {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice$3;
    /** Coupon name. */
    name?: string;
}
interface MerchantDiscount$7 {
    /** Discount value. */
    amount?: MultiCurrencyPrice$3;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule$7 {
    /** Discount rule ID */
    id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$7;
    /** Discount value. */
    amount?: MultiCurrencyPrice$3;
}
interface DiscountRuleName$7 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface CustomField$5 {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
declare enum WeightUnit$9 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface TaxSummary$7 {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice$3;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice$3;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails$3;
}
interface TaxCalculationDetails$3 extends TaxCalculationDetailsCalculationDetailsOneOf$3 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$3;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$3;
    /** Rate calculation type. */
    rateType?: RateType$3;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf$3 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$3;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$3;
}
declare enum RateType$3 {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason$3 {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails$3 {
    /** reason for fallback */
    fallbackReason?: FallbackReason$3;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError$h;
}
declare enum FallbackReason$3 {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
declare enum ChannelType$5 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CreatedBy$5 extends CreatedByIdOneOf$1 {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** @oneof */
interface CreatedByIdOneOf$1 {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** Reserved for internal use. */
interface MembershipOptions$3 {
    /**
     * Reserved for internal use.
     * @readonly
     */
    eligibleMemberships?: Membership$3[];
    /**
     * Reserved for internal use.
     * @readonly
     */
    invalidMemberships?: InvalidMembership$3[];
    /** Selected membership to apply to this checkout. */
    selectedMemberships?: SelectedMemberships$3;
}
interface Membership$3 {
    /** Membership ID. */
    id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName$3;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits$3;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName$3 {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface MembershipPaymentCredits$3 {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership$3 {
    /** Membership details. */
    membership?: Membership$3;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface SelectedMemberships$3 {
    /** Selected memberships. */
    memberships?: SelectedMembership$3[];
}
interface SelectedMembership$3 {
    /** Membership ID. */
    id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface AdditionalFee$5 {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice$3;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$7;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice$3;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice$3;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface Violation$1 {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity$1;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target$1;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity$1 {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target$1 extends TargetTargetTypeOneOf$1 {
    /** General (other) violation. */
    other?: Other$1;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$1;
}
/** @oneof */
interface TargetTargetTypeOneOf$1 {
    /** General (other) violation. */
    other?: Other$1;
    /** Specific line item violation. */
    lineItem?: TargetLineItem$1;
}
/** Available locations on the webpage */
declare enum NameInOther$1 {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem$1 {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix$1 {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other$1 {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther$1;
}
/** Specific line item violation. */
interface TargetLineItem$1 {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem$1;
    /** ID of the line item containing the violation. */
    id?: string | null;
}
interface CustomSettings$1 {
    /**
     * Whether to restrict the option to add or remove a gift card on the checkout page.
     *
     * Default: `false`
     */
    lockGiftCard?: boolean;
    /**
     * Whether to restrict the option to add or remove a coupon code on the checkout page.
     *
     * Default: `false`
     */
    lockCouponCode?: boolean;
    /**
     * Whether to disable policy agreement checkout in the checkout page
     *
     * Default: `false`
     */
    disabledPolicyAgreementCheckbox?: boolean;
    /**
     * Whether to disable manual payment option for this checkout.
     *
     * Default: `false`
     */
    disabledManualPayment?: boolean;
}
interface CustomContentReference$3 {
    /**
     * ID of the app providing the content.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    appId?: string;
    /**
     * ID of the component within the app it belongs to.
     *
     * You can get your component's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    componentId?: string;
}
interface CreateCheckoutRequest$1 {
    /** Checkout information. */
    checkoutInfo?: Checkout$1;
    /** Coupon code. */
    couponCode?: string | null;
    /** Catalog line items to add to the checkout. */
    lineItems?: LineItem$3[];
    /**
     * Custom line items to add to the checkout. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$5[];
    /**
     * Sales channel that submitted the order.
     * + `"UNSPECIFIED"`: Unspecified sales channel. This value is not supported.
     * + `"WEB"`: A web client.
     * + `"POS"`: [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395)
     * + `"EBAY"`: [eBay](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop)
     * + `"AMAZON"`: [Amazon](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop)
     * + `"WISH"`: [Wish](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-a-wish-shop)
     * + `"WIX_INVOICES"`: Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings)
     * + `"WIX_APP_STORE"`: [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview)
     * + `"BACKOFFICE_MERCHANT"`: Wix merchant backoffice
     * + `"OTHER_PLATFORM"`: Other sales platform.
     */
    channelType: ChannelType$5;
    /**
     * Gift card code.
     *
     * The checkout can only hold 1 `giftCardCode` at a time. If an additional `giftCardCode` is added, it will override the existing `giftCardCode`.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     */
    giftCardCode?: string | null;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used in the [Abandoned Checkout API](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/abandoned-checkout/introduction)
     * to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a
     * standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
}
interface CustomLineItem$5 {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$7;
    /** Custom line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine$7[];
    /** Custom line item's media. */
    media?: Image$4;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName$7;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: PageUrlV2$2;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$9;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$b;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$9;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties$5;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$d;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface CreateCheckoutResponse$1 {
    /** Newly created checkout. */
    checkout?: Checkout$1;
}
interface GetCheckoutRequest$1 {
    /** Checkout ID. */
    id: string;
}
interface GetCheckoutResponse$1 {
    /** The requested checkout. */
    checkout?: Checkout$1;
}
interface GetCheckoutByCartIdRequest$1 {
    /** Cart ID. */
    id: string;
}
interface GetCheckoutByCartIdResponse$1 {
    /** The requested checkout. */
    checkout?: Checkout$1;
}
interface GetCheckoutURLRequest$1 {
    /** Checkout ID. */
    id: string;
}
interface GetCheckoutURLResponse$1 {
    /** Checkout URL. */
    checkoutUrl?: string;
}
interface UpdateCheckoutRequest$1 {
    /** Checkout information. */
    checkout: Checkout$1;
    /**
     * Coupon code.
     *
     * The checkout can only hold 1 `couponCode` at a time. If an additional `couponCode` is added, it will override the existing `couponCode`.
     */
    couponCode?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used in the [Abandoned Checkout API](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/abandoned-checkout/introduction)
     * to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a
     * standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /** Catalog line items. */
    lineItems?: LineItem$3[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$5[];
}
interface UpdateCheckoutResponse$1 {
    /** Updated checkout. */
    checkout?: Checkout$1;
}
interface RemoveCouponRequest$1 {
    /** ID of the checkout to remove the coupon from. */
    id: string;
}
interface RemoveCouponResponse$1 {
    /** Updated checkout after removal of coupon. */
    checkout?: Checkout$1;
}
interface RemoveGiftCardRequest$1 {
    /** ID of the checkout to remove the gift card from. */
    id: string;
}
interface RemoveGiftCardResponse$1 {
    /** Updated checkout after removal of gift card. */
    checkout?: Checkout$1;
}
interface RemoveOverrideCheckoutUrlRequest$1 {
    /** ID of the checkout to remove the override checkout url from. */
    id: string;
}
interface RemoveOverrideCheckoutUrlResponse$1 {
    /** Updated checkout after removal of override checkout url. */
    checkout?: Checkout$1;
}
interface AddToCheckoutRequest$1 {
    /** Checkout ID. */
    id: string;
    /** Catalog line items. */
    lineItems?: LineItem$3[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$5[];
}
interface AddToCheckoutResponse$1 {
    /** Updated checkout. */
    checkout?: Checkout$1;
}
interface RemoveLineItemsRequest$1 {
    /** ID of the checkout to remove line items from. */
    id: string;
    /** IDs of the line items to remove from the checkout. */
    lineItemIds: string[];
}
interface RemoveLineItemsResponse$1 {
    /** Updated checkout after removal of line items. */
    checkout?: Checkout$1;
}
interface CreateOrderRequest$3 {
    /** Checkout ID. */
    id: string;
    /** Indicates the payment method should be saved on the order */
    savePaymentMethod?: boolean;
    /** Indicates whether to authorize the payment and delay the capture */
    delayCapture?: boolean;
}
interface CreateOrderResponse$3 extends CreateOrderResponseIdOneOf$1 {
    /** ID of newly created order. */
    orderId?: string;
    /** ID of newly created subscription. Learn more about your site's [Subscriptions](https://support.wix.com/en/article/wix-stores-managing-product-subscriptions). */
    subscriptionId?: string;
    /**
     * Payment gateway order ID.
     *
     * For online orders, pass this value as the `paymentId` parameter to the Wix Pay [`startPayment()`](https://www.wix.com/velo/reference/wix-pay-frontend/startpayment) function so your customer can pay for the order.
     * `paymentGatewayOrderId` will be returned if money needs to be charged.
     *
     * In some cases, money cannot be charged:
     * + When the total price (the `priceSummary.total.amount` field in the checkout/order objects) is 0. For example, in the case of a free item or an item with a 100% discount.
     * + If the total price is not 0, but the payment is covered by alternative payment methods, such as a gift card.
     */
    paymentGatewayOrderId?: string | null;
}
/** @oneof */
interface CreateOrderResponseIdOneOf$1 {
    /** ID of newly created order. */
    orderId?: string;
    /** ID of newly created subscription. Learn more about your site's [Subscriptions](https://support.wix.com/en/article/wix-stores-managing-product-subscriptions). */
    subscriptionId?: string;
}
interface MarkCheckoutAsCompletedRequest$1 {
    /** Checkout ID. */
    id: string;
}
interface MarkCheckoutAsCompletedResponse$1 {
}
interface UpdateLineItemsQuantityRequest$1 {
    /** Checkout ID. */
    id: string;
    /** Line item info to update. */
    lineItems: LineItemQuantityUpdate$1[];
}
interface LineItemQuantityUpdate$1 {
    /** ID of the line item to update. */
    id?: string;
    /**
     * New total amount of the line item,
     * not the amount to add to the current `quantity`.
     *
     * Min: `1`
     *
     * Max: `100000`
     */
    quantity?: number;
}
interface UpdateLineItemsQuantityResponse$1 {
    /** Updated checkout. */
    checkout?: Checkout$1;
}
interface GetCheckoutPaymentSettingsRequest$1 {
    /** Checkout ID. */
    id: string;
}
interface GetCheckoutPaymentSettingsResponse$1 {
    blockedPaymentOptions?: GetCheckoutPaymentSettingsResponsePaymentOption$1[];
}
declare enum GetCheckoutPaymentSettingsResponsePaymentOption$1 {
    UNKNOWN_PAYMENT_OPTION = "UNKNOWN_PAYMENT_OPTION",
    MANUAL = "MANUAL"
}
interface CatalogReferenceNonNullableFields$7 {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields$7 {
    original: string;
}
interface PageUrlV2NonNullableFields$1 {
    relativePath: string;
}
interface MultiCurrencyPriceNonNullableFields$3 {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface TaxRateBreakdownNonNullableFields$3 {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields$3;
    exemptAmount?: MultiCurrencyPriceNonNullableFields$3;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields$3;
}
interface TaxBreakdownNonNullableFields$3 {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields$3;
    taxAmount?: MultiCurrencyPriceNonNullableFields$3;
    taxableAmount?: MultiCurrencyPriceNonNullableFields$3;
    jurisdictionType: JurisdictionType$7;
}
interface ItemTaxFullDetailsNonNullableFields$7 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$3;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields$3;
    rateBreakdown: TaxRateBreakdownNonNullableFields$3[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields$3;
    taxBreakdown: TaxBreakdownNonNullableFields$3[];
}
interface PlainTextValueNonNullableFields$7 {
    original: string;
}
interface ColorNonNullableFields$7 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$7 {
    original: string;
}
interface DescriptionLineNonNullableFields$7 {
    plainText?: PlainTextValueNonNullableFields$7;
    colorInfo?: ColorNonNullableFields$7;
    plainTextValue?: PlainTextValueNonNullableFields$7;
    color: string;
    name?: DescriptionLineNameNonNullableFields$7;
    lineType: DescriptionLineType$7;
}
interface CommonImageNonNullableFields {
    id: string;
    url: string;
    height: number;
    width: number;
}
interface ItemAvailabilityInfoNonNullableFields$1 {
    status: ItemAvailabilityStatus$1;
}
interface PhysicalPropertiesNonNullableFields$7 {
    shippable: boolean;
}
interface GroupNonNullableFields$1 {
    name: string;
}
interface ScopeNonNullableFields$1 {
    namespace: string;
    group?: GroupNonNullableFields$1;
}
interface ItemTypeNonNullableFields$7 {
    preset: ItemTypeItemType$9;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields$3 {
    frequency: SubscriptionFrequency$9;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields$7 {
    frequency: SubscriptionFrequency$9;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields$3;
}
interface TitleNonNullableFields$3 {
    original: string;
}
interface DescriptionNonNullableFields$3 {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields$3 {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$7;
    title?: TitleNonNullableFields$3;
    description?: DescriptionNonNullableFields$3;
}
interface SecuredMediaNonNullableFields$3 {
    id: string;
    fileName: string;
    fileType: FileType$3;
}
interface PriceDescriptionNonNullableFields$7 {
    original: string;
}
interface ImageNonNullableFields$5 {
    id: string;
    height: number;
    width: number;
}
interface PaymentOptionNonNullableFields$3 {
    value: PaymentOptionType$9;
}
interface CatalogOverrideFieldsNonNullableFields$3 {
    productName?: ProductNameNonNullableFields$7;
    descriptionLines: DescriptionLineNonNullableFields$7[];
    physicalProperties?: PhysicalPropertiesNonNullableFields$7;
    image?: ImageNonNullableFields$5;
    paymentOption?: PaymentOptionNonNullableFields$3;
}
interface TaxableAddressNonNullableFields$7 {
    addressType: TaxableAddressType$7;
}
interface PolicyNonNullableFields$3 {
    title: string;
    content: string;
}
interface LineItemNonNullableFields$1 {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields$7;
    productName?: ProductNameNonNullableFields$7;
    url?: PageUrlV2NonNullableFields$1;
    price?: MultiCurrencyPriceNonNullableFields$3;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields$3;
    fullPrice?: MultiCurrencyPriceNonNullableFields$3;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$3;
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$3;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$3;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$7;
    discount?: MultiCurrencyPriceNonNullableFields$3;
    descriptionLines: DescriptionLineNonNullableFields$7[];
    media?: CommonImageNonNullableFields;
    availability?: ItemAvailabilityInfoNonNullableFields$1;
    physicalProperties?: PhysicalPropertiesNonNullableFields$7;
    couponScopes: ScopeNonNullableFields$1[];
    itemType?: ItemTypeNonNullableFields$7;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields$3;
    digitalFile?: SecuredMediaNonNullableFields$3;
    paymentOption: PaymentOptionType$9;
    priceDescription?: PriceDescriptionNonNullableFields$7;
    depositAmount?: MultiCurrencyPriceNonNullableFields$3;
    customLineItem: boolean;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields$3;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    savePaymentMethod: boolean;
    taxableAddress?: TaxableAddressNonNullableFields$7;
    policies: PolicyNonNullableFields$3[];
}
interface StreetAddressNonNullableFields$d {
    number: string;
    name: string;
    apt: string;
}
interface ApiAddressNonNullableFields$1 {
    streetAddress?: StreetAddressNonNullableFields$d;
}
interface CommonVatIdNonNullableFields$1 {
    id: string;
    type: CommonVatType$1;
}
interface FullAddressContactDetailsNonNullableFields$5 {
    vatId?: CommonVatIdNonNullableFields$1;
}
interface AddressWithContactNonNullableFields$5 {
    address?: ApiAddressNonNullableFields$1;
    contactDetails?: FullAddressContactDetailsNonNullableFields$5;
}
interface PickupDetailsNonNullableFields$9 {
    address?: ApiAddressNonNullableFields$1;
    businessLocation: boolean;
    pickupMethod: PickupMethod$9;
}
interface DeliveryLogisticsNonNullableFields$9 {
    pickupDetails?: PickupDetailsNonNullableFields$9;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields$3 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$3;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$3;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$7;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$3;
    price?: MultiCurrencyPriceNonNullableFields$3;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields$3 {
    type: ChargeType$7;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$3;
}
interface SelectedCarrierServiceOptionNonNullableFields$3 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$9;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$3;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields$3[];
}
interface ShippingRegionNonNullableFields$3 {
    id: string;
    name: string;
}
interface OtherChargeNonNullableFields$3 {
    type: ChargeType$7;
    price?: MultiCurrencyPriceNonNullableFields$3;
}
interface ShippingPriceNonNullableFields$7 {
    price?: MultiCurrencyPriceNonNullableFields$3;
    otherCharges: OtherChargeNonNullableFields$3[];
}
interface ShippingOptionNonNullableFields$7 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$9;
    cost?: ShippingPriceNonNullableFields$7;
}
interface CarrierServiceOptionNonNullableFields$3 {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields$7[];
}
interface ShippingInfoNonNullableFields$1 {
    shippingDestination?: AddressWithContactNonNullableFields$5;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields$3;
    region?: ShippingRegionNonNullableFields$3;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields$3[];
}
interface BuyerInfoNonNullableFields$5 {
    visitorId: string;
    memberId: string;
    openAccess: boolean;
}
interface PriceSummaryNonNullableFields$7 {
    subtotal?: MultiCurrencyPriceNonNullableFields$3;
    shipping?: MultiCurrencyPriceNonNullableFields$3;
    tax?: MultiCurrencyPriceNonNullableFields$3;
    discount?: MultiCurrencyPriceNonNullableFields$3;
    total?: MultiCurrencyPriceNonNullableFields$3;
    additionalFees?: MultiCurrencyPriceNonNullableFields$3;
}
interface ApplicationErrorNonNullableFields$h {
    code: string;
    description: string;
}
interface FieldViolationNonNullableFields$7 {
    field: string;
    description: string;
    violatedRule: RuleType$7;
}
interface ValidationErrorNonNullableFields$7 {
    fieldViolations: FieldViolationNonNullableFields$7[];
}
interface DetailsNonNullableFields$7 {
    applicationError?: ApplicationErrorNonNullableFields$h;
    validationError?: ValidationErrorNonNullableFields$7;
}
interface CarrierErrorNonNullableFields$5 {
    carrierId: string;
    error?: DetailsNonNullableFields$7;
}
interface CarrierErrorsNonNullableFields$5 {
    errors: CarrierErrorNonNullableFields$5[];
}
interface CalculationErrorsNonNullableFields$5 {
    generalShippingCalculationError?: DetailsNonNullableFields$7;
    carrierErrors?: CarrierErrorsNonNullableFields$5;
    taxCalculationError?: DetailsNonNullableFields$7;
    couponCalculationError?: DetailsNonNullableFields$7;
    giftCardCalculationError?: DetailsNonNullableFields$7;
    orderValidationErrors: ApplicationErrorNonNullableFields$h[];
    membershipError?: DetailsNonNullableFields$7;
    discountsCalculationError?: DetailsNonNullableFields$7;
}
interface GiftCardNonNullableFields$5 {
    id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields$3;
    appId: string;
}
interface CouponNonNullableFields$7 {
    id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields$3;
    name: string;
    couponType: string;
}
interface MerchantDiscountNonNullableFields$7 {
    amount?: MultiCurrencyPriceNonNullableFields$3;
}
interface DiscountRuleNameNonNullableFields$7 {
    original: string;
}
interface DiscountRuleNonNullableFields$7 {
    id: string;
    name?: DiscountRuleNameNonNullableFields$7;
    amount?: MultiCurrencyPriceNonNullableFields$3;
}
interface LineItemDiscountNonNullableFields$7 {
    id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields$3;
}
interface AppliedDiscountNonNullableFields$7 {
    coupon?: CouponNonNullableFields$7;
    merchantDiscount?: MerchantDiscountNonNullableFields$7;
    discountRule?: DiscountRuleNonNullableFields$7;
    discountType: DiscountType$7;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$7[];
}
interface CustomFieldNonNullableFields$5 {
    title: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields$3 {
    fallbackReason: FallbackReason$3;
    error?: ApplicationErrorNonNullableFields$h;
}
interface TaxCalculationDetailsNonNullableFields$3 {
    manualRateReason: ManualCalculationReason$3;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields$3;
    rateType: RateType$3;
}
interface AggregatedTaxBreakdownNonNullableFields$3 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType$7;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields$3;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields$3;
}
interface TaxSummaryNonNullableFields$7 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$3;
    totalTax?: MultiCurrencyPriceNonNullableFields$3;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields$3;
    totalExempt?: MultiCurrencyPriceNonNullableFields$3;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields$3[];
}
interface CreatedByNonNullableFields$5 {
    userId: string;
    memberId: string;
    visitorId: string;
    appId: string;
}
interface MembershipNameNonNullableFields$7 {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields$3 {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields$3 {
    id: string;
    appId: string;
    name?: MembershipNameNonNullableFields$7;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields$3;
}
interface InvalidMembershipNonNullableFields$3 {
    membership?: MembershipNonNullableFields$3;
    reason: string;
}
interface SelectedMembershipNonNullableFields$3 {
    id: string;
    appId: string;
    lineItemIds: string[];
}
interface SelectedMembershipsNonNullableFields$1 {
    memberships: SelectedMembershipNonNullableFields$3[];
}
interface MembershipOptionsNonNullableFields$3 {
    eligibleMemberships: MembershipNonNullableFields$3[];
    invalidMemberships: InvalidMembershipNonNullableFields$3[];
    selectedMemberships?: SelectedMembershipsNonNullableFields$1;
}
interface AdditionalFeeNonNullableFields$5 {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields$3;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$7;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields$3;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields$3;
    lineItemIds: string[];
}
interface ConversionInfoNonNullableFields$1 {
    siteCurrency: string;
    conversionRate: string;
}
interface OtherNonNullableFields$1 {
    name: NameInOther$1;
}
interface TargetLineItemNonNullableFields$1 {
    name: NameInLineItem$1;
    suggestedFix: SuggestedFix$1;
}
interface TargetNonNullableFields$1 {
    other?: OtherNonNullableFields$1;
    lineItem?: TargetLineItemNonNullableFields$1;
}
interface ViolationNonNullableFields$1 {
    severity: Severity$1;
    target?: TargetNonNullableFields$1;
}
interface CustomSettingsNonNullableFields$1 {
    lockGiftCard: boolean;
    lockCouponCode: boolean;
    disabledPolicyAgreementCheckbox: boolean;
    disabledManualPayment: boolean;
}
interface CustomContentReferenceNonNullableFields$3 {
    appId: string;
    componentId: string;
}
interface ExternalReferenceNonNullableFields$3 {
    appId: string;
}
interface CheckoutNonNullableFields$1 {
    lineItems: LineItemNonNullableFields$1[];
    billingInfo?: AddressWithContactNonNullableFields$5;
    shippingInfo?: ShippingInfoNonNullableFields$1;
    buyerInfo?: BuyerInfoNonNullableFields$5;
    conversionCurrency: string;
    priceSummary?: PriceSummaryNonNullableFields$7;
    calculationErrors?: CalculationErrorsNonNullableFields$5;
    giftCard?: GiftCardNonNullableFields$5;
    appliedDiscounts: AppliedDiscountNonNullableFields$7[];
    customFields: CustomFieldNonNullableFields$5[];
    weightUnit: WeightUnit$9;
    taxSummary?: TaxSummaryNonNullableFields$7;
    currency: string;
    channelType: ChannelType$5;
    siteLanguage: string;
    buyerLanguage: string;
    completed: boolean;
    taxIncludedInPrice: boolean;
    createdBy?: CreatedByNonNullableFields$5;
    payNow?: PriceSummaryNonNullableFields$7;
    payLater?: PriceSummaryNonNullableFields$7;
    membershipOptions?: MembershipOptionsNonNullableFields$3;
    additionalFees: AdditionalFeeNonNullableFields$5[];
    conversionInfo?: ConversionInfoNonNullableFields$1;
    payNowTotalAfterGiftCard?: MultiCurrencyPriceNonNullableFields$3;
    violations: ViolationNonNullableFields$1[];
    totalAfterGiftCard?: MultiCurrencyPriceNonNullableFields$3;
    customSettings?: CustomSettingsNonNullableFields$1;
    customContentReference?: CustomContentReferenceNonNullableFields$3;
    externalReference?: ExternalReferenceNonNullableFields$3;
}
interface CreateCheckoutResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface GetCheckoutResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface GetCheckoutByCartIdResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface GetCheckoutURLResponseNonNullableFields$1 {
    checkoutUrl: string;
}
interface UpdateCheckoutResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface RemoveCouponResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface RemoveGiftCardResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface RemoveOverrideCheckoutUrlResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface AddToCheckoutResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface RemoveLineItemsResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface CreateOrderResponseNonNullableFields$3 {
    orderId: string;
    subscriptionId: string;
}
interface UpdateLineItemsQuantityResponseNonNullableFields$1 {
    checkout?: CheckoutNonNullableFields$1;
}
interface GetCheckoutPaymentSettingsResponseNonNullableFields$1 {
    blockedPaymentOptions: GetCheckoutPaymentSettingsResponsePaymentOption$1[];
}

interface Checkout {
    /**
     * Checkout ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Line items.
     *
     * Max: 300 items
     * @readonly
     */
    lineItems?: LineItem$2[];
    /** Billing information. */
    billingInfo?: AddressWithContact$4;
    /** Shipping information. */
    shippingInfo?: ShippingInfo;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo$4;
    /**
     * All converted prices are displayed in this currency in three-letter [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Calculated price summary for the checkout.
     * @readonly
     */
    priceSummary?: PriceSummary$6;
    /**
     * Errors when calculating totals.
     * @readonly
     */
    calculationErrors?: CalculationErrors$4;
    /**
     * Applied gift card details.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     * @readonly
     */
    giftCard?: GiftCard$4;
    /**
     * Applied discounts.
     * @readonly
     */
    appliedDiscounts?: AppliedDiscount$6[];
    /** Custom fields. */
    customFields?: CustomField$4[];
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit$8;
    /**
     * Tax summary.
     * @readonly
     */
    taxSummary?: TaxSummary$6;
    /**
     * The currency used when submitting the order.
     * @readonly
     */
    currency?: string;
    /**
     * Sales channel that submitted the order.
     * + `"UNSPECIFIED"`: Unspecified sales channel. This value is not supported.
     * + `"WEB"`: A web client.
     * + `"POS"`: [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395)
     * + `"EBAY"`: [eBay](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop)
     * + `"AMAZON"`: [Amazon](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop)
     * + `"WISH"`: [Wish](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-a-wish-shop)
     * + `"WIX_INVOICES"`: Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings)
     * + `"WIX_APP_STORE"`: [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview)
     * + `"BACKOFFICE_MERCHANT"`: Wix merchant backoffice
     * + `"OTHER_PLATFORM"`: Other sales platform.
     * @readonly
     */
    channelType?: ChannelType$4;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string;
    /**
     * Whether an order was successfully created from this checkout.
     * For an order to be successful, it must be successfully paid for (unless the total is 0).
     * @readonly
     */
    completed?: boolean;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrice?: boolean;
    /**
     * ID of the checkout's initiator.
     * @readonly
     */
    createdBy?: CreatedBy$4;
    /**
     * Date and time the checkout was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the checkout was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary$6;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary$6;
    /** Memberships to apply when creating the order. */
    membershipOptions?: MembershipOptions$2;
    /** Additional Fees. */
    additionalFees?: AdditionalFee$4[];
    /** Cart ID that this checkout was created from. Empty if this checkout wasn't created from a cart. */
    cartId?: string | null;
    /**
     * List of validation violations raised by the [Validations Custom Extension SPI](https://www.wix.com/velo/reference/spis/wix-ecom/ecom-validations/introduction).
     * @readonly
     */
    violations?: Violation[];
    /**
     * Custom field data for the checkout object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$e;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /**
     * Additional settings for customization of the checkout process.
     *
     * Custom settings can only be defined when [creating a checkout](https://www.wix.com/velo/reference/wix-ecom-backend/checkout/createcheckout).
     */
    customSettings?: CustomSettings;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference$2;
}
interface LineItem$2 {
    /**
     * Line item ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Item quantity.
     *
     * Min: `"1"`
     * Max: `"100000"`
     */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$c;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName$6;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: string;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice$2;
    /**
     * Total line item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    lineItemPrice?: MultiCurrencyPrice$2;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice$2;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice$2;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: MultiCurrencyPrice$2;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: MultiCurrencyPrice$2;
    /**
     * Tax details for this line item.
     * @readonly
     */
    taxDetails?: ItemTaxFullDetails$6;
    /**
     * Discount for this line item's entire quantity.
     * @readonly
     */
    discount?: MultiCurrencyPrice$2;
    /**
     * Line item description lines. Used for displaying the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine$6[];
    /**
     * Line item image details.
     * @readonly
     */
    media?: string;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties$a;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType$8;
    /**
     * Subscription option information.
     * @readonly
     */
    subscriptionOptionInfo?: SubscriptionOptionInfo;
    /**
     * Type of selected payment option for current item. Defaults to `"FULL_PAYMENT_ONLINE"`.
     * + `"FULL_PAYMENT_ONLINE"`: The entire payment for this item happens as part of the checkout.
     * + `"FULL_PAYMENT_OFFLINE"`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `"MEMBERSHIP"`: Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `"DEPOSIT_ONLINE"`: Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     * @readonly
     */
    paymentOption?: PaymentOptionType$8;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties$4;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field has the same value as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription$6;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice$2;
    /**
     * Whether the line item is a custom line item. Custom line items don't trigger the Catalog service plugin.
     * @readonly
     */
    customLineItem?: boolean;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields$2;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$c {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs.
     *
     * Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from your Wix Stores catalog, learn more about [eCommerce integration](https://www.wix.com/velo/reference/wix-stores-backend/ecommerce-integration).
     */
    options?: Record<string, any> | null;
}
interface ProductName$6 {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface MultiCurrencyPrice$2 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface ItemTaxFullDetails$6 {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice$2;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice$2;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown$2[];
}
interface TaxRateBreakdown$2 {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice$2;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$6 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DescriptionLine$6 extends DescriptionLineValueOneOf$6, DescriptionLineDescriptionLineValueOneOf$6 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$6;
    /** Description line color value. */
    colorInfo?: Color$6;
    /** Description line name. */
    name?: DescriptionLineName$6;
}
/** @oneof */
interface DescriptionLineValueOneOf$6 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$6;
    /** Description line color value. */
    colorInfo?: Color$6;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$6 {
}
interface DescriptionLineName$6 {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$6 {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$6 {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$6 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface ItemAvailabilityInfo {
    /**
     * Item availability status.
     * + `"NOT_FOUND"`: Item does not exist
     * + `"NOT_AVAILABLE"`: Item not in stock
     * + `"PARTIALLY_AVAILABLE"`: Available quantity is less than requested
     */
    status?: ItemAvailabilityStatus;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus {
    AVAILABLE = "AVAILABLE",
    NOT_FOUND = "NOT_FOUND",
    /** Not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
interface PhysicalProperties$a {
    /** Line item weight. Measurement unit (`"KG"` or `"LB"`) is taken from `order.weightUnit`. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$8 extends ItemTypeItemTypeDataOneOf$8 {
    /** Preset item type. */
    preset?: ItemTypeItemType$8;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$8 {
    /** Preset item type. */
    preset?: ItemTypeItemType$8;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$8 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
interface SubscriptionOptionInfo {
    /** Subscription option settings. */
    subscriptionSettings?: SubscriptionSettings$6;
    /** Subscription option title. */
    title?: Title;
    /** Subscription option description. */
    description?: Description;
}
interface SubscriptionSettings$6 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$8;
    /**
     * Interval of recurring payment.
     *
     * Default: `1`.
     * If SubscriptionFrequency is Day the minimum interval is 7
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal` is `true`. */
    billingCycles?: number | null;
    /**
     * Period until first cycle starts. If applied payNow will be 0
     * If None => no free trial
     */
    freeTrialPeriod?: FreeTrialPeriod;
    /** The date the subscription will start. The subscription will be charged either now or according to freeTrialDays. */
    startDate?: Date | null;
    /**
     * Whether to generate an order each billing cycle. An order will always be generated for the first billing cycle.
     * Default None => will behave like true
     */
    generateOrderEachBillingCycle?: boolean | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$8 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface FreeTrialPeriod {
    /** Frequency of priod. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequency$8;
    /** interval of period */
    interval?: number;
}
interface Title {
    /** Subscription option name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Subscription option name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Description {
    /** Subscription option description. */
    original?: string;
    /** Translated subscription option description. */
    translated?: string | null;
}
declare enum FileType$2 {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$8 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties$4 {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface PriceDescription$6 {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface CatalogOverrideFields$2 {
    /** Item name. */
    productName?: ProductName$6;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine$6[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$a;
    /** Item image. */
    image?: string;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption$2;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface PaymentOption$2 {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType$8;
}
declare enum TaxableAddressType$6 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
interface ExtendedFields$e {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
/** Billing Info and shipping details */
interface AddressWithContact$4 {
    /** Address. */
    address?: ApiAddress;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$6;
}
/** Physical address */
interface ApiAddress {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$c;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$c {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$6 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: CommonVatId;
}
interface CommonVatId {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: CommonVatType;
}
/** tax info types */
declare enum CommonVatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface ShippingInfo {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$4;
    /** Selected option out of the options allowed for the `region`. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption$2;
    /**
     * Shipping region. Based on the address provided.
     * @readonly
     */
    region?: ShippingRegion$6;
    /**
     * All carrier options for this shipping rule.
     * @readonly
     */
    carrierServiceOptions?: CarrierServiceOption$2[];
}
interface SelectedCarrierServiceOption$2 {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics$8;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices$2;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge$2[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface DeliveryLogistics$8 {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails$8;
}
interface PickupDetails$8 {
    /** Pickup address. */
    address?: ApiAddress;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod$8;
}
declare enum PickupMethod$8 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface SelectedCarrierServiceOptionPrices$2 {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$2;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$2;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$6;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice$2;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice$2;
}
interface SelectedCarrierServiceOptionOtherCharge$2 {
    /** Type of additional cost. */
    type?: ChargeType$6;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices$2;
}
declare enum ChargeType$6 {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface ShippingRegion$6 {
    /**
     * Shipping region ID.
     * @readonly
     */
    _id?: string;
    /** Shipping region name. */
    name?: string;
}
interface CarrierServiceOption$2 {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption$6[];
}
interface ShippingOption$6 {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics$8;
    /** Sipping price information. */
    cost?: ShippingPrice$6;
}
interface ShippingPrice$6 {
    /** Shipping price. */
    price?: MultiCurrencyPrice$2;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge$2[];
}
interface OtherCharge$2 {
    /** Type of additional cost. */
    type?: ChargeType$6;
    /** Price of added cost. */
    price?: MultiCurrencyPrice$2;
}
interface BuyerInfo$4 extends BuyerInfoIdOneOf$4 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - If the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * Contact ID. For more information, see the Contacts API.
     * @readonly
     */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$4 {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - If the buyer is a site member.
     * @readonly
     */
    memberId?: string;
}
interface PriceSummary$6 {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice$2;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice$2;
    /** Total tax. */
    tax?: MultiCurrencyPrice$2;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice$2;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice$2;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice$2;
}
interface CalculationErrors$4 extends CalculationErrorsShippingCalculationErrorOneOf$4 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$6;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$4;
    /** Tax calculation error. */
    taxCalculationError?: Details$6;
    /** Coupon calculation error. */
    couponCalculationError?: Details$6;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details$6;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$g[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details$6;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details$6;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$4 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$6;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$4;
}
interface Details$6 extends DetailsKindOneOf$6 {
    applicationError?: ApplicationError$g;
    validationError?: ValidationError$6;
    systemError?: SystemError$6;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$6 {
    applicationError?: ApplicationError$g;
    validationError?: ValidationError$6;
    systemError?: SystemError$6;
}
interface ApplicationError$g {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$6 {
    fieldViolations?: FieldViolation$6[];
}
declare enum RuleType$6 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$6 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$6;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$6 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$4 {
    /** Carrier errors. */
    errors?: CarrierError$4[];
}
interface CarrierError$4 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$6;
}
interface GiftCard$4 {
    /**
     * Gift Card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice$2;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface AppliedDiscount$6 extends AppliedDiscountDiscountSourceOneOf$6 {
    /** Coupon details. */
    coupon?: Coupon$6;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$6;
    /** Discount rule */
    discountRule?: DiscountRule$6;
    /** Discount type. */
    discountType?: DiscountType$6;
    /**
     * IDs of the line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$6 {
    /** Coupon details. */
    coupon?: Coupon$6;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$6;
    /** Discount rule */
    discountRule?: DiscountRule$6;
}
declare enum DiscountType$6 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$6 {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice$2;
    /** Coupon name. */
    name?: string;
}
interface MerchantDiscount$6 {
    /** Discount value. */
    amount?: MultiCurrencyPrice$2;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule$6 {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$6;
    /** Discount value. */
    amount?: MultiCurrencyPrice$2;
}
interface DiscountRuleName$6 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface CustomField$4 {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
declare enum WeightUnit$8 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface TaxSummary$6 {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice$2;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice$2;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails$2;
}
interface TaxCalculationDetails$2 extends TaxCalculationDetailsCalculationDetailsOneOf$2 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$2;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$2;
    /** Rate calculation type. */
    rateType?: RateType$2;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf$2 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$2;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$2;
}
declare enum RateType$2 {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason$2 {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails$2 {
    /** reason for fallback */
    fallbackReason?: FallbackReason$2;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError$g;
}
declare enum FallbackReason$2 {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
declare enum ChannelType$4 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CreatedBy$4 extends CreatedByIdOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** @oneof */
interface CreatedByIdOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** Reserved for internal use. */
interface MembershipOptions$2 {
    /**
     * Reserved for internal use.
     * @readonly
     */
    eligibleMemberships?: Membership$2[];
    /**
     * Reserved for internal use.
     * @readonly
     */
    invalidMemberships?: InvalidMembership$2[];
    /** Selected membership to apply to this checkout. */
    selectedMemberships?: SelectedMemberships$2;
}
interface Membership$2 {
    /** Membership ID. */
    _id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName$2;
    /** Line item IDs which are "paid for" by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits$2;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName$2 {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface MembershipPaymentCredits$2 {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership$2 {
    /** Membership details. */
    membership?: Membership$2;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface SelectedMemberships$2 {
    /** Selected memberships. */
    memberships?: SelectedMembership$2[];
}
interface SelectedMembership$2 {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface AdditionalFee$4 {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice$2;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$6;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice$2;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice$2;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface Violation {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
declare enum Severity {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
interface Target extends TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** @oneof */
interface TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** Available locations on the webpage */
declare enum NameInOther {
    /** default location, in case no specific location is specified */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
declare enum NameInLineItem {
    /** default location, in case no specific location is specified */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
declare enum SuggestedFix {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
interface Other {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther;
}
/** Specific line item violation. */
interface TargetLineItem {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem;
    /** ID of the line item containing the violation. */
    _id?: string | null;
}
interface CustomSettings {
    /**
     * Whether to restrict the option to add or remove a gift card on the checkout page.
     *
     * Default: `false`
     */
    lockGiftCard?: boolean;
    /**
     * Whether to restrict the option to add or remove a coupon code on the checkout page.
     *
     * Default: `false`
     */
    lockCouponCode?: boolean;
    /**
     * Whether to disable policy agreement checkout in the checkout page
     *
     * Default: `false`
     */
    disabledPolicyAgreementCheckbox?: boolean;
    /**
     * Whether to disable manual payment option for this checkout.
     *
     * Default: `false`
     */
    disabledManualPayment?: boolean;
}
interface CustomContentReference$2 {
    /**
     * ID of the app providing the content.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    appId?: string;
    /**
     * ID of the component within the app it belongs to.
     *
     * You can get your component's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    componentId?: string;
}
interface CreateCheckoutRequest {
    /** Checkout information. */
    checkoutInfo?: Checkout;
    /** The code of an existing coupon to apply to checkout. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Catalog line items to add to the checkout. */
    lineItems?: LineItem$2[];
    /**
     * Custom line items to add to the checkout. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$4[];
    /**
     * **Required**
     *  Sales channel type.
     */
    channelType: ChannelType$4;
    /**
     * Gift card code.
     *
     * The checkout can only hold 1 `giftCardCode` at a time. If an additional `giftCardCode` is added, it will override the existing `giftCardCode`.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     */
    giftCardCode?: string | null;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
}
interface CustomLineItem$4 {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /** Custom line item price. For security reasons, the `price` field should come from backend Velo code, and not be passed from the frontend. */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$6;
    /** Custom line item description lines. Used for displaying the cart, checkout and order. */
    descriptionLines?: DescriptionLine$6[];
    /**
     * Custom line item media.
     * + Link to an image/video from the [Wix Media Manager](https://support.wix.com/en/article/wix-media-about-the-media-manager) - `"wix:image://v1/3c76e2_c53...4ea4~mv2.jpg#originWidth=1000&originHeight=1000"`.
     * + An image from the web - `"http(s)://<image url>"`.
     */
    media?: string;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    _id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName$6;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: string;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$8;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$a;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$8;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties$4;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$c;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface CreateCheckoutResponse {
    /** Newly created checkout. */
    checkout?: Checkout;
}
interface GetCheckoutRequest {
    /** Checkout ID. */
    _id: string;
}
interface GetCheckoutResponse {
    /** The requested checkout. */
    checkout?: Checkout;
}
interface GetCheckoutByCartIdRequest {
    /** Cart ID. */
    _id: string;
}
interface GetCheckoutByCartIdResponse {
    /** The requested checkout. */
    checkout?: Checkout;
}
interface GetCheckoutURLRequest {
    /** Checkout ID. */
    _id: string;
}
interface GetCheckoutURLResponse {
    /** Checkout URL. */
    checkoutUrl?: string;
}
interface UpdateCheckoutRequest {
    /** Checkout information. */
    checkout: Checkout;
    /** The code of an existing coupon to apply to checkout. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /** Catalog line items. */
    lineItems?: LineItem$2[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$4[];
}
interface UpdateCheckoutResponse {
    /** Updated checkout. */
    checkout?: Checkout;
}
interface RemoveCouponRequest {
    /** ID of the checkout to remove the coupon from. */
    _id: string;
}
interface RemoveCouponResponse {
    /** Updated checkout after removal of coupon. */
    checkout?: Checkout;
}
interface RemoveGiftCardRequest {
    /** ID of the checkout to remove the gift card from. */
    _id: string;
}
interface RemoveGiftCardResponse {
    /** Updated checkout after removal of gift card. */
    checkout?: Checkout;
}
interface RemoveOverrideCheckoutUrlRequest {
    /** ID of the checkout to remove the override checkout url from. */
    _id: string;
}
interface RemoveOverrideCheckoutUrlResponse {
    /** Updated checkout after removal of override checkout url. */
    checkout?: Checkout;
}
interface AddToCheckoutRequest {
    /** Checkout ID. */
    _id: string;
    /** Catalog line items. */
    lineItems?: LineItem$2[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem$4[];
}
interface AddToCheckoutResponse {
    /** Updated checkout. */
    checkout?: Checkout;
}
interface RemoveLineItemsRequest {
    /** ID of the checkout to remove line items from. */
    _id: string;
    /** IDs of the line items to remove from the checkout. */
    lineItemIds: string[];
}
interface RemoveLineItemsResponse {
    /** Updated checkout after removal of line items. */
    checkout?: Checkout;
}
interface CreateOrderRequest$2 {
    /** Checkout ID. */
    _id: string;
    /** Indicates the payment method should be saved on the order */
    savePaymentMethod?: boolean;
    /** Indicates whether to authorize the payment and delay the capture */
    delayCapture?: boolean;
}
interface CreateOrderResponse$2 extends CreateOrderResponseIdOneOf {
    /** ID of the newly created order. */
    orderId?: string;
    /** ID of newly created subscription. Learn more about your site's [Subscriptions](https://support.wix.com/en/article/wix-stores-managing-product-subscriptions). */
    subscriptionId?: string;
    /**
     * Payment gateway order ID.
     *
     * For online orders, pass this value as the `paymentId` parameter to the Wix Pay [`startPayment()`](https://www.wix.com/velo/reference/wix-pay-frontend/startpayment) function so your customer can pay for the order.
     *
     * This field will be returned if money needs to be charged. In some cases, money cannot be charged:
     * + When the total price (the `priceSummary.total.amount` field in the checkout/order objects) is 0. For example, in the case of a free item or an item with a 100% discount.
     * + If the total price is not 0, but the payment is covered by alternative payment methods, such as a gift card.
     */
    paymentGatewayOrderId?: string | null;
}
/** @oneof */
interface CreateOrderResponseIdOneOf {
    /** ID of newly created order. */
    orderId?: string;
    /** ID of newly created subscription. Learn more about your site's [Subscriptions](https://support.wix.com/en/article/wix-stores-managing-product-subscriptions). */
    subscriptionId?: string;
}
interface MarkCheckoutAsCompletedRequest {
    /** Checkout ID. */
    _id: string;
}
interface MarkCheckoutAsCompletedResponse {
}
interface UpdateLineItemsQuantityRequest {
    /** Checkout ID. */
    _id: string;
    /** Line item info to update. */
    lineItems: LineItemQuantityUpdate[];
}
interface LineItemQuantityUpdate {
    /** ID of the line item to update. */
    _id?: string;
    /**
     * New total amount of the line item,
     * not the amount to add to the current `quantity`.
     *
     * Min: `1`
     *
     * Max: `100000`
     */
    quantity?: number;
}
interface UpdateLineItemsQuantityResponse {
    /** Updated checkout. */
    checkout?: Checkout;
}
interface GetCheckoutPaymentSettingsRequest {
    /** Checkout ID. */
    _id: string;
}
interface GetCheckoutPaymentSettingsResponse {
    blockedPaymentOptions?: GetCheckoutPaymentSettingsResponsePaymentOption[];
}
declare enum GetCheckoutPaymentSettingsResponsePaymentOption {
    UNKNOWN_PAYMENT_OPTION = "UNKNOWN_PAYMENT_OPTION",
    MANUAL = "MANUAL"
}
interface CatalogReferenceNonNullableFields$6 {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields$6 {
    original: string;
}
interface MultiCurrencyPriceNonNullableFields$2 {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface TaxRateBreakdownNonNullableFields$2 {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields$2;
    exemptAmount?: MultiCurrencyPriceNonNullableFields$2;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields$2;
}
interface TaxBreakdownNonNullableFields$2 {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields$2;
    taxAmount?: MultiCurrencyPriceNonNullableFields$2;
    taxableAmount?: MultiCurrencyPriceNonNullableFields$2;
    jurisdictionType: JurisdictionType$6;
}
interface ItemTaxFullDetailsNonNullableFields$6 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$2;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields$2;
    rateBreakdown: TaxRateBreakdownNonNullableFields$2[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields$2;
    taxBreakdown: TaxBreakdownNonNullableFields$2[];
}
interface PlainTextValueNonNullableFields$6 {
    original: string;
}
interface ColorNonNullableFields$6 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$6 {
    original: string;
}
interface DescriptionLineNonNullableFields$6 {
    plainText?: PlainTextValueNonNullableFields$6;
    colorInfo?: ColorNonNullableFields$6;
    plainTextValue?: PlainTextValueNonNullableFields$6;
    color: string;
    name?: DescriptionLineNameNonNullableFields$6;
    lineType: DescriptionLineType$6;
}
interface ItemAvailabilityInfoNonNullableFields {
    status: ItemAvailabilityStatus;
}
interface PhysicalPropertiesNonNullableFields$6 {
    shippable: boolean;
}
interface GroupNonNullableFields {
    name: string;
}
interface ScopeNonNullableFields {
    namespace: string;
    group?: GroupNonNullableFields;
}
interface ItemTypeNonNullableFields$6 {
    preset: ItemTypeItemType$8;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields$2 {
    frequency: SubscriptionFrequency$8;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields$6 {
    frequency: SubscriptionFrequency$8;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields$2;
}
interface TitleNonNullableFields$2 {
    original: string;
}
interface DescriptionNonNullableFields$2 {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields$2 {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$6;
    title?: TitleNonNullableFields$2;
    description?: DescriptionNonNullableFields$2;
}
interface SecuredMediaNonNullableFields$2 {
    _id: string;
    fileName: string;
    fileType: FileType$2;
}
interface PriceDescriptionNonNullableFields$6 {
    original: string;
}
interface PaymentOptionNonNullableFields$2 {
    value: PaymentOptionType$8;
}
interface CatalogOverrideFieldsNonNullableFields$2 {
    productName?: ProductNameNonNullableFields$6;
    descriptionLines: DescriptionLineNonNullableFields$6[];
    physicalProperties?: PhysicalPropertiesNonNullableFields$6;
    image: string;
    paymentOption?: PaymentOptionNonNullableFields$2;
}
interface TaxableAddressNonNullableFields$6 {
    addressType: TaxableAddressType$6;
}
interface PolicyNonNullableFields$2 {
    title: string;
    content: string;
}
interface LineItemNonNullableFields {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields$6;
    productName?: ProductNameNonNullableFields$6;
    url: string;
    price?: MultiCurrencyPriceNonNullableFields$2;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields$2;
    fullPrice?: MultiCurrencyPriceNonNullableFields$2;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$2;
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$2;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$2;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$6;
    discount?: MultiCurrencyPriceNonNullableFields$2;
    descriptionLines: DescriptionLineNonNullableFields$6[];
    media: string;
    availability?: ItemAvailabilityInfoNonNullableFields;
    physicalProperties?: PhysicalPropertiesNonNullableFields$6;
    couponScopes: ScopeNonNullableFields[];
    itemType?: ItemTypeNonNullableFields$6;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields$2;
    digitalFile?: SecuredMediaNonNullableFields$2;
    paymentOption: PaymentOptionType$8;
    priceDescription?: PriceDescriptionNonNullableFields$6;
    depositAmount?: MultiCurrencyPriceNonNullableFields$2;
    customLineItem: boolean;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields$2;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    savePaymentMethod: boolean;
    taxableAddress?: TaxableAddressNonNullableFields$6;
    policies: PolicyNonNullableFields$2[];
}
interface StreetAddressNonNullableFields$c {
    number: string;
    name: string;
    apt: string;
}
interface ApiAddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields$c;
}
interface CommonVatIdNonNullableFields {
    _id: string;
    type: CommonVatType;
}
interface FullAddressContactDetailsNonNullableFields$4 {
    vatId?: CommonVatIdNonNullableFields;
}
interface AddressWithContactNonNullableFields$4 {
    address?: ApiAddressNonNullableFields;
    contactDetails?: FullAddressContactDetailsNonNullableFields$4;
}
interface PickupDetailsNonNullableFields$8 {
    address?: ApiAddressNonNullableFields;
    businessLocation: boolean;
    pickupMethod: PickupMethod$8;
}
interface DeliveryLogisticsNonNullableFields$8 {
    pickupDetails?: PickupDetailsNonNullableFields$8;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields$2 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$2;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$2;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$6;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$2;
    price?: MultiCurrencyPriceNonNullableFields$2;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields$2 {
    type: ChargeType$6;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$2;
}
interface SelectedCarrierServiceOptionNonNullableFields$2 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$8;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$2;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields$2[];
}
interface ShippingRegionNonNullableFields$2 {
    _id: string;
    name: string;
}
interface OtherChargeNonNullableFields$2 {
    type: ChargeType$6;
    price?: MultiCurrencyPriceNonNullableFields$2;
}
interface ShippingPriceNonNullableFields$6 {
    price?: MultiCurrencyPriceNonNullableFields$2;
    otherCharges: OtherChargeNonNullableFields$2[];
}
interface ShippingOptionNonNullableFields$6 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$8;
    cost?: ShippingPriceNonNullableFields$6;
}
interface CarrierServiceOptionNonNullableFields$2 {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields$6[];
}
interface ShippingInfoNonNullableFields {
    shippingDestination?: AddressWithContactNonNullableFields$4;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields$2;
    region?: ShippingRegionNonNullableFields$2;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields$2[];
}
interface BuyerInfoNonNullableFields$4 {
    visitorId: string;
    memberId: string;
    openAccess: boolean;
}
interface PriceSummaryNonNullableFields$6 {
    subtotal?: MultiCurrencyPriceNonNullableFields$2;
    shipping?: MultiCurrencyPriceNonNullableFields$2;
    tax?: MultiCurrencyPriceNonNullableFields$2;
    discount?: MultiCurrencyPriceNonNullableFields$2;
    total?: MultiCurrencyPriceNonNullableFields$2;
    additionalFees?: MultiCurrencyPriceNonNullableFields$2;
}
interface ApplicationErrorNonNullableFields$g {
    code: string;
    description: string;
}
interface FieldViolationNonNullableFields$6 {
    field: string;
    description: string;
    violatedRule: RuleType$6;
}
interface ValidationErrorNonNullableFields$6 {
    fieldViolations: FieldViolationNonNullableFields$6[];
}
interface DetailsNonNullableFields$6 {
    applicationError?: ApplicationErrorNonNullableFields$g;
    validationError?: ValidationErrorNonNullableFields$6;
}
interface CarrierErrorNonNullableFields$4 {
    carrierId: string;
    error?: DetailsNonNullableFields$6;
}
interface CarrierErrorsNonNullableFields$4 {
    errors: CarrierErrorNonNullableFields$4[];
}
interface CalculationErrorsNonNullableFields$4 {
    generalShippingCalculationError?: DetailsNonNullableFields$6;
    carrierErrors?: CarrierErrorsNonNullableFields$4;
    taxCalculationError?: DetailsNonNullableFields$6;
    couponCalculationError?: DetailsNonNullableFields$6;
    giftCardCalculationError?: DetailsNonNullableFields$6;
    orderValidationErrors: ApplicationErrorNonNullableFields$g[];
    membershipError?: DetailsNonNullableFields$6;
    discountsCalculationError?: DetailsNonNullableFields$6;
}
interface GiftCardNonNullableFields$4 {
    _id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields$2;
    appId: string;
}
interface CouponNonNullableFields$6 {
    _id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields$2;
    name: string;
    couponType: string;
}
interface MerchantDiscountNonNullableFields$6 {
    amount?: MultiCurrencyPriceNonNullableFields$2;
}
interface DiscountRuleNameNonNullableFields$6 {
    original: string;
}
interface DiscountRuleNonNullableFields$6 {
    _id: string;
    name?: DiscountRuleNameNonNullableFields$6;
    amount?: MultiCurrencyPriceNonNullableFields$2;
}
interface LineItemDiscountNonNullableFields$6 {
    _id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields$2;
}
interface AppliedDiscountNonNullableFields$6 {
    coupon?: CouponNonNullableFields$6;
    merchantDiscount?: MerchantDiscountNonNullableFields$6;
    discountRule?: DiscountRuleNonNullableFields$6;
    discountType: DiscountType$6;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$6[];
}
interface CustomFieldNonNullableFields$4 {
    title: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields$2 {
    fallbackReason: FallbackReason$2;
    error?: ApplicationErrorNonNullableFields$g;
}
interface TaxCalculationDetailsNonNullableFields$2 {
    manualRateReason: ManualCalculationReason$2;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields$2;
    rateType: RateType$2;
}
interface AggregatedTaxBreakdownNonNullableFields$2 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType$6;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields$2;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields$2;
}
interface TaxSummaryNonNullableFields$6 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$2;
    totalTax?: MultiCurrencyPriceNonNullableFields$2;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields$2;
    totalExempt?: MultiCurrencyPriceNonNullableFields$2;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields$2[];
}
interface CreatedByNonNullableFields$4 {
    userId: string;
    memberId: string;
    visitorId: string;
    appId: string;
}
interface MembershipNameNonNullableFields$6 {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields$2 {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields$2 {
    _id: string;
    appId: string;
    name?: MembershipNameNonNullableFields$6;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields$2;
}
interface InvalidMembershipNonNullableFields$2 {
    membership?: MembershipNonNullableFields$2;
    reason: string;
}
interface SelectedMembershipNonNullableFields$2 {
    _id: string;
    appId: string;
    lineItemIds: string[];
}
interface SelectedMembershipsNonNullableFields {
    memberships: SelectedMembershipNonNullableFields$2[];
}
interface MembershipOptionsNonNullableFields$2 {
    eligibleMemberships: MembershipNonNullableFields$2[];
    invalidMemberships: InvalidMembershipNonNullableFields$2[];
    selectedMemberships?: SelectedMembershipsNonNullableFields;
}
interface AdditionalFeeNonNullableFields$4 {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields$2;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$6;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields$2;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields$2;
    lineItemIds: string[];
}
interface ConversionInfoNonNullableFields {
    siteCurrency: string;
    conversionRate: string;
}
interface OtherNonNullableFields {
    name: NameInOther;
}
interface TargetLineItemNonNullableFields {
    name: NameInLineItem;
    suggestedFix: SuggestedFix;
}
interface TargetNonNullableFields {
    other?: OtherNonNullableFields;
    lineItem?: TargetLineItemNonNullableFields;
}
interface ViolationNonNullableFields {
    severity: Severity;
    target?: TargetNonNullableFields;
}
interface CustomSettingsNonNullableFields {
    lockGiftCard: boolean;
    lockCouponCode: boolean;
    disabledPolicyAgreementCheckbox: boolean;
    disabledManualPayment: boolean;
}
interface CustomContentReferenceNonNullableFields$2 {
    appId: string;
    componentId: string;
}
interface ExternalReferenceNonNullableFields$2 {
    appId: string;
}
interface CheckoutNonNullableFields {
    lineItems: LineItemNonNullableFields[];
    billingInfo?: AddressWithContactNonNullableFields$4;
    shippingInfo?: ShippingInfoNonNullableFields;
    buyerInfo?: BuyerInfoNonNullableFields$4;
    conversionCurrency: string;
    priceSummary?: PriceSummaryNonNullableFields$6;
    calculationErrors?: CalculationErrorsNonNullableFields$4;
    giftCard?: GiftCardNonNullableFields$4;
    appliedDiscounts: AppliedDiscountNonNullableFields$6[];
    customFields: CustomFieldNonNullableFields$4[];
    weightUnit: WeightUnit$8;
    taxSummary?: TaxSummaryNonNullableFields$6;
    currency: string;
    channelType: ChannelType$4;
    siteLanguage: string;
    buyerLanguage: string;
    completed: boolean;
    taxIncludedInPrice: boolean;
    createdBy?: CreatedByNonNullableFields$4;
    payNow?: PriceSummaryNonNullableFields$6;
    payLater?: PriceSummaryNonNullableFields$6;
    membershipOptions?: MembershipOptionsNonNullableFields$2;
    additionalFees: AdditionalFeeNonNullableFields$4[];
    conversionInfo?: ConversionInfoNonNullableFields;
    payNowTotalAfterGiftCard?: MultiCurrencyPriceNonNullableFields$2;
    violations: ViolationNonNullableFields[];
    totalAfterGiftCard?: MultiCurrencyPriceNonNullableFields$2;
    customSettings?: CustomSettingsNonNullableFields;
    customContentReference?: CustomContentReferenceNonNullableFields$2;
    externalReference?: ExternalReferenceNonNullableFields$2;
}
interface CreateCheckoutResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface GetCheckoutResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface GetCheckoutByCartIdResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface GetCheckoutURLResponseNonNullableFields {
    checkoutUrl: string;
}
interface UpdateCheckoutResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface RemoveCouponResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface RemoveGiftCardResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface RemoveOverrideCheckoutUrlResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface AddToCheckoutResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface RemoveLineItemsResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface CreateOrderResponseNonNullableFields$2 {
    orderId: string;
    subscriptionId: string;
}
interface UpdateLineItemsQuantityResponseNonNullableFields {
    checkout?: CheckoutNonNullableFields;
}
interface GetCheckoutPaymentSettingsResponseNonNullableFields {
    blockedPaymentOptions: GetCheckoutPaymentSettingsResponsePaymentOption[];
}

type __PublicMethodMetaInfo$k<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createCheckout(): __PublicMethodMetaInfo$k<'POST', {}, CreateCheckoutRequest, CreateCheckoutRequest$1, CreateCheckoutResponse & CreateCheckoutResponseNonNullableFields, CreateCheckoutResponse$1 & CreateCheckoutResponseNonNullableFields$1>;
declare function getCheckout(): __PublicMethodMetaInfo$k<'GET', {
    id: string;
}, GetCheckoutRequest, GetCheckoutRequest$1, GetCheckoutResponse & GetCheckoutResponseNonNullableFields, GetCheckoutResponse$1 & GetCheckoutResponseNonNullableFields$1>;
declare function getCheckoutByCartId(): __PublicMethodMetaInfo$k<'GET', {
    id: string;
}, GetCheckoutByCartIdRequest, GetCheckoutByCartIdRequest$1, GetCheckoutByCartIdResponse & GetCheckoutByCartIdResponseNonNullableFields, GetCheckoutByCartIdResponse$1 & GetCheckoutByCartIdResponseNonNullableFields$1>;
declare function getCheckoutUrl(): __PublicMethodMetaInfo$k<'GET', {
    id: string;
}, GetCheckoutURLRequest, GetCheckoutURLRequest$1, GetCheckoutURLResponse & GetCheckoutURLResponseNonNullableFields, GetCheckoutURLResponse$1 & GetCheckoutURLResponseNonNullableFields$1>;
declare function updateCheckout(): __PublicMethodMetaInfo$k<'PATCH', {
    checkoutId: string;
}, UpdateCheckoutRequest, UpdateCheckoutRequest$1, UpdateCheckoutResponse & UpdateCheckoutResponseNonNullableFields, UpdateCheckoutResponse$1 & UpdateCheckoutResponseNonNullableFields$1>;
declare function removeCoupon(): __PublicMethodMetaInfo$k<'POST', {
    id: string;
}, RemoveCouponRequest, RemoveCouponRequest$1, RemoveCouponResponse & RemoveCouponResponseNonNullableFields, RemoveCouponResponse$1 & RemoveCouponResponseNonNullableFields$1>;
declare function removeGiftCard(): __PublicMethodMetaInfo$k<'POST', {
    id: string;
}, RemoveGiftCardRequest, RemoveGiftCardRequest$1, RemoveGiftCardResponse & RemoveGiftCardResponseNonNullableFields, RemoveGiftCardResponse$1 & RemoveGiftCardResponseNonNullableFields$1>;
declare function removeOverrideCheckoutUrl(): __PublicMethodMetaInfo$k<'POST', {
    id: string;
}, RemoveOverrideCheckoutUrlRequest, RemoveOverrideCheckoutUrlRequest$1, RemoveOverrideCheckoutUrlResponse & RemoveOverrideCheckoutUrlResponseNonNullableFields, RemoveOverrideCheckoutUrlResponse$1 & RemoveOverrideCheckoutUrlResponseNonNullableFields$1>;
declare function addToCheckout(): __PublicMethodMetaInfo$k<'POST', {
    id: string;
}, AddToCheckoutRequest, AddToCheckoutRequest$1, AddToCheckoutResponse & AddToCheckoutResponseNonNullableFields, AddToCheckoutResponse$1 & AddToCheckoutResponseNonNullableFields$1>;
declare function removeLineItems(): __PublicMethodMetaInfo$k<'POST', {
    id: string;
}, RemoveLineItemsRequest, RemoveLineItemsRequest$1, RemoveLineItemsResponse & RemoveLineItemsResponseNonNullableFields, RemoveLineItemsResponse$1 & RemoveLineItemsResponseNonNullableFields$1>;
declare function createOrder$1(): __PublicMethodMetaInfo$k<'POST', {
    id: string;
}, CreateOrderRequest$2, CreateOrderRequest$3, CreateOrderResponse$2 & CreateOrderResponseNonNullableFields$2, CreateOrderResponse$3 & CreateOrderResponseNonNullableFields$3>;
declare function markCheckoutAsCompleted(): __PublicMethodMetaInfo$k<'POST', {
    id: string;
}, MarkCheckoutAsCompletedRequest, MarkCheckoutAsCompletedRequest$1, MarkCheckoutAsCompletedResponse, MarkCheckoutAsCompletedResponse$1>;
declare function updateLineItemsQuantity(): __PublicMethodMetaInfo$k<'POST', {
    id: string;
}, UpdateLineItemsQuantityRequest, UpdateLineItemsQuantityRequest$1, UpdateLineItemsQuantityResponse & UpdateLineItemsQuantityResponseNonNullableFields, UpdateLineItemsQuantityResponse$1 & UpdateLineItemsQuantityResponseNonNullableFields$1>;
declare function getCheckoutPaymentSettings(): __PublicMethodMetaInfo$k<'GET', {
    id: string;
}, GetCheckoutPaymentSettingsRequest, GetCheckoutPaymentSettingsRequest$1, GetCheckoutPaymentSettingsResponse & GetCheckoutPaymentSettingsResponseNonNullableFields, GetCheckoutPaymentSettingsResponse$1 & GetCheckoutPaymentSettingsResponseNonNullableFields$1>;

declare const meta$k_addToCheckout: typeof addToCheckout;
declare const meta$k_createCheckout: typeof createCheckout;
declare const meta$k_getCheckout: typeof getCheckout;
declare const meta$k_getCheckoutByCartId: typeof getCheckoutByCartId;
declare const meta$k_getCheckoutPaymentSettings: typeof getCheckoutPaymentSettings;
declare const meta$k_getCheckoutUrl: typeof getCheckoutUrl;
declare const meta$k_markCheckoutAsCompleted: typeof markCheckoutAsCompleted;
declare const meta$k_removeCoupon: typeof removeCoupon;
declare const meta$k_removeGiftCard: typeof removeGiftCard;
declare const meta$k_removeLineItems: typeof removeLineItems;
declare const meta$k_removeOverrideCheckoutUrl: typeof removeOverrideCheckoutUrl;
declare const meta$k_updateCheckout: typeof updateCheckout;
declare const meta$k_updateLineItemsQuantity: typeof updateLineItemsQuantity;
declare namespace meta$k {
  export { type __PublicMethodMetaInfo$k as __PublicMethodMetaInfo, meta$k_addToCheckout as addToCheckout, meta$k_createCheckout as createCheckout, createOrder$1 as createOrder, meta$k_getCheckout as getCheckout, meta$k_getCheckoutByCartId as getCheckoutByCartId, meta$k_getCheckoutPaymentSettings as getCheckoutPaymentSettings, meta$k_getCheckoutUrl as getCheckoutUrl, meta$k_markCheckoutAsCompleted as markCheckoutAsCompleted, meta$k_removeCoupon as removeCoupon, meta$k_removeGiftCard as removeGiftCard, meta$k_removeLineItems as removeLineItems, meta$k_removeOverrideCheckoutUrl as removeOverrideCheckoutUrl, meta$k_updateCheckout as updateCheckout, meta$k_updateLineItemsQuantity as updateLineItemsQuantity };
}

interface CheckoutSettings$1 {
    /** Checkout policies. */
    checkoutPolicies?: CheckoutPolicies$1;
    /** Settings that apply to checkout fields and the checkout process. */
    checkoutFields?: CheckoutFields$1;
    /** Checkout brand settings. */
    checkoutBrand?: CheckoutBrand$1;
    /**
     * Date and time the checkout settings were created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the checkout settings were updated.
     * @readonly
     */
    updatedDate?: Date | null;
}
interface CheckoutPolicies$1 {
    /** Terms and conditions. */
    termsAndConditions?: TermsAndConditionsPolicy$1;
    /** Privacy policy. */
    privacyPolicy?: PrivacyPolicy$1;
    /** Return policy. */
    returnPolicy?: ReturnPolicy$1;
    /** Digital item policy. */
    digitalItemPolicy?: DigitalItemPolicy$1;
    /** "Contact us" information. */
    contactUs?: ContactUsPolicy$1;
    /** Custom policy. */
    customPolicy?: CustomCheckoutPolicy$1;
}
interface TermsAndConditionsPolicy$1 {
    /**
     * Whether the terms & conditions policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Terms and conditions policy content. */
    content?: string | null;
}
interface PrivacyPolicy$1 {
    /**
     * Whether the privacy policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Privacy policy content. */
    content?: string | null;
}
interface ReturnPolicy$1 {
    /**
     * Whether the return policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Return policy content. */
    content?: string | null;
}
interface DigitalItemPolicy$1 {
    /**
     * Whether the digital item policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Digital item policy content. */
    content?: string | null;
}
interface ContactUsPolicy$1 {
    /**
     * Whether the contact us policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Contact us policy content. */
    content?: string | null;
}
interface CustomCheckoutPolicy$1 {
    /**
     * Whether the policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Policy content. */
    content?: string | null;
    /** Policy title. */
    title?: string | null;
}
interface CheckoutFields$1 {
    /**
     * Subscription checkbox. <br><br>
     *
     * Defaults:
     * + `visible`: `false`
     * + `checkedByDefault`: `false`
     */
    subscriptionCheckbox?: CheckboxField$1;
    /**
     * Policy agreement checkbox. <br><br>
     *
     * Defaults:
     * + `visible`: `true`
     * + `checkedByDefault`: `true`
     */
    policyAgreementCheckbox?: CheckboxField$1;
    /**
     * Whether the ability to redeem a gift card is enabled. <br><br>
     *
     * Default: `false`
     */
    giftCardRedeemEnabled?: boolean | null;
    /**
     * Whether to allow for MIT transactions. <br><br>
     *
     * Default: `false`
     */
    mitEnabled?: boolean | null;
    /**
     * Whether to allow for Auth & Capture transactions. <br><br>
     *
     * Default: `false`
     */
    delayCaptureEnabled?: boolean | null;
    /**
     * Whether to automatically capture the transaction before the authorization expires.
     *
     * Default: `true`
     * >**Note:** this setting is only relevant when `delay_capture_enabled: true`.
     */
    captureBeforeExpiryEnabled?: boolean | null;
}
interface CheckboxField$1 {
    /** Whether the checkbox is visible to the customer. */
    visible?: boolean | null;
    /** Whether the checkbox is checked by default. */
    checkedByDefault?: boolean | null;
}
interface CheckoutBrand$1 {
    /** Checkout header. */
    header?: CheckoutHeader$1;
}
interface CheckoutHeader$1 {
    /**
     * Textual content to be included in the header (e.g. Business Name)
     * TODO: update maxLength validation once limitation is known
     */
    text?: string | null;
    /** Specifications for when a logo is included in the header. */
    logo?: Logo$1;
    /**
     * Alignment within the header.
     *
     * >**Note:** `SIDE` alignment is decided depending on the locale's language. For example, scripts like Hebrew and Arabic will automatically align right-to-left.
     */
    alignment?: Alignment$1;
    /**
     * Whether to display the 'Checkout' label within the header.
     * Depending on the locale, the label may be translated.
     */
    displayCheckoutLabel?: boolean | null;
}
interface Logo$1 {
    /** Size of the logo. */
    size?: LogoSize$1;
}
declare enum LogoSize$1 {
    UNKNOWN_LOGO_SIZE = "UNKNOWN_LOGO_SIZE",
    SMALL = "SMALL",
    MEDIUM = "MEDIUM",
    LARGE = "LARGE"
}
declare enum Alignment$1 {
    UNKNOWN_ALIGNMENT = "UNKNOWN_ALIGNMENT",
    SIDE = "SIDE",
    CENTER = "CENTER"
}
interface GetCheckoutSettingsRequest$1 {
}
interface GetCheckoutSettingsResponse$1 {
    /** Checkout settings. */
    checkoutSettings?: CheckoutSettings$1;
}
interface UpdateCheckoutSettingsRequest$1 {
    /** Checkout settings to update. */
    checkoutSettings: CheckoutSettings$1;
}
interface UpdateCheckoutSettingsResponse$1 {
    /** The updated checkout settings. */
    checkoutSettings?: CheckoutSettings$1;
}
interface ImageNonNullableFields$4 {
    id: string;
    url: string;
    height: number;
    width: number;
}
interface LogoNonNullableFields$1 {
    image?: ImageNonNullableFields$4;
    size: LogoSize$1;
}
interface CheckoutHeaderNonNullableFields$1 {
    logo?: LogoNonNullableFields$1;
    alignment: Alignment$1;
}
interface CheckoutBrandNonNullableFields$1 {
    header?: CheckoutHeaderNonNullableFields$1;
}
interface CheckoutSettingsNonNullableFields$1 {
    checkoutBrand?: CheckoutBrandNonNullableFields$1;
}
interface GetCheckoutSettingsResponseNonNullableFields$1 {
    checkoutSettings?: CheckoutSettingsNonNullableFields$1;
}
interface UpdateCheckoutSettingsResponseNonNullableFields$1 {
    checkoutSettings?: CheckoutSettingsNonNullableFields$1;
}

interface CheckoutSettings {
    /** Checkout policies. */
    checkoutPolicies?: CheckoutPolicies;
    /** Settings that apply to checkout fields and the checkout process. */
    checkoutFields?: CheckoutFields;
    /** Checkout brand settings. */
    checkoutBrand?: CheckoutBrand;
    /**
     * Date and time the checkout settings were created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the checkout settings were updated.
     * @readonly
     */
    _updatedDate?: Date | null;
}
interface CheckoutPolicies {
    /** Terms and conditions. */
    termsAndConditions?: TermsAndConditionsPolicy;
    /** Privacy policy. */
    privacyPolicy?: PrivacyPolicy;
    /** Return policy. */
    returnPolicy?: ReturnPolicy;
    /** Digital item policy. */
    digitalItemPolicy?: DigitalItemPolicy;
    /** "Contact us" information. */
    contactUs?: ContactUsPolicy;
    /** Custom policy. */
    customPolicy?: CustomCheckoutPolicy;
}
interface TermsAndConditionsPolicy {
    /**
     * Whether the terms & conditions policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Terms and conditions policy content. */
    content?: string | null;
}
interface PrivacyPolicy {
    /**
     * Whether the privacy policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Privacy policy content. */
    content?: string | null;
}
interface ReturnPolicy {
    /**
     * Whether the return policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Return policy content. */
    content?: string | null;
}
interface DigitalItemPolicy {
    /**
     * Whether the digital item policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Digital item policy content. */
    content?: string | null;
}
interface ContactUsPolicy {
    /**
     * Whether the contact us policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Contact us policy content. */
    content?: string | null;
}
interface CustomCheckoutPolicy {
    /**
     * Whether the policy is visible to the customer on the checkout page.
     * Default: `false`.
     */
    visible?: boolean | null;
    /** Policy content. */
    content?: string | null;
    /** Policy title. */
    title?: string | null;
}
interface CheckoutFields {
    /**
     * Subscription checkbox.
     * Default:
     * - `visible`: `false`,
     * - `checkedByDefault`: `false`
     */
    subscriptionCheckbox?: CheckboxField;
    /**
     * Policy agreement checkbox.
     * Default:
     * - `visible`: `true`,
     * - `checkedByDefault`: `true`
     */
    policyAgreementCheckbox?: CheckboxField;
    /**
     * Whether the ability to redeem a gift card is enabled.
     * Default: `false`.
     */
    giftCardRedeemEnabled?: boolean | null;
    /**
     * Whether to allow for MIT transactions.
     * Default: `false`.
     */
    mitEnabled?: boolean | null;
    /**
     * Whether to allow for Auth & Capture transactions. <br><br>
     *
     * Default: `false`
     */
    delayCaptureEnabled?: boolean | null;
    /**
     * Whether to automatically capture the transaction before the authorization expires.
     *
     * Default: `true`
     * >**Note:** this setting is only relevant when `delay_capture_enabled: true`.
     */
    captureBeforeExpiryEnabled?: boolean | null;
}
interface CheckboxField {
    /** Whether the checkbox is visible to the customer. */
    visible?: boolean | null;
    /** Whether the checkbox is checked by default. */
    checkedByDefault?: boolean | null;
}
interface CheckoutBrand {
    /** Checkout header. */
    header?: CheckoutHeader;
}
interface CheckoutHeader {
    /**
     * Textual content to be included in the header (e.g. Business Name)
     * TODO: update maxLength validation once limitation is known
     */
    text?: string | null;
    /** Specifications for when a logo is included in the header. */
    logo?: Logo;
    /**
     * Alignment within the header.
     *
     * >**Note:** `SIDE` alignment is decided depending on the locale's language. For example, scripts like Hebrew and Arabic will automatically align right-to-left.
     */
    alignment?: Alignment;
    /**
     * Whether to display the 'Checkout' label within the header.
     * Depending on the locale, the label may be translated.
     */
    displayCheckoutLabel?: boolean | null;
}
interface Logo {
    /** Size of the logo. */
    size?: LogoSize;
}
declare enum LogoSize {
    UNKNOWN_LOGO_SIZE = "UNKNOWN_LOGO_SIZE",
    SMALL = "SMALL",
    MEDIUM = "MEDIUM",
    LARGE = "LARGE"
}
declare enum Alignment {
    UNKNOWN_ALIGNMENT = "UNKNOWN_ALIGNMENT",
    SIDE = "SIDE",
    CENTER = "CENTER"
}
interface GetCheckoutSettingsRequest {
}
interface GetCheckoutSettingsResponse {
    /** Checkout settings. */
    checkoutSettings?: CheckoutSettings;
}
interface UpdateCheckoutSettingsRequest {
    /** Checkout settings to update. */
    checkoutSettings: CheckoutSettings;
}
interface UpdateCheckoutSettingsResponse {
    /** The updated checkout settings. */
    checkoutSettings?: CheckoutSettings;
}
interface LogoNonNullableFields {
    image: string;
    size: LogoSize;
}
interface CheckoutHeaderNonNullableFields {
    logo?: LogoNonNullableFields;
    alignment: Alignment;
}
interface CheckoutBrandNonNullableFields {
    header?: CheckoutHeaderNonNullableFields;
}
interface CheckoutSettingsNonNullableFields {
    checkoutBrand?: CheckoutBrandNonNullableFields;
}
interface GetCheckoutSettingsResponseNonNullableFields {
    checkoutSettings?: CheckoutSettingsNonNullableFields;
}
interface UpdateCheckoutSettingsResponseNonNullableFields {
    checkoutSettings?: CheckoutSettingsNonNullableFields;
}

type __PublicMethodMetaInfo$j<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getCheckoutSettings(): __PublicMethodMetaInfo$j<'GET', {}, GetCheckoutSettingsRequest, GetCheckoutSettingsRequest$1, GetCheckoutSettingsResponse & GetCheckoutSettingsResponseNonNullableFields, GetCheckoutSettingsResponse$1 & GetCheckoutSettingsResponseNonNullableFields$1>;
declare function updateCheckoutSettings(): __PublicMethodMetaInfo$j<'PATCH', {}, UpdateCheckoutSettingsRequest, UpdateCheckoutSettingsRequest$1, UpdateCheckoutSettingsResponse & UpdateCheckoutSettingsResponseNonNullableFields, UpdateCheckoutSettingsResponse$1 & UpdateCheckoutSettingsResponseNonNullableFields$1>;

declare const meta$j_getCheckoutSettings: typeof getCheckoutSettings;
declare const meta$j_updateCheckoutSettings: typeof updateCheckoutSettings;
declare namespace meta$j {
  export { type __PublicMethodMetaInfo$j as __PublicMethodMetaInfo, meta$j_getCheckoutSettings as getCheckoutSettings, meta$j_updateCheckoutSettings as updateCheckoutSettings };
}

interface CheckoutTemplate$1 {
    /**
     * Checkout template ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Status of the checkout template.
     *
     * When `status` is `INACTIVE` checkouts will not be created with this template `id`. Instead, the endpoint will redirect to the domain site.
     *
     * Default: `ACTIVE`
     */
    status?: Status$5;
    /** Custom settings to apply to the checkout page created from this template. */
    customization?: CheckoutCustomization$1;
    /**
     * Catalog line items.
     *
     * Max: 300 items
     */
    lineItems?: V1LineItem$1[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * Max: 300 items
     */
    customLineItems?: CustomLineItem$3[];
    /**
     * Coupon code.
     *
     * Note that a checkout can only hold one `couponCode` at a time. If an additional `couponCode` is added, it will override the existing `couponCode`.
     * For additional information, see the [Coupons API](https://dev.wix.com/docs/rest/api-reference/coupons/coupons/introduction).
     */
    couponCode?: string | null;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference$1;
}
declare enum Status$5 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE"
}
interface CheckoutCustomization$1 {
    /** Web client customizations. These customizations only apply to the standard Wix checkout page. */
    webClient?: WebClientCustomization$1;
    /**
     * Whether to lock the ability to add or remove a gift card.
     *
     * Default: `false`
     */
    lockedGiftCard?: boolean;
    /**
     * Whether to lock the ability to apply or remove a coupon code.
     *
     * Default: `false`
     */
    lockedCoupon?: boolean;
    /**
     * Whether to disable manual payment option for this checkout.
     *
     * Default: `false`
     */
    disabledManualPayment?: boolean;
}
interface WebClientCustomization$1 {
    /**
     * Whether to disable the "Continue shopping" button.
     *
     * Default: `false`
     */
    disabledContinueShoppingButton?: boolean;
    /**
     * Whether to disable policy agreement checkout in the checkout page
     *
     * Default: `false`
     */
    disabledPolicyAgreementCheckbox?: boolean;
}
interface V1LineItem$1 {
    /**
     * Item quantity.
     *
     * Min: `1` <br />
     * Max: `100000`
     */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$b;
    /** Overriding values for catalog item properties. */
    catalogOverrideFields?: CatalogOverrideFields$1;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$b {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface CatalogOverrideFields$1 {
    /** Item name. */
    productName?: ProductName$5;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine$5[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$9;
    /** Item image. */
    image?: Image$3;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption$1;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface ProductName$5 {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface DescriptionLine$5 extends DescriptionLineValueOneOf$5, DescriptionLineDescriptionLineValueOneOf$5 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$5;
    /** Description line color value. */
    colorInfo?: Color$5;
    /** Description line name. */
    name?: DescriptionLineName$5;
}
/** @oneof */
interface DescriptionLineValueOneOf$5 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$5;
    /** Description line color value. */
    colorInfo?: Color$5;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$5 {
}
interface DescriptionLineName$5 {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$5 {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$5 {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$5 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface PhysicalProperties$9 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface Image$3 {
    /** WixMedia image ID. */
    id?: string;
    /** Original image height. */
    height?: number;
    /** Original image width. */
    width?: number;
    /** Image alt text. Optional. */
    altText?: string | null;
    /** Image filename. Optional. */
    filename?: string | null;
}
interface PaymentOption$1 {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType$7;
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$7 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface CustomLineItem$3 {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$5;
    /** Custom line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine$5[];
    /** Custom line item's media. */
    media?: Image$3;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName$5;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: PageUrlV2$1;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$7;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$9;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$7;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties$3;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$b;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface PriceDescription$5 {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PageUrlV2$1 {
    /** The relative path for the page within the site. For example, `/product-page/a-product`. */
    relativePath?: string;
    /** The page's full URL. For example, `https://mysite.com/product-page/a-product`. */
    url?: string | null;
}
interface ItemType$7 extends ItemTypeItemTypeDataOneOf$7 {
    /** Preset item type. */
    preset?: ItemTypeItemType$7;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$7 {
    /** Preset item type. */
    preset?: ItemTypeItemType$7;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$7 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$7 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
declare enum FileType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
interface ServiceProperties$3 {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface CustomContentReference$1 {
    /**
     * ID of the app providing the content.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    appId?: string;
    /**
     * ID of the component within the app it belongs to.
     *
     * You can get your component's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    componentId?: string;
}
interface CreateCheckoutTemplateRequest$1 {
    /** Checkout template to create. */
    checkoutTemplate: CheckoutTemplate$1;
}
interface CreateCheckoutTemplateResponse$1 {
    /** Created checkout template. */
    checkoutTemplate?: CheckoutTemplate$1;
}
interface GetCheckoutTemplateRequest$1 {
    /** ID of the checkout template to retrieve. */
    checkoutTemplateId: string;
}
interface GetCheckoutTemplateResponse$1 {
    /** Retrieved checkout template. */
    checkoutTemplate?: CheckoutTemplate$1;
}
interface UpdateCheckoutTemplateRequest$1 {
    /** Checkout template info to update. */
    checkoutTemplate: CheckoutTemplate$1;
}
interface UpdateCheckoutTemplateResponse$1 {
    /** Updated checkout template. */
    checkoutTemplate?: CheckoutTemplate$1;
}
interface DeleteCheckoutTemplateRequest$1 {
    /** ID of the checkout template to delete. */
    checkoutTemplateId: string;
}
interface DeleteCheckoutTemplateResponse$1 {
}
interface QueryCheckoutTemplatesRequest$1 {
    /** Query options. */
    query?: CursorQuery$d;
}
interface CursorQuery$d extends CursorQueryPagingMethodOneOf$d {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$l;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     *
     * Example of operators: `$eq`, `$ne`, `$in`, `$startsWith`, `$exists`, `$hasSome`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$l[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$d {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$l;
}
interface Sorting$l {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$l;
}
declare enum SortOrder$l {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$l {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results. </ br>
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryCheckoutTemplatesResponse$1 {
    /** Retrieved checkout templates. */
    checkoutTemplates?: CheckoutTemplate$1[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$j;
}
interface CursorPagingMetadata$j {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors$l;
    /**
     * Indicates if there are more results after the current page.
     * If `true`, another page of results can be retrieved.
     * If `false`, this is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$l {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
interface CreateCheckoutFromTemplateRequest$1 {
    /** ID of the checkout template to use to create a checkout from. */
    checkoutTemplateId: string;
    /** ID of the site associated with the checkout template. */
    siteId: string;
}
interface CreateCheckoutFromTemplateResponse$1 {
    /** ID of the created checkout. */
    checkoutId?: string;
    /** URL of the created checkout page. */
    checkoutUrl?: string;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}
interface CreateAndRedirectToCheckoutRequest$1 {
    /** ID of the checkout template to use to create a checkout. */
    checkoutTemplateId: string;
    /** ID of the site associated with the checkout template. */
    siteId: string;
}
interface RawHttpResponse$1 {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry$1[];
}
interface HeadersEntry$1 {
    key?: string;
    value?: string;
}
interface WebClientCustomizationNonNullableFields$1 {
    disabledContinueShoppingButton: boolean;
    disabledPolicyAgreementCheckbox: boolean;
}
interface CheckoutCustomizationNonNullableFields$1 {
    webClient?: WebClientCustomizationNonNullableFields$1;
    lockedGiftCard: boolean;
    lockedCoupon: boolean;
    disabledManualPayment: boolean;
}
interface CatalogReferenceNonNullableFields$5 {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields$5 {
    original: string;
}
interface PlainTextValueNonNullableFields$5 {
    original: string;
}
interface ColorNonNullableFields$5 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$5 {
    original: string;
}
interface DescriptionLineNonNullableFields$5 {
    plainText?: PlainTextValueNonNullableFields$5;
    colorInfo?: ColorNonNullableFields$5;
    plainTextValue?: PlainTextValueNonNullableFields$5;
    color: string;
    name?: DescriptionLineNameNonNullableFields$5;
    lineType: DescriptionLineType$5;
}
interface PhysicalPropertiesNonNullableFields$5 {
    shippable: boolean;
}
interface ImageNonNullableFields$3 {
    id: string;
    height: number;
    width: number;
}
interface PaymentOptionNonNullableFields$1 {
    value: PaymentOptionType$7;
}
interface CatalogOverrideFieldsNonNullableFields$1 {
    productName?: ProductNameNonNullableFields$5;
    descriptionLines: DescriptionLineNonNullableFields$5[];
    physicalProperties?: PhysicalPropertiesNonNullableFields$5;
    image?: ImageNonNullableFields$3;
    paymentOption?: PaymentOptionNonNullableFields$1;
}
interface V1LineItemNonNullableFields$1 {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields$5;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields$1;
}
interface PriceDescriptionNonNullableFields$5 {
    original: string;
}
interface PageUrlV2NonNullableFields {
    relativePath: string;
}
interface ItemTypeNonNullableFields$5 {
    preset: ItemTypeItemType$7;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields$1 {
    frequency: SubscriptionFrequency$7;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields$5 {
    frequency: SubscriptionFrequency$7;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields$1;
}
interface TitleNonNullableFields$1 {
    original: string;
}
interface DescriptionNonNullableFields$1 {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields$1 {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$5;
    title?: TitleNonNullableFields$1;
    description?: DescriptionNonNullableFields$1;
}
interface SecuredMediaNonNullableFields$1 {
    id: string;
    fileName: string;
    fileType: FileType$1;
}
interface PolicyNonNullableFields$1 {
    title: string;
    content: string;
}
interface CustomLineItemNonNullableFields$1 {
    quantity: number;
    price: string;
    priceDescription?: PriceDescriptionNonNullableFields$5;
    descriptionLines: DescriptionLineNonNullableFields$5[];
    media?: ImageNonNullableFields$3;
    productName?: ProductNameNonNullableFields$5;
    url?: PageUrlV2NonNullableFields;
    itemType?: ItemTypeNonNullableFields$5;
    physicalProperties?: PhysicalPropertiesNonNullableFields$5;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields$1;
    digitalFile?: SecuredMediaNonNullableFields$1;
    paymentOption: PaymentOptionType$7;
    catalogReference?: CatalogReferenceNonNullableFields$5;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    savePaymentMethod: boolean;
    policies: PolicyNonNullableFields$1[];
}
interface CustomContentReferenceNonNullableFields$1 {
    appId: string;
    componentId: string;
}
interface ExternalReferenceNonNullableFields$1 {
    appId: string;
}
interface CheckoutTemplateNonNullableFields$1 {
    status: Status$5;
    customization?: CheckoutCustomizationNonNullableFields$1;
    lineItems: V1LineItemNonNullableFields$1[];
    customLineItems: CustomLineItemNonNullableFields$1[];
    customContentReference?: CustomContentReferenceNonNullableFields$1;
    externalReference?: ExternalReferenceNonNullableFields$1;
}
interface CreateCheckoutTemplateResponseNonNullableFields$1 {
    checkoutTemplate?: CheckoutTemplateNonNullableFields$1;
}
interface GetCheckoutTemplateResponseNonNullableFields$1 {
    checkoutTemplate?: CheckoutTemplateNonNullableFields$1;
}
interface UpdateCheckoutTemplateResponseNonNullableFields$1 {
    checkoutTemplate?: CheckoutTemplateNonNullableFields$1;
}
interface QueryCheckoutTemplatesResponseNonNullableFields$1 {
    checkoutTemplates: CheckoutTemplateNonNullableFields$1[];
}
interface CreateCheckoutFromTemplateResponseNonNullableFields$1 {
    checkoutId: string;
    checkoutUrl: string;
}
interface HeadersEntryNonNullableFields$1 {
    key: string;
    value: string;
}
interface RawHttpResponseNonNullableFields$1 {
    body: Uint8Array;
    headers: HeadersEntryNonNullableFields$1[];
}

interface CheckoutTemplate {
    /**
     * Checkout template ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Status of the checkout template.
     *
     * When `status` is `INACTIVE` checkouts will not be created with this template `_id`. Instead, the function will redirect to the domain site.
     *
     * Default: `ACTIVE`
     */
    status?: Status$4;
    /** Custom settings to apply to the checkout page created from this template. */
    customization?: CheckoutCustomization;
    /**
     * Catalog line items.
     *
     * Max: 300 items
     */
    lineItems?: V1LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * Max: 300 items
     */
    customLineItems?: CustomLineItem$2[];
    /**
     * Coupon code.
     *
     * Note that a checkout can only hold one `couponCode` at a time. If an additional `couponCode` is added, it will override the existing `couponCode`.
     * For additional information, see the Coupons API.
     */
    couponCode?: string | null;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference;
}
declare enum Status$4 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE"
}
interface CheckoutCustomization {
    /** Web client customizations. These customizations only apply to the standard Wix checkout page. */
    webClient?: WebClientCustomization;
    /**
     * Whether to lock the ability to add or remove a gift card.
     *
     * Default: `false`
     */
    lockedGiftCard?: boolean;
    /**
     * Whether to lock the ability to apply or remove a coupon code.
     *
     * Default: `false`
     */
    lockedCoupon?: boolean;
    /**
     * Whether to disable manual payment option for this checkout.
     *
     * Default: `false`
     */
    disabledManualPayment?: boolean;
}
interface WebClientCustomization {
    /**
     * Whether to disable the "Continue shopping" button.
     *
     * Default: `false`
     */
    disabledContinueShoppingButton?: boolean;
    /**
     * Whether to disable policy agreement checkout in the checkout page
     *
     * Default: `false`
     */
    disabledPolicyAgreementCheckbox?: boolean;
}
interface V1LineItem {
    /**
     * Item quantity.
     *
     * Min: `1` <br />
     * Max: `100000`
     */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$a;
    /** Overriding values for catalog item properties. */
    catalogOverrideFields?: CatalogOverrideFields;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$a {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface CatalogOverrideFields {
    /** Item name. */
    productName?: ProductName$4;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine$4[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$8;
    /** Item image. */
    image?: string;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption;
    /** Partial payment to be paid upfront during the checkout. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface ProductName$4 {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface DescriptionLine$4 extends DescriptionLineValueOneOf$4, DescriptionLineDescriptionLineValueOneOf$4 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$4;
    /** Description line color value. */
    colorInfo?: Color$4;
    /** Description line name. */
    name?: DescriptionLineName$4;
}
/** @oneof */
interface DescriptionLineValueOneOf$4 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$4;
    /** Description line color value. */
    colorInfo?: Color$4;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$4 {
}
interface DescriptionLineName$4 {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$4 {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$4 {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$4 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface PhysicalProperties$8 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface PaymentOption {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType$6;
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$6 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface CustomLineItem$2 {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$4;
    /** Custom line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine$4[];
    /** Custom line item's media. */
    media?: string;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    _id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName$4;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: string;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$6;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$8;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$6;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties$2;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$a;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
interface PriceDescription$4 {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface ItemType$6 extends ItemTypeItemTypeDataOneOf$6 {
    /** Preset item type. */
    preset?: ItemTypeItemType$6;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$6 {
    /** Preset item type. */
    preset?: ItemTypeItemType$6;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$6 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$6 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
declare enum FileType {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
interface ServiceProperties$2 {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface CustomContentReference {
    /**
     * ID of the app providing the content.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    appId?: string;
    /**
     * ID of the component within the app it belongs to.
     *
     * You can get your component's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    componentId?: string;
}
interface CreateCheckoutTemplateRequest {
    /** Checkout template to create. */
    checkoutTemplate: CheckoutTemplate;
}
interface CreateCheckoutTemplateResponse {
    /** Created checkout template. */
    checkoutTemplate?: CheckoutTemplate;
}
interface GetCheckoutTemplateRequest {
    /** ID of the checkout template to retrieve. */
    checkoutTemplateId: string;
}
interface GetCheckoutTemplateResponse {
    /** Retrieved checkout template. */
    checkoutTemplate?: CheckoutTemplate;
}
interface UpdateCheckoutTemplateRequest {
    /** Checkout template info to update. */
    checkoutTemplate: CheckoutTemplate;
}
interface UpdateCheckoutTemplateResponse {
    /** Updated checkout template. */
    checkoutTemplate?: CheckoutTemplate;
}
interface DeleteCheckoutTemplateRequest {
    /** ID of the checkout template to delete. */
    checkoutTemplateId: string;
}
interface DeleteCheckoutTemplateResponse {
}
interface QueryCheckoutTemplatesRequest {
    /** Query options. */
    query?: CursorQuery$c;
}
interface CursorQuery$c extends CursorQueryPagingMethodOneOf$c {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$k;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     *
     * Example of operators: `$eq`, `$ne`, `$in`, `$startsWith`, `$exists`, `$hasSome`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$k[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$c {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$k;
}
interface Sorting$k {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$k;
}
declare enum SortOrder$k {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$k {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results. </ br>
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryCheckoutTemplatesResponse {
    /** Retrieved checkout templates. */
    checkoutTemplates?: CheckoutTemplate[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$i;
}
interface CursorPagingMetadata$i {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors$k;
    /**
     * Indicates if there are more results after the current page.
     * If `true`, another page of results can be retrieved.
     * If `false`, this is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$k {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
interface CreateCheckoutFromTemplateRequest {
    /** ID of the checkout template to use to create a checkout from. */
    checkoutTemplateId: string;
    /** ID of the site associated with the checkout template. */
    siteId: string;
}
interface CreateCheckoutFromTemplateResponse {
    /** ID of the created checkout. */
    checkoutId?: string;
    /** URL of the created checkout page. */
    checkoutUrl?: string;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}
interface CreateAndRedirectToCheckoutRequest {
    /** ID of the checkout template to use to create a checkout. */
    checkoutTemplateId: string;
    /** ID of the site associated with the checkout template. */
    siteId: string;
}
interface RawHttpResponse {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry[];
}
interface HeadersEntry {
    key?: string;
    value?: string;
}
interface WebClientCustomizationNonNullableFields {
    disabledContinueShoppingButton: boolean;
    disabledPolicyAgreementCheckbox: boolean;
}
interface CheckoutCustomizationNonNullableFields {
    webClient?: WebClientCustomizationNonNullableFields;
    lockedGiftCard: boolean;
    lockedCoupon: boolean;
    disabledManualPayment: boolean;
}
interface CatalogReferenceNonNullableFields$4 {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields$4 {
    original: string;
}
interface PlainTextValueNonNullableFields$4 {
    original: string;
}
interface ColorNonNullableFields$4 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$4 {
    original: string;
}
interface DescriptionLineNonNullableFields$4 {
    plainText?: PlainTextValueNonNullableFields$4;
    colorInfo?: ColorNonNullableFields$4;
    plainTextValue?: PlainTextValueNonNullableFields$4;
    color: string;
    name?: DescriptionLineNameNonNullableFields$4;
    lineType: DescriptionLineType$4;
}
interface PhysicalPropertiesNonNullableFields$4 {
    shippable: boolean;
}
interface PaymentOptionNonNullableFields {
    value: PaymentOptionType$6;
}
interface CatalogOverrideFieldsNonNullableFields {
    productName?: ProductNameNonNullableFields$4;
    descriptionLines: DescriptionLineNonNullableFields$4[];
    physicalProperties?: PhysicalPropertiesNonNullableFields$4;
    image: string;
    paymentOption?: PaymentOptionNonNullableFields;
}
interface V1LineItemNonNullableFields {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields$4;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields;
}
interface PriceDescriptionNonNullableFields$4 {
    original: string;
}
interface ItemTypeNonNullableFields$4 {
    preset: ItemTypeItemType$6;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields {
    frequency: SubscriptionFrequency$6;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields$4 {
    frequency: SubscriptionFrequency$6;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields;
}
interface TitleNonNullableFields {
    original: string;
}
interface DescriptionNonNullableFields {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$4;
    title?: TitleNonNullableFields;
    description?: DescriptionNonNullableFields;
}
interface SecuredMediaNonNullableFields {
    _id: string;
    fileName: string;
    fileType: FileType;
}
interface PolicyNonNullableFields {
    title: string;
    content: string;
}
interface CustomLineItemNonNullableFields {
    quantity: number;
    price: string;
    priceDescription?: PriceDescriptionNonNullableFields$4;
    descriptionLines: DescriptionLineNonNullableFields$4[];
    media: string;
    productName?: ProductNameNonNullableFields$4;
    url: string;
    itemType?: ItemTypeNonNullableFields$4;
    physicalProperties?: PhysicalPropertiesNonNullableFields$4;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields;
    digitalFile?: SecuredMediaNonNullableFields;
    paymentOption: PaymentOptionType$6;
    catalogReference?: CatalogReferenceNonNullableFields$4;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    savePaymentMethod: boolean;
    policies: PolicyNonNullableFields[];
}
interface CustomContentReferenceNonNullableFields {
    appId: string;
    componentId: string;
}
interface ExternalReferenceNonNullableFields {
    appId: string;
}
interface CheckoutTemplateNonNullableFields {
    status: Status$4;
    customization?: CheckoutCustomizationNonNullableFields;
    lineItems: V1LineItemNonNullableFields[];
    customLineItems: CustomLineItemNonNullableFields[];
    customContentReference?: CustomContentReferenceNonNullableFields;
    externalReference?: ExternalReferenceNonNullableFields;
}
interface CreateCheckoutTemplateResponseNonNullableFields {
    checkoutTemplate?: CheckoutTemplateNonNullableFields;
}
interface GetCheckoutTemplateResponseNonNullableFields {
    checkoutTemplate?: CheckoutTemplateNonNullableFields;
}
interface UpdateCheckoutTemplateResponseNonNullableFields {
    checkoutTemplate?: CheckoutTemplateNonNullableFields;
}
interface QueryCheckoutTemplatesResponseNonNullableFields {
    checkoutTemplates: CheckoutTemplateNonNullableFields[];
}
interface CreateCheckoutFromTemplateResponseNonNullableFields {
    checkoutId: string;
    checkoutUrl: string;
}
interface HeadersEntryNonNullableFields {
    key: string;
    value: string;
}
interface RawHttpResponseNonNullableFields {
    body: Uint8Array;
    headers: HeadersEntryNonNullableFields[];
}

type __PublicMethodMetaInfo$i<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createCheckoutTemplate(): __PublicMethodMetaInfo$i<'POST', {}, CreateCheckoutTemplateRequest, CreateCheckoutTemplateRequest$1, CreateCheckoutTemplateResponse & CreateCheckoutTemplateResponseNonNullableFields, CreateCheckoutTemplateResponse$1 & CreateCheckoutTemplateResponseNonNullableFields$1>;
declare function getCheckoutTemplate(): __PublicMethodMetaInfo$i<'GET', {
    checkoutTemplateId: string;
}, GetCheckoutTemplateRequest, GetCheckoutTemplateRequest$1, GetCheckoutTemplateResponse & GetCheckoutTemplateResponseNonNullableFields, GetCheckoutTemplateResponse$1 & GetCheckoutTemplateResponseNonNullableFields$1>;
declare function updateCheckoutTemplate(): __PublicMethodMetaInfo$i<'PATCH', {
    checkoutTemplateId: string;
}, UpdateCheckoutTemplateRequest, UpdateCheckoutTemplateRequest$1, UpdateCheckoutTemplateResponse & UpdateCheckoutTemplateResponseNonNullableFields, UpdateCheckoutTemplateResponse$1 & UpdateCheckoutTemplateResponseNonNullableFields$1>;
declare function deleteCheckoutTemplate(): __PublicMethodMetaInfo$i<'DELETE', {
    checkoutTemplateId: string;
}, DeleteCheckoutTemplateRequest, DeleteCheckoutTemplateRequest$1, DeleteCheckoutTemplateResponse, DeleteCheckoutTemplateResponse$1>;
declare function queryCheckoutTemplates(): __PublicMethodMetaInfo$i<'POST', {}, QueryCheckoutTemplatesRequest, QueryCheckoutTemplatesRequest$1, QueryCheckoutTemplatesResponse & QueryCheckoutTemplatesResponseNonNullableFields, QueryCheckoutTemplatesResponse$1 & QueryCheckoutTemplatesResponseNonNullableFields$1>;
declare function createCheckoutFromTemplate(): __PublicMethodMetaInfo$i<'POST', {
    checkoutTemplateId: string;
}, CreateCheckoutFromTemplateRequest, CreateCheckoutFromTemplateRequest$1, CreateCheckoutFromTemplateResponse & CreateCheckoutFromTemplateResponseNonNullableFields, CreateCheckoutFromTemplateResponse$1 & CreateCheckoutFromTemplateResponseNonNullableFields$1>;
declare function createAndRedirectToCheckout(): __PublicMethodMetaInfo$i<'GET', {
    checkoutTemplateId: string;
}, CreateAndRedirectToCheckoutRequest, CreateAndRedirectToCheckoutRequest$1, RawHttpResponse & RawHttpResponseNonNullableFields, RawHttpResponse$1 & RawHttpResponseNonNullableFields$1>;

declare const meta$i_createAndRedirectToCheckout: typeof createAndRedirectToCheckout;
declare const meta$i_createCheckoutFromTemplate: typeof createCheckoutFromTemplate;
declare const meta$i_createCheckoutTemplate: typeof createCheckoutTemplate;
declare const meta$i_deleteCheckoutTemplate: typeof deleteCheckoutTemplate;
declare const meta$i_getCheckoutTemplate: typeof getCheckoutTemplate;
declare const meta$i_queryCheckoutTemplates: typeof queryCheckoutTemplates;
declare const meta$i_updateCheckoutTemplate: typeof updateCheckoutTemplate;
declare namespace meta$i {
  export { type __PublicMethodMetaInfo$i as __PublicMethodMetaInfo, meta$i_createAndRedirectToCheckout as createAndRedirectToCheckout, meta$i_createCheckoutFromTemplate as createCheckoutFromTemplate, meta$i_createCheckoutTemplate as createCheckoutTemplate, meta$i_deleteCheckoutTemplate as deleteCheckoutTemplate, meta$i_getCheckoutTemplate as getCheckoutTemplate, meta$i_queryCheckoutTemplates as queryCheckoutTemplates, meta$i_updateCheckoutTemplate as updateCheckoutTemplate };
}

/**
 * A DeliveryProfile is a ...
 * You can ...
 * Read more about DeliveryProfiles
 * in this [article](<LINK_TO_KB_ARTICLE>).
 */
interface DeliveryProfile$1 {
    /**
     * DeliveryProfile ID.
     * @readonly
     */
    id?: string | null;
    /** DeliveryProfile name. */
    name?: string | null;
    /**
     * Indicates that this DeliveryProfile is the default DeliveryProfile.
     * @readonly
     */
    default?: boolean | null;
    /** A list of DeliveryProfile regions. */
    deliveryRegions?: DeliveryRegion$1[];
    /**
     * DeliveryProfile revision.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the DeliveryProfile was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the DeliveryProfile was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Extended fields. */
    extendedFields?: ExtendedFields$d;
}
/** DeliveryRegion can be used to config a Delivery Destinations with its providers */
interface DeliveryRegion$1 {
    /**
     * The delivery region id.
     * @readonly
     */
    id?: string | null;
    /** Optional name of the rule, for example: "Domestic". */
    name?: string | null;
    /** Indicates that this rule is active, default value is true. */
    active?: boolean | null;
    /**
     * The spi implementers id of shipping-rates spi, assigned to this rule.
     * @readonly
     */
    deliveryCarriers?: DeliveryCarrier$1[];
    /** The operation region of this rule, if empty than it is global. */
    destinations?: Destination$3[];
    /**
     * Represents the time this Profile was created
     * @readonly
     */
    createdDate?: Date | null;
}
interface DeliveryCarrier$1 {
    /** AppDefId of the provider as it is registered in the [app dashboard](https://dev.wix.com/dc3/my-apps/). Can be fetched by listDeliveryProvider api. */
    appId?: string;
    /** Backup rate to be used in case the cost returned by the provider is empty. */
    backupRate?: BackupRate$1;
    /** Additional charges to add to the delivery rate for this carrier */
    additionalCharges?: AdditionalCharge$3[];
}
interface BackupRate$1 {
    /** Default rate prefix that will concatenate to the delivery options the provider will offer. */
    prefix?: string | null;
    /** Default rate price for all delivery options that the provider will offer. */
    rate?: string | null;
    /** Should the default rate be used. Default value is false. */
    enabled?: boolean | null;
}
interface AdditionalCharge$3 {
    /** Additional charge type. */
    type?: ChargeType$5;
    /** Description of the additional charge. For example, `"Handling fee of $5 applied for gift wrapping"`. */
    description?: string | null;
    /** Cost of additional charge. For example, `12.5`. */
    price?: string;
}
declare enum ChargeType$5 {
    HANDLING_FEE = "HANDLING_FEE"
}
/** Defines the area inside one country that is relevant for this rule. */
interface Destination$3 {
    /** 2-letters code represents the country of the delivery destinations */
    countryCode?: string;
    /**
     * subdivisions - Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2).
     * If empty, the rule applies to the entire country.
     */
    subdivisions?: string[];
}
interface ExtendedFields$d {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateDeliveryProfileRequest$1 {
    /** DeliveryProfile to be created. */
    deliveryProfile: DeliveryProfile$1;
}
interface CreateDeliveryProfileResponse$1 {
    /** The created DeliveryProfile. */
    deliveryProfile?: DeliveryProfile$1;
}
interface GetDeliveryProfileRequest$1 {
    /** ID of the DeliveryProfile to retrieve. */
    deliveryProfileId: string;
}
interface GetDeliveryProfileResponse$1 {
    /** The requested DeliveryProfile. */
    deliveryProfile?: DeliveryProfile$1;
}
interface UpdateDeliveryProfileRequest$1 {
    /** DeliveryProfile to be updated, may be partial. */
    deliveryProfile: DeliveryProfile$1;
}
interface UpdateDeliveryProfileResponse$1 {
    /** Updated DeliveryProfile. */
    deliveryProfile?: DeliveryProfile$1;
}
interface DeleteDeliveryProfileRequest$1 {
    /** Id of the DeliveryProfile to delete. */
    deliveryProfileId: string;
}
interface DeleteDeliveryProfileResponse$1 {
}
interface QueryDeliveryProfilesRequest$1 {
    /** WQL expression. */
    query?: CursorQuery$b;
}
interface CursorQuery$b extends CursorQueryPagingMethodOneOf$b {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$j;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$j[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$b {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$j;
}
interface Sorting$j {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$j;
}
declare enum SortOrder$j {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$j {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryDeliveryProfilesResponse$1 {
    /** List of DeliveryProfiles. */
    deliveryProfiles?: DeliveryProfile$1[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$h;
}
interface CursorPagingMetadata$h {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$j;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$j {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface AddDeliveryRegionRequest$5 {
    /** delivery profile id to associated with the DeliveryRegion */
    deliveryProfileId: string;
    /** DeliveryRegion to be created */
    deliveryRegion: DeliveryRegion$1;
    /**
     * DeliveryProfile revision.
     * @readonly
     */
    revision?: string | null;
}
interface AddDeliveryRegionResponse$5 {
    /** The updated DeliveryProfile with the new DeliveryRegion */
    deliveryProfile?: DeliveryProfile$1;
}
interface UpdateDeliveryRegionRequest$1 {
    /** DeliveryProfile id that owns the DeliveryRegion */
    deliveryProfileId: string;
    /** DeliveryRegion to be updated, may be partial */
    deliveryRegion: DeliveryRegion$1;
    /**
     * DeliveryProfile revision.
     * @readonly
     */
    revision?: string | null;
}
interface UpdateDeliveryRegionResponse$1 {
    /** The updated DeliveryProfile with the updated DeliveryRegion */
    deliveryProfile?: DeliveryProfile$1;
}
interface RemoveDeliveryRegionRequest$5 {
    /** DeliveryProfile id that owns the DeliveryRegion */
    deliveryProfileId: string;
    /** Id of the DeliveryRegion to delete */
    deliveryRegionId: string;
    /**
     * DeliveryProfile revision.
     * @readonly
     */
    revision?: string | null;
}
interface RemoveDeliveryRegionResponse$5 {
    /** The updated DeliveryProfile without DeliveryRegion */
    deliveryProfile?: DeliveryProfile$1;
}
interface AddDeliveryCarrierRequest$1 {
    /** delivery_region id to associated with the delivery_carrier. */
    deliveryRegionId: string;
    /** delivery_carrier to be added. */
    deliveryCarrier: DeliveryCarrier$1;
}
interface AddDeliveryCarrierResponse$1 {
    /** The updated DeliveryProfile */
    deliveryProfile?: DeliveryProfile$1;
}
interface RemoveDeliveryCarrierRequest$1 {
    /** Id of the DeliveryRegion */
    deliveryRegionId: string;
    /** DeliveryCarrier app id to be removed. */
    appId: string;
}
interface RemoveDeliveryCarrierResponse$1 {
    /** The updated DeliveryProfile */
    deliveryProfile?: DeliveryProfile$1;
}
interface UpdateDeliveryCarrierRequest$1 {
    /** DeliveryRegion id */
    deliveryRegionId: string;
    /** Updated delivery_carrier */
    deliveryCarrier?: DeliveryCarrier$1;
}
interface UpdateDeliveryCarrierResponse$1 {
    /** The updated DeliveryProfile with the updated DeliveryCarrier */
    deliveryProfile?: DeliveryProfile$1;
}
interface ListDeliveryCarrierDetailsRequest$1 {
}
interface ListDeliveryCarrierDetailsResponse$1 {
    /** The list of carrier or multi-carrier services that has implemented the spi and installed on the current context(site) */
    deliveryCarrierDetails?: DeliveryCarrierDetails$1[];
}
interface DeliveryCarrierDetails$1 {
    /** The id of the provider. */
    id?: string;
    /** The name of the Provider. */
    displayName?: string;
    /** Provider's description. */
    description?: string | null;
    /** A link to learn more about the provider. */
    learnMoreUrl?: string | null;
    /** Dashboard URL for the provider. */
    dashboardUrl?: string | null;
    /** If the provider fallback definition is mandatory. */
    fallbackDefinitionMandatory?: boolean | null;
    /** Thumbnail image for provider. */
    thumbnailUrl?: string | null;
    /** feature toggle initialized with default value = false. should be true if implemented by spi provider */
    toggleGetCarrierSettingsEnabled?: boolean;
}
interface ListDeliveryCarriersRequest$1 {
    /** Delivery profile id. */
    deliveryProfileId: string;
    /** Delivery app ids to get settings for. */
    appIds?: string[];
}
interface ListDeliveryCarriersResponse$1 {
    /** The list of delivery settings for the given requests */
    results?: ListDeliveryCarriersResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$7;
}
interface ListDeliveryCarriersResult$1 {
    /** Information about successful action or error for failure. */
    deliveryCarrierMetadata?: ItemMetadata$7;
    /** The delivery carrier details */
    deliveryCarrierDetails?: DeliveryCarrierDetails$1;
    /** The delivery settings for the delivery profile and delivery region. */
    deliveryCarrierRegionalSettings?: DeliveryCarrierRegionalSettings$1[];
}
interface ItemMetadata$7 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$f;
}
interface ApplicationError$f {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface DeliveryCarrierRegionalSettings$1 {
    /** The delivery rule id. */
    deliveryRegionId?: string;
    /** The shipping table values that are associated with the delivery rule. Can be multiple if the provider is an aggregator of multiple carriers. */
    dashboardTables?: DashboardTable$1[];
}
interface DashboardTable$1 {
    /** The title of the delivery settings that will be displayed in the UI. */
    title?: string;
    /** The columns of the delivery settings that will be displayed in the UI. */
    columns?: Column$1[];
    /** The content of the delivery settings. Each row is a map of column name to value. */
    rows?: Row$1[];
}
interface Column$1 {
    /** The name of the column. This is used to get the data from the row. */
    key?: string;
    /** The title of the column that will be displayed in the UI. */
    name?: string;
}
interface Row$1 {
    /** The external key of the data presented in a row. This is used to identify the row in the UI for editing. */
    key?: string;
    /**
     * The data presented in the row. The key is the column `name` and the value is the data in the specific row and column.
     * Data will be in JSON format.
     */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$7 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface UpdateExtendedFieldsRequest$7 {
    /** ID of the entity to update. */
    id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse$7 {
    /** Updated DeliveryProfile. */
    deliveryProfile?: DeliveryProfile$1;
}
interface AdditionalChargeNonNullableFields$3 {
    type: ChargeType$5;
    price: string;
}
interface DeliveryCarrierNonNullableFields$1 {
    appId: string;
    additionalCharges: AdditionalChargeNonNullableFields$3[];
}
interface DestinationNonNullableFields$3 {
    countryCode: string;
    subdivisions: string[];
}
interface DeliveryRegionNonNullableFields$1 {
    deliveryCarriers: DeliveryCarrierNonNullableFields$1[];
    destinations: DestinationNonNullableFields$3[];
}
interface DeliveryProfileNonNullableFields$1 {
    deliveryRegions: DeliveryRegionNonNullableFields$1[];
}
interface CreateDeliveryProfileResponseNonNullableFields$1 {
    deliveryProfile?: DeliveryProfileNonNullableFields$1;
}
interface GetDeliveryProfileResponseNonNullableFields$1 {
    deliveryProfile?: DeliveryProfileNonNullableFields$1;
}
interface UpdateDeliveryProfileResponseNonNullableFields$1 {
    deliveryProfile?: DeliveryProfileNonNullableFields$1;
}
interface QueryDeliveryProfilesResponseNonNullableFields$1 {
    deliveryProfiles: DeliveryProfileNonNullableFields$1[];
}
interface AddDeliveryRegionResponseNonNullableFields$5 {
    deliveryProfile?: DeliveryProfileNonNullableFields$1;
}
interface UpdateDeliveryRegionResponseNonNullableFields$1 {
    deliveryProfile?: DeliveryProfileNonNullableFields$1;
}
interface RemoveDeliveryRegionResponseNonNullableFields$5 {
    deliveryProfile?: DeliveryProfileNonNullableFields$1;
}
interface AddDeliveryCarrierResponseNonNullableFields$1 {
    deliveryProfile?: DeliveryProfileNonNullableFields$1;
}
interface RemoveDeliveryCarrierResponseNonNullableFields$1 {
    deliveryProfile?: DeliveryProfileNonNullableFields$1;
}
interface UpdateDeliveryCarrierResponseNonNullableFields$1 {
    deliveryProfile?: DeliveryProfileNonNullableFields$1;
}
interface DeliveryCarrierDetailsNonNullableFields$1 {
    id: string;
    displayName: string;
    toggleGetCarrierSettingsEnabled: boolean;
}
interface ListDeliveryCarrierDetailsResponseNonNullableFields$1 {
    deliveryCarrierDetails: DeliveryCarrierDetailsNonNullableFields$1[];
}
interface ApplicationErrorNonNullableFields$f {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$7 {
    success: boolean;
    error?: ApplicationErrorNonNullableFields$f;
}
interface ColumnNonNullableFields$1 {
    key: string;
    name: string;
}
interface RowNonNullableFields$1 {
    key: string;
}
interface DashboardTableNonNullableFields$1 {
    title: string;
    columns: ColumnNonNullableFields$1[];
    rows: RowNonNullableFields$1[];
}
interface DeliveryCarrierRegionalSettingsNonNullableFields$1 {
    deliveryRegionId: string;
    dashboardTables: DashboardTableNonNullableFields$1[];
}
interface ListDeliveryCarriersResultNonNullableFields$1 {
    deliveryCarrierMetadata?: ItemMetadataNonNullableFields$7;
    deliveryCarrierDetails?: DeliveryCarrierDetailsNonNullableFields$1;
    deliveryCarrierRegionalSettings: DeliveryCarrierRegionalSettingsNonNullableFields$1[];
}
interface BulkActionMetadataNonNullableFields$7 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface ListDeliveryCarriersResponseNonNullableFields$1 {
    results: ListDeliveryCarriersResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$7;
}
interface UpdateExtendedFieldsResponseNonNullableFields$7 {
    deliveryProfile?: DeliveryProfileNonNullableFields$1;
}

/**
 * A DeliveryProfile is a ...
 * You can ...
 * Read more about DeliveryProfiles
 * in this [article](<LINK_TO_KB_ARTICLE>).
 */
interface DeliveryProfile {
    /**
     * DeliveryProfile ID.
     * @readonly
     */
    _id?: string | null;
    /** DeliveryProfile name. */
    name?: string | null;
    /**
     * Indicates that this DeliveryProfile is the default DeliveryProfile.
     * @readonly
     */
    default?: boolean | null;
    /** A list of DeliveryProfile regions. */
    deliveryRegions?: DeliveryRegion[];
    /**
     * DeliveryProfile revision.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the DeliveryProfile was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the DeliveryProfile was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Extended fields. */
    extendedFields?: ExtendedFields$c;
}
/** DeliveryRegion can be used to config a Delivery Destinations with its providers */
interface DeliveryRegion {
    /**
     * The delivery region id.
     * @readonly
     */
    _id?: string | null;
    /** Optional name of the rule, for example: "Domestic". */
    name?: string | null;
    /** Indicates that this rule is active, default value is true. */
    active?: boolean | null;
    /**
     * The spi implementers id of shipping-rates spi, assigned to this rule.
     * @readonly
     */
    deliveryCarriers?: DeliveryCarrier[];
    /** The operation region of this rule, if empty than it is global. */
    destinations?: Destination$2[];
    /**
     * Represents the time this Profile was created
     * @readonly
     */
    _createdDate?: Date | null;
}
interface DeliveryCarrier {
    /** AppDefId of the provider as it is registered in the [app dashboard](https://dev.wix.com/dc3/my-apps/). Can be fetched by listDeliveryProvider api. */
    appId?: string;
    /** Backup rate to be used in case the cost returned by the provider is empty. */
    backupRate?: BackupRate;
    /** Additional charges to add to the delivery rate for this carrier */
    additionalCharges?: AdditionalCharge$2[];
}
interface BackupRate {
    /** Default rate prefix that will concatenate to the delivery options the provider will offer. */
    prefix?: string | null;
    /** Default rate price for all delivery options that the provider will offer. */
    rate?: string | null;
    /** Should the default rate be used. Default value is false. */
    enabled?: boolean | null;
}
interface AdditionalCharge$2 {
    /** Additional charge type. */
    type?: ChargeType$4;
    /** Description of the additional charge. For example, `"Handling fee of $5 applied for gift wrapping"`. */
    description?: string | null;
    /** Cost of additional charge. For example, `12.5`. */
    price?: string;
}
declare enum ChargeType$4 {
    HANDLING_FEE = "HANDLING_FEE"
}
/** Defines the area inside one country that is relevant for this rule. */
interface Destination$2 {
    /** 2-letters code represents the country of the delivery destinations */
    countryCode?: string;
    /**
     * subdivisions - Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2).
     * If empty, the rule applies to the entire country.
     */
    subdivisions?: string[];
}
interface ExtendedFields$c {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateDeliveryProfileRequest {
    /** DeliveryProfile to be created. */
    deliveryProfile: DeliveryProfile;
}
interface CreateDeliveryProfileResponse {
    /** The created DeliveryProfile. */
    deliveryProfile?: DeliveryProfile;
}
interface GetDeliveryProfileRequest {
    /** ID of the DeliveryProfile to retrieve. */
    deliveryProfileId: string;
}
interface GetDeliveryProfileResponse {
    /** The requested DeliveryProfile. */
    deliveryProfile?: DeliveryProfile;
}
interface UpdateDeliveryProfileRequest {
    /** DeliveryProfile to be updated, may be partial. */
    deliveryProfile: DeliveryProfile;
}
interface UpdateDeliveryProfileResponse {
    /** Updated DeliveryProfile. */
    deliveryProfile?: DeliveryProfile;
}
interface DeleteDeliveryProfileRequest {
    /** Id of the DeliveryProfile to delete. */
    deliveryProfileId: string;
}
interface DeleteDeliveryProfileResponse {
}
interface QueryDeliveryProfilesRequest {
    /** WQL expression. */
    query?: CursorQuery$a;
}
interface CursorQuery$a extends CursorQueryPagingMethodOneOf$a {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$i;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$i[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$a {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$i;
}
interface Sorting$i {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$i;
}
declare enum SortOrder$i {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$i {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryDeliveryProfilesResponse {
    /** List of DeliveryProfiles. */
    deliveryProfiles?: DeliveryProfile[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$g;
}
interface CursorPagingMetadata$g {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$i;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$i {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface AddDeliveryRegionRequest$4 {
    /** delivery profile id to associated with the DeliveryRegion */
    deliveryProfileId: string;
    /** DeliveryRegion to be created */
    deliveryRegion: DeliveryRegion;
    /**
     * DeliveryProfile revision.
     * @readonly
     */
    revision?: string | null;
}
interface AddDeliveryRegionResponse$4 {
    /** The updated DeliveryProfile with the new DeliveryRegion */
    deliveryProfile?: DeliveryProfile;
}
interface UpdateDeliveryRegionRequest {
    /** DeliveryProfile id that owns the DeliveryRegion */
    deliveryProfileId: string;
    /** DeliveryRegion to be updated, may be partial */
    deliveryRegion: DeliveryRegion;
    /**
     * DeliveryProfile revision.
     * @readonly
     */
    revision?: string | null;
}
interface UpdateDeliveryRegionResponse {
    /** The updated DeliveryProfile with the updated DeliveryRegion */
    deliveryProfile?: DeliveryProfile;
}
interface RemoveDeliveryRegionRequest$4 {
    /** DeliveryProfile id that owns the DeliveryRegion */
    deliveryProfileId: string;
    /** Id of the DeliveryRegion to delete */
    deliveryRegionId: string;
    /**
     * DeliveryProfile revision.
     * @readonly
     */
    revision?: string | null;
}
interface RemoveDeliveryRegionResponse$4 {
    /** The updated DeliveryProfile without DeliveryRegion */
    deliveryProfile?: DeliveryProfile;
}
interface AddDeliveryCarrierRequest {
    /** delivery_region id to associated with the delivery_carrier. */
    deliveryRegionId: string;
    /** delivery_carrier to be added. */
    deliveryCarrier: DeliveryCarrier;
}
interface AddDeliveryCarrierResponse {
    /** The updated DeliveryProfile */
    deliveryProfile?: DeliveryProfile;
}
interface RemoveDeliveryCarrierRequest {
    /** Id of the DeliveryRegion */
    deliveryRegionId: string;
    /** DeliveryCarrier app id to be removed. */
    appId: string;
}
interface RemoveDeliveryCarrierResponse {
    /** The updated DeliveryProfile */
    deliveryProfile?: DeliveryProfile;
}
interface UpdateDeliveryCarrierRequest {
    /** DeliveryRegion id */
    deliveryRegionId: string;
    /** Updated delivery_carrier */
    deliveryCarrier?: DeliveryCarrier;
}
interface UpdateDeliveryCarrierResponse {
    /** The updated DeliveryProfile with the updated DeliveryCarrier */
    deliveryProfile?: DeliveryProfile;
}
interface ListDeliveryCarrierDetailsRequest {
}
interface ListDeliveryCarrierDetailsResponse {
    /** The list of carrier or multi-carrier services that has implemented the spi and installed on the current context(site) */
    deliveryCarrierDetails?: DeliveryCarrierDetails[];
}
interface DeliveryCarrierDetails {
    /** The id of the provider. */
    _id?: string;
    /** The name of the Provider. */
    displayName?: string;
    /** Provider's description. */
    description?: string | null;
    /** A link to learn more about the provider. */
    learnMoreUrl?: string | null;
    /** Dashboard URL for the provider. */
    dashboardUrl?: string | null;
    /** If the provider fallback definition is mandatory. */
    fallbackDefinitionMandatory?: boolean | null;
    /** Thumbnail image for provider. */
    thumbnailUrl?: string | null;
    /** feature toggle initialized with default value = false. should be true if implemented by spi provider */
    toggleGetCarrierSettingsEnabled?: boolean;
}
interface ListDeliveryCarriersRequest {
    /** Delivery profile id. */
    deliveryProfileId: string;
    /** Delivery app ids to get settings for. */
    appIds?: string[];
}
interface ListDeliveryCarriersResponse {
    /** The list of delivery settings for the given requests */
    results?: ListDeliveryCarriersResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$6;
}
interface ListDeliveryCarriersResult {
    /** Information about successful action or error for failure. */
    deliveryCarrierMetadata?: ItemMetadata$6;
    /** The delivery carrier details */
    deliveryCarrierDetails?: DeliveryCarrierDetails;
    /** The delivery settings for the delivery profile and delivery region. */
    deliveryCarrierRegionalSettings?: DeliveryCarrierRegionalSettings[];
}
interface ItemMetadata$6 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$e;
}
interface ApplicationError$e {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface DeliveryCarrierRegionalSettings {
    /** The delivery rule id. */
    deliveryRegionId?: string;
    /** The shipping table values that are associated with the delivery rule. Can be multiple if the provider is an aggregator of multiple carriers. */
    dashboardTables?: DashboardTable[];
}
interface DashboardTable {
    /** The title of the delivery settings that will be displayed in the UI. */
    title?: string;
    /** The columns of the delivery settings that will be displayed in the UI. */
    columns?: Column[];
    /** The content of the delivery settings. Each row is a map of column name to value. */
    rows?: Row[];
}
interface Column {
    /** The name of the column. This is used to get the data from the row. */
    key?: string;
    /** The title of the column that will be displayed in the UI. */
    name?: string;
}
interface Row {
    /** The external key of the data presented in a row. This is used to identify the row in the UI for editing. */
    key?: string;
    /**
     * The data presented in the row. The key is the column `name` and the value is the data in the specific row and column.
     * Data will be in JSON format.
     */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$6 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface UpdateExtendedFieldsRequest$6 {
    /** ID of the entity to update. */
    _id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse$6 {
    /** Updated DeliveryProfile. */
    deliveryProfile?: DeliveryProfile;
}
interface AdditionalChargeNonNullableFields$2 {
    type: ChargeType$4;
    price: string;
}
interface DeliveryCarrierNonNullableFields {
    appId: string;
    additionalCharges: AdditionalChargeNonNullableFields$2[];
}
interface DestinationNonNullableFields$2 {
    countryCode: string;
    subdivisions: string[];
}
interface DeliveryRegionNonNullableFields {
    deliveryCarriers: DeliveryCarrierNonNullableFields[];
    destinations: DestinationNonNullableFields$2[];
}
interface DeliveryProfileNonNullableFields {
    deliveryRegions: DeliveryRegionNonNullableFields[];
}
interface CreateDeliveryProfileResponseNonNullableFields {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface GetDeliveryProfileResponseNonNullableFields {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface UpdateDeliveryProfileResponseNonNullableFields {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface QueryDeliveryProfilesResponseNonNullableFields {
    deliveryProfiles: DeliveryProfileNonNullableFields[];
}
interface AddDeliveryRegionResponseNonNullableFields$4 {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface UpdateDeliveryRegionResponseNonNullableFields {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface RemoveDeliveryRegionResponseNonNullableFields$4 {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface AddDeliveryCarrierResponseNonNullableFields {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface RemoveDeliveryCarrierResponseNonNullableFields {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface UpdateDeliveryCarrierResponseNonNullableFields {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}
interface DeliveryCarrierDetailsNonNullableFields {
    _id: string;
    displayName: string;
    toggleGetCarrierSettingsEnabled: boolean;
}
interface ListDeliveryCarrierDetailsResponseNonNullableFields {
    deliveryCarrierDetails: DeliveryCarrierDetailsNonNullableFields[];
}
interface ApplicationErrorNonNullableFields$e {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$6 {
    success: boolean;
    error?: ApplicationErrorNonNullableFields$e;
}
interface ColumnNonNullableFields {
    key: string;
    name: string;
}
interface RowNonNullableFields {
    key: string;
}
interface DashboardTableNonNullableFields {
    title: string;
    columns: ColumnNonNullableFields[];
    rows: RowNonNullableFields[];
}
interface DeliveryCarrierRegionalSettingsNonNullableFields {
    deliveryRegionId: string;
    dashboardTables: DashboardTableNonNullableFields[];
}
interface ListDeliveryCarriersResultNonNullableFields {
    deliveryCarrierMetadata?: ItemMetadataNonNullableFields$6;
    deliveryCarrierDetails?: DeliveryCarrierDetailsNonNullableFields;
    deliveryCarrierRegionalSettings: DeliveryCarrierRegionalSettingsNonNullableFields[];
}
interface BulkActionMetadataNonNullableFields$6 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface ListDeliveryCarriersResponseNonNullableFields {
    results: ListDeliveryCarriersResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$6;
}
interface UpdateExtendedFieldsResponseNonNullableFields$6 {
    deliveryProfile?: DeliveryProfileNonNullableFields;
}

type __PublicMethodMetaInfo$h<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createDeliveryProfile(): __PublicMethodMetaInfo$h<'POST', {}, CreateDeliveryProfileRequest, CreateDeliveryProfileRequest$1, CreateDeliveryProfileResponse & CreateDeliveryProfileResponseNonNullableFields, CreateDeliveryProfileResponse$1 & CreateDeliveryProfileResponseNonNullableFields$1>;
declare function getDeliveryProfile(): __PublicMethodMetaInfo$h<'GET', {
    deliveryProfileId: string;
}, GetDeliveryProfileRequest, GetDeliveryProfileRequest$1, GetDeliveryProfileResponse & GetDeliveryProfileResponseNonNullableFields, GetDeliveryProfileResponse$1 & GetDeliveryProfileResponseNonNullableFields$1>;
declare function updateDeliveryProfile(): __PublicMethodMetaInfo$h<'PATCH', {
    deliveryProfileId: string;
}, UpdateDeliveryProfileRequest, UpdateDeliveryProfileRequest$1, UpdateDeliveryProfileResponse & UpdateDeliveryProfileResponseNonNullableFields, UpdateDeliveryProfileResponse$1 & UpdateDeliveryProfileResponseNonNullableFields$1>;
declare function deleteDeliveryProfile(): __PublicMethodMetaInfo$h<'DELETE', {
    deliveryProfileId: string;
}, DeleteDeliveryProfileRequest, DeleteDeliveryProfileRequest$1, DeleteDeliveryProfileResponse, DeleteDeliveryProfileResponse$1>;
declare function queryDeliveryProfiles(): __PublicMethodMetaInfo$h<'GET', {}, QueryDeliveryProfilesRequest, QueryDeliveryProfilesRequest$1, QueryDeliveryProfilesResponse & QueryDeliveryProfilesResponseNonNullableFields, QueryDeliveryProfilesResponse$1 & QueryDeliveryProfilesResponseNonNullableFields$1>;
declare function addDeliveryRegion$2(): __PublicMethodMetaInfo$h<'POST', {
    deliveryProfileId: string;
}, AddDeliveryRegionRequest$4, AddDeliveryRegionRequest$5, AddDeliveryRegionResponse$4 & AddDeliveryRegionResponseNonNullableFields$4, AddDeliveryRegionResponse$5 & AddDeliveryRegionResponseNonNullableFields$5>;
declare function updateDeliveryRegion(): __PublicMethodMetaInfo$h<'PATCH', {
    deliveryProfileId: string;
    deliveryRegionId: string;
}, UpdateDeliveryRegionRequest, UpdateDeliveryRegionRequest$1, UpdateDeliveryRegionResponse & UpdateDeliveryRegionResponseNonNullableFields, UpdateDeliveryRegionResponse$1 & UpdateDeliveryRegionResponseNonNullableFields$1>;
declare function removeDeliveryRegion$2(): __PublicMethodMetaInfo$h<'DELETE', {
    deliveryProfileId: string;
    deliveryRegionId: string;
}, RemoveDeliveryRegionRequest$4, RemoveDeliveryRegionRequest$5, RemoveDeliveryRegionResponse$4 & RemoveDeliveryRegionResponseNonNullableFields$4, RemoveDeliveryRegionResponse$5 & RemoveDeliveryRegionResponseNonNullableFields$5>;
declare function addDeliveryCarrier(): __PublicMethodMetaInfo$h<'POST', {}, AddDeliveryCarrierRequest, AddDeliveryCarrierRequest$1, AddDeliveryCarrierResponse & AddDeliveryCarrierResponseNonNullableFields, AddDeliveryCarrierResponse$1 & AddDeliveryCarrierResponseNonNullableFields$1>;
declare function removeDeliveryCarrier(): __PublicMethodMetaInfo$h<'POST', {}, RemoveDeliveryCarrierRequest, RemoveDeliveryCarrierRequest$1, RemoveDeliveryCarrierResponse & RemoveDeliveryCarrierResponseNonNullableFields, RemoveDeliveryCarrierResponse$1 & RemoveDeliveryCarrierResponseNonNullableFields$1>;
declare function updateDeliveryCarrier(): __PublicMethodMetaInfo$h<'PATCH', {}, UpdateDeliveryCarrierRequest, UpdateDeliveryCarrierRequest$1, UpdateDeliveryCarrierResponse & UpdateDeliveryCarrierResponseNonNullableFields, UpdateDeliveryCarrierResponse$1 & UpdateDeliveryCarrierResponseNonNullableFields$1>;
declare function listDeliveryCarrierDetails(): __PublicMethodMetaInfo$h<'GET', {}, ListDeliveryCarrierDetailsRequest, ListDeliveryCarrierDetailsRequest$1, ListDeliveryCarrierDetailsResponse & ListDeliveryCarrierDetailsResponseNonNullableFields, ListDeliveryCarrierDetailsResponse$1 & ListDeliveryCarrierDetailsResponseNonNullableFields$1>;
declare function listDeliveryCarriers(): __PublicMethodMetaInfo$h<'POST', {
    deliveryProfileId: string;
}, ListDeliveryCarriersRequest, ListDeliveryCarriersRequest$1, ListDeliveryCarriersResponse & ListDeliveryCarriersResponseNonNullableFields, ListDeliveryCarriersResponse$1 & ListDeliveryCarriersResponseNonNullableFields$1>;
declare function updateExtendedFields$3(): __PublicMethodMetaInfo$h<'POST', {
    id: string;
}, UpdateExtendedFieldsRequest$6, UpdateExtendedFieldsRequest$7, UpdateExtendedFieldsResponse$6 & UpdateExtendedFieldsResponseNonNullableFields$6, UpdateExtendedFieldsResponse$7 & UpdateExtendedFieldsResponseNonNullableFields$7>;

declare const meta$h_addDeliveryCarrier: typeof addDeliveryCarrier;
declare const meta$h_createDeliveryProfile: typeof createDeliveryProfile;
declare const meta$h_deleteDeliveryProfile: typeof deleteDeliveryProfile;
declare const meta$h_getDeliveryProfile: typeof getDeliveryProfile;
declare const meta$h_listDeliveryCarrierDetails: typeof listDeliveryCarrierDetails;
declare const meta$h_listDeliveryCarriers: typeof listDeliveryCarriers;
declare const meta$h_queryDeliveryProfiles: typeof queryDeliveryProfiles;
declare const meta$h_removeDeliveryCarrier: typeof removeDeliveryCarrier;
declare const meta$h_updateDeliveryCarrier: typeof updateDeliveryCarrier;
declare const meta$h_updateDeliveryProfile: typeof updateDeliveryProfile;
declare const meta$h_updateDeliveryRegion: typeof updateDeliveryRegion;
declare namespace meta$h {
  export { type __PublicMethodMetaInfo$h as __PublicMethodMetaInfo, meta$h_addDeliveryCarrier as addDeliveryCarrier, addDeliveryRegion$2 as addDeliveryRegion, meta$h_createDeliveryProfile as createDeliveryProfile, meta$h_deleteDeliveryProfile as deleteDeliveryProfile, meta$h_getDeliveryProfile as getDeliveryProfile, meta$h_listDeliveryCarrierDetails as listDeliveryCarrierDetails, meta$h_listDeliveryCarriers as listDeliveryCarriers, meta$h_queryDeliveryProfiles as queryDeliveryProfiles, meta$h_removeDeliveryCarrier as removeDeliveryCarrier, removeDeliveryRegion$2 as removeDeliveryRegion, meta$h_updateDeliveryCarrier as updateDeliveryCarrier, meta$h_updateDeliveryProfile as updateDeliveryProfile, meta$h_updateDeliveryRegion as updateDeliveryRegion, updateExtendedFields$3 as updateExtendedFields };
}

/** DraftOrder is the main entity of DraftOrders service. It represents a single edit order. */
interface DraftOrder$1 {
    /**
     * Draft order ID.
     * @readonly
     */
    id?: string | null;
    /** ID of the order this draft commits to. */
    orderId?: string | null;
    /**
     * Line items.
     * Includes details about changes when relevant.
     */
    lineItems?: ItemDetails$1[];
    /**
     * Shipping info.
     * Includes details about changes when relevant.
     */
    shippingInfo?: ShippingDetails$1;
    /**
     * Buyer information.
     * @deprecated Buyer information.
     * @replacedBy buyer_info_details
     * @targetRemovalDate 2024-08-30
     */
    buyerInfo?: BuyerInfo$3;
    /**
     * Billing address and contact details.
     * @deprecated Billing address and contact details.
     * @replacedBy billing_info_details
     * @targetRemovalDate 2024-08-30
     */
    billingInfo?: AddressWithContact$3;
    /**
     * Additional fees.
     * Includes details about the source, and whether the additional fee is applied to the order.
     */
    additionalFees?: AdditionalFeeDetails$1[];
    /**
     * Discounts.
     * Includes details about the source, and whether the discount is applied to the order.
     */
    discounts?: DiscountDetails$1[];
    /**
     * Date and time the draft order was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the draft order was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Identity of the draft order's initiator.
     * @readonly
     */
    createdBy?: CreatedBy$3;
    /**
     * Draft order status.
     * @readonly
     */
    status?: EditingStatus$1;
    /** Weight measurement unit. Defaults to the site's weight unit. */
    weightUnit?: WeightUnit$7;
    /** Currency used for pricing. */
    currency?: string | null;
    /**
     * Price summary.
     * @readonly
     */
    priceSummary?: PriceSummary$5;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax summary.
     * @readonly
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax summary.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary$5;
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: BalanceSummary$3;
    /** Side effects to perform on commit. */
    commitSettings?: DraftOrderCommitSettings$1;
    /** Member ID (if order created by a member). */
    memberId?: string | null;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    recipientInfo?: RecipientInfoDetails$1;
    /**
     * Custom field data for the draft order object.
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$b;
}
interface ItemDetails$1 extends ItemDetailsChangeTypeOneOf$1 {
    /** Whether the line item was added as part of the draft. */
    added?: boolean;
    /** Line item fields before the change. */
    changedDetails?: ItemChangedDetails$1;
    /** Whether the line item was removed as part of the draft. */
    removed?: boolean;
    /** Line item details after applied changes. */
    lineItem?: OrderLineItem$3;
}
/** @oneof */
interface ItemDetailsChangeTypeOneOf$1 {
    /** Whether the line item was added as part of the draft. */
    added?: boolean;
    /** Line item fields before the change. */
    changedDetails?: ItemChangedDetails$1;
    /** Whether the line item was removed as part of the draft. */
    removed?: boolean;
}
interface Price$9 {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface PriceDescription$3 {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface OrderLineItem$3 {
    /** Line item ID. */
    id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName$3;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference$9;
    /** Line item quantity. */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price$9;
    /** Line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine$3[];
    /** Line item image. */
    image?: Image$2;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties$7;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$5;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
     */
    fulfillerId?: string | null;
    /**
     * Number of items that were refunded.
     * @readonly
     */
    refundQuantity?: number | null;
    /**
     * Number of items restocked.
     * @readonly
     */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price$9;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price$9;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$9;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$9;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` - Partial payment for the given item to be paid upfront during the checkout. Eligible for catalog items with type `DEPOSIT_ONLINE` only.
     */
    paymentOption?: PaymentOptionType$5;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails$5;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo$3;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile$3;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo$3;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$3;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price$9;
}
interface ProductName$3 {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$9 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface DescriptionLine$3 extends DescriptionLineValueOneOf$3, DescriptionLineDescriptionLineValueOneOf$3 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$3;
    /** Description line color value. */
    colorInfo?: Color$3;
    /** Description line name. */
    name?: DescriptionLineName$3;
}
/** @oneof */
interface DescriptionLineValueOneOf$3 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$3;
    /** Description line color value. */
    colorInfo?: Color$3;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$3 {
}
interface DescriptionLineName$3 {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$3 {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$3 {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$3 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface Image$2 {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface PhysicalProperties$7 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$5 extends ItemTypeItemTypeDataOneOf$5 {
    /** Preset item type. */
    preset?: ItemTypeItemType$5;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$5 {
    /** Preset item type. */
    preset?: ItemTypeItemType$5;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$5 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$5 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ItemTaxFullDetails$5 {
    /** Taxable amount of this line item. */
    taxableAmount?: Price$9;
    /** Tax rate percentage, as a decimal numeral between 0 and 1. For example, `"0.13"`. */
    taxRate?: string;
    /** The calculated tax, based on the `taxableAmount` and `taxRate`. */
    totalTax?: Price$9;
}
interface LineItemTaxInfo$3 {
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    taxAmount?: Price$9;
    /** Amount for which tax is calculated. */
    taxableAmount?: Price$9;
    /** Tax rate %, as a decimal point. */
    taxRate?: string | null;
    /**
     * Tax group ID.
     * Learn more about [Tax Groups](https://dev.wix.com/docs/rest/business-management/payments/tax/tax-groups/introduction).
     */
    taxGroupId?: string | null;
    /** Indicates whether the price already includes tax. */
    taxIncludedInPrice?: boolean;
    /** Tax information for a line item. */
    taxBreakdown?: LineItemTaxBreakdown$3[];
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface LineItemTaxBreakdown$3 {
    /** Jurisdiction that taxes were calculated for. For example, "New York", or "Quebec". */
    jurisdiction?: string | null;
    /** Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000. */
    rate?: string | null;
    /** Amount of tax calculated for this line item. */
    taxAmount?: Price$9;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** Type of jurisdiction that taxes were calculated for. */
    jurisdictionType?: JurisdictionType$5;
    /** Non-taxable amount of the line item price. */
    nonTaxableAmount?: Price$9;
    /** Taxable amount of the line item price. */
    taxableAmount?: Price$9;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$5 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DigitalFile$3 {
    /** ID of the secure file in media. */
    fileId?: string;
    /** Link will exist after the digital links have been generated on the order. */
    link?: string | null;
    /**
     * Link expiration time and date.
     * @readonly
     */
    expirationDate?: Date | null;
}
interface SubscriptionInfo$3 {
    /** Subscription ID. */
    id?: string | null;
    /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */
    cycleNumber?: number;
    /** Subscription option title. For example, `"Monthly coffee Subscription"`. */
    subscriptionOptionTitle?: string;
    /** Subscription option description. For example, `"1kg of selected coffee, once a month"`. */
    subscriptionOptionDescription?: string | null;
    /** Subscription detailed information. */
    subscriptionSettings?: SubscriptionSettings$5;
}
interface SubscriptionSettings$5 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$5;
    /** Interval of recurring payment. */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$5 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
declare enum TaxableAddressType$5 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
interface ItemChangedDetails$1 {
    /** Line item quantity before change. */
    quantityBeforeChange?: number | null;
    /** Line item price before change. */
    priceBeforeChange?: Price$9;
    /** Line item price description before change. */
    priceDescriptionBeforeChange?: PriceDescription$3;
}
interface ShippingDetails$1 extends ShippingDetailsChangeTypeOneOf$1 {
    /** Whether shipping info was added as part of the draft. */
    added?: boolean;
    /** Shipping info before the change. */
    changedDetails?: ShippingChangedDetails$1;
    /** Whether shipping info was removed as part of the draft. */
    removed?: boolean;
    /** Selected Shipping details. */
    shippingInfo?: V1ShippingInformation$3;
}
/** @oneof */
interface ShippingDetailsChangeTypeOneOf$1 {
    /** Whether shipping info was added as part of the draft. */
    added?: boolean;
    /** Shipping info before the change. */
    changedDetails?: ShippingChangedDetails$1;
    /** Whether shipping info was removed as part of the draft. */
    removed?: boolean;
}
interface V1ShippingInformation$3 {
    /** App Def Id of external provider which was a source of shipping info */
    carrierId?: string | null;
    /** Unique code (or ID) of selected shipping option. For example, `"usps_std_overnight"``. */
    code?: string | null;
    /**
     * Shipping option title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"` or `"First-Class Package International"`.
     */
    title?: string;
    /** Shipping logistics. */
    logistics?: V1DeliveryLogistics$1;
    /** Shipping costs. */
    cost?: V1ShippingPrice$1;
    /** Shipping region. */
    region?: ShippingRegion$5;
}
interface V1DeliveryLogistics$1 extends V1DeliveryLogisticsAddressOneOf$1 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$3;
    /** Pickup details. */
    pickupDetails?: V1PickupDetails$1;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /**
     * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Expected delivery time. */
    deliveryTimeSlot?: V1DeliveryTimeSlot$1;
}
/** @oneof */
interface V1DeliveryLogisticsAddressOneOf$1 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$3;
    /** Pickup details. */
    pickupDetails?: V1PickupDetails$1;
}
/** Billing Info and shipping details */
interface AddressWithContact$3 {
    /** Address. */
    address?: Address$b;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$5;
}
/** Physical address */
interface Address$b {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$b;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress$b {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$5 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$5;
}
interface VatId$5 {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$5;
}
/** tax info types */
declare enum VatType$5 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface V1PickupDetails$1 {
    /** Pickup address. */
    address?: PickupAddress$3;
    /** Pickup method */
    pickupMethod?: PickupDetailsPickupMethod$1;
}
/** Physical address */
interface PickupAddress$3 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address object, with number, name, and apartment number in separate fields. */
    streetAddress?: StreetAddress$b;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
declare enum PickupDetailsPickupMethod$1 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface V1DeliveryTimeSlot$1 {
    /** Delivery slot starting time. */
    from?: Date | null;
    /** Delivery slot ending time. */
    to?: Date | null;
}
interface V1ShippingPrice$1 {
    /** Shipping price for display purposes. */
    price?: Price$9;
    /**
     * Total price of shipping after discounts (when relevant), and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$9;
    /**
     * Shipping price after all discounts (if any exist), and after tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$9;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$5;
    /**
     * Shipping discount before tax.
     * @readonly
     */
    discount?: Price$9;
}
interface ShippingRegion$5 {
    /** Name of shipping region. For example, `"Metropolitan London"`, or `"Outer Melbourne suburbs"`. */
    name?: string | null;
}
interface ShippingChangedDetails$1 {
    /** Shipping info before the change. */
    shippingInfoBeforeChange?: V1ShippingInformation$3;
}
/** Buyer Info */
interface BuyerInfo$3 extends BuyerInfoIdOneOf$3 {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
    /** Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction). */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$3 {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
}
interface AdditionalFeeDetails$1 {
    /** Additional fee. */
    additionalFee?: AdditionalFee$3;
    /** Tax details related to the additional fee. */
    taxDetails?: TaxDetails$1;
    /**
     * Source of the additional fee.
     *
     * Supported values:
     * + `ORIGINAL_ORDER`: This additional fee is part of the original order.
     * + `CUSTOM`: This additional fee was created by the [Create Custom Additional Fees](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/draft-orders/create-custom-additional-fees) API.
     */
    source?: SourceType$1;
    /** Whether this additional fee is applied to the order. */
    applied?: boolean;
}
interface AdditionalFee$3 {
    /** Additional fee's unique code for future processing. */
    code?: string | null;
    /** Name of additional fee. */
    name?: string;
    /** Additional fee's price. */
    price?: Price$9;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$5;
    /** SPI implementer's `appId`. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: Price$9;
    /** Additional fee's price after tax. */
    priceAfterTax?: Price$9;
    /** Additional fee's id. */
    id?: string;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface TaxDetails$1 {
    /** Indication if additional fee is taxable or not */
    taxable?: boolean;
    /** Optional tax group ID to use when calculating tax for this additional fee */
    taxGroupId?: string | null;
}
declare enum SourceType$1 {
    /** Part of the original order */
    ORIGINAL_ORDER = "ORIGINAL_ORDER",
    /** Added by estimate * */
    AUTOMATIC = "AUTOMATIC",
    /** Added manually to current draft order */
    CUSTOM = "CUSTOM"
}
interface DiscountDetails$1 {
    /** Discount details. */
    discount?: AppliedDiscount$5;
    /**
     * Source of the discount.
     *
     * Supported values:
     * + `ORIGINAL_ORDER`: This discount is part of the original order.
     * + `CUSTOM`: This discount was created by the [Create Custom Discounts](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/draft-orders/create-custom-discounts) API.
     */
    source?: SourceType$1;
    /** Whether this discount is applied to the order. */
    applied?: boolean;
}
interface AppliedDiscount$5 extends AppliedDiscountDiscountSourceOneOf$5 {
    /** Applied coupon info. */
    coupon?: Coupon$5;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$5;
    /** Automatic Discount */
    discountRule?: DiscountRule$5;
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to specific items.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: AppliedDiscountDiscountType$1;
    /**
     * IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @deprecated IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemIds?: string[];
    /** Discount id. */
    id?: string | null;
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$5 {
    /** Applied coupon info. */
    coupon?: Coupon$5;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$5;
    /** Automatic Discount */
    discountRule?: DiscountRule$5;
}
declare enum AppliedDiscountDiscountType$1 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$5 {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** Coupon value. */
    amount?: Price$9;
}
interface MerchantDiscount$5 extends MerchantDiscountMerchantDiscountReasonOneOf$3 {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason$3;
    /** Discount description as free text (optional). */
    description?: string | null;
    /** Discount amount. */
    amount?: Price$9;
}
/** @oneof */
interface MerchantDiscountMerchantDiscountReasonOneOf$3 {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason$3;
    /** Discount description as free text (optional). */
    description?: string | null;
}
declare enum DiscountReason$3 {
    UNSPECIFIED = "UNSPECIFIED",
    EXCHANGED_ITEMS = "EXCHANGED_ITEMS"
}
interface DiscountRule$5 {
    /** Discount rule ID */
    id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$5;
    /** Discount value. */
    amount?: Price$9;
}
interface DiscountRuleName$5 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface CreatedBy$3 extends CreatedByStringOneOf$3 {
    /** User ID. When the draft order was created by a Wix user. */
    userId?: string;
    /** App ID. When the draft order was created by an app. */
    appId?: string;
}
/** @oneof */
interface CreatedByStringOneOf$3 {
    /** User ID. When the draft order was created by a Wix user. */
    userId?: string;
    /** App ID. When the draft order was created by an app. */
    appId?: string;
}
declare enum EditingStatus$1 {
    /** DraftOrder is in draft state. */
    DRAFT = "DRAFT",
    /** DraftOrder is in committed state. */
    COMMITTED = "COMMITTED"
}
declare enum WeightUnit$7 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface PriceSummary$5 {
    /** Subtotal of all the line items, before discounts and before tax. */
    subtotal?: Price$9;
    /** Total shipping price, before discounts and before tax. */
    shipping?: Price$9;
    /** Total tax on this order. */
    tax?: Price$9;
    /** Total calculated discount value. */
    discount?: Price$9;
    /** Order’s total price after discounts and tax. */
    total?: Price$9;
    /** Total price of additional fees before tax. */
    totalAdditionalFees?: Price$9;
}
interface TaxSummary$5 {
    /**
     * Total tax.
     * @readonly
     */
    totalTax?: Price$9;
}
interface BalanceSummary$3 {
    /**
     * Amount left to pay for order to be considered paid.
     * @readonly
     */
    balance?: Balance$3;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price$9;
}
/**
 * Order balance. Reflects amount left to be paid on order and is calculated dynamically. Can be negative per balance definition.
 * `amount` field depends on order payment status:
 * + UNSPECIFIED, NOT_PAID: price_summary.total_price
 * + PARTIALLY_PAID : price_summary.total_price - pay_now.total_price
 * + PENDING, REFUNDED, PARTIALLY_REFUNDED, PAID : 0
 */
interface Balance$3 {
    /**
     * Balance amount.
     *
     * A negative `amount` represents the amount to be refunded. This can happen due to overcharging or the order being modified after a payment has been made.
     * @readonly
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
/** Side-effects upon committing a draft order. */
interface DraftOrderCommitSettings$1 {
    /**
     * Whether to send notifications to the buyer.
     *
     * Default: `true`
     */
    sendNotificationsToBuyer?: boolean | null;
    /**
     * Whether to send notifications to the business.
     *
     * Default: `true`
     */
    sendNotificationsToBusiness?: boolean | null;
    /**
     * Whether to add activities to the order.
     *
     * Default: `true`
     */
    addActivitiesToOrder?: boolean | null;
    /**
     * Whether to send email notifications to custom fulfillers when there is a change in the shippable items they fulfill.
     *
     * Default: `true`
     */
    sendNotificationsToCustomFulfillers?: boolean | null;
    /**
     * Line item IDs for which to perform an inventory change.
     * When not provided, inventory will not change.
     */
    updateInventory?: InventoryUpdate$1[];
}
interface InventoryUpdate$1 {
    /** Line item ID. */
    lineItemId?: string;
}
interface RecipientInfoDetails$1 extends RecipientInfoDetailsChangeTypeOneOf$1 {
    /** Indicates that recipient information was added during draft. */
    added?: boolean;
    /** Indicates that recipient information was changed. Contains recipient information before draft. */
    changedDetails?: RecipientInfoChangedDetails$1;
    /** Indicates that recipient information was removed during draft. */
    removed?: boolean;
    /** Order recipient address and contact details. */
    recipientInfo?: AddressWithContact$3;
}
/** @oneof */
interface RecipientInfoDetailsChangeTypeOneOf$1 {
    /** Indicates that recipient information was added during draft. */
    added?: boolean;
    /** Indicates that recipient information was changed. Contains recipient information before draft. */
    changedDetails?: RecipientInfoChangedDetails$1;
    /** Indicates that recipient information was removed during draft. */
    removed?: boolean;
}
interface RecipientInfoChangedDetails$1 {
    /** Order recipient address and contact details before draft. */
    recipientInfoBeforeChange?: AddressWithContact$3;
}
interface OrderTaxInfo$3 {
    /** Calculated tax, added from line items. */
    totalTax?: Price$9;
    /** The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate. */
    taxBreakdown?: OrderTaxBreakdown$3[];
    /**
     * Whether the draft order is exempt from tax calculations.
     *
     * Default: `false`
     * @readonly
     */
    taxExempt?: boolean | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface OrderTaxBreakdown$3 {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionType?: JurisdictionType$5;
    /** The rate at which this tax detail was calculated. */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: Price$9;
}
interface ExtendedFields$b {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateDraftOrderRequest$1 {
    /** To create a draft from existing order, provide its id. Otherwise, an empty draft will be created. */
    orderId: string | null;
}
interface CreateDraftOrderResponse$1 {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface CalculatedDraftOrder$1 {
    /**
     * The draft order full details with calculations based on it's content.
     * Discount and additional fee options are also included.
     */
    draftOrder?: DraftOrder$1;
    /** Shipping options for the order. */
    shippingOptions?: ShippingOption$5[];
    /** Errors that occurred during calculation. */
    calculationErrors?: CalculationErrors$3;
}
interface ShippingOption$5 {
    /** This carrier's unique ID */
    carrierId?: string | null;
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
    /** Shipping rate title. For example, `"USPS Standard Overnight Delivery"`, `"Standard"`, or `"First-Class Package International"`. */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics$7;
    /** Shipping cost. */
    cost?: ShippingPrice$5;
}
interface DeliveryLogistics$7 {
    /** When the item is expected to be delivered in free text, e.g "3-5 business days" */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Ensure to come during Opening Hours, and please don't park in disabled-spot" */
    instructions?: string | null;
    /** Additional pickup details if it's a pickup */
    pickupDetails?: PickupDetails$7;
    /** Expected delivery time slot (from and to time stamps representation) */
    deliveryTimeSlot?: DeliveryTimeSlot$5;
}
interface PickupDetails$7 {
    /** Pickup address */
    address?: Address$b;
    /**
     * Pickup method.
     *
     * Supported values:
     * + `"STORE_PICKUP"`
     * + `"PICKUP_POINT"`
     */
    pickupMethod?: PickupMethod$7;
}
declare enum PickupMethod$7 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$5 {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
interface ShippingPrice$5 {
    /** The shipping rate's price. Must align with the [currency's decimal separator](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). */
    price?: Price$9;
    /** Currency of the shipping rate price as a 3-letter [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217). Must align with the `currency` passed to the function. */
    currency?: string;
}
interface CalculationErrors$3 extends CalculationErrorsShippingCalculationErrorOneOf$3 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$5;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$3;
    /** Tax calculation error. */
    taxCalculationError?: Details$5;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$d[];
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$3 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$5;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$3;
}
interface Details$5 extends DetailsKindOneOf$5 {
    applicationError?: ApplicationError$d;
    validationError?: ValidationError$5;
    systemError?: SystemError$5;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$5 {
    applicationError?: ApplicationError$d;
    validationError?: ValidationError$5;
    systemError?: SystemError$5;
}
interface ApplicationError$d {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$5 {
    fieldViolations?: FieldViolation$5[];
}
declare enum RuleType$5 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$5 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$5;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$5 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$3 {
    /** Carrier errors. */
    errors?: CarrierError$3[];
}
interface CarrierError$3 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$5;
}
interface CreateEmptyDraftOrderRequest$1 {
}
interface CreateEmptyDraftOrderResponse$1 {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface AddLineItemsToDraftOrderRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** Catalog line items to add to draft order. */
    catalogLineItems?: CatalogReferenceLineItem$1[];
    /** Custom line items to add to draft order. Custom line items don't trigger the Catalog service plugin. */
    customLineItems?: CustomLineItem$1[];
}
interface CatalogReferenceLineItem$1 {
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$9;
    /** Item quantity. */
    quantity?: number;
    /** Item price override. */
    price?: Price$9;
}
interface CustomLineItem$1 {
    /** Line item ID. */
    id?: string | null;
    /**
     * Item quantity.
     *
     * Min: `"1"`
     * Max: `"100000"`
     */
    quantity?: number;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$9;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName$3;
    /** URL to the item's page on the site. */
    url?: PageUrlV2;
    /** Item price **after** catalog-defined discount and line item discounts. */
    price?: Price$9;
    /** Total line item price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: Price$9;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: Price$9;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: Price$9;
    /** Line item description lines. Used for display purposes for order. */
    descriptionLines?: DescriptionLine$3[];
    /** Line item image details. */
    media?: Image$2;
    /** Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability. */
    physicalProperties?: PhysicalProperties$7;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$5;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$3;
    /** Delivery Profile Id for the product */
    deliveryProfileId?: string | null;
}
interface PageUrlV2 {
    /** The relative path for the page within the site. For example, `/product-page/a-product`. */
    relativePath?: string;
    /** The page's full URL. For example, `https://mysite.com/product-page/a-product`. */
    url?: string | null;
}
interface AddLineItemsToDraftOrderResponse$1 {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface UpdateLineItemsRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** Details of changes to apply per line item */
    lineItemChanges?: LineItemChangeDetails$1[];
}
interface LineItemChangeDetails$1 {
    /** The line item id to change */
    lineItemId?: string;
    /** The new quantity for the line item. quantity zero means to remove the line item. */
    newQuantity?: number | null;
    /** The new price for 1 unit of the line item */
    newPrice?: string | null;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    newPriceDescription?: PriceDescription$3;
}
interface UpdateLineItemsResponse$1 {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface SetDiscountsRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** The discount ids to opt-in. all existing discounts not listed are to be opted-out. */
    discounts: IdAndApplied$1[];
}
interface IdAndApplied$1 {
    /** Discount ID. */
    id?: string;
    /** Whether to apply the discount to the draft order. */
    applied?: boolean;
}
interface SetDiscountsResponse$1 {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface CreateCustomDiscountsRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** The discounts to add. */
    discounts?: DiscountOption$1[];
}
interface DiscountOption$1 extends DiscountOptionDiscountAmountOneOf$1 {
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to a specific item.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: DiscountType$5;
    /**
     * ID of line item discount applies to.
     * @deprecated ID of line item discount applies to.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemId?: string | null;
    /**
     * Discount amount.
     * @deprecated Discount amount.
     * @replacedBy price_amount and percentage
     * @targetRemovalDate 2024-08-30
     */
    amount?: Price$9;
    /** Discount description as free text (optional). */
    description?: string | null;
    /**
     * Should opt-in the added discount. default = false.
     * if not set or false, then to opt-in them, please call SetDiscounts with the added discounts ids
     */
    applyToDraftOrder?: boolean | null;
}
/** @oneof */
interface DiscountOptionDiscountAmountOneOf$1 {
}
declare enum DiscountType$5 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
interface CreateCustomDiscountsResponse$1 {
    /** The draft order details with the added discounts */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface DeleteCustomDiscountsRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** The discounts to remove */
    discountIds: string[];
}
interface DeleteCustomDiscountsResponse$1 {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface SetAdditionalFeesRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** The additional fees ids to opt-in. all existing additional fees not listed are to be opted-out */
    additionalFees: IdAndApplied$1[];
}
interface SetAdditionalFeesResponse$1 {
    /** The draft order details calculated with modified additional fees */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface CreateCustomAdditionalFeesRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** The additional fees to add. added with opted-out setting */
    customAdditionalFees?: AdditionalFeeOption$1[];
}
interface AdditionalFeeOption$1 {
    /** Translated additional fee's name */
    name?: string;
    /** Additional fee's price */
    price?: Price$9;
    /** Tax calculation details */
    taxDetails?: TaxDetails$1;
    /**
     * Should apply the additional fee. default = false.
     * if not set or false, then to apply them, please call ApplyAdditionalFees with the added additional fee ids
     */
    applyToDraftOrder?: boolean | null;
    /** Additional fee's unique code (or ID) for future processing */
    code?: string | null;
}
interface CreateCustomAdditionalFeesResponse$1 {
    /** The draft order details with added custom additional fees */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface DeleteCustomAdditionalFeesRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** The additional fees to remove */
    customAdditionalFees: string[];
}
interface DeleteCustomAdditionalFeesResponse$1 {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface SetShippingInfoRequest$1 {
}
interface SetShippingInfoResponse$1 {
}
interface SetBuyerInfoRequest$1 {
}
interface SetBuyerInfoResponse$1 {
}
interface SetRecipientInfoRequest$1 {
}
interface SetRecipientInfoResponse$1 {
}
interface SetBillingInfoRequest$1 {
}
interface SetBillingInfoResponse$1 {
}
interface GetDraftOrderRequest$1 {
    /** The draft order id */
    draftOrderId: string;
}
interface GetDraftOrderResponse$1 {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder$1;
}
interface GetOrderDraftabilityStatusRequest$1 {
    /** Order ID. */
    orderId: string;
}
interface GetOrderDraftabilityStatusResponse$1 {
    /** Order ID. */
    orderId?: string;
    /** Whether a draft can be created from this order */
    orderDraftable?: boolean;
    /** Reasons why the order is not draftable */
    nonDraftableReasons?: NonDraftableReason$1[];
}
declare enum NonDraftableReason$1 {
    UNSPECIFIED = "UNSPECIFIED",
    PARTIALLY_OR_FULLY_REFUNDED = "PARTIALLY_OR_FULLY_REFUNDED",
    UNSUPPORTED_CHANNEL_TYPE = "UNSUPPORTED_CHANNEL_TYPE",
    ORDER_STATUS_IS_NOT_SUPPORTED = "ORDER_STATUS_IS_NOT_SUPPORTED",
    ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT = "ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT",
    ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT = "ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT",
    AMOUNTS_DO_NOT_ADD_UP = "AMOUNTS_DO_NOT_ADD_UP",
    /** remove - this is not a reason, it's an error */
    ORDER_NOT_FOUND = "ORDER_NOT_FOUND",
    SUBSCRIPTION_LINE_ITEM_EXISTS = "SUBSCRIPTION_LINE_ITEM_EXISTS",
    UNSUPPORTED_CATALOG_ITEM = "UNSUPPORTED_CATALOG_ITEM",
    TAXABLE_EXISTING_ADDITIONAL_FEE = "TAXABLE_EXISTING_ADDITIONAL_FEE"
}
interface CommitDraftOrderRequest$1 {
    /** The draft order id */
    draftOrderId: string;
    /** Optional side effects to trigger */
    commitSettings?: DraftOrderCommitSettings$1;
    /** Reason for edit, given by user (optional). */
    reason?: string | null;
}
interface CommitDraftOrderResponse$1 {
    /** The draft order after commit. */
    committedDraftOrder?: DraftOrder$1;
    /** The updated order after commit. */
    orderAfterCommit?: Order$3;
}
interface Order$3 {
    /**
     * Order ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Order number displayed in the site owner's dashboard (auto-generated).
     * @readonly
     */
    number?: string;
    /**
     * Date and time the order was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Order line items.
     * @readonly
     */
    lineItems?: OrderLineItem$3[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo$3;
    /**
     * Order payment status.
     * + `NOT_PAID` - This can be an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.
     * + This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.
     * + `PAID` - All payments associated with this order are paid. For online payments: [`payment.regularPaymentDetails.status: APPROVED`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object). For gift cards: [`payment.giftCardPaymentDetails.voided: false`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object).
     * + `PARTIALLY_REFUNDED` - Order was refunded, but refund amount is less than order total price.
     * + `FULLY_REFUNDED` - Order fully refunded. Refund amount equals total price.
     * + `PENDING` - Payments received but not yet confirmed by the payment provider.
     * + `PARTIALLY_PAID` -  At least one payment was received and approved, covering less than total price amount.
     */
    paymentStatus?: PaymentStatus$3;
    /**
     * Order fulfillment status.
     * @readonly
     */
    fulfillmentStatus?: FulfillmentStatus$3;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$7;
    /** Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format. */
    currency?: string | null;
    /** Whether tax is included in line item prices. */
    taxIncludedInPrices?: boolean;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary$5;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact$3;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: V1ShippingInformation$3;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /**
     * Order status.
     * + `INITIALIZED`: Order created, but not yet approved or canceled.
     * + `APPROVED`: Order approved. This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order). Offline orders (cash payment) are automatically approved.
     * + `CANCELED`: Order canceled by the user.
     */
    status?: OrderStatus$3;
    /** Whether order is archived. */
    archived?: boolean | null;
    /**
     * Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @deprecated Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary$5;
    /** Tax information. */
    taxInfo?: OrderTaxInfo$3;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$5[];
    /**
     * Order activities.
     * @readonly
     */
    activities?: Activity$3[];
    /** Order attribution source. */
    attributionSource?: AttributionSource$3;
    /**
     * ID of the order's initiator.
     * @readonly
     */
    createdBy?: V1CreatedBy$1;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo$3;
    /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */
    seenByAHuman?: boolean | null;
    /** Checkout ID. */
    checkoutId?: string | null;
    /** Custom fields. */
    customFields?: CustomField$3[];
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: V1BalanceSummary$1;
    /** Additional fees applied to the order. */
    additionalFees?: AdditionalFee$3[];
    /**
     * Custom field data for the order object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$b;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact$3;
    /**
     * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * Used for migration from external systems.
     */
    purchasedDate?: Date | null;
}
declare enum PaymentStatus$3 {
    UNSPECIFIED = "UNSPECIFIED",
    /** Order is not paid */
    NOT_PAID = "NOT_PAID",
    /** Order is paid */
    PAID = "PAID",
    /** Order was refunded, refund amount less than order total price */
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    /** Full order total price was refunded */
    FULLY_REFUNDED = "FULLY_REFUNDED",
    /** Payments received but not yet confirmed by the payment provider */
    PENDING = "PENDING",
    /** At least one payment was received and approved, covering less than total price amount */
    PARTIALLY_PAID = "PARTIALLY_PAID"
}
declare enum FulfillmentStatus$3 {
    /** none of the order items are fulfilled or order was manually marked as unfulfilled */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled or order was manually marked as fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FULFILLED = "FULFILLED",
    /** Some, but not all of the order items are fulfilled */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
declare enum OrderStatus$3 {
    INITIALIZED = "INITIALIZED",
    APPROVED = "APPROVED",
    CANCELED = "CANCELED"
}
interface Activity$3 extends ActivityContentOneOf$3 {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity$3;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment$3;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded$3;
    /**
     * Activity ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Activity author's email.
     * @readonly
     */
    authorEmail?: string | null;
    /**
     * Activity creation date and time.
     * @readonly
     */
    createdDate?: Date | null;
    /** Activity type. */
    type?: ActivityType$3;
}
/** @oneof */
interface ActivityContentOneOf$3 {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity$3;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment$3;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded$3;
}
interface CustomActivity$3 {
    /** ID of the app that created the custom activity. */
    appId?: string;
    /** Custom activity type. For example, `"Ticket number set"`. */
    type?: string;
    /** Additional data in key-value form. For example, `{ "Ticket number": "123456" }`. */
    additionalData?: Record<string, string>;
}
/** Store owner added a comment */
interface MerchantComment$3 {
    /** Merchant comment message. */
    message?: string;
}
interface OrderRefunded$3 {
    /** Whether order was refunded manually. For example, via payment provider or using cash. */
    manual?: boolean;
    /** Refund amount. */
    amount?: Price$9;
    /** Reason for refund. */
    reason?: string;
}
declare enum LineItemQuantityChangeType$3 {
    QUANTITY_INCREASED = "QUANTITY_INCREASED",
    QUANTITY_DECREASED = "QUANTITY_DECREASED"
}
declare enum ActivityType$3 {
    ORDER_REFUNDED = "ORDER_REFUNDED",
    ORDER_PLACED = "ORDER_PLACED",
    ORDER_PAID = "ORDER_PAID",
    ORDER_FULFILLED = "ORDER_FULFILLED",
    ORDER_NOT_FULFILLED = "ORDER_NOT_FULFILLED",
    ORDER_CANCELED = "ORDER_CANCELED",
    DOWNLOAD_LINK_SENT = "DOWNLOAD_LINK_SENT",
    TRACKING_NUMBER_ADDED = "TRACKING_NUMBER_ADDED",
    TRACKING_NUMBER_EDITED = "TRACKING_NUMBER_EDITED",
    TRACKING_LINK_ADDED = "TRACKING_LINK_ADDED",
    SHIPPING_CONFIRMATION_EMAIL_SENT = "SHIPPING_CONFIRMATION_EMAIL_SENT",
    INVOICE_ADDED = "INVOICE_ADDED",
    INVOICE_REMOVED = "INVOICE_REMOVED",
    INVOICE_SENT = "INVOICE_SENT",
    FULFILLER_EMAIL_SENT = "FULFILLER_EMAIL_SENT",
    SHIPPING_ADDRESS_EDITED = "SHIPPING_ADDRESS_EDITED",
    EMAIL_EDITED = "EMAIL_EDITED",
    PICKUP_READY_EMAIL_SENT = "PICKUP_READY_EMAIL_SENT",
    CUSTOM_ACTIVITY = "CUSTOM_ACTIVITY",
    MERCHANT_COMMENT = "MERCHANT_COMMENT",
    ORDER_CREATED_FROM_EXCHANGE = "ORDER_CREATED_FROM_EXCHANGE",
    NEW_EXCHANGE_ORDER_CREATED = "NEW_EXCHANGE_ORDER_CREATED",
    ORDER_PARTIALLY_PAID = "ORDER_PARTIALLY_PAID",
    DRAFT_ORDER_CHANGES_APPLIED = "DRAFT_ORDER_CHANGES_APPLIED",
    SAVED_PAYMENT_METHOD = "SAVED_PAYMENT_METHOD"
}
declare enum AttributionSource$3 {
    UNSPECIFIED = "UNSPECIFIED",
    FACEBOOK_ADS = "FACEBOOK_ADS"
}
interface V1CreatedBy$1 extends V1CreatedByStringOneOf$1 {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
/** @oneof */
interface V1CreatedByStringOneOf$1 {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
interface ChannelInfo$3 {
    /** Sales channel that submitted the order. */
    type?: ChannelType$3;
    /** Reference to an order ID from an external system. */
    externalOrderId?: string | null;
    /** URL to the order in the external system. */
    externalOrderUrl?: string | null;
}
declare enum ChannelType$3 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CustomField$3 {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
interface V1BalanceSummary$1 {
    /**
     * Current amount left to pay.
     * @readonly
     */
    balance?: Balance$3;
    /**
     * Sum of all approved and successful payments.
     *
     * The value includes payments that have subsequently been fully or partially refunded.
     * @readonly
     */
    paid?: Price$9;
    /**
     * Sum of all successfully refunded payments.
     * @readonly
     */
    refunded?: Price$9;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price$9;
}
interface CreateOrderFromDraftRequest$1 {
}
interface CreateOrderFromDraftResponse$1 {
}
interface DeleteDraftOrderRequest$1 {
    /** The draft order id */
    draftOrderId: string;
}
interface DeleteDraftOrderResponse$1 {
}
interface QueryDraftOrdersRequest$1 {
    /** WQL expression */
    query?: CursorQuery$9;
}
interface CursorQuery$9 extends CursorQueryPagingMethodOneOf$9 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$h;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$h[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$9 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$h;
}
interface Sorting$h {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$h;
}
declare enum SortOrder$h {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$h {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryDraftOrdersResponse$1 {
    /** list of edits per order */
    draftOrders?: DraftOrder$1[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$f;
}
interface CursorPagingMetadata$f {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$h;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$h {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface PriceNonNullableFields$9 {
    amount: string;
    formattedAmount: string;
}
interface PriceDescriptionNonNullableFields$3 {
    original: string;
}
interface ItemChangedDetailsNonNullableFields$1 {
    priceBeforeChange?: PriceNonNullableFields$9;
    priceDescriptionBeforeChange?: PriceDescriptionNonNullableFields$3;
}
interface ProductNameNonNullableFields$3 {
    original: string;
}
interface CatalogReferenceNonNullableFields$3 {
    catalogItemId: string;
    appId: string;
}
interface PlainTextValueNonNullableFields$3 {
    original: string;
}
interface ColorNonNullableFields$3 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$3 {
    original: string;
}
interface DescriptionLineNonNullableFields$3 {
    plainText?: PlainTextValueNonNullableFields$3;
    colorInfo?: ColorNonNullableFields$3;
    plainTextValue?: PlainTextValueNonNullableFields$3;
    color: string;
    name?: DescriptionLineNameNonNullableFields$3;
    lineType: DescriptionLineType$3;
}
interface ImageNonNullableFields$2 {
    id: string;
    url: string;
    height: number;
    width: number;
}
interface PhysicalPropertiesNonNullableFields$3 {
    shippable: boolean;
}
interface ItemTypeNonNullableFields$3 {
    preset: ItemTypeItemType$5;
    custom: string;
}
interface ItemTaxFullDetailsNonNullableFields$5 {
    taxableAmount?: PriceNonNullableFields$9;
    taxRate: string;
    totalTax?: PriceNonNullableFields$9;
}
interface LineItemTaxBreakdownNonNullableFields$3 {
    taxAmount?: PriceNonNullableFields$9;
    jurisdictionType: JurisdictionType$5;
    nonTaxableAmount?: PriceNonNullableFields$9;
    taxableAmount?: PriceNonNullableFields$9;
}
interface LineItemTaxInfoNonNullableFields$3 {
    taxAmount?: PriceNonNullableFields$9;
    taxableAmount?: PriceNonNullableFields$9;
    taxIncludedInPrice: boolean;
    taxBreakdown: LineItemTaxBreakdownNonNullableFields$3[];
}
interface DigitalFileNonNullableFields$3 {
    fileId: string;
}
interface SubscriptionSettingsNonNullableFields$3 {
    frequency: SubscriptionFrequency$5;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
}
interface SubscriptionInfoNonNullableFields$3 {
    cycleNumber: number;
    subscriptionOptionTitle: string;
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$3;
}
interface LocationAndQuantityNonNullableFields$3 {
    id: string;
    quantity: number;
}
interface TaxableAddressNonNullableFields$5 {
    addressType: TaxableAddressType$5;
}
interface OrderLineItemNonNullableFields$3 {
    id: string;
    productName?: ProductNameNonNullableFields$3;
    catalogReference?: CatalogReferenceNonNullableFields$3;
    quantity: number;
    totalDiscount?: PriceNonNullableFields$9;
    descriptionLines: DescriptionLineNonNullableFields$3[];
    image?: ImageNonNullableFields$2;
    physicalProperties?: PhysicalPropertiesNonNullableFields$3;
    itemType?: ItemTypeNonNullableFields$3;
    price?: PriceNonNullableFields$9;
    priceBeforeDiscounts?: PriceNonNullableFields$9;
    totalPriceBeforeTax?: PriceNonNullableFields$9;
    totalPriceAfterTax?: PriceNonNullableFields$9;
    paymentOption: PaymentOptionType$5;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$5;
    taxInfo?: LineItemTaxInfoNonNullableFields$3;
    digitalFile?: DigitalFileNonNullableFields$3;
    subscriptionInfo?: SubscriptionInfoNonNullableFields$3;
    priceDescription?: PriceDescriptionNonNullableFields$3;
    depositAmount?: PriceNonNullableFields$9;
    locations: LocationAndQuantityNonNullableFields$3[];
    lineItemPrice?: PriceNonNullableFields$9;
    taxableAddress?: TaxableAddressNonNullableFields$5;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
}
interface ItemDetailsNonNullableFields$1 {
    added: boolean;
    changedDetails?: ItemChangedDetailsNonNullableFields$1;
    removed: boolean;
    lineItem?: OrderLineItemNonNullableFields$3;
}
interface StreetAddressNonNullableFields$b {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$b {
    streetAddress?: StreetAddressNonNullableFields$b;
}
interface VatIdNonNullableFields$3 {
    id: string;
    type: VatType$5;
}
interface FullAddressContactDetailsNonNullableFields$3 {
    vatId?: VatIdNonNullableFields$3;
}
interface AddressWithContactNonNullableFields$3 {
    address?: AddressNonNullableFields$b;
    contactDetails?: FullAddressContactDetailsNonNullableFields$3;
}
interface PickupAddressNonNullableFields$3 {
    streetAddress?: StreetAddressNonNullableFields$b;
}
interface V1PickupDetailsNonNullableFields$1 {
    address?: PickupAddressNonNullableFields$3;
    pickupMethod: PickupDetailsPickupMethod$1;
}
interface V1DeliveryLogisticsNonNullableFields$1 {
    shippingDestination?: AddressWithContactNonNullableFields$3;
    pickupDetails?: V1PickupDetailsNonNullableFields$1;
}
interface V1ShippingPriceNonNullableFields$1 {
    price?: PriceNonNullableFields$9;
    totalPriceBeforeTax?: PriceNonNullableFields$9;
    totalPriceAfterTax?: PriceNonNullableFields$9;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$5;
    discount?: PriceNonNullableFields$9;
}
interface V1ShippingInformationNonNullableFields$3 {
    title: string;
    logistics?: V1DeliveryLogisticsNonNullableFields$1;
    cost?: V1ShippingPriceNonNullableFields$1;
}
interface ShippingChangedDetailsNonNullableFields$1 {
    shippingInfoBeforeChange?: V1ShippingInformationNonNullableFields$3;
}
interface ShippingDetailsNonNullableFields$1 {
    added: boolean;
    changedDetails?: ShippingChangedDetailsNonNullableFields$1;
    removed: boolean;
    shippingInfo?: V1ShippingInformationNonNullableFields$3;
}
interface BuyerInfoNonNullableFields$3 {
    visitorId: string;
    memberId: string;
}
interface AdditionalFeeNonNullableFields$3 {
    name: string;
    price?: PriceNonNullableFields$9;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$5;
    priceBeforeTax?: PriceNonNullableFields$9;
    priceAfterTax?: PriceNonNullableFields$9;
    id: string;
    lineItemIds: string[];
}
interface TaxDetailsNonNullableFields$1 {
    taxable: boolean;
}
interface AdditionalFeeDetailsNonNullableFields$1 {
    additionalFee?: AdditionalFeeNonNullableFields$3;
    taxDetails?: TaxDetailsNonNullableFields$1;
    source: SourceType$1;
    applied: boolean;
}
interface CouponNonNullableFields$5 {
    id: string;
    code: string;
    name: string;
    amount?: PriceNonNullableFields$9;
}
interface MerchantDiscountNonNullableFields$5 {
    discountReason: DiscountReason$3;
    amount?: PriceNonNullableFields$9;
}
interface DiscountRuleNameNonNullableFields$5 {
    original: string;
}
interface DiscountRuleNonNullableFields$5 {
    id: string;
    name?: DiscountRuleNameNonNullableFields$5;
    amount?: PriceNonNullableFields$9;
}
interface LineItemDiscountNonNullableFields$5 {
    id: string;
    totalDiscount?: PriceNonNullableFields$9;
}
interface AppliedDiscountNonNullableFields$5 {
    coupon?: CouponNonNullableFields$5;
    merchantDiscount?: MerchantDiscountNonNullableFields$5;
    discountRule?: DiscountRuleNonNullableFields$5;
    discountType: AppliedDiscountDiscountType$1;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$5[];
}
interface DiscountDetailsNonNullableFields$1 {
    discount?: AppliedDiscountNonNullableFields$5;
    source: SourceType$1;
    applied: boolean;
}
interface CreatedByNonNullableFields$3 {
    userId: string;
    appId: string;
}
interface PriceSummaryNonNullableFields$5 {
    subtotal?: PriceNonNullableFields$9;
    shipping?: PriceNonNullableFields$9;
    tax?: PriceNonNullableFields$9;
    discount?: PriceNonNullableFields$9;
    totalPrice?: PriceNonNullableFields$9;
    total?: PriceNonNullableFields$9;
    totalWithGiftCard?: PriceNonNullableFields$9;
    totalWithoutGiftCard?: PriceNonNullableFields$9;
    totalAdditionalFees?: PriceNonNullableFields$9;
}
interface TaxSummaryNonNullableFields$5 {
    totalTax?: PriceNonNullableFields$9;
}
interface BalanceNonNullableFields$3 {
    amount: string;
    formattedAmount: string;
}
interface BalanceSummaryNonNullableFields$3 {
    balance?: BalanceNonNullableFields$3;
    paid?: PriceNonNullableFields$9;
    refunded?: PriceNonNullableFields$9;
    authorized?: PriceNonNullableFields$9;
}
interface InventoryUpdateNonNullableFields$1 {
    lineItemId: string;
}
interface DraftOrderCommitSettingsNonNullableFields$1 {
    updateInventory: InventoryUpdateNonNullableFields$1[];
}
interface RecipientInfoChangedDetailsNonNullableFields$1 {
    recipientInfoBeforeChange?: AddressWithContactNonNullableFields$3;
}
interface RecipientInfoDetailsNonNullableFields$1 {
    added: boolean;
    changedDetails?: RecipientInfoChangedDetailsNonNullableFields$1;
    removed: boolean;
    recipientInfo?: AddressWithContactNonNullableFields$3;
}
interface OrderTaxBreakdownNonNullableFields$3 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionType: JurisdictionType$5;
    rate: string;
    aggregatedTaxAmount?: PriceNonNullableFields$9;
    aggregatedTaxableAmount?: PriceNonNullableFields$9;
}
interface OrderTaxInfoNonNullableFields$3 {
    totalTax?: PriceNonNullableFields$9;
    taxBreakdown: OrderTaxBreakdownNonNullableFields$3[];
}
interface BuyerChangedDetailsNonNullableFields$1 {
    buyerInfoBeforeChange?: BuyerInfoNonNullableFields$3;
}
interface BuyerDetailsNonNullableFields$1 {
    added: boolean;
    changedDetails?: BuyerChangedDetailsNonNullableFields$1;
    removed: boolean;
    buyerInfo?: BuyerInfoNonNullableFields$3;
}
interface BillingChangedDetailsNonNullableFields$1 {
    billingInfoBeforeChange?: AddressWithContactNonNullableFields$3;
}
interface BillingDetailsNonNullableFields$1 {
    added: boolean;
    changedDetails?: BillingChangedDetailsNonNullableFields$1;
    removed: boolean;
    billingInfo?: AddressWithContactNonNullableFields$3;
}
interface DraftOrderNonNullableFields$1 {
    lineItems: ItemDetailsNonNullableFields$1[];
    shippingInfo?: ShippingDetailsNonNullableFields$1;
    buyerInfo?: BuyerInfoNonNullableFields$3;
    billingInfo?: AddressWithContactNonNullableFields$3;
    additionalFees: AdditionalFeeDetailsNonNullableFields$1[];
    discounts: DiscountDetailsNonNullableFields$1[];
    createdBy?: CreatedByNonNullableFields$3;
    status: EditingStatus$1;
    weightUnit: WeightUnit$7;
    priceSummary?: PriceSummaryNonNullableFields$5;
    taxSummary?: TaxSummaryNonNullableFields$5;
    balanceSummary?: BalanceSummaryNonNullableFields$3;
    commitSettings?: DraftOrderCommitSettingsNonNullableFields$1;
    recipientInfo?: RecipientInfoDetailsNonNullableFields$1;
    taxInfo?: OrderTaxInfoNonNullableFields$3;
    buyerDetails?: BuyerDetailsNonNullableFields$1;
    billingDetails?: BillingDetailsNonNullableFields$1;
}
interface PickupDetailsNonNullableFields$7 {
    address?: AddressNonNullableFields$b;
    pickupMethod: PickupMethod$7;
}
interface DeliveryLogisticsNonNullableFields$7 {
    pickupDetails?: PickupDetailsNonNullableFields$7;
}
interface ShippingPriceNonNullableFields$5 {
    price?: PriceNonNullableFields$9;
    currency: string;
}
interface ShippingOptionNonNullableFields$5 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$7;
    cost?: ShippingPriceNonNullableFields$5;
}
interface ApplicationErrorNonNullableFields$d {
    code: string;
    description: string;
}
interface FieldViolationNonNullableFields$5 {
    field: string;
    description: string;
    violatedRule: RuleType$5;
}
interface ValidationErrorNonNullableFields$5 {
    fieldViolations: FieldViolationNonNullableFields$5[];
}
interface DetailsNonNullableFields$5 {
    applicationError?: ApplicationErrorNonNullableFields$d;
    validationError?: ValidationErrorNonNullableFields$5;
}
interface CarrierErrorNonNullableFields$3 {
    carrierId: string;
    error?: DetailsNonNullableFields$5;
}
interface CarrierErrorsNonNullableFields$3 {
    errors: CarrierErrorNonNullableFields$3[];
}
interface CalculationErrorsNonNullableFields$3 {
    generalShippingCalculationError?: DetailsNonNullableFields$5;
    carrierErrors?: CarrierErrorsNonNullableFields$3;
    taxCalculationError?: DetailsNonNullableFields$5;
    orderValidationErrors: ApplicationErrorNonNullableFields$d[];
}
interface CalculatedDraftOrderNonNullableFields$1 {
    draftOrder?: DraftOrderNonNullableFields$1;
    shippingOptions: ShippingOptionNonNullableFields$5[];
    calculationErrors?: CalculationErrorsNonNullableFields$3;
}
interface CreateDraftOrderResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface CreateEmptyDraftOrderResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface AddLineItemsToDraftOrderResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface UpdateLineItemsResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface SetDiscountsResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface CreateCustomDiscountsResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface DeleteCustomDiscountsResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface SetAdditionalFeesResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface CreateCustomAdditionalFeesResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface DeleteCustomAdditionalFeesResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface SetShippingInfoResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface SetBuyerInfoResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface SetRecipientInfoResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface SetBillingInfoResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface GetDraftOrderResponseNonNullableFields$1 {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields$1;
}
interface GetOrderDraftabilityStatusResponseNonNullableFields$1 {
    orderId: string;
    orderDraftable: boolean;
    nonDraftableReasons: NonDraftableReason$1[];
}
interface CustomActivityNonNullableFields$3 {
    appId: string;
    type: string;
}
interface MerchantCommentNonNullableFields$3 {
    message: string;
}
interface OrderRefundedNonNullableFields$3 {
    manual: boolean;
    amount?: PriceNonNullableFields$9;
    reason: string;
}
interface OrderCreatedFromExchangeNonNullableFields$3 {
    originalOrderId: string;
}
interface LineItemExchangeDataNonNullableFields$3 {
    lineItemId: string;
    quantity: number;
}
interface NewExchangeOrderCreatedNonNullableFields$3 {
    exchangeOrderId: string;
    lineItems: LineItemExchangeDataNonNullableFields$3[];
}
interface LineItemQuantityChangeNonNullableFields$3 {
    originalQuantity: number;
    newQuantity: number;
    diff: number;
    deltaType: LineItemQuantityChangeType$3;
}
interface LineItemPriceChangeNonNullableFields$3 {
    originalPrice?: PriceNonNullableFields$9;
    newPrice?: PriceNonNullableFields$9;
}
interface LineItemChangesNonNullableFields$3 {
    id: string;
    name?: ProductNameNonNullableFields$3;
    quantity?: LineItemQuantityChangeNonNullableFields$3;
    price?: LineItemPriceChangeNonNullableFields$3;
}
interface ManagedLineItemNonNullableFields$3 {
    id: string;
    name?: ProductNameNonNullableFields$3;
    quantity: number;
}
interface TranslatedValueNonNullableFields$3 {
    original: string;
}
interface LineItemAmountNonNullableFields$3 {
    id: string;
    name?: ProductNameNonNullableFields$3;
    amount?: PriceNonNullableFields$9;
}
interface ManagedDiscountNonNullableFields$3 {
    id: string;
    name?: TranslatedValueNonNullableFields$3;
    affectedLineItems: LineItemAmountNonNullableFields$3[];
    totalAmount?: PriceNonNullableFields$9;
}
interface ManagedAdditionalFeeNonNullableFields$3 {
    id: string;
    name?: TranslatedValueNonNullableFields$3;
    affectedLineItems: LineItemAmountNonNullableFields$3[];
    totalAmount?: PriceNonNullableFields$9;
}
interface TotalPriceChangeNonNullableFields$3 {
    originalTotal?: PriceNonNullableFields$9;
    newTotal?: PriceNonNullableFields$9;
}
interface ShippingInformationNonNullableFields$5 {
    total?: PriceNonNullableFields$9;
    shippingTitle: string;
}
interface ShippingInformationChangeNonNullableFields$3 {
    originalShippingInfo?: ShippingInformationNonNullableFields$5;
    newShippingInfo?: ShippingInformationNonNullableFields$5;
}
interface OrderChangeNonNullableFields$3 {
    lineItemChanged?: LineItemChangesNonNullableFields$3;
    lineItemAdded?: ManagedLineItemNonNullableFields$3;
    lineItemRemoved?: ManagedLineItemNonNullableFields$3;
    discountAdded?: ManagedDiscountNonNullableFields$3;
    discountRemoved?: ManagedDiscountNonNullableFields$3;
    additionalFeeAdded?: ManagedAdditionalFeeNonNullableFields$3;
    additionalFeeRemoved?: ManagedAdditionalFeeNonNullableFields$3;
    totalPriceChanged?: TotalPriceChangeNonNullableFields$3;
    shippingInformationChanged?: ShippingInformationChangeNonNullableFields$3;
}
interface DraftOrderChangesAppliedNonNullableFields$3 {
    draftOrderId: string;
    changes: OrderChangeNonNullableFields$3[];
}
interface SavedPaymentMethodNonNullableFields$3 {
    name: string;
}
interface AuthorizedPaymentCreatedNonNullableFields$3 {
    paymentId: string;
    amount?: PriceNonNullableFields$9;
}
interface AuthorizedPaymentCapturedNonNullableFields$3 {
    paymentId: string;
    amount?: PriceNonNullableFields$9;
}
interface AuthorizedPaymentVoidedNonNullableFields$3 {
    paymentId: string;
    amount?: PriceNonNullableFields$9;
}
interface RegularPaymentRefundNonNullableFields$3 {
    amount?: PriceNonNullableFields$9;
}
interface GiftCardPaymentRefundNonNullableFields$3 {
    amount?: PriceNonNullableFields$9;
}
interface RefundedPaymentNonNullableFields$3 {
    regular?: RegularPaymentRefundNonNullableFields$3;
    giftCard?: GiftCardPaymentRefundNonNullableFields$3;
    paymentId: string;
    externalRefund: boolean;
}
interface RefundInitiatedNonNullableFields$3 {
    refundId: string;
    amount?: PriceNonNullableFields$9;
    payments: RefundedPaymentNonNullableFields$3[];
}
interface PaymentRefundedNonNullableFields$3 {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields$3;
}
interface PaymentRefundFailedNonNullableFields$3 {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields$3;
}
interface RefundedAsStoreCreditNonNullableFields$3 {
    amount?: PriceNonNullableFields$9;
}
interface RegularPaymentNonNullableFields$3 {
    amount?: PriceNonNullableFields$9;
}
interface PaymentPendingNonNullableFields$3 {
    regular?: RegularPaymentNonNullableFields$3;
    paymentId: string;
}
interface PaymentCanceledNonNullableFields$3 {
    regular?: RegularPaymentNonNullableFields$3;
    paymentId: string;
}
interface PaymentDeclinedNonNullableFields$3 {
    regular?: RegularPaymentNonNullableFields$3;
    paymentId: string;
}
interface ActivityNonNullableFields$3 {
    customActivity?: CustomActivityNonNullableFields$3;
    merchantComment?: MerchantCommentNonNullableFields$3;
    orderRefunded?: OrderRefundedNonNullableFields$3;
    orderCreatedFromExchange?: OrderCreatedFromExchangeNonNullableFields$3;
    newExchangeOrderCreated?: NewExchangeOrderCreatedNonNullableFields$3;
    draftOrderChangesApplied?: DraftOrderChangesAppliedNonNullableFields$3;
    savedPaymentMethod?: SavedPaymentMethodNonNullableFields$3;
    authorizedPaymentCreated?: AuthorizedPaymentCreatedNonNullableFields$3;
    authorizedPaymentCaptured?: AuthorizedPaymentCapturedNonNullableFields$3;
    authorizedPaymentVoided?: AuthorizedPaymentVoidedNonNullableFields$3;
    refundInitiated?: RefundInitiatedNonNullableFields$3;
    paymentRefunded?: PaymentRefundedNonNullableFields$3;
    paymentRefundFailed?: PaymentRefundFailedNonNullableFields$3;
    refundedAsStoreCredit?: RefundedAsStoreCreditNonNullableFields$3;
    paymentPending?: PaymentPendingNonNullableFields$3;
    paymentCanceled?: PaymentCanceledNonNullableFields$3;
    paymentDeclined?: PaymentDeclinedNonNullableFields$3;
    type: ActivityType$3;
}
interface V1CreatedByNonNullableFields$1 {
    userId: string;
    memberId: string;
    visitorId: string;
    appId: string;
}
interface ChannelInfoNonNullableFields$3 {
    type: ChannelType$3;
}
interface CustomFieldNonNullableFields$3 {
    title: string;
}
interface V1BalanceSummaryNonNullableFields$1 {
    balance?: BalanceNonNullableFields$3;
    paid?: PriceNonNullableFields$9;
    refunded?: PriceNonNullableFields$9;
    authorized?: PriceNonNullableFields$9;
    pendingRefund?: PriceNonNullableFields$9;
    pending?: PriceNonNullableFields$9;
}
interface TagListNonNullableFields$3 {
    tagIds: string[];
}
interface TagsNonNullableFields$3 {
    privateTags?: TagListNonNullableFields$3;
    tags?: TagListNonNullableFields$3;
}
interface OrderNonNullableFields$3 {
    number: string;
    lineItems: OrderLineItemNonNullableFields$3[];
    buyerInfo?: BuyerInfoNonNullableFields$3;
    paymentStatus: PaymentStatus$3;
    fulfillmentStatus: FulfillmentStatus$3;
    weightUnit: WeightUnit$7;
    taxIncludedInPrices: boolean;
    priceSummary?: PriceSummaryNonNullableFields$5;
    billingInfo?: AddressWithContactNonNullableFields$3;
    shippingInfo?: V1ShippingInformationNonNullableFields$3;
    status: OrderStatus$3;
    taxSummary?: TaxSummaryNonNullableFields$5;
    taxInfo?: OrderTaxInfoNonNullableFields$3;
    appliedDiscounts: AppliedDiscountNonNullableFields$5[];
    activities: ActivityNonNullableFields$3[];
    attributionSource: AttributionSource$3;
    createdBy?: V1CreatedByNonNullableFields$1;
    channelInfo?: ChannelInfoNonNullableFields$3;
    customFields: CustomFieldNonNullableFields$3[];
    isInternalOrderCreate: boolean;
    payNow?: PriceSummaryNonNullableFields$5;
    balanceSummary?: V1BalanceSummaryNonNullableFields$1;
    additionalFees: AdditionalFeeNonNullableFields$3[];
    recipientInfo?: AddressWithContactNonNullableFields$3;
    tags?: TagsNonNullableFields$3;
}
interface CommitDraftOrderResponseNonNullableFields$1 {
    committedDraftOrder?: DraftOrderNonNullableFields$1;
    orderAfterCommit?: OrderNonNullableFields$3;
}
interface CreateOrderFromDraftResponseNonNullableFields$1 {
    committedDraftOrder?: DraftOrderNonNullableFields$1;
    createdOrder?: OrderNonNullableFields$3;
}
interface QueryDraftOrdersResponseNonNullableFields$1 {
    draftOrders: DraftOrderNonNullableFields$1[];
}

/** DraftOrder is the main entity of DraftOrders service. It represents a single edit order. */
interface DraftOrder {
    /**
     * Draft order ID.
     * @readonly
     */
    _id?: string | null;
    /** ID of the order this draft commits to. */
    orderId?: string | null;
    /**
     * Line items.
     * Includes details about changes when relevant.
     */
    lineItems?: ItemDetails[];
    /**
     * Shipping info.
     * Includes details about changes when relevant.
     */
    shippingInfo?: ShippingDetails;
    /**
     * Buyer information.
     * @deprecated Buyer information.
     * @replacedBy buyer_info_details
     * @targetRemovalDate 2024-08-30
     */
    buyerInfo?: BuyerInfo$2;
    /**
     * Billing address and contact details.
     * @deprecated Billing address and contact details.
     * @replacedBy billing_info_details
     * @targetRemovalDate 2024-08-30
     */
    billingInfo?: AddressWithContact$2;
    /**
     * Additional fees.
     * Includes details about the source, and whether the additional fee is applied to the order.
     */
    additionalFees?: AdditionalFeeDetails[];
    /**
     * Discounts.
     * Includes details about the source, and whether the discount is applied to the order.
     */
    discounts?: DiscountDetails[];
    /**
     * Date and time the draft order was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the draft order was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Identity of the draft order's initiator.
     * @readonly
     */
    createdBy?: CreatedBy$2;
    /**
     * Draft order status.
     * @readonly
     */
    status?: EditingStatus;
    /** Weight measurement unit. Defaults to the site's weight unit. */
    weightUnit?: WeightUnit$6;
    /** Currency used for pricing. */
    currency?: string | null;
    /**
     * Price summary.
     * @readonly
     */
    priceSummary?: PriceSummary$4;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax summary.
     * @readonly
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax summary.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary$4;
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: BalanceSummary$2;
    /** Side effects to perform on commit. */
    commitSettings?: DraftOrderCommitSettings;
    /** Member ID (if order created by a member). */
    memberId?: string | null;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    recipientInfo?: RecipientInfoDetails;
    /**
     * Custom field data for the draft order object.
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$a;
}
interface ItemDetails extends ItemDetailsChangeTypeOneOf {
    /** Whether the line item was added as part of the draft. */
    added?: boolean;
    /** Line item fields before the change. */
    changedDetails?: ItemChangedDetails;
    /** Whether the line item was removed as part of the draft. */
    removed?: boolean;
    /** Line item details after applied changes. */
    lineItem?: OrderLineItem$2;
}
/** @oneof */
interface ItemDetailsChangeTypeOneOf {
    /** Whether the line item was added as part of the draft. */
    added?: boolean;
    /** Line item fields before the change. */
    changedDetails?: ItemChangedDetails;
    /** Whether the line item was removed as part of the draft. */
    removed?: boolean;
}
interface Price$8 {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface PriceDescription$2 {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface OrderLineItem$2 {
    /** Line item ID. */
    _id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName$2;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference$8;
    /** Line item quantity. */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price$8;
    /** Line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine$2[];
    /** Line item image. */
    image?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties$6;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$4;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
     */
    fulfillerId?: string | null;
    /**
     * Number of items that were refunded.
     * @readonly
     */
    refundQuantity?: number | null;
    /**
     * Number of items restocked.
     * @readonly
     */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price$8;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price$8;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$8;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$8;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` - Partial payment for the given item to be paid upfront during the checkout. Eligible for catalog items with type `DEPOSIT_ONLINE` only.
     */
    paymentOption?: PaymentOptionType$4;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails$4;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo$2;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile$2;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo$2;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$2;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price$8;
}
interface ProductName$2 {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$8 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface DescriptionLine$2 extends DescriptionLineValueOneOf$2, DescriptionLineDescriptionLineValueOneOf$2 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$2;
    /** Description line color value. */
    colorInfo?: Color$2;
    /** Description line name. */
    name?: DescriptionLineName$2;
}
/** @oneof */
interface DescriptionLineValueOneOf$2 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$2;
    /** Description line color value. */
    colorInfo?: Color$2;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$2 {
}
interface DescriptionLineName$2 {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$2 {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$2 {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$2 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface PhysicalProperties$6 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$4 extends ItemTypeItemTypeDataOneOf$4 {
    /** Preset item type. */
    preset?: ItemTypeItemType$4;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$4 {
    /** Preset item type. */
    preset?: ItemTypeItemType$4;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$4 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$4 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ItemTaxFullDetails$4 {
    /** Taxable amount of this line item. */
    taxableAmount?: Price$8;
    /** Tax rate percentage, as a decimal numeral between 0 and 1. For example, `"0.13"`. */
    taxRate?: string;
    /** The calculated tax, based on the `taxableAmount` and `taxRate`. */
    totalTax?: Price$8;
}
interface LineItemTaxInfo$2 {
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    taxAmount?: Price$8;
    /** Amount for which tax is calculated. */
    taxableAmount?: Price$8;
    /** Tax rate %, as a decimal point. */
    taxRate?: string | null;
    /**
     * Tax group ID.
     * Learn more about [Tax Groups](https://dev.wix.com/docs/rest/business-management/payments/tax/tax-groups/introduction).
     */
    taxGroupId?: string | null;
    /** Indicates whether the price already includes tax. */
    taxIncludedInPrice?: boolean;
    /** Tax information for a line item. */
    taxBreakdown?: LineItemTaxBreakdown$2[];
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface LineItemTaxBreakdown$2 {
    /** Jurisdiction that taxes were calculated for. For example, "New York", or "Quebec". */
    jurisdiction?: string | null;
    /** Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000. */
    rate?: string | null;
    /** Amount of tax calculated for this line item. */
    taxAmount?: Price$8;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** Type of jurisdiction that taxes were calculated for. */
    jurisdictionType?: JurisdictionType$4;
    /** Non-taxable amount of the line item price. */
    nonTaxableAmount?: Price$8;
    /** Taxable amount of the line item price. */
    taxableAmount?: Price$8;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$4 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DigitalFile$2 {
    /** ID of the secure file in media. */
    fileId?: string;
    /** Link will exist after the digital links have been generated on the order. */
    link?: string | null;
    /**
     * Link expiration time and date.
     * @readonly
     */
    expirationDate?: Date | null;
}
interface SubscriptionInfo$2 {
    /** Subscription ID. */
    _id?: string | null;
    /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */
    cycleNumber?: number;
    /** Subscription option title. For example, `"Monthly coffee Subscription"`. */
    subscriptionOptionTitle?: string;
    /** Subscription option description. For example, `"1kg of selected coffee, once a month"`. */
    subscriptionOptionDescription?: string | null;
    /** Subscription detailed information. */
    subscriptionSettings?: SubscriptionSettings$4;
}
interface SubscriptionSettings$4 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$4;
    /** Interval of recurring payment. */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$4 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
declare enum TaxableAddressType$4 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
interface ItemChangedDetails {
    /** Line item quantity before change. */
    quantityBeforeChange?: number | null;
    /** Line item price before change. */
    priceBeforeChange?: Price$8;
    /** Line item price description before change. */
    priceDescriptionBeforeChange?: PriceDescription$2;
}
interface ShippingDetails extends ShippingDetailsChangeTypeOneOf {
    /** Whether shipping info was added as part of the draft. */
    added?: boolean;
    /** Shipping info before the change. */
    changedDetails?: ShippingChangedDetails;
    /** Whether shipping info was removed as part of the draft. */
    removed?: boolean;
    /** Selected Shipping details. */
    shippingInfo?: V1ShippingInformation$2;
}
/** @oneof */
interface ShippingDetailsChangeTypeOneOf {
    /** Whether shipping info was added as part of the draft. */
    added?: boolean;
    /** Shipping info before the change. */
    changedDetails?: ShippingChangedDetails;
    /** Whether shipping info was removed as part of the draft. */
    removed?: boolean;
}
interface V1ShippingInformation$2 {
    /** App Def Id of external provider which was a source of shipping info */
    carrierId?: string | null;
    /** Unique code (or ID) of selected shipping option. For example, `"usps_std_overnight"``. */
    code?: string | null;
    /**
     * Shipping option title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"` or `"First-Class Package International"`.
     */
    title?: string;
    /** Shipping logistics. */
    logistics?: V1DeliveryLogistics;
    /** Shipping costs. */
    cost?: V1ShippingPrice;
    /** Shipping region. */
    region?: ShippingRegion$4;
}
interface V1DeliveryLogistics extends V1DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$2;
    /** Pickup details. */
    pickupDetails?: V1PickupDetails;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /**
     * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Expected delivery time. */
    deliveryTimeSlot?: V1DeliveryTimeSlot;
}
/** @oneof */
interface V1DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$2;
    /** Pickup details. */
    pickupDetails?: V1PickupDetails;
}
/** Billing Info and shipping details */
interface AddressWithContact$2 {
    /** Address. */
    address?: Address$a;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$4;
}
/** Physical address */
interface Address$a {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$a;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$a {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$4 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$4;
}
interface VatId$4 {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$4;
}
/** tax info types */
declare enum VatType$4 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface V1PickupDetails {
    /** Pickup address. */
    address?: PickupAddress$2;
    /** Pickup method */
    pickupMethod?: PickupDetailsPickupMethod;
}
/** Physical address */
interface PickupAddress$2 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address object, with number, name, and apartment number in separate fields. */
    streetAddress?: StreetAddress$a;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
declare enum PickupDetailsPickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface V1DeliveryTimeSlot {
    /** Delivery slot starting time. */
    from?: Date | null;
    /** Delivery slot ending time. */
    to?: Date | null;
}
interface V1ShippingPrice {
    /** Shipping price for display purposes. */
    price?: Price$8;
    /**
     * Total price of shipping after discounts (when relevant), and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$8;
    /**
     * Shipping price after all discounts (if any exist), and after tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$8;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$4;
    /**
     * Shipping discount before tax.
     * @readonly
     */
    discount?: Price$8;
}
interface ShippingRegion$4 {
    /** Name of shipping region. For example, `"Metropolitan London"`, or `"Outer Melbourne suburbs"`. */
    name?: string | null;
}
interface ShippingChangedDetails {
    /** Shipping info before the change. */
    shippingInfoBeforeChange?: V1ShippingInformation$2;
}
/** Buyer Info */
interface BuyerInfo$2 extends BuyerInfoIdOneOf$2 {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
    /** Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction). */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$2 {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
}
interface AdditionalFeeDetails {
    /** Additional fee. */
    additionalFee?: AdditionalFee$2;
    /** Tax details related to the additional fee. */
    taxDetails?: TaxDetails;
    /**
     * Source of the additional fee.
     *
     * Supported values:
     * + `ORIGINAL_ORDER`: This additional fee is part of the original order.
     * + `CUSTOM`: This additional fee was created by the [Create Custom Additional Fees](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/draft-orders/create-custom-additional-fees) API.
     */
    source?: SourceType;
    /** Whether this additional fee is applied to the order. */
    applied?: boolean;
}
interface AdditionalFee$2 {
    /** Additional fee's unique code for future processing. */
    code?: string | null;
    /** Name of additional fee. */
    name?: string;
    /** Additional fee's price. */
    price?: Price$8;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$4;
    /** SPI implementer's `appId`. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: Price$8;
    /** Additional fee's price after tax. */
    priceAfterTax?: Price$8;
    /** Additional fee's id. */
    _id?: string;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface TaxDetails {
    /** Indication if additional fee is taxable or not */
    taxable?: boolean;
    /** Optional tax group ID to use when calculating tax for this additional fee */
    taxGroupId?: string | null;
}
declare enum SourceType {
    /** Part of the original order */
    ORIGINAL_ORDER = "ORIGINAL_ORDER",
    /** Added by estimate * */
    AUTOMATIC = "AUTOMATIC",
    /** Added manually to current draft order */
    CUSTOM = "CUSTOM"
}
interface DiscountDetails {
    /** Discount details. */
    discount?: AppliedDiscount$4;
    /**
     * Source of the discount.
     *
     * Supported values:
     * + `ORIGINAL_ORDER`: This discount is part of the original order.
     * + `CUSTOM`: This discount was created by the [Create Custom Discounts](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/draft-orders/create-custom-discounts) API.
     */
    source?: SourceType;
    /** Whether this discount is applied to the order. */
    applied?: boolean;
}
interface AppliedDiscount$4 extends AppliedDiscountDiscountSourceOneOf$4 {
    /** Applied coupon info. */
    coupon?: Coupon$4;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$4;
    /** Automatic Discount */
    discountRule?: DiscountRule$4;
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to specific items.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: AppliedDiscountDiscountType;
    /**
     * IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @deprecated IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemIds?: string[];
    /** Discount id. */
    _id?: string | null;
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$4 {
    /** Applied coupon info. */
    coupon?: Coupon$4;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$4;
    /** Automatic Discount */
    discountRule?: DiscountRule$4;
}
declare enum AppliedDiscountDiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$4 {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** Coupon value. */
    amount?: Price$8;
}
interface MerchantDiscount$4 extends MerchantDiscountMerchantDiscountReasonOneOf$2 {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason$2;
    /** Discount description as free text (optional). */
    description?: string | null;
    /** Discount amount. */
    amount?: Price$8;
}
/** @oneof */
interface MerchantDiscountMerchantDiscountReasonOneOf$2 {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason$2;
    /** Discount description as free text (optional). */
    description?: string | null;
}
declare enum DiscountReason$2 {
    UNSPECIFIED = "UNSPECIFIED",
    EXCHANGED_ITEMS = "EXCHANGED_ITEMS"
}
interface DiscountRule$4 {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$4;
    /** Discount value. */
    amount?: Price$8;
}
interface DiscountRuleName$4 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface CreatedBy$2 extends CreatedByStringOneOf$2 {
    /** User ID. When the draft order was created by a Wix user. */
    userId?: string;
    /** App ID. When the draft order was created by an app. */
    appId?: string;
}
/** @oneof */
interface CreatedByStringOneOf$2 {
    /** User ID. When the draft order was created by a Wix user. */
    userId?: string;
    /** App ID. When the draft order was created by an app. */
    appId?: string;
}
declare enum EditingStatus {
    /** DraftOrder is in draft state. */
    DRAFT = "DRAFT",
    /** DraftOrder is in committed state. */
    COMMITTED = "COMMITTED"
}
declare enum WeightUnit$6 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface PriceSummary$4 {
    /** Subtotal of all the line items, before discounts and before tax. */
    subtotal?: Price$8;
    /** Total shipping price, before discounts and before tax. */
    shipping?: Price$8;
    /** Total tax on this order. */
    tax?: Price$8;
    /** Total calculated discount value. */
    discount?: Price$8;
    /** Order’s total price after discounts and tax. */
    total?: Price$8;
    /** Total price of additional fees before tax. */
    totalAdditionalFees?: Price$8;
}
interface TaxSummary$4 {
    /**
     * Total tax.
     * @readonly
     */
    totalTax?: Price$8;
}
interface BalanceSummary$2 {
    /**
     * Amount left to pay for order to be considered paid.
     * @readonly
     */
    balance?: Balance$2;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price$8;
}
/**
 * Order balance. Reflects amount left to be paid on order and is calculated dynamically. Can be negative per balance definition.
 * `amount` field depends on order payment status:
 * + UNSPECIFIED, NOT_PAID: price_summary.total_price
 * + PARTIALLY_PAID : price_summary.total_price - pay_now.total_price
 * + PENDING, REFUNDED, PARTIALLY_REFUNDED, PAID : 0
 */
interface Balance$2 {
    /**
     * Balance amount.
     *
     * A negative `amount` represents the amount to be refunded. This can happen due to overcharging or the order being modified after a payment has been made.
     * @readonly
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
/** Side-effects upon committing a draft order. */
interface DraftOrderCommitSettings {
    /**
     * Whether to send notifications to the buyer.
     *
     * Default: `true`
     */
    sendNotificationsToBuyer?: boolean | null;
    /**
     * Whether to send notifications to the business.
     *
     * Default: `true`
     */
    sendNotificationsToBusiness?: boolean | null;
    /**
     * Whether to add activities to the order.
     *
     * Default: `true`
     */
    addActivitiesToOrder?: boolean | null;
    /**
     * Whether to send email notifications to custom fulfillers when there is a change in the shippable items they fulfill.
     *
     * Default: `true`
     */
    sendNotificationsToCustomFulfillers?: boolean | null;
    /**
     * Line item IDs for which to perform an inventory change.
     * When not provided, inventory will not change.
     */
    updateInventory?: InventoryUpdate[];
}
interface InventoryUpdate {
    /** Line item ID. */
    lineItemId?: string;
}
interface RecipientInfoDetails extends RecipientInfoDetailsChangeTypeOneOf {
    /** Indicates that recipient information was added during draft. */
    added?: boolean;
    /** Indicates that recipient information was changed. Contains recipient information before draft. */
    changedDetails?: RecipientInfoChangedDetails;
    /** Indicates that recipient information was removed during draft. */
    removed?: boolean;
    /** Order recipient address and contact details. */
    recipientInfo?: AddressWithContact$2;
}
/** @oneof */
interface RecipientInfoDetailsChangeTypeOneOf {
    /** Indicates that recipient information was added during draft. */
    added?: boolean;
    /** Indicates that recipient information was changed. Contains recipient information before draft. */
    changedDetails?: RecipientInfoChangedDetails;
    /** Indicates that recipient information was removed during draft. */
    removed?: boolean;
}
interface RecipientInfoChangedDetails {
    /** Order recipient address and contact details before draft. */
    recipientInfoBeforeChange?: AddressWithContact$2;
}
interface OrderTaxInfo$2 {
    /** Calculated tax, added from line items. */
    totalTax?: Price$8;
    /** The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate. */
    taxBreakdown?: OrderTaxBreakdown$2[];
    /**
     * Whether the draft order is exempt from tax calculations.
     *
     * Default: `false`
     * @readonly
     */
    taxExempt?: boolean | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface OrderTaxBreakdown$2 {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionType?: JurisdictionType$4;
    /** The rate at which this tax detail was calculated. */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: Price$8;
}
interface ExtendedFields$a {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateDraftOrderRequest {
    /** To create a draft from existing order, provide its id. Otherwise, an empty draft will be created. */
    orderId: string | null;
}
interface CreateDraftOrderResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface CalculatedDraftOrder {
    /**
     * The draft order full details with calculations based on it's content.
     * Discount and additional fee options are also included.
     */
    draftOrder?: DraftOrder;
    /** Shipping options for the order. */
    shippingOptions?: ShippingOption$4[];
    /** Errors that occurred during calculation. */
    calculationErrors?: CalculationErrors$2;
}
interface ShippingOption$4 {
    /** This carrier's unique ID */
    carrierId?: string | null;
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
    /** Shipping rate title. For example, `"USPS Standard Overnight Delivery"`, `"Standard"`, or `"First-Class Package International"`. */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics$6;
    /** Shipping cost. */
    cost?: ShippingPrice$4;
}
interface DeliveryLogistics$6 {
    /** When the item is expected to be delivered in free text, e.g "3-5 business days" */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Ensure to come during Opening Hours, and please don't park in disabled-spot" */
    instructions?: string | null;
    /** Additional pickup details if it's a pickup */
    pickupDetails?: PickupDetails$6;
    /** Expected delivery time slot (from and to time stamps representation) */
    deliveryTimeSlot?: DeliveryTimeSlot$4;
}
interface PickupDetails$6 {
    /** Pickup address */
    address?: Address$a;
    /**
     * Pickup method.
     *
     * Supported values:
     * + `"STORE_PICKUP"`
     * + `"PICKUP_POINT"`
     */
    pickupMethod?: PickupMethod$6;
}
declare enum PickupMethod$6 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$4 {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
interface ShippingPrice$4 {
    /** The shipping rate's price. Must align with the [currency's decimal separator](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). */
    price?: Price$8;
    /** Currency of the shipping rate price as a 3-letter [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217). Must align with the `currency` passed to the function. */
    currency?: string;
}
interface CalculationErrors$2 extends CalculationErrorsShippingCalculationErrorOneOf$2 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$4;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$2;
    /** Tax calculation error. */
    taxCalculationError?: Details$4;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$c[];
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$2 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$4;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$2;
}
interface Details$4 extends DetailsKindOneOf$4 {
    applicationError?: ApplicationError$c;
    validationError?: ValidationError$4;
    systemError?: SystemError$4;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$4 {
    applicationError?: ApplicationError$c;
    validationError?: ValidationError$4;
    systemError?: SystemError$4;
}
interface ApplicationError$c {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$4 {
    fieldViolations?: FieldViolation$4[];
}
declare enum RuleType$4 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$4 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$4;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$4 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$2 {
    /** Carrier errors. */
    errors?: CarrierError$2[];
}
interface CarrierError$2 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$4;
}
interface CreateEmptyDraftOrderRequest {
}
interface CreateEmptyDraftOrderResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface AddLineItemsToDraftOrderRequest {
    /** The draft order id */
    draftOrderId: string;
    /** Catalog line items to add to draft order. */
    catalogLineItems?: CatalogReferenceLineItem[];
    /** Custom line items to add to draft order. Custom line items don't trigger the Catalog service plugin. */
    customLineItems?: CustomLineItem[];
}
interface CatalogReferenceLineItem {
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$8;
    /** Item quantity. */
    quantity?: number;
    /** Item price override. */
    price?: Price$8;
}
interface CustomLineItem {
    /** Line item ID. */
    _id?: string | null;
    /**
     * Item quantity.
     *
     * Min: `"1"`
     * Max: `"100000"`
     */
    quantity?: number;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$8;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName$2;
    /** URL to the item's page on the site. */
    url?: string;
    /** Item price **after** catalog-defined discount and line item discounts. */
    price?: Price$8;
    /** Total line item price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: Price$8;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: Price$8;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: Price$8;
    /** Line item description lines. Used for display purposes for order. */
    descriptionLines?: DescriptionLine$2[];
    /** Line item image details. */
    media?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability. */
    physicalProperties?: PhysicalProperties$6;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$4;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$2;
    /** Delivery Profile Id for the product */
    deliveryProfileId?: string | null;
}
interface AddLineItemsToDraftOrderResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface UpdateLineItemsRequest {
    /** The draft order id */
    draftOrderId: string;
    /** Details of changes to apply per line item */
    lineItemChanges?: LineItemChangeDetails[];
}
interface LineItemChangeDetails {
    /** The line item id to change */
    lineItemId?: string;
    /** The new quantity for the line item. quantity zero means to remove the line item. */
    newQuantity?: number | null;
    /** The new price for 1 unit of the line item */
    newPrice?: string | null;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    newPriceDescription?: PriceDescription$2;
}
interface UpdateLineItemsResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface SetDiscountsRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The discount ids to opt-in. all existing discounts not listed are to be opted-out. */
    discounts: IdAndApplied[];
}
interface IdAndApplied {
    /** Discount ID. */
    _id?: string;
    /** Whether to apply the discount to the draft order. */
    applied?: boolean;
}
interface SetDiscountsResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface CreateCustomDiscountsRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The discounts to add. */
    discounts?: DiscountOption[];
}
interface DiscountOption extends DiscountOptionDiscountAmountOneOf {
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to a specific item.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: DiscountType$4;
    /**
     * ID of line item discount applies to.
     * @deprecated ID of line item discount applies to.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemId?: string | null;
    /**
     * Discount amount.
     * @deprecated Discount amount.
     * @replacedBy price_amount and percentage
     * @targetRemovalDate 2024-08-30
     */
    amount?: Price$8;
    /** Discount description as free text (optional). */
    description?: string | null;
    /**
     * Should opt-in the added discount. default = false.
     * if not set or false, then to opt-in them, please call SetDiscounts with the added discounts ids
     */
    applyToDraftOrder?: boolean | null;
}
/** @oneof */
interface DiscountOptionDiscountAmountOneOf {
}
declare enum DiscountType$4 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
interface CreateCustomDiscountsResponse {
    /** The draft order details with the added discounts */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface DeleteCustomDiscountsRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The discounts to remove */
    discountIds: string[];
}
interface DeleteCustomDiscountsResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface SetAdditionalFeesRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The additional fees ids to opt-in. all existing additional fees not listed are to be opted-out */
    additionalFees: IdAndApplied[];
}
interface SetAdditionalFeesResponse {
    /** The draft order details calculated with modified additional fees */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface CreateCustomAdditionalFeesRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The additional fees to add. added with opted-out setting */
    customAdditionalFees?: AdditionalFeeOption[];
}
interface AdditionalFeeOption {
    /** Translated additional fee's name */
    name?: string;
    /** Additional fee's price */
    price?: Price$8;
    /** Tax calculation details */
    taxDetails?: TaxDetails;
    /**
     * Should apply the additional fee. default = false.
     * if not set or false, then to apply them, please call ApplyAdditionalFees with the added additional fee ids
     */
    applyToDraftOrder?: boolean | null;
    /** Additional fee's unique code (or ID) for future processing */
    code?: string | null;
}
interface CreateCustomAdditionalFeesResponse {
    /** The draft order details with added custom additional fees */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface DeleteCustomAdditionalFeesRequest {
    /** The draft order id */
    draftOrderId: string;
    /** The additional fees to remove */
    customAdditionalFees: string[];
}
interface DeleteCustomAdditionalFeesResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface SetShippingInfoRequest {
}
interface SetShippingInfoResponse {
}
interface SetBuyerInfoRequest {
}
interface SetBuyerInfoResponse {
}
interface SetRecipientInfoRequest {
}
interface SetRecipientInfoResponse {
}
interface SetBillingInfoRequest {
}
interface SetBillingInfoResponse {
}
interface GetDraftOrderRequest {
    /** The draft order id */
    draftOrderId: string;
}
interface GetDraftOrderResponse {
    /** The draft order details calculated with latest content */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface GetOrderDraftabilityStatusRequest {
    /** Order ID. */
    orderId: string;
}
interface GetOrderDraftabilityStatusResponse {
    /** Order ID. */
    orderId?: string;
    /** Whether a draft can be created from this order */
    orderDraftable?: boolean;
    /** Reasons why the order is not draftable */
    nonDraftableReasons?: NonDraftableReason[];
}
declare enum NonDraftableReason {
    UNSPECIFIED = "UNSPECIFIED",
    PARTIALLY_OR_FULLY_REFUNDED = "PARTIALLY_OR_FULLY_REFUNDED",
    UNSUPPORTED_CHANNEL_TYPE = "UNSUPPORTED_CHANNEL_TYPE",
    ORDER_STATUS_IS_NOT_SUPPORTED = "ORDER_STATUS_IS_NOT_SUPPORTED",
    ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT = "ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT",
    ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT = "ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT",
    AMOUNTS_DO_NOT_ADD_UP = "AMOUNTS_DO_NOT_ADD_UP",
    /** remove - this is not a reason, it's an error */
    ORDER_NOT_FOUND = "ORDER_NOT_FOUND",
    SUBSCRIPTION_LINE_ITEM_EXISTS = "SUBSCRIPTION_LINE_ITEM_EXISTS",
    UNSUPPORTED_CATALOG_ITEM = "UNSUPPORTED_CATALOG_ITEM",
    TAXABLE_EXISTING_ADDITIONAL_FEE = "TAXABLE_EXISTING_ADDITIONAL_FEE"
}
interface CommitDraftOrderRequest {
    /** The draft order id */
    draftOrderId: string;
    /** Optional side effects to trigger */
    commitSettings?: DraftOrderCommitSettings;
    /** Reason for edit, given by user (optional). */
    reason?: string | null;
}
interface CommitDraftOrderResponse {
    /** The draft order after commit. */
    committedDraftOrder?: DraftOrder;
    /** The updated order after commit. */
    orderAfterCommit?: Order$2;
}
interface Order$2 {
    /**
     * Order ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Order number displayed in the site owner's dashboard (auto-generated).
     * @readonly
     */
    number?: string;
    /**
     * Date and time the order was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Order line items.
     * @readonly
     */
    lineItems?: OrderLineItem$2[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo$2;
    /**
     * Order payment status.
     * + `NOT_PAID` - This can be an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.
     * + This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.
     * + `PAID` - All payments associated with this order are paid. For online payments: [`payment.regularPaymentDetails.status: APPROVED`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object). For gift cards: [`payment.giftCardPaymentDetails.voided: false`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object).
     * + `PARTIALLY_REFUNDED` - Order was refunded, but refund amount is less than order total price.
     * + `FULLY_REFUNDED` - Order fully refunded. Refund amount equals total price.
     * + `PENDING` - Payments received but not yet confirmed by the payment provider.
     * + `PARTIALLY_PAID` -  At least one payment was received and approved, covering less than total price amount.
     */
    paymentStatus?: PaymentStatus$2;
    /**
     * Order fulfillment status.
     * @readonly
     */
    fulfillmentStatus?: FulfillmentStatus$2;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$6;
    /** Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format. */
    currency?: string | null;
    /** Whether tax is included in line item prices. */
    taxIncludedInPrices?: boolean;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary$4;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact$2;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: V1ShippingInformation$2;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /**
     * Order status.
     * + `INITIALIZED`: Order created, but not yet approved or canceled.
     * + `APPROVED`: Order approved. This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order). Offline orders (cash payment) are automatically approved.
     * + `CANCELED`: Order canceled by the user.
     */
    status?: OrderStatus$2;
    /** Whether order is archived. */
    archived?: boolean | null;
    /**
     * Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @deprecated Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary$4;
    /** Tax information. */
    taxInfo?: OrderTaxInfo$2;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$4[];
    /**
     * Order activities.
     * @readonly
     */
    activities?: Activity$2[];
    /** Order attribution source. */
    attributionSource?: AttributionSource$2;
    /**
     * ID of the order's initiator.
     * @readonly
     */
    createdBy?: V1CreatedBy;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo$2;
    /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */
    seenByAHuman?: boolean | null;
    /** Checkout ID. */
    checkoutId?: string | null;
    /** Custom fields. */
    customFields?: CustomField$2[];
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: V1BalanceSummary;
    /** Additional fees applied to the order. */
    additionalFees?: AdditionalFee$2[];
    /**
     * Custom field data for the order object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$a;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact$2;
    /**
     * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * Used for migration from external systems.
     */
    purchasedDate?: Date | null;
}
declare enum PaymentStatus$2 {
    UNSPECIFIED = "UNSPECIFIED",
    /** Order is not paid */
    NOT_PAID = "NOT_PAID",
    /** Order is paid */
    PAID = "PAID",
    /** Order was refunded, refund amount less than order total price */
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    /** Full order total price was refunded */
    FULLY_REFUNDED = "FULLY_REFUNDED",
    /** Payments received but not yet confirmed by the payment provider */
    PENDING = "PENDING",
    /** At least one payment was received and approved, covering less than total price amount */
    PARTIALLY_PAID = "PARTIALLY_PAID"
}
declare enum FulfillmentStatus$2 {
    /** none of the order items are fulfilled or order was manually marked as unfulfilled */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled or order was manually marked as fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FULFILLED = "FULFILLED",
    /** Some, but not all of the order items are fulfilled */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
declare enum OrderStatus$2 {
    INITIALIZED = "INITIALIZED",
    APPROVED = "APPROVED",
    CANCELED = "CANCELED"
}
interface Activity$2 extends ActivityContentOneOf$2 {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity$2;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment$2;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded$2;
    /**
     * Activity ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Activity author's email.
     * @readonly
     */
    authorEmail?: string | null;
    /**
     * Activity creation date and time.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Activity type. */
    type?: ActivityType$2;
}
/** @oneof */
interface ActivityContentOneOf$2 {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity$2;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment$2;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded$2;
}
interface CustomActivity$2 {
    /** ID of the app that created the custom activity. */
    appId?: string;
    /** Custom activity type. For example, `"Ticket number set"`. */
    type?: string;
    /** Additional data in key-value form. For example, `{ "Ticket number": "123456" }`. */
    additionalData?: Record<string, string>;
}
/** Store owner added a comment */
interface MerchantComment$2 {
    /** Merchant comment message. */
    message?: string;
}
interface OrderRefunded$2 {
    /** Whether order was refunded manually. For example, via payment provider or using cash. */
    manual?: boolean;
    /** Refund amount. */
    amount?: Price$8;
    /** Reason for refund. */
    reason?: string;
}
declare enum LineItemQuantityChangeType$2 {
    QUANTITY_INCREASED = "QUANTITY_INCREASED",
    QUANTITY_DECREASED = "QUANTITY_DECREASED"
}
declare enum ActivityType$2 {
    ORDER_REFUNDED = "ORDER_REFUNDED",
    ORDER_PLACED = "ORDER_PLACED",
    ORDER_PAID = "ORDER_PAID",
    ORDER_FULFILLED = "ORDER_FULFILLED",
    ORDER_NOT_FULFILLED = "ORDER_NOT_FULFILLED",
    ORDER_CANCELED = "ORDER_CANCELED",
    DOWNLOAD_LINK_SENT = "DOWNLOAD_LINK_SENT",
    TRACKING_NUMBER_ADDED = "TRACKING_NUMBER_ADDED",
    TRACKING_NUMBER_EDITED = "TRACKING_NUMBER_EDITED",
    TRACKING_LINK_ADDED = "TRACKING_LINK_ADDED",
    SHIPPING_CONFIRMATION_EMAIL_SENT = "SHIPPING_CONFIRMATION_EMAIL_SENT",
    INVOICE_ADDED = "INVOICE_ADDED",
    INVOICE_REMOVED = "INVOICE_REMOVED",
    INVOICE_SENT = "INVOICE_SENT",
    FULFILLER_EMAIL_SENT = "FULFILLER_EMAIL_SENT",
    SHIPPING_ADDRESS_EDITED = "SHIPPING_ADDRESS_EDITED",
    EMAIL_EDITED = "EMAIL_EDITED",
    PICKUP_READY_EMAIL_SENT = "PICKUP_READY_EMAIL_SENT",
    CUSTOM_ACTIVITY = "CUSTOM_ACTIVITY",
    MERCHANT_COMMENT = "MERCHANT_COMMENT",
    ORDER_CREATED_FROM_EXCHANGE = "ORDER_CREATED_FROM_EXCHANGE",
    NEW_EXCHANGE_ORDER_CREATED = "NEW_EXCHANGE_ORDER_CREATED",
    ORDER_PARTIALLY_PAID = "ORDER_PARTIALLY_PAID",
    DRAFT_ORDER_CHANGES_APPLIED = "DRAFT_ORDER_CHANGES_APPLIED",
    SAVED_PAYMENT_METHOD = "SAVED_PAYMENT_METHOD"
}
declare enum AttributionSource$2 {
    UNSPECIFIED = "UNSPECIFIED",
    FACEBOOK_ADS = "FACEBOOK_ADS"
}
interface V1CreatedBy extends V1CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
/** @oneof */
interface V1CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
interface ChannelInfo$2 {
    /** Sales channel that submitted the order. */
    type?: ChannelType$2;
    /** Reference to an order ID from an external system. */
    externalOrderId?: string | null;
    /** URL to the order in the external system. */
    externalOrderUrl?: string | null;
}
declare enum ChannelType$2 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CustomField$2 {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
interface V1BalanceSummary {
    /**
     * Current amount left to pay.
     * @readonly
     */
    balance?: Balance$2;
    /**
     * Sum of all approved and successful payments.
     *
     * The value includes payments that have subsequently been fully or partially refunded.
     * @readonly
     */
    paid?: Price$8;
    /**
     * Sum of all successfully refunded payments.
     * @readonly
     */
    refunded?: Price$8;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price$8;
}
interface CreateOrderFromDraftRequest {
}
interface CreateOrderFromDraftResponse {
}
interface DeleteDraftOrderRequest {
    /** The draft order id */
    draftOrderId: string;
}
interface DeleteDraftOrderResponse {
}
interface QueryDraftOrdersRequest {
    /** WQL expression */
    query?: CursorQuery$8;
}
interface CursorQuery$8 extends CursorQueryPagingMethodOneOf$8 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$g;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$g[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$8 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$g;
}
interface Sorting$g {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$g;
}
declare enum SortOrder$g {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$g {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryDraftOrdersResponse {
    /** list of edits per order */
    draftOrders?: DraftOrder[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$e;
}
interface CursorPagingMetadata$e {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$g;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$g {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface PriceNonNullableFields$8 {
    amount: string;
    formattedAmount: string;
}
interface PriceDescriptionNonNullableFields$2 {
    original: string;
}
interface ItemChangedDetailsNonNullableFields {
    priceBeforeChange?: PriceNonNullableFields$8;
    priceDescriptionBeforeChange?: PriceDescriptionNonNullableFields$2;
}
interface ProductNameNonNullableFields$2 {
    original: string;
}
interface CatalogReferenceNonNullableFields$2 {
    catalogItemId: string;
    appId: string;
}
interface PlainTextValueNonNullableFields$2 {
    original: string;
}
interface ColorNonNullableFields$2 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$2 {
    original: string;
}
interface DescriptionLineNonNullableFields$2 {
    plainText?: PlainTextValueNonNullableFields$2;
    colorInfo?: ColorNonNullableFields$2;
    plainTextValue?: PlainTextValueNonNullableFields$2;
    color: string;
    name?: DescriptionLineNameNonNullableFields$2;
    lineType: DescriptionLineType$2;
}
interface PhysicalPropertiesNonNullableFields$2 {
    shippable: boolean;
}
interface ItemTypeNonNullableFields$2 {
    preset: ItemTypeItemType$4;
    custom: string;
}
interface ItemTaxFullDetailsNonNullableFields$4 {
    taxableAmount?: PriceNonNullableFields$8;
    taxRate: string;
    totalTax?: PriceNonNullableFields$8;
}
interface LineItemTaxBreakdownNonNullableFields$2 {
    taxAmount?: PriceNonNullableFields$8;
    jurisdictionType: JurisdictionType$4;
    nonTaxableAmount?: PriceNonNullableFields$8;
    taxableAmount?: PriceNonNullableFields$8;
}
interface LineItemTaxInfoNonNullableFields$2 {
    taxAmount?: PriceNonNullableFields$8;
    taxableAmount?: PriceNonNullableFields$8;
    taxIncludedInPrice: boolean;
    taxBreakdown: LineItemTaxBreakdownNonNullableFields$2[];
}
interface DigitalFileNonNullableFields$2 {
    fileId: string;
}
interface SubscriptionSettingsNonNullableFields$2 {
    frequency: SubscriptionFrequency$4;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
}
interface SubscriptionInfoNonNullableFields$2 {
    cycleNumber: number;
    subscriptionOptionTitle: string;
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$2;
}
interface LocationAndQuantityNonNullableFields$2 {
    _id: string;
    quantity: number;
}
interface TaxableAddressNonNullableFields$4 {
    addressType: TaxableAddressType$4;
}
interface OrderLineItemNonNullableFields$2 {
    _id: string;
    productName?: ProductNameNonNullableFields$2;
    catalogReference?: CatalogReferenceNonNullableFields$2;
    quantity: number;
    totalDiscount?: PriceNonNullableFields$8;
    descriptionLines: DescriptionLineNonNullableFields$2[];
    image: string;
    physicalProperties?: PhysicalPropertiesNonNullableFields$2;
    itemType?: ItemTypeNonNullableFields$2;
    price?: PriceNonNullableFields$8;
    priceBeforeDiscounts?: PriceNonNullableFields$8;
    totalPriceBeforeTax?: PriceNonNullableFields$8;
    totalPriceAfterTax?: PriceNonNullableFields$8;
    paymentOption: PaymentOptionType$4;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$4;
    taxInfo?: LineItemTaxInfoNonNullableFields$2;
    digitalFile?: DigitalFileNonNullableFields$2;
    subscriptionInfo?: SubscriptionInfoNonNullableFields$2;
    priceDescription?: PriceDescriptionNonNullableFields$2;
    depositAmount?: PriceNonNullableFields$8;
    locations: LocationAndQuantityNonNullableFields$2[];
    lineItemPrice?: PriceNonNullableFields$8;
    taxableAddress?: TaxableAddressNonNullableFields$4;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
}
interface ItemDetailsNonNullableFields {
    added: boolean;
    changedDetails?: ItemChangedDetailsNonNullableFields;
    removed: boolean;
    lineItem?: OrderLineItemNonNullableFields$2;
}
interface StreetAddressNonNullableFields$a {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$a {
    streetAddress?: StreetAddressNonNullableFields$a;
}
interface VatIdNonNullableFields$2 {
    _id: string;
    type: VatType$4;
}
interface FullAddressContactDetailsNonNullableFields$2 {
    vatId?: VatIdNonNullableFields$2;
}
interface AddressWithContactNonNullableFields$2 {
    address?: AddressNonNullableFields$a;
    contactDetails?: FullAddressContactDetailsNonNullableFields$2;
}
interface PickupAddressNonNullableFields$2 {
    streetAddress?: StreetAddressNonNullableFields$a;
}
interface V1PickupDetailsNonNullableFields {
    address?: PickupAddressNonNullableFields$2;
    pickupMethod: PickupDetailsPickupMethod;
}
interface V1DeliveryLogisticsNonNullableFields {
    shippingDestination?: AddressWithContactNonNullableFields$2;
    pickupDetails?: V1PickupDetailsNonNullableFields;
}
interface V1ShippingPriceNonNullableFields {
    price?: PriceNonNullableFields$8;
    totalPriceBeforeTax?: PriceNonNullableFields$8;
    totalPriceAfterTax?: PriceNonNullableFields$8;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$4;
    discount?: PriceNonNullableFields$8;
}
interface V1ShippingInformationNonNullableFields$2 {
    title: string;
    logistics?: V1DeliveryLogisticsNonNullableFields;
    cost?: V1ShippingPriceNonNullableFields;
}
interface ShippingChangedDetailsNonNullableFields {
    shippingInfoBeforeChange?: V1ShippingInformationNonNullableFields$2;
}
interface ShippingDetailsNonNullableFields {
    added: boolean;
    changedDetails?: ShippingChangedDetailsNonNullableFields;
    removed: boolean;
    shippingInfo?: V1ShippingInformationNonNullableFields$2;
}
interface BuyerInfoNonNullableFields$2 {
    visitorId: string;
    memberId: string;
}
interface AdditionalFeeNonNullableFields$2 {
    name: string;
    price?: PriceNonNullableFields$8;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$4;
    priceBeforeTax?: PriceNonNullableFields$8;
    priceAfterTax?: PriceNonNullableFields$8;
    _id: string;
    lineItemIds: string[];
}
interface TaxDetailsNonNullableFields {
    taxable: boolean;
}
interface AdditionalFeeDetailsNonNullableFields {
    additionalFee?: AdditionalFeeNonNullableFields$2;
    taxDetails?: TaxDetailsNonNullableFields;
    source: SourceType;
    applied: boolean;
}
interface CouponNonNullableFields$4 {
    _id: string;
    code: string;
    name: string;
    amount?: PriceNonNullableFields$8;
}
interface MerchantDiscountNonNullableFields$4 {
    discountReason: DiscountReason$2;
    amount?: PriceNonNullableFields$8;
}
interface DiscountRuleNameNonNullableFields$4 {
    original: string;
}
interface DiscountRuleNonNullableFields$4 {
    _id: string;
    name?: DiscountRuleNameNonNullableFields$4;
    amount?: PriceNonNullableFields$8;
}
interface LineItemDiscountNonNullableFields$4 {
    _id: string;
    totalDiscount?: PriceNonNullableFields$8;
}
interface AppliedDiscountNonNullableFields$4 {
    coupon?: CouponNonNullableFields$4;
    merchantDiscount?: MerchantDiscountNonNullableFields$4;
    discountRule?: DiscountRuleNonNullableFields$4;
    discountType: AppliedDiscountDiscountType;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$4[];
}
interface DiscountDetailsNonNullableFields {
    discount?: AppliedDiscountNonNullableFields$4;
    source: SourceType;
    applied: boolean;
}
interface CreatedByNonNullableFields$2 {
    userId: string;
    appId: string;
}
interface PriceSummaryNonNullableFields$4 {
    subtotal?: PriceNonNullableFields$8;
    shipping?: PriceNonNullableFields$8;
    tax?: PriceNonNullableFields$8;
    discount?: PriceNonNullableFields$8;
    totalPrice?: PriceNonNullableFields$8;
    total?: PriceNonNullableFields$8;
    totalWithGiftCard?: PriceNonNullableFields$8;
    totalWithoutGiftCard?: PriceNonNullableFields$8;
    totalAdditionalFees?: PriceNonNullableFields$8;
}
interface TaxSummaryNonNullableFields$4 {
    totalTax?: PriceNonNullableFields$8;
}
interface BalanceNonNullableFields$2 {
    amount: string;
    formattedAmount: string;
}
interface BalanceSummaryNonNullableFields$2 {
    balance?: BalanceNonNullableFields$2;
    paid?: PriceNonNullableFields$8;
    refunded?: PriceNonNullableFields$8;
    authorized?: PriceNonNullableFields$8;
}
interface InventoryUpdateNonNullableFields {
    lineItemId: string;
}
interface DraftOrderCommitSettingsNonNullableFields {
    updateInventory: InventoryUpdateNonNullableFields[];
}
interface RecipientInfoChangedDetailsNonNullableFields {
    recipientInfoBeforeChange?: AddressWithContactNonNullableFields$2;
}
interface RecipientInfoDetailsNonNullableFields {
    added: boolean;
    changedDetails?: RecipientInfoChangedDetailsNonNullableFields;
    removed: boolean;
    recipientInfo?: AddressWithContactNonNullableFields$2;
}
interface OrderTaxBreakdownNonNullableFields$2 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionType: JurisdictionType$4;
    rate: string;
    aggregatedTaxAmount?: PriceNonNullableFields$8;
    aggregatedTaxableAmount?: PriceNonNullableFields$8;
}
interface OrderTaxInfoNonNullableFields$2 {
    totalTax?: PriceNonNullableFields$8;
    taxBreakdown: OrderTaxBreakdownNonNullableFields$2[];
}
interface BuyerChangedDetailsNonNullableFields {
    buyerInfoBeforeChange?: BuyerInfoNonNullableFields$2;
}
interface BuyerDetailsNonNullableFields {
    added: boolean;
    changedDetails?: BuyerChangedDetailsNonNullableFields;
    removed: boolean;
    buyerInfo?: BuyerInfoNonNullableFields$2;
}
interface BillingChangedDetailsNonNullableFields {
    billingInfoBeforeChange?: AddressWithContactNonNullableFields$2;
}
interface BillingDetailsNonNullableFields {
    added: boolean;
    changedDetails?: BillingChangedDetailsNonNullableFields;
    removed: boolean;
    billingInfo?: AddressWithContactNonNullableFields$2;
}
interface DraftOrderNonNullableFields {
    lineItems: ItemDetailsNonNullableFields[];
    shippingInfo?: ShippingDetailsNonNullableFields;
    buyerInfo?: BuyerInfoNonNullableFields$2;
    billingInfo?: AddressWithContactNonNullableFields$2;
    additionalFees: AdditionalFeeDetailsNonNullableFields[];
    discounts: DiscountDetailsNonNullableFields[];
    createdBy?: CreatedByNonNullableFields$2;
    status: EditingStatus;
    weightUnit: WeightUnit$6;
    priceSummary?: PriceSummaryNonNullableFields$4;
    taxSummary?: TaxSummaryNonNullableFields$4;
    balanceSummary?: BalanceSummaryNonNullableFields$2;
    commitSettings?: DraftOrderCommitSettingsNonNullableFields;
    recipientInfo?: RecipientInfoDetailsNonNullableFields;
    taxInfo?: OrderTaxInfoNonNullableFields$2;
    buyerDetails?: BuyerDetailsNonNullableFields;
    billingDetails?: BillingDetailsNonNullableFields;
}
interface PickupDetailsNonNullableFields$6 {
    address?: AddressNonNullableFields$a;
    pickupMethod: PickupMethod$6;
}
interface DeliveryLogisticsNonNullableFields$6 {
    pickupDetails?: PickupDetailsNonNullableFields$6;
}
interface ShippingPriceNonNullableFields$4 {
    price?: PriceNonNullableFields$8;
    currency: string;
}
interface ShippingOptionNonNullableFields$4 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$6;
    cost?: ShippingPriceNonNullableFields$4;
}
interface ApplicationErrorNonNullableFields$c {
    code: string;
    description: string;
}
interface FieldViolationNonNullableFields$4 {
    field: string;
    description: string;
    violatedRule: RuleType$4;
}
interface ValidationErrorNonNullableFields$4 {
    fieldViolations: FieldViolationNonNullableFields$4[];
}
interface DetailsNonNullableFields$4 {
    applicationError?: ApplicationErrorNonNullableFields$c;
    validationError?: ValidationErrorNonNullableFields$4;
}
interface CarrierErrorNonNullableFields$2 {
    carrierId: string;
    error?: DetailsNonNullableFields$4;
}
interface CarrierErrorsNonNullableFields$2 {
    errors: CarrierErrorNonNullableFields$2[];
}
interface CalculationErrorsNonNullableFields$2 {
    generalShippingCalculationError?: DetailsNonNullableFields$4;
    carrierErrors?: CarrierErrorsNonNullableFields$2;
    taxCalculationError?: DetailsNonNullableFields$4;
    orderValidationErrors: ApplicationErrorNonNullableFields$c[];
}
interface CalculatedDraftOrderNonNullableFields {
    draftOrder?: DraftOrderNonNullableFields;
    shippingOptions: ShippingOptionNonNullableFields$4[];
    calculationErrors?: CalculationErrorsNonNullableFields$2;
}
interface CreateDraftOrderResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface CreateEmptyDraftOrderResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface AddLineItemsToDraftOrderResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface UpdateLineItemsResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetDiscountsResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface CreateCustomDiscountsResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface DeleteCustomDiscountsResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetAdditionalFeesResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface CreateCustomAdditionalFeesResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface DeleteCustomAdditionalFeesResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetShippingInfoResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetBuyerInfoResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetRecipientInfoResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface SetBillingInfoResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface GetDraftOrderResponseNonNullableFields {
    calculatedDraftOrder?: CalculatedDraftOrderNonNullableFields;
}
interface GetOrderDraftabilityStatusResponseNonNullableFields {
    orderId: string;
    orderDraftable: boolean;
    nonDraftableReasons: NonDraftableReason[];
}
interface CustomActivityNonNullableFields$2 {
    appId: string;
    type: string;
}
interface MerchantCommentNonNullableFields$2 {
    message: string;
}
interface OrderRefundedNonNullableFields$2 {
    manual: boolean;
    amount?: PriceNonNullableFields$8;
    reason: string;
}
interface OrderCreatedFromExchangeNonNullableFields$2 {
    originalOrderId: string;
}
interface LineItemExchangeDataNonNullableFields$2 {
    lineItemId: string;
    quantity: number;
}
interface NewExchangeOrderCreatedNonNullableFields$2 {
    exchangeOrderId: string;
    lineItems: LineItemExchangeDataNonNullableFields$2[];
}
interface LineItemQuantityChangeNonNullableFields$2 {
    originalQuantity: number;
    newQuantity: number;
    diff: number;
    deltaType: LineItemQuantityChangeType$2;
}
interface LineItemPriceChangeNonNullableFields$2 {
    originalPrice?: PriceNonNullableFields$8;
    newPrice?: PriceNonNullableFields$8;
}
interface LineItemChangesNonNullableFields$2 {
    _id: string;
    name?: ProductNameNonNullableFields$2;
    quantity?: LineItemQuantityChangeNonNullableFields$2;
    price?: LineItemPriceChangeNonNullableFields$2;
}
interface ManagedLineItemNonNullableFields$2 {
    _id: string;
    name?: ProductNameNonNullableFields$2;
    quantity: number;
}
interface TranslatedValueNonNullableFields$2 {
    original: string;
}
interface LineItemAmountNonNullableFields$2 {
    _id: string;
    name?: ProductNameNonNullableFields$2;
    amount?: PriceNonNullableFields$8;
}
interface ManagedDiscountNonNullableFields$2 {
    _id: string;
    name?: TranslatedValueNonNullableFields$2;
    affectedLineItems: LineItemAmountNonNullableFields$2[];
    totalAmount?: PriceNonNullableFields$8;
}
interface ManagedAdditionalFeeNonNullableFields$2 {
    _id: string;
    name?: TranslatedValueNonNullableFields$2;
    affectedLineItems: LineItemAmountNonNullableFields$2[];
    totalAmount?: PriceNonNullableFields$8;
}
interface TotalPriceChangeNonNullableFields$2 {
    originalTotal?: PriceNonNullableFields$8;
    newTotal?: PriceNonNullableFields$8;
}
interface ShippingInformationNonNullableFields$4 {
    total?: PriceNonNullableFields$8;
    shippingTitle: string;
}
interface ShippingInformationChangeNonNullableFields$2 {
    originalShippingInfo?: ShippingInformationNonNullableFields$4;
    newShippingInfo?: ShippingInformationNonNullableFields$4;
}
interface OrderChangeNonNullableFields$2 {
    lineItemChanged?: LineItemChangesNonNullableFields$2;
    lineItemAdded?: ManagedLineItemNonNullableFields$2;
    lineItemRemoved?: ManagedLineItemNonNullableFields$2;
    discountAdded?: ManagedDiscountNonNullableFields$2;
    discountRemoved?: ManagedDiscountNonNullableFields$2;
    additionalFeeAdded?: ManagedAdditionalFeeNonNullableFields$2;
    additionalFeeRemoved?: ManagedAdditionalFeeNonNullableFields$2;
    totalPriceChanged?: TotalPriceChangeNonNullableFields$2;
    shippingInformationChanged?: ShippingInformationChangeNonNullableFields$2;
}
interface DraftOrderChangesAppliedNonNullableFields$2 {
    draftOrderId: string;
    changes: OrderChangeNonNullableFields$2[];
}
interface SavedPaymentMethodNonNullableFields$2 {
    name: string;
}
interface AuthorizedPaymentCreatedNonNullableFields$2 {
    paymentId: string;
    amount?: PriceNonNullableFields$8;
}
interface AuthorizedPaymentCapturedNonNullableFields$2 {
    paymentId: string;
    amount?: PriceNonNullableFields$8;
}
interface AuthorizedPaymentVoidedNonNullableFields$2 {
    paymentId: string;
    amount?: PriceNonNullableFields$8;
}
interface RegularPaymentRefundNonNullableFields$2 {
    amount?: PriceNonNullableFields$8;
}
interface GiftCardPaymentRefundNonNullableFields$2 {
    amount?: PriceNonNullableFields$8;
}
interface RefundedPaymentNonNullableFields$2 {
    regular?: RegularPaymentRefundNonNullableFields$2;
    giftCard?: GiftCardPaymentRefundNonNullableFields$2;
    paymentId: string;
    externalRefund: boolean;
}
interface RefundInitiatedNonNullableFields$2 {
    refundId: string;
    amount?: PriceNonNullableFields$8;
    payments: RefundedPaymentNonNullableFields$2[];
}
interface PaymentRefundedNonNullableFields$2 {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields$2;
}
interface PaymentRefundFailedNonNullableFields$2 {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields$2;
}
interface RefundedAsStoreCreditNonNullableFields$2 {
    amount?: PriceNonNullableFields$8;
}
interface RegularPaymentNonNullableFields$2 {
    amount?: PriceNonNullableFields$8;
}
interface PaymentPendingNonNullableFields$2 {
    regular?: RegularPaymentNonNullableFields$2;
    paymentId: string;
}
interface PaymentCanceledNonNullableFields$2 {
    regular?: RegularPaymentNonNullableFields$2;
    paymentId: string;
}
interface PaymentDeclinedNonNullableFields$2 {
    regular?: RegularPaymentNonNullableFields$2;
    paymentId: string;
}
interface ActivityNonNullableFields$2 {
    customActivity?: CustomActivityNonNullableFields$2;
    merchantComment?: MerchantCommentNonNullableFields$2;
    orderRefunded?: OrderRefundedNonNullableFields$2;
    orderCreatedFromExchange?: OrderCreatedFromExchangeNonNullableFields$2;
    newExchangeOrderCreated?: NewExchangeOrderCreatedNonNullableFields$2;
    draftOrderChangesApplied?: DraftOrderChangesAppliedNonNullableFields$2;
    savedPaymentMethod?: SavedPaymentMethodNonNullableFields$2;
    authorizedPaymentCreated?: AuthorizedPaymentCreatedNonNullableFields$2;
    authorizedPaymentCaptured?: AuthorizedPaymentCapturedNonNullableFields$2;
    authorizedPaymentVoided?: AuthorizedPaymentVoidedNonNullableFields$2;
    refundInitiated?: RefundInitiatedNonNullableFields$2;
    paymentRefunded?: PaymentRefundedNonNullableFields$2;
    paymentRefundFailed?: PaymentRefundFailedNonNullableFields$2;
    refundedAsStoreCredit?: RefundedAsStoreCreditNonNullableFields$2;
    paymentPending?: PaymentPendingNonNullableFields$2;
    paymentCanceled?: PaymentCanceledNonNullableFields$2;
    paymentDeclined?: PaymentDeclinedNonNullableFields$2;
    type: ActivityType$2;
}
interface V1CreatedByNonNullableFields {
    userId: string;
    memberId: string;
    visitorId: string;
    appId: string;
}
interface ChannelInfoNonNullableFields$2 {
    type: ChannelType$2;
}
interface CustomFieldNonNullableFields$2 {
    title: string;
}
interface V1BalanceSummaryNonNullableFields {
    balance?: BalanceNonNullableFields$2;
    paid?: PriceNonNullableFields$8;
    refunded?: PriceNonNullableFields$8;
    authorized?: PriceNonNullableFields$8;
    pendingRefund?: PriceNonNullableFields$8;
    pending?: PriceNonNullableFields$8;
}
interface TagListNonNullableFields$2 {
    tagIds: string[];
}
interface TagsNonNullableFields$2 {
    privateTags?: TagListNonNullableFields$2;
    tags?: TagListNonNullableFields$2;
}
interface OrderNonNullableFields$2 {
    number: string;
    lineItems: OrderLineItemNonNullableFields$2[];
    buyerInfo?: BuyerInfoNonNullableFields$2;
    paymentStatus: PaymentStatus$2;
    fulfillmentStatus: FulfillmentStatus$2;
    weightUnit: WeightUnit$6;
    taxIncludedInPrices: boolean;
    priceSummary?: PriceSummaryNonNullableFields$4;
    billingInfo?: AddressWithContactNonNullableFields$2;
    shippingInfo?: V1ShippingInformationNonNullableFields$2;
    status: OrderStatus$2;
    taxSummary?: TaxSummaryNonNullableFields$4;
    taxInfo?: OrderTaxInfoNonNullableFields$2;
    appliedDiscounts: AppliedDiscountNonNullableFields$4[];
    activities: ActivityNonNullableFields$2[];
    attributionSource: AttributionSource$2;
    createdBy?: V1CreatedByNonNullableFields;
    channelInfo?: ChannelInfoNonNullableFields$2;
    customFields: CustomFieldNonNullableFields$2[];
    isInternalOrderCreate: boolean;
    payNow?: PriceSummaryNonNullableFields$4;
    balanceSummary?: V1BalanceSummaryNonNullableFields;
    additionalFees: AdditionalFeeNonNullableFields$2[];
    recipientInfo?: AddressWithContactNonNullableFields$2;
    tags?: TagsNonNullableFields$2;
}
interface CommitDraftOrderResponseNonNullableFields {
    committedDraftOrder?: DraftOrderNonNullableFields;
    orderAfterCommit?: OrderNonNullableFields$2;
}
interface CreateOrderFromDraftResponseNonNullableFields {
    committedDraftOrder?: DraftOrderNonNullableFields;
    createdOrder?: OrderNonNullableFields$2;
}
interface QueryDraftOrdersResponseNonNullableFields {
    draftOrders: DraftOrderNonNullableFields[];
}

type __PublicMethodMetaInfo$g<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createDraftOrder(): __PublicMethodMetaInfo$g<'POST', {
    orderId: string;
}, CreateDraftOrderRequest, CreateDraftOrderRequest$1, CreateDraftOrderResponse & CreateDraftOrderResponseNonNullableFields, CreateDraftOrderResponse$1 & CreateDraftOrderResponseNonNullableFields$1>;
declare function createEmptyDraftOrder(): __PublicMethodMetaInfo$g<'POST', {}, CreateEmptyDraftOrderRequest, CreateEmptyDraftOrderRequest$1, CreateEmptyDraftOrderResponse & CreateEmptyDraftOrderResponseNonNullableFields, CreateEmptyDraftOrderResponse$1 & CreateEmptyDraftOrderResponseNonNullableFields$1>;
declare function addLineItemsToDraftOrder(): __PublicMethodMetaInfo$g<'POST', {
    draftOrderId: string;
}, AddLineItemsToDraftOrderRequest, AddLineItemsToDraftOrderRequest$1, AddLineItemsToDraftOrderResponse & AddLineItemsToDraftOrderResponseNonNullableFields, AddLineItemsToDraftOrderResponse$1 & AddLineItemsToDraftOrderResponseNonNullableFields$1>;
declare function updateLineItems(): __PublicMethodMetaInfo$g<'POST', {
    draftOrderId: string;
}, UpdateLineItemsRequest, UpdateLineItemsRequest$1, UpdateLineItemsResponse & UpdateLineItemsResponseNonNullableFields, UpdateLineItemsResponse$1 & UpdateLineItemsResponseNonNullableFields$1>;
declare function setDiscounts(): __PublicMethodMetaInfo$g<'POST', {
    draftOrderId: string;
}, SetDiscountsRequest, SetDiscountsRequest$1, SetDiscountsResponse & SetDiscountsResponseNonNullableFields, SetDiscountsResponse$1 & SetDiscountsResponseNonNullableFields$1>;
declare function createCustomDiscounts(): __PublicMethodMetaInfo$g<'POST', {
    draftOrderId: string;
}, CreateCustomDiscountsRequest, CreateCustomDiscountsRequest$1, CreateCustomDiscountsResponse & CreateCustomDiscountsResponseNonNullableFields, CreateCustomDiscountsResponse$1 & CreateCustomDiscountsResponseNonNullableFields$1>;
declare function deleteCustomDiscounts(): __PublicMethodMetaInfo$g<'POST', {
    draftOrderId: string;
}, DeleteCustomDiscountsRequest, DeleteCustomDiscountsRequest$1, DeleteCustomDiscountsResponse & DeleteCustomDiscountsResponseNonNullableFields, DeleteCustomDiscountsResponse$1 & DeleteCustomDiscountsResponseNonNullableFields$1>;
declare function setAdditionalFees(): __PublicMethodMetaInfo$g<'POST', {
    draftOrderId: string;
}, SetAdditionalFeesRequest, SetAdditionalFeesRequest$1, SetAdditionalFeesResponse & SetAdditionalFeesResponseNonNullableFields, SetAdditionalFeesResponse$1 & SetAdditionalFeesResponseNonNullableFields$1>;
declare function createCustomAdditionalFees(): __PublicMethodMetaInfo$g<'POST', {
    draftOrderId: string;
}, CreateCustomAdditionalFeesRequest, CreateCustomAdditionalFeesRequest$1, CreateCustomAdditionalFeesResponse & CreateCustomAdditionalFeesResponseNonNullableFields, CreateCustomAdditionalFeesResponse$1 & CreateCustomAdditionalFeesResponseNonNullableFields$1>;
declare function deleteCustomAdditionalFees(): __PublicMethodMetaInfo$g<'POST', {
    draftOrderId: string;
}, DeleteCustomAdditionalFeesRequest, DeleteCustomAdditionalFeesRequest$1, DeleteCustomAdditionalFeesResponse & DeleteCustomAdditionalFeesResponseNonNullableFields, DeleteCustomAdditionalFeesResponse$1 & DeleteCustomAdditionalFeesResponseNonNullableFields$1>;
declare function setShippingInfo(): __PublicMethodMetaInfo$g<'PUT', {}, SetShippingInfoRequest, SetShippingInfoRequest$1, SetShippingInfoResponse & SetShippingInfoResponseNonNullableFields, SetShippingInfoResponse$1 & SetShippingInfoResponseNonNullableFields$1>;
declare function setBuyerInfo(): __PublicMethodMetaInfo$g<'PUT', {}, SetBuyerInfoRequest, SetBuyerInfoRequest$1, SetBuyerInfoResponse & SetBuyerInfoResponseNonNullableFields, SetBuyerInfoResponse$1 & SetBuyerInfoResponseNonNullableFields$1>;
declare function setRecipientInfo(): __PublicMethodMetaInfo$g<'PUT', {}, SetRecipientInfoRequest, SetRecipientInfoRequest$1, SetRecipientInfoResponse & SetRecipientInfoResponseNonNullableFields, SetRecipientInfoResponse$1 & SetRecipientInfoResponseNonNullableFields$1>;
declare function setBillingInfo(): __PublicMethodMetaInfo$g<'PUT', {}, SetBillingInfoRequest, SetBillingInfoRequest$1, SetBillingInfoResponse & SetBillingInfoResponseNonNullableFields, SetBillingInfoResponse$1 & SetBillingInfoResponseNonNullableFields$1>;
declare function getDraftOrder(): __PublicMethodMetaInfo$g<'GET', {
    draftOrderId: string;
}, GetDraftOrderRequest, GetDraftOrderRequest$1, GetDraftOrderResponse & GetDraftOrderResponseNonNullableFields, GetDraftOrderResponse$1 & GetDraftOrderResponseNonNullableFields$1>;
declare function getOrderDraftabilityStatus(): __PublicMethodMetaInfo$g<'GET', {
    orderId: string;
}, GetOrderDraftabilityStatusRequest, GetOrderDraftabilityStatusRequest$1, GetOrderDraftabilityStatusResponse & GetOrderDraftabilityStatusResponseNonNullableFields, GetOrderDraftabilityStatusResponse$1 & GetOrderDraftabilityStatusResponseNonNullableFields$1>;
declare function commitDraftOrder(): __PublicMethodMetaInfo$g<'POST', {
    draftOrderId: string;
}, CommitDraftOrderRequest, CommitDraftOrderRequest$1, CommitDraftOrderResponse & CommitDraftOrderResponseNonNullableFields, CommitDraftOrderResponse$1 & CommitDraftOrderResponseNonNullableFields$1>;
declare function createOrderFromDraft(): __PublicMethodMetaInfo$g<'POST', {
    draftOrderId: string;
}, CreateOrderFromDraftRequest, CreateOrderFromDraftRequest$1, CreateOrderFromDraftResponse & CreateOrderFromDraftResponseNonNullableFields, CreateOrderFromDraftResponse$1 & CreateOrderFromDraftResponseNonNullableFields$1>;
declare function deleteDraftOrder(): __PublicMethodMetaInfo$g<'DELETE', {
    draftOrderId: string;
}, DeleteDraftOrderRequest, DeleteDraftOrderRequest$1, DeleteDraftOrderResponse, DeleteDraftOrderResponse$1>;
declare function queryDraftOrders(): __PublicMethodMetaInfo$g<'POST', {}, QueryDraftOrdersRequest, QueryDraftOrdersRequest$1, QueryDraftOrdersResponse & QueryDraftOrdersResponseNonNullableFields, QueryDraftOrdersResponse$1 & QueryDraftOrdersResponseNonNullableFields$1>;

declare const meta$g_addLineItemsToDraftOrder: typeof addLineItemsToDraftOrder;
declare const meta$g_commitDraftOrder: typeof commitDraftOrder;
declare const meta$g_createCustomAdditionalFees: typeof createCustomAdditionalFees;
declare const meta$g_createCustomDiscounts: typeof createCustomDiscounts;
declare const meta$g_createDraftOrder: typeof createDraftOrder;
declare const meta$g_createEmptyDraftOrder: typeof createEmptyDraftOrder;
declare const meta$g_createOrderFromDraft: typeof createOrderFromDraft;
declare const meta$g_deleteCustomAdditionalFees: typeof deleteCustomAdditionalFees;
declare const meta$g_deleteCustomDiscounts: typeof deleteCustomDiscounts;
declare const meta$g_deleteDraftOrder: typeof deleteDraftOrder;
declare const meta$g_getDraftOrder: typeof getDraftOrder;
declare const meta$g_getOrderDraftabilityStatus: typeof getOrderDraftabilityStatus;
declare const meta$g_queryDraftOrders: typeof queryDraftOrders;
declare const meta$g_setAdditionalFees: typeof setAdditionalFees;
declare const meta$g_setBillingInfo: typeof setBillingInfo;
declare const meta$g_setBuyerInfo: typeof setBuyerInfo;
declare const meta$g_setDiscounts: typeof setDiscounts;
declare const meta$g_setRecipientInfo: typeof setRecipientInfo;
declare const meta$g_setShippingInfo: typeof setShippingInfo;
declare const meta$g_updateLineItems: typeof updateLineItems;
declare namespace meta$g {
  export { type __PublicMethodMetaInfo$g as __PublicMethodMetaInfo, meta$g_addLineItemsToDraftOrder as addLineItemsToDraftOrder, meta$g_commitDraftOrder as commitDraftOrder, meta$g_createCustomAdditionalFees as createCustomAdditionalFees, meta$g_createCustomDiscounts as createCustomDiscounts, meta$g_createDraftOrder as createDraftOrder, meta$g_createEmptyDraftOrder as createEmptyDraftOrder, meta$g_createOrderFromDraft as createOrderFromDraft, meta$g_deleteCustomAdditionalFees as deleteCustomAdditionalFees, meta$g_deleteCustomDiscounts as deleteCustomDiscounts, meta$g_deleteDraftOrder as deleteDraftOrder, meta$g_getDraftOrder as getDraftOrder, meta$g_getOrderDraftabilityStatus as getOrderDraftabilityStatus, meta$g_queryDraftOrders as queryDraftOrders, meta$g_setAdditionalFees as setAdditionalFees, meta$g_setBillingInfo as setBillingInfo, meta$g_setBuyerInfo as setBuyerInfo, meta$g_setDiscounts as setDiscounts, meta$g_setRecipientInfo as setRecipientInfo, meta$g_setShippingInfo as setShippingInfo, meta$g_updateLineItems as updateLineItems };
}

interface OrderWithFulfillments$1 {
    /** Order ID. */
    orderId?: string;
    /** Fulfillments associated with the order. */
    fulfillments?: Fulfillment$1[];
}
/** for now, this is a sub-object of Orders, so can refer to order line items by id. */
interface Fulfillment$1 extends FulfillmentFulfillmentInfoOneOf$1 {
    /** Tracking info. */
    trackingInfo?: FulfillmentTrackingInfo$1;
    /** Custom fulfillment info. */
    customInfo?: CustomFulfillmentInfo$1;
    /**
     * Fulfillment ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Fulfillment creation date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    createdDate?: Date | null;
    /** Line items being fulfilled. */
    lineItems?: FulfillmentLineItem$1[];
    /**
     * Fulfillment status.
     *
     * Supported values:
     * + `"Pending"`
     * + `"Accepted"`
     * + `"Ready"`
     * + `"In_Delivery"`
     * + `"Fulfilled"`
     */
    status?: string | null;
    /** Fulfillment handling complete. */
    completed?: boolean | null;
}
/** @oneof */
interface FulfillmentFulfillmentInfoOneOf$1 {
    /** Tracking info. */
    trackingInfo?: FulfillmentTrackingInfo$1;
    /** Custom fulfillment info. */
    customInfo?: CustomFulfillmentInfo$1;
}
interface FulfillmentLineItem$1 {
    /** Line item ID (mirrors the ID of the order line item). */
    id?: string;
    /**
     * Line item quantity.
     * * If this property isn't passed on creation, it defaults to the number of items not already linked to a fulfillment.
     * * If the order does not have the requested quantity of line items available to add to this fulfillment, the fulfillment will not be created and an error is returned.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number | null;
}
interface FulfillmentTrackingInfo$1 {
    /** Shipping/delivery tracking number. */
    trackingNumber?: string | null;
    /**
     * Shipping provider. Using one of the following shipping providers will allow for auto-filling the tracking link:
     * * `'fedex'`
     * * `'ups'`
     * * `'usps'`
     * * `'dhl'`
     * * `'canadaPost'`
     */
    shippingProvider?: string | null;
    /** Tracking link. Auto-filled if a predefined shipping provider is used, otherwise provided on creation. */
    trackingLink?: string | null;
}
interface CustomFulfillmentInfo$1 {
    /** Custom fulfillment info in key:value form. */
    fieldsData?: Record<string, string>;
}
interface ListFulfillmentsForSingleOrderRequest$1 {
    /** Order ID for which to retrieve fulfillments. */
    orderId: string;
}
interface ListFulfillmentsForSingleOrderResponse$1 {
    /** List of fulfillments associated with the order. */
    orderWithFulfillments?: OrderWithFulfillments$1;
}
interface ListFulfillmentsForMultipleOrdersRequest$1 {
    /** List of order IDs for which to retrieve fulfillments. */
    orderIds: string[];
}
interface ListFulfillmentsForMultipleOrdersResponse$1 {
    /** List of order IDs and their associated fulfillments. */
    ordersWithFulfillments?: OrderWithFulfillments$1[];
}
interface CreateFulfillmentRequest$1 {
    /** Order ID. */
    orderId: string;
    /** Fulfillment info. */
    fulfillment: Fulfillment$1;
}
interface CreateFulfillmentResponse$1 {
    /** Order ID and the orders' fulfillments. */
    orderWithFulfillments?: OrderWithFulfillments$1;
    /** ID of created fulfillment. */
    fulfillmentId?: string;
}
interface UpdateFulfillmentRequest$1 {
    /** Order ID. */
    orderId: string;
    /** Fulfillment info to update. */
    fulfillment?: Fulfillment$1;
}
interface UpdateFulfillmentResponse$1 {
    /** Order ID and the orders' associated fulfillments after update. */
    orderWithFulfillments?: OrderWithFulfillments$1;
}
interface DeleteFulfillmentRequest$1 {
    /** Order ID. */
    orderId: string;
    /** ID of the fulfillment to delete. */
    fulfillmentId: string;
}
interface DeleteFulfillmentResponse$1 {
    /** Order ID and the order's associated fulfillments after deletion. */
    orderWithFulfillments?: OrderWithFulfillments$1;
}
interface BulkCreateFulfillmentRequest$1 {
    /** List of order IDs and their associated fulfillments. */
    ordersWithFulfillments: BulkCreateOrderWithFulfillments$1[];
}
interface BulkCreateOrderWithFulfillments$1 {
    /** Order ID. */
    orderId?: string;
    /** Fulfillments associated with the order. */
    fulfillments?: Fulfillment$1[];
}
interface BulkCreateFulfillmentResponse$1 {
    /** Items updated by bulk action. */
    results?: BulkOrderFulfillmentsResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$5;
}
interface BulkOrderFulfillmentsResult$1 {
    /** Item metadata. */
    itemMetadata?: ItemMetadata$5;
    ordersWithFulfillments?: OrderWithFulfillments$1;
}
interface ItemMetadata$5 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$b;
}
interface ApplicationError$b {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$5 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface FulfillmentLineItemNonNullableFields$1 {
    id: string;
}
interface FulfillmentNonNullableFields$1 {
    lineItems: FulfillmentLineItemNonNullableFields$1[];
}
interface OrderWithFulfillmentsNonNullableFields$1 {
    orderId: string;
    fulfillments: FulfillmentNonNullableFields$1[];
}
interface ListFulfillmentsForSingleOrderResponseNonNullableFields$1 {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields$1;
}
interface ListFulfillmentsForMultipleOrdersResponseNonNullableFields$1 {
    ordersWithFulfillments: OrderWithFulfillmentsNonNullableFields$1[];
}
interface CreateFulfillmentResponseNonNullableFields$1 {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields$1;
    fulfillmentId: string;
}
interface UpdateFulfillmentResponseNonNullableFields$1 {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields$1;
}
interface DeleteFulfillmentResponseNonNullableFields$1 {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields$1;
}
interface ApplicationErrorNonNullableFields$b {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$5 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$b;
}
interface BulkOrderFulfillmentsResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$5;
    ordersWithFulfillments?: OrderWithFulfillmentsNonNullableFields$1;
}
interface BulkActionMetadataNonNullableFields$5 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateFulfillmentResponseNonNullableFields$1 {
    results: BulkOrderFulfillmentsResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$5;
}

interface OrderWithFulfillments {
    /** Order ID. */
    orderId?: string;
    /** Fulfillments associated with the order. */
    fulfillments?: Fulfillment[];
}
/** for now, this is a sub-object of Orders, so can refer to order line items by id. */
interface Fulfillment extends FulfillmentFulfillmentInfoOneOf {
    /** Tracking info. */
    trackingInfo?: FulfillmentTrackingInfo;
    /** Custom fulfillment info. */
    customInfo?: CustomFulfillmentInfo;
    /**
     * Fulfillment ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Fulfillment creation date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Line items being fulfilled. */
    lineItems?: FulfillmentLineItem[];
    /**
     * Fulfillment status.
     *
     * Supported values:
     * + `"Pending"`
     * + `"Accepted"`
     * + `"Ready"`
     * + `"In_Delivery"`
     * + `"Fulfilled"`
     */
    status?: string | null;
    /** Fulfillment handling complete. */
    completed?: boolean | null;
}
/** @oneof */
interface FulfillmentFulfillmentInfoOneOf {
    /** Tracking info. */
    trackingInfo?: FulfillmentTrackingInfo;
    /** Custom fulfillment info. */
    customInfo?: CustomFulfillmentInfo;
}
interface FulfillmentLineItem {
    /** Line item ID (mirrors the ID of the order line item). */
    _id?: string;
    /**
     * Line item quantity.
     * * If this property isn't passed on creation, it defaults to the number of items not already linked to a fulfillment.
     * * If the order does not have the requested quantity of line items available to add to this fulfillment, the fulfillment will not be created and an error is returned.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number | null;
}
interface FulfillmentTrackingInfo {
    /** Shipping/delivery tracking number. */
    trackingNumber?: string | null;
    /**
     * Shipping provider. Using one of the following shipping providers will allow for auto-filling the tracking link:
     * * `'fedex'`
     * * `'ups'`
     * * `'usps'`
     * * `'dhl'`
     * * `'canadaPost'`
     */
    shippingProvider?: string | null;
    /** Tracking link. Auto-filled if a predefined shipping provider is used, otherwise provided on creation. */
    trackingLink?: string | null;
}
interface CustomFulfillmentInfo {
    /** Custom fulfillment info in key:value form. */
    fieldsData?: Record<string, string>;
}
interface ListFulfillmentsForSingleOrderRequest {
    /** Order ID for which to retrieve fulfillments. */
    orderId: string;
}
interface ListFulfillmentsForSingleOrderResponse {
    /** List of fulfillments associated with the order. */
    orderWithFulfillments?: OrderWithFulfillments;
}
interface ListFulfillmentsForMultipleOrdersRequest {
    /** List of order IDs for which to retrieve fulfillments. */
    orderIds: string[];
}
interface ListFulfillmentsForMultipleOrdersResponse {
    /** List of order IDs and their associated fulfillments. */
    ordersWithFulfillments?: OrderWithFulfillments[];
}
interface CreateFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** Fulfillment info. */
    fulfillment: Fulfillment;
}
interface CreateFulfillmentResponse {
    /** Order ID and the orders' fulfillments. */
    orderWithFulfillments?: OrderWithFulfillments;
    /** ID of created fulfillment. */
    fulfillmentId?: string;
}
interface UpdateFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** Fulfillment info to update. */
    fulfillment?: Fulfillment;
}
interface UpdateFulfillmentResponse {
    /** Order ID and the orders' associated fulfillments after update. */
    orderWithFulfillments?: OrderWithFulfillments;
}
interface DeleteFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** ID of the fulfillment to delete. */
    fulfillmentId: string;
}
interface DeleteFulfillmentResponse {
    /** Order ID and the order's associated fulfillments after deletion. */
    orderWithFulfillments?: OrderWithFulfillments;
}
interface BulkCreateFulfillmentRequest {
    /** List of order IDs and their associated fulfillments' info. */
    ordersWithFulfillments: BulkCreateOrderWithFulfillments[];
}
interface BulkCreateOrderWithFulfillments {
    /** Order ID. */
    orderId?: string;
    /** Fulfillments associated with the order. */
    fulfillments?: Fulfillment[];
}
interface BulkCreateFulfillmentResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderFulfillmentsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$4;
}
interface BulkOrderFulfillmentsResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata$4;
    /** List of order IDs and their associated fulfillments. */
    ordersWithFulfillments?: OrderWithFulfillments;
}
interface ItemMetadata$4 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$a;
}
interface ApplicationError$a {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$4 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface FulfillmentLineItemNonNullableFields {
    _id: string;
}
interface FulfillmentNonNullableFields {
    lineItems: FulfillmentLineItemNonNullableFields[];
}
interface OrderWithFulfillmentsNonNullableFields {
    orderId: string;
    fulfillments: FulfillmentNonNullableFields[];
}
interface ListFulfillmentsForSingleOrderResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface ListFulfillmentsForMultipleOrdersResponseNonNullableFields {
    ordersWithFulfillments: OrderWithFulfillmentsNonNullableFields[];
}
interface CreateFulfillmentResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
    fulfillmentId: string;
}
interface UpdateFulfillmentResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface DeleteFulfillmentResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface ApplicationErrorNonNullableFields$a {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$4 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$a;
}
interface BulkOrderFulfillmentsResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields$4;
    ordersWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface BulkActionMetadataNonNullableFields$4 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateFulfillmentResponseNonNullableFields {
    results: BulkOrderFulfillmentsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$4;
}

type __PublicMethodMetaInfo$f<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function listFulfillmentsForSingleOrder(): __PublicMethodMetaInfo$f<'GET', {
    orderId: string;
}, ListFulfillmentsForSingleOrderRequest, ListFulfillmentsForSingleOrderRequest$1, ListFulfillmentsForSingleOrderResponse & ListFulfillmentsForSingleOrderResponseNonNullableFields, ListFulfillmentsForSingleOrderResponse$1 & ListFulfillmentsForSingleOrderResponseNonNullableFields$1>;
declare function listFulfillmentsForMultipleOrders(): __PublicMethodMetaInfo$f<'POST', {}, ListFulfillmentsForMultipleOrdersRequest, ListFulfillmentsForMultipleOrdersRequest$1, ListFulfillmentsForMultipleOrdersResponse & ListFulfillmentsForMultipleOrdersResponseNonNullableFields, ListFulfillmentsForMultipleOrdersResponse$1 & ListFulfillmentsForMultipleOrdersResponseNonNullableFields$1>;
declare function createFulfillment(): __PublicMethodMetaInfo$f<'POST', {
    orderId: string;
}, CreateFulfillmentRequest, CreateFulfillmentRequest$1, CreateFulfillmentResponse & CreateFulfillmentResponseNonNullableFields, CreateFulfillmentResponse$1 & CreateFulfillmentResponseNonNullableFields$1>;
declare function updateFulfillment(): __PublicMethodMetaInfo$f<'PATCH', {
    fulfillmentId: string;
    orderId: string;
}, UpdateFulfillmentRequest, UpdateFulfillmentRequest$1, UpdateFulfillmentResponse & UpdateFulfillmentResponseNonNullableFields, UpdateFulfillmentResponse$1 & UpdateFulfillmentResponseNonNullableFields$1>;
declare function deleteFulfillment(): __PublicMethodMetaInfo$f<'DELETE', {
    fulfillmentId: string;
    orderId: string;
}, DeleteFulfillmentRequest, DeleteFulfillmentRequest$1, DeleteFulfillmentResponse & DeleteFulfillmentResponseNonNullableFields, DeleteFulfillmentResponse$1 & DeleteFulfillmentResponseNonNullableFields$1>;
declare function bulkCreateFulfillments(): __PublicMethodMetaInfo$f<'POST', {}, BulkCreateFulfillmentRequest, BulkCreateFulfillmentRequest$1, BulkCreateFulfillmentResponse & BulkCreateFulfillmentResponseNonNullableFields, BulkCreateFulfillmentResponse$1 & BulkCreateFulfillmentResponseNonNullableFields$1>;

declare const meta$f_bulkCreateFulfillments: typeof bulkCreateFulfillments;
declare const meta$f_createFulfillment: typeof createFulfillment;
declare const meta$f_deleteFulfillment: typeof deleteFulfillment;
declare const meta$f_listFulfillmentsForMultipleOrders: typeof listFulfillmentsForMultipleOrders;
declare const meta$f_listFulfillmentsForSingleOrder: typeof listFulfillmentsForSingleOrder;
declare const meta$f_updateFulfillment: typeof updateFulfillment;
declare namespace meta$f {
  export { type __PublicMethodMetaInfo$f as __PublicMethodMetaInfo, meta$f_bulkCreateFulfillments as bulkCreateFulfillments, meta$f_createFulfillment as createFulfillment, meta$f_deleteFulfillment as deleteFulfillment, meta$f_listFulfillmentsForMultipleOrders as listFulfillmentsForMultipleOrders, meta$f_listFulfillmentsForSingleOrder as listFulfillmentsForSingleOrder, meta$f_updateFulfillment as updateFulfillment };
}

interface GiftCard$3 {
    /**
     * Gift card obfuscated code.
     *
     * For example: "****-****-****-1234".
     */
    obfuscatedCode?: string;
    /** Gift card balance. */
    balance?: Money$1;
    /**
     * Current gift card status. Supported values:
     * + **VALID**: Gift card is active and can be used for purchases.
     * + **EXPIRED**: Gift card expiration date has passed and can no longer be used.
     * + **DISABLED**: Gift card has been disabled by the merchant and can no longer be used.
     */
    status?: Status$3;
    /** App ID of the gift card provider, as returned in eCommerce Get Checkout or List Transactions for Single Order. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface Money$1 {
    /** Monetary amount. Decimal string with a period as a decimal separator (e.g., 3.99). Optionally, a single (-), to indicate that the amount is negative. */
    value?: string;
    /** Currency code. Must be valid ISO 4217 currency code (e.g., USD). */
    currency?: string;
}
declare enum Status$3 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    VALID = "VALID",
    EXPIRED = "EXPIRED",
    DISABLED = "DISABLED"
}
interface GetGiftCardRequest$1 {
    /** Gift card code. */
    code: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context$1;
}
interface Context$1 {
    /** Physical location ID. Can be based on the Locations API or an external provider. */
    locationId?: string | null;
}
interface GetGiftCardResponse$1 {
    /** Retrieved gift card. */
    giftCard?: GiftCard$3;
}
interface RedeemGiftCardRequest$1 {
    /** Gift card code. */
    code: string;
    /** Amount to redeem from the gift card. */
    amount: Money$1;
    /** Order ID to apply the gift card transaction, when applying a gift card after order creation. Order ID can be collected from the eCommerce Order Created webhook or by calling eCommerce Search Orders. */
    orderId?: string;
    /** App ID of the gift card provider. */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context$1;
}
interface RedeemGiftCardResponse$1 {
    /** Gift card transaction ID. */
    transactionId?: string;
}
interface VoidTransactionRequest$1 {
    /** Gift card transaction ID, as returned from Redeem Gift Card. */
    transactionId: string;
    /** App ID of the gift card provider. */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context$1;
}
interface VoidTransactionResponse$1 {
}
interface MoneyNonNullableFields$1 {
    value: string;
    currency: string;
}
interface GiftCardNonNullableFields$3 {
    obfuscatedCode: string;
    balance?: MoneyNonNullableFields$1;
    status: Status$3;
    appId: string;
}
interface GetGiftCardResponseNonNullableFields$1 {
    giftCard?: GiftCardNonNullableFields$3;
}
interface RedeemGiftCardResponseNonNullableFields$1 {
    transactionId: string;
}

interface GiftCard$2 {
    /**
     * Gift card obfuscated code.
     *
     * For example: "****-****-****-1234".
     */
    obfuscatedCode?: string;
    /** Gift card balance. */
    balance?: Money;
    /**
     * Current gift card status. Supported values:
     * + **VALID**: Gift card is active and can be used for purchases.
     * + **EXPIRED**: Gift card expiration date has passed and can no longer be used.
     * + **DISABLED**: Gift card has been disabled by the merchant and can no longer be used.
     */
    status?: Status$2;
    /** App ID of the gift card provider, as returned in eCommerce Get Checkout or List Transactions for Single Order. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface Money {
    /** Monetary amount. Decimal string with a period as a decimal separator (e.g., 3.99). Optionally, a single (-), to indicate that the amount is negative. */
    value?: string;
    /** Currency code. Must be valid ISO 4217 currency code (e.g., USD). */
    currency?: string;
}
declare enum Status$2 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    VALID = "VALID",
    EXPIRED = "EXPIRED",
    DISABLED = "DISABLED"
}
interface GetGiftCardRequest {
    /** Gift card code. */
    code: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
}
interface Context {
    /** Physical location ID. Can be based on the Locations API or an external provider. */
    locationId?: string | null;
}
interface GetGiftCardResponse {
    /** Retrieved gift card. */
    giftCard?: GiftCard$2;
}
interface RedeemGiftCardRequest {
    /** Gift card code. */
    code: string;
    /** Amount to redeem from the gift card. */
    amount: Money;
    /** Order ID to apply the gift card transaction, when applying a gift card after order creation. Order ID can be collected from the eCommerce Order Created webhook or by calling eCommerce Search Orders. */
    orderId?: string;
    /** App ID of the gift card provider. */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
}
interface RedeemGiftCardResponse {
    /** Gift card transaction ID. */
    transactionId?: string;
}
interface VoidTransactionRequest {
    /** Gift card transaction ID, as returned from Redeem Gift Card. */
    transactionId: string;
    /** App ID of the gift card provider. */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
}
interface VoidTransactionResponse {
}
interface MoneyNonNullableFields {
    value: string;
    currency: string;
}
interface GiftCardNonNullableFields$2 {
    obfuscatedCode: string;
    balance?: MoneyNonNullableFields;
    status: Status$2;
    appId: string;
}
interface GetGiftCardResponseNonNullableFields {
    giftCard?: GiftCardNonNullableFields$2;
}
interface RedeemGiftCardResponseNonNullableFields {
    transactionId: string;
}

type __PublicMethodMetaInfo$e<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getGiftCard(): __PublicMethodMetaInfo$e<'POST', {
    code: string;
}, GetGiftCardRequest, GetGiftCardRequest$1, GetGiftCardResponse & GetGiftCardResponseNonNullableFields, GetGiftCardResponse$1 & GetGiftCardResponseNonNullableFields$1>;
declare function redeemGiftCard(): __PublicMethodMetaInfo$e<'POST', {}, RedeemGiftCardRequest, RedeemGiftCardRequest$1, RedeemGiftCardResponse & RedeemGiftCardResponseNonNullableFields, RedeemGiftCardResponse$1 & RedeemGiftCardResponseNonNullableFields$1>;
declare function voidTransaction(): __PublicMethodMetaInfo$e<'POST', {}, VoidTransactionRequest, VoidTransactionRequest$1, VoidTransactionResponse, VoidTransactionResponse$1>;

declare const meta$e_getGiftCard: typeof getGiftCard;
declare const meta$e_redeemGiftCard: typeof redeemGiftCard;
declare const meta$e_voidTransaction: typeof voidTransaction;
declare namespace meta$e {
  export { type __PublicMethodMetaInfo$e as __PublicMethodMetaInfo, meta$e_getGiftCard as getGiftCard, meta$e_redeemGiftCard as redeemGiftCard, meta$e_voidTransaction as voidTransaction };
}

interface LocalDeliveryOption$1 extends LocalDeliveryOptionConfigOneOf$1 {
    zipConfig?: ZipCodeConfig$1;
    radiusConfig?: RadiusConfig$1;
    customAreaConfig?: CustomAreaConfig$1;
    /** LocalDeliveryOptionId - unique identifier of local delivery option */
    id?: string | null;
    /** Area name of Local Delivery Option */
    areaName?: string | null;
    /**
     * Flat price of local delivery
     * @deprecated Flat price of local delivery
     * @targetRemovalDate 2025-01-12
     */
    rate?: string | null;
    /** Estimated delivery time description text */
    estimatedDeliveryTime?: string | null;
    /**
     * Minimum order total to be eligible for free delivery
     * @deprecated Minimum order total to be eligible for free delivery
     * @targetRemovalDate 2025-01-12
     */
    minimumFreeDeliveryOrderAmount?: number | null;
    /** List of countries with subdivisions */
    destinations?: Destination$1[];
    /**
     * Database revision of LocalDeliveryOption entity. Incremented on each modification
     * @readonly
     */
    revision?: string | null;
    scheduledDeliveryConfig?: ScheduledDelivery$1;
    /** at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates$5[];
    /**
     * Date and time the LocalDeliveryOption was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the LocalDeliveryOption was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** This local delivery is active for the following delivery regions. */
    deliveryRegionIds?: string[];
}
/** @oneof */
interface LocalDeliveryOptionConfigOneOf$1 {
    zipConfig?: ZipCodeConfig$1;
    radiusConfig?: RadiusConfig$1;
    customAreaConfig?: CustomAreaConfig$1;
}
interface Destination$1 {
    /** Country ISO code */
    code?: string;
    /** List of subdivisions, empty means all */
    subdivisions?: string[];
}
interface ZipCodeConfig$1 {
    /** List of ZipCodes and ZipCode regexes. Examples: 10001, 10002 or 1000* */
    zipCodes?: string[];
}
interface RadiusConfig$1 {
    /** Delivery-from address */
    address?: LocalDeliveryAddress$1;
    /** Delivery circle's radius */
    radius?: number;
    /**
     * Radius' unit, taken from site properties
     * @readonly
     */
    lengthUnit?: LengthUnit$1;
}
interface LocalDeliveryAddress$1 {
    /** A string containing the human-readable address of this location */
    formattedAddress?: string | null;
    /** coordinates of the physical address */
    geocode?: AddressLocation$1;
}
interface AddressLocation$1 {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
declare enum LengthUnit$1 {
    /** Length unit can't be classified, due to an error */
    UNSPECIFIED_LENGTH_UNIT = "UNSPECIFIED_LENGTH_UNIT",
    /** Kilometers */
    KM = "KM",
    /** Miles */
    MI = "MI"
}
interface CustomAreaConfig$1 {
    /** Geocodes of the polygon defining the delivery area. */
    geocodes?: AddressLocation$1[];
}
interface ScheduledDelivery$1 {
    /**
     * Days config which contain days when delivery is enabled with it's time slots
     * @deprecated Days config which contain days when delivery is enabled with it's time slots
     * @replacedBy time_windows
     * @targetRemovalDate 2025-01-01
     */
    days?: Days$1;
    /** Amount of days before first delivery option date */
    handlingDays?: number | null;
    /** Cut off time after which first delivery option would be for next day */
    cutOffTime?: TimePoint$1;
    /** availability times configuration. */
    timeWindows?: TimeWindow$1[];
}
interface Days$1 {
    monday?: DaySlot$1;
    tuesday?: DaySlot$1;
    wednesday?: DaySlot$1;
    thursday?: DaySlot$1;
    friday?: DaySlot$1;
    saturday?: DaySlot$1;
    sunday?: DaySlot$1;
}
interface DaySlot$1 {
    /** Shows whether this day slot is enabled for delivery */
    enabledForDelivery?: boolean | null;
    /** Time slots for scheduled delivery during day */
    timeSlots?: TimeSlot$1[];
}
interface TimeSlot$1 {
    /** Starting time point of time slot */
    from?: TimePoint$1;
    /** End time point of time slot */
    to?: TimePoint$1;
}
interface TimePoint$1 {
    /** Hours in format 0-23 */
    hours?: number | null;
    /** Minutes 0-59 */
    minutes?: number | null;
}
interface TimeWindow$1 {
    /** The day of week this availability relates to. */
    day?: DayOfWeek$1;
    /** The start time in time of day representation. */
    start?: TimeOfDay$1;
    /** The end time in time of day representation. */
    end?: TimeOfDay$1;
}
declare enum DayOfWeek$1 {
    /** Monday. */
    MON = "MON",
    /** Tuesday. */
    TUE = "TUE",
    /** Wednesday. */
    WED = "WED",
    /** Thursday. */
    THU = "THU",
    /** Friday. */
    FRI = "FRI",
    /** Saturday. */
    SAT = "SAT",
    /** Sunday. */
    SUN = "SUN"
}
interface TimeOfDay$1 {
    /** Hours */
    hours?: number;
    /** Minutes */
    minutes?: number;
}
interface ConditionalRates$5 {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition$5[];
    amount?: string;
}
interface Condition$5 {
    type?: ConditionType$5;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator$5;
}
declare enum ConditionType$5 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
declare enum LogicalOperator$5 {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
interface CreateLocalDeliveryOptionRequest$1 {
    localDeliveryOption: LocalDeliveryOption$1;
}
interface CreateLocalDeliveryOptionResponse$1 {
    localDeliveryOption?: LocalDeliveryOption$1;
}
interface GetLocalDeliveryOptionRequest$1 {
    /**
     * @deprecated
     * @targetRemovalDate 2025-01-12
     */
    id?: string;
    localDeliveryOptionId: string;
}
interface GetLocalDeliveryOptionResponse$1 {
    localDeliveryOption?: LocalDeliveryOption$1;
}
interface ListLocalDeliveryOptionsRequest$1 {
    externalId: string;
}
interface ListLocalDeliveryOptionsResponse$1 {
    localDeliveryOptions?: LocalDeliveryOption$1[];
}
interface QueryLocalDeliveryOptionsRequest$1 {
    /** WQL expression */
    query: QueryV2$5;
}
interface QueryV2$5 extends QueryV2PagingMethodOneOf$5 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$5;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$f;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$f[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf$5 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$5;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$f;
}
interface Sorting$f {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$f;
}
declare enum SortOrder$f {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging$5 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$f {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryLocalDeliveryOptionsResponse$1 {
    /** Retrieved local delivery options. */
    localDeliveryOptions?: LocalDeliveryOption$1[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$d;
}
interface CursorPagingMetadata$d {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$f;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$f {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateLocalDeliveryOptionRequest$1 {
    localDeliveryOption: LocalDeliveryOption$1;
}
interface UpdateLocalDeliveryOptionResponse$1 {
    localDeliveryOption?: LocalDeliveryOption$1;
}
interface DeleteLocalDeliveryOptionRequest$1 {
    /**
     * @deprecated
     * @targetRemovalDate 2025-01-12
     */
    id?: string;
    localDeliveryOptionId: string;
}
interface DeleteLocalDeliveryOptionResponse$1 {
}
interface BulkCreateLocalDeliveryOptionRequest$1 {
    localDeliveryOptions: LocalDeliveryOption$1[];
}
interface BulkCreateLocalDeliveryOptionResponse$1 {
    localDeliveryOptions?: LocalDeliveryOption$1[];
    errors?: LocalDeliveryOptionError$1[];
}
interface LocalDeliveryOptionError$1 {
    id?: string;
    error?: string;
}
interface BulkUpdateLocalDeliveryOptionRequest$1 {
    localDeliveryOptions: LocalDeliveryOption$1[];
}
interface BulkUpdateLocalDeliveryOptionResponse$1 {
    localDeliveryOptions?: LocalDeliveryOption$1[];
    errors?: LocalDeliveryOptionError$1[];
}
interface BulkDeleteLocalDeliveryOptionRequest$1 {
    ids: string[];
}
interface BulkDeleteLocalDeliveryOptionResponse$1 {
}
interface AddDeliveryRegionRequest$3 {
    deliveryRegionId: string;
    localDeliveryOptionId: string;
    /** Revision of the PickupLocation */
    revision?: string | null;
}
interface AddDeliveryRegionResponse$3 {
    localDeliveryOption?: LocalDeliveryOption$1;
}
interface RemoveDeliveryRegionRequest$3 {
    deliveryRegionId: string;
    localDeliveryOptionId: string;
    /** Revision of the PickupLocation */
    revision?: string | null;
}
interface RemoveDeliveryRegionResponse$3 {
    localDeliveryOption?: LocalDeliveryOption$1;
}
interface ZipCodeConfigNonNullableFields$1 {
    zipCodes: string[];
}
interface RadiusConfigNonNullableFields$1 {
    radius: number;
    lengthUnit: LengthUnit$1;
}
interface DestinationNonNullableFields$1 {
    code: string;
    subdivisions: string[];
}
interface TimeOfDayNonNullableFields$1 {
    hours: number;
    minutes: number;
}
interface TimeWindowNonNullableFields$1 {
    day: DayOfWeek$1;
    start?: TimeOfDayNonNullableFields$1;
    end?: TimeOfDayNonNullableFields$1;
}
interface ScheduledDeliveryNonNullableFields$1 {
    timeWindows: TimeWindowNonNullableFields$1[];
}
interface ConditionNonNullableFields$5 {
    type: ConditionType$5;
    value: string;
    operator: LogicalOperator$5;
}
interface ConditionalRatesNonNullableFields$5 {
    conditions: ConditionNonNullableFields$5[];
    amount: string;
}
interface LocalDeliveryOptionNonNullableFields$1 {
    zipConfig?: ZipCodeConfigNonNullableFields$1;
    radiusConfig?: RadiusConfigNonNullableFields$1;
    destinations: DestinationNonNullableFields$1[];
    scheduledDeliveryConfig?: ScheduledDeliveryNonNullableFields$1;
    rates: ConditionalRatesNonNullableFields$5[];
    deliveryRegionIds: string[];
}
interface CreateLocalDeliveryOptionResponseNonNullableFields$1 {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields$1;
}
interface GetLocalDeliveryOptionResponseNonNullableFields$1 {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields$1;
}
interface ListLocalDeliveryOptionsResponseNonNullableFields$1 {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields$1[];
}
interface QueryLocalDeliveryOptionsResponseNonNullableFields$1 {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields$1[];
}
interface UpdateLocalDeliveryOptionResponseNonNullableFields$1 {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields$1;
}
interface LocalDeliveryOptionErrorNonNullableFields$1 {
    id: string;
    error: string;
}
interface BulkCreateLocalDeliveryOptionResponseNonNullableFields$1 {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields$1[];
    errors: LocalDeliveryOptionErrorNonNullableFields$1[];
}
interface BulkUpdateLocalDeliveryOptionResponseNonNullableFields$1 {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields$1[];
    errors: LocalDeliveryOptionErrorNonNullableFields$1[];
}
interface AddDeliveryRegionResponseNonNullableFields$3 {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields$1;
}
interface RemoveDeliveryRegionResponseNonNullableFields$3 {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields$1;
}

interface LocalDeliveryOption extends LocalDeliveryOptionConfigOneOf {
    zipConfig?: ZipCodeConfig;
    radiusConfig?: RadiusConfig;
    customAreaConfig?: CustomAreaConfig;
    /** LocalDeliveryOptionId - unique identifier of local delivery option */
    _id?: string | null;
    /** Area name of Local Delivery Option */
    areaName?: string | null;
    /**
     * Flat price of local delivery
     * @deprecated Flat price of local delivery
     * @targetRemovalDate 2025-01-12
     */
    rate?: string | null;
    /** Estimated delivery time description text */
    estimatedDeliveryTime?: string | null;
    /**
     * Minimum order total to be eligible for free delivery
     * @deprecated Minimum order total to be eligible for free delivery
     * @targetRemovalDate 2025-01-12
     */
    minimumFreeDeliveryOrderAmount?: number | null;
    /** List of countries with subdivisions */
    destinations?: Destination[];
    /**
     * Database revision of LocalDeliveryOption entity. Incremented on each modification
     * @readonly
     */
    revision?: string | null;
    scheduledDeliveryConfig?: ScheduledDelivery;
    /** at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates$4[];
    /**
     * Date and time the LocalDeliveryOption was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the LocalDeliveryOption was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** This local delivery is active for the following delivery regions. */
    deliveryRegionIds?: string[];
}
/** @oneof */
interface LocalDeliveryOptionConfigOneOf {
    zipConfig?: ZipCodeConfig;
    radiusConfig?: RadiusConfig;
    customAreaConfig?: CustomAreaConfig;
}
interface Destination {
    /** Country ISO code */
    code?: string;
    /** List of subdivisions, empty means all */
    subdivisions?: string[];
}
interface ZipCodeConfig {
    /** List of ZipCodes and ZipCode regexes. Examples: 10001, 10002 or 1000* */
    zipCodes?: string[];
}
interface RadiusConfig {
    /** Delivery-from address */
    address?: LocalDeliveryAddress;
    /** Delivery circle's radius */
    radius?: number;
    /**
     * Radius' unit, taken from site properties
     * @readonly
     */
    lengthUnit?: LengthUnit;
}
interface LocalDeliveryAddress {
    /** A string containing the human-readable address of this location */
    formatted?: string | null;
    /** coordinates of the physical address */
    location?: AddressLocation;
}
interface AddressLocation {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
declare enum LengthUnit {
    /** Length unit can't be classified, due to an error */
    UNSPECIFIED_LENGTH_UNIT = "UNSPECIFIED_LENGTH_UNIT",
    /** Kilometers */
    KM = "KM",
    /** Miles */
    MI = "MI"
}
interface CustomAreaConfig {
    /** Geocodes of the polygon defining the delivery area. */
    geocodes?: AddressLocation[];
}
interface ScheduledDelivery {
    /**
     * Days config which contain days when delivery is enabled with it's time slots
     * @deprecated Days config which contain days when delivery is enabled with it's time slots
     * @replacedBy time_windows
     * @targetRemovalDate 2025-01-01
     */
    days?: Days;
    /** Amount of days before first delivery option date */
    handlingDays?: number | null;
    /** Cut off time after which first delivery option would be for next day */
    cutOffTime?: TimePoint;
    /** availability times configuration. */
    timeWindows?: TimeWindow[];
}
interface Days {
    monday?: DaySlot;
    tuesday?: DaySlot;
    wednesday?: DaySlot;
    thursday?: DaySlot;
    friday?: DaySlot;
    saturday?: DaySlot;
    sunday?: DaySlot;
}
interface DaySlot {
    /** Shows whether this day slot is enabled for delivery */
    enabledForDelivery?: boolean | null;
    /** Time slots for scheduled delivery during day */
    timeSlots?: TimeSlot[];
}
interface TimeSlot {
    /** Starting time point of time slot */
    from?: TimePoint;
    /** End time point of time slot */
    to?: TimePoint;
}
interface TimePoint {
    /** Hours in format 0-23 */
    hours?: number | null;
    /** Minutes 0-59 */
    minutes?: number | null;
}
interface TimeWindow {
    /** The day of week this availability relates to. */
    day?: DayOfWeek;
    /** The start time in time of day representation. */
    start?: TimeOfDay;
    /** The end time in time of day representation. */
    end?: TimeOfDay;
}
declare enum DayOfWeek {
    /** Monday. */
    MON = "MON",
    /** Tuesday. */
    TUE = "TUE",
    /** Wednesday. */
    WED = "WED",
    /** Thursday. */
    THU = "THU",
    /** Friday. */
    FRI = "FRI",
    /** Saturday. */
    SAT = "SAT",
    /** Sunday. */
    SUN = "SUN"
}
interface TimeOfDay {
    /** Hours */
    hours?: number;
    /** Minutes */
    minutes?: number;
}
interface ConditionalRates$4 {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition$4[];
    amount?: string;
}
interface Condition$4 {
    type?: ConditionType$4;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator$4;
}
declare enum ConditionType$4 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
declare enum LogicalOperator$4 {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
interface CreateLocalDeliveryOptionRequest {
    localDeliveryOption: LocalDeliveryOption;
}
interface CreateLocalDeliveryOptionResponse {
    localDeliveryOption?: LocalDeliveryOption;
}
interface GetLocalDeliveryOptionRequest {
    /**
     * @deprecated
     * @targetRemovalDate 2025-01-12
     */
    _id?: string;
    localDeliveryOptionId: string;
}
interface GetLocalDeliveryOptionResponse {
    localDeliveryOption?: LocalDeliveryOption;
}
interface ListLocalDeliveryOptionsRequest {
    externalId: string;
}
interface ListLocalDeliveryOptionsResponse {
    localDeliveryOptions?: LocalDeliveryOption[];
}
interface QueryLocalDeliveryOptionsRequest {
    /** WQL expression */
    query: QueryV2$4;
}
interface QueryV2$4 extends QueryV2PagingMethodOneOf$4 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$4;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$e;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$e[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf$4 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$4;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$e;
}
interface Sorting$e {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$e;
}
declare enum SortOrder$e {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging$4 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$e {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryLocalDeliveryOptionsResponse {
    /** Retrieved local delivery options. */
    localDeliveryOptions?: LocalDeliveryOption[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$c;
}
interface CursorPagingMetadata$c {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$e;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$e {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateLocalDeliveryOptionRequest {
    localDeliveryOption: LocalDeliveryOption;
}
interface UpdateLocalDeliveryOptionResponse {
    localDeliveryOption?: LocalDeliveryOption;
}
interface DeleteLocalDeliveryOptionRequest {
    /**
     * @deprecated
     * @targetRemovalDate 2025-01-12
     */
    _id?: string;
    localDeliveryOptionId: string;
}
interface DeleteLocalDeliveryOptionResponse {
}
interface BulkCreateLocalDeliveryOptionRequest {
    localDeliveryOptions: LocalDeliveryOption[];
}
interface BulkCreateLocalDeliveryOptionResponse {
    localDeliveryOptions?: LocalDeliveryOption[];
    errors?: LocalDeliveryOptionError[];
}
interface LocalDeliveryOptionError {
    _id?: string;
    error?: string;
}
interface BulkUpdateLocalDeliveryOptionRequest {
    localDeliveryOptions: LocalDeliveryOption[];
}
interface BulkUpdateLocalDeliveryOptionResponse {
    localDeliveryOptions?: LocalDeliveryOption[];
    errors?: LocalDeliveryOptionError[];
}
interface BulkDeleteLocalDeliveryOptionRequest {
    ids: string[];
}
interface BulkDeleteLocalDeliveryOptionResponse {
}
interface AddDeliveryRegionRequest$2 {
    deliveryRegionId: string;
    localDeliveryOptionId: string;
    /** Revision of the PickupLocation */
    revision?: string | null;
}
interface AddDeliveryRegionResponse$2 {
    localDeliveryOption?: LocalDeliveryOption;
}
interface RemoveDeliveryRegionRequest$2 {
    deliveryRegionId: string;
    localDeliveryOptionId: string;
    /** Revision of the PickupLocation */
    revision?: string | null;
}
interface RemoveDeliveryRegionResponse$2 {
    localDeliveryOption?: LocalDeliveryOption;
}
interface ZipCodeConfigNonNullableFields {
    zipCodes: string[];
}
interface RadiusConfigNonNullableFields {
    radius: number;
    lengthUnit: LengthUnit;
}
interface DestinationNonNullableFields {
    code: string;
    subdivisions: string[];
}
interface TimeOfDayNonNullableFields {
    hours: number;
    minutes: number;
}
interface TimeWindowNonNullableFields {
    day: DayOfWeek;
    start?: TimeOfDayNonNullableFields;
    end?: TimeOfDayNonNullableFields;
}
interface ScheduledDeliveryNonNullableFields {
    timeWindows: TimeWindowNonNullableFields[];
}
interface ConditionNonNullableFields$4 {
    type: ConditionType$4;
    value: string;
    operator: LogicalOperator$4;
}
interface ConditionalRatesNonNullableFields$4 {
    conditions: ConditionNonNullableFields$4[];
    amount: string;
}
interface LocalDeliveryOptionNonNullableFields {
    zipConfig?: ZipCodeConfigNonNullableFields;
    radiusConfig?: RadiusConfigNonNullableFields;
    destinations: DestinationNonNullableFields[];
    scheduledDeliveryConfig?: ScheduledDeliveryNonNullableFields;
    rates: ConditionalRatesNonNullableFields$4[];
    deliveryRegionIds: string[];
}
interface CreateLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface GetLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface ListLocalDeliveryOptionsResponseNonNullableFields {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields[];
}
interface QueryLocalDeliveryOptionsResponseNonNullableFields {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields[];
}
interface UpdateLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface LocalDeliveryOptionErrorNonNullableFields {
    _id: string;
    error: string;
}
interface BulkCreateLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields[];
    errors: LocalDeliveryOptionErrorNonNullableFields[];
}
interface BulkUpdateLocalDeliveryOptionResponseNonNullableFields {
    localDeliveryOptions: LocalDeliveryOptionNonNullableFields[];
    errors: LocalDeliveryOptionErrorNonNullableFields[];
}
interface AddDeliveryRegionResponseNonNullableFields$2 {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}
interface RemoveDeliveryRegionResponseNonNullableFields$2 {
    localDeliveryOption?: LocalDeliveryOptionNonNullableFields;
}

type __PublicMethodMetaInfo$d<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createLocalDeliveryOption(): __PublicMethodMetaInfo$d<'POST', {}, CreateLocalDeliveryOptionRequest, CreateLocalDeliveryOptionRequest$1, CreateLocalDeliveryOptionResponse & CreateLocalDeliveryOptionResponseNonNullableFields, CreateLocalDeliveryOptionResponse$1 & CreateLocalDeliveryOptionResponseNonNullableFields$1>;
declare function getLocalDeliveryOption(): __PublicMethodMetaInfo$d<'GET', {
    localDeliveryOptionId: string;
}, GetLocalDeliveryOptionRequest, GetLocalDeliveryOptionRequest$1, GetLocalDeliveryOptionResponse & GetLocalDeliveryOptionResponseNonNullableFields, GetLocalDeliveryOptionResponse$1 & GetLocalDeliveryOptionResponseNonNullableFields$1>;
declare function listLocalDeliveryOptions(): __PublicMethodMetaInfo$d<'GET', {}, ListLocalDeliveryOptionsRequest, ListLocalDeliveryOptionsRequest$1, ListLocalDeliveryOptionsResponse & ListLocalDeliveryOptionsResponseNonNullableFields, ListLocalDeliveryOptionsResponse$1 & ListLocalDeliveryOptionsResponseNonNullableFields$1>;
declare function queryLocalDeliveryOptions(): __PublicMethodMetaInfo$d<'POST', {}, QueryLocalDeliveryOptionsRequest, QueryLocalDeliveryOptionsRequest$1, QueryLocalDeliveryOptionsResponse & QueryLocalDeliveryOptionsResponseNonNullableFields, QueryLocalDeliveryOptionsResponse$1 & QueryLocalDeliveryOptionsResponseNonNullableFields$1>;
declare function updateLocalDeliveryOption(): __PublicMethodMetaInfo$d<'PATCH', {
    localDeliveryOptionId: string;
}, UpdateLocalDeliveryOptionRequest, UpdateLocalDeliveryOptionRequest$1, UpdateLocalDeliveryOptionResponse & UpdateLocalDeliveryOptionResponseNonNullableFields, UpdateLocalDeliveryOptionResponse$1 & UpdateLocalDeliveryOptionResponseNonNullableFields$1>;
declare function deleteLocalDeliveryOption(): __PublicMethodMetaInfo$d<'DELETE', {
    localDeliveryOptionId: string;
}, DeleteLocalDeliveryOptionRequest, DeleteLocalDeliveryOptionRequest$1, DeleteLocalDeliveryOptionResponse, DeleteLocalDeliveryOptionResponse$1>;
declare function bulkCreateLocalDeliveryOption(): __PublicMethodMetaInfo$d<'POST', {}, BulkCreateLocalDeliveryOptionRequest, BulkCreateLocalDeliveryOptionRequest$1, BulkCreateLocalDeliveryOptionResponse & BulkCreateLocalDeliveryOptionResponseNonNullableFields, BulkCreateLocalDeliveryOptionResponse$1 & BulkCreateLocalDeliveryOptionResponseNonNullableFields$1>;
declare function bulkUpdateLocalDeliveryOption(): __PublicMethodMetaInfo$d<'PATCH', {}, BulkUpdateLocalDeliveryOptionRequest, BulkUpdateLocalDeliveryOptionRequest$1, BulkUpdateLocalDeliveryOptionResponse & BulkUpdateLocalDeliveryOptionResponseNonNullableFields, BulkUpdateLocalDeliveryOptionResponse$1 & BulkUpdateLocalDeliveryOptionResponseNonNullableFields$1>;
declare function bulkDeleteLocalDeliveryOption(): __PublicMethodMetaInfo$d<'DELETE', {}, BulkDeleteLocalDeliveryOptionRequest, BulkDeleteLocalDeliveryOptionRequest$1, BulkDeleteLocalDeliveryOptionResponse, BulkDeleteLocalDeliveryOptionResponse$1>;
declare function addDeliveryRegion$1(): __PublicMethodMetaInfo$d<'POST', {}, AddDeliveryRegionRequest$2, AddDeliveryRegionRequest$3, AddDeliveryRegionResponse$2 & AddDeliveryRegionResponseNonNullableFields$2, AddDeliveryRegionResponse$3 & AddDeliveryRegionResponseNonNullableFields$3>;
declare function removeDeliveryRegion$1(): __PublicMethodMetaInfo$d<'POST', {}, RemoveDeliveryRegionRequest$2, RemoveDeliveryRegionRequest$3, RemoveDeliveryRegionResponse$2 & RemoveDeliveryRegionResponseNonNullableFields$2, RemoveDeliveryRegionResponse$3 & RemoveDeliveryRegionResponseNonNullableFields$3>;

declare const meta$d_bulkCreateLocalDeliveryOption: typeof bulkCreateLocalDeliveryOption;
declare const meta$d_bulkDeleteLocalDeliveryOption: typeof bulkDeleteLocalDeliveryOption;
declare const meta$d_bulkUpdateLocalDeliveryOption: typeof bulkUpdateLocalDeliveryOption;
declare const meta$d_createLocalDeliveryOption: typeof createLocalDeliveryOption;
declare const meta$d_deleteLocalDeliveryOption: typeof deleteLocalDeliveryOption;
declare const meta$d_getLocalDeliveryOption: typeof getLocalDeliveryOption;
declare const meta$d_listLocalDeliveryOptions: typeof listLocalDeliveryOptions;
declare const meta$d_queryLocalDeliveryOptions: typeof queryLocalDeliveryOptions;
declare const meta$d_updateLocalDeliveryOption: typeof updateLocalDeliveryOption;
declare namespace meta$d {
  export { type __PublicMethodMetaInfo$d as __PublicMethodMetaInfo, addDeliveryRegion$1 as addDeliveryRegion, meta$d_bulkCreateLocalDeliveryOption as bulkCreateLocalDeliveryOption, meta$d_bulkDeleteLocalDeliveryOption as bulkDeleteLocalDeliveryOption, meta$d_bulkUpdateLocalDeliveryOption as bulkUpdateLocalDeliveryOption, meta$d_createLocalDeliveryOption as createLocalDeliveryOption, meta$d_deleteLocalDeliveryOption as deleteLocalDeliveryOption, meta$d_getLocalDeliveryOption as getLocalDeliveryOption, meta$d_listLocalDeliveryOptions as listLocalDeliveryOptions, meta$d_queryLocalDeliveryOptions as queryLocalDeliveryOptions, removeDeliveryRegion$1 as removeDeliveryRegion, meta$d_updateLocalDeliveryOption as updateLocalDeliveryOption };
}

interface Order$1 {
    /**
     * Order ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Order number displayed in the site owner's dashboard (auto-generated).
     * @readonly
     */
    number?: string;
    /**
     * Date and time the order was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Order line items.
     * @readonly
     */
    lineItems?: OrderLineItem$1[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo$1;
    /**
     * Order payment status.
     * + `NOT_PAID` - This can be an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.
     * + This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.
     * + `PAID` - All payments associated with this order are paid. For online payments: [`payment.regularPaymentDetails.status: APPROVED`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object). For gift cards: [`payment.giftCardPaymentDetails.voided: false`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object).
     * + `PARTIALLY_REFUNDED` - Order was refunded, but refund amount is less than order total price.
     * + `FULLY_REFUNDED` - Order fully refunded. Refund amount equals total price.
     * + `PENDING` - Payments received but not yet confirmed by the payment provider.
     * + `PARTIALLY_PAID` -  At least one payment was received and approved, covering less than total price amount.
     */
    paymentStatus?: PaymentStatus$1;
    /**
     * Order fulfillment status.
     * @readonly
     */
    fulfillmentStatus?: FulfillmentStatus$1;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$5;
    /** Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format. */
    currency?: string | null;
    /** Whether tax is included in line item prices. */
    taxIncludedInPrices?: boolean;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary$3;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact$1;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: V1ShippingInformation$1;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /**
     * Order status.
     * + `INITIALIZED`: Order created, but not yet approved or canceled.
     * + `APPROVED`: Order approved. This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order). Offline orders (cash payment) are automatically approved.
     * + `CANCELED`: Order canceled by the user.
     */
    status?: OrderStatus$1;
    /** Whether order is archived. */
    archived?: boolean | null;
    /**
     * Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @deprecated Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary$3;
    /** Tax information. */
    taxInfo?: OrderTaxInfo$1;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$3[];
    /**
     * Order activities.
     * @readonly
     */
    activities?: Activity$1[];
    /** Order attribution source. */
    attributionSource?: AttributionSource$1;
    /**
     * ID of the order's initiator.
     * @readonly
     */
    createdBy?: CreatedBy$1;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo$1;
    /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */
    seenByAHuman?: boolean | null;
    /** Checkout ID. */
    checkoutId?: string | null;
    /** Custom fields. */
    customFields?: CustomField$1[];
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: BalanceSummary$1;
    /** Additional fees applied to the order. */
    additionalFees?: AdditionalFee$1[];
    /**
     * Custom field data for the order object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$9;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact$1;
    /**
     * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * Used for migration from external systems.
     */
    purchasedDate?: Date | null;
}
interface OrderLineItem$1 {
    /** Line item ID. */
    id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName$1;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference$7;
    /** Line item quantity. */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price$7;
    /** Line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine$1[];
    /** Line item image. */
    image?: Image$1;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties$5;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$3;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
     */
    fulfillerId?: string | null;
    /**
     * Number of items that were refunded.
     * @readonly
     */
    refundQuantity?: number | null;
    /**
     * Number of items restocked.
     * @readonly
     */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price$7;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price$7;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$7;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$7;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` - Partial payment for the given item to be paid upfront during the checkout. Eligible for catalog items with type `DEPOSIT_ONLINE` only.
     */
    paymentOption?: PaymentOptionType$3;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails$3;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo$1;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile$1;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo$1;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription$1;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price$7;
}
interface ProductName$1 {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$7 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface Price$7 {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface DescriptionLine$1 extends DescriptionLineValueOneOf$1, DescriptionLineDescriptionLineValueOneOf$1 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$1;
    /** Description line color value. */
    colorInfo?: Color$1;
    /** Description line name. */
    name?: DescriptionLineName$1;
}
/** @oneof */
interface DescriptionLineValueOneOf$1 {
    /** Description line plain text value. */
    plainText?: PlainTextValue$1;
    /** Description line color value. */
    colorInfo?: Color$1;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf$1 {
}
interface DescriptionLineName$1 {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue$1 {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color$1 {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType$1 {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface Image$1 {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface PhysicalProperties$5 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$3 extends ItemTypeItemTypeDataOneOf$3 {
    /** Preset item type. */
    preset?: ItemTypeItemType$3;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$3 {
    /** Preset item type. */
    preset?: ItemTypeItemType$3;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$3 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$3 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ItemTaxFullDetails$3 {
    /** Taxable amount of this line item. */
    taxableAmount?: Price$7;
    /** Tax rate percentage, as a decimal numeral between 0 and 1. For example, `"0.13"`. */
    taxRate?: string;
    /** The calculated tax, based on the `taxableAmount` and `taxRate`. */
    totalTax?: Price$7;
}
interface LineItemTaxInfo$1 {
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    taxAmount?: Price$7;
    /** Amount for which tax is calculated. */
    taxableAmount?: Price$7;
    /** Tax rate %, as a decimal point. */
    taxRate?: string | null;
    /**
     * Tax group ID.
     * Learn more about [Tax Groups](https://dev.wix.com/docs/rest/business-management/payments/tax/tax-groups/introduction).
     */
    taxGroupId?: string | null;
    /** Indicates whether the price already includes tax. */
    taxIncludedInPrice?: boolean;
    /** Tax information for a line item. */
    taxBreakdown?: LineItemTaxBreakdown$1[];
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface LineItemTaxBreakdown$1 {
    /** Jurisdiction that taxes were calculated for. For example, "New York", or "Quebec". */
    jurisdiction?: string | null;
    /** Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000. */
    rate?: string | null;
    /** Amount of tax calculated for this line item. */
    taxAmount?: Price$7;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** Type of jurisdiction that taxes were calculated for. */
    jurisdictionType?: JurisdictionType$3;
    /** Non-taxable amount of the line item price. */
    nonTaxableAmount?: Price$7;
    /** Taxable amount of the line item price. */
    taxableAmount?: Price$7;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$3 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DigitalFile$1 {
    /** ID of the secure file in media. */
    fileId?: string;
    /** Link will exist after the digital links have been generated on the order. */
    link?: string | null;
    /**
     * Link expiration time and date.
     * @readonly
     */
    expirationDate?: Date | null;
}
interface SubscriptionInfo$1 {
    /** Subscription ID. */
    id?: string | null;
    /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */
    cycleNumber?: number;
    /** Subscription option title. For example, `"Monthly coffee Subscription"`. */
    subscriptionOptionTitle?: string;
    /** Subscription option description. For example, `"1kg of selected coffee, once a month"`. */
    subscriptionOptionDescription?: string | null;
    /** Subscription detailed information. */
    subscriptionSettings?: SubscriptionSettings$3;
}
interface SubscriptionSettings$3 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$3;
    /** Interval of recurring payment. */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$3 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface PriceDescription$1 {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
declare enum TaxableAddressType$3 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Buyer Info */
interface BuyerInfo$1 extends BuyerInfoIdOneOf$1 {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
    /** Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction). */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf$1 {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
}
declare enum PaymentStatus$1 {
    UNSPECIFIED = "UNSPECIFIED",
    /** Order is not paid */
    NOT_PAID = "NOT_PAID",
    /** Order is paid */
    PAID = "PAID",
    /** Order was refunded, refund amount less than order total price */
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    /** Full order total price was refunded */
    FULLY_REFUNDED = "FULLY_REFUNDED",
    /** Payments received but not yet confirmed by the payment provider */
    PENDING = "PENDING",
    /** At least one payment was received and approved, covering less than total price amount */
    PARTIALLY_PAID = "PARTIALLY_PAID"
}
declare enum FulfillmentStatus$1 {
    /** none of the order items are fulfilled or order was manually marked as unfulfilled */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled or order was manually marked as fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FULFILLED = "FULFILLED",
    /** Some, but not all of the order items are fulfilled */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
declare enum WeightUnit$5 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface PriceSummary$3 {
    /** Subtotal of all the line items, before discounts and before tax. */
    subtotal?: Price$7;
    /** Total shipping price, before discounts and before tax. */
    shipping?: Price$7;
    /** Total tax on this order. */
    tax?: Price$7;
    /** Total calculated discount value. */
    discount?: Price$7;
    /** Order’s total price after discounts and tax. */
    total?: Price$7;
    /** Total price of additional fees before tax. */
    totalAdditionalFees?: Price$7;
}
/** Billing Info and shipping details */
interface AddressWithContact$1 {
    /** Address. */
    address?: Address$9;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$3;
}
/** Physical address */
interface Address$9 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$9;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress$9 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$3 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$3;
}
interface VatId$3 {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$3;
}
/** tax info types */
declare enum VatType$3 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface V1ShippingInformation$1 {
    /** App Def Id of external provider which was a source of shipping info */
    carrierId?: string | null;
    /** Unique code (or ID) of selected shipping option. For example, `"usps_std_overnight"``. */
    code?: string | null;
    /**
     * Shipping option title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"` or `"First-Class Package International"`.
     */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics$5;
    /** Shipping costs. */
    cost?: ShippingPrice$3;
    /** Shipping region. */
    region?: ShippingRegion$3;
}
interface DeliveryLogistics$5 extends DeliveryLogisticsAddressOneOf$1 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$1;
    /** Pickup details. */
    pickupDetails?: PickupDetails$5;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /**
     * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Expected delivery time. */
    deliveryTimeSlot?: DeliveryTimeSlot$3;
}
/** @oneof */
interface DeliveryLogisticsAddressOneOf$1 {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact$1;
    /** Pickup details. */
    pickupDetails?: PickupDetails$5;
}
interface PickupDetails$5 {
    /** Pickup address. */
    address?: PickupAddress$1;
    /** Pickup method */
    pickupMethod?: PickupMethod$5;
}
/** Physical address */
interface PickupAddress$1 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address object, with number, name, and apartment number in separate fields. */
    streetAddress?: StreetAddress$9;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
declare enum PickupMethod$5 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$3 {
    /** Delivery slot starting time. */
    from?: Date | null;
    /** Delivery slot ending time. */
    to?: Date | null;
}
interface ShippingPrice$3 {
    /** Shipping price for display purposes. */
    price?: Price$7;
    /**
     * Total price of shipping after discounts (when relevant), and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$7;
    /**
     * Shipping price after all discounts (if any exist), and after tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$7;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$3;
    /**
     * Shipping discount before tax.
     * @readonly
     */
    discount?: Price$7;
}
interface ShippingRegion$3 {
    /** Name of shipping region. For example, `"Metropolitan London"`, or `"Outer Melbourne suburbs"`. */
    name?: string | null;
}
declare enum OrderStatus$1 {
    INITIALIZED = "INITIALIZED",
    APPROVED = "APPROVED",
    CANCELED = "CANCELED"
}
interface TaxSummary$3 {
    /**
     * Total tax.
     * @readonly
     */
    totalTax?: Price$7;
}
interface OrderTaxInfo$1 {
    /** Calculated tax, added from line items. */
    totalTax?: Price$7;
    /** The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate. */
    taxBreakdown?: OrderTaxBreakdown$1[];
    /**
     * Whether the draft order is exempt from tax calculations.
     *
     * Default: `false`
     * @readonly
     */
    taxExempt?: boolean | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface OrderTaxBreakdown$1 {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionType?: JurisdictionType$3;
    /** The rate at which this tax detail was calculated. */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: Price$7;
}
interface AppliedDiscount$3 extends AppliedDiscountDiscountSourceOneOf$3 {
    /** Applied coupon info. */
    coupon?: Coupon$3;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$3;
    /** Automatic Discount */
    discountRule?: DiscountRule$3;
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to specific items.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: DiscountType$3;
    /**
     * IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @deprecated IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemIds?: string[];
    /** Discount id. */
    id?: string | null;
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$3 {
    /** Applied coupon info. */
    coupon?: Coupon$3;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$3;
    /** Automatic Discount */
    discountRule?: DiscountRule$3;
}
declare enum DiscountType$3 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$3 {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** Coupon value. */
    amount?: Price$7;
}
interface MerchantDiscount$3 extends MerchantDiscountMerchantDiscountReasonOneOf$1 {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason$1;
    /** Discount description as free text (optional). */
    description?: string | null;
    /** Discount amount. */
    amount?: Price$7;
}
/** @oneof */
interface MerchantDiscountMerchantDiscountReasonOneOf$1 {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason$1;
    /** Discount description as free text (optional). */
    description?: string | null;
}
declare enum DiscountReason$1 {
    UNSPECIFIED = "UNSPECIFIED",
    EXCHANGED_ITEMS = "EXCHANGED_ITEMS"
}
interface DiscountRule$3 {
    /** Discount rule ID */
    id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$3;
    /** Discount value. */
    amount?: Price$7;
}
interface DiscountRuleName$3 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface Activity$1 extends ActivityContentOneOf$1 {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity$1;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment$1;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded$1;
    /**
     * Activity ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Activity author's email.
     * @readonly
     */
    authorEmail?: string | null;
    /**
     * Activity creation date and time.
     * @readonly
     */
    createdDate?: Date | null;
    /** Activity type. */
    type?: ActivityType$1;
}
/** @oneof */
interface ActivityContentOneOf$1 {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity$1;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment$1;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded$1;
}
interface CustomActivity$1 {
    /** ID of the app that created the custom activity. */
    appId?: string;
    /** Custom activity type. For example, `"Ticket number set"`. */
    type?: string;
    /** Additional data in key-value form. For example, `{ "Ticket number": "123456" }`. */
    additionalData?: Record<string, string>;
}
/** Store owner added a comment */
interface MerchantComment$1 {
    /** Merchant comment message. */
    message?: string;
}
interface OrderRefunded$1 {
    /** Whether order was refunded manually. For example, via payment provider or using cash. */
    manual?: boolean;
    /** Refund amount. */
    amount?: Price$7;
    /** Reason for refund. */
    reason?: string;
}
declare enum LineItemQuantityChangeType$1 {
    QUANTITY_INCREASED = "QUANTITY_INCREASED",
    QUANTITY_DECREASED = "QUANTITY_DECREASED"
}
declare enum ActivityType$1 {
    ORDER_REFUNDED = "ORDER_REFUNDED",
    ORDER_PLACED = "ORDER_PLACED",
    ORDER_PAID = "ORDER_PAID",
    ORDER_FULFILLED = "ORDER_FULFILLED",
    ORDER_NOT_FULFILLED = "ORDER_NOT_FULFILLED",
    ORDER_CANCELED = "ORDER_CANCELED",
    DOWNLOAD_LINK_SENT = "DOWNLOAD_LINK_SENT",
    TRACKING_NUMBER_ADDED = "TRACKING_NUMBER_ADDED",
    TRACKING_NUMBER_EDITED = "TRACKING_NUMBER_EDITED",
    TRACKING_LINK_ADDED = "TRACKING_LINK_ADDED",
    SHIPPING_CONFIRMATION_EMAIL_SENT = "SHIPPING_CONFIRMATION_EMAIL_SENT",
    INVOICE_ADDED = "INVOICE_ADDED",
    INVOICE_REMOVED = "INVOICE_REMOVED",
    INVOICE_SENT = "INVOICE_SENT",
    FULFILLER_EMAIL_SENT = "FULFILLER_EMAIL_SENT",
    SHIPPING_ADDRESS_EDITED = "SHIPPING_ADDRESS_EDITED",
    EMAIL_EDITED = "EMAIL_EDITED",
    PICKUP_READY_EMAIL_SENT = "PICKUP_READY_EMAIL_SENT",
    CUSTOM_ACTIVITY = "CUSTOM_ACTIVITY",
    MERCHANT_COMMENT = "MERCHANT_COMMENT",
    ORDER_CREATED_FROM_EXCHANGE = "ORDER_CREATED_FROM_EXCHANGE",
    NEW_EXCHANGE_ORDER_CREATED = "NEW_EXCHANGE_ORDER_CREATED",
    ORDER_PARTIALLY_PAID = "ORDER_PARTIALLY_PAID",
    DRAFT_ORDER_CHANGES_APPLIED = "DRAFT_ORDER_CHANGES_APPLIED",
    SAVED_PAYMENT_METHOD = "SAVED_PAYMENT_METHOD"
}
declare enum AttributionSource$1 {
    UNSPECIFIED = "UNSPECIFIED",
    FACEBOOK_ADS = "FACEBOOK_ADS"
}
interface CreatedBy$1 extends CreatedByStringOneOf$1 {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
/** @oneof */
interface CreatedByStringOneOf$1 {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
interface ChannelInfo$1 {
    /** Sales channel that submitted the order. */
    type?: ChannelType$1;
    /** Reference to an order ID from an external system. */
    externalOrderId?: string | null;
    /** URL to the order in the external system. */
    externalOrderUrl?: string | null;
}
declare enum ChannelType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CustomField$1 {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
interface BalanceSummary$1 {
    /**
     * Current amount left to pay.
     * @readonly
     */
    balance?: Balance$1;
    /**
     * Sum of all approved and successful payments.
     *
     * The value includes payments that have subsequently been fully or partially refunded.
     * @readonly
     */
    paid?: Price$7;
    /**
     * Sum of all successfully refunded payments.
     * @readonly
     */
    refunded?: Price$7;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price$7;
}
/**
 * Order balance. Reflects amount left to be paid on order and is calculated dynamically. Can be negative per balance definition.
 * `amount` field depends on order payment status:
 * + UNSPECIFIED, NOT_PAID: price_summary.total_price
 * + PARTIALLY_PAID : price_summary.total_price - pay_now.total_price
 * + PENDING, REFUNDED, PARTIALLY_REFUNDED, PAID : 0
 */
interface Balance$1 {
    /**
     * Balance amount.
     *
     * A negative `amount` represents the amount to be refunded. This can happen due to overcharging or the order being modified after a payment has been made.
     * @readonly
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface AdditionalFee$1 {
    /** Additional fee's unique code for future processing. */
    code?: string | null;
    /** Name of additional fee. */
    name?: string;
    /** Additional fee's price. */
    price?: Price$7;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$3;
    /** SPI implementer's `appId`. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: Price$7;
    /** Additional fee's price after tax. */
    priceAfterTax?: Price$7;
    /** Additional fee's id. */
    id?: string;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface ExtendedFields$9 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
/**
 * Common object for tags.
 * Should be use as in this example:
 * message Foo {
 * string id = 1;
 * ...
 * Tags tags = 5
 * }
 *
 * example of taggable entity
 * {
 * id: "123"
 * tags: {
 * tags: {
 * tag_ids:["11","22"]
 * },
 * private_tags: {
 * tag_ids: ["33", "44"]
 * }
 * }
 * }
 */
interface Tags$1 {
    /** Tags that require an additional permission in order to access them, normally not given to site members or visitors. */
    privateTags?: TagList$1;
    /** Tags that are exposed to anyone who has access to the labeled entity itself, including site members and visitors. */
    tags?: TagList$1;
}
interface TagList$1 {
    /** List of tag IDs */
    tagIds?: string[];
}
interface Sorting$d {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$d;
}
declare enum SortOrder$d {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$d {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface Cursors$d {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface OrderTransactions$3 {
    /** Order ID. */
    orderId?: string;
    /** Record of payments made to the merchant. */
    payments?: Payment$3[];
    /** Record of refunds made to the buyer. */
    refunds?: Refund$3[];
}
interface Payment$3 extends PaymentPaymentDetailsOneOf$3 {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails$3;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails$3;
    /**
     * Payment ID.
     * @readonly
     */
    id?: string | null;
    /** Date and time the payment was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    createdDate?: Date | null;
    /**
     * Date and time the payment was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Payment amount. */
    amount?: Price$7;
    /**
     * Whether refunds for this payment are disabled.
     * + `true`: This payment is not refundable.
     * + `false`: This payment may be refunded. However, this ultimately depends on the payment provider.
     */
    refundDisabled?: boolean;
}
/** @oneof */
interface PaymentPaymentDetailsOneOf$3 {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails$3;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails$3;
}
interface RegularPaymentDetails$3 extends RegularPaymentDetailsPaymentMethodDetailsOneOf$3 {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails$3;
    /** Wix Payments order ID. */
    paymentOrderId?: string | null;
    /**
     * Payment gateway's transaction ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `offline_payment` is `false`.
     */
    gatewayTransactionId?: string | null;
    /**
     * Payment method. Non-exhaustive list of supported values:
     * + `CreditCard`, `Alipay`, `AstropayCash`, `AstropayDBT`, `AstropayMBT`, `Bitcoin`, `BitPay`, `Cash`, `ConvenienceStore`, `EPay`, `Fake`, `Giropay`, `IDeal`, `InPerson`, `Klarna`, `MercadoPago`, `Netpay`, `NordeaSolo`, `Offline`, `PagSeguro`, `PayEasy`, `PayPal`, `Paysafecard`, `Paysafecash`, `PointOfSale`, `Poli`, `Privat24`, `Przelewy24`, `RapidTransfer`, `Sepa`, `Skrill`, `Sofort`, `Trustly`, `Neteller`, `Unionpay`, `UniPay`, `Yandex`
     */
    paymentMethod?: string | null;
    /** Transaction ID in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for offline payments. */
    providerTransactionId?: string | null;
    /** Whether the payment was made offline. For example, when using cash or when marked as paid in the Business Manager. */
    offlinePayment?: boolean;
    /** Payment status. */
    status?: TransactionStatus$3;
    /** Whether there is a payment agreement that allows for future charges. */
    savedPaymentMethod?: boolean;
    /** Authorization details. */
    authorizationDetails?: AuthorizationDetails$3;
}
/** @oneof */
interface RegularPaymentDetailsPaymentMethodDetailsOneOf$3 {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails$3;
}
declare enum TransactionStatus$3 {
    UNDEFINED = "UNDEFINED",
    APPROVED = "APPROVED",
    PENDING = "PENDING",
    PENDING_MERCHANT = "PENDING_MERCHANT",
    CANCELED = "CANCELED",
    DECLINED = "DECLINED",
    REFUNDED = "REFUNDED",
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    AUTHORIZED = "AUTHORIZED",
    VOIDED = "VOIDED"
}
interface CreditCardPaymentMethodDetails$3 {
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface AuthorizationDetails$3 {
    /**
     * Whether the authorized payment is of a delayed capture.
     * @readonly
     */
    delayedCapture?: boolean;
    /** Date and time the payment was authorized in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    authorizedDate?: Date | null;
    /**
     * List of captures associated with payment
     * In case of failed it can be replaced with new one with PENDING or SUCCESS statuses
     */
    captures?: AuthorizationCapture$3[];
    /** Void associated with payment */
    void?: AuthorizationVoid$3;
    /** Scheduled action for this transaction */
    scheduledAction?: V1ScheduledAction$1;
}
interface AuthorizationCapture$3 {
    /**
     * Capture ID.
     * @readonly
     */
    id?: string | null;
    /** Status of this capture action */
    status?: AuthorizationCaptureStatus$3;
    /** Amount of this capture */
    amount?: Price$7;
    /** Date and time the capture was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    createdDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails$3;
}
declare enum AuthorizationCaptureStatus$3 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Whether capture operation still in progress */
    PENDING = "PENDING",
    /** The capture operation was succeeded */
    SUCCEEDED = "SUCCEEDED",
    /** The capture operation was failed */
    FAILED = "FAILED"
}
interface AuthorizationActionFailureDetails$3 {
    failureCode?: string;
}
interface AuthorizationVoid$3 {
    /** Status of this void action */
    status?: AuthorizationVoidStatus$3;
    /** Date and time the void was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    voidedDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails$3;
    /** Reason of void action */
    reason?: Reason$3;
}
declare enum AuthorizationVoidStatus$3 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Whether void operation still in progress */
    PENDING = "PENDING",
    /** The void operation was succeeded */
    SUCCEEDED = "SUCCEEDED",
    /** The void operation was failed */
    FAILED = "FAILED"
}
/**
 * Reason the authorization was voided.
 *
 * + `MANUAL`: Authorization was voided by user.
 * + `SCHEDULED`: Authorization passed execution date.
 */
declare enum Reason$3 {
    UNKNOWN_REASON = "UNKNOWN_REASON",
    MANUAL = "MANUAL",
    SCHEDULED = "SCHEDULED"
}
interface V1ScheduledAction$1 {
    /** type of the action */
    actionType?: ActionType$3;
    /** the date and time of the action */
    executionDate?: Date | null;
}
declare enum ActionType$3 {
    UNKNOWN_ACTION_TYPE = "UNKNOWN_ACTION_TYPE",
    VOID = "VOID",
    CAPTURE = "CAPTURE"
}
interface GiftCardPaymentDetails$3 {
    /** Gift card payment ID. */
    giftCardPaymentId?: string;
    /** ID of the app that created the gift card. */
    appId?: string;
    /**
     * Whether the gift card is voided.
     * @readonly
     */
    voided?: boolean;
}
declare enum MembershipPaymentStatus$3 {
    /** CHARGED - Payment was charged */
    CHARGED = "CHARGED",
    /** CHARGE_FAILED - The attempt to charge that payment have failed, for example due to lack of credits */
    CHARGE_FAILED = "CHARGE_FAILED"
}
interface Refund$3 {
    /**
     * Refund ID.
     * @readonly
     */
    id?: string;
    /** List of transactions. */
    transactions?: RefundTransaction$3[];
    /** Refund business details. */
    details?: RefundDetails$3;
    /** Date and time the refund was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    createdDate?: Date | null;
}
interface RefundTransaction$3 {
    /** ID of the payment associated with this refund. */
    paymentId?: string;
    /** Refund amount. */
    amount?: Price$7;
    /** Refund status. */
    refundStatus?: RefundStatus$3;
    /**
     * Payment gateway's refund ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `external_refund` is `false`.
     */
    gatewayRefundId?: string | null;
    /** ID of the refund in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for external refunds. */
    providerRefundId?: string | null;
    /** Whether refund was made externally and manually on the payment provider's side. */
    externalRefund?: boolean;
}
/**
 * Refund transaction status.
 * + `PENDING`: Refund was initiated on payment provider side. PENDING status was assigned by provider.
 * + `SUCCEEDED`: Refund transaction succeeded.
 * + `FAILED`: Refund transaction failed.
 * + `SCHEDULED`: Refund request acknowledged, and will be executed soon.
 * + `STARTED`: Refund was initiated on payment provider side.
 */
declare enum RefundStatus$3 {
    PENDING = "PENDING",
    SUCCEEDED = "SUCCEEDED",
    FAILED = "FAILED",
    SCHEDULED = "SCHEDULED",
    STARTED = "STARTED"
}
/** Business model of a refund request */
interface RefundDetails$3 {
    /** Order line item IDs and quantities that were refunded. */
    items?: RefundItem$3[];
    /** Whether the shipping fee was also refunded. */
    shippingIncluded?: boolean;
    /** Reason for the refund, provided by customer (optional). */
    reason?: string | null;
}
interface RefundItem$3 {
    /** Line item ID the refunded line item. */
    lineItemId?: string;
    /** Line item quantity refunded. */
    quantity?: number;
}
interface PreparePaymentCollectionRequest$1 {
    /** Ecom order ID. */
    ecomOrderId: string;
    /** Amount to collect */
    amount: Price$7;
    /**
     * Optional parameter. When present, payment collection will be performed using given payment gateway order.
     * Existing payment gateway order will be updated with a new amount.
     * When parameter is absent, new payment gateway order will be created and used for payment collection.
     */
    paymentGatewayOrderId?: string | null;
    /**
     * Whether to delay capture of the payment.
     * Default: false
     * @deprecated Whether to delay capture of the payment.
     * Default: false
     * @replacedBy delayed_capture_settings.scheduled_action
     * @targetRemovalDate 2024-09-30
     */
    delayedCapture?: boolean;
    /** Delayed capture payment settings */
    delayedCaptureSettings?: DelayedCaptureSettings$1;
}
interface DelayedCaptureSettings$1 {
    /** Specifies the automatic action (void/capture) for authorized transaction after the specified duration */
    scheduledAction?: ScheduledAction$3;
    /** Delay duration before execution. Optional - if not set, providers default period will be used */
    delayDuration?: Duration$1;
}
declare enum ScheduledAction$3 {
    UNSPECIFIED = "UNSPECIFIED",
    /** Whether payment will be auto-voided when duration passes */
    VOID = "VOID",
    /** Whether payment will be auto-captured when duration passes */
    CAPTURE = "CAPTURE"
}
interface Duration$1 {
    /** Amount of units. For example, 30 MINUTES, 1 HOURS, 7 DAYS, etc */
    count?: number;
    /** Duration unit: MINUTES, HOURS and DAYS */
    unit?: DurationUnit$1;
}
declare enum DurationUnit$1 {
    UNKNOWN_DURATION_UNIT = "UNKNOWN_DURATION_UNIT",
    MINUTES = "MINUTES",
    HOURS = "HOURS",
    DAYS = "DAYS"
}
interface PreparePaymentCollectionResponse$1 {
    /** Payment gateway order id which is associated with given payment */
    paymentGatewayOrderId?: string;
}
interface GetPaymentCollectabilityStatusRequest$1 {
    /** Ecom order ID. */
    ecomOrderId: string;
}
interface GetPaymentCollectabilityStatusResponse$1 {
    /** Payment collectability status */
    status?: PaymentCollectabilityStatus$1;
    /** Collectable order amount */
    amount?: Price$7;
}
declare enum PaymentCollectabilityStatus$1 {
    UNKNOWN = "UNKNOWN",
    COLLECTABLE = "COLLECTABLE",
    NONCOLLECTABLE_ORDER_IS_CANCELLED = "NONCOLLECTABLE_ORDER_IS_CANCELLED",
    NONCOLLECTABLE_ORDER_IS_PAID = "NONCOLLECTABLE_ORDER_IS_PAID",
    NONCOLLECTABLE_MISSING_PAYMENT_METHOD = "NONCOLLECTABLE_MISSING_PAYMENT_METHOD"
}
interface BulkOrderResult$1 {
    /** Item metadata. */
    itemMetadata?: ItemMetadata$3;
    /**
     * Updated order.
     *
     * Returned when `returnFullEntity = true`.
     */
    item?: Order$1;
}
interface ItemMetadata$3 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$9;
}
interface ApplicationError$9 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$3 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface VoidAuthorizedPaymentsRequest$1 {
    /** Wix eCommerce order ID */
    ecomOrderId: string;
    /** Payment IDs */
    paymentIds: string[];
}
interface VoidAuthorizedPaymentsResponse$1 {
    /** All order's transactions after the void was triggered */
    orderTransactions?: OrderTransactions$3;
}
interface CaptureAuthorizedPaymentsRequest$1 {
    /** Wix eCommerce order ID */
    ecomOrderId: string;
    /** Capture payments information */
    payments: PaymentCapture$1[];
}
interface PaymentCapture$1 {
    /** Payment ID */
    paymentId?: string | null;
    /**
     * Capture amount.
     * If not provided - full authorized amount will be captured.
     */
    amount?: Price$7;
}
interface CaptureAuthorizedPaymentsResponse$1 {
    /** All order's transactions after the capture was triggered */
    orderTransactions?: OrderTransactions$3;
}
interface GetOrderRequest$1 {
    /** ID of the order to retrieve. */
    id: string;
}
interface GetOrderResponse$1 {
    /** The requested order. */
    order?: Order$1;
}
interface SearchOrdersRequest$1 {
    /** Search options. */
    search?: CursorSearch$1;
}
interface CursorSearch$1 extends CursorSearchPagingMethodOneOf$1 {
    /**
     * Cursor paging options.
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$d;
    /**
     * Filter object.
     *
     * For example, the following `filter` object will only return orders with payment statuses of paid and/or partially paid:
     *
     * `"filter": {"paymentStatus": {"$in": ["PAID", "PARTIALLY_PAID"]}}`
     *
     * Learn more about the [filter format](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Array of sort objects that specify the order in which results should be sorted.
     *
     * For example, the following `sort` array will sort by `createdDate` in descending order:
     *
     * `"sort": [{"fieldName": "createdDate", "order":"DESC"}]`.
     *
     * Learn more about the [sort format](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$d[];
}
/** @oneof */
interface CursorSearchPagingMethodOneOf$1 {
    /**
     * Cursor paging options.
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$d;
}
interface SearchOrdersResponse$1 {
    /** List of orders. */
    orders?: Order$1[];
    /** Details on the paged set of results returned. */
    metadata?: CursorPagingMetadata$b;
}
interface CursorPagingMetadata$b {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$d;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface CreateOrderRequest$1 {
    /** Order info. */
    order: Order$1;
}
interface CreateOrderResponse$1 {
    /** Newly created order. */
    order?: Order$1;
}
interface UpdateOrderRequest$1 {
    /** Order to be updated. */
    order: Order$1;
}
interface UpdateOrderResponse$1 {
    /** Newly created order. */
    order?: Order$1;
}
interface BulkUpdateOrdersRequest$1 {
    /** Orders to update. */
    orders: MaskedOrder$1[];
    /**
     * Whether to return the full order entities.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface MaskedOrder$1 {
    /** Order to be updated. */
    order?: Order$1;
}
interface BulkUpdateOrdersResponse$1 {
    /** Bulk action results. */
    results?: BulkOrderResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$3;
}
interface CancelOrderRequest$1 {
    /** Order ID. */
    id: string;
    /** Whether to send an order canceled email to the buyer. */
    sendOrderCanceledEmail?: boolean;
    /** Custom note to be added to the email (optional). */
    customMessage?: string | null;
    /** Whether to restock all items in the order. This will only apply to products in the Wix Stores inventory. */
    restockAllItems?: boolean;
}
interface CancelOrderResponse$1 {
    /** Canceled order. */
    order?: Order$1;
}
interface BulkUpdateOrderTagsRequest$1 {
    /** IDs of orders to update tags for. */
    orderIds: string[];
    /** Tags to be added to orders */
    assignTags?: Tags$1;
    /** Tags to be removed from orders */
    unassignTags?: Tags$1;
}
interface BulkUpdateOrderTagsResponse$1 {
    results?: BulkUpdateOrderTagsResult$1[];
    bulkActionMetadata?: BulkActionMetadata$3;
}
interface BulkUpdateOrderTagsResult$1 {
    itemMetadata?: ItemMetadata$3;
}
interface PreparePaymentCollectionResponseNonNullableFields$1 {
    paymentGatewayOrderId: string;
}
interface PriceNonNullableFields$7 {
    amount: string;
    formattedAmount: string;
}
interface GetPaymentCollectabilityStatusResponseNonNullableFields$1 {
    status: PaymentCollectabilityStatus$1;
    amount?: PriceNonNullableFields$7;
    authorizationSupported: boolean;
}
interface AuthorizationActionFailureDetailsNonNullableFields$3 {
    failureCode: string;
}
interface AuthorizationCaptureNonNullableFields$3 {
    status: AuthorizationCaptureStatus$3;
    amount?: PriceNonNullableFields$7;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields$3;
}
interface AuthorizationVoidNonNullableFields$3 {
    status: AuthorizationVoidStatus$3;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields$3;
    reason: Reason$3;
}
interface V1ScheduledActionNonNullableFields$1 {
    actionType: ActionType$3;
}
interface AuthorizationDetailsNonNullableFields$3 {
    delayedCapture: boolean;
    captures: AuthorizationCaptureNonNullableFields$3[];
    void?: AuthorizationVoidNonNullableFields$3;
    scheduledAction?: V1ScheduledActionNonNullableFields$1;
}
interface RegularPaymentDetailsNonNullableFields$3 {
    offlinePayment: boolean;
    status: TransactionStatus$3;
    savedPaymentMethod: boolean;
    authorizationDetails?: AuthorizationDetailsNonNullableFields$3;
}
interface GiftCardPaymentDetailsNonNullableFields$3 {
    giftCardPaymentId: string;
    giftCardId: string;
    appId: string;
    voided: boolean;
}
interface MembershipNameNonNullableFields$5 {
    original: string;
}
interface MembershipPaymentDetailsNonNullableFields$3 {
    membershipId: string;
    lineItemId: string;
    status: MembershipPaymentStatus$3;
    name?: MembershipNameNonNullableFields$5;
    voided: boolean;
    providerAppId: string;
}
interface PaymentNonNullableFields$3 {
    regularPaymentDetails?: RegularPaymentDetailsNonNullableFields$3;
    giftcardPaymentDetails?: GiftCardPaymentDetailsNonNullableFields$3;
    membershipPaymentDetails?: MembershipPaymentDetailsNonNullableFields$3;
    amount?: PriceNonNullableFields$7;
    refundDisabled: boolean;
}
interface RefundTransactionNonNullableFields$3 {
    paymentId: string;
    amount?: PriceNonNullableFields$7;
    refundStatus: RefundStatus$3;
    externalRefund: boolean;
}
interface RefundItemNonNullableFields$3 {
    lineItemId: string;
    quantity: number;
}
interface LineItemRefundNonNullableFields$3 {
    lineItemId: string;
    quantity: number;
}
interface AdditionalFeeRefundNonNullableFields$3 {
    additionalFeeId: string;
    amount?: PriceNonNullableFields$7;
}
interface ShippingRefundNonNullableFields$3 {
    amount?: PriceNonNullableFields$7;
}
interface RefundDetailsNonNullableFields$3 {
    items: RefundItemNonNullableFields$3[];
    shippingIncluded: boolean;
    lineItems: LineItemRefundNonNullableFields$3[];
    additionalFees: AdditionalFeeRefundNonNullableFields$3[];
    shipping?: ShippingRefundNonNullableFields$3;
}
interface AggregatedRefundSummaryNonNullableFields$3 {
    requestedRefund?: PriceNonNullableFields$7;
    pendingRefund?: PriceNonNullableFields$7;
    refunded?: PriceNonNullableFields$7;
    failedRefundAmount?: PriceNonNullableFields$7;
    pending: boolean;
}
interface RefundNonNullableFields$3 {
    id: string;
    transactions: RefundTransactionNonNullableFields$3[];
    details?: RefundDetailsNonNullableFields$3;
    summary?: AggregatedRefundSummaryNonNullableFields$3;
}
interface OrderTransactionsNonNullableFields$3 {
    orderId: string;
    payments: PaymentNonNullableFields$3[];
    refunds: RefundNonNullableFields$3[];
}
interface VoidAuthorizedPaymentsResponseNonNullableFields$1 {
    orderTransactions?: OrderTransactionsNonNullableFields$3;
}
interface CaptureAuthorizedPaymentsResponseNonNullableFields$1 {
    orderTransactions?: OrderTransactionsNonNullableFields$3;
}
interface ProductNameNonNullableFields$1 {
    original: string;
}
interface CatalogReferenceNonNullableFields$1 {
    catalogItemId: string;
    appId: string;
}
interface PlainTextValueNonNullableFields$1 {
    original: string;
}
interface ColorNonNullableFields$1 {
    original: string;
}
interface DescriptionLineNameNonNullableFields$1 {
    original: string;
}
interface DescriptionLineNonNullableFields$1 {
    plainText?: PlainTextValueNonNullableFields$1;
    colorInfo?: ColorNonNullableFields$1;
    plainTextValue?: PlainTextValueNonNullableFields$1;
    color: string;
    name?: DescriptionLineNameNonNullableFields$1;
    lineType: DescriptionLineType$1;
}
interface ImageNonNullableFields$1 {
    id: string;
    url: string;
    height: number;
    width: number;
}
interface PhysicalPropertiesNonNullableFields$1 {
    shippable: boolean;
}
interface ItemTypeNonNullableFields$1 {
    preset: ItemTypeItemType$3;
    custom: string;
}
interface ItemTaxFullDetailsNonNullableFields$3 {
    taxableAmount?: PriceNonNullableFields$7;
    taxRate: string;
    totalTax?: PriceNonNullableFields$7;
}
interface LineItemTaxBreakdownNonNullableFields$1 {
    taxAmount?: PriceNonNullableFields$7;
    jurisdictionType: JurisdictionType$3;
    nonTaxableAmount?: PriceNonNullableFields$7;
    taxableAmount?: PriceNonNullableFields$7;
}
interface LineItemTaxInfoNonNullableFields$1 {
    taxAmount?: PriceNonNullableFields$7;
    taxableAmount?: PriceNonNullableFields$7;
    taxIncludedInPrice: boolean;
    taxBreakdown: LineItemTaxBreakdownNonNullableFields$1[];
}
interface DigitalFileNonNullableFields$1 {
    fileId: string;
}
interface SubscriptionSettingsNonNullableFields$1 {
    frequency: SubscriptionFrequency$3;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
}
interface SubscriptionInfoNonNullableFields$1 {
    cycleNumber: number;
    subscriptionOptionTitle: string;
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$1;
}
interface PriceDescriptionNonNullableFields$1 {
    original: string;
}
interface LocationAndQuantityNonNullableFields$1 {
    id: string;
    quantity: number;
}
interface TaxableAddressNonNullableFields$3 {
    addressType: TaxableAddressType$3;
}
interface OrderLineItemNonNullableFields$1 {
    id: string;
    productName?: ProductNameNonNullableFields$1;
    catalogReference?: CatalogReferenceNonNullableFields$1;
    quantity: number;
    totalDiscount?: PriceNonNullableFields$7;
    descriptionLines: DescriptionLineNonNullableFields$1[];
    image?: ImageNonNullableFields$1;
    physicalProperties?: PhysicalPropertiesNonNullableFields$1;
    itemType?: ItemTypeNonNullableFields$1;
    price?: PriceNonNullableFields$7;
    priceBeforeDiscounts?: PriceNonNullableFields$7;
    totalPriceBeforeTax?: PriceNonNullableFields$7;
    totalPriceAfterTax?: PriceNonNullableFields$7;
    paymentOption: PaymentOptionType$3;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$3;
    taxInfo?: LineItemTaxInfoNonNullableFields$1;
    digitalFile?: DigitalFileNonNullableFields$1;
    subscriptionInfo?: SubscriptionInfoNonNullableFields$1;
    priceDescription?: PriceDescriptionNonNullableFields$1;
    depositAmount?: PriceNonNullableFields$7;
    locations: LocationAndQuantityNonNullableFields$1[];
    lineItemPrice?: PriceNonNullableFields$7;
    taxableAddress?: TaxableAddressNonNullableFields$3;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
}
interface BuyerInfoNonNullableFields$1 {
    visitorId: string;
    memberId: string;
}
interface PriceSummaryNonNullableFields$3 {
    subtotal?: PriceNonNullableFields$7;
    shipping?: PriceNonNullableFields$7;
    tax?: PriceNonNullableFields$7;
    discount?: PriceNonNullableFields$7;
    totalPrice?: PriceNonNullableFields$7;
    total?: PriceNonNullableFields$7;
    totalWithGiftCard?: PriceNonNullableFields$7;
    totalWithoutGiftCard?: PriceNonNullableFields$7;
    totalAdditionalFees?: PriceNonNullableFields$7;
}
interface StreetAddressNonNullableFields$9 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$9 {
    streetAddress?: StreetAddressNonNullableFields$9;
}
interface VatIdNonNullableFields$1 {
    id: string;
    type: VatType$3;
}
interface FullAddressContactDetailsNonNullableFields$1 {
    vatId?: VatIdNonNullableFields$1;
}
interface AddressWithContactNonNullableFields$1 {
    address?: AddressNonNullableFields$9;
    contactDetails?: FullAddressContactDetailsNonNullableFields$1;
}
interface PickupAddressNonNullableFields$1 {
    streetAddress?: StreetAddressNonNullableFields$9;
}
interface PickupDetailsNonNullableFields$5 {
    address?: PickupAddressNonNullableFields$1;
    pickupMethod: PickupMethod$5;
}
interface DeliveryLogisticsNonNullableFields$5 {
    shippingDestination?: AddressWithContactNonNullableFields$1;
    pickupDetails?: PickupDetailsNonNullableFields$5;
}
interface ShippingPriceNonNullableFields$3 {
    price?: PriceNonNullableFields$7;
    totalPriceBeforeTax?: PriceNonNullableFields$7;
    totalPriceAfterTax?: PriceNonNullableFields$7;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$3;
    discount?: PriceNonNullableFields$7;
}
interface V1ShippingInformationNonNullableFields$1 {
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$5;
    cost?: ShippingPriceNonNullableFields$3;
}
interface TaxSummaryNonNullableFields$3 {
    totalTax?: PriceNonNullableFields$7;
}
interface OrderTaxBreakdownNonNullableFields$1 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionType: JurisdictionType$3;
    rate: string;
    aggregatedTaxAmount?: PriceNonNullableFields$7;
    aggregatedTaxableAmount?: PriceNonNullableFields$7;
}
interface OrderTaxInfoNonNullableFields$1 {
    totalTax?: PriceNonNullableFields$7;
    taxBreakdown: OrderTaxBreakdownNonNullableFields$1[];
}
interface CouponNonNullableFields$3 {
    id: string;
    code: string;
    name: string;
    amount?: PriceNonNullableFields$7;
}
interface MerchantDiscountNonNullableFields$3 {
    discountReason: DiscountReason$1;
    amount?: PriceNonNullableFields$7;
}
interface DiscountRuleNameNonNullableFields$3 {
    original: string;
}
interface DiscountRuleNonNullableFields$3 {
    id: string;
    name?: DiscountRuleNameNonNullableFields$3;
    amount?: PriceNonNullableFields$7;
}
interface LineItemDiscountNonNullableFields$3 {
    id: string;
    totalDiscount?: PriceNonNullableFields$7;
}
interface AppliedDiscountNonNullableFields$3 {
    coupon?: CouponNonNullableFields$3;
    merchantDiscount?: MerchantDiscountNonNullableFields$3;
    discountRule?: DiscountRuleNonNullableFields$3;
    discountType: DiscountType$3;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$3[];
}
interface CustomActivityNonNullableFields$1 {
    appId: string;
    type: string;
}
interface MerchantCommentNonNullableFields$1 {
    message: string;
}
interface OrderRefundedNonNullableFields$1 {
    manual: boolean;
    amount?: PriceNonNullableFields$7;
    reason: string;
}
interface OrderCreatedFromExchangeNonNullableFields$1 {
    originalOrderId: string;
}
interface LineItemExchangeDataNonNullableFields$1 {
    lineItemId: string;
    quantity: number;
}
interface NewExchangeOrderCreatedNonNullableFields$1 {
    exchangeOrderId: string;
    lineItems: LineItemExchangeDataNonNullableFields$1[];
}
interface LineItemQuantityChangeNonNullableFields$1 {
    originalQuantity: number;
    newQuantity: number;
    diff: number;
    deltaType: LineItemQuantityChangeType$1;
}
interface LineItemPriceChangeNonNullableFields$1 {
    originalPrice?: PriceNonNullableFields$7;
    newPrice?: PriceNonNullableFields$7;
}
interface LineItemChangesNonNullableFields$1 {
    id: string;
    name?: ProductNameNonNullableFields$1;
    quantity?: LineItemQuantityChangeNonNullableFields$1;
    price?: LineItemPriceChangeNonNullableFields$1;
}
interface ManagedLineItemNonNullableFields$1 {
    id: string;
    name?: ProductNameNonNullableFields$1;
    quantity: number;
}
interface TranslatedValueNonNullableFields$1 {
    original: string;
}
interface LineItemAmountNonNullableFields$1 {
    id: string;
    name?: ProductNameNonNullableFields$1;
    amount?: PriceNonNullableFields$7;
}
interface ManagedDiscountNonNullableFields$1 {
    id: string;
    name?: TranslatedValueNonNullableFields$1;
    affectedLineItems: LineItemAmountNonNullableFields$1[];
    totalAmount?: PriceNonNullableFields$7;
}
interface ManagedAdditionalFeeNonNullableFields$1 {
    id: string;
    name?: TranslatedValueNonNullableFields$1;
    affectedLineItems: LineItemAmountNonNullableFields$1[];
    totalAmount?: PriceNonNullableFields$7;
}
interface TotalPriceChangeNonNullableFields$1 {
    originalTotal?: PriceNonNullableFields$7;
    newTotal?: PriceNonNullableFields$7;
}
interface ShippingInformationNonNullableFields$3 {
    total?: PriceNonNullableFields$7;
    shippingTitle: string;
}
interface ShippingInformationChangeNonNullableFields$1 {
    originalShippingInfo?: ShippingInformationNonNullableFields$3;
    newShippingInfo?: ShippingInformationNonNullableFields$3;
}
interface OrderChangeNonNullableFields$1 {
    lineItemChanged?: LineItemChangesNonNullableFields$1;
    lineItemAdded?: ManagedLineItemNonNullableFields$1;
    lineItemRemoved?: ManagedLineItemNonNullableFields$1;
    discountAdded?: ManagedDiscountNonNullableFields$1;
    discountRemoved?: ManagedDiscountNonNullableFields$1;
    additionalFeeAdded?: ManagedAdditionalFeeNonNullableFields$1;
    additionalFeeRemoved?: ManagedAdditionalFeeNonNullableFields$1;
    totalPriceChanged?: TotalPriceChangeNonNullableFields$1;
    shippingInformationChanged?: ShippingInformationChangeNonNullableFields$1;
}
interface DraftOrderChangesAppliedNonNullableFields$1 {
    draftOrderId: string;
    changes: OrderChangeNonNullableFields$1[];
}
interface SavedPaymentMethodNonNullableFields$1 {
    name: string;
}
interface AuthorizedPaymentCreatedNonNullableFields$1 {
    paymentId: string;
    amount?: PriceNonNullableFields$7;
}
interface AuthorizedPaymentCapturedNonNullableFields$1 {
    paymentId: string;
    amount?: PriceNonNullableFields$7;
}
interface AuthorizedPaymentVoidedNonNullableFields$1 {
    paymentId: string;
    amount?: PriceNonNullableFields$7;
}
interface RegularPaymentRefundNonNullableFields$1 {
    amount?: PriceNonNullableFields$7;
}
interface GiftCardPaymentRefundNonNullableFields$1 {
    amount?: PriceNonNullableFields$7;
}
interface RefundedPaymentNonNullableFields$1 {
    regular?: RegularPaymentRefundNonNullableFields$1;
    giftCard?: GiftCardPaymentRefundNonNullableFields$1;
    paymentId: string;
    externalRefund: boolean;
}
interface RefundInitiatedNonNullableFields$1 {
    refundId: string;
    amount?: PriceNonNullableFields$7;
    payments: RefundedPaymentNonNullableFields$1[];
}
interface PaymentRefundedNonNullableFields$1 {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields$1;
}
interface PaymentRefundFailedNonNullableFields$1 {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields$1;
}
interface RefundedAsStoreCreditNonNullableFields$1 {
    amount?: PriceNonNullableFields$7;
}
interface RegularPaymentNonNullableFields$1 {
    amount?: PriceNonNullableFields$7;
}
interface PaymentPendingNonNullableFields$1 {
    regular?: RegularPaymentNonNullableFields$1;
    paymentId: string;
}
interface PaymentCanceledNonNullableFields$1 {
    regular?: RegularPaymentNonNullableFields$1;
    paymentId: string;
}
interface PaymentDeclinedNonNullableFields$1 {
    regular?: RegularPaymentNonNullableFields$1;
    paymentId: string;
}
interface ActivityNonNullableFields$1 {
    customActivity?: CustomActivityNonNullableFields$1;
    merchantComment?: MerchantCommentNonNullableFields$1;
    orderRefunded?: OrderRefundedNonNullableFields$1;
    orderCreatedFromExchange?: OrderCreatedFromExchangeNonNullableFields$1;
    newExchangeOrderCreated?: NewExchangeOrderCreatedNonNullableFields$1;
    draftOrderChangesApplied?: DraftOrderChangesAppliedNonNullableFields$1;
    savedPaymentMethod?: SavedPaymentMethodNonNullableFields$1;
    authorizedPaymentCreated?: AuthorizedPaymentCreatedNonNullableFields$1;
    authorizedPaymentCaptured?: AuthorizedPaymentCapturedNonNullableFields$1;
    authorizedPaymentVoided?: AuthorizedPaymentVoidedNonNullableFields$1;
    refundInitiated?: RefundInitiatedNonNullableFields$1;
    paymentRefunded?: PaymentRefundedNonNullableFields$1;
    paymentRefundFailed?: PaymentRefundFailedNonNullableFields$1;
    refundedAsStoreCredit?: RefundedAsStoreCreditNonNullableFields$1;
    paymentPending?: PaymentPendingNonNullableFields$1;
    paymentCanceled?: PaymentCanceledNonNullableFields$1;
    paymentDeclined?: PaymentDeclinedNonNullableFields$1;
    type: ActivityType$1;
}
interface CreatedByNonNullableFields$1 {
    userId: string;
    memberId: string;
    visitorId: string;
    appId: string;
}
interface ChannelInfoNonNullableFields$1 {
    type: ChannelType$1;
}
interface CustomFieldNonNullableFields$1 {
    title: string;
}
interface BalanceNonNullableFields$1 {
    amount: string;
    formattedAmount: string;
}
interface BalanceSummaryNonNullableFields$1 {
    balance?: BalanceNonNullableFields$1;
    paid?: PriceNonNullableFields$7;
    refunded?: PriceNonNullableFields$7;
    authorized?: PriceNonNullableFields$7;
    pendingRefund?: PriceNonNullableFields$7;
    pending?: PriceNonNullableFields$7;
}
interface AdditionalFeeNonNullableFields$1 {
    name: string;
    price?: PriceNonNullableFields$7;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$3;
    priceBeforeTax?: PriceNonNullableFields$7;
    priceAfterTax?: PriceNonNullableFields$7;
    id: string;
    lineItemIds: string[];
}
interface TagListNonNullableFields$1 {
    tagIds: string[];
}
interface TagsNonNullableFields$1 {
    privateTags?: TagListNonNullableFields$1;
    tags?: TagListNonNullableFields$1;
}
interface OrderNonNullableFields$1 {
    number: string;
    lineItems: OrderLineItemNonNullableFields$1[];
    buyerInfo?: BuyerInfoNonNullableFields$1;
    paymentStatus: PaymentStatus$1;
    fulfillmentStatus: FulfillmentStatus$1;
    weightUnit: WeightUnit$5;
    taxIncludedInPrices: boolean;
    priceSummary?: PriceSummaryNonNullableFields$3;
    billingInfo?: AddressWithContactNonNullableFields$1;
    shippingInfo?: V1ShippingInformationNonNullableFields$1;
    status: OrderStatus$1;
    taxSummary?: TaxSummaryNonNullableFields$3;
    taxInfo?: OrderTaxInfoNonNullableFields$1;
    appliedDiscounts: AppliedDiscountNonNullableFields$3[];
    activities: ActivityNonNullableFields$1[];
    attributionSource: AttributionSource$1;
    createdBy?: CreatedByNonNullableFields$1;
    channelInfo?: ChannelInfoNonNullableFields$1;
    customFields: CustomFieldNonNullableFields$1[];
    isInternalOrderCreate: boolean;
    payNow?: PriceSummaryNonNullableFields$3;
    balanceSummary?: BalanceSummaryNonNullableFields$1;
    additionalFees: AdditionalFeeNonNullableFields$1[];
    recipientInfo?: AddressWithContactNonNullableFields$1;
    tags?: TagsNonNullableFields$1;
}
interface GetOrderResponseNonNullableFields$1 {
    order?: OrderNonNullableFields$1;
}
interface SearchOrdersResponseNonNullableFields$1 {
    orders: OrderNonNullableFields$1[];
}
interface CreateOrderResponseNonNullableFields$1 {
    order?: OrderNonNullableFields$1;
}
interface UpdateOrderResponseNonNullableFields$1 {
    order?: OrderNonNullableFields$1;
}
interface ApplicationErrorNonNullableFields$9 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$3 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$9;
}
interface BulkOrderResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$3;
    item?: OrderNonNullableFields$1;
}
interface BulkActionMetadataNonNullableFields$3 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkUpdateOrdersResponseNonNullableFields$1 {
    results: BulkOrderResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$3;
}
interface CancelOrderResponseNonNullableFields$1 {
    order?: OrderNonNullableFields$1;
}
interface BulkUpdateOrderTagsResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$3;
}
interface BulkUpdateOrderTagsResponseNonNullableFields$1 {
    results: BulkUpdateOrderTagsResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$3;
}

interface Order {
    /**
     * Order ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Order number displayed in the site owner's dashboard (auto-generated).
     * @readonly
     */
    number?: string;
    /**
     * Date and time the order was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Order line items.
     * @readonly
     */
    lineItems?: OrderLineItem[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /**
     * Order payment status.
     * + `NOT_PAID` - This can be an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.
     * + This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.
     * + `PAID` - All payments associated with this order are paid. For online payments: [`payment.regularPaymentDetails.status: APPROVED`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object). For gift cards: [`payment.giftCardPaymentDetails.voided: false`](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-transactions/order-transactions-object).
     * + `PARTIALLY_REFUNDED` - Order was refunded, but refund amount is less than order total price.
     * + `FULLY_REFUNDED` - Order fully refunded. Refund amount equals total price.
     * + `PENDING` - Payments received but not yet confirmed by the payment provider.
     * + `PARTIALLY_PAID` -  At least one payment was received and approved, covering less than total price amount.
     */
    paymentStatus?: PaymentStatus;
    /**
     * Order fulfillment status.
     * @readonly
     */
    fulfillmentStatus?: FulfillmentStatus;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit$4;
    /** Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format. */
    currency?: string | null;
    /** Whether tax is included in line item prices. */
    taxIncludedInPrices?: boolean;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary$2;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: V1ShippingInformation;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /**
     * Order status.
     * + `INITIALIZED`: Order created, but not yet approved or canceled.
     * + `APPROVED`: Order approved. This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order). Offline orders (cash payment) are automatically approved.
     * + `CANCELED`: Order canceled by the user.
     */
    status?: OrderStatus;
    /** Whether order is archived. */
    archived?: boolean | null;
    /**
     * Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @deprecated Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary$2;
    /** Tax information. */
    taxInfo?: OrderTaxInfo;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$2[];
    /**
     * Order activities.
     * @readonly
     */
    activities?: Activity[];
    /** Order attribution source. */
    attributionSource?: AttributionSource;
    /**
     * ID of the order's initiator.
     * @readonly
     */
    createdBy?: CreatedBy;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo;
    /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */
    seenByAHuman?: boolean | null;
    /** Checkout ID. */
    checkoutId?: string | null;
    /** Custom fields. */
    customFields?: CustomField[];
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: BalanceSummary;
    /** Additional fees applied to the order. */
    additionalFees?: AdditionalFee[];
    /**
     * Custom field data for the order object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$8;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact;
    /**
     * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * Used for migration from external systems.
     */
    purchasedDate?: Date | null;
}
interface OrderLineItem {
    /** Line item ID. */
    _id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference$6;
    /** Line item quantity. */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price$6;
    /** Line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine[];
    /** Line item image. */
    image?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties$4;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$2;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     *
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://www.wix.com/velo/reference/wix-ecom-backend/orderfulfillments/listfulfillmentsforsingleorder).
     */
    fulfillerId?: string | null;
    /**
     * Number of items that were refunded.
     * @readonly
     */
    refundQuantity?: number | null;
    /**
     * Number of items restocked.
     * @readonly
     */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price$6;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price$6;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$6;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$6;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` - Partial payment for the given item to be paid upfront during the checkout. Eligible for catalog items with type `DEPOSIT_ONLINE` only.
     */
    paymentOption?: PaymentOptionType$2;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails$2;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price$6;
}
interface ProductName {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$6 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs.
     *
     * Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from your Wix Stores catalog, learn more about [eCommerce integration](https://www.wix.com/velo/reference/wix-stores-backend/ecommerce-integration).
     */
    options?: Record<string, any> | null;
}
interface Price$6 {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface DescriptionLine extends DescriptionLineValueOneOf, DescriptionLineDescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
    /** Description line name. */
    name?: DescriptionLineName;
}
/** @oneof */
interface DescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf {
}
interface DescriptionLineName {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface PlainTextValue {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
interface Color {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType {
    UNRECOGNISED = "UNRECOGNISED",
    PLAIN_TEXT = "PLAIN_TEXT",
    COLOR = "COLOR"
}
interface PhysicalProperties$4 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType$2 extends ItemTypeItemTypeDataOneOf$2 {
    /** Preset item type. */
    preset?: ItemTypeItemType$2;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$2 {
    /** Preset item type. */
    preset?: ItemTypeItemType$2;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$2 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$2 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ItemTaxFullDetails$2 {
    /** Taxable amount of this line item. */
    taxableAmount?: Price$6;
    /** Tax rate percentage, as a decimal numeral between 0 and 1. For example, `"0.13"`. */
    taxRate?: string;
    /** The calculated tax, based on the `taxableAmount` and `taxRate`. */
    totalTax?: Price$6;
}
interface LineItemTaxInfo {
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    taxAmount?: Price$6;
    /** Amount for which tax is calculated. */
    taxableAmount?: Price$6;
    /** Tax rate %, as a decimal point. */
    taxRate?: string | null;
    /**
     * Tax group ID.
     * Learn more about [Tax Groups](https://dev.wix.com/docs/rest/business-management/payments/tax/tax-groups/introduction).
     */
    taxGroupId?: string | null;
    /** Indicates whether the price already includes tax. */
    taxIncludedInPrice?: boolean;
    /** Tax information for a line item. */
    taxBreakdown?: LineItemTaxBreakdown[];
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface LineItemTaxBreakdown {
    /** Jurisdiction that taxes were calculated for. For example, "New York", or "Quebec". */
    jurisdiction?: string | null;
    /** Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000. */
    rate?: string | null;
    /** Amount of tax calculated for this line item. */
    taxAmount?: Price$6;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** Type of jurisdiction that taxes were calculated for. */
    jurisdictionType?: JurisdictionType$2;
    /** Non-taxable amount of the line item price. */
    nonTaxableAmount?: Price$6;
    /** Taxable amount of the line item price. */
    taxableAmount?: Price$6;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$2 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface DigitalFile {
    /** ID of the secure file in media. */
    fileId?: string;
    /** Link will exist after the digital links have been generated on the order. */
    link?: string | null;
    /**
     * Link expiration time and date.
     * @readonly
     */
    expirationDate?: Date | null;
}
interface SubscriptionInfo {
    /** Subscription ID. */
    _id?: string | null;
    /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */
    cycleNumber?: number;
    /** Subscription option title. For example, `"Monthly coffee Subscription"`. */
    subscriptionOptionTitle?: string;
    /** Subscription option description. For example, `"1kg of selected coffee, once a month"`. */
    subscriptionOptionDescription?: string | null;
    /** Subscription detailed information. */
    subscriptionSettings?: SubscriptionSettings$2;
}
interface SubscriptionSettings$2 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$2;
    /** Interval of recurring payment. */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$2 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface PriceDescription {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
declare enum TaxableAddressType$2 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Buyer Info */
interface BuyerInfo extends BuyerInfoIdOneOf {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
    /** Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://www.wix.com/velo/reference/wix-crm-backend/contacts/introduction). */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
}
declare enum PaymentStatus {
    UNSPECIFIED = "UNSPECIFIED",
    /** Order is not paid */
    NOT_PAID = "NOT_PAID",
    /** Order is paid */
    PAID = "PAID",
    /** Order was refunded, refund amount less than order total price */
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    /** Full order total price was refunded */
    FULLY_REFUNDED = "FULLY_REFUNDED",
    /** Payments received but not yet confirmed by the payment provider */
    PENDING = "PENDING",
    /** At least one payment was received and approved, covering less than total price amount */
    PARTIALLY_PAID = "PARTIALLY_PAID"
}
declare enum FulfillmentStatus {
    /** none of the order items are fulfilled or order was manually marked as unfulfilled */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled or order was manually marked as fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FULFILLED = "FULFILLED",
    /** Some, but not all of the order items are fulfilled */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
declare enum WeightUnit$4 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface PriceSummary$2 {
    /** Subtotal of all the line items, before discounts and before tax. */
    subtotal?: Price$6;
    /** Total shipping price, before discounts and before tax. */
    shipping?: Price$6;
    /** Total tax on this order. */
    tax?: Price$6;
    /** Total calculated discount value. */
    discount?: Price$6;
    /** Order’s total price after discounts and tax. */
    total?: Price$6;
    /** Total price of additional fees before tax. */
    totalAdditionalFees?: Price$6;
}
/** Billing Info and shipping details */
interface AddressWithContact {
    /** Address. */
    address?: Address$8;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$2;
}
/** Physical address */
interface Address$8 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$8;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$8 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$2 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$2;
}
interface VatId$2 {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$2;
}
/** tax info types */
declare enum VatType$2 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface V1ShippingInformation {
    /** App Def Id of external provider which was a source of shipping info */
    carrierId?: string | null;
    /** Unique code (or ID) of selected shipping option. For example, `"usps_std_overnight"``. */
    code?: string | null;
    /**
     * Shipping option title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"` or `"First-Class Package International"`.
     */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics$4;
    /** Shipping costs. */
    cost?: ShippingPrice$2;
    /** Shipping region. */
    region?: ShippingRegion$2;
}
interface DeliveryLogistics$4 extends DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Pickup details. */
    pickupDetails?: PickupDetails$4;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /**
     * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Expected delivery time. */
    deliveryTimeSlot?: DeliveryTimeSlot$2;
}
/** @oneof */
interface DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Pickup details. */
    pickupDetails?: PickupDetails$4;
}
interface PickupDetails$4 {
    /** Pickup address. */
    address?: PickupAddress;
    /** Pickup method */
    pickupMethod?: PickupMethod$4;
}
/** Physical address */
interface PickupAddress {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address object, with number, name, and apartment number in separate fields. */
    streetAddress?: StreetAddress$8;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
declare enum PickupMethod$4 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$2 {
    /** Delivery slot starting time. */
    from?: Date | null;
    /** Delivery slot ending time. */
    to?: Date | null;
}
interface ShippingPrice$2 {
    /** Shipping price for display purposes. */
    price?: Price$6;
    /**
     * Total price of shipping after discounts (when relevant), and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price$6;
    /**
     * Shipping price after all discounts (if any exist), and after tax.
     * @readonly
     */
    totalPriceAfterTax?: Price$6;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$2;
    /**
     * Shipping discount before tax.
     * @readonly
     */
    discount?: Price$6;
}
interface ShippingRegion$2 {
    /** Name of shipping region. For example, `"Metropolitan London"`, or `"Outer Melbourne suburbs"`. */
    name?: string | null;
}
declare enum OrderStatus {
    INITIALIZED = "INITIALIZED",
    APPROVED = "APPROVED",
    CANCELED = "CANCELED"
}
interface TaxSummary$2 {
    /**
     * Total tax.
     * @readonly
     */
    totalTax?: Price$6;
}
interface OrderTaxInfo {
    /** Calculated tax, added from line items. */
    totalTax?: Price$6;
    /** The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate. */
    taxBreakdown?: OrderTaxBreakdown[];
    /**
     * Whether the draft order is exempt from tax calculations.
     *
     * Default: `false`
     * @readonly
     */
    taxExempt?: boolean | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface OrderTaxBreakdown {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionType?: JurisdictionType$2;
    /** The rate at which this tax detail was calculated. */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: Price$6;
}
interface AppliedDiscount$2 extends AppliedDiscountDiscountSourceOneOf$2 {
    /** Applied coupon info. */
    coupon?: Coupon$2;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$2;
    /** Automatic Discount */
    discountRule?: DiscountRule$2;
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to specific items.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: DiscountType$2;
    /**
     * IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @deprecated IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemIds?: string[];
    /** Discount id. */
    _id?: string | null;
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$2 {
    /** Applied coupon info. */
    coupon?: Coupon$2;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$2;
    /** Automatic Discount */
    discountRule?: DiscountRule$2;
}
declare enum DiscountType$2 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$2 {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** Coupon value. */
    amount?: Price$6;
}
interface MerchantDiscount$2 extends MerchantDiscountMerchantDiscountReasonOneOf {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason;
    /** Discount description as free text (optional). */
    description?: string | null;
    /** Discount amount. */
    amount?: Price$6;
}
/** @oneof */
interface MerchantDiscountMerchantDiscountReasonOneOf {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason;
    /** Discount description as free text (optional). */
    description?: string | null;
}
declare enum DiscountReason {
    UNSPECIFIED = "UNSPECIFIED",
    EXCHANGED_ITEMS = "EXCHANGED_ITEMS"
}
interface DiscountRule$2 {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$2;
    /** Discount value. */
    amount?: Price$6;
}
interface DiscountRuleName$2 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface Activity extends ActivityContentOneOf {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded;
    /**
     * Activity ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Activity author's email.
     * @readonly
     */
    authorEmail?: string | null;
    /**
     * Activity creation date and time.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Activity type. */
    type?: ActivityType;
}
/** @oneof */
interface ActivityContentOneOf {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded;
}
interface CustomActivity {
    /** ID of the app that created the custom activity. */
    appId?: string;
    /** Custom activity type. For example, `"Ticket number set"`. */
    type?: string;
    /** Additional data in key-value form. For example, `{ "Ticket number": "123456" }`. */
    additionalData?: Record<string, string>;
}
/** Store owner added a comment */
interface MerchantComment {
    /** Merchant comment message. */
    message?: string;
}
interface OrderRefunded {
    /** Whether order was refunded manually. For example, via payment provider or using cash. */
    manual?: boolean;
    /** Refund amount. */
    amount?: Price$6;
    /** Reason for refund. */
    reason?: string;
}
declare enum LineItemQuantityChangeType {
    QUANTITY_INCREASED = "QUANTITY_INCREASED",
    QUANTITY_DECREASED = "QUANTITY_DECREASED"
}
declare enum ActivityType {
    ORDER_REFUNDED = "ORDER_REFUNDED",
    ORDER_PLACED = "ORDER_PLACED",
    ORDER_PAID = "ORDER_PAID",
    ORDER_FULFILLED = "ORDER_FULFILLED",
    ORDER_NOT_FULFILLED = "ORDER_NOT_FULFILLED",
    ORDER_CANCELED = "ORDER_CANCELED",
    DOWNLOAD_LINK_SENT = "DOWNLOAD_LINK_SENT",
    TRACKING_NUMBER_ADDED = "TRACKING_NUMBER_ADDED",
    TRACKING_NUMBER_EDITED = "TRACKING_NUMBER_EDITED",
    TRACKING_LINK_ADDED = "TRACKING_LINK_ADDED",
    SHIPPING_CONFIRMATION_EMAIL_SENT = "SHIPPING_CONFIRMATION_EMAIL_SENT",
    INVOICE_ADDED = "INVOICE_ADDED",
    INVOICE_REMOVED = "INVOICE_REMOVED",
    INVOICE_SENT = "INVOICE_SENT",
    FULFILLER_EMAIL_SENT = "FULFILLER_EMAIL_SENT",
    SHIPPING_ADDRESS_EDITED = "SHIPPING_ADDRESS_EDITED",
    EMAIL_EDITED = "EMAIL_EDITED",
    PICKUP_READY_EMAIL_SENT = "PICKUP_READY_EMAIL_SENT",
    CUSTOM_ACTIVITY = "CUSTOM_ACTIVITY",
    MERCHANT_COMMENT = "MERCHANT_COMMENT",
    ORDER_CREATED_FROM_EXCHANGE = "ORDER_CREATED_FROM_EXCHANGE",
    NEW_EXCHANGE_ORDER_CREATED = "NEW_EXCHANGE_ORDER_CREATED",
    ORDER_PARTIALLY_PAID = "ORDER_PARTIALLY_PAID",
    DRAFT_ORDER_CHANGES_APPLIED = "DRAFT_ORDER_CHANGES_APPLIED",
    SAVED_PAYMENT_METHOD = "SAVED_PAYMENT_METHOD"
}
declare enum AttributionSource {
    UNSPECIFIED = "UNSPECIFIED",
    FACEBOOK_ADS = "FACEBOOK_ADS"
}
interface CreatedBy extends CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
/** @oneof */
interface CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
interface ChannelInfo {
    /** Sales channel that submitted the order. */
    type?: ChannelType;
    /** Reference to an order ID from an external system. */
    externalOrderId?: string | null;
    /** URL to the order in the external system. */
    externalOrderUrl?: string | null;
}
declare enum ChannelType {
    UNSPECIFIED = "UNSPECIFIED",
    WEB = "WEB",
    POS = "POS",
    EBAY = "EBAY",
    AMAZON = "AMAZON",
    OTHER_PLATFORM = "OTHER_PLATFORM",
    WIX_APP_STORE = "WIX_APP_STORE",
    WIX_INVOICES = "WIX_INVOICES",
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    WISH = "WISH",
    CLASS_PASS = "CLASS_PASS",
    GLOBAL_E = "GLOBAL_E",
    FACEBOOK = "FACEBOOK",
    ETSY = "ETSY",
    TIKTOK = "TIKTOK",
    FAIRE_COM = "FAIRE_COM"
}
interface CustomField {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
interface BalanceSummary {
    /**
     * Current amount left to pay.
     * @readonly
     */
    balance?: Balance;
    /**
     * Sum of all approved and successful payments.
     *
     * The value includes payments that have subsequently been fully or partially refunded.
     * @readonly
     */
    paid?: Price$6;
    /**
     * Sum of all successfully refunded payments.
     * @readonly
     */
    refunded?: Price$6;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price$6;
}
/**
 * Order balance. Reflects amount left to be paid on order and is calculated dynamically. Can be negative per balance definition.
 * `amount` field depends on order payment status:
 * + UNSPECIFIED, NOT_PAID: price_summary.total_price
 * + PARTIALLY_PAID : price_summary.total_price - pay_now.total_price
 * + PENDING, REFUNDED, PARTIALLY_REFUNDED, PAID : 0
 */
interface Balance {
    /**
     * Balance amount.
     *
     * A negative `amount` represents the amount to be refunded. This can happen due to overcharging or the order being modified after a payment has been made.
     * @readonly
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface AdditionalFee {
    /** Additional fee's unique code for future processing. */
    code?: string | null;
    /** Name of additional fee. */
    name?: string;
    /** Additional fee's price. */
    price?: Price$6;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$2;
    /** SPI implementer's `appId`. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: Price$6;
    /** Additional fee's price after tax. */
    priceAfterTax?: Price$6;
    /** Additional fee's id. */
    _id?: string;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface ExtendedFields$8 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
/**
 * Common object for tags.
 * Should be use as in this example:
 * message Foo {
 * string id = 1;
 * ...
 * Tags tags = 5
 * }
 *
 * example of taggable entity
 * {
 * id: "123"
 * tags: {
 * tags: {
 * tag_ids:["11","22"]
 * },
 * private_tags: {
 * tag_ids: ["33", "44"]
 * }
 * }
 * }
 */
interface Tags {
    /** Tags that require an additional permission in order to access them, normally not given to site members or visitors. */
    privateTags?: TagList;
    /** Tags that are exposed to anyone who has access to the labeled entity itself, including site members and visitors. */
    tags?: TagList;
}
interface TagList {
    /** List of tag IDs */
    tagIds?: string[];
}
interface Sorting$c {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$c;
}
declare enum SortOrder$c {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$c {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface Cursors$c {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface OrderTransactions$2 {
    /** Order ID. */
    orderId?: string;
    /** Record of payments made to the merchant. */
    payments?: Payment$2[];
    /** Record of refunds made to the buyer. */
    refunds?: Refund$2[];
}
interface Payment$2 extends PaymentPaymentDetailsOneOf$2 {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails$2;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails$2;
    /**
     * Payment ID.
     * @readonly
     */
    _id?: string | null;
    /** Date and time the payment was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    _createdDate?: Date | null;
    /**
     * Date and time the payment was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Payment amount. */
    amount?: Price$6;
    /**
     * Whether refunds for this payment are disabled.
     * + `true`: This payment is not refundable.
     * + `false`: This payment may be refunded. However, this ultimately depends on the payment provider.
     */
    refundDisabled?: boolean;
}
/** @oneof */
interface PaymentPaymentDetailsOneOf$2 {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails$2;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails$2;
}
interface RegularPaymentDetails$2 extends RegularPaymentDetailsPaymentMethodDetailsOneOf$2 {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails$2;
    /** Wix Payments order ID. */
    paymentOrderId?: string | null;
    /**
     * Payment gateway's transaction ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `offline_payment` is `false`.
     */
    gatewayTransactionId?: string | null;
    /**
     * Payment method. Non-exhaustive list of supported values:
     * + `CreditCard`, `Alipay`, `AstropayCash`, `AstropayDBT`, `AstropayMBT`, `Bitcoin`, `BitPay`, `Cash`, `ConvenienceStore`, `EPay`, `Fake`, `Giropay`, `IDeal`, `InPerson`, `Klarna`, `MercadoPago`, `Netpay`, `NordeaSolo`, `Offline`, `PagSeguro`, `PayEasy`, `PayPal`, `Paysafecard`, `Paysafecash`, `PointOfSale`, `Poli`, `Privat24`, `Przelewy24`, `RapidTransfer`, `Sepa`, `Skrill`, `Sofort`, `Trustly`, `Neteller`, `Unionpay`, `UniPay`, `Yandex`
     */
    paymentMethod?: string | null;
    /** Transaction ID in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for offline payments. */
    providerTransactionId?: string | null;
    /** Whether the payment was made offline. For example, when using cash or when marked as paid in the Business Manager. */
    offlinePayment?: boolean;
    /** Payment status. */
    status?: TransactionStatus$2;
    /** Whether there is a payment agreement that allows for future charges. */
    savedPaymentMethod?: boolean;
    /** Authorization details. */
    authorizationDetails?: AuthorizationDetails$2;
}
/** @oneof */
interface RegularPaymentDetailsPaymentMethodDetailsOneOf$2 {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails$2;
}
declare enum TransactionStatus$2 {
    UNDEFINED = "UNDEFINED",
    APPROVED = "APPROVED",
    PENDING = "PENDING",
    PENDING_MERCHANT = "PENDING_MERCHANT",
    CANCELED = "CANCELED",
    DECLINED = "DECLINED",
    REFUNDED = "REFUNDED",
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    AUTHORIZED = "AUTHORIZED",
    VOIDED = "VOIDED"
}
interface CreditCardPaymentMethodDetails$2 {
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface AuthorizationDetails$2 {
    /**
     * Whether the authorized payment is of a delayed capture.
     * @readonly
     */
    delayedCapture?: boolean;
    /** Date and time the payment was authorized in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    authorizedDate?: Date | null;
    /**
     * List of captures associated with payment
     * In case of failed it can be replaced with new one with PENDING or SUCCESS statuses
     */
    captures?: AuthorizationCapture$2[];
    /** Void associated with payment */
    void?: AuthorizationVoid$2;
    /** Scheduled action for this transaction */
    scheduledAction?: V1ScheduledAction;
}
interface AuthorizationCapture$2 {
    /**
     * Capture ID.
     * @readonly
     */
    _id?: string | null;
    /** Status of this capture action */
    status?: AuthorizationCaptureStatus$2;
    /** Amount of this capture */
    amount?: Price$6;
    /** Date and time the capture was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    _createdDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails$2;
}
declare enum AuthorizationCaptureStatus$2 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Whether capture operation still in progress */
    PENDING = "PENDING",
    /** The capture operation was succeeded */
    SUCCEEDED = "SUCCEEDED",
    /** The capture operation was failed */
    FAILED = "FAILED"
}
interface AuthorizationActionFailureDetails$2 {
    failureCode?: string;
}
interface AuthorizationVoid$2 {
    /** Status of this void action */
    status?: AuthorizationVoidStatus$2;
    /** Date and time the void was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    voidedDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails$2;
    /** Reason of void action */
    reason?: Reason$2;
}
declare enum AuthorizationVoidStatus$2 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Whether void operation still in progress */
    PENDING = "PENDING",
    /** The void operation was succeeded */
    SUCCEEDED = "SUCCEEDED",
    /** The void operation was failed */
    FAILED = "FAILED"
}
/**
 * Reason the authorization was voided.
 *
 * + `MANUAL`: Authorization was voided by user.
 * + `SCHEDULED`: Authorization passed execution date.
 */
declare enum Reason$2 {
    UNKNOWN_REASON = "UNKNOWN_REASON",
    MANUAL = "MANUAL",
    SCHEDULED = "SCHEDULED"
}
interface V1ScheduledAction {
    /** type of the action */
    actionType?: ActionType$2;
    /** the date and time of the action */
    executionDate?: Date | null;
}
declare enum ActionType$2 {
    UNKNOWN_ACTION_TYPE = "UNKNOWN_ACTION_TYPE",
    VOID = "VOID",
    CAPTURE = "CAPTURE"
}
interface GiftCardPaymentDetails$2 {
    /** Gift card payment ID. */
    giftCardPaymentId?: string;
    /** ID of the app that created the gift card. */
    appId?: string;
    /**
     * Whether the gift card is voided.
     * @readonly
     */
    voided?: boolean;
}
declare enum MembershipPaymentStatus$2 {
    /** CHARGED - Payment was charged */
    CHARGED = "CHARGED",
    /** CHARGE_FAILED - The attempt to charge that payment have failed, for example due to lack of credits */
    CHARGE_FAILED = "CHARGE_FAILED"
}
interface Refund$2 {
    /**
     * Refund ID.
     * @readonly
     */
    _id?: string;
    /** List of transactions. */
    transactions?: RefundTransaction$2[];
    /** Refund business details. */
    details?: RefundDetails$2;
    /** Date and time the refund was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    _createdDate?: Date | null;
}
interface RefundTransaction$2 {
    /** ID of the payment associated with this refund. */
    paymentId?: string;
    /** Refund amount. */
    amount?: Price$6;
    /** Refund status. */
    refundStatus?: RefundStatus$2;
    /**
     * Payment gateway's refund ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `external_refund` is `false`.
     */
    gatewayRefundId?: string | null;
    /** ID of the refund in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for external refunds. */
    providerRefundId?: string | null;
    /** Whether refund was made externally and manually on the payment provider's side. */
    externalRefund?: boolean;
}
/**
 * Refund transaction status.
 * + `PENDING`: Refund was initiated on payment provider side. PENDING status was assigned by provider.
 * + `SUCCEEDED`: Refund transaction succeeded.
 * + `FAILED`: Refund transaction failed.
 * + `SCHEDULED`: Refund request acknowledged, and will be executed soon.
 * + `STARTED`: Refund was initiated on payment provider side.
 */
declare enum RefundStatus$2 {
    PENDING = "PENDING",
    SUCCEEDED = "SUCCEEDED",
    FAILED = "FAILED",
    SCHEDULED = "SCHEDULED",
    STARTED = "STARTED"
}
/** Business model of a refund request */
interface RefundDetails$2 {
    /** Order line item IDs and quantities that were refunded. */
    items?: RefundItem$2[];
    /** Whether the shipping fee was also refunded. */
    shippingIncluded?: boolean;
    /** Reason for the refund, provided by customer (optional). */
    reason?: string | null;
}
interface RefundItem$2 {
    /** Line item ID the refunded line item. */
    lineItemId?: string;
    /** Line item quantity refunded. */
    quantity?: number;
}
interface PreparePaymentCollectionRequest {
    /** Ecom order ID. */
    ecomOrderId: string;
    /** Amount to collect */
    amount: Price$6;
    /**
     * Optional parameter. When present, payment collection will be performed using given payment gateway order.
     * Existing payment gateway order will be updated with a new amount.
     * When parameter is absent, new payment gateway order will be created and used for payment collection.
     */
    paymentGatewayOrderId?: string | null;
    /**
     * Whether to delay capture of the payment.
     * Default: false
     * @deprecated Whether to delay capture of the payment.
     * Default: false
     * @replacedBy delayed_capture_settings.scheduled_action
     * @targetRemovalDate 2024-09-30
     */
    delayedCapture?: boolean;
    /** Delayed capture payment settings */
    delayedCaptureSettings?: DelayedCaptureSettings;
}
interface DelayedCaptureSettings {
    /** Specifies the automatic action (void/capture) for authorized transaction after the specified duration */
    scheduledAction?: ScheduledAction$2;
    /** Delay duration before execution. Optional - if not set, providers default period will be used */
    delayDuration?: Duration;
}
declare enum ScheduledAction$2 {
    UNSPECIFIED = "UNSPECIFIED",
    /** Whether payment will be auto-voided when duration passes */
    VOID = "VOID",
    /** Whether payment will be auto-captured when duration passes */
    CAPTURE = "CAPTURE"
}
interface Duration {
    /** Amount of units. For example, 30 MINUTES, 1 HOURS, 7 DAYS, etc */
    count?: number;
    /** Duration unit: MINUTES, HOURS and DAYS */
    unit?: DurationUnit;
}
declare enum DurationUnit {
    UNKNOWN_DURATION_UNIT = "UNKNOWN_DURATION_UNIT",
    MINUTES = "MINUTES",
    HOURS = "HOURS",
    DAYS = "DAYS"
}
interface PreparePaymentCollectionResponse {
    /** Payment gateway order id which is associated with given payment */
    paymentGatewayOrderId?: string;
}
interface GetPaymentCollectabilityStatusRequest {
    /** Ecom order ID. */
    ecomOrderId: string;
}
interface GetPaymentCollectabilityStatusResponse {
    /** Payment collectability status */
    status?: PaymentCollectabilityStatus;
    /** Collectable order amount */
    amount?: Price$6;
}
declare enum PaymentCollectabilityStatus {
    UNKNOWN = "UNKNOWN",
    COLLECTABLE = "COLLECTABLE",
    NONCOLLECTABLE_ORDER_IS_CANCELLED = "NONCOLLECTABLE_ORDER_IS_CANCELLED",
    NONCOLLECTABLE_ORDER_IS_PAID = "NONCOLLECTABLE_ORDER_IS_PAID",
    NONCOLLECTABLE_MISSING_PAYMENT_METHOD = "NONCOLLECTABLE_MISSING_PAYMENT_METHOD"
}
interface BulkOrderResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata$2;
    /**
     * Updated order.
     *
     * Returned when `returnFullEntity = true`.
     */
    item?: Order;
}
interface ItemMetadata$2 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$8;
}
interface ApplicationError$8 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$2 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface VoidAuthorizedPaymentsRequest {
    /** Wix eCommerce order ID */
    ecomOrderId: string;
    /** Payment IDs */
    paymentIds: string[];
}
interface VoidAuthorizedPaymentsResponse {
    /** All order's transactions after the void was triggered */
    orderTransactions?: OrderTransactions$2;
}
interface CaptureAuthorizedPaymentsRequest {
    /** Wix eCommerce order ID */
    ecomOrderId: string;
    /** Capture payments information */
    payments: PaymentCapture[];
}
interface PaymentCapture {
    /** Payment ID */
    paymentId?: string | null;
    /**
     * Capture amount.
     * If not provided - full authorized amount will be captured.
     */
    amount?: Price$6;
}
interface CaptureAuthorizedPaymentsResponse {
    /** All order's transactions after the capture was triggered */
    orderTransactions?: OrderTransactions$2;
}
interface GetOrderRequest {
    /** ID of the order to retrieve. */
    _id: string;
}
interface GetOrderResponse {
    /** The requested order. */
    order?: Order;
}
interface SearchOrdersRequest {
    /** Search options. */
    search?: CursorSearch;
}
interface CursorSearch extends CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$c;
    /**
     * Filter object.
     *
     * For example, the following `filter` object will only return orders with payment statuses of paid and/or partially paid:
     *
     * `"filter": {"paymentStatus": {"$in": ["PAID", "PARTIALLY_PAID"]}}`
     *
     * Learn more about the [filter format](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Array of sort objects that specify the order in which results should be sorted.
     *
     * For example, the following `sort` array will sort by `createdDate` in descending order:
     *
     * `"sort": [{"fieldName": "createdDate", "order":"DESC"}]`.
     *
     * Learn more about the [sort format](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$c[];
}
/** @oneof */
interface CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$c;
}
interface SearchOrdersResponse {
    /** List of orders. */
    orders?: Order[];
    /** Details on the paged set of results returned. */
    metadata?: CursorPagingMetadata$a;
}
interface CursorPagingMetadata$a {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$c;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface CreateOrderRequest {
    /** Order info. */
    order: Order;
}
interface CreateOrderResponse {
    /** Newly created order. */
    order?: Order;
}
interface UpdateOrderRequest {
    /** Order to be updated. */
    order: Order;
}
interface UpdateOrderResponse {
    /** Newly created order. */
    order?: Order;
}
interface BulkUpdateOrdersRequest {
    /** Orders to update. */
    orders: MaskedOrder[];
    /**
     * Whether to return the full order entities.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface MaskedOrder {
    /** Order to be updated. */
    order?: Order;
}
interface BulkUpdateOrdersResponse {
    /** Bulk action results. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$2;
}
interface CancelOrderRequest {
    /** Order ID. */
    _id: string;
    /** Whether to send an order canceled email to the buyer. */
    sendOrderCanceledEmail?: boolean;
    /** Custom note to be added to the email (optional). */
    customMessage?: string | null;
    /** Whether to restock all items in the order. This will only apply to products in the Wix Stores inventory. */
    restockAllItems?: boolean;
}
interface CancelOrderResponse {
    /** Canceled order. */
    order?: Order;
}
interface BulkUpdateOrderTagsRequest {
    /** IDs of orders to update tags for. */
    orderIds: string[];
    /** Tags to be added to orders */
    assignTags?: Tags;
    /** Tags to be removed from orders */
    unassignTags?: Tags;
}
interface BulkUpdateOrderTagsResponse {
    results?: BulkUpdateOrderTagsResult[];
    bulkActionMetadata?: BulkActionMetadata$2;
}
interface BulkUpdateOrderTagsResult {
    itemMetadata?: ItemMetadata$2;
}
interface PreparePaymentCollectionResponseNonNullableFields {
    paymentGatewayOrderId: string;
}
interface PriceNonNullableFields$6 {
    amount: string;
    formattedAmount: string;
}
interface GetPaymentCollectabilityStatusResponseNonNullableFields {
    status: PaymentCollectabilityStatus;
    amount?: PriceNonNullableFields$6;
    authorizationSupported: boolean;
}
interface AuthorizationActionFailureDetailsNonNullableFields$2 {
    failureCode: string;
}
interface AuthorizationCaptureNonNullableFields$2 {
    status: AuthorizationCaptureStatus$2;
    amount?: PriceNonNullableFields$6;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields$2;
}
interface AuthorizationVoidNonNullableFields$2 {
    status: AuthorizationVoidStatus$2;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields$2;
    reason: Reason$2;
}
interface V1ScheduledActionNonNullableFields {
    actionType: ActionType$2;
}
interface AuthorizationDetailsNonNullableFields$2 {
    delayedCapture: boolean;
    captures: AuthorizationCaptureNonNullableFields$2[];
    void?: AuthorizationVoidNonNullableFields$2;
    scheduledAction?: V1ScheduledActionNonNullableFields;
}
interface RegularPaymentDetailsNonNullableFields$2 {
    offlinePayment: boolean;
    status: TransactionStatus$2;
    savedPaymentMethod: boolean;
    authorizationDetails?: AuthorizationDetailsNonNullableFields$2;
}
interface GiftCardPaymentDetailsNonNullableFields$2 {
    giftCardPaymentId: string;
    giftCardId: string;
    appId: string;
    voided: boolean;
}
interface MembershipNameNonNullableFields$4 {
    original: string;
}
interface MembershipPaymentDetailsNonNullableFields$2 {
    membershipId: string;
    lineItemId: string;
    status: MembershipPaymentStatus$2;
    name?: MembershipNameNonNullableFields$4;
    voided: boolean;
    providerAppId: string;
}
interface PaymentNonNullableFields$2 {
    regularPaymentDetails?: RegularPaymentDetailsNonNullableFields$2;
    giftcardPaymentDetails?: GiftCardPaymentDetailsNonNullableFields$2;
    membershipPaymentDetails?: MembershipPaymentDetailsNonNullableFields$2;
    amount?: PriceNonNullableFields$6;
    refundDisabled: boolean;
}
interface RefundTransactionNonNullableFields$2 {
    paymentId: string;
    amount?: PriceNonNullableFields$6;
    refundStatus: RefundStatus$2;
    externalRefund: boolean;
}
interface RefundItemNonNullableFields$2 {
    lineItemId: string;
    quantity: number;
}
interface LineItemRefundNonNullableFields$2 {
    lineItemId: string;
    quantity: number;
}
interface AdditionalFeeRefundNonNullableFields$2 {
    additionalFeeId: string;
    amount?: PriceNonNullableFields$6;
}
interface ShippingRefundNonNullableFields$2 {
    amount?: PriceNonNullableFields$6;
}
interface RefundDetailsNonNullableFields$2 {
    items: RefundItemNonNullableFields$2[];
    shippingIncluded: boolean;
    lineItems: LineItemRefundNonNullableFields$2[];
    additionalFees: AdditionalFeeRefundNonNullableFields$2[];
    shipping?: ShippingRefundNonNullableFields$2;
}
interface AggregatedRefundSummaryNonNullableFields$2 {
    requestedRefund?: PriceNonNullableFields$6;
    pendingRefund?: PriceNonNullableFields$6;
    refunded?: PriceNonNullableFields$6;
    failedRefundAmount?: PriceNonNullableFields$6;
    pending: boolean;
}
interface RefundNonNullableFields$2 {
    _id: string;
    transactions: RefundTransactionNonNullableFields$2[];
    details?: RefundDetailsNonNullableFields$2;
    summary?: AggregatedRefundSummaryNonNullableFields$2;
}
interface OrderTransactionsNonNullableFields$2 {
    orderId: string;
    payments: PaymentNonNullableFields$2[];
    refunds: RefundNonNullableFields$2[];
}
interface VoidAuthorizedPaymentsResponseNonNullableFields {
    orderTransactions?: OrderTransactionsNonNullableFields$2;
}
interface CaptureAuthorizedPaymentsResponseNonNullableFields {
    orderTransactions?: OrderTransactionsNonNullableFields$2;
}
interface ProductNameNonNullableFields {
    original: string;
}
interface CatalogReferenceNonNullableFields {
    catalogItemId: string;
    appId: string;
}
interface PlainTextValueNonNullableFields {
    original: string;
}
interface ColorNonNullableFields {
    original: string;
}
interface DescriptionLineNameNonNullableFields {
    original: string;
}
interface DescriptionLineNonNullableFields {
    plainText?: PlainTextValueNonNullableFields;
    colorInfo?: ColorNonNullableFields;
    plainTextValue?: PlainTextValueNonNullableFields;
    color: string;
    name?: DescriptionLineNameNonNullableFields;
    lineType: DescriptionLineType;
}
interface PhysicalPropertiesNonNullableFields {
    shippable: boolean;
}
interface ItemTypeNonNullableFields {
    preset: ItemTypeItemType$2;
    custom: string;
}
interface ItemTaxFullDetailsNonNullableFields$2 {
    taxableAmount?: PriceNonNullableFields$6;
    taxRate: string;
    totalTax?: PriceNonNullableFields$6;
}
interface LineItemTaxBreakdownNonNullableFields {
    taxAmount?: PriceNonNullableFields$6;
    jurisdictionType: JurisdictionType$2;
    nonTaxableAmount?: PriceNonNullableFields$6;
    taxableAmount?: PriceNonNullableFields$6;
}
interface LineItemTaxInfoNonNullableFields {
    taxAmount?: PriceNonNullableFields$6;
    taxableAmount?: PriceNonNullableFields$6;
    taxIncludedInPrice: boolean;
    taxBreakdown: LineItemTaxBreakdownNonNullableFields[];
}
interface DigitalFileNonNullableFields {
    fileId: string;
}
interface SubscriptionSettingsNonNullableFields {
    frequency: SubscriptionFrequency$2;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
}
interface SubscriptionInfoNonNullableFields {
    cycleNumber: number;
    subscriptionOptionTitle: string;
    subscriptionSettings?: SubscriptionSettingsNonNullableFields;
}
interface PriceDescriptionNonNullableFields {
    original: string;
}
interface LocationAndQuantityNonNullableFields {
    _id: string;
    quantity: number;
}
interface TaxableAddressNonNullableFields$2 {
    addressType: TaxableAddressType$2;
}
interface OrderLineItemNonNullableFields {
    _id: string;
    productName?: ProductNameNonNullableFields;
    catalogReference?: CatalogReferenceNonNullableFields;
    quantity: number;
    totalDiscount?: PriceNonNullableFields$6;
    descriptionLines: DescriptionLineNonNullableFields[];
    image: string;
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    itemType?: ItemTypeNonNullableFields;
    price?: PriceNonNullableFields$6;
    priceBeforeDiscounts?: PriceNonNullableFields$6;
    totalPriceBeforeTax?: PriceNonNullableFields$6;
    totalPriceAfterTax?: PriceNonNullableFields$6;
    paymentOption: PaymentOptionType$2;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$2;
    taxInfo?: LineItemTaxInfoNonNullableFields;
    digitalFile?: DigitalFileNonNullableFields;
    subscriptionInfo?: SubscriptionInfoNonNullableFields;
    priceDescription?: PriceDescriptionNonNullableFields;
    depositAmount?: PriceNonNullableFields$6;
    locations: LocationAndQuantityNonNullableFields[];
    lineItemPrice?: PriceNonNullableFields$6;
    taxableAddress?: TaxableAddressNonNullableFields$2;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
}
interface BuyerInfoNonNullableFields {
    visitorId: string;
    memberId: string;
}
interface PriceSummaryNonNullableFields$2 {
    subtotal?: PriceNonNullableFields$6;
    shipping?: PriceNonNullableFields$6;
    tax?: PriceNonNullableFields$6;
    discount?: PriceNonNullableFields$6;
    totalPrice?: PriceNonNullableFields$6;
    total?: PriceNonNullableFields$6;
    totalWithGiftCard?: PriceNonNullableFields$6;
    totalWithoutGiftCard?: PriceNonNullableFields$6;
    totalAdditionalFees?: PriceNonNullableFields$6;
}
interface StreetAddressNonNullableFields$8 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$8 {
    streetAddress?: StreetAddressNonNullableFields$8;
}
interface VatIdNonNullableFields {
    _id: string;
    type: VatType$2;
}
interface FullAddressContactDetailsNonNullableFields {
    vatId?: VatIdNonNullableFields;
}
interface AddressWithContactNonNullableFields {
    address?: AddressNonNullableFields$8;
    contactDetails?: FullAddressContactDetailsNonNullableFields;
}
interface PickupAddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields$8;
}
interface PickupDetailsNonNullableFields$4 {
    address?: PickupAddressNonNullableFields;
    pickupMethod: PickupMethod$4;
}
interface DeliveryLogisticsNonNullableFields$4 {
    shippingDestination?: AddressWithContactNonNullableFields;
    pickupDetails?: PickupDetailsNonNullableFields$4;
}
interface ShippingPriceNonNullableFields$2 {
    price?: PriceNonNullableFields$6;
    totalPriceBeforeTax?: PriceNonNullableFields$6;
    totalPriceAfterTax?: PriceNonNullableFields$6;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$2;
    discount?: PriceNonNullableFields$6;
}
interface V1ShippingInformationNonNullableFields {
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$4;
    cost?: ShippingPriceNonNullableFields$2;
}
interface TaxSummaryNonNullableFields$2 {
    totalTax?: PriceNonNullableFields$6;
}
interface OrderTaxBreakdownNonNullableFields {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionType: JurisdictionType$2;
    rate: string;
    aggregatedTaxAmount?: PriceNonNullableFields$6;
    aggregatedTaxableAmount?: PriceNonNullableFields$6;
}
interface OrderTaxInfoNonNullableFields {
    totalTax?: PriceNonNullableFields$6;
    taxBreakdown: OrderTaxBreakdownNonNullableFields[];
}
interface CouponNonNullableFields$2 {
    _id: string;
    code: string;
    name: string;
    amount?: PriceNonNullableFields$6;
}
interface MerchantDiscountNonNullableFields$2 {
    discountReason: DiscountReason;
    amount?: PriceNonNullableFields$6;
}
interface DiscountRuleNameNonNullableFields$2 {
    original: string;
}
interface DiscountRuleNonNullableFields$2 {
    _id: string;
    name?: DiscountRuleNameNonNullableFields$2;
    amount?: PriceNonNullableFields$6;
}
interface LineItemDiscountNonNullableFields$2 {
    _id: string;
    totalDiscount?: PriceNonNullableFields$6;
}
interface AppliedDiscountNonNullableFields$2 {
    coupon?: CouponNonNullableFields$2;
    merchantDiscount?: MerchantDiscountNonNullableFields$2;
    discountRule?: DiscountRuleNonNullableFields$2;
    discountType: DiscountType$2;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$2[];
}
interface CustomActivityNonNullableFields {
    appId: string;
    type: string;
}
interface MerchantCommentNonNullableFields {
    message: string;
}
interface OrderRefundedNonNullableFields {
    manual: boolean;
    amount?: PriceNonNullableFields$6;
    reason: string;
}
interface OrderCreatedFromExchangeNonNullableFields {
    originalOrderId: string;
}
interface LineItemExchangeDataNonNullableFields {
    lineItemId: string;
    quantity: number;
}
interface NewExchangeOrderCreatedNonNullableFields {
    exchangeOrderId: string;
    lineItems: LineItemExchangeDataNonNullableFields[];
}
interface LineItemQuantityChangeNonNullableFields {
    originalQuantity: number;
    newQuantity: number;
    diff: number;
    deltaType: LineItemQuantityChangeType;
}
interface LineItemPriceChangeNonNullableFields {
    originalPrice?: PriceNonNullableFields$6;
    newPrice?: PriceNonNullableFields$6;
}
interface LineItemChangesNonNullableFields {
    _id: string;
    name?: ProductNameNonNullableFields;
    quantity?: LineItemQuantityChangeNonNullableFields;
    price?: LineItemPriceChangeNonNullableFields;
}
interface ManagedLineItemNonNullableFields {
    _id: string;
    name?: ProductNameNonNullableFields;
    quantity: number;
}
interface TranslatedValueNonNullableFields {
    original: string;
}
interface LineItemAmountNonNullableFields {
    _id: string;
    name?: ProductNameNonNullableFields;
    amount?: PriceNonNullableFields$6;
}
interface ManagedDiscountNonNullableFields {
    _id: string;
    name?: TranslatedValueNonNullableFields;
    affectedLineItems: LineItemAmountNonNullableFields[];
    totalAmount?: PriceNonNullableFields$6;
}
interface ManagedAdditionalFeeNonNullableFields {
    _id: string;
    name?: TranslatedValueNonNullableFields;
    affectedLineItems: LineItemAmountNonNullableFields[];
    totalAmount?: PriceNonNullableFields$6;
}
interface TotalPriceChangeNonNullableFields {
    originalTotal?: PriceNonNullableFields$6;
    newTotal?: PriceNonNullableFields$6;
}
interface ShippingInformationNonNullableFields$2 {
    total?: PriceNonNullableFields$6;
    shippingTitle: string;
}
interface ShippingInformationChangeNonNullableFields {
    originalShippingInfo?: ShippingInformationNonNullableFields$2;
    newShippingInfo?: ShippingInformationNonNullableFields$2;
}
interface OrderChangeNonNullableFields {
    lineItemChanged?: LineItemChangesNonNullableFields;
    lineItemAdded?: ManagedLineItemNonNullableFields;
    lineItemRemoved?: ManagedLineItemNonNullableFields;
    discountAdded?: ManagedDiscountNonNullableFields;
    discountRemoved?: ManagedDiscountNonNullableFields;
    additionalFeeAdded?: ManagedAdditionalFeeNonNullableFields;
    additionalFeeRemoved?: ManagedAdditionalFeeNonNullableFields;
    totalPriceChanged?: TotalPriceChangeNonNullableFields;
    shippingInformationChanged?: ShippingInformationChangeNonNullableFields;
}
interface DraftOrderChangesAppliedNonNullableFields {
    draftOrderId: string;
    changes: OrderChangeNonNullableFields[];
}
interface SavedPaymentMethodNonNullableFields {
    name: string;
}
interface AuthorizedPaymentCreatedNonNullableFields {
    paymentId: string;
    amount?: PriceNonNullableFields$6;
}
interface AuthorizedPaymentCapturedNonNullableFields {
    paymentId: string;
    amount?: PriceNonNullableFields$6;
}
interface AuthorizedPaymentVoidedNonNullableFields {
    paymentId: string;
    amount?: PriceNonNullableFields$6;
}
interface RegularPaymentRefundNonNullableFields {
    amount?: PriceNonNullableFields$6;
}
interface GiftCardPaymentRefundNonNullableFields {
    amount?: PriceNonNullableFields$6;
}
interface RefundedPaymentNonNullableFields {
    regular?: RegularPaymentRefundNonNullableFields;
    giftCard?: GiftCardPaymentRefundNonNullableFields;
    paymentId: string;
    externalRefund: boolean;
}
interface RefundInitiatedNonNullableFields {
    refundId: string;
    amount?: PriceNonNullableFields$6;
    payments: RefundedPaymentNonNullableFields[];
}
interface PaymentRefundedNonNullableFields {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields;
}
interface PaymentRefundFailedNonNullableFields {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields;
}
interface RefundedAsStoreCreditNonNullableFields {
    amount?: PriceNonNullableFields$6;
}
interface RegularPaymentNonNullableFields {
    amount?: PriceNonNullableFields$6;
}
interface PaymentPendingNonNullableFields {
    regular?: RegularPaymentNonNullableFields;
    paymentId: string;
}
interface PaymentCanceledNonNullableFields {
    regular?: RegularPaymentNonNullableFields;
    paymentId: string;
}
interface PaymentDeclinedNonNullableFields {
    regular?: RegularPaymentNonNullableFields;
    paymentId: string;
}
interface ActivityNonNullableFields {
    customActivity?: CustomActivityNonNullableFields;
    merchantComment?: MerchantCommentNonNullableFields;
    orderRefunded?: OrderRefundedNonNullableFields;
    orderCreatedFromExchange?: OrderCreatedFromExchangeNonNullableFields;
    newExchangeOrderCreated?: NewExchangeOrderCreatedNonNullableFields;
    draftOrderChangesApplied?: DraftOrderChangesAppliedNonNullableFields;
    savedPaymentMethod?: SavedPaymentMethodNonNullableFields;
    authorizedPaymentCreated?: AuthorizedPaymentCreatedNonNullableFields;
    authorizedPaymentCaptured?: AuthorizedPaymentCapturedNonNullableFields;
    authorizedPaymentVoided?: AuthorizedPaymentVoidedNonNullableFields;
    refundInitiated?: RefundInitiatedNonNullableFields;
    paymentRefunded?: PaymentRefundedNonNullableFields;
    paymentRefundFailed?: PaymentRefundFailedNonNullableFields;
    refundedAsStoreCredit?: RefundedAsStoreCreditNonNullableFields;
    paymentPending?: PaymentPendingNonNullableFields;
    paymentCanceled?: PaymentCanceledNonNullableFields;
    paymentDeclined?: PaymentDeclinedNonNullableFields;
    type: ActivityType;
}
interface CreatedByNonNullableFields {
    userId: string;
    memberId: string;
    visitorId: string;
    appId: string;
}
interface ChannelInfoNonNullableFields {
    type: ChannelType;
}
interface CustomFieldNonNullableFields {
    title: string;
}
interface BalanceNonNullableFields {
    amount: string;
    formattedAmount: string;
}
interface BalanceSummaryNonNullableFields {
    balance?: BalanceNonNullableFields;
    paid?: PriceNonNullableFields$6;
    refunded?: PriceNonNullableFields$6;
    authorized?: PriceNonNullableFields$6;
    pendingRefund?: PriceNonNullableFields$6;
    pending?: PriceNonNullableFields$6;
}
interface AdditionalFeeNonNullableFields {
    name: string;
    price?: PriceNonNullableFields$6;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$2;
    priceBeforeTax?: PriceNonNullableFields$6;
    priceAfterTax?: PriceNonNullableFields$6;
    _id: string;
    lineItemIds: string[];
}
interface TagListNonNullableFields {
    tagIds: string[];
}
interface TagsNonNullableFields {
    privateTags?: TagListNonNullableFields;
    tags?: TagListNonNullableFields;
}
interface OrderNonNullableFields {
    number: string;
    lineItems: OrderLineItemNonNullableFields[];
    buyerInfo?: BuyerInfoNonNullableFields;
    paymentStatus: PaymentStatus;
    fulfillmentStatus: FulfillmentStatus;
    weightUnit: WeightUnit$4;
    taxIncludedInPrices: boolean;
    priceSummary?: PriceSummaryNonNullableFields$2;
    billingInfo?: AddressWithContactNonNullableFields;
    shippingInfo?: V1ShippingInformationNonNullableFields;
    status: OrderStatus;
    taxSummary?: TaxSummaryNonNullableFields$2;
    taxInfo?: OrderTaxInfoNonNullableFields;
    appliedDiscounts: AppliedDiscountNonNullableFields$2[];
    activities: ActivityNonNullableFields[];
    attributionSource: AttributionSource;
    createdBy?: CreatedByNonNullableFields;
    channelInfo?: ChannelInfoNonNullableFields;
    customFields: CustomFieldNonNullableFields[];
    isInternalOrderCreate: boolean;
    payNow?: PriceSummaryNonNullableFields$2;
    balanceSummary?: BalanceSummaryNonNullableFields;
    additionalFees: AdditionalFeeNonNullableFields[];
    recipientInfo?: AddressWithContactNonNullableFields;
    tags?: TagsNonNullableFields;
}
interface GetOrderResponseNonNullableFields {
    order?: OrderNonNullableFields;
}
interface SearchOrdersResponseNonNullableFields {
    orders: OrderNonNullableFields[];
}
interface CreateOrderResponseNonNullableFields {
    order?: OrderNonNullableFields;
}
interface UpdateOrderResponseNonNullableFields {
    order?: OrderNonNullableFields;
}
interface ApplicationErrorNonNullableFields$8 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$2 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$8;
}
interface BulkOrderResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields$2;
    item?: OrderNonNullableFields;
}
interface BulkActionMetadataNonNullableFields$2 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkUpdateOrdersResponseNonNullableFields {
    results: BulkOrderResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$2;
}
interface CancelOrderResponseNonNullableFields {
    order?: OrderNonNullableFields;
}
interface BulkUpdateOrderTagsResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields$2;
}
interface BulkUpdateOrderTagsResponseNonNullableFields {
    results: BulkUpdateOrderTagsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$2;
}

type __PublicMethodMetaInfo$c<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function preparePaymentCollection(): __PublicMethodMetaInfo$c<'POST', {
    ecomOrderId: string;
}, PreparePaymentCollectionRequest, PreparePaymentCollectionRequest$1, PreparePaymentCollectionResponse & PreparePaymentCollectionResponseNonNullableFields, PreparePaymentCollectionResponse$1 & PreparePaymentCollectionResponseNonNullableFields$1>;
declare function getPaymentCollectabilityStatus(): __PublicMethodMetaInfo$c<'GET', {
    ecomOrderId: string;
}, GetPaymentCollectabilityStatusRequest, GetPaymentCollectabilityStatusRequest$1, GetPaymentCollectabilityStatusResponse & GetPaymentCollectabilityStatusResponseNonNullableFields, GetPaymentCollectabilityStatusResponse$1 & GetPaymentCollectabilityStatusResponseNonNullableFields$1>;
declare function voidAuthorizedPayments(): __PublicMethodMetaInfo$c<'POST', {
    ecomOrderId: string;
}, VoidAuthorizedPaymentsRequest, VoidAuthorizedPaymentsRequest$1, VoidAuthorizedPaymentsResponse & VoidAuthorizedPaymentsResponseNonNullableFields, VoidAuthorizedPaymentsResponse$1 & VoidAuthorizedPaymentsResponseNonNullableFields$1>;
declare function captureAuthorizedPayments(): __PublicMethodMetaInfo$c<'POST', {
    ecomOrderId: string;
}, CaptureAuthorizedPaymentsRequest, CaptureAuthorizedPaymentsRequest$1, CaptureAuthorizedPaymentsResponse & CaptureAuthorizedPaymentsResponseNonNullableFields, CaptureAuthorizedPaymentsResponse$1 & CaptureAuthorizedPaymentsResponseNonNullableFields$1>;
declare function getOrder(): __PublicMethodMetaInfo$c<'GET', {
    id: string;
}, GetOrderRequest, GetOrderRequest$1, GetOrderResponse & GetOrderResponseNonNullableFields, GetOrderResponse$1 & GetOrderResponseNonNullableFields$1>;
declare function searchOrders(): __PublicMethodMetaInfo$c<'POST', {}, SearchOrdersRequest, SearchOrdersRequest$1, SearchOrdersResponse & SearchOrdersResponseNonNullableFields, SearchOrdersResponse$1 & SearchOrdersResponseNonNullableFields$1>;
declare function createOrder(): __PublicMethodMetaInfo$c<'POST', {}, CreateOrderRequest, CreateOrderRequest$1, CreateOrderResponse & CreateOrderResponseNonNullableFields, CreateOrderResponse$1 & CreateOrderResponseNonNullableFields$1>;
declare function updateOrder(): __PublicMethodMetaInfo$c<'PATCH', {
    orderId: string;
}, UpdateOrderRequest, UpdateOrderRequest$1, UpdateOrderResponse & UpdateOrderResponseNonNullableFields, UpdateOrderResponse$1 & UpdateOrderResponseNonNullableFields$1>;
declare function bulkUpdateOrders(): __PublicMethodMetaInfo$c<'POST', {}, BulkUpdateOrdersRequest, BulkUpdateOrdersRequest$1, BulkUpdateOrdersResponse & BulkUpdateOrdersResponseNonNullableFields, BulkUpdateOrdersResponse$1 & BulkUpdateOrdersResponseNonNullableFields$1>;
declare function cancelOrder(): __PublicMethodMetaInfo$c<'POST', {
    id: string;
}, CancelOrderRequest, CancelOrderRequest$1, CancelOrderResponse & CancelOrderResponseNonNullableFields, CancelOrderResponse$1 & CancelOrderResponseNonNullableFields$1>;
declare function bulkUpdateOrderTags(): __PublicMethodMetaInfo$c<'POST', {}, BulkUpdateOrderTagsRequest, BulkUpdateOrderTagsRequest$1, BulkUpdateOrderTagsResponse & BulkUpdateOrderTagsResponseNonNullableFields, BulkUpdateOrderTagsResponse$1 & BulkUpdateOrderTagsResponseNonNullableFields$1>;

declare const meta$c_bulkUpdateOrderTags: typeof bulkUpdateOrderTags;
declare const meta$c_bulkUpdateOrders: typeof bulkUpdateOrders;
declare const meta$c_cancelOrder: typeof cancelOrder;
declare const meta$c_captureAuthorizedPayments: typeof captureAuthorizedPayments;
declare const meta$c_createOrder: typeof createOrder;
declare const meta$c_getOrder: typeof getOrder;
declare const meta$c_getPaymentCollectabilityStatus: typeof getPaymentCollectabilityStatus;
declare const meta$c_preparePaymentCollection: typeof preparePaymentCollection;
declare const meta$c_searchOrders: typeof searchOrders;
declare const meta$c_updateOrder: typeof updateOrder;
declare const meta$c_voidAuthorizedPayments: typeof voidAuthorizedPayments;
declare namespace meta$c {
  export { type __PublicMethodMetaInfo$c as __PublicMethodMetaInfo, meta$c_bulkUpdateOrderTags as bulkUpdateOrderTags, meta$c_bulkUpdateOrders as bulkUpdateOrders, meta$c_cancelOrder as cancelOrder, meta$c_captureAuthorizedPayments as captureAuthorizedPayments, meta$c_createOrder as createOrder, meta$c_getOrder as getOrder, meta$c_getPaymentCollectabilityStatus as getPaymentCollectabilityStatus, meta$c_preparePaymentCollection as preparePaymentCollection, meta$c_searchOrders as searchOrders, meta$c_updateOrder as updateOrder, meta$c_voidAuthorizedPayments as voidAuthorizedPayments };
}

interface OrderPaymentRequest$1 {
    /**
     * Order payment request ID.
     * @readonly
     */
    id?: string | null;
    /** Additional parameters to identify the source of the order payment request. */
    source?: Source$1;
    /**
     * status.
     * @readonly
     */
    status?: Status$1;
    /** Order ID. */
    orderId?: string;
    /**
     * Order number.
     * @readonly
     */
    orderNumber?: string | null;
    /**
     * Amount to collect.
     * > **Note:** The amount can only be set once.
     */
    amount?: Price$5;
    /**
     * Currency code. The value will always match the currency used in the order.
     * @readonly
     */
    currency?: string;
    /**
     * Payment gateway order id which is associated with this payment request
     * @readonly
     */
    paymentGatewayOrderId?: string | null;
    /** Title to be displayed to the customer on the payment page. Provide a clear and descriptive title to inform the customer about what they are paying for. */
    title?: string;
    /** Description to be displayed to the customer on the payment page. Write a detailed description so the customer understands what they are paying for. */
    description?: string | null;
    /** Image to be displayed to the customer on the payment page. */
    image?: Image;
    /** Time and date the order payment request expires. */
    expirationDate?: Date | null;
    /** [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls. */
    extendedFields?: ExtendedFields$7;
    /**
     * Date and time the OrderPaymentRequest was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the OrderPaymentRequest was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
}
interface Source$1 {
    /** App Def ID that created the order payment request. */
    appId?: string | null;
    /** Reference to an ID from an external system, indicating the original source of the order payment request. */
    externalId?: string;
}
declare enum Status$1 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    UNPAID = "UNPAID",
    PAID = "PAID",
    EXPIRED = "EXPIRED"
}
interface Price$5 {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface Image {
    /** WixMedia image ID. */
    id?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface ExtendedFields$7 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateOrderPaymentRequestRequest$1 {
    /** OrderPaymentRequest to be created. */
    orderPaymentRequest?: OrderPaymentRequest$1;
}
interface CreateOrderPaymentRequestResponse$1 {
    /** The created OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest$1;
    /** Order payment request URL. */
    orderPaymentRequestUrl?: string;
}
interface GetOrderPaymentRequestRequest$1 {
    /** ID of the OrderPaymentRequest to retrieve. */
    orderPaymentRequestId: string;
}
interface GetOrderPaymentRequestResponse$1 {
    /** The requested OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest$1;
}
interface UpdateOrderPaymentRequestRequest$1 {
    /** OrderPaymentRequest to be updated, may be partial. */
    orderPaymentRequest: OrderPaymentRequest$1;
}
interface UpdateOrderPaymentRequestResponse$1 {
    /** Updated OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest$1;
}
interface DeleteOrderPaymentRequestRequest$1 {
    /** Id of the OrderPaymentRequest to delete. */
    orderPaymentRequestId: string;
}
interface DeleteOrderPaymentRequestResponse$1 {
}
interface QueryOrderPaymentRequestsRequest$1 {
    /** WQL expression. */
    query?: CursorQuery$7;
}
interface CursorQuery$7 extends CursorQueryPagingMethodOneOf$7 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$b;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$b[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$7 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$b;
}
interface Sorting$b {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$b;
}
declare enum SortOrder$b {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$b {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryOrderPaymentRequestsResponse$1 {
    /** List of payment requests. */
    orderPaymentRequests?: OrderPaymentRequest$1[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$9;
}
interface CursorPagingMetadata$9 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$b;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$b {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetOrderPaymentRequestURLRequest$1 {
    /** Order Payment Request ID. */
    orderPaymentRequestId: string;
}
interface GetOrderPaymentRequestURLResponse$1 {
    /** Order Payment Request URL. */
    orderPaymentRequestUrl?: string;
}
interface UpdateExtendedFieldsRequest$5 {
    /** ID of the entity to update. */
    id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse$5 {
    /** Updated OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest$1;
}
interface SourceNonNullableFields$1 {
    externalId: string;
}
interface PriceNonNullableFields$5 {
    amount: string;
    formattedAmount: string;
}
interface ImageNonNullableFields {
    id: string;
    height: number;
    width: number;
}
interface OrderPaymentRequestNonNullableFields$1 {
    source?: SourceNonNullableFields$1;
    status: Status$1;
    orderId: string;
    amount?: PriceNonNullableFields$5;
    currency: string;
    title: string;
    image?: ImageNonNullableFields;
}
interface CreateOrderPaymentRequestResponseNonNullableFields$1 {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields$1;
    orderPaymentRequestUrl: string;
}
interface GetOrderPaymentRequestResponseNonNullableFields$1 {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields$1;
}
interface UpdateOrderPaymentRequestResponseNonNullableFields$1 {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields$1;
}
interface QueryOrderPaymentRequestsResponseNonNullableFields$1 {
    orderPaymentRequests: OrderPaymentRequestNonNullableFields$1[];
}
interface GetOrderPaymentRequestURLResponseNonNullableFields$1 {
    orderPaymentRequestUrl: string;
}
interface UpdateExtendedFieldsResponseNonNullableFields$5 {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields$1;
}

interface OrderPaymentRequest {
    /**
     * Order payment request ID.
     * @readonly
     */
    _id?: string | null;
    /** Additional parameters to identify the source of the order payment request. */
    source?: Source;
    /**
     * status.
     * @readonly
     */
    status?: Status;
    /** Order ID. */
    orderId?: string;
    /**
     * Order number.
     * @readonly
     */
    orderNumber?: string | null;
    /**
     * Amount to collect.
     * > **Note:** The amount can only be set once.
     */
    amount?: Price$4;
    /**
     * Currency code. The value will always match the currency used in the order.
     * @readonly
     */
    currency?: string;
    /**
     * Payment gateway order id which is associated with this payment request
     * @readonly
     */
    paymentGatewayOrderId?: string | null;
    /** Title to be displayed to the customer on the payment page. Provide a clear and descriptive title to inform the customer about what they are paying for. */
    title?: string;
    /** Description to be displayed to the customer on the payment page. Write a detailed description so the customer understands what they are paying for. */
    description?: string | null;
    /** Image to be displayed to the customer on the payment page. */
    image?: string;
    /** Time and date the order payment request expires. */
    expirationDate?: Date | null;
    /** [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls. */
    extendedFields?: ExtendedFields$6;
    /**
     * Date and time the OrderPaymentRequest was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the OrderPaymentRequest was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
}
interface Source {
    /** App Def ID that created the order payment request. */
    appId?: string | null;
    /** Reference to an ID from an external system, indicating the original source of the order payment request. */
    externalId?: string;
}
declare enum Status {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    UNPAID = "UNPAID",
    PAID = "PAID",
    EXPIRED = "EXPIRED"
}
interface Price$4 {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface ExtendedFields$6 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateOrderPaymentRequestRequest {
    /** OrderPaymentRequest to be created. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface CreateOrderPaymentRequestResponse {
    /** The created OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
    /** Order payment request URL. */
    orderPaymentRequestUrl?: string;
}
interface GetOrderPaymentRequestRequest {
    /** ID of the OrderPaymentRequest to retrieve. */
    orderPaymentRequestId: string;
}
interface GetOrderPaymentRequestResponse {
    /** The requested OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface UpdateOrderPaymentRequestRequest {
    /** OrderPaymentRequest to be updated, may be partial. */
    orderPaymentRequest: OrderPaymentRequest;
}
interface UpdateOrderPaymentRequestResponse {
    /** Updated OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface DeleteOrderPaymentRequestRequest {
    /** Id of the OrderPaymentRequest to delete. */
    orderPaymentRequestId: string;
}
interface DeleteOrderPaymentRequestResponse {
}
interface QueryOrderPaymentRequestsRequest {
    /** WQL expression. */
    query?: CursorQuery$6;
}
interface CursorQuery$6 extends CursorQueryPagingMethodOneOf$6 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$a;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$a[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$6 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$a;
}
interface Sorting$a {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$a;
}
declare enum SortOrder$a {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$a {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryOrderPaymentRequestsResponse {
    /** List of payment requests. */
    orderPaymentRequests?: OrderPaymentRequest[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$8;
}
interface CursorPagingMetadata$8 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$a;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$a {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetOrderPaymentRequestURLRequest {
    /** Order Payment Request ID. */
    orderPaymentRequestId: string;
}
interface GetOrderPaymentRequestURLResponse {
    /** Order Payment Request URL. */
    orderPaymentRequestUrl?: string;
}
interface UpdateExtendedFieldsRequest$4 {
    /** ID of the entity to update. */
    _id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse$4 {
    /** Updated OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface SourceNonNullableFields {
    externalId: string;
}
interface PriceNonNullableFields$4 {
    amount: string;
    formattedAmount: string;
}
interface OrderPaymentRequestNonNullableFields {
    source?: SourceNonNullableFields;
    status: Status;
    orderId: string;
    amount?: PriceNonNullableFields$4;
    currency: string;
    title: string;
    image: string;
}
interface CreateOrderPaymentRequestResponseNonNullableFields {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields;
    orderPaymentRequestUrl: string;
}
interface GetOrderPaymentRequestResponseNonNullableFields {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields;
}
interface UpdateOrderPaymentRequestResponseNonNullableFields {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields;
}
interface QueryOrderPaymentRequestsResponseNonNullableFields {
    orderPaymentRequests: OrderPaymentRequestNonNullableFields[];
}
interface GetOrderPaymentRequestURLResponseNonNullableFields {
    orderPaymentRequestUrl: string;
}
interface UpdateExtendedFieldsResponseNonNullableFields$4 {
    orderPaymentRequest?: OrderPaymentRequestNonNullableFields;
}

type __PublicMethodMetaInfo$b<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createOrderPaymentRequest(): __PublicMethodMetaInfo$b<'POST', {}, CreateOrderPaymentRequestRequest, CreateOrderPaymentRequestRequest$1, CreateOrderPaymentRequestResponse & CreateOrderPaymentRequestResponseNonNullableFields, CreateOrderPaymentRequestResponse$1 & CreateOrderPaymentRequestResponseNonNullableFields$1>;
declare function getOrderPaymentRequest(): __PublicMethodMetaInfo$b<'GET', {
    orderPaymentRequestId: string;
}, GetOrderPaymentRequestRequest, GetOrderPaymentRequestRequest$1, GetOrderPaymentRequestResponse & GetOrderPaymentRequestResponseNonNullableFields, GetOrderPaymentRequestResponse$1 & GetOrderPaymentRequestResponseNonNullableFields$1>;
declare function updateOrderPaymentRequest(): __PublicMethodMetaInfo$b<'PATCH', {
    orderPaymentRequestId: string;
}, UpdateOrderPaymentRequestRequest, UpdateOrderPaymentRequestRequest$1, UpdateOrderPaymentRequestResponse & UpdateOrderPaymentRequestResponseNonNullableFields, UpdateOrderPaymentRequestResponse$1 & UpdateOrderPaymentRequestResponseNonNullableFields$1>;
declare function deleteOrderPaymentRequest(): __PublicMethodMetaInfo$b<'DELETE', {
    orderPaymentRequestId: string;
}, DeleteOrderPaymentRequestRequest, DeleteOrderPaymentRequestRequest$1, DeleteOrderPaymentRequestResponse, DeleteOrderPaymentRequestResponse$1>;
declare function queryOrderPaymentRequests(): __PublicMethodMetaInfo$b<'POST', {}, QueryOrderPaymentRequestsRequest, QueryOrderPaymentRequestsRequest$1, QueryOrderPaymentRequestsResponse & QueryOrderPaymentRequestsResponseNonNullableFields, QueryOrderPaymentRequestsResponse$1 & QueryOrderPaymentRequestsResponseNonNullableFields$1>;
declare function getOrderPaymentRequestUrl(): __PublicMethodMetaInfo$b<'POST', {}, GetOrderPaymentRequestURLRequest, GetOrderPaymentRequestURLRequest$1, GetOrderPaymentRequestURLResponse & GetOrderPaymentRequestURLResponseNonNullableFields, GetOrderPaymentRequestURLResponse$1 & GetOrderPaymentRequestURLResponseNonNullableFields$1>;
declare function updateExtendedFields$2(): __PublicMethodMetaInfo$b<'POST', {
    id: string;
}, UpdateExtendedFieldsRequest$4, UpdateExtendedFieldsRequest$5, UpdateExtendedFieldsResponse$4 & UpdateExtendedFieldsResponseNonNullableFields$4, UpdateExtendedFieldsResponse$5 & UpdateExtendedFieldsResponseNonNullableFields$5>;

declare const meta$b_createOrderPaymentRequest: typeof createOrderPaymentRequest;
declare const meta$b_deleteOrderPaymentRequest: typeof deleteOrderPaymentRequest;
declare const meta$b_getOrderPaymentRequest: typeof getOrderPaymentRequest;
declare const meta$b_getOrderPaymentRequestUrl: typeof getOrderPaymentRequestUrl;
declare const meta$b_queryOrderPaymentRequests: typeof queryOrderPaymentRequests;
declare const meta$b_updateOrderPaymentRequest: typeof updateOrderPaymentRequest;
declare namespace meta$b {
  export { type __PublicMethodMetaInfo$b as __PublicMethodMetaInfo, meta$b_createOrderPaymentRequest as createOrderPaymentRequest, meta$b_deleteOrderPaymentRequest as deleteOrderPaymentRequest, meta$b_getOrderPaymentRequest as getOrderPaymentRequest, meta$b_getOrderPaymentRequestUrl as getOrderPaymentRequestUrl, meta$b_queryOrderPaymentRequests as queryOrderPaymentRequests, updateExtendedFields$2 as updateExtendedFields, meta$b_updateOrderPaymentRequest as updateOrderPaymentRequest };
}

interface OrderTransactions$1 {
    /** Order ID. */
    orderId?: string;
    /** Record of payments made to the merchant. */
    payments?: Payment$1[];
    /** Record of refunds made to the buyer. */
    refunds?: Refund$1[];
}
interface Payment$1 extends PaymentPaymentDetailsOneOf$1 {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails$1;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails$1;
    /**
     * Payment ID.
     * @readonly
     */
    id?: string | null;
    /** Date and time the payment was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    createdDate?: Date | null;
    /**
     * Date and time the payment was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Payment amount. */
    amount?: Price$3;
    /**
     * Whether refunds for this payment are disabled.
     * + `true`: This payment is not refundable.
     * + `false`: This payment may be refunded. However, this ultimately depends on the payment provider.
     */
    refundDisabled?: boolean;
}
/** @oneof */
interface PaymentPaymentDetailsOneOf$1 {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails$1;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails$1;
}
interface RegularPaymentDetails$1 extends RegularPaymentDetailsPaymentMethodDetailsOneOf$1 {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails$1;
    /** Wix Payments order ID. */
    paymentOrderId?: string | null;
    /**
     * Payment gateway's transaction ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `offline_payment` is `false`.
     */
    gatewayTransactionId?: string | null;
    /**
     * Payment method. Non-exhaustive list of supported values:
     * + `CreditCard`, `Alipay`, `AstropayCash`, `AstropayDBT`, `AstropayMBT`, `Bitcoin`, `BitPay`, `Cash`, `ConvenienceStore`, `EPay`, `Fake`, `Giropay`, `IDeal`, `InPerson`, `Klarna`, `MercadoPago`, `Netpay`, `NordeaSolo`, `Offline`, `PagSeguro`, `PayEasy`, `PayPal`, `Paysafecard`, `Paysafecash`, `PointOfSale`, `Poli`, `Privat24`, `Przelewy24`, `RapidTransfer`, `Sepa`, `Skrill`, `Sofort`, `Trustly`, `Neteller`, `Unionpay`, `UniPay`, `Yandex`
     */
    paymentMethod?: string | null;
    /** Transaction ID in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for offline payments. */
    providerTransactionId?: string | null;
    /** Whether the payment was made offline. For example, when using cash or when marked as paid in the Business Manager. */
    offlinePayment?: boolean;
    /** Payment status. */
    status?: TransactionStatus$1;
    /** Whether there is a payment agreement that allows for future charges. */
    savedPaymentMethod?: boolean;
    /** Authorization details. */
    authorizationDetails?: AuthorizationDetails$1;
}
/** @oneof */
interface RegularPaymentDetailsPaymentMethodDetailsOneOf$1 {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails$1;
}
declare enum TransactionStatus$1 {
    UNDEFINED = "UNDEFINED",
    APPROVED = "APPROVED",
    PENDING = "PENDING",
    PENDING_MERCHANT = "PENDING_MERCHANT",
    CANCELED = "CANCELED",
    DECLINED = "DECLINED",
    REFUNDED = "REFUNDED",
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    AUTHORIZED = "AUTHORIZED",
    VOIDED = "VOIDED"
}
interface CreditCardPaymentMethodDetails$1 {
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface AuthorizationDetails$1 {
    /**
     * Whether the authorized payment is of a delayed capture.
     * @readonly
     */
    delayedCapture?: boolean;
    /** Date and time the payment was authorized in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    authorizedDate?: Date | null;
    /**
     * List of captures associated with payment
     * In case of failed it can be replaced with new one with PENDING or SUCCESS statuses
     */
    captures?: AuthorizationCapture$1[];
    /** Void associated with payment */
    void?: AuthorizationVoid$1;
    /** Scheduled action for this transaction */
    scheduledAction?: ScheduledAction$1;
}
interface AuthorizationCapture$1 {
    /**
     * Capture ID.
     * @readonly
     */
    id?: string | null;
    /** Status of this capture action */
    status?: AuthorizationCaptureStatus$1;
    /** Amount of this capture */
    amount?: Price$3;
    /** Date and time the capture was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    createdDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails$1;
}
declare enum AuthorizationCaptureStatus$1 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Whether capture operation still in progress */
    PENDING = "PENDING",
    /** The capture operation was succeeded */
    SUCCEEDED = "SUCCEEDED",
    /** The capture operation was failed */
    FAILED = "FAILED"
}
interface Price$3 {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface AuthorizationActionFailureDetails$1 {
    failureCode?: string;
}
interface AuthorizationVoid$1 {
    /** Status of this void action */
    status?: AuthorizationVoidStatus$1;
    /** Date and time the void was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    voidedDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails$1;
    /** Reason of void action */
    reason?: Reason$1;
}
declare enum AuthorizationVoidStatus$1 {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Whether void operation still in progress */
    PENDING = "PENDING",
    /** The void operation was succeeded */
    SUCCEEDED = "SUCCEEDED",
    /** The void operation was failed */
    FAILED = "FAILED"
}
/**
 * Reason the authorization was voided.
 *
 * + `MANUAL`: Authorization was voided by user.
 * + `SCHEDULED`: Authorization passed execution date.
 */
declare enum Reason$1 {
    UNKNOWN_REASON = "UNKNOWN_REASON",
    MANUAL = "MANUAL",
    SCHEDULED = "SCHEDULED"
}
interface ScheduledAction$1 {
    /** type of the action */
    actionType?: ActionType$1;
    /** the date and time of the action */
    executionDate?: Date | null;
}
declare enum ActionType$1 {
    UNKNOWN_ACTION_TYPE = "UNKNOWN_ACTION_TYPE",
    VOID = "VOID",
    CAPTURE = "CAPTURE"
}
interface GiftCardPaymentDetails$1 {
    /** Gift card payment ID. */
    giftCardPaymentId?: string;
    /** ID of the app that created the gift card. */
    appId?: string;
    /**
     * Whether the gift card is voided.
     * @readonly
     */
    voided?: boolean;
}
declare enum MembershipPaymentStatus$1 {
    /** CHARGED - Payment was charged */
    CHARGED = "CHARGED",
    /** CHARGE_FAILED - The attempt to charge that payment have failed, for example due to lack of credits */
    CHARGE_FAILED = "CHARGE_FAILED"
}
interface Refund$1 {
    /**
     * Refund ID.
     * @readonly
     */
    id?: string;
    /** List of transactions. */
    transactions?: RefundTransaction$1[];
    /** Refund business details. */
    details?: RefundDetails$1;
    /** Date and time the refund was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    createdDate?: Date | null;
}
interface RefundTransaction$1 {
    /** ID of the payment associated with this refund. */
    paymentId?: string;
    /** Refund amount. */
    amount?: Price$3;
    /** Refund status. */
    refundStatus?: RefundStatus$1;
    /**
     * Payment gateway's refund ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `external_refund` is `false`.
     */
    gatewayRefundId?: string | null;
    /** ID of the refund in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for external refunds. */
    providerRefundId?: string | null;
    /** Whether refund was made externally and manually on the payment provider's side. */
    externalRefund?: boolean;
}
/**
 * Refund transaction status.
 * + `PENDING`: Refund was initiated on payment provider side. PENDING status was assigned by provider.
 * + `SUCCEEDED`: Refund transaction succeeded.
 * + `FAILED`: Refund transaction failed.
 * + `SCHEDULED`: Refund request acknowledged, and will be executed soon.
 * + `STARTED`: Refund was initiated on payment provider side.
 */
declare enum RefundStatus$1 {
    PENDING = "PENDING",
    SUCCEEDED = "SUCCEEDED",
    FAILED = "FAILED",
    SCHEDULED = "SCHEDULED",
    STARTED = "STARTED"
}
/** Business model of a refund request */
interface RefundDetails$1 {
    /** Order line item IDs and quantities that were refunded. */
    items?: RefundItem$1[];
    /** Whether the shipping fee was also refunded. */
    shippingIncluded?: boolean;
    /** Reason for the refund, provided by customer (optional). */
    reason?: string | null;
}
interface RefundItem$1 {
    /** Line item ID the refunded line item. */
    lineItemId?: string;
    /** Line item quantity refunded. */
    quantity?: number;
}
interface ListTransactionsForSingleOrderRequest$1 {
    /** Order ID. */
    orderId: string;
}
interface ListTransactionsForSingleOrderResponse$1 {
    /** Order ID and its associated transactions. */
    orderTransactions?: OrderTransactions$1;
}
interface ListTransactionsForMultipleOrdersRequest$1 {
    /** Order IDs for which to retrieve transactions. */
    orderIds: string[];
}
interface ListTransactionsForMultipleOrdersResponse$1 {
    /** List of order IDs and their associated transactions. */
    orderTransactions?: OrderTransactions$1[];
}
interface AddPaymentsRequest$1 {
    /** Order ID. */
    orderId: string;
    /** Payments to be added to order. */
    payments: Payment$1[];
}
interface AddPaymentsResponse$1 {
    /** Order ID and its associated transactions. */
    orderTransactions?: OrderTransactions$1;
    /** IDs of added order payments. */
    paymentsIds?: string[];
}
interface UpdatePaymentStatusRequest$1 {
    /** Order ID. */
    orderId: string;
    /** Payment ID. */
    paymentId: string;
    /** Payment status. */
    status?: TransactionStatus$1;
}
interface UpdatePaymentStatusResponse$1 {
    /** Order ID and its associated transactions after update. */
    orderTransactions?: OrderTransactions$1;
}
interface BulkUpdatePaymentStatusesRequest$1 {
    /** Order and payment IDs for which to update payment status. */
    paymentAndOrderIds: PaymentAndOrderId$1[];
    /** Whether to return the full payment entity (`results.item`) in the response. */
    returnFullEntity?: boolean;
    /** Payment status. */
    status?: TransactionStatus$1;
}
interface PaymentAndOrderId$1 {
    /** Order ID. */
    orderId?: string;
    /**
     * Payment ID.
     * todo: remove comment once UI will use BulkMarkOrderAsPaid
     */
    paymentId?: string;
}
interface BulkUpdatePaymentStatusesResponse$1 {
    /** Bulk operation results. */
    results?: BulkPaymentResult$1[];
    /** Bulk operation metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkPaymentResult$1 {
    /** Item metadata. */
    itemMetadata?: ItemMetadata$1;
    /** Updated payment. Returned if `return_full_entity` set to `true`. */
    item?: Payment$1;
}
interface ItemMetadata$1 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$7;
}
interface ApplicationError$7 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$1 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface PriceNonNullableFields$3 {
    amount: string;
    formattedAmount: string;
}
interface AuthorizationActionFailureDetailsNonNullableFields$1 {
    failureCode: string;
}
interface AuthorizationCaptureNonNullableFields$1 {
    status: AuthorizationCaptureStatus$1;
    amount?: PriceNonNullableFields$3;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields$1;
}
interface AuthorizationVoidNonNullableFields$1 {
    status: AuthorizationVoidStatus$1;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields$1;
    reason: Reason$1;
}
interface ScheduledActionNonNullableFields$1 {
    actionType: ActionType$1;
}
interface AuthorizationDetailsNonNullableFields$1 {
    delayedCapture: boolean;
    captures: AuthorizationCaptureNonNullableFields$1[];
    void?: AuthorizationVoidNonNullableFields$1;
    scheduledAction?: ScheduledActionNonNullableFields$1;
}
interface RegularPaymentDetailsNonNullableFields$1 {
    offlinePayment: boolean;
    status: TransactionStatus$1;
    savedPaymentMethod: boolean;
    authorizationDetails?: AuthorizationDetailsNonNullableFields$1;
}
interface GiftCardPaymentDetailsNonNullableFields$1 {
    giftCardPaymentId: string;
    giftCardId: string;
    appId: string;
    voided: boolean;
}
interface MembershipNameNonNullableFields$3 {
    original: string;
}
interface MembershipPaymentDetailsNonNullableFields$1 {
    membershipId: string;
    lineItemId: string;
    status: MembershipPaymentStatus$1;
    name?: MembershipNameNonNullableFields$3;
    voided: boolean;
    providerAppId: string;
}
interface PaymentNonNullableFields$1 {
    regularPaymentDetails?: RegularPaymentDetailsNonNullableFields$1;
    giftcardPaymentDetails?: GiftCardPaymentDetailsNonNullableFields$1;
    membershipPaymentDetails?: MembershipPaymentDetailsNonNullableFields$1;
    amount?: PriceNonNullableFields$3;
    refundDisabled: boolean;
}
interface RefundTransactionNonNullableFields$1 {
    paymentId: string;
    amount?: PriceNonNullableFields$3;
    refundStatus: RefundStatus$1;
    externalRefund: boolean;
}
interface RefundItemNonNullableFields$1 {
    lineItemId: string;
    quantity: number;
}
interface LineItemRefundNonNullableFields$1 {
    lineItemId: string;
    quantity: number;
}
interface AdditionalFeeRefundNonNullableFields$1 {
    additionalFeeId: string;
    amount?: PriceNonNullableFields$3;
}
interface ShippingRefundNonNullableFields$1 {
    amount?: PriceNonNullableFields$3;
}
interface RefundDetailsNonNullableFields$1 {
    items: RefundItemNonNullableFields$1[];
    shippingIncluded: boolean;
    lineItems: LineItemRefundNonNullableFields$1[];
    additionalFees: AdditionalFeeRefundNonNullableFields$1[];
    shipping?: ShippingRefundNonNullableFields$1;
}
interface AggregatedRefundSummaryNonNullableFields$1 {
    requestedRefund?: PriceNonNullableFields$3;
    pendingRefund?: PriceNonNullableFields$3;
    refunded?: PriceNonNullableFields$3;
    failedRefundAmount?: PriceNonNullableFields$3;
    pending: boolean;
}
interface RefundNonNullableFields$1 {
    id: string;
    transactions: RefundTransactionNonNullableFields$1[];
    details?: RefundDetailsNonNullableFields$1;
    summary?: AggregatedRefundSummaryNonNullableFields$1;
}
interface OrderTransactionsNonNullableFields$1 {
    orderId: string;
    payments: PaymentNonNullableFields$1[];
    refunds: RefundNonNullableFields$1[];
}
interface ListTransactionsForSingleOrderResponseNonNullableFields$1 {
    orderTransactions?: OrderTransactionsNonNullableFields$1;
}
interface ListTransactionsForMultipleOrdersResponseNonNullableFields$1 {
    orderTransactions: OrderTransactionsNonNullableFields$1[];
}
interface AddPaymentsResponseNonNullableFields$1 {
    orderTransactions?: OrderTransactionsNonNullableFields$1;
    paymentsIds: string[];
}
interface UpdatePaymentStatusResponseNonNullableFields$1 {
    orderTransactions?: OrderTransactionsNonNullableFields$1;
}
interface ApplicationErrorNonNullableFields$7 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$1 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$7;
}
interface BulkPaymentResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$1;
    item?: PaymentNonNullableFields$1;
}
interface BulkActionMetadataNonNullableFields$1 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkUpdatePaymentStatusesResponseNonNullableFields$1 {
    results: BulkPaymentResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}

interface OrderTransactions {
    /** Order ID. */
    orderId?: string;
    /** Record of payments made to the merchant. */
    payments?: Payment[];
    /** Record of refunds made to the buyer. */
    refunds?: Refund[];
}
interface Payment extends PaymentPaymentDetailsOneOf {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails;
    /**
     * Payment ID.
     * @readonly
     */
    _id?: string | null;
    /** Date and time the payment was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    _createdDate?: Date | null;
    /**
     * Date and time the payment was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Payment amount. */
    amount?: Price$2;
    /**
     * Whether refunds for this payment are disabled.
     * + `true`: This payment is not refundable.
     * + `false`: This payment may be refunded. However, this ultimately depends on the payment provider.
     */
    refundDisabled?: boolean;
}
/** @oneof */
interface PaymentPaymentDetailsOneOf {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails;
}
interface RegularPaymentDetails extends RegularPaymentDetailsPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails;
    /** Wix Payments order ID. */
    paymentOrderId?: string | null;
    /**
     * Payment gateway's transaction ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `offline_payment` is `false`.
     */
    gatewayTransactionId?: string | null;
    /**
     * Payment method. Non-exhaustive list of supported values:
     * + `CreditCard`, `Alipay`, `AstropayCash`, `AstropayDBT`, `AstropayMBT`, `Bitcoin`, `BitPay`, `Cash`, `ConvenienceStore`, `EPay`, `Fake`, `Giropay`, `IDeal`, `InPerson`, `Klarna`, `MercadoPago`, `Netpay`, `NordeaSolo`, `Offline`, `PagSeguro`, `PayEasy`, `PayPal`, `Paysafecard`, `Paysafecash`, `PointOfSale`, `Poli`, `Privat24`, `Przelewy24`, `RapidTransfer`, `Sepa`, `Skrill`, `Sofort`, `Trustly`, `Neteller`, `Unionpay`, `UniPay`, `Yandex`
     */
    paymentMethod?: string | null;
    /** Transaction ID in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for offline payments. */
    providerTransactionId?: string | null;
    /** Whether the payment was made offline. For example, when using cash or when marked as paid in the Business Manager. */
    offlinePayment?: boolean;
    /** Payment status. */
    status?: TransactionStatus;
    /** Whether there is a payment agreement that allows for future charges. */
    savedPaymentMethod?: boolean;
    /** Authorization details. */
    authorizationDetails?: AuthorizationDetails;
}
/** @oneof */
interface RegularPaymentDetailsPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails;
}
declare enum TransactionStatus {
    UNDEFINED = "UNDEFINED",
    APPROVED = "APPROVED",
    PENDING = "PENDING",
    PENDING_MERCHANT = "PENDING_MERCHANT",
    CANCELED = "CANCELED",
    DECLINED = "DECLINED",
    REFUNDED = "REFUNDED",
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    AUTHORIZED = "AUTHORIZED",
    VOIDED = "VOIDED"
}
interface CreditCardPaymentMethodDetails {
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
interface AuthorizationDetails {
    /**
     * Whether the authorized payment is of a delayed capture.
     * @readonly
     */
    delayedCapture?: boolean;
    /** Date and time the payment was authorized in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    authorizedDate?: Date | null;
    /**
     * List of captures associated with payment
     * In case of failed it can be replaced with new one with PENDING or SUCCESS statuses
     */
    captures?: AuthorizationCapture[];
    /** Void associated with payment */
    void?: AuthorizationVoid;
    /** Scheduled action for this transaction */
    scheduledAction?: ScheduledAction;
}
interface AuthorizationCapture {
    /**
     * Capture ID.
     * @readonly
     */
    _id?: string | null;
    /** Status of this capture action */
    status?: AuthorizationCaptureStatus;
    /** Amount of this capture */
    amount?: Price$2;
    /** Date and time the capture was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    _createdDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails;
}
declare enum AuthorizationCaptureStatus {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Whether capture operation still in progress */
    PENDING = "PENDING",
    /** The capture operation was succeeded */
    SUCCEEDED = "SUCCEEDED",
    /** The capture operation was failed */
    FAILED = "FAILED"
}
interface Price$2 {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface AuthorizationActionFailureDetails {
    failureCode?: string;
}
interface AuthorizationVoid {
    /** Status of this void action */
    status?: AuthorizationVoidStatus;
    /** Date and time the void was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    voidedDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails;
    /** Reason of void action */
    reason?: Reason;
}
declare enum AuthorizationVoidStatus {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Whether void operation still in progress */
    PENDING = "PENDING",
    /** The void operation was succeeded */
    SUCCEEDED = "SUCCEEDED",
    /** The void operation was failed */
    FAILED = "FAILED"
}
/**
 * Reason the authorization was voided.
 *
 * + `MANUAL`: Authorization was voided by user.
 * + `SCHEDULED`: Authorization passed execution date.
 */
declare enum Reason {
    UNKNOWN_REASON = "UNKNOWN_REASON",
    MANUAL = "MANUAL",
    SCHEDULED = "SCHEDULED"
}
interface ScheduledAction {
    /** type of the action */
    actionType?: ActionType;
    /** the date and time of the action */
    executionDate?: Date | null;
}
declare enum ActionType {
    UNKNOWN_ACTION_TYPE = "UNKNOWN_ACTION_TYPE",
    VOID = "VOID",
    CAPTURE = "CAPTURE"
}
interface GiftCardPaymentDetails {
    /** Gift card payment ID. */
    giftCardPaymentId?: string;
    /** ID of the app that created the gift card. */
    appId?: string;
    /**
     * Whether the gift card is voided.
     * @readonly
     */
    voided?: boolean;
}
declare enum MembershipPaymentStatus {
    /** CHARGED - Payment was charged */
    CHARGED = "CHARGED",
    /** CHARGE_FAILED - The attempt to charge that payment have failed, for example due to lack of credits */
    CHARGE_FAILED = "CHARGE_FAILED"
}
interface Refund {
    /**
     * Refund ID.
     * @readonly
     */
    _id?: string;
    /** List of transactions. */
    transactions?: RefundTransaction[];
    /** Refund business details. */
    details?: RefundDetails;
    /** Date and time the refund was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    _createdDate?: Date | null;
}
interface RefundTransaction {
    /** ID of the payment associated with this refund. */
    paymentId?: string;
    /** Refund amount. */
    amount?: Price$2;
    /** Refund status. */
    refundStatus?: RefundStatus;
    /**
     * Payment gateway's refund ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `external_refund` is `false`.
     */
    gatewayRefundId?: string | null;
    /** ID of the refund in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for external refunds. */
    providerRefundId?: string | null;
    /** Whether refund was made externally and manually on the payment provider's side. */
    externalRefund?: boolean;
}
/**
 * Refund transaction status.
 * + `PENDING`: Refund was initiated on payment provider side. PENDING status was assigned by provider.
 * + `SUCCEEDED`: Refund transaction succeeded.
 * + `FAILED`: Refund transaction failed.
 * + `SCHEDULED`: Refund request acknowledged, and will be executed soon.
 * + `STARTED`: Refund was initiated on payment provider side.
 */
declare enum RefundStatus {
    PENDING = "PENDING",
    SUCCEEDED = "SUCCEEDED",
    FAILED = "FAILED",
    SCHEDULED = "SCHEDULED",
    STARTED = "STARTED"
}
/** Business model of a refund request */
interface RefundDetails {
    /** Order line item IDs and quantities that were refunded. */
    items?: RefundItem[];
    /** Whether the shipping fee was also refunded. */
    shippingIncluded?: boolean;
    /** Reason for the refund, provided by customer (optional). */
    reason?: string | null;
}
interface RefundItem {
    /** Line item ID the refunded line item. */
    lineItemId?: string;
    /** Line item quantity refunded. */
    quantity?: number;
}
interface ListTransactionsForSingleOrderRequest {
    /** Order ID. */
    orderId: string;
}
interface ListTransactionsForSingleOrderResponse {
    /** Order ID and its associated transactions. */
    orderTransactions?: OrderTransactions;
}
interface ListTransactionsForMultipleOrdersRequest {
    /** Order IDs for which to retrieve transactions. */
    orderIds: string[];
}
interface ListTransactionsForMultipleOrdersResponse {
    /** List of order IDs and their associated transactions. */
    orderTransactions?: OrderTransactions[];
}
interface AddPaymentsRequest {
    /** Order ID. */
    orderId: string;
    /** Payments to be added to order. */
    payments: Payment[];
}
interface AddPaymentsResponse {
    /** Order ID and its associated transactions. */
    orderTransactions?: OrderTransactions;
    /** IDs of added order payments. */
    paymentsIds?: string[];
}
interface UpdatePaymentStatusRequest {
    /** Order ID. */
    orderId: string;
    /** Payment ID. */
    paymentId: string;
    /** Payment status. */
    status?: TransactionStatus;
}
interface UpdatePaymentStatusResponse {
    /** Order ID and its associated transactions after update. */
    orderTransactions?: OrderTransactions;
}
interface BulkUpdatePaymentStatusesRequest {
    /** Order and payment IDs for which to update payment status. */
    paymentAndOrderIds: PaymentAndOrderId[];
    /** Whether to return the full payment entity (`results.item`) in the response. */
    returnFullEntity?: boolean;
    /** Payment status. */
    status?: TransactionStatus;
}
interface PaymentAndOrderId {
    /** Order ID. */
    orderId?: string;
    /**
     * Payment ID.
     * todo: remove comment once UI will use BulkMarkOrderAsPaid
     */
    paymentId?: string;
}
interface BulkUpdatePaymentStatusesResponse {
    /** Bulk operation results. */
    results?: BulkPaymentResult[];
    /** Bulk operation metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkPaymentResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata;
    /** Updated payment. Returned if `return_full_entity` set to `true`. */
    item?: Payment;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$6;
}
interface ApplicationError$6 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface PriceNonNullableFields$2 {
    amount: string;
    formattedAmount: string;
}
interface AuthorizationActionFailureDetailsNonNullableFields {
    failureCode: string;
}
interface AuthorizationCaptureNonNullableFields {
    status: AuthorizationCaptureStatus;
    amount?: PriceNonNullableFields$2;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields;
}
interface AuthorizationVoidNonNullableFields {
    status: AuthorizationVoidStatus;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields;
    reason: Reason;
}
interface ScheduledActionNonNullableFields {
    actionType: ActionType;
}
interface AuthorizationDetailsNonNullableFields {
    delayedCapture: boolean;
    captures: AuthorizationCaptureNonNullableFields[];
    void?: AuthorizationVoidNonNullableFields;
    scheduledAction?: ScheduledActionNonNullableFields;
}
interface RegularPaymentDetailsNonNullableFields {
    offlinePayment: boolean;
    status: TransactionStatus;
    savedPaymentMethod: boolean;
    authorizationDetails?: AuthorizationDetailsNonNullableFields;
}
interface GiftCardPaymentDetailsNonNullableFields {
    giftCardPaymentId: string;
    giftCardId: string;
    appId: string;
    voided: boolean;
}
interface MembershipNameNonNullableFields$2 {
    original: string;
}
interface MembershipPaymentDetailsNonNullableFields {
    membershipId: string;
    lineItemId: string;
    status: MembershipPaymentStatus;
    name?: MembershipNameNonNullableFields$2;
    voided: boolean;
    providerAppId: string;
}
interface PaymentNonNullableFields {
    regularPaymentDetails?: RegularPaymentDetailsNonNullableFields;
    giftcardPaymentDetails?: GiftCardPaymentDetailsNonNullableFields;
    membershipPaymentDetails?: MembershipPaymentDetailsNonNullableFields;
    amount?: PriceNonNullableFields$2;
    refundDisabled: boolean;
}
interface RefundTransactionNonNullableFields {
    paymentId: string;
    amount?: PriceNonNullableFields$2;
    refundStatus: RefundStatus;
    externalRefund: boolean;
}
interface RefundItemNonNullableFields {
    lineItemId: string;
    quantity: number;
}
interface LineItemRefundNonNullableFields {
    lineItemId: string;
    quantity: number;
}
interface AdditionalFeeRefundNonNullableFields {
    additionalFeeId: string;
    amount?: PriceNonNullableFields$2;
}
interface ShippingRefundNonNullableFields {
    amount?: PriceNonNullableFields$2;
}
interface RefundDetailsNonNullableFields {
    items: RefundItemNonNullableFields[];
    shippingIncluded: boolean;
    lineItems: LineItemRefundNonNullableFields[];
    additionalFees: AdditionalFeeRefundNonNullableFields[];
    shipping?: ShippingRefundNonNullableFields;
}
interface AggregatedRefundSummaryNonNullableFields {
    requestedRefund?: PriceNonNullableFields$2;
    pendingRefund?: PriceNonNullableFields$2;
    refunded?: PriceNonNullableFields$2;
    failedRefundAmount?: PriceNonNullableFields$2;
    pending: boolean;
}
interface RefundNonNullableFields {
    _id: string;
    transactions: RefundTransactionNonNullableFields[];
    details?: RefundDetailsNonNullableFields;
    summary?: AggregatedRefundSummaryNonNullableFields;
}
interface OrderTransactionsNonNullableFields {
    orderId: string;
    payments: PaymentNonNullableFields[];
    refunds: RefundNonNullableFields[];
}
interface ListTransactionsForSingleOrderResponseNonNullableFields {
    orderTransactions?: OrderTransactionsNonNullableFields;
}
interface ListTransactionsForMultipleOrdersResponseNonNullableFields {
    orderTransactions: OrderTransactionsNonNullableFields[];
}
interface AddPaymentsResponseNonNullableFields {
    orderTransactions?: OrderTransactionsNonNullableFields;
    paymentsIds: string[];
}
interface UpdatePaymentStatusResponseNonNullableFields {
    orderTransactions?: OrderTransactionsNonNullableFields;
}
interface ApplicationErrorNonNullableFields$6 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$6;
}
interface BulkPaymentResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
    item?: PaymentNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkUpdatePaymentStatusesResponseNonNullableFields {
    results: BulkPaymentResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}

type __PublicMethodMetaInfo$a<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function listTransactionsForSingleOrder(): __PublicMethodMetaInfo$a<'GET', {
    orderId: string;
}, ListTransactionsForSingleOrderRequest, ListTransactionsForSingleOrderRequest$1, ListTransactionsForSingleOrderResponse & ListTransactionsForSingleOrderResponseNonNullableFields, ListTransactionsForSingleOrderResponse$1 & ListTransactionsForSingleOrderResponseNonNullableFields$1>;
declare function listTransactionsForMultipleOrders(): __PublicMethodMetaInfo$a<'POST', {}, ListTransactionsForMultipleOrdersRequest, ListTransactionsForMultipleOrdersRequest$1, ListTransactionsForMultipleOrdersResponse & ListTransactionsForMultipleOrdersResponseNonNullableFields, ListTransactionsForMultipleOrdersResponse$1 & ListTransactionsForMultipleOrdersResponseNonNullableFields$1>;
declare function addPayments(): __PublicMethodMetaInfo$a<'POST', {
    orderId: string;
}, AddPaymentsRequest, AddPaymentsRequest$1, AddPaymentsResponse & AddPaymentsResponseNonNullableFields, AddPaymentsResponse$1 & AddPaymentsResponseNonNullableFields$1>;
declare function updatePaymentStatus(): __PublicMethodMetaInfo$a<'POST', {
    paymentId: string;
    orderId: string;
}, UpdatePaymentStatusRequest, UpdatePaymentStatusRequest$1, UpdatePaymentStatusResponse & UpdatePaymentStatusResponseNonNullableFields, UpdatePaymentStatusResponse$1 & UpdatePaymentStatusResponseNonNullableFields$1>;
declare function bulkUpdatePaymentStatuses(): __PublicMethodMetaInfo$a<'POST', {}, BulkUpdatePaymentStatusesRequest, BulkUpdatePaymentStatusesRequest$1, BulkUpdatePaymentStatusesResponse & BulkUpdatePaymentStatusesResponseNonNullableFields, BulkUpdatePaymentStatusesResponse$1 & BulkUpdatePaymentStatusesResponseNonNullableFields$1>;

declare const meta$a_addPayments: typeof addPayments;
declare const meta$a_bulkUpdatePaymentStatuses: typeof bulkUpdatePaymentStatuses;
declare const meta$a_listTransactionsForMultipleOrders: typeof listTransactionsForMultipleOrders;
declare const meta$a_listTransactionsForSingleOrder: typeof listTransactionsForSingleOrder;
declare const meta$a_updatePaymentStatus: typeof updatePaymentStatus;
declare namespace meta$a {
  export { type __PublicMethodMetaInfo$a as __PublicMethodMetaInfo, meta$a_addPayments as addPayments, meta$a_bulkUpdatePaymentStatuses as bulkUpdatePaymentStatuses, meta$a_listTransactionsForMultipleOrders as listTransactionsForMultipleOrders, meta$a_listTransactionsForSingleOrder as listTransactionsForSingleOrder, meta$a_updatePaymentStatus as updatePaymentStatus };
}

interface OrdersSettings$1 {
    /**
     * Defines when to update the store inventory:
     *
     * - `ON_ORDER_PAID`: Stock quantities will update only after the payment is approved.
     * - `ON_ORDER_PLACED`: Stock quantities will update while the payment is being processed. If the payment did not go through, items will restock.
     *
     * Default: `ON_ORDER_PLACED`
     */
    inventoryUpdateTrigger?: InventoryUpdateTrigger$1;
    /**
     * Whether to automatically create invoices for every new order paid online.
     * <br>
     * Default: `false`
     * <br>
     * **Note**: The issued invoice for an order is not a tax invoice and doesn't reflect refunds. You are responsible for ensuring that invoices you issue conform to any relevant legal requirements.
     */
    createInvoice?: boolean | null;
    /**
     * Date and time the orders settings were created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the orders settings were updated.
     * @readonly
     */
    updatedDate?: Date | null;
}
declare enum InventoryUpdateTrigger$1 {
    UNKNOWN_INVENTORY_UPDATE_TRIGGER = "UNKNOWN_INVENTORY_UPDATE_TRIGGER",
    ON_ORDER_PAID = "ON_ORDER_PAID",
    ON_ORDER_PLACED = "ON_ORDER_PLACED"
}
interface GetOrdersSettingsRequest$1 {
}
interface GetOrdersSettingsResponse$1 {
    /** Orders settings. */
    ordersSettings?: OrdersSettings$1;
}
interface UpdateOrdersSettingsRequest$1 {
    /** Orders settings to update. */
    ordersSettings: OrdersSettings$1;
}
interface UpdateOrdersSettingsResponse$1 {
    /** The updated orders settings. */
    ordersSettings?: OrdersSettings$1;
}
interface OrdersSettingsNonNullableFields$1 {
    inventoryUpdateTrigger: InventoryUpdateTrigger$1;
}
interface GetOrdersSettingsResponseNonNullableFields$1 {
    ordersSettings?: OrdersSettingsNonNullableFields$1;
}
interface UpdateOrdersSettingsResponseNonNullableFields$1 {
    ordersSettings?: OrdersSettingsNonNullableFields$1;
}

interface OrdersSettings {
    /**
     * Defines when to update the store inventory.
     *
     * - `ON_ORDER_PAID`: Stock quantities will update only after the payment is approved.
     *  - `ON_ORDER_PLACED`: Stock quantities will update while the payment is being processed. If the payment did not go through, items will restock.
     *
     * Default: `ON_ORDER_PLACED`
     */
    inventoryUpdateTrigger?: InventoryUpdateTrigger;
    /**
     * Whether to automatically create invoices for every new order paid online.
     * Default: `false`
     */
    createInvoice?: boolean | null;
    /**
     * Date and time the orders settings were created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the orders settings were updated.
     * @readonly
     */
    _updatedDate?: Date | null;
}
declare enum InventoryUpdateTrigger {
    UNKNOWN_INVENTORY_UPDATE_TRIGGER = "UNKNOWN_INVENTORY_UPDATE_TRIGGER",
    ON_ORDER_PAID = "ON_ORDER_PAID",
    ON_ORDER_PLACED = "ON_ORDER_PLACED"
}
interface GetOrdersSettingsRequest {
}
interface GetOrdersSettingsResponse {
    /** Orders settings. */
    ordersSettings?: OrdersSettings;
}
interface UpdateOrdersSettingsRequest {
    /** Orders settings to update. */
    ordersSettings: OrdersSettings;
}
interface UpdateOrdersSettingsResponse {
    /** The updated orders settings. */
    ordersSettings?: OrdersSettings;
}
interface OrdersSettingsNonNullableFields {
    inventoryUpdateTrigger: InventoryUpdateTrigger;
}
interface GetOrdersSettingsResponseNonNullableFields {
    ordersSettings?: OrdersSettingsNonNullableFields;
}
interface UpdateOrdersSettingsResponseNonNullableFields {
    ordersSettings?: OrdersSettingsNonNullableFields;
}

type __PublicMethodMetaInfo$9<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getOrdersSettings(): __PublicMethodMetaInfo$9<'GET', {}, GetOrdersSettingsRequest, GetOrdersSettingsRequest$1, GetOrdersSettingsResponse & GetOrdersSettingsResponseNonNullableFields, GetOrdersSettingsResponse$1 & GetOrdersSettingsResponseNonNullableFields$1>;
declare function updateOrdersSettings(): __PublicMethodMetaInfo$9<'PATCH', {}, UpdateOrdersSettingsRequest, UpdateOrdersSettingsRequest$1, UpdateOrdersSettingsResponse & UpdateOrdersSettingsResponseNonNullableFields, UpdateOrdersSettingsResponse$1 & UpdateOrdersSettingsResponseNonNullableFields$1>;

declare const meta$9_getOrdersSettings: typeof getOrdersSettings;
declare const meta$9_updateOrdersSettings: typeof updateOrdersSettings;
declare namespace meta$9 {
  export { type __PublicMethodMetaInfo$9 as __PublicMethodMetaInfo, meta$9_getOrdersSettings as getOrdersSettings, meta$9_updateOrdersSettings as updateOrdersSettings };
}

/** PickupLocation is the main entity of PickupLocations that can be used for lorem ipsum dolor */
interface PickupLocation$1 {
    /**
     * PickupLocation ID
     * @readonly
     */
    id?: string | null;
    /**
     * Represents the current state of an item. Each time the item is modified, its `revision` changes. for an update operation to succeed, you MUST pass the latest revision
     * @readonly
     */
    revision?: string | null;
    /**
     * Represents the time this PickupLocation was created
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Represents the time this PickupLocation was last updated
     * @readonly
     */
    updatedDate?: Date | null;
    /** Pickup Location Name */
    name?: string | null;
    /** Pickup Location Address */
    address?: Address$7;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /** inactive pickup locations should not be shown in checkout */
    active?: boolean | null;
    /** at runtime for a given pickup input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates$3[];
    /** This pickup location is active for the following delivery regions. */
    deliveryRegionIds?: string[];
}
/** Physical address */
interface Address$7 extends AddressStreetOneOf$3 {
    /** Street name and number. */
    streetAddress?: StreetAddress$7;
    addressLine?: string | null;
    /** Country code. */
    country?: string | null;
    /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    addressLine2?: string | null;
}
/** @oneof */
interface AddressStreetOneOf$3 {
    /** Street name and number. */
    streetAddress?: StreetAddress$7;
    addressLine?: string | null;
}
interface StreetAddress$7 {
    number?: string;
    name?: string;
}
interface ConditionalRates$3 {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition$3[];
    amount?: string;
}
interface Condition$3 {
    type?: ConditionType$3;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator$3;
}
declare enum ConditionType$3 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
declare enum LogicalOperator$3 {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
interface CreatePickupLocationRequest$1 {
    /** PickupLocation to be created */
    pickupLocation: PickupLocation$1;
}
interface CreatePickupLocationResponse$1 {
    /** The created PickupLocation */
    pickupLocation?: PickupLocation$1;
}
interface GetPickupLocationRequest$1 {
    /** Id of the PickupLocation to retrieve */
    pickupLocationId: string;
}
interface GetPickupLocationResponse$1 {
    /** The retrieved PickupLocation */
    pickupLocation?: PickupLocation$1;
}
interface UpdatePickupLocationRequest$1 {
    /** PickupLocation to be updated, may be partial */
    pickupLocation: PickupLocation$1;
}
interface UpdatePickupLocationResponse$1 {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation$1;
}
interface DeletePickupLocationRequest$1 {
    /** Id of the PickupLocation to delete */
    pickupLocationId: string;
}
interface DeletePickupLocationResponse$1 {
}
interface QueryPickupLocationRequest$1 {
    /** WQL expression */
    query: QueryV2$3;
}
interface QueryV2$3 extends QueryV2PagingMethodOneOf$3 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$3;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$9;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$9[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf$3 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$3;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$9;
}
interface Sorting$9 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$9;
}
declare enum SortOrder$9 {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging$3 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$9 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryPickupLocationResponse$1 {
    /** The retrieved PickupLocations */
    pickupLocations?: PickupLocation$1[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$7;
}
interface CursorPagingMetadata$7 {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$9;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$9 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface AddDeliveryRegionRequest$1 {
    /** Id of the PickupLocation to add to the delivery region */
    pickupLocationId: string;
    /** Id of the DeliveryRegion to add the PickupLocation to */
    deliveryRegionId: string;
    /** Revision of the PickupLocation */
    revision: string | null;
}
interface AddDeliveryRegionResponse$1 {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation$1;
}
interface RemoveDeliveryRegionRequest$1 {
    /** Id of the PickupLocation to add to the delivery region */
    pickupLocationId: string;
    /** Id of the DeliveryRegion to add the PickupLocation to */
    deliveryRegionId: string;
    /** Revision of the PickupLocation */
    revision: string | null;
}
interface RemoveDeliveryRegionResponse$1 {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation$1;
}
interface BulkCreatePickupLocationRequest$1 {
    pickupLocations: PickupLocation$1[];
}
interface BulkCreatePickupLocationResponse$1 {
    pickupLocations?: PickupLocation$1[];
    errors?: PickupLocationError$1[];
}
interface PickupLocationError$1 {
    id?: string;
    error?: ApplicationError$5;
}
interface ApplicationError$5 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkUpdatePickupLocationRequest$1 {
    pickupLocations: PickupLocation$1[];
}
interface BulkUpdatePickupLocationResponse$1 {
    pickupLocations?: PickupLocation$1[];
    errors?: PickupLocationError$1[];
}
interface BulkDeletePickupLocationRequest$1 {
    pickupLocationIds: string[];
}
interface BulkDeletePickupLocationResponse$1 {
    errors?: PickupLocationError$1[];
}
interface StreetAddressNonNullableFields$7 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$7 {
    streetAddress?: StreetAddressNonNullableFields$7;
}
interface ConditionNonNullableFields$3 {
    type: ConditionType$3;
    value: string;
    operator: LogicalOperator$3;
}
interface ConditionalRatesNonNullableFields$3 {
    conditions: ConditionNonNullableFields$3[];
    amount: string;
}
interface PickupLocationNonNullableFields$1 {
    address?: AddressNonNullableFields$7;
    rates: ConditionalRatesNonNullableFields$3[];
    deliveryRegionIds: string[];
}
interface CreatePickupLocationResponseNonNullableFields$1 {
    pickupLocation?: PickupLocationNonNullableFields$1;
}
interface GetPickupLocationResponseNonNullableFields$1 {
    pickupLocation?: PickupLocationNonNullableFields$1;
}
interface UpdatePickupLocationResponseNonNullableFields$1 {
    pickupLocation?: PickupLocationNonNullableFields$1;
}
interface QueryPickupLocationResponseNonNullableFields$1 {
    pickupLocations: PickupLocationNonNullableFields$1[];
}
interface AddDeliveryRegionResponseNonNullableFields$1 {
    pickupLocation?: PickupLocationNonNullableFields$1;
}
interface RemoveDeliveryRegionResponseNonNullableFields$1 {
    pickupLocation?: PickupLocationNonNullableFields$1;
}
interface ApplicationErrorNonNullableFields$5 {
    code: string;
    description: string;
}
interface PickupLocationErrorNonNullableFields$1 {
    id: string;
    error?: ApplicationErrorNonNullableFields$5;
}
interface BulkCreatePickupLocationResponseNonNullableFields$1 {
    pickupLocations: PickupLocationNonNullableFields$1[];
    errors: PickupLocationErrorNonNullableFields$1[];
}
interface BulkUpdatePickupLocationResponseNonNullableFields$1 {
    pickupLocations: PickupLocationNonNullableFields$1[];
    errors: PickupLocationErrorNonNullableFields$1[];
}
interface BulkDeletePickupLocationResponseNonNullableFields$1 {
    errors: PickupLocationErrorNonNullableFields$1[];
}

/** PickupLocation is the main entity of PickupLocations that can be used for lorem ipsum dolor */
interface PickupLocation {
    /**
     * PickupLocation ID
     * @readonly
     */
    _id?: string | null;
    /**
     * Represents the current state of an item. Each time the item is modified, its `revision` changes. for an update operation to succeed, you MUST pass the latest revision
     * @readonly
     */
    revision?: string | null;
    /**
     * Represents the time this PickupLocation was created
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Represents the time this PickupLocation was last updated
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Pickup Location Name */
    name?: string | null;
    /** Pickup Location Address */
    address?: Address$6;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /** inactive pickup locations should not be shown in checkout */
    active?: boolean | null;
    /** at runtime for a given pickup input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates$2[];
    /** This pickup location is active for the following delivery regions. */
    deliveryRegionIds?: string[];
}
/** Physical address */
interface Address$6 extends AddressStreetOneOf$2 {
    /** Street name and number. */
    streetAddress?: StreetAddress$6;
    addressLine1?: string | null;
    /** Country code. */
    country?: string | null;
    /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    addressLine2?: string | null;
}
/** @oneof */
interface AddressStreetOneOf$2 {
    /** Street name and number. */
    streetAddress?: StreetAddress$6;
    addressLine?: string | null;
}
interface StreetAddress$6 {
    number?: string;
    name?: string;
}
interface ConditionalRates$2 {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition$2[];
    amount?: string;
}
interface Condition$2 {
    type?: ConditionType$2;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator$2;
}
declare enum ConditionType$2 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
declare enum LogicalOperator$2 {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
interface CreatePickupLocationRequest {
    /** PickupLocation to be created */
    pickupLocation: PickupLocation;
}
interface CreatePickupLocationResponse {
    /** The created PickupLocation */
    pickupLocation?: PickupLocation;
}
interface GetPickupLocationRequest {
    /** Id of the PickupLocation to retrieve */
    pickupLocationId: string;
}
interface GetPickupLocationResponse {
    /** The retrieved PickupLocation */
    pickupLocation?: PickupLocation;
}
interface UpdatePickupLocationRequest {
    /** PickupLocation to be updated, may be partial */
    pickupLocation: PickupLocation;
}
interface UpdatePickupLocationResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
interface DeletePickupLocationRequest {
    /** Id of the PickupLocation to delete */
    pickupLocationId: string;
}
interface DeletePickupLocationResponse {
}
interface QueryPickupLocationRequest {
    /** WQL expression */
    query: QueryV2$2;
}
interface QueryV2$2 extends QueryV2PagingMethodOneOf$2 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$2;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$8;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$8[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf$2 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$2;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$8;
}
interface Sorting$8 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$8;
}
declare enum SortOrder$8 {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging$2 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$8 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryPickupLocationResponse {
    /** The retrieved PickupLocations */
    pickupLocations?: PickupLocation[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$6;
}
interface CursorPagingMetadata$6 {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$8;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$8 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface AddDeliveryRegionRequest {
    /** Id of the PickupLocation to add to the delivery region */
    pickupLocationId: string;
    /** Id of the DeliveryRegion to add the PickupLocation to */
    deliveryRegionId: string;
    /** Revision of the PickupLocation */
    revision: string | null;
}
interface AddDeliveryRegionResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
interface RemoveDeliveryRegionRequest {
    /** Id of the PickupLocation to add to the delivery region */
    pickupLocationId: string;
    /** Id of the DeliveryRegion to add the PickupLocation to */
    deliveryRegionId: string;
    /** Revision of the PickupLocation */
    revision: string | null;
}
interface RemoveDeliveryRegionResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
interface BulkCreatePickupLocationRequest {
    pickupLocations: PickupLocation[];
}
interface BulkCreatePickupLocationResponse {
    pickupLocations?: PickupLocation[];
    errors?: PickupLocationError[];
}
interface PickupLocationError {
    _id?: string;
    error?: ApplicationError$4;
}
interface ApplicationError$4 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkUpdatePickupLocationRequest {
    pickupLocations: PickupLocation[];
}
interface BulkUpdatePickupLocationResponse {
    pickupLocations?: PickupLocation[];
    errors?: PickupLocationError[];
}
interface BulkDeletePickupLocationRequest {
    pickupLocationIds: string[];
}
interface BulkDeletePickupLocationResponse {
    errors?: PickupLocationError[];
}
interface StreetAddressNonNullableFields$6 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$6 {
    streetAddress?: StreetAddressNonNullableFields$6;
}
interface ConditionNonNullableFields$2 {
    type: ConditionType$2;
    value: string;
    operator: LogicalOperator$2;
}
interface ConditionalRatesNonNullableFields$2 {
    conditions: ConditionNonNullableFields$2[];
    amount: string;
}
interface PickupLocationNonNullableFields {
    address?: AddressNonNullableFields$6;
    rates: ConditionalRatesNonNullableFields$2[];
    deliveryRegionIds: string[];
}
interface CreatePickupLocationResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
interface GetPickupLocationResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
interface UpdatePickupLocationResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
interface QueryPickupLocationResponseNonNullableFields {
    pickupLocations: PickupLocationNonNullableFields[];
}
interface AddDeliveryRegionResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
interface RemoveDeliveryRegionResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
interface ApplicationErrorNonNullableFields$4 {
    code: string;
    description: string;
}
interface PickupLocationErrorNonNullableFields {
    _id: string;
    error?: ApplicationErrorNonNullableFields$4;
}
interface BulkCreatePickupLocationResponseNonNullableFields {
    pickupLocations: PickupLocationNonNullableFields[];
    errors: PickupLocationErrorNonNullableFields[];
}
interface BulkUpdatePickupLocationResponseNonNullableFields {
    pickupLocations: PickupLocationNonNullableFields[];
    errors: PickupLocationErrorNonNullableFields[];
}
interface BulkDeletePickupLocationResponseNonNullableFields {
    errors: PickupLocationErrorNonNullableFields[];
}

type __PublicMethodMetaInfo$8<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createPickupLocation(): __PublicMethodMetaInfo$8<'POST', {}, CreatePickupLocationRequest, CreatePickupLocationRequest$1, CreatePickupLocationResponse & CreatePickupLocationResponseNonNullableFields, CreatePickupLocationResponse$1 & CreatePickupLocationResponseNonNullableFields$1>;
declare function getPickupLocation(): __PublicMethodMetaInfo$8<'GET', {
    pickupLocationId: string;
}, GetPickupLocationRequest, GetPickupLocationRequest$1, GetPickupLocationResponse & GetPickupLocationResponseNonNullableFields, GetPickupLocationResponse$1 & GetPickupLocationResponseNonNullableFields$1>;
declare function updatePickupLocation(): __PublicMethodMetaInfo$8<'PATCH', {
    pickupLocationId: string;
}, UpdatePickupLocationRequest, UpdatePickupLocationRequest$1, UpdatePickupLocationResponse & UpdatePickupLocationResponseNonNullableFields, UpdatePickupLocationResponse$1 & UpdatePickupLocationResponseNonNullableFields$1>;
declare function deletePickupLocation(): __PublicMethodMetaInfo$8<'DELETE', {
    pickupLocationId: string;
}, DeletePickupLocationRequest, DeletePickupLocationRequest$1, DeletePickupLocationResponse, DeletePickupLocationResponse$1>;
declare function queryPickupLocation(): __PublicMethodMetaInfo$8<'POST', {}, QueryPickupLocationRequest, QueryPickupLocationRequest$1, QueryPickupLocationResponse & QueryPickupLocationResponseNonNullableFields, QueryPickupLocationResponse$1 & QueryPickupLocationResponseNonNullableFields$1>;
declare function addDeliveryRegion(): __PublicMethodMetaInfo$8<'POST', {
    pickupLocationId: string;
}, AddDeliveryRegionRequest, AddDeliveryRegionRequest$1, AddDeliveryRegionResponse & AddDeliveryRegionResponseNonNullableFields, AddDeliveryRegionResponse$1 & AddDeliveryRegionResponseNonNullableFields$1>;
declare function removeDeliveryRegion(): __PublicMethodMetaInfo$8<'POST', {
    pickupLocationId: string;
}, RemoveDeliveryRegionRequest, RemoveDeliveryRegionRequest$1, RemoveDeliveryRegionResponse & RemoveDeliveryRegionResponseNonNullableFields, RemoveDeliveryRegionResponse$1 & RemoveDeliveryRegionResponseNonNullableFields$1>;
declare function bulkCreatePickupLocation(): __PublicMethodMetaInfo$8<'POST', {}, BulkCreatePickupLocationRequest, BulkCreatePickupLocationRequest$1, BulkCreatePickupLocationResponse & BulkCreatePickupLocationResponseNonNullableFields, BulkCreatePickupLocationResponse$1 & BulkCreatePickupLocationResponseNonNullableFields$1>;
declare function bulkUpdatePickupLocation(): __PublicMethodMetaInfo$8<'PATCH', {}, BulkUpdatePickupLocationRequest, BulkUpdatePickupLocationRequest$1, BulkUpdatePickupLocationResponse & BulkUpdatePickupLocationResponseNonNullableFields, BulkUpdatePickupLocationResponse$1 & BulkUpdatePickupLocationResponseNonNullableFields$1>;
declare function bulkDeletePickupLocation(): __PublicMethodMetaInfo$8<'DELETE', {}, BulkDeletePickupLocationRequest, BulkDeletePickupLocationRequest$1, BulkDeletePickupLocationResponse & BulkDeletePickupLocationResponseNonNullableFields, BulkDeletePickupLocationResponse$1 & BulkDeletePickupLocationResponseNonNullableFields$1>;

declare const meta$8_addDeliveryRegion: typeof addDeliveryRegion;
declare const meta$8_bulkCreatePickupLocation: typeof bulkCreatePickupLocation;
declare const meta$8_bulkDeletePickupLocation: typeof bulkDeletePickupLocation;
declare const meta$8_bulkUpdatePickupLocation: typeof bulkUpdatePickupLocation;
declare const meta$8_createPickupLocation: typeof createPickupLocation;
declare const meta$8_deletePickupLocation: typeof deletePickupLocation;
declare const meta$8_getPickupLocation: typeof getPickupLocation;
declare const meta$8_queryPickupLocation: typeof queryPickupLocation;
declare const meta$8_removeDeliveryRegion: typeof removeDeliveryRegion;
declare const meta$8_updatePickupLocation: typeof updatePickupLocation;
declare namespace meta$8 {
  export { type __PublicMethodMetaInfo$8 as __PublicMethodMetaInfo, meta$8_addDeliveryRegion as addDeliveryRegion, meta$8_bulkCreatePickupLocation as bulkCreatePickupLocation, meta$8_bulkDeletePickupLocation as bulkDeletePickupLocation, meta$8_bulkUpdatePickupLocation as bulkUpdatePickupLocation, meta$8_createPickupLocation as createPickupLocation, meta$8_deletePickupLocation as deletePickupLocation, meta$8_getPickupLocation as getPickupLocation, meta$8_queryPickupLocation as queryPickupLocation, meta$8_removeDeliveryRegion as removeDeliveryRegion, meta$8_updatePickupLocation as updatePickupLocation };
}

interface ShippingOption$3 {
    /**
     * ShippingOption ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the ShippingOption is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the ShippingOption.
     *
     * Ignored when creating a ShippingOption.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the ShippingOption was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the ShippingOption was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Associated delivery region id. */
    deliveryRegionId?: string;
    /** Delivery option configured for the ShippingOption */
    title?: string | null;
    estimateDeliveryTime?: string | null;
    /** at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates$1[];
    /** Data Extensions */
    extendedFields?: ExtendedFields$5;
}
interface ConditionalRates$1 {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition$1[];
    amount?: string;
}
interface Condition$1 {
    type?: ConditionType$1;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator$1;
}
declare enum ConditionType$1 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
declare enum LogicalOperator$1 {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
interface ExtendedFields$5 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateShippingOptionRequest$1 {
    /** ShippingOption to be created. */
    shippingOption: ShippingOption$3;
}
interface CreateShippingOptionResponse$1 {
    /** The created ShippingOption. */
    shippingOption?: ShippingOption$3;
}
interface GetShippingOptionRequest$1 {
    /** ID of the ShippingOption to retrieve. */
    shippingOptionId: string;
}
interface GetShippingOptionResponse$1 {
    /** The requested ShippingOption. */
    shippingOption?: ShippingOption$3;
}
interface UpdateShippingOptionRequest$1 {
    /** ShippingOption to be updated, may be partial. */
    shippingOption: ShippingOption$3;
}
interface UpdateShippingOptionResponse$1 {
    /** Updated ShippingOption. */
    shippingOption?: ShippingOption$3;
}
interface DeleteShippingOptionRequest$1 {
    /** Id of the ShippingOption to delete. */
    shippingOptionId: string;
}
interface DeleteShippingOptionResponse$1 {
}
interface QueryShippingOptionsRequest$1 {
    /** WQL expression. */
    query?: CursorQuery$5;
}
interface CursorQuery$5 extends CursorQueryPagingMethodOneOf$5 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$7;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$7[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$5 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$7;
}
interface Sorting$7 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$7;
}
declare enum SortOrder$7 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$7 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryShippingOptionsResponse$1 {
    /** List of ShippingOptions. */
    shippingOptions?: ShippingOption$3[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$5;
}
interface CursorPagingMetadata$5 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$7;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$7 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateExtendedFieldsRequest$3 {
    /** ID of the entity to update. */
    id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse$3 {
    /** Updated ShippingOption. */
    shippingOption?: ShippingOption$3;
}
interface ConditionNonNullableFields$1 {
    type: ConditionType$1;
    value: string;
    operator: LogicalOperator$1;
}
interface ConditionalRatesNonNullableFields$1 {
    conditions: ConditionNonNullableFields$1[];
    amount: string;
}
interface ShippingOptionNonNullableFields$3 {
    deliveryRegionId: string;
    rates: ConditionalRatesNonNullableFields$1[];
}
interface CreateShippingOptionResponseNonNullableFields$1 {
    shippingOption?: ShippingOptionNonNullableFields$3;
}
interface GetShippingOptionResponseNonNullableFields$1 {
    shippingOption?: ShippingOptionNonNullableFields$3;
}
interface UpdateShippingOptionResponseNonNullableFields$1 {
    shippingOption?: ShippingOptionNonNullableFields$3;
}
interface QueryShippingOptionsResponseNonNullableFields$1 {
    shippingOptions: ShippingOptionNonNullableFields$3[];
}
interface UpdateExtendedFieldsResponseNonNullableFields$3 {
    shippingOption?: ShippingOptionNonNullableFields$3;
}

interface ShippingOption$2 {
    /**
     * ShippingOption ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the ShippingOption is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the ShippingOption.
     *
     * Ignored when creating a ShippingOption.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the ShippingOption was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the ShippingOption was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Associated delivery region id. */
    deliveryRegionId?: string;
    /** Delivery option configured for the ShippingOption */
    title?: string | null;
    estimateDeliveryTime?: string | null;
    /** at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates[];
    /** Data Extensions */
    extendedFields?: ExtendedFields$4;
}
interface ConditionalRates {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition[];
    amount?: string;
}
interface Condition {
    type?: ConditionType;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator;
}
declare enum ConditionType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
declare enum LogicalOperator {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
interface ExtendedFields$4 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateShippingOptionRequest {
    /** ShippingOption to be created. */
    shippingOption: ShippingOption$2;
}
interface CreateShippingOptionResponse {
    /** The created ShippingOption. */
    shippingOption?: ShippingOption$2;
}
interface GetShippingOptionRequest {
    /** ID of the ShippingOption to retrieve. */
    shippingOptionId: string;
}
interface GetShippingOptionResponse {
    /** The requested ShippingOption. */
    shippingOption?: ShippingOption$2;
}
interface UpdateShippingOptionRequest {
    /** ShippingOption to be updated, may be partial. */
    shippingOption: ShippingOption$2;
}
interface UpdateShippingOptionResponse {
    /** Updated ShippingOption. */
    shippingOption?: ShippingOption$2;
}
interface DeleteShippingOptionRequest {
    /** Id of the ShippingOption to delete. */
    shippingOptionId: string;
}
interface DeleteShippingOptionResponse {
}
interface QueryShippingOptionsRequest {
    /** WQL expression. */
    query?: CursorQuery$4;
}
interface CursorQuery$4 extends CursorQueryPagingMethodOneOf$4 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$6;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$6[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$4 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$6;
}
interface Sorting$6 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$6;
}
declare enum SortOrder$6 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$6 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryShippingOptionsResponse {
    /** List of ShippingOptions. */
    shippingOptions?: ShippingOption$2[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$4;
}
interface CursorPagingMetadata$4 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$6;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$6 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateExtendedFieldsRequest$2 {
    /** ID of the entity to update. */
    _id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse$2 {
    /** Updated ShippingOption. */
    shippingOption?: ShippingOption$2;
}
interface ConditionNonNullableFields {
    type: ConditionType;
    value: string;
    operator: LogicalOperator;
}
interface ConditionalRatesNonNullableFields {
    conditions: ConditionNonNullableFields[];
    amount: string;
}
interface ShippingOptionNonNullableFields$2 {
    deliveryRegionId: string;
    rates: ConditionalRatesNonNullableFields[];
}
interface CreateShippingOptionResponseNonNullableFields {
    shippingOption?: ShippingOptionNonNullableFields$2;
}
interface GetShippingOptionResponseNonNullableFields {
    shippingOption?: ShippingOptionNonNullableFields$2;
}
interface UpdateShippingOptionResponseNonNullableFields {
    shippingOption?: ShippingOptionNonNullableFields$2;
}
interface QueryShippingOptionsResponseNonNullableFields {
    shippingOptions: ShippingOptionNonNullableFields$2[];
}
interface UpdateExtendedFieldsResponseNonNullableFields$2 {
    shippingOption?: ShippingOptionNonNullableFields$2;
}

type __PublicMethodMetaInfo$7<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createShippingOption(): __PublicMethodMetaInfo$7<'POST', {}, CreateShippingOptionRequest, CreateShippingOptionRequest$1, CreateShippingOptionResponse & CreateShippingOptionResponseNonNullableFields, CreateShippingOptionResponse$1 & CreateShippingOptionResponseNonNullableFields$1>;
declare function getShippingOption(): __PublicMethodMetaInfo$7<'GET', {
    shippingOptionId: string;
}, GetShippingOptionRequest, GetShippingOptionRequest$1, GetShippingOptionResponse & GetShippingOptionResponseNonNullableFields, GetShippingOptionResponse$1 & GetShippingOptionResponseNonNullableFields$1>;
declare function updateShippingOption(): __PublicMethodMetaInfo$7<'PATCH', {
    shippingOptionId: string;
}, UpdateShippingOptionRequest, UpdateShippingOptionRequest$1, UpdateShippingOptionResponse & UpdateShippingOptionResponseNonNullableFields, UpdateShippingOptionResponse$1 & UpdateShippingOptionResponseNonNullableFields$1>;
declare function deleteShippingOption(): __PublicMethodMetaInfo$7<'DELETE', {
    shippingOptionId: string;
}, DeleteShippingOptionRequest, DeleteShippingOptionRequest$1, DeleteShippingOptionResponse, DeleteShippingOptionResponse$1>;
declare function queryShippingOptions(): __PublicMethodMetaInfo$7<'GET', {}, QueryShippingOptionsRequest, QueryShippingOptionsRequest$1, QueryShippingOptionsResponse & QueryShippingOptionsResponseNonNullableFields, QueryShippingOptionsResponse$1 & QueryShippingOptionsResponseNonNullableFields$1>;
declare function updateExtendedFields$1(): __PublicMethodMetaInfo$7<'POST', {
    id: string;
}, UpdateExtendedFieldsRequest$2, UpdateExtendedFieldsRequest$3, UpdateExtendedFieldsResponse$2 & UpdateExtendedFieldsResponseNonNullableFields$2, UpdateExtendedFieldsResponse$3 & UpdateExtendedFieldsResponseNonNullableFields$3>;

declare const meta$7_createShippingOption: typeof createShippingOption;
declare const meta$7_deleteShippingOption: typeof deleteShippingOption;
declare const meta$7_getShippingOption: typeof getShippingOption;
declare const meta$7_queryShippingOptions: typeof queryShippingOptions;
declare const meta$7_updateShippingOption: typeof updateShippingOption;
declare namespace meta$7 {
  export { type __PublicMethodMetaInfo$7 as __PublicMethodMetaInfo, meta$7_createShippingOption as createShippingOption, meta$7_deleteShippingOption as deleteShippingOption, meta$7_getShippingOption as getShippingOption, meta$7_queryShippingOptions as queryShippingOptions, updateExtendedFields$1 as updateExtendedFields, meta$7_updateShippingOption as updateShippingOption };
}

interface ShippoConfiguration$1 {
    /**
     * ShippoConfiguration ID.
     * @readonly
     */
    id?: string | null;
    /** @readonly */
    revision?: string | null;
    /**
     * Date and time the ShippoConfiguration was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the ShippoConfiguration was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Associated delivery region ID. */
    deliveryRegionId?: string | null;
    /** Settings of USPS domestic services. */
    domesticServices?: DomesticServiceSettings$1[];
    /** Settings of USPS international services. */
    internationalServices?: InternationalServiceSettings$1[];
    /** Package type. */
    packageType?: PackageType$1;
    /** Package details. */
    packageDetails?: PackageDetails$1;
    /** Location ID from OS location service. */
    osLocationId?: string | null;
    /**
     * Ship from address materialized from OS location.
     * @readonly
     */
    shipFromAddress?: Address$5;
    /** Backup weight. */
    backupWeight?: string | null;
    /** Data extensions. */
    extendedFields?: ExtendedFields$3;
}
interface DomesticServiceSettings$1 {
    /** USPS domestic service. */
    service?: DomesticService$1;
    /** Service settings. */
    serviceSettings?: ServiceSettings$1;
}
declare enum DomesticService$1 {
    UNKNOWN_DOMESTIC_SERVICE = "UNKNOWN_DOMESTIC_SERVICE",
    GROUND_ADVANTAGE = "GROUND_ADVANTAGE",
    PRIORITY_MAIL = "PRIORITY_MAIL",
    PRIORITY_MAIL_EXPRESS = "PRIORITY_MAIL_EXPRESS"
}
interface ServiceSettings$1 {
    /** Estimated delivery time. */
    estimatedDeliveryTime?: string | null;
    /** Handling fee. */
    handlingFee?: HandlingFee$1;
    /** Amount above which free delivery is offered. */
    freeDeliveryMinimumAmount?: string | null;
}
interface HandlingFee$1 {
    /** Value that will be used to calculate the fee. For example, percentage fee with value 5% to calculate the fee. */
    value?: string;
    /** How to calculate the fee: fixed amount or by percentage. */
    calculationType?: CalculationType$1;
}
declare enum CalculationType$1 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    FIXED = "FIXED",
    PERCENTAGE = "PERCENTAGE"
}
interface InternationalServiceSettings$1 {
    /** USPS international service. */
    service?: InternationalService$1;
    /** Service settings. */
    serviceSettings?: ServiceSettings$1;
}
declare enum InternationalService$1 {
    UNKNOWN_INTERNATIONAL_SERVICE = "UNKNOWN_INTERNATIONAL_SERVICE",
    FIRST_CLASS_PACKAGE_INTERNATIONAL = "FIRST_CLASS_PACKAGE_INTERNATIONAL",
    PRIORITY_MAIL_INTERNATIONAL = "PRIORITY_MAIL_INTERNATIONAL",
    PRIORITY_MAIL_EXPRESS_INTERNATIONAL = "PRIORITY_MAIL_EXPRESS_INTERNATIONAL"
}
declare enum PackageType$1 {
    UNKNOWN_PACKAGE_TYPE = "UNKNOWN_PACKAGE_TYPE",
    CUSTOM = "CUSTOM",
    FLAT_RATE_ENVELOPE = "FLAT_RATE_ENVELOPE",
    PADDED_FLAT_RATE_ENVELOPE = "PADDED_FLAT_RATE_ENVELOPE",
    SMALL_FLAT_RATE_BOX = "SMALL_FLAT_RATE_BOX",
    MEDIUM_FLAT_RATE_BOX_1 = "MEDIUM_FLAT_RATE_BOX_1",
    MEDIUM_FLAT_RATE_BOX_2 = "MEDIUM_FLAT_RATE_BOX_2",
    LARGE_FLAT_RATE_BOX = "LARGE_FLAT_RATE_BOX"
}
interface PackageDetails$1 {
    /**
     * Package name. Must be set when package type is CUSTOM.
     * For other package types, it is read-only, and an exception will be thrown
     * if it set when creating a ShippoConfiguration.
     */
    name?: string | null;
    /**
     * Package dimensions. Can only be set when package type is CUSTOM.
     * For other package types, it is read-only, and an exception will be thrown
     * if it set when creating a ShippoConfiguration.
     */
    dimensions?: PackageDimensions$1;
    /**
     * Maximum number of products. Must be set when package type is NOT CUSTOM.
     * Otherwise, if the package type is CUSTOM, this field cannot be set and an
     * exception will be thrown if it is set when creating a ShippoConfiguration.
     */
    maxNumberOfProducts?: string | null;
}
interface PackageDimensions$1 {
    /** Package length. */
    length?: string;
    /** Package width. */
    width?: string;
    /** Package height. */
    height?: string;
}
/** Physical address */
interface Address$5 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$5;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress$5 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface ExtendedFields$3 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateShippoConfigurationRequest$1 {
    /** ShippoConfiguration to be created. */
    shippoConfiguration: ShippoConfiguration$1;
    backupRate?: string | null;
}
interface CreateShippoConfigurationResponse$1 {
    /** The created ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration$1;
}
interface GetShippoConfigurationRequest$1 {
    /** ID of the ShippoConfiguration to retrieve. */
    shippoConfigurationId: string;
}
interface GetShippoConfigurationResponse$1 {
    /** The requested ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration$1;
}
interface UpdateShippoConfigurationRequest$1 {
    /** ShippoConfiguration to be updated, may be partial. */
    shippoConfiguration: ShippoConfiguration$1;
}
interface UpdateShippoConfigurationResponse$1 {
    /** Updated ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration$1;
}
interface DeleteShippoConfigurationRequest$1 {
    /** ID of the ShippoConfiguration to delete. */
    shippoConfigurationId: string;
}
interface DeleteShippoConfigurationResponse$1 {
}
interface QueryShippoConfigurationsRequest$1 {
    /** WQL expression. */
    query?: CursorQuery$3;
}
interface CursorQuery$3 extends CursorQueryPagingMethodOneOf$3 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$5;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$5[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$3 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$5;
}
interface Sorting$5 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$5;
}
declare enum SortOrder$5 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$5 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryShippoConfigurationsResponse$1 {
    /** List of ShippoConfigurations. */
    shippoConfigurations?: ShippoConfiguration$1[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$3;
}
interface CursorPagingMetadata$3 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$5;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$5 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateExtendedFieldsRequest$1 {
    /** ID of the entity to update. */
    id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse$1 {
    /** Updated ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration$1;
}
interface HandlingFeeNonNullableFields$1 {
    value: string;
    calculationType: CalculationType$1;
}
interface ServiceSettingsNonNullableFields$1 {
    handlingFee?: HandlingFeeNonNullableFields$1;
}
interface DomesticServiceSettingsNonNullableFields$1 {
    service: DomesticService$1;
    serviceSettings?: ServiceSettingsNonNullableFields$1;
}
interface InternationalServiceSettingsNonNullableFields$1 {
    service: InternationalService$1;
    serviceSettings?: ServiceSettingsNonNullableFields$1;
}
interface PackageDimensionsNonNullableFields$1 {
    length: string;
    width: string;
    height: string;
}
interface PackageDetailsNonNullableFields$1 {
    dimensions?: PackageDimensionsNonNullableFields$1;
}
interface StreetAddressNonNullableFields$5 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$5 {
    streetAddress?: StreetAddressNonNullableFields$5;
}
interface ShippoConfigurationNonNullableFields$1 {
    domesticServices: DomesticServiceSettingsNonNullableFields$1[];
    internationalServices: InternationalServiceSettingsNonNullableFields$1[];
    packageType: PackageType$1;
    packageDetails?: PackageDetailsNonNullableFields$1;
    shipFromAddress?: AddressNonNullableFields$5;
}
interface CreateShippoConfigurationResponseNonNullableFields$1 {
    shippoConfiguration?: ShippoConfigurationNonNullableFields$1;
}
interface GetShippoConfigurationResponseNonNullableFields$1 {
    shippoConfiguration?: ShippoConfigurationNonNullableFields$1;
}
interface UpdateShippoConfigurationResponseNonNullableFields$1 {
    shippoConfiguration?: ShippoConfigurationNonNullableFields$1;
}
interface QueryShippoConfigurationsResponseNonNullableFields$1 {
    shippoConfigurations: ShippoConfigurationNonNullableFields$1[];
}
interface UpdateExtendedFieldsResponseNonNullableFields$1 {
    shippoConfiguration?: ShippoConfigurationNonNullableFields$1;
}

interface ShippoConfiguration {
    /**
     * ShippoConfiguration ID.
     * @readonly
     */
    _id?: string | null;
    /** @readonly */
    revision?: string | null;
    /**
     * Date and time the ShippoConfiguration was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the ShippoConfiguration was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Associated delivery region ID. */
    deliveryRegionId?: string | null;
    /** Settings of USPS domestic services. */
    domesticServices?: DomesticServiceSettings[];
    /** Settings of USPS international services. */
    internationalServices?: InternationalServiceSettings[];
    /** Package type. */
    packageType?: PackageType;
    /** Package details. */
    packageDetails?: PackageDetails;
    /** Location ID from OS location service. */
    osLocationId?: string | null;
    /**
     * Ship from address materialized from OS location.
     * @readonly
     */
    shipFromAddress?: Address$4;
    /** Backup weight. */
    backupWeight?: string | null;
    /** Data extensions. */
    extendedFields?: ExtendedFields$2;
}
interface DomesticServiceSettings {
    /** USPS domestic service. */
    service?: DomesticService;
    /** Service settings. */
    serviceSettings?: ServiceSettings;
}
declare enum DomesticService {
    UNKNOWN_DOMESTIC_SERVICE = "UNKNOWN_DOMESTIC_SERVICE",
    GROUND_ADVANTAGE = "GROUND_ADVANTAGE",
    PRIORITY_MAIL = "PRIORITY_MAIL",
    PRIORITY_MAIL_EXPRESS = "PRIORITY_MAIL_EXPRESS"
}
interface ServiceSettings {
    /** Estimated delivery time. */
    estimatedDeliveryTime?: string | null;
    /** Handling fee. */
    handlingFee?: HandlingFee;
    /** Amount above which free delivery is offered. */
    freeDeliveryMinimumAmount?: string | null;
}
interface HandlingFee {
    /** Value that will be used to calculate the fee. For example, percentage fee with value 5% to calculate the fee. */
    value?: string;
    /** How to calculate the fee: fixed amount or by percentage. */
    calculationType?: CalculationType;
}
declare enum CalculationType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    FIXED = "FIXED",
    PERCENTAGE = "PERCENTAGE"
}
interface InternationalServiceSettings {
    /** USPS international service. */
    service?: InternationalService;
    /** Service settings. */
    serviceSettings?: ServiceSettings;
}
declare enum InternationalService {
    UNKNOWN_INTERNATIONAL_SERVICE = "UNKNOWN_INTERNATIONAL_SERVICE",
    FIRST_CLASS_PACKAGE_INTERNATIONAL = "FIRST_CLASS_PACKAGE_INTERNATIONAL",
    PRIORITY_MAIL_INTERNATIONAL = "PRIORITY_MAIL_INTERNATIONAL",
    PRIORITY_MAIL_EXPRESS_INTERNATIONAL = "PRIORITY_MAIL_EXPRESS_INTERNATIONAL"
}
declare enum PackageType {
    UNKNOWN_PACKAGE_TYPE = "UNKNOWN_PACKAGE_TYPE",
    CUSTOM = "CUSTOM",
    FLAT_RATE_ENVELOPE = "FLAT_RATE_ENVELOPE",
    PADDED_FLAT_RATE_ENVELOPE = "PADDED_FLAT_RATE_ENVELOPE",
    SMALL_FLAT_RATE_BOX = "SMALL_FLAT_RATE_BOX",
    MEDIUM_FLAT_RATE_BOX_1 = "MEDIUM_FLAT_RATE_BOX_1",
    MEDIUM_FLAT_RATE_BOX_2 = "MEDIUM_FLAT_RATE_BOX_2",
    LARGE_FLAT_RATE_BOX = "LARGE_FLAT_RATE_BOX"
}
interface PackageDetails {
    /**
     * Package name. Must be set when package type is CUSTOM.
     * For other package types, it is read-only, and an exception will be thrown
     * if it set when creating a ShippoConfiguration.
     */
    name?: string | null;
    /**
     * Package dimensions. Can only be set when package type is CUSTOM.
     * For other package types, it is read-only, and an exception will be thrown
     * if it set when creating a ShippoConfiguration.
     */
    dimensions?: PackageDimensions;
    /**
     * Maximum number of products. Must be set when package type is NOT CUSTOM.
     * Otherwise, if the package type is CUSTOM, this field cannot be set and an
     * exception will be thrown if it is set when creating a ShippoConfiguration.
     */
    maxNumberOfProducts?: string | null;
}
interface PackageDimensions {
    /** Package length. */
    length?: string;
    /** Package width. */
    width?: string;
    /** Package height. */
    height?: string;
}
/** Physical address */
interface Address$4 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$4;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$4 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface ExtendedFields$2 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateShippoConfigurationRequest {
    /** ShippoConfiguration to be created. */
    shippoConfiguration: ShippoConfiguration;
    backupRate?: string | null;
}
interface CreateShippoConfigurationResponse {
    /** The created ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface GetShippoConfigurationRequest {
    /** ID of the ShippoConfiguration to retrieve. */
    shippoConfigurationId: string;
}
interface GetShippoConfigurationResponse {
    /** The requested ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface UpdateShippoConfigurationRequest {
    /** ShippoConfiguration to be updated, may be partial. */
    shippoConfiguration: ShippoConfiguration;
}
interface UpdateShippoConfigurationResponse {
    /** Updated ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface DeleteShippoConfigurationRequest {
    /** ID of the ShippoConfiguration to delete. */
    shippoConfigurationId: string;
}
interface DeleteShippoConfigurationResponse {
}
interface QueryShippoConfigurationsRequest {
    /** WQL expression. */
    query?: CursorQuery$2;
}
interface CursorQuery$2 extends CursorQueryPagingMethodOneOf$2 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$4;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$4[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$2 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$4;
}
interface Sorting$4 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$4;
}
declare enum SortOrder$4 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$4 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryShippoConfigurationsResponse {
    /** List of ShippoConfigurations. */
    shippoConfigurations?: ShippoConfiguration[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$2;
}
interface CursorPagingMetadata$2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$4;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$4 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateExtendedFieldsRequest {
    /** ID of the entity to update. */
    _id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse {
    /** Updated ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface HandlingFeeNonNullableFields {
    value: string;
    calculationType: CalculationType;
}
interface ServiceSettingsNonNullableFields {
    handlingFee?: HandlingFeeNonNullableFields;
}
interface DomesticServiceSettingsNonNullableFields {
    service: DomesticService;
    serviceSettings?: ServiceSettingsNonNullableFields;
}
interface InternationalServiceSettingsNonNullableFields {
    service: InternationalService;
    serviceSettings?: ServiceSettingsNonNullableFields;
}
interface PackageDimensionsNonNullableFields {
    length: string;
    width: string;
    height: string;
}
interface PackageDetailsNonNullableFields {
    dimensions?: PackageDimensionsNonNullableFields;
}
interface StreetAddressNonNullableFields$4 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$4 {
    streetAddress?: StreetAddressNonNullableFields$4;
}
interface ShippoConfigurationNonNullableFields {
    domesticServices: DomesticServiceSettingsNonNullableFields[];
    internationalServices: InternationalServiceSettingsNonNullableFields[];
    packageType: PackageType;
    packageDetails?: PackageDetailsNonNullableFields;
    shipFromAddress?: AddressNonNullableFields$4;
}
interface CreateShippoConfigurationResponseNonNullableFields {
    shippoConfiguration?: ShippoConfigurationNonNullableFields;
}
interface GetShippoConfigurationResponseNonNullableFields {
    shippoConfiguration?: ShippoConfigurationNonNullableFields;
}
interface UpdateShippoConfigurationResponseNonNullableFields {
    shippoConfiguration?: ShippoConfigurationNonNullableFields;
}
interface QueryShippoConfigurationsResponseNonNullableFields {
    shippoConfigurations: ShippoConfigurationNonNullableFields[];
}
interface UpdateExtendedFieldsResponseNonNullableFields {
    shippoConfiguration?: ShippoConfigurationNonNullableFields;
}

type __PublicMethodMetaInfo$6<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createShippoConfiguration(): __PublicMethodMetaInfo$6<'POST', {}, CreateShippoConfigurationRequest, CreateShippoConfigurationRequest$1, CreateShippoConfigurationResponse & CreateShippoConfigurationResponseNonNullableFields, CreateShippoConfigurationResponse$1 & CreateShippoConfigurationResponseNonNullableFields$1>;
declare function getShippoConfiguration(): __PublicMethodMetaInfo$6<'GET', {
    shippoConfigurationId: string;
}, GetShippoConfigurationRequest, GetShippoConfigurationRequest$1, GetShippoConfigurationResponse & GetShippoConfigurationResponseNonNullableFields, GetShippoConfigurationResponse$1 & GetShippoConfigurationResponseNonNullableFields$1>;
declare function updateShippoConfiguration(): __PublicMethodMetaInfo$6<'PATCH', {
    shippoConfigurationId: string;
}, UpdateShippoConfigurationRequest, UpdateShippoConfigurationRequest$1, UpdateShippoConfigurationResponse & UpdateShippoConfigurationResponseNonNullableFields, UpdateShippoConfigurationResponse$1 & UpdateShippoConfigurationResponseNonNullableFields$1>;
declare function deleteShippoConfiguration(): __PublicMethodMetaInfo$6<'DELETE', {
    shippoConfigurationId: string;
}, DeleteShippoConfigurationRequest, DeleteShippoConfigurationRequest$1, DeleteShippoConfigurationResponse, DeleteShippoConfigurationResponse$1>;
declare function queryShippoConfigurations(): __PublicMethodMetaInfo$6<'GET', {}, QueryShippoConfigurationsRequest, QueryShippoConfigurationsRequest$1, QueryShippoConfigurationsResponse & QueryShippoConfigurationsResponseNonNullableFields, QueryShippoConfigurationsResponse$1 & QueryShippoConfigurationsResponseNonNullableFields$1>;
declare function updateExtendedFields(): __PublicMethodMetaInfo$6<'POST', {
    id: string;
}, UpdateExtendedFieldsRequest, UpdateExtendedFieldsRequest$1, UpdateExtendedFieldsResponse & UpdateExtendedFieldsResponseNonNullableFields, UpdateExtendedFieldsResponse$1 & UpdateExtendedFieldsResponseNonNullableFields$1>;

declare const meta$6_createShippoConfiguration: typeof createShippoConfiguration;
declare const meta$6_deleteShippoConfiguration: typeof deleteShippoConfiguration;
declare const meta$6_getShippoConfiguration: typeof getShippoConfiguration;
declare const meta$6_queryShippoConfigurations: typeof queryShippoConfigurations;
declare const meta$6_updateExtendedFields: typeof updateExtendedFields;
declare const meta$6_updateShippoConfiguration: typeof updateShippoConfiguration;
declare namespace meta$6 {
  export { type __PublicMethodMetaInfo$6 as __PublicMethodMetaInfo, meta$6_createShippoConfiguration as createShippoConfiguration, meta$6_deleteShippoConfiguration as deleteShippoConfiguration, meta$6_getShippoConfiguration as getShippoConfiguration, meta$6_queryShippoConfigurations as queryShippoConfigurations, meta$6_updateExtendedFields as updateExtendedFields, meta$6_updateShippoConfiguration as updateShippoConfiguration };
}

interface CalculateTotalsRequest$1 extends CalculateTotalsRequestCouponOneOf$1, CalculateTotalsRequestGiftCardOneOf$1 {
    /** Coupon ID. */
    couponId?: string | null;
    /** Coupon code. */
    couponCode?: string | null;
    /** Gift card ID. */
    giftCardId?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
    /**
     * Calculation ID. An identifier of the entity that you are calculating totals for, for example, cart ID or checkout ID.
     * This value will be used in order to optimise calculations by caching.
     * If not passed, calculation might be slower in some cases.
     */
    calculationId?: string | null;
    /** Line items for calculation. */
    lineItems?: LineItem$1[];
    /** Shipping address for tax and shipping calculation (if applicable). */
    shippingAddress?: Address$3;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$3;
    /** Details about selected shipping option. */
    selectedShippingOption?: SelectedShippingOption$1;
    /**
     * Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart/checkout.
     * @deprecated
     */
    merchantDiscounts?: MerchantDiscountInput$1[];
    /** Buyer email. Used to enforce coupon [single-use per customer](https://support.wix.com/en/article/wix-stores-limiting-coupon-usage). If not passed, single coupon usage per customer will not be enforced. */
    buyerEmail?: string | null;
    /**
     * Member id to use for this calculation
     * When not provided, given that the caller is a member, its member id will be used
     * Providing this require elevated permissions - ECOM.ADMIN_CALCULATE_TOTALS
     */
    memberId?: string | null;
    /**
     * The selected memberships and which line items they apply to
     * When not provided, default selection will be returned
     * You can also set it to empty selection
     */
    selectedMemberships?: SelectedMemberships$1;
    /** Buyer phone number. Used to get shipping rates. */
    buyerPhone?: string | null;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}
/** @oneof */
interface CalculateTotalsRequestCouponOneOf$1 {
    /** Coupon ID. */
    couponId?: string | null;
    /** Coupon code. */
    couponCode?: string | null;
}
/** @oneof */
interface CalculateTotalsRequestGiftCardOneOf$1 {
    /** Gift card ID. */
    giftCardId?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
}
interface LineItem$1 {
    /** Line item ID. */
    id?: string;
    /** Quantity. */
    quantity?: number | null;
    /**
     * Optional references to the line item's origin catalog.
     * See [Catalog SPI](https://bo.wix.com/wix-docs/rest/ecommerce/catalog-spi/introduction) for more details.
     * This field may be empty in the case of a custom line item.
     * currently we only use the catalog app id to set tax=0 for specific apps.
     */
    catalogReference?: CatalogReference$5;
    /** Product/booking/event name. */
    productName?: string | null;
    /** Price. */
    price?: string;
    /** Physical properties (if applicable). */
    physicalProperties?: PhysicalProperties$3;
    /** Subscription settings. */
    subscriptionSettings?: SubscriptionSettings$1;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$1;
    /** Service properties. When relevant, this contains information such as date and number of participants. */
    serviceProperties?: ServiceProperties$1;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field has the same value as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Optional - partial amount of item's price to be paid now for checkout cases with DEPOSIT_ONLINE payment option
     * If omitted - item's price will not be split and is expected to be paid in single installment
     */
    depositAmount?: string | null;
    /** full price of the item before all the discounts */
    fullPrice?: string | null;
    /** The Item's Delivery Profile Id */
    deliveryProfileId?: string | null;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType$1;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$5 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface PhysicalProperties$3 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface SubscriptionSettings$1 {
    /** Frequency of recurring payment. Every day/week/month/year. */
    frequency?: SubscriptionFrequency$1;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$1 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType$1 {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties$1 {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface ItemType$1 extends ItemTypeItemTypeDataOneOf$1 {
    /** Preset item type. */
    preset?: ItemTypeItemType$1;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf$1 {
    /** Preset item type. */
    preset?: ItemTypeItemType$1;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType$1 {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
declare enum TaxableAddressType$1 {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Physical address */
interface Address$3 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$3;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress$3 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface SelectedShippingOption$1 {
    /** Carrier ID. */
    carrierId?: string | null;
    /** Selected shipping option code. For example, "usps_std_overnight". */
    code?: string;
}
interface MerchantDiscountInput$1 {
    /** Discount amount. */
    amount?: string;
    /** IDs of line items the discount applies to. */
    lineItemIds?: string[];
}
interface SelectedMemberships$1 {
    /** Selected memberships. */
    memberships?: SelectedMembership$1[];
}
interface SelectedMembership$1 {
    /** Membership ID. */
    id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface ShippingOption$1 {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics$3;
    /** Sipping price information. */
    cost?: ShippingPrice$1;
}
interface DeliveryLogistics$3 {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails$3;
}
interface PickupDetails$3 {
    /** Pickup address. */
    address?: Address$3;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod$3;
}
declare enum PickupMethod$3 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface ShippingPrice$1 {
    /** Shipping price. */
    price?: MultiCurrencyPrice$1;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge$1[];
}
interface MultiCurrencyPrice$1 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface OtherCharge$1 {
    /** Type of additional cost. */
    type?: ChargeType$3;
    /** Price of added cost. */
    price?: MultiCurrencyPrice$1;
}
declare enum ChargeType$3 {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface AppliedDiscount$1 extends AppliedDiscountDiscountSourceOneOf$1 {
    /** Coupon details. */
    coupon?: Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$1;
    /** Discount rule */
    discountRule?: DiscountRule$1;
    /** Discount type. */
    discountType?: DiscountType$1;
    /**
     * IDs of line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf$1 {
    /** Coupon details. */
    coupon?: Coupon$1;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount$1;
    /** Discount rule */
    discountRule?: DiscountRule$1;
}
declare enum DiscountType$1 {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon$1 {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice$1;
    /** Coupon name. */
    name?: string;
}
interface MerchantDiscount$1 {
    /** Discount value. */
    amount?: MultiCurrencyPrice$1;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule$1 {
    /** Discount rule ID */
    id?: string;
    /** Discount rule name */
    name?: DiscountRuleName$1;
    /** Discount value. */
    amount?: MultiCurrencyPrice$1;
}
interface DiscountRuleName$1 {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface CalculateTotalsResponse$1 {
    /** Calculate line items. */
    calculatedLineItems?: CalculatedLineItem$1[];
    /** Price summary. */
    priceSummary?: PriceSummary$1;
    /** Details of applied gift card. */
    giftCard?: GiftCard$1;
    /** Tax summary. */
    taxSummary?: TaxSummary$1;
    /** Shipping information. */
    shippingInfo?: ShippingInformation$1;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount$1[];
    /** Calculation errors. */
    calculationErrors?: CalculationErrors$1;
    /** Weight unit. */
    weightUnit?: WeightUnit$3;
    /** Currency. */
    currency?: string;
    /**
     * This is the display currency. Converted prices are presented in this currency.
     * @readonly
     */
    conversionCurrency?: string;
    /** Whether tax is included in price. */
    taxIncludedInPrice?: boolean;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary$1;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary$1;
    /** Information about valid and invalid memberships, and which ones are selected for usage. */
    membershipOptions?: MembershipOptions$1;
    /** Additional Fees */
    additionalFees?: V1AdditionalFee$1[];
    /**
     * The site currency.
     * @readonly
     */
    siteCurrency?: string;
    /**
     * The rate used when converting from the site currency to the checkout currency.
     * @readonly
     */
    checkoutConversionRate?: string | null;
    /**
     * The pay now total amount after the gift card is applied.
     * @readonly
     */
    payNowTotalAfterGiftCard?: MultiCurrencyPrice$1;
    /**
     * The total amount after gift card is applied.
     * @readonly
     */
    totalAfterGiftCard?: MultiCurrencyPrice$1;
}
interface CalculatedLineItem$1 {
    /** Line item ID. */
    lineItemId?: string;
    /** Price breakdown for this line item. */
    pricesBreakdown?: LineItemPricesData$1;
    /**
     * Type of selected payment option for current item. Supported values:
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item will happen as part of the checkout
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item will happen after the checkout
     * + `"MEMBERSHIP"` - This item cannot be paid via monetary payment options, only via non monetary option such membership. When this option is used, price must be set to 0
     * + `"DEPOSIT_ONLINE"` -  Partial payment of the given item will happen as part of the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType$1;
}
interface LineItemPricesData$1 {
    /** Total price after discounts and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$1;
    /** Total price after discounts, and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$1;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$1;
    /** Total discount for all line items. */
    totalDiscount?: MultiCurrencyPrice$1;
    /** Catalog price after catalog discount and automatic discounts. */
    price?: MultiCurrencyPrice$1;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: MultiCurrencyPrice$1;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: MultiCurrencyPrice$1;
    /** Item price **before** line item discounts and **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: MultiCurrencyPrice$1;
}
interface ItemTaxFullDetails$1 {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice$1;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice$1;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown$1[];
}
interface TaxRateBreakdown$1 {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice$1;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType$1 {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface PriceSummary$1 {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice$1;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice$1;
    /** Total tax. */
    tax?: MultiCurrencyPrice$1;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice$1;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice$1;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice$1;
}
interface GiftCard$1 {
    /**
     * Gift Card ID.
     * @deprecated
     */
    id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice$1;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface TaxSummary$1 {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice$1;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice$1;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails$1;
}
interface TaxCalculationDetails$1 extends TaxCalculationDetailsCalculationDetailsOneOf$1 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$1;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$1;
    /** Rate calculation type. */
    rateType?: RateType$1;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf$1 {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason$1;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails$1;
}
declare enum RateType$1 {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason$1 {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails$1 {
    /** reason for fallback */
    fallbackReason?: FallbackReason$1;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError$3;
}
declare enum FallbackReason$1 {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
interface ApplicationError$3 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface ShippingInformation$1 {
    /** Shipping region. */
    region?: ShippingRegion$1;
    /** Selected shipping option. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption$1;
    /** All shipping options. */
    carrierServiceOptions?: CarrierServiceOption$1[];
}
interface ShippingRegion$1 {
    /**
     * Shipping region ID.
     * @readonly
     */
    id?: string;
    /** Shipping region name. */
    name?: string;
}
interface SelectedCarrierServiceOption$1 {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics$3;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices$1;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge$1[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface SelectedCarrierServiceOptionPrices$1 {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice$1;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice$1;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$1;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice$1;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice$1;
}
interface SelectedCarrierServiceOptionOtherCharge$1 {
    /** Type of additional cost. */
    type?: ChargeType$3;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices$1;
}
interface CarrierServiceOption$1 {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption$1[];
}
interface CalculationErrors$1 extends CalculationErrorsShippingCalculationErrorOneOf$1 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$3;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$1;
    /** Tax calculation error. */
    taxCalculationError?: Details$3;
    /** Coupon calculation error. */
    couponCalculationError?: Details$3;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details$3;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$3[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details$3;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details$3;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf$1 {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$3;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors$1;
}
interface Details$3 extends DetailsKindOneOf$3 {
    applicationError?: ApplicationError$3;
    validationError?: ValidationError$3;
    systemError?: SystemError$3;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$3 {
    applicationError?: ApplicationError$3;
    validationError?: ValidationError$3;
    systemError?: SystemError$3;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$3 {
    fieldViolations?: FieldViolation$3[];
}
declare enum RuleType$3 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$3 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$3;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$3 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors$1 {
    /** Carrier errors. */
    errors?: CarrierError$1[];
}
interface CarrierError$1 {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$3;
}
declare enum WeightUnit$3 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface MembershipOptions$1 {
    /** List of payment options that can be used. */
    eligibleMemberships?: Membership$1[];
    /** List of payment options that are owned by the member, but cannot be used due to reason provided. */
    invalidMemberships?: InvalidMembership$1[];
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMembership$1[];
}
interface Membership$1 {
    /** Membership ID. */
    id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName$1;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits$1;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName$1 {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface MembershipPaymentCredits$1 {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership$1 {
    /** Membership details. */
    membership?: Membership$1;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface V1AdditionalFee$1 {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice$1;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails$1;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice$1;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice$1;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface MultiCurrencyPriceNonNullableFields$1 {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface TaxRateBreakdownNonNullableFields$1 {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields$1;
    exemptAmount?: MultiCurrencyPriceNonNullableFields$1;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields$1;
}
interface TaxBreakdownNonNullableFields$1 {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields$1;
    taxAmount?: MultiCurrencyPriceNonNullableFields$1;
    taxableAmount?: MultiCurrencyPriceNonNullableFields$1;
    jurisdictionType: JurisdictionType$1;
}
interface ItemTaxFullDetailsNonNullableFields$1 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$1;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields$1;
    rateBreakdown: TaxRateBreakdownNonNullableFields$1[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields$1;
    taxBreakdown: TaxBreakdownNonNullableFields$1[];
}
interface LineItemPricesDataNonNullableFields$1 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$1;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$1;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$1;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$1;
    price?: MultiCurrencyPriceNonNullableFields$1;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields$1;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields$1;
    fullPrice?: MultiCurrencyPriceNonNullableFields$1;
}
interface TaxableAddressNonNullableFields$1 {
    addressType: TaxableAddressType$1;
}
interface CalculatedLineItemNonNullableFields$1 {
    lineItemId: string;
    pricesBreakdown?: LineItemPricesDataNonNullableFields$1;
    paymentOption: PaymentOptionType$1;
    taxableAddress?: TaxableAddressNonNullableFields$1;
}
interface PriceSummaryNonNullableFields$1 {
    subtotal?: MultiCurrencyPriceNonNullableFields$1;
    shipping?: MultiCurrencyPriceNonNullableFields$1;
    tax?: MultiCurrencyPriceNonNullableFields$1;
    discount?: MultiCurrencyPriceNonNullableFields$1;
    total?: MultiCurrencyPriceNonNullableFields$1;
    additionalFees?: MultiCurrencyPriceNonNullableFields$1;
}
interface GiftCardNonNullableFields$1 {
    id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields$1;
    appId: string;
}
interface ApplicationErrorNonNullableFields$3 {
    code: string;
    description: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields$1 {
    fallbackReason: FallbackReason$1;
    error?: ApplicationErrorNonNullableFields$3;
}
interface TaxCalculationDetailsNonNullableFields$1 {
    manualRateReason: ManualCalculationReason$1;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields$1;
    rateType: RateType$1;
}
interface AggregatedTaxBreakdownNonNullableFields$1 {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType$1;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields$1;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields$1;
}
interface TaxSummaryNonNullableFields$1 {
    taxableAmount?: MultiCurrencyPriceNonNullableFields$1;
    totalTax?: MultiCurrencyPriceNonNullableFields$1;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields$1;
    totalExempt?: MultiCurrencyPriceNonNullableFields$1;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields$1[];
}
interface ShippingRegionNonNullableFields$1 {
    id: string;
    name: string;
}
interface StreetAddressNonNullableFields$3 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$3 {
    streetAddress?: StreetAddressNonNullableFields$3;
}
interface PickupDetailsNonNullableFields$3 {
    address?: AddressNonNullableFields$3;
    businessLocation: boolean;
    pickupMethod: PickupMethod$3;
}
interface DeliveryLogisticsNonNullableFields$3 {
    pickupDetails?: PickupDetailsNonNullableFields$3;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields$1 {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields$1;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields$1;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$1;
    totalDiscount?: MultiCurrencyPriceNonNullableFields$1;
    price?: MultiCurrencyPriceNonNullableFields$1;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields$1 {
    type: ChargeType$3;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$1;
}
interface SelectedCarrierServiceOptionNonNullableFields$1 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$3;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields$1;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields$1[];
}
interface OtherChargeNonNullableFields$1 {
    type: ChargeType$3;
    price?: MultiCurrencyPriceNonNullableFields$1;
}
interface ShippingPriceNonNullableFields$1 {
    price?: MultiCurrencyPriceNonNullableFields$1;
    otherCharges: OtherChargeNonNullableFields$1[];
}
interface ShippingOptionNonNullableFields$1 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$3;
    cost?: ShippingPriceNonNullableFields$1;
}
interface CarrierServiceOptionNonNullableFields$1 {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields$1[];
}
interface ShippingInformationNonNullableFields$1 {
    region?: ShippingRegionNonNullableFields$1;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields$1;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields$1[];
}
interface CouponNonNullableFields$1 {
    id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields$1;
    name: string;
    couponType: string;
}
interface MerchantDiscountNonNullableFields$1 {
    amount?: MultiCurrencyPriceNonNullableFields$1;
}
interface DiscountRuleNameNonNullableFields$1 {
    original: string;
}
interface DiscountRuleNonNullableFields$1 {
    id: string;
    name?: DiscountRuleNameNonNullableFields$1;
    amount?: MultiCurrencyPriceNonNullableFields$1;
}
interface LineItemDiscountNonNullableFields$1 {
    id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields$1;
}
interface AppliedDiscountNonNullableFields$1 {
    coupon?: CouponNonNullableFields$1;
    merchantDiscount?: MerchantDiscountNonNullableFields$1;
    discountRule?: DiscountRuleNonNullableFields$1;
    discountType: DiscountType$1;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields$1[];
}
interface FieldViolationNonNullableFields$3 {
    field: string;
    description: string;
    violatedRule: RuleType$3;
}
interface ValidationErrorNonNullableFields$3 {
    fieldViolations: FieldViolationNonNullableFields$3[];
}
interface DetailsNonNullableFields$3 {
    applicationError?: ApplicationErrorNonNullableFields$3;
    validationError?: ValidationErrorNonNullableFields$3;
}
interface CarrierErrorNonNullableFields$1 {
    carrierId: string;
    error?: DetailsNonNullableFields$3;
}
interface CarrierErrorsNonNullableFields$1 {
    errors: CarrierErrorNonNullableFields$1[];
}
interface CalculationErrorsNonNullableFields$1 {
    generalShippingCalculationError?: DetailsNonNullableFields$3;
    carrierErrors?: CarrierErrorsNonNullableFields$1;
    taxCalculationError?: DetailsNonNullableFields$3;
    couponCalculationError?: DetailsNonNullableFields$3;
    giftCardCalculationError?: DetailsNonNullableFields$3;
    orderValidationErrors: ApplicationErrorNonNullableFields$3[];
    membershipError?: DetailsNonNullableFields$3;
    discountsCalculationError?: DetailsNonNullableFields$3;
}
interface MembershipNameNonNullableFields$1 {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields$1 {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields$1 {
    id: string;
    appId: string;
    name?: MembershipNameNonNullableFields$1;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields$1;
}
interface InvalidMembershipNonNullableFields$1 {
    membership?: MembershipNonNullableFields$1;
    reason: string;
}
interface SelectedMembershipNonNullableFields$1 {
    id: string;
    appId: string;
    lineItemIds: string[];
}
interface MembershipOptionsNonNullableFields$1 {
    eligibleMemberships: MembershipNonNullableFields$1[];
    invalidMemberships: InvalidMembershipNonNullableFields$1[];
    selectedMemberships: SelectedMembershipNonNullableFields$1[];
}
interface V1AdditionalFeeNonNullableFields$1 {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields$1;
    taxDetails?: ItemTaxFullDetailsNonNullableFields$1;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields$1;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields$1;
    lineItemIds: string[];
}
interface CalculateTotalsResponseNonNullableFields$1 {
    calculatedLineItems: CalculatedLineItemNonNullableFields$1[];
    priceSummary?: PriceSummaryNonNullableFields$1;
    giftCard?: GiftCardNonNullableFields$1;
    taxSummary?: TaxSummaryNonNullableFields$1;
    shippingInfo?: ShippingInformationNonNullableFields$1;
    appliedDiscounts: AppliedDiscountNonNullableFields$1[];
    calculationErrors?: CalculationErrorsNonNullableFields$1;
    weightUnit: WeightUnit$3;
    currency: string;
    conversionCurrency: string;
    taxIncludedInPrice: boolean;
    payNow?: PriceSummaryNonNullableFields$1;
    payLater?: PriceSummaryNonNullableFields$1;
    membershipOptions?: MembershipOptionsNonNullableFields$1;
    additionalFees: V1AdditionalFeeNonNullableFields$1[];
    siteCurrency: string;
    payNowTotalAfterGiftCard?: MultiCurrencyPriceNonNullableFields$1;
    totalAfterGiftCard?: MultiCurrencyPriceNonNullableFields$1;
}

interface CalculateTotalsRequest extends CalculateTotalsRequestCouponOneOf, CalculateTotalsRequestGiftCardOneOf {
    /** Coupon ID. */
    couponId?: string | null;
    /** Coupon code. */
    couponCode?: string | null;
    /** Gift card ID. */
    giftCardId?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
    /**
     * Calculation ID. An identifier of the entity that you are calculating totals for, for example, cart ID or checkout ID.
     * This value will be used in order to optimise calculations by caching.
     * If not passed, calculation might be slower in some cases.
     */
    calculationId?: string | null;
    /** Line items for calculation. */
    lineItems?: LineItem[];
    /** Shipping address for tax and shipping calculation (if applicable). */
    shippingAddress?: Address$2;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address$2;
    /** Details about selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /**
     * Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart/checkout.
     * @deprecated
     */
    merchantDiscounts?: MerchantDiscountInput[];
    /** Buyer email. Used to enforce coupon [single-use per customer](https://support.wix.com/en/article/wix-stores-limiting-coupon-usage). If not passed, single coupon usage per customer will not be enforced. */
    buyerEmail?: string | null;
    /**
     * Member id to use for this calculation
     * When not provided, given that the caller is a member, its member id will be used
     * Providing this require elevated permissions - ECOM.ADMIN_CALCULATE_TOTALS
     */
    memberId?: string | null;
    /**
     * The selected memberships and which line items they apply to
     * When not provided, default selection will be returned
     * You can also set it to empty selection
     */
    selectedMemberships?: SelectedMemberships;
    /** Buyer phone number. Used to get shipping rates. */
    buyerPhone?: string | null;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}
/** @oneof */
interface CalculateTotalsRequestCouponOneOf {
    /** Coupon ID. */
    couponId?: string | null;
    /** Coupon code. */
    couponCode?: string | null;
}
/** @oneof */
interface CalculateTotalsRequestGiftCardOneOf {
    /** Gift card ID. */
    giftCardId?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
}
interface LineItem {
    /** Line item ID. */
    _id?: string;
    /** Quantity. */
    quantity?: number | null;
    /**
     * Optional references to the line item's origin catalog.
     * See [Catalog SPI](https://bo.wix.com/wix-docs/rest/ecommerce/catalog-spi/introduction) for more details.
     * This field may be empty in the case of a custom line item.
     * currently we only use the catalog app id to set tax=0 for specific apps.
     */
    catalogReference?: CatalogReference$4;
    /** Product/booking/event name. */
    productName?: string | null;
    /** Price. */
    price?: string;
    /** Physical properties (if applicable). */
    physicalProperties?: PhysicalProperties$2;
    /** Subscription settings. */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType;
    /** Service properties. When relevant, this contains information such as date and number of participants. */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field has the same value as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Optional - partial amount of item's price to be paid now for checkout cases with DEPOSIT_ONLINE payment option
     * If omitted - item's price will not be split and is expected to be paid in single installment
     */
    depositAmount?: string | null;
    /** full price of the item before all the discounts */
    fullPrice?: string | null;
    /** The Item's Delivery Profile Id */
    deliveryProfileId?: string | null;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$4 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface PhysicalProperties$2 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface SubscriptionSettings {
    /** Frequency of recurring payment. Every day/week/month/year. */
    frequency?: SubscriptionFrequency;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
interface ServiceProperties {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Physical address */
interface Address$2 {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress$2;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
}
interface StreetAddress$2 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface SelectedShippingOption {
    /** Carrier ID. */
    carrierId?: string | null;
    /** Selected shipping option code. For example, "usps_std_overnight". */
    code?: string;
}
interface MerchantDiscountInput {
    /** Discount amount. */
    amount?: string;
    /** IDs of line items the discount applies to. */
    lineItemIds?: string[];
}
interface SelectedMemberships {
    /** Selected memberships. */
    memberships?: SelectedMembership[];
}
interface SelectedMembership {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
interface ShippingOption {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics$2;
    /** Sipping price information. */
    cost?: ShippingPrice;
}
interface DeliveryLogistics$2 {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails$2;
}
interface PickupDetails$2 {
    /** Pickup address. */
    address?: Address$2;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod$2;
}
declare enum PickupMethod$2 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface ShippingPrice {
    /** Shipping price. */
    price?: MultiCurrencyPrice;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge[];
}
interface MultiCurrencyPrice {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface OtherCharge {
    /** Type of additional cost. */
    type?: ChargeType$2;
    /** Price of added cost. */
    price?: MultiCurrencyPrice;
}
declare enum ChargeType$2 {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule;
    /** Discount type. */
    discountType?: DiscountType;
    /**
     * IDs of line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule;
}
declare enum DiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice;
    /** Coupon name. */
    name?: string;
}
interface MerchantDiscount {
    /** Discount value. */
    amount?: MultiCurrencyPrice;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
interface DiscountRule {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName;
    /** Discount value. */
    amount?: MultiCurrencyPrice;
}
interface DiscountRuleName {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface CalculateTotalsResponse {
    /** Calculate line items. */
    calculatedLineItems?: CalculatedLineItem[];
    /** Price summary. */
    priceSummary?: PriceSummary;
    /** Details of applied gift card. */
    giftCard?: GiftCard;
    /** Tax summary. */
    taxSummary?: TaxSummary;
    /** Shipping information. */
    shippingInfo?: ShippingInformation;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount[];
    /** Calculation errors. */
    calculationErrors?: CalculationErrors;
    /** Weight unit. */
    weightUnit?: WeightUnit$2;
    /** Currency. */
    currency?: string;
    /**
     * This is the display currency. Converted prices are presented in this currency.
     * @readonly
     */
    conversionCurrency?: string;
    /** Whether tax is included in price. */
    taxIncludedInPrice?: boolean;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary;
    /** Information about valid and invalid memberships, and which ones are selected for usage. */
    membershipOptions?: MembershipOptions;
    /** Additional Fees */
    additionalFees?: V1AdditionalFee[];
    /**
     * The site currency.
     * @readonly
     */
    siteCurrency?: string;
    /**
     * The rate used when converting from the site currency to the checkout currency.
     * @readonly
     */
    checkoutConversionRate?: string | null;
    /**
     * The pay now total amount after the gift card is applied.
     * @readonly
     */
    payNowTotalAfterGiftCard?: MultiCurrencyPrice;
    /**
     * The total amount after gift card is applied.
     * @readonly
     */
    totalAfterGiftCard?: MultiCurrencyPrice;
}
interface CalculatedLineItem {
    /** Line item ID. */
    lineItemId?: string;
    /** Price breakdown for this line item. */
    pricesBreakdown?: LineItemPricesData;
    /**
     * Type of selected payment option for current item. Supported values:
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item will happen as part of the checkout
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item will happen after the checkout
     * + `"MEMBERSHIP"` - This item cannot be paid via monetary payment options, only via non monetary option such membership. When this option is used, price must be set to 0
     * + `"DEPOSIT_ONLINE"` -  Partial payment of the given item will happen as part of the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType;
}
interface LineItemPricesData {
    /** Total price after discounts and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price after discounts, and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Total discount for all line items. */
    totalDiscount?: MultiCurrencyPrice;
    /** Catalog price after catalog discount and automatic discounts. */
    price?: MultiCurrencyPrice;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: MultiCurrencyPrice;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: MultiCurrencyPrice;
    /** Item price **before** line item discounts and **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: MultiCurrencyPrice;
}
interface ItemTaxFullDetails {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown[];
}
interface TaxRateBreakdown {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
interface PriceSummary {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice;
    /** Total tax. */
    tax?: MultiCurrencyPrice;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice;
}
interface GiftCard {
    /**
     * Gift Card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface TaxSummary {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails;
}
interface TaxCalculationDetails extends TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
    /** Rate calculation type. */
    rateType?: RateType;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
}
declare enum RateType {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
declare enum ManualCalculationReason {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
interface AutoTaxFallbackCalculationDetails {
    /** reason for fallback */
    fallbackReason?: FallbackReason;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError$2;
}
declare enum FallbackReason {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
interface ApplicationError$2 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface ShippingInformation {
    /** Shipping region. */
    region?: ShippingRegion;
    /** Selected shipping option. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption;
    /** All shipping options. */
    carrierServiceOptions?: CarrierServiceOption[];
}
interface ShippingRegion {
    /**
     * Shipping region ID.
     * @readonly
     */
    _id?: string;
    /** Shipping region name. */
    name?: string;
}
interface SelectedCarrierServiceOption {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics$2;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
interface SelectedCarrierServiceOptionPrices {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice;
}
interface SelectedCarrierServiceOptionOtherCharge {
    /** Type of additional cost. */
    type?: ChargeType$2;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices;
}
interface CarrierServiceOption {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption[];
}
interface CalculationErrors extends CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$2;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
    /** Tax calculation error. */
    taxCalculationError?: Details$2;
    /** Coupon calculation error. */
    couponCalculationError?: Details$2;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details$2;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError$2[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details$2;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details$2;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details$2;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
}
interface Details$2 extends DetailsKindOneOf$2 {
    applicationError?: ApplicationError$2;
    validationError?: ValidationError$2;
    systemError?: SystemError$2;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$2 {
    applicationError?: ApplicationError$2;
    validationError?: ValidationError$2;
    systemError?: SystemError$2;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$2 {
    fieldViolations?: FieldViolation$2[];
}
declare enum RuleType$2 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$2 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$2;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$2 {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors {
    /** Carrier errors. */
    errors?: CarrierError[];
}
interface CarrierError {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details$2;
}
declare enum WeightUnit$2 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface MembershipOptions {
    /** List of payment options that can be used. */
    eligibleMemberships?: Membership[];
    /** List of payment options that are owned by the member, but cannot be used due to reason provided. */
    invalidMemberships?: InvalidMembership[];
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMembership[];
}
interface Membership {
    /** Membership ID. */
    _id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
interface MembershipPaymentCredits {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership {
    /** Membership details. */
    membership?: Membership;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
interface V1AdditionalFee {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
interface MultiCurrencyPriceNonNullableFields {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface TaxRateBreakdownNonNullableFields {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields;
    exemptAmount?: MultiCurrencyPriceNonNullableFields;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
}
interface TaxBreakdownNonNullableFields {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields;
    taxAmount?: MultiCurrencyPriceNonNullableFields;
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    jurisdictionType: JurisdictionType;
}
interface ItemTaxFullDetailsNonNullableFields {
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields;
    rateBreakdown: TaxRateBreakdownNonNullableFields[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields;
    taxBreakdown: TaxBreakdownNonNullableFields[];
}
interface LineItemPricesDataNonNullableFields {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    totalDiscount?: MultiCurrencyPriceNonNullableFields;
    price?: MultiCurrencyPriceNonNullableFields;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields;
    fullPrice?: MultiCurrencyPriceNonNullableFields;
}
interface TaxableAddressNonNullableFields {
    addressType: TaxableAddressType;
}
interface CalculatedLineItemNonNullableFields {
    lineItemId: string;
    pricesBreakdown?: LineItemPricesDataNonNullableFields;
    paymentOption: PaymentOptionType;
    taxableAddress?: TaxableAddressNonNullableFields;
}
interface PriceSummaryNonNullableFields {
    subtotal?: MultiCurrencyPriceNonNullableFields;
    shipping?: MultiCurrencyPriceNonNullableFields;
    tax?: MultiCurrencyPriceNonNullableFields;
    discount?: MultiCurrencyPriceNonNullableFields;
    total?: MultiCurrencyPriceNonNullableFields;
    additionalFees?: MultiCurrencyPriceNonNullableFields;
}
interface GiftCardNonNullableFields {
    _id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields;
    appId: string;
}
interface ApplicationErrorNonNullableFields$2 {
    code: string;
    description: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields {
    fallbackReason: FallbackReason;
    error?: ApplicationErrorNonNullableFields$2;
}
interface TaxCalculationDetailsNonNullableFields {
    manualRateReason: ManualCalculationReason;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields;
    rateType: RateType;
}
interface AggregatedTaxBreakdownNonNullableFields {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields;
}
interface TaxSummaryNonNullableFields {
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    totalTax?: MultiCurrencyPriceNonNullableFields;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields;
    totalExempt?: MultiCurrencyPriceNonNullableFields;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields[];
}
interface ShippingRegionNonNullableFields {
    _id: string;
    name: string;
}
interface StreetAddressNonNullableFields$2 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$2 {
    streetAddress?: StreetAddressNonNullableFields$2;
}
interface PickupDetailsNonNullableFields$2 {
    address?: AddressNonNullableFields$2;
    businessLocation: boolean;
    pickupMethod: PickupMethod$2;
}
interface DeliveryLogisticsNonNullableFields$2 {
    pickupDetails?: PickupDetailsNonNullableFields$2;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    totalDiscount?: MultiCurrencyPriceNonNullableFields;
    price?: MultiCurrencyPriceNonNullableFields;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields {
    type: ChargeType$2;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields;
}
interface SelectedCarrierServiceOptionNonNullableFields {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$2;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields[];
}
interface OtherChargeNonNullableFields {
    type: ChargeType$2;
    price?: MultiCurrencyPriceNonNullableFields;
}
interface ShippingPriceNonNullableFields {
    price?: MultiCurrencyPriceNonNullableFields;
    otherCharges: OtherChargeNonNullableFields[];
}
interface ShippingOptionNonNullableFields {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$2;
    cost?: ShippingPriceNonNullableFields;
}
interface CarrierServiceOptionNonNullableFields {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields[];
}
interface ShippingInformationNonNullableFields {
    region?: ShippingRegionNonNullableFields;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields[];
}
interface CouponNonNullableFields {
    _id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields;
    name: string;
    couponType: string;
}
interface MerchantDiscountNonNullableFields {
    amount?: MultiCurrencyPriceNonNullableFields;
}
interface DiscountRuleNameNonNullableFields {
    original: string;
}
interface DiscountRuleNonNullableFields {
    _id: string;
    name?: DiscountRuleNameNonNullableFields;
    amount?: MultiCurrencyPriceNonNullableFields;
}
interface LineItemDiscountNonNullableFields {
    _id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields;
}
interface AppliedDiscountNonNullableFields {
    coupon?: CouponNonNullableFields;
    merchantDiscount?: MerchantDiscountNonNullableFields;
    discountRule?: DiscountRuleNonNullableFields;
    discountType: DiscountType;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields[];
}
interface FieldViolationNonNullableFields$2 {
    field: string;
    description: string;
    violatedRule: RuleType$2;
}
interface ValidationErrorNonNullableFields$2 {
    fieldViolations: FieldViolationNonNullableFields$2[];
}
interface DetailsNonNullableFields$2 {
    applicationError?: ApplicationErrorNonNullableFields$2;
    validationError?: ValidationErrorNonNullableFields$2;
}
interface CarrierErrorNonNullableFields {
    carrierId: string;
    error?: DetailsNonNullableFields$2;
}
interface CarrierErrorsNonNullableFields {
    errors: CarrierErrorNonNullableFields[];
}
interface CalculationErrorsNonNullableFields {
    generalShippingCalculationError?: DetailsNonNullableFields$2;
    carrierErrors?: CarrierErrorsNonNullableFields;
    taxCalculationError?: DetailsNonNullableFields$2;
    couponCalculationError?: DetailsNonNullableFields$2;
    giftCardCalculationError?: DetailsNonNullableFields$2;
    orderValidationErrors: ApplicationErrorNonNullableFields$2[];
    membershipError?: DetailsNonNullableFields$2;
    discountsCalculationError?: DetailsNonNullableFields$2;
}
interface MembershipNameNonNullableFields {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields {
    _id: string;
    appId: string;
    name?: MembershipNameNonNullableFields;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields;
}
interface InvalidMembershipNonNullableFields {
    membership?: MembershipNonNullableFields;
    reason: string;
}
interface SelectedMembershipNonNullableFields {
    _id: string;
    appId: string;
    lineItemIds: string[];
}
interface MembershipOptionsNonNullableFields {
    eligibleMemberships: MembershipNonNullableFields[];
    invalidMemberships: InvalidMembershipNonNullableFields[];
    selectedMemberships: SelectedMembershipNonNullableFields[];
}
interface V1AdditionalFeeNonNullableFields {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields;
    lineItemIds: string[];
}
interface CalculateTotalsResponseNonNullableFields {
    calculatedLineItems: CalculatedLineItemNonNullableFields[];
    priceSummary?: PriceSummaryNonNullableFields;
    giftCard?: GiftCardNonNullableFields;
    taxSummary?: TaxSummaryNonNullableFields;
    shippingInfo?: ShippingInformationNonNullableFields;
    appliedDiscounts: AppliedDiscountNonNullableFields[];
    calculationErrors?: CalculationErrorsNonNullableFields;
    weightUnit: WeightUnit$2;
    currency: string;
    conversionCurrency: string;
    taxIncludedInPrice: boolean;
    payNow?: PriceSummaryNonNullableFields;
    payLater?: PriceSummaryNonNullableFields;
    membershipOptions?: MembershipOptionsNonNullableFields;
    additionalFees: V1AdditionalFeeNonNullableFields[];
    siteCurrency: string;
    payNowTotalAfterGiftCard?: MultiCurrencyPriceNonNullableFields;
    totalAfterGiftCard?: MultiCurrencyPriceNonNullableFields;
}

type __PublicMethodMetaInfo$5<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function calculateTotals(): __PublicMethodMetaInfo$5<'POST', {}, CalculateTotalsRequest, CalculateTotalsRequest$1, CalculateTotalsResponse & CalculateTotalsResponseNonNullableFields, CalculateTotalsResponse$1 & CalculateTotalsResponseNonNullableFields$1>;

declare const meta$5_calculateTotals: typeof calculateTotals;
declare namespace meta$5 {
  export { type __PublicMethodMetaInfo$5 as __PublicMethodMetaInfo, meta$5_calculateTotals as calculateTotals };
}

interface ListCurrenciesRequest$1 {
}
interface ListCurrenciesResponse$1 {
    /** Supported currencies */
    currencies?: Currency$1[];
}
interface Currency$1 {
    /** Currency code. */
    code?: string;
    /** Currency symbol. */
    symbol?: string;
}
interface ConvertCurrencyRequest$1 {
    /** Amounts to convert. */
    amounts?: DecimalValue$1[];
    /** Original currency. */
    from: string;
    /** Target currency. */
    to: string;
}
interface DecimalValue$1 {
    /** Value without decimals (e.g., for 10.95 value will be 1095). */
    value?: string;
    /** Decimal places to apply (e.g., for 10.95 decimal_places will be 2). */
    decimalPlaces?: number;
}
interface ConvertCurrencyResponse$1 {
    /** Converted amounts. */
    amounts?: DecimalValue$1[];
    /** Date and time the conversion rate was last updated. */
    rateTimestamp?: Date | null;
}
interface ConversionRateRequest$1 {
    /** Original currency. */
    from: string;
    /** Target currency. */
    to: string;
}
interface ConversionRateResponse$1 {
    /** Conversion rate between 2 currencies. */
    rate?: DecimalValue$1;
    /** Date and time the conversion rate was last updated. */
    rateTimestamp?: Date | null;
}
interface CurrencyNonNullableFields$1 {
    code: string;
    symbol: string;
}
interface ListCurrenciesResponseNonNullableFields$1 {
    currencies: CurrencyNonNullableFields$1[];
}
interface DecimalValueNonNullableFields$1 {
    value: string;
    decimalPlaces: number;
}
interface ConvertCurrencyResponseNonNullableFields$1 {
    amounts: DecimalValueNonNullableFields$1[];
}
interface ConversionRateResponseNonNullableFields$1 {
    rate?: DecimalValueNonNullableFields$1;
}

interface ListCurrenciesRequest {
}
interface ListCurrenciesResponse {
    /** Supported currencies. */
    currencies?: Currency[];
}
interface Currency {
    /** A 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code. */
    code?: string;
    /** Currency symbol. */
    symbol?: string;
}
interface ConvertCurrencyRequest {
    /** Amounts to convert. */
    amounts?: DecimalValue[];
    /** Original currency to convert from as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `from` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function. */
    from: string;
    /** Target currency to convert to as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `to` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function. */
    to: string;
}
interface DecimalValue {
    /** The value without decimal points. For example, the number `10.95` becomes `1095`. */
    value?: string;
    /** Decimal places to apply. For example, the number of decimal places for `10.95`  is `2`. */
    decimalPlaces?: number;
}
interface ConvertCurrencyResponse {
    /** Converted amounts. */
    amounts?: DecimalValue[];
    /** Date and time the conversion rate was last updated. */
    rateTimestamp?: Date | null;
}
interface ConversionRateRequest {
    /** Original currency to get the rate for as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `from` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function. */
    from: string;
    /** Target currency to get the rate for as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `to` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function. */
    to: string;
}
interface ConversionRateResponse {
    /** Conversion rate between 2 currencies. */
    rate?: DecimalValue;
    /** Date and time the conversion rate was last updated. */
    rateTimestamp?: Date | null;
}
interface CurrencyNonNullableFields {
    code: string;
    symbol: string;
}
interface ListCurrenciesResponseNonNullableFields {
    currencies: CurrencyNonNullableFields[];
}
interface DecimalValueNonNullableFields {
    value: string;
    decimalPlaces: number;
}
interface ConvertCurrencyResponseNonNullableFields {
    amounts: DecimalValueNonNullableFields[];
}
interface ConversionRateResponseNonNullableFields {
    rate?: DecimalValueNonNullableFields;
}

type __PublicMethodMetaInfo$4<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function listCurrencies(): __PublicMethodMetaInfo$4<'GET', {}, ListCurrenciesRequest, ListCurrenciesRequest$1, ListCurrenciesResponse & ListCurrenciesResponseNonNullableFields, ListCurrenciesResponse$1 & ListCurrenciesResponseNonNullableFields$1>;
declare function convertCurrency(): __PublicMethodMetaInfo$4<'POST', {
    from: string;
    to: string;
}, ConvertCurrencyRequest, ConvertCurrencyRequest$1, ConvertCurrencyResponse & ConvertCurrencyResponseNonNullableFields, ConvertCurrencyResponse$1 & ConvertCurrencyResponseNonNullableFields$1>;
declare function getConversionRate(): __PublicMethodMetaInfo$4<'GET', {
    from: string;
    to: string;
}, ConversionRateRequest, ConversionRateRequest$1, ConversionRateResponse & ConversionRateResponseNonNullableFields, ConversionRateResponse$1 & ConversionRateResponseNonNullableFields$1>;

declare const meta$4_convertCurrency: typeof convertCurrency;
declare const meta$4_getConversionRate: typeof getConversionRate;
declare const meta$4_listCurrencies: typeof listCurrencies;
declare namespace meta$4 {
  export { type __PublicMethodMetaInfo$4 as __PublicMethodMetaInfo, meta$4_convertCurrency as convertCurrency, meta$4_getConversionRate as getConversionRate, meta$4_listCurrencies as listCurrencies };
}

interface DeliverableItem$1 {
    /** The ID of the line item. */
    id?: string;
    /** Item name. */
    name?: string;
    /** The number of items ordered. */
    quantity?: number;
    /** Reference to the item's origin catalog. */
    catalogReference?: CatalogReference$3;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties$1;
    /** Price of a single item after discounts. */
    price?: string;
    /** Total line item price before discounts. */
    totalPriceBeforeDiscount?: string | null;
    /** Price of a single item before discounts. */
    priceBeforeDiscount?: string | null;
    /** Total line item price after discounts. This is equal to `price` multiplied by `quantity`. */
    totalPrice?: string | null;
    /** For delivery rates by delivery profile id */
    deliveryProfileId?: string | null;
    /** whether tax is included in line item price */
    taxIncludedInPrice?: boolean | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$3 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface PhysicalProperties$1 {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
/** Physical address */
interface Address$1 extends AddressStreetOneOf$1 {
    /** Street name and number. */
    streetAddress?: StreetAddress$1;
    /** Main address line, usually street and number as free text. */
    addressLine?: string | null;
    /** Country code. */
    country?: string | null;
    /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    /** Free text providing more detailed address info. Usually contains Apt, Suite, and Floor. */
    addressLine2?: string | null;
}
/** @oneof */
interface AddressStreetOneOf$1 {
    /** Street name and number. */
    streetAddress?: StreetAddress$1;
    /** Main address line, usually street and number as free text. */
    addressLine?: string | null;
}
interface StreetAddress$1 {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
declare enum SubdivisionType {
    UNKNOWN_SUBDIVISION_TYPE = "UNKNOWN_SUBDIVISION_TYPE",
    /** State */
    ADMINISTRATIVE_AREA_LEVEL_1 = "ADMINISTRATIVE_AREA_LEVEL_1",
    /** County */
    ADMINISTRATIVE_AREA_LEVEL_2 = "ADMINISTRATIVE_AREA_LEVEL_2",
    /** City/town */
    ADMINISTRATIVE_AREA_LEVEL_3 = "ADMINISTRATIVE_AREA_LEVEL_3",
    /** Neighborhood/quarter */
    ADMINISTRATIVE_AREA_LEVEL_4 = "ADMINISTRATIVE_AREA_LEVEL_4",
    /** Street/block */
    ADMINISTRATIVE_AREA_LEVEL_5 = "ADMINISTRATIVE_AREA_LEVEL_5",
    /** ADMINISTRATIVE_AREA_LEVEL_0. Indicates the national political entity, and is typically the highest order type returned by the Geocoder. */
    COUNTRY = "COUNTRY"
}
/** Full contact details for an address */
interface FullAddressContactDetails$1 {
    /** Contact's first name. */
    firstName?: string | null;
    /** Contact's last name. */
    lastName?: string | null;
    /** Contact's phone number. */
    phone?: string | null;
    /** Contact's company name. */
    company?: string | null;
    /** Email associated with the address. */
    email?: string | null;
    /** Tax info. Currently usable only in Brazil. */
    vatId?: VatId$1;
}
interface VatId$1 {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$1;
}
/** tax info types */
declare enum VatType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
declare enum WeightUnit$1 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface DeliveryLogistics$1 {
    /** When the item is expected to be delivered in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for delivery. For example, for pickup: `"Ensure to come during business hours, and please don't park in the disabled spot"`. */
    instructions?: string | null;
    /** Pickup details. Should be returned only if order is for pickup. */
    pickupDetails?: PickupDetails$1;
    /** Date and Time of the delivery option */
    deliveryTimeSlot?: DeliveryTimeSlot$1;
}
interface PickupDetails$1 {
    /** Pickup address. */
    address?: Address$1;
    /**
     * Pickup method.
     *
     * Supported values:
     * + `"STORE_PICKUP"`: When pickup is from the merchant's brick and mortar store.
     * + `"PICKUP_POINT"`: When item is shipped to a specified pickup point.
     */
    pickupMethod?: PickupMethod$1;
}
declare enum PickupMethod$1 {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot$1 {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
interface DeliveryCost$1 {
    /** The shipping rate's price. Must align with the [currency's decimal separator](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). */
    price?: string;
    /** Currency of the shipping rate price as a 3-letter [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217). Must align with the `currency` passed to the function under the `metadata` field. */
    currency?: string;
    /** Additional costs. For example, a handling fee for packaging fragile items. */
    additionalCharges?: AdditionalCharge$1[];
}
interface AdditionalCharge$1 {
    /** Additional charge type. */
    type?: ChargeType$1;
    /** Description of the additional charge. For example, `"Handling fee of $5 applied for gift wrapping"`. */
    description?: string | null;
    /** Cost of additional charge. For example, `12.5`. */
    price?: string;
}
declare enum ChargeType$1 {
    HANDLING_FEE = "HANDLING_FEE"
}
interface Details$1 extends DetailsKindOneOf$1 {
    applicationError?: ApplicationError$1;
    validationError?: ValidationError$1;
    systemError?: SystemError$1;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf$1 {
    applicationError?: ApplicationError$1;
    validationError?: ValidationError$1;
    systemError?: SystemError$1;
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError$1 {
    fieldViolations?: FieldViolation$1[];
}
declare enum RuleType$1 {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation$1 {
    field?: string;
    description?: string;
    violatedRule?: RuleType$1;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError$1 {
    /** Error code. */
    errorCode?: string | null;
}
interface GetDeliverySolutionsRequest$1 {
    /** list of items to delivery that each of them points to delivery profile and delivery rule. */
    lineItems: DeliverableItem$1[];
    /** Destination the items should deliver to */
    destination: Address$1;
    /** Origin the items should deliver from */
    origin?: Address$1;
    /** Currency - Defaults to site's currency */
    currency: string | null;
    /** Contact details */
    contactDetails?: FullAddressContactDetails$1;
    /** Measure unit - defaults to site's weight unit */
    weightUnit?: WeightUnit$1;
    /** list of user preferences which are delivery options codes combined with delivery carrier app id */
    userPreferences?: UserPreference$1[];
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}
interface UserPreference$1 {
    /** The delivery carrier app id */
    appId?: string | null;
    /** The delivery option code */
    code?: string;
}
/**
 * Each delivery option has a list of items that can be delivered by it - the chosen one
 * on Errors throw a business error from TC to catch and trigger destination completion
 */
interface GetDeliverySolutionsResponse$1 {
    /** Delivery Options with their associated items */
    deliverySolutions?: DeliverySolution$1[];
    /** If a delivery carrier could not calculate rates, the error will be detailed here */
    errors?: DeliveryCarrierError$1[];
}
interface DeliverySolution$1 {
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
    /** Delivery rate title. For example, `"USPS Standard Overnight Delivery"`, `"Standard"`, or `"First-Class Package International"`. */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics$1;
    /** Delivery cost. */
    cost?: DeliveryCost$1;
    /** Delivery solution breakdown by delivery carrier and delivery region */
    breakdown?: Breakdown$1[];
    /** If the delivery solution is a partial and doesn't apply to all items. */
    partial?: boolean | null;
}
interface Breakdown$1 {
    /** The delivery option's carrier details, could be multiple if the delivery option is a combination of multiple carriers */
    deliveryCarrier?: Carrier$1;
    /** The delivery region that are relevant for this delivery solution. */
    deliveryRegion?: Region$1;
    /** Populated if the delivery solution is a partially supplied by this carrier. */
    applicableLineItems?: ApplicableLineItems$1;
}
interface Carrier$1 {
    /** The carrier app id */
    appId?: string | null;
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
}
interface Region$1 {
    /** The delivery region id. */
    id?: string | null;
    /** The delivery region name. */
    name?: string | null;
}
interface ApplicableLineItems$1 {
    /** Line items that the delivery solution is for. */
    lineItemIds?: string[];
}
interface DeliveryCarrierError$1 {
    /** The carrier app id */
    appId?: string | null;
    /** The error details */
    errorDetails?: Details$1;
}
interface StreetAddressNonNullableFields$1 {
    number: string;
    name: string;
    apt: string;
}
interface SubdivisionNonNullableFields {
    code: string;
    name: string;
    type: SubdivisionType;
}
interface AddressNonNullableFields$1 {
    streetAddress?: StreetAddressNonNullableFields$1;
    subdivisions: SubdivisionNonNullableFields[];
}
interface PickupDetailsNonNullableFields$1 {
    address?: AddressNonNullableFields$1;
    pickupMethod: PickupMethod$1;
}
interface DeliveryLogisticsNonNullableFields$1 {
    pickupDetails?: PickupDetailsNonNullableFields$1;
}
interface AdditionalChargeNonNullableFields$1 {
    type: ChargeType$1;
    price: string;
}
interface DeliveryCostNonNullableFields$1 {
    price: string;
    currency: string;
    additionalCharges: AdditionalChargeNonNullableFields$1[];
}
interface CarrierNonNullableFields$1 {
    code: string;
}
interface ApplicableLineItemsNonNullableFields$1 {
    lineItemIds: string[];
}
interface BreakdownNonNullableFields$1 {
    deliveryCarrier?: CarrierNonNullableFields$1;
    applicableLineItems?: ApplicableLineItemsNonNullableFields$1;
}
interface DeliverySolutionNonNullableFields$1 {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields$1;
    cost?: DeliveryCostNonNullableFields$1;
    breakdown: BreakdownNonNullableFields$1[];
}
interface ApplicationErrorNonNullableFields$1 {
    code: string;
    description: string;
}
interface FieldViolationNonNullableFields$1 {
    field: string;
    description: string;
    violatedRule: RuleType$1;
}
interface ValidationErrorNonNullableFields$1 {
    fieldViolations: FieldViolationNonNullableFields$1[];
}
interface DetailsNonNullableFields$1 {
    applicationError?: ApplicationErrorNonNullableFields$1;
    validationError?: ValidationErrorNonNullableFields$1;
}
interface DeliveryCarrierErrorNonNullableFields$1 {
    errorDetails?: DetailsNonNullableFields$1;
}
interface GetDeliverySolutionsResponseNonNullableFields$1 {
    deliverySolutions: DeliverySolutionNonNullableFields$1[];
    errors: DeliveryCarrierErrorNonNullableFields$1[];
}

interface DeliverableItem {
    /** The ID of the line item. */
    _id?: string;
    /** Item name. */
    name?: string;
    /** The number of items ordered. */
    quantity?: number;
    /** Reference to the item's origin catalog. */
    catalogReference?: CatalogReference$2;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /** Price of a single item after discounts. */
    price?: string;
    /** Total line item price before discounts. */
    totalPriceBeforeDiscount?: string | null;
    /** Price of a single item before discounts. */
    priceBeforeDiscount?: string | null;
    /** Total line item price after discounts. This is equal to `price` multiplied by `quantity`. */
    totalPrice?: string | null;
    /** For delivery rates by delivery profile id */
    deliveryProfileId?: string | null;
    /** whether tax is included in line item price */
    taxIncludedInPrice?: boolean | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference$2 {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface PhysicalProperties {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
/** Physical address */
interface Address extends AddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress;
    /** Main address line, usually street and number as free text. */
    addressLine1?: string | null;
    /** Country code. */
    country?: string | null;
    /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    /** Free text providing more detailed address info. Usually contains Apt, Suite, and Floor. */
    addressLine2?: string | null;
}
/** @oneof */
interface AddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress;
    /** Main address line, usually street and number as free text. */
    addressLine?: string | null;
}
interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails {
    /** Contact's first name. */
    firstName?: string | null;
    /** Contact's last name. */
    lastName?: string | null;
    /** Contact's phone number. */
    phone?: string | null;
    /** Contact's company name. */
    company?: string | null;
    /** Email associated with the address. */
    email?: string | null;
    /** Tax info. Currently usable only in Brazil. */
    vatId?: VatId;
}
interface VatId {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType;
}
/** tax info types */
declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
declare enum WeightUnit {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface DeliveryLogistics {
    /** When the item is expected to be delivered in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for delivery. For example, for pickup: `"Ensure to come during business hours, and please don't park in the disabled spot"`. */
    instructions?: string | null;
    /** Pickup details. Should be returned only if order is for pickup. */
    pickupDetails?: PickupDetails;
    /** Date and Time of the delivery option */
    deliveryTimeSlot?: DeliveryTimeSlot;
}
interface PickupDetails {
    /** Pickup address. */
    address?: Address;
    /**
     * Pickup method.
     *
     * Supported values:
     * + `"STORE_PICKUP"`: When pickup is from the merchant's brick and mortar store.
     * + `"PICKUP_POINT"`: When item is shipped to a specified pickup point.
     */
    pickupMethod?: PickupMethod;
}
declare enum PickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface DeliveryTimeSlot {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
interface DeliveryCost {
    /** The shipping rate's price. Must align with the [currency's decimal separator](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). */
    price?: string;
    /** Currency of the shipping rate price as a 3-letter [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217). Must align with the `currency` passed to the function under the `metadata` field. */
    currency?: string;
    /** Additional costs. For example, a handling fee for packaging fragile items. */
    additionalCharges?: AdditionalCharge[];
}
interface AdditionalCharge {
    /** Additional charge type. */
    type?: ChargeType;
    /** Description of the additional charge. For example, `"Handling fee of $5 applied for gift wrapping"`. */
    description?: string | null;
    /** Cost of additional charge. For example, `12.5`. */
    price?: string;
}
declare enum ChargeType {
    HANDLING_FEE = "HANDLING_FEE"
}
interface Details extends DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError {
    fieldViolations?: FieldViolation[];
}
declare enum RuleType {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT"
}
interface FieldViolation {
    field?: string;
    description?: string;
    violatedRule?: RuleType;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError {
    /** Error code. */
    errorCode?: string | null;
}
interface GetDeliverySolutionsRequest {
    /** list of items to delivery that each of them points to delivery profile and delivery rule. */
    lineItems: DeliverableItem[];
    /** Destination the items should deliver to */
    destination: Address;
    /** Origin the items should deliver from */
    origin?: Address;
    /** Currency - Defaults to site's currency */
    currency: string | null;
    /** Contact details */
    contactDetails?: FullAddressContactDetails;
    /** Measure unit - defaults to site's weight unit */
    weightUnit?: WeightUnit;
    /** list of user preferences which are delivery options codes combined with delivery carrier app id */
    userPreferences?: UserPreference[];
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}
interface UserPreference {
    /** The delivery carrier app id */
    appId?: string | null;
    /** The delivery option code */
    code?: string;
}
/**
 * Each delivery option has a list of items that can be delivered by it - the chosen one
 * on Errors throw a business error from TC to catch and trigger destination completion
 */
interface GetDeliverySolutionsResponse {
    /** Delivery Options with their associated items */
    deliverySolutions?: DeliverySolution[];
    /** If a delivery carrier could not calculate rates, the error will be detailed here */
    errors?: DeliveryCarrierError[];
}
interface DeliverySolution {
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
    /** Delivery rate title. For example, `"USPS Standard Overnight Delivery"`, `"Standard"`, or `"First-Class Package International"`. */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics;
    /** Delivery cost. */
    cost?: DeliveryCost;
    /** Delivery solution breakdown by delivery carrier and delivery region */
    breakdown?: Breakdown[];
    /** If the delivery solution is a partial and doesn't apply to all items. */
    partial?: boolean | null;
}
interface Breakdown {
    /** The delivery option's carrier details, could be multiple if the delivery option is a combination of multiple carriers */
    deliveryCarrier?: Carrier;
    /** The delivery region that are relevant for this delivery solution. */
    deliveryRegion?: Region;
    /** Populated if the delivery solution is a partially supplied by this carrier. */
    applicableLineItems?: ApplicableLineItems;
}
interface Carrier {
    /** The carrier app id */
    appId?: string | null;
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
}
interface Region {
    /** The delivery region id. */
    _id?: string | null;
    /** The delivery region name. */
    name?: string | null;
}
interface ApplicableLineItems {
    /** Line items that the delivery solution is for. */
    lineItemIds?: string[];
}
interface DeliveryCarrierError {
    /** The carrier app id */
    appId?: string | null;
    /** The error details */
    errorDetails?: Details;
}
interface StreetAddressNonNullableFields {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields;
}
interface PickupDetailsNonNullableFields {
    address?: AddressNonNullableFields;
    pickupMethod: PickupMethod;
}
interface DeliveryLogisticsNonNullableFields {
    pickupDetails?: PickupDetailsNonNullableFields;
}
interface AdditionalChargeNonNullableFields {
    type: ChargeType;
    price: string;
}
interface DeliveryCostNonNullableFields {
    price: string;
    currency: string;
    additionalCharges: AdditionalChargeNonNullableFields[];
}
interface CarrierNonNullableFields {
    code: string;
}
interface ApplicableLineItemsNonNullableFields {
    lineItemIds: string[];
}
interface BreakdownNonNullableFields {
    deliveryCarrier?: CarrierNonNullableFields;
    applicableLineItems?: ApplicableLineItemsNonNullableFields;
}
interface DeliverySolutionNonNullableFields {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields;
    cost?: DeliveryCostNonNullableFields;
    breakdown: BreakdownNonNullableFields[];
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface FieldViolationNonNullableFields {
    field: string;
    description: string;
    violatedRule: RuleType;
}
interface ValidationErrorNonNullableFields {
    fieldViolations: FieldViolationNonNullableFields[];
}
interface DetailsNonNullableFields {
    applicationError?: ApplicationErrorNonNullableFields;
    validationError?: ValidationErrorNonNullableFields;
}
interface DeliveryCarrierErrorNonNullableFields {
    errorDetails?: DetailsNonNullableFields;
}
interface GetDeliverySolutionsResponseNonNullableFields {
    deliverySolutions: DeliverySolutionNonNullableFields[];
    errors: DeliveryCarrierErrorNonNullableFields[];
}

type __PublicMethodMetaInfo$3<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getDeliverySolutions(): __PublicMethodMetaInfo$3<'POST', {}, GetDeliverySolutionsRequest, GetDeliverySolutionsRequest$1, GetDeliverySolutionsResponse & GetDeliverySolutionsResponseNonNullableFields, GetDeliverySolutionsResponse$1 & GetDeliverySolutionsResponseNonNullableFields$1>;

declare const meta$3_getDeliverySolutions: typeof getDeliverySolutions;
declare namespace meta$3 {
  export { type __PublicMethodMetaInfo$3 as __PublicMethodMetaInfo, meta$3_getDeliverySolutions as getDeliverySolutions };
}

/**
 * Tip settings define how tips are calculated and distributed among staff. When
 * Wix Tips is installed, default settings are automatically created. You can't
 * delete these default settings but you can update them. Creating additional
 * settings allows business owners to customize tip screens for different payment
 * terminals or set specific presets for various products or services.
 */
interface TipSettings$1 extends TipSettingsIdentifierOneOf$1 {
    /**
     * ID of the [location](https://dev.wix.com/docs/rest/business-management/locations/location-object)
     * for which the tip settings apply.
     */
    locationId?: string | null;
    /**
     * ID of the payment terminal for which the tip settings apply. Wix Tips doesn't
     * validate the ID you provide.
     *
     * Max: 30 characters
     */
    paymentTerminalId?: string | null;
    /**
     * ID of the Wix user for whom the tip settings apply. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    userId?: string | null;
    /**
     * ID of the tip settings.
     * @readonly
     */
    id?: string | null;
    /**
     * Tip type.
     *
     * Supported values:
     * + `UNKNOWN_TIP_TYPE`: There is no information about the tip type.
     * + `PERCENTAGE`: The tip is calculated as a percentage of the subtotal for all related line items.
     * + `AMOUNT`: The tip is a fixed amount.
     */
    tipType?: TipType$3;
    /**
     * Information about the tip choices that Wix Tips displays to customers during the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     *
     * Min: `1` preset
     * Max: `3` presets
     */
    presets?: Preset$1[];
    /**
     * Whether customer are allowed to tip during the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     *
     * Default: `true`
     */
    allowCustomerTip?: boolean | null;
    /**
     * Whether the business owners are given the option to add a tip during the
     * payment collection flow in their dashboard.
     *
     * Default: `true`
     */
    allowBusinessTipAtPayment?: boolean | null;
    /**
     * Whether customers can enter a custom tip amount. If set to `false`, customers
     * can only select a tip value from the available `presets` and can't enter a
     * custom amount.
     *
     * Default: `true`
     */
    allowCustomAmount?: boolean | null;
    /**
     * Whether business owners are allowed to edit tip distributions. If set to
     * `false`, owners can't edit distributions after they were created.
     *
     * Default: `true`
     */
    allowEditDistribution?: boolean | null;
    /**
     * How the tip is distributed among staff.
     *
     * Supported values:
     * `UNKNOWN_SPLIT_METHOD`: There is no information about the staff distribution method.
     * `EQUAL`: The tip is distributed equally among all staff.
     * `PROPORTIONAL`: The tip is distributed proportionally among staff.
     */
    staffDistributionMethod?: StaffDistributionMethod$1;
    /**
     * Revision number, which increments by 1 each time `tipSettings` object is
     * updated. To prevent conflicting changes, the current revision must be passed
     * when updating `tipSettings`. Ignored when creating a `tipSettings` object.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the tip settings were created in
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the tip settings were last updated
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Whether these are the default tip settings. Wix Tips automatically creates
     * the default settings during the app's installation. You can't delete these
     * default settings but you can update them. Wix Tips uses the default settings
     * to calculate tips, unless you specify other settings.
     * @readonly
     */
    default?: boolean | null;
    /**
     * ID of the app that has created the settings. See the list of app IDs for
     * [Wix business solutions](https://dev.wix.com/docs/rest/articles/getting-started/wix-business-solutions).
     */
    appId?: string | null;
    /**
     * Custom field data for the `tipSettings` object. Extended fields must be
     * configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$1;
}
/** @oneof */
interface TipSettingsIdentifierOneOf$1 {
    /**
     * ID of the [location](https://dev.wix.com/docs/rest/business-management/locations/location-object)
     * for which the tip settings apply.
     */
    locationId?: string | null;
    /**
     * ID of the payment terminal for which the tip settings apply. Wix Tips doesn't
     * validate the ID you provide.
     *
     * Max: 30 characters
     */
    paymentTerminalId?: string | null;
    /**
     * ID of the Wix user for whom the tip settings apply. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    userId?: string | null;
}
declare enum TipType$3 {
    /** There is no information about the tip type. */
    UNKNOWN_TIP_TYPE = "UNKNOWN_TIP_TYPE",
    /** The tip is calculated as a percentage of the subtotal of all related line items. */
    PERCENTAGE = "PERCENTAGE",
    /** The tip is a fixed amount. */
    AMOUNT = "AMOUNT"
}
interface Preset$1 {
    /**
     * Value of the preset tip choice that's displayed to customers in the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     * For example, `5`, `10`, and `15` percent or `1`, `3`, and `5` USD.
     *
     * Min: `0`
     */
    value?: number | null;
    /**
     * Whether this tip choice value is the dafault preset that's highlighted automatically in the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     *
     * Default: `false`
     */
    default?: boolean | null;
}
declare enum StaffDistributionMethod$1 {
    /** There is no information about the staff distribution method. */
    UNKNOWN_SPLIT_METHOD = "UNKNOWN_SPLIT_METHOD",
    /** All staff receive an equal amount of the tip. */
    EQUAL = "EQUAL",
    /** Staff receive a proportional amount of the tip. */
    PROPORTIONAL = "PROPORTIONAL"
}
interface ExtendedFields$1 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface QueryTipSettingsRequest$1 {
    /** WQL expression */
    query: QueryV2$1;
}
interface QueryV2$1 extends QueryV2PagingMethodOneOf$1 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$1;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$3;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$3[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf$1 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$1;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$3;
}
interface Sorting$3 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$3;
}
declare enum SortOrder$3 {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$3 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryTipSettingsResponse$1 {
    /** Retrieved `tipSettings` objects. */
    tipSettings?: TipSettings$1[];
    /** Metadate for the paged set of retrieved `tipSettings` objects. */
    pagingMetadata?: PagingMetadataV2$1;
}
interface PagingMetadataV2$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors$3;
}
interface Cursors$3 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateTipSettingsRequest$1 {
    /** Tip settings to update. */
    tipSettings: TipSettings$1;
}
interface UpdateTipSettingsResponse$1 {
    /** Updated tip settings. */
    tipSettings?: TipSettings$1;
}
interface CreateTipSettingsRequest$1 {
    /** Tip settings to create. */
    tipSettings: TipSettings$1;
}
interface CreateTipSettingsResponse$1 {
    /** Created tip settings. */
    tipSettings?: TipSettings$1;
}
interface CreateDefaultTipSettingsRequest$1 {
    /** Dafault tip settings to create. */
    tipSettings: TipSettings$1;
}
interface CreateDefaultTipSettingsResponse$1 {
    /** Created default tip settings. */
    tipSettings?: TipSettings$1;
}
interface DeleteTipSettingsRequest$1 {
    /** ID of the `tipSettings` object to delete. */
    tipSettingsId: string | null;
}
interface DeleteTipSettingsResponse$1 {
}
interface TipSettingsNonNullableFields$1 {
    tipType: TipType$3;
    staffDistributionMethod: StaffDistributionMethod$1;
}
interface QueryTipSettingsResponseNonNullableFields$1 {
    tipSettings: TipSettingsNonNullableFields$1[];
}
interface UpdateTipSettingsResponseNonNullableFields$1 {
    tipSettings?: TipSettingsNonNullableFields$1;
}
interface CreateTipSettingsResponseNonNullableFields$1 {
    tipSettings?: TipSettingsNonNullableFields$1;
}
interface CreateDefaultTipSettingsResponseNonNullableFields$1 {
    tipSettings?: TipSettingsNonNullableFields$1;
}

/**
 * Tip settings define how tips are calculated and distributed among staff. When
 * Wix Tips is installed, default settings are automatically created. You can't
 * delete these default settings but you can update them. Creating additional
 * settings allows business owners to customize tip screens for different payment
 * terminals or set specific presets for various products or services.
 */
interface TipSettings extends TipSettingsIdentifierOneOf {
    /**
     * ID of the [location](https://dev.wix.com/docs/rest/business-management/locations/location-object)
     * for which the tip settings apply.
     */
    locationId?: string | null;
    /**
     * ID of the payment terminal for which the tip settings apply. Wix Tips doesn't
     * validate the ID you provide.
     *
     * Max: 30 characters
     */
    paymentTerminalId?: string | null;
    /**
     * ID of the Wix user for whom the tip settings apply. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    userId?: string | null;
    /**
     * ID of the tip settings.
     * @readonly
     */
    _id?: string | null;
    /**
     * Tip type.
     *
     * Supported values:
     * + `UNKNOWN_TIP_TYPE`: There is no information about the tip type.
     * + `PERCENTAGE`: The tip is calculated as a percentage of the subtotal for all related line items.
     * + `AMOUNT`: The tip is a fixed amount.
     */
    tipType?: TipType$2;
    /**
     * Information about the tip choices that Wix Tips displays to customers during the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     *
     * Min: `1` preset
     * Max: `3` presets
     */
    presets?: Preset[];
    /**
     * Whether customer are allowed to tip during the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     *
     * Default: `true`
     */
    allowCustomerTip?: boolean | null;
    /**
     * Whether the business owners are given the option to add a tip during the
     * payment collection flow in their dashboard.
     *
     * Default: `true`
     */
    allowBusinessTipAtPayment?: boolean | null;
    /**
     * Whether customers can enter a custom tip amount. If set to `false`, customers
     * can only select a tip value from the available `presets` and can't enter a
     * custom amount.
     *
     * Default: `true`
     */
    allowCustomAmount?: boolean | null;
    /**
     * Whether business owners are allowed to edit tip distributions. If set to
     * `false`, owners can't edit distributions after they were created.
     *
     * Default: `true`
     */
    allowEditDistribution?: boolean | null;
    /**
     * How the tip is distributed among staff.
     *
     * Supported values:
     * `UNKNOWN_SPLIT_METHOD`: There is no information about the staff distribution method.
     * `EQUAL`: The tip is distributed equally among all staff.
     * `PROPORTIONAL`: The tip is distributed proportionally among staff.
     */
    staffDistributionMethod?: StaffDistributionMethod;
    /**
     * Revision number, which increments by 1 each time `tipSettings` object is
     * updated. To prevent conflicting changes, the current revision must be passed
     * when updating `tipSettings`. Ignored when creating a `tipSettings` object.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the tip settings were created in
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the tip settings were last updated
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Whether these are the default tip settings. Wix Tips automatically creates
     * the default settings during the app's installation. You can't delete these
     * default settings but you can update them. Wix Tips uses the default settings
     * to calculate tips, unless you specify other settings.
     * @readonly
     */
    default?: boolean | null;
    /**
     * ID of the app that has created the settings. See the list of app IDs for
     * [Wix business solutions](https://dev.wix.com/docs/rest/articles/getting-started/wix-business-solutions).
     */
    appId?: string | null;
    /**
     * Custom field data for the `tipSettings` object. Extended fields must be
     * configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
/** @oneof */
interface TipSettingsIdentifierOneOf {
    /**
     * ID of the [location](https://dev.wix.com/docs/rest/business-management/locations/location-object)
     * for which the tip settings apply.
     */
    locationId?: string | null;
    /**
     * ID of the payment terminal for which the tip settings apply. Wix Tips doesn't
     * validate the ID you provide.
     *
     * Max: 30 characters
     */
    paymentTerminalId?: string | null;
    /**
     * ID of the Wix user for whom the tip settings apply. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    userId?: string | null;
}
declare enum TipType$2 {
    /** There is no information about the tip type. */
    UNKNOWN_TIP_TYPE = "UNKNOWN_TIP_TYPE",
    /** The tip is calculated as a percentage of the subtotal of all related line items. */
    PERCENTAGE = "PERCENTAGE",
    /** The tip is a fixed amount. */
    AMOUNT = "AMOUNT"
}
interface Preset {
    /**
     * Value of the preset tip choice that's displayed to customers in the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     * For example, `5`, `10`, and `15` percent or `1`, `3`, and `5` USD.
     *
     * Min: `0`
     */
    value?: number | null;
    /**
     * Whether this tip choice value is the dafault preset that's highlighted automatically in the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/checkout-object).
     *
     * Default: `false`
     */
    default?: boolean | null;
}
declare enum StaffDistributionMethod {
    /** There is no information about the staff distribution method. */
    UNKNOWN_SPLIT_METHOD = "UNKNOWN_SPLIT_METHOD",
    /** All staff receive an equal amount of the tip. */
    EQUAL = "EQUAL",
    /** Staff receive a proportional amount of the tip. */
    PROPORTIONAL = "PROPORTIONAL"
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface QueryTipSettingsRequest {
    /** WQL expression */
    query: QueryV2;
}
interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$2;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$2[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$2;
}
interface Sorting$2 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$2;
}
declare enum SortOrder$2 {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$2 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryTipSettingsResponse {
    /** Retrieved `tipSettings` objects. */
    tipSettings?: TipSettings[];
    /** Metadate for the paged set of retrieved `tipSettings` objects. */
    pagingMetadata?: PagingMetadataV2;
}
interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors$2;
}
interface Cursors$2 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateTipSettingsRequest {
    /** Tip settings to update. */
    tipSettings: TipSettings;
}
interface UpdateTipSettingsResponse {
    /** Updated tip settings. */
    tipSettings?: TipSettings;
}
interface CreateTipSettingsRequest {
    /** Tip settings to create. */
    tipSettings: TipSettings;
}
interface CreateTipSettingsResponse {
    /** Created tip settings. */
    tipSettings?: TipSettings;
}
interface CreateDefaultTipSettingsRequest {
    /** Dafault tip settings to create. */
    tipSettings: TipSettings;
}
interface CreateDefaultTipSettingsResponse {
    /** Created default tip settings. */
    tipSettings?: TipSettings;
}
interface DeleteTipSettingsRequest {
    /** ID of the `tipSettings` object to delete. */
    tipSettingsId: string | null;
}
interface DeleteTipSettingsResponse {
}
interface TipSettingsNonNullableFields {
    tipType: TipType$2;
    staffDistributionMethod: StaffDistributionMethod;
}
interface QueryTipSettingsResponseNonNullableFields {
    tipSettings: TipSettingsNonNullableFields[];
}
interface UpdateTipSettingsResponseNonNullableFields {
    tipSettings?: TipSettingsNonNullableFields;
}
interface CreateTipSettingsResponseNonNullableFields {
    tipSettings?: TipSettingsNonNullableFields;
}
interface CreateDefaultTipSettingsResponseNonNullableFields {
    tipSettings?: TipSettingsNonNullableFields;
}

type __PublicMethodMetaInfo$2<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function queryTipSettings(): __PublicMethodMetaInfo$2<'POST', {}, QueryTipSettingsRequest, QueryTipSettingsRequest$1, QueryTipSettingsResponse & QueryTipSettingsResponseNonNullableFields, QueryTipSettingsResponse$1 & QueryTipSettingsResponseNonNullableFields$1>;
declare function updateTipSettings(): __PublicMethodMetaInfo$2<'PATCH', {}, UpdateTipSettingsRequest, UpdateTipSettingsRequest$1, UpdateTipSettingsResponse & UpdateTipSettingsResponseNonNullableFields, UpdateTipSettingsResponse$1 & UpdateTipSettingsResponseNonNullableFields$1>;
declare function createTipSettings(): __PublicMethodMetaInfo$2<'POST', {}, CreateTipSettingsRequest, CreateTipSettingsRequest$1, CreateTipSettingsResponse & CreateTipSettingsResponseNonNullableFields, CreateTipSettingsResponse$1 & CreateTipSettingsResponseNonNullableFields$1>;
declare function createDefaultTipSettings(): __PublicMethodMetaInfo$2<'POST', {}, CreateDefaultTipSettingsRequest, CreateDefaultTipSettingsRequest$1, CreateDefaultTipSettingsResponse & CreateDefaultTipSettingsResponseNonNullableFields, CreateDefaultTipSettingsResponse$1 & CreateDefaultTipSettingsResponseNonNullableFields$1>;
declare function deleteTipSettings(): __PublicMethodMetaInfo$2<'DELETE', {
    tipSettingsId: string;
}, DeleteTipSettingsRequest, DeleteTipSettingsRequest$1, DeleteTipSettingsResponse, DeleteTipSettingsResponse$1>;

declare const meta$2_createDefaultTipSettings: typeof createDefaultTipSettings;
declare const meta$2_createTipSettings: typeof createTipSettings;
declare const meta$2_deleteTipSettings: typeof deleteTipSettings;
declare const meta$2_queryTipSettings: typeof queryTipSettings;
declare const meta$2_updateTipSettings: typeof updateTipSettings;
declare namespace meta$2 {
  export { type __PublicMethodMetaInfo$2 as __PublicMethodMetaInfo, meta$2_createDefaultTipSettings as createDefaultTipSettings, meta$2_createTipSettings as createTipSettings, meta$2_deleteTipSettings as deleteTipSettings, meta$2_queryTipSettings as queryTipSettings, meta$2_updateTipSettings as updateTipSettings };
}

/**
 * Information about a team member who's eligible to receive a portion of the tip.
 * Currently, only [Bookings staff members](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/introduction)
 * and [site collaborators](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site)
 * are eligible for tip distributions.
 */
interface Staff$3 {
    /**
     * Staff ID. Matches `staffMemberId` if available, or
     * `identificationData.wixUserId` if not.
     * @readonly
     */
    id?: string | null;
    /**
     * Staff name. Matches the name of the
     * [Bookings staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/staff-member-object)
     * if available.
     */
    name?: string | null;
    /**
     * Staff member ID. Available only if the staff is connected to a
     * [Bookings staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/staff-member-object).
     */
    staffMemberId?: string | null;
    /**
     * Identification data of the staff. Available only if the staff is a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    identificationData?: IdentificationData$1;
}
interface IdentificationData$1 extends IdentificationDataIdOneOf$1 {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /**
     * ID of the [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/introduction)
     * in the site's [CRM by Ascend](https://www.wix.com/ascend/crm) system.
     */
    contactId?: string | null;
}
/** @oneof */
interface IdentificationDataIdOneOf$1 {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum IdentityType$3 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface ListTippableStaffRequest$1 {
    /**
     * Whether to include staff who are only Wix users and not
     * [Bookings staff members](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/about-staff-members-and-resources)
     * in the response. Setting `{"includeWixUsers": true}` returns all tippable
     * staff, including Bookings staff, site collaborators, or those who are both.
     * By default, or if you provide `{"includeWixUsers": false}`, only Bookings
     * staff members or those who are both are returned.
     *
     * Default: `false`.
     */
    includeWixUsers?: boolean;
    /**
     * Filters the returned staff by name. If you provide a name as filter, only
     * staff whose names start with the given input are returned. The filter isn't
     * case sensitive.
     *
     * Max: 500 characters
     */
    filterByName?: string | null;
    /**
     * Filters the returned staff by ID. If you provide a list of IDs as filter,
     * only staff members with exact matching IDs are returned.
     *
     * Max: 100 IDs
     */
    filterByIds?: string[] | null;
}
interface ListTippableStaffResponse$1 {
    /** Retrieved staff. */
    staff?: Staff$3[];
}
interface IdentificationDataNonNullableFields$1 {
    anonymousVisitorId: string;
    memberId: string;
    wixUserId: string;
    appId: string;
    identityType: IdentityType$3;
}
interface StaffNonNullableFields$3 {
    identificationData?: IdentificationDataNonNullableFields$1;
}
interface ListTippableStaffResponseNonNullableFields$1 {
    staff: StaffNonNullableFields$3[];
}

/**
 * Information about a team member who's eligible to receive a portion of the tip.
 * Currently, only [Bookings staff members](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/introduction)
 * and [site collaborators](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site)
 * are eligible for tip distributions.
 */
interface Staff$2 {
    /**
     * Staff ID. Matches `staffMemberId` if available, or
     * `identificationData.wixUserId` if not.
     * @readonly
     */
    _id?: string | null;
    /**
     * Staff name. Matches the name of the
     * [Bookings staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/staff-member-object)
     * if available.
     */
    name?: string | null;
    /**
     * Staff member ID. Available only if the staff is connected to a
     * [Bookings staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/staff-member-object).
     */
    staffMemberId?: string | null;
    /**
     * Identification data of the staff. Available only if the staff is a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    identificationData?: IdentificationData;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /**
     * ID of the [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/introduction)
     * in the site's [CRM by Ascend](https://www.wix.com/ascend/crm) system.
     */
    contactId?: string | null;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum IdentityType$2 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface ListTippableStaffRequest {
    /**
     * Whether to include staff who are only Wix users and not
     * [Bookings staff members](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/about-staff-members-and-resources)
     * in the response. Setting `{"includeWixUsers": true}` returns all tippable
     * staff, including Bookings staff, site collaborators, or those who are both.
     * By default, or if you provide `{"includeWixUsers": false}`, only Bookings
     * staff members or those who are both are returned.
     *
     * Default: `false`.
     */
    includeWixUsers?: boolean;
    /**
     * Filters the returned staff by name. If you provide a name as filter, only
     * staff whose names start with the given input are returned. The filter isn't
     * case sensitive.
     *
     * Max: 500 characters
     */
    filterByName?: string | null;
    /**
     * Filters the returned staff by ID. If you provide a list of IDs as filter,
     * only staff members with exact matching IDs are returned.
     *
     * Max: 100 IDs
     */
    filterByIds?: string[] | null;
}
interface ListTippableStaffResponse {
    /** Retrieved staff. */
    staff?: Staff$2[];
}
interface IdentificationDataNonNullableFields {
    anonymousVisitorId: string;
    memberId: string;
    wixUserId: string;
    appId: string;
    identityType: IdentityType$2;
}
interface StaffNonNullableFields$2 {
    identificationData?: IdentificationDataNonNullableFields;
}
interface ListTippableStaffResponseNonNullableFields {
    staff: StaffNonNullableFields$2[];
}

type __PublicMethodMetaInfo$1<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function listTippableStaff(): __PublicMethodMetaInfo$1<'GET', {}, ListTippableStaffRequest, ListTippableStaffRequest$1, ListTippableStaffResponse & ListTippableStaffResponseNonNullableFields, ListTippableStaffResponse$1 & ListTippableStaffResponseNonNullableFields$1>;

declare const meta$1_listTippableStaff: typeof listTippableStaff;
declare namespace meta$1 {
  export { type __PublicMethodMetaInfo$1 as __PublicMethodMetaInfo, meta$1_listTippableStaff as listTippableStaff };
}

/**
 * A tip holds information about how much a customer has tipped, how the tip is
 * distributed among staff, and the associated order’s line item subtotal.
 */
interface Tip$1 {
    /**
     * ID of the tip. Identical to the `code` of the related `order.additionalFee`.
     * @readonly
     */
    id?: string | null;
    /**
     * Subtotal of all line items from the [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)
     * that's related to the tip. In the response of
     * [Preview Tip](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/preview-tip),
     * there is no related eCommerce order. Then, value of this field corresponds to
     * the sum of all line item prices passed in the request.
     * @readonly
     */
    lineItemSubtotal?: string | null;
    /**
     * Total amount of the tip.
     *
     * Min: `0.00`
     */
    amount?: string | null;
    /**
     * Details about how the tip is shared among staff. Available only if at least
     * one staff member receives part of the tip, and it's not entirely allocated to
     * the business.
     *
     * Max: 50 distributions
     */
    distributions?: TipDistribution$1[];
    /**
     * Undistributed tip amount. Calculated as the difference between `tip.amount`
     * and the sum of all `tip.tipDistributions.amount` values.
     *
     * Min: `0.01`
     * @readonly
     */
    undistributedAmount?: string | null;
}
interface TipDistribution$1 {
    /**
     * ID of the tip distribution.
     * @readonly
     */
    id?: string | null;
    /**
     * ID of the tip associated with the distribution. Matches the corresponding
     * `order.additionalFee.code`.
     * @readonly
     */
    tipId?: string | null;
    /** Information about the business staff receiving the tip distribution. */
    staff?: Staff$1;
    /**
     * Amount of the tip distribution.
     *
     * Min: `0.00`
     */
    amount?: string | null;
    /**
     * Details about the related line items from the
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object).
     *
     * Max: 10 `lineItemInfo` objects
     */
    lineItemInfo?: LineItemInfo$1[];
    /**
     * Details of how the customer is charged for the tip. Available only if the
     * [transcation](https://dev.wix.com/docs/rest/business-management/payments/cashier/payments/transaction/transaction-object)
     * has been created.
     */
    transaction?: Transaction$1;
    /**
     * ID of the [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)
     * associated with the tip distribution. Identical for all distributions that
     * belong to the same tip.
     * @readonly
     */
    orderId?: string | null;
    /**
     * Date and time the distribution was created in
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    createdDate?: Date | null;
}
interface CommonIdentificationData$1 extends CommonIdentificationDataIdOneOf$1 {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /**
     * ID of the [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/introduction)
     * in the site's [CRM by Ascend](https://www.wix.com/ascend/crm) system.
     */
    contactId?: string | null;
}
/** @oneof */
interface CommonIdentificationDataIdOneOf$1 {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum IdentityType$1 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface Staff$1 {
    /**
     * ID of the staff receiving the tip. Matches `staffMemberId` if available, or
     * `identificationData.wixUserId` if not.
     * @readonly
     */
    id?: string | null;
    /**
     * Staff name. Matches `staffMember.name` if the staff is a
     * [Bookings staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/staff-member-object),
     * or the [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/contact-v4/contact-object)'s
     * `info.name` if not.
     *
     * Max: 500 characters
     * @readonly
     */
    name?: string | null;
    /**
     * ID of the [staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/staff-member-object).
     * Available only if the staff is a staff member and not a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    staffMemberId?: string | null;
    /**
     * Identification data. Available only if the staff is a
     * [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/contact-v4/contact-object)
     * on the Wix site. Note that not all site collaborators are also
     * [staff members](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/introduction).
     */
    identificationData?: CommonIdentificationData$1;
}
interface LineItemInfo$1 {
    /**
     * IDs of the line items associated with the tip.
     *
     * Min: 1 character
     * Max: 100 characters
     */
    lineItemId?: string | null;
    /**
     * Information about the line item and the corresponding catalog. Catalogs
     * include Wix Bookings and Wix Stores.
     */
    catalogReference?: CatalogReference$1;
    /**
     * Price of the line item.
     *
     * Min: `0.00`
     */
    price?: string | null;
    /**
     * Name of the line item, which is identical to:
     * + `product.name` for [Stores](https://dev.wix.com/docs/rest/business-solutions/stores/about-wix-stores).
     * + `service.name` for [Bookings](https://dev.wix.com/docs/rest/business-solutions/bookings/about-wix-bookings).
     *
     * Min: 1 character
     * Max: 200 characters
     */
    name?: string | null;
    /**
     * Quantity of the line item.
     *
     * Min: `1`
     * Max: `100000` (one hundred thousand)
     */
    quantity?: number | null;
}
interface CatalogReference$1 {
    /**
     * ID of the line item within its catalog, corresponding to:
     * + `product.id` for [Stores](https://dev.wix.com/docs/rest/business-solutions/stores/about-wix-stores).
     * + `service.id` for [Bookings](https://dev.wix.com/docs/rest/business-solutions/bookings/about-wix-bookings).
     */
    catalogItemId?: string | null;
    /**
     * ID of the [app](https://dev.wix.com/docs/rest/articles/getting-started/wix-business-solutions)
     * to which the catalog belongs.
     *
     * Supported app IDs:
     * + [Wix Tips](https://www.wix.com/app-market/wix-tips): `"869a50c8-dd38-4324-b201-e33dc0747a5f"`
     * + [Wix Stores](https://www.wix.com/app-market/wix-stores): `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + [Wix Bookings](https://www.wix.com/app-market/bookings): `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + [Wix Restaurants Orders](https://www.wix.com/app-market/web-solution/wix-restaurants-orders-new): `"13e8d036-5516-6104-b456-c8466db39542"`
     */
    appId?: string | null;
}
interface Transaction$1 {
    /** ID of the transaction that's associated with the tip distribution. */
    id?: string | null;
    /**
     * Date and time the transaction was created in `YYYY-MM-DDThh:mm:ss.sssZ`
     * format. Isn't identical to the time the customer was actually charged.
     */
    date?: Date | null;
}
interface PreviewTipRequest$1 {
    /**
     * Information about the line items to preview the tip for.
     *
     * Min: 1 line item
     * Max: 50 line items
     */
    lineItemInfo: LineItemInfo$1[];
    /**
     * Information about how to calculate the total tip amount and the distribution
     * amounts.
     */
    tipChoice: TipChoice$1;
    /**
     * ID of the tip settings used to preview the tip. If you don't provide a
     * `tipSettingsId`, the `staffDistributionMethod` is based on the site's
     * default tip settings.
     */
    tipSettingsId?: string | null;
}
interface TipChoice$1 {
    /** Value of the tip choice. */
    value?: string | null;
    /**
     * Type of the tip choice.
     *
     * Supported values:
     * + `UNKNOWN_TIP_TYPE`: There is no information about the tip type.
     * + `PERCENTAGE`: The tip is calculated as a percentage of the subtotal of associated line items.
     * + `AMOUNT`: The tip is a fixed value, pre-configured from the relevant settings presets.
     * + `CUSTOM`: The customer, or the business on behalf of the customer, manually set a tip amount, which may not match any preset values.
     */
    tipType?: TipType$1;
}
declare enum TipType$1 {
    /** There is no information about the tip type. */
    UNKNOWN_TIP_TYPE = "UNKNOWN_TIP_TYPE",
    /** The tip is calculated as a percentage of the subtotal of associated line items. */
    PERCENTAGE = "PERCENTAGE",
    /** The tip is a fixed value, pre-configured from the relevant settings presets. */
    AMOUNT = "AMOUNT",
    /** The customer, or the business on behalf of the customer, manually set a tip amount, which may not match any preset values. */
    CUSTOM = "CUSTOM"
}
interface PreviewTipResponse$1 {
    /** Tip. */
    tip?: Tip$1;
}
interface GetTipByOrderIdRequest$1 {
    /** ID of the order to retrieve the tip for. */
    orderId: string | null;
}
interface GetTipByOrderIdResponse$1 {
    /** Retrieved tip. */
    tip?: Tip$1;
}
interface GetTipByDraftOrderIdRequest$1 {
    /** ID of the draft order to retrieve the tip for. */
    draftOrderId: string | null;
}
interface GetTipByDraftOrderIdResponse$1 {
    /** Retrieved tip. */
    tip?: Tip$1;
}
interface GetTipChoiceRequest$1 {
    /**
     * ID of the [eCommerce purchase flow](https://dev.wix.com/docs/rest/business-solutions/e-commerce/wix-e-commerce-platform-handbook/overview/architecture-data-flow)
     * to retrieve the tip choice for.
     */
    purchaseFlowId: string | null;
}
interface GetTipChoiceResponse$1 {
    /** Tip choice that's currently selected for the given purchase flow. */
    tipChoice?: TipChoice$1;
}
interface UpdateTipChoiceRequest$1 {
    /**
     * Tip choice to select for the purchase flow. The call fails if you provide a
     * value for `tipChoice.tipType` that doesn't match the relevant tip settings
     * configuration. For example:
     * + `AMOUNT` when `tipSettings.tipType` isn't `AMOUNT`.
     * + `PERCENTAGE` when `tipSettings.tipType` isn't `PERCENTAGE`.
     * + `CUSTOM` when `tipSettings.allowCustomTip` is `false`.
     */
    tipChoice: TipChoice$1;
    /**
     * ID of the purchase flow that's associated with the
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/order/introduction)
     */
    purchaseFlowId: string | null;
}
interface UpdateTipChoiceResponse$1 {
    /**
     * Tip choice currently selected in the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)
     * for the given purchase flow.
     */
    tipChoice?: TipChoice$1;
}
interface SetTipOnOrderRequest$1 extends SetTipOnOrderRequestIdentifierOneOf$1 {
    /** ID of the order for which to set the tip. */
    orderId?: string | null;
    /** Tip to set on the order. */
    tip: Tip$1;
}
/** @oneof */
interface SetTipOnOrderRequestIdentifierOneOf$1 {
    /** ID of the order for which to set the tip. */
    orderId?: string | null;
}
interface SetTipOnOrderResponse$1 {
    /** Set tip. */
    tip?: Tip$1;
    /** Information about the order on which the tip was set. */
    orderInfo?: OrderInfo$1;
}
interface OrderInfo$1 extends OrderInfoIdentifierOneOf$1 {
    /** Order ID. */
    orderId?: string | null;
    /** ID of the order's additional fee that's associated with the tip. */
    additionalFeeId?: string | null;
    /** Price of the order's additional fee that's associated with the tip. */
    additionalFeePrice?: Price$1;
}
/** @oneof */
interface OrderInfoIdentifierOneOf$1 {
    /** Order ID. */
    orderId?: string | null;
}
interface Price$1 {
    /** Amount of the additional fee that's associated with the tip. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     *
     * Max: 100 characters
     * @readonly
     */
    formattedAmount?: string;
}
interface RemoveTipFromOrderRequest$1 extends RemoveTipFromOrderRequestIdentifierOneOf$1 {
    /** ID of the order from which to remove the tip. */
    orderId?: string | null;
}
/** @oneof */
interface RemoveTipFromOrderRequestIdentifierOneOf$1 {
    /** ID of the order from which to remove the tip. */
    orderId?: string | null;
}
interface RemoveTipFromOrderResponse$1 {
    /** Information about the order from which the tip was removed. */
    orderInfo?: OrderInfo$1;
}
interface AddTipDistributionsToOrderRequest$1 extends AddTipDistributionsToOrderRequestIdentifierOneOf$1 {
    /** ID of the order for which to add tip distributions. */
    orderId?: string | null;
    /** Tip distributions to add to the order. */
    tipDistributions: TipDistribution$1[];
}
/** @oneof */
interface AddTipDistributionsToOrderRequestIdentifierOneOf$1 {
    /** ID of the order for which to add tip distributions. */
    orderId?: string | null;
}
interface AddTipDistributionsToOrderResponse$1 {
    /** Tip distributions that were added to the order. */
    tipDistributions?: TipDistribution$1[];
    /** Information about the order to which the tip distributions were added. */
    orderInfo?: OrderInfo$1;
}
interface QueryTipDistributionsRequest$1 {
    /** WQL expression. */
    query: CursorQuery$1;
}
interface CursorQuery$1 extends CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$1[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryTipDistributionsResponse$1 {
    /** Retrieved tip distributions. */
    tipDistributions?: TipDistribution$1[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$1;
}
interface CursorPagingMetadata$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors$1;
    /**
     * Indicates if there are more results after the current page.
     * If `true`, another page of results can be retrieved.
     * If `false`, this is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$1 {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
interface SumTipDistributionAmountsRequest$1 {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter: Record<string, any> | null;
}
interface SumTipDistributionAmountsResponse$1 {
    /** Total amount of tip distributions matching the filter. */
    totalAmount?: string | null;
}
interface CommonIdentificationDataNonNullableFields$1 {
    anonymousVisitorId: string;
    memberId: string;
    wixUserId: string;
    appId: string;
    identityType: IdentityType$1;
}
interface StaffNonNullableFields$1 {
    identificationData?: CommonIdentificationDataNonNullableFields$1;
}
interface TipDistributionNonNullableFields$1 {
    staff?: StaffNonNullableFields$1;
}
interface TipNonNullableFields$1 {
    distributions: TipDistributionNonNullableFields$1[];
}
interface PreviewTipResponseNonNullableFields$1 {
    tip?: TipNonNullableFields$1;
}
interface GetTipByOrderIdResponseNonNullableFields$1 {
    tip?: TipNonNullableFields$1;
}
interface GetTipByDraftOrderIdResponseNonNullableFields$1 {
    tip?: TipNonNullableFields$1;
}
interface TipChoiceNonNullableFields$1 {
    tipType: TipType$1;
}
interface GetTipChoiceResponseNonNullableFields$1 {
    tipChoice?: TipChoiceNonNullableFields$1;
}
interface UpdateTipChoiceResponseNonNullableFields$1 {
    tipChoice?: TipChoiceNonNullableFields$1;
}
interface PriceNonNullableFields$1 {
    amount: string;
    formattedAmount: string;
}
interface OrderInfoNonNullableFields$1 {
    additionalFeePrice?: PriceNonNullableFields$1;
}
interface SetTipOnOrderResponseNonNullableFields$1 {
    tip?: TipNonNullableFields$1;
    orderInfo?: OrderInfoNonNullableFields$1;
}
interface RemoveTipFromOrderResponseNonNullableFields$1 {
    orderInfo?: OrderInfoNonNullableFields$1;
}
interface AddTipDistributionsToOrderResponseNonNullableFields$1 {
    tipDistributions: TipDistributionNonNullableFields$1[];
    orderInfo?: OrderInfoNonNullableFields$1;
}
interface QueryTipDistributionsResponseNonNullableFields$1 {
    tipDistributions: TipDistributionNonNullableFields$1[];
}

/**
 * A tip holds information about how much a customer has tipped, how the tip is
 * distributed among staff, and the associated order’s line item subtotal.
 */
interface Tip {
    /**
     * ID of the tip. Identical to the `code` of the related `order.additionalFee`.
     * @readonly
     */
    _id?: string | null;
    /**
     * Subtotal of all line items from the [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)
     * that's related to the tip. In the response of
     * [Preview Tip](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/preview-tip),
     * there is no related eCommerce order. Then, value of this field corresponds to
     * the sum of all line item prices passed in the request.
     * @readonly
     */
    lineItemSubtotal?: string | null;
    /**
     * Total amount of the tip.
     *
     * Min: `0.00`
     */
    amount?: string | null;
    /**
     * Details about how the tip is shared among staff. Available only if at least
     * one staff member receives part of the tip, and it's not entirely allocated to
     * the business.
     *
     * Max: 50 distributions
     */
    distributions?: TipDistribution[];
    /**
     * Undistributed tip amount. Calculated as the difference between `tip.amount`
     * and the sum of all `tip.tipDistributions.amount` values.
     *
     * Min: `0.01`
     * @readonly
     */
    undistributedAmount?: string | null;
}
interface TipDistribution {
    /**
     * ID of the tip distribution.
     * @readonly
     */
    _id?: string | null;
    /**
     * ID of the tip associated with the distribution. Matches the corresponding
     * `order.additionalFee.code`.
     * @readonly
     */
    tipId?: string | null;
    /** Information about the business staff receiving the tip distribution. */
    staff?: Staff;
    /**
     * Amount of the tip distribution.
     *
     * Min: `0.00`
     */
    amount?: string | null;
    /**
     * Details about the related line items from the
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object).
     *
     * Max: 10 `lineItemInfo` objects
     */
    lineItemInfo?: LineItemInfo[];
    /**
     * Details of how the customer is charged for the tip. Available only if the
     * [transcation](https://dev.wix.com/docs/rest/business-management/payments/cashier/payments/transaction/transaction-object)
     * has been created.
     */
    transaction?: Transaction;
    /**
     * ID of the [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)
     * associated with the tip distribution. Identical for all distributions that
     * belong to the same tip.
     * @readonly
     */
    orderId?: string | null;
    /**
     * Date and time the distribution was created in
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    _createdDate?: Date | null;
}
interface CommonIdentificationData extends CommonIdentificationDataIdOneOf {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /**
     * ID of the [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/introduction)
     * in the site's [CRM by Ascend](https://www.wix.com/ascend/crm) system.
     */
    contactId?: string | null;
}
/** @oneof */
interface CommonIdentificationDataIdOneOf {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum IdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface Staff {
    /**
     * ID of the staff receiving the tip. Matches `staffMemberId` if available, or
     * `identificationData.wixUserId` if not.
     * @readonly
     */
    _id?: string | null;
    /**
     * Staff name. Matches `staffMember.name` if the staff is a
     * [Bookings staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/staff-member-object),
     * or the [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/contact-v4/contact-object)'s
     * `info.name` if not.
     *
     * Max: 500 characters
     * @readonly
     */
    name?: string | null;
    /**
     * ID of the [staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/staff-member-object).
     * Available only if the staff is a staff member and not a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    staffMemberId?: string | null;
    /**
     * Identification data. Available only if the staff is a
     * [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/contact-v4/contact-object)
     * on the Wix site. Note that not all site collaborators are also
     * [staff members](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/introduction).
     */
    identificationData?: CommonIdentificationData;
}
interface LineItemInfo {
    /**
     * IDs of the line items associated with the tip.
     *
     * Min: 1 character
     * Max: 100 characters
     */
    lineItemId?: string | null;
    /**
     * Information about the line item and the corresponding catalog. Catalogs
     * include Wix Bookings and Wix Stores.
     */
    catalogReference?: CatalogReference;
    /**
     * Price of the line item.
     *
     * Min: `0.00`
     */
    price?: string | null;
    /**
     * Name of the line item, which is identical to:
     * + `product.name` for [Stores](https://dev.wix.com/docs/rest/business-solutions/stores/about-wix-stores).
     * + `service.name` for [Bookings](https://dev.wix.com/docs/rest/business-solutions/bookings/about-wix-bookings).
     *
     * Min: 1 character
     * Max: 200 characters
     */
    name?: string | null;
    /**
     * Quantity of the line item.
     *
     * Min: `1`
     * Max: `100000` (one hundred thousand)
     */
    quantity?: number | null;
}
interface CatalogReference {
    /**
     * ID of the line item within its catalog, corresponding to:
     * + `product.id` for [Stores](https://dev.wix.com/docs/rest/business-solutions/stores/about-wix-stores).
     * + `service.id` for [Bookings](https://dev.wix.com/docs/rest/business-solutions/bookings/about-wix-bookings).
     */
    catalogItemId?: string | null;
    /**
     * ID of the [app](https://dev.wix.com/docs/rest/articles/getting-started/wix-business-solutions)
     * to which the catalog belongs.
     *
     * Supported app IDs:
     * + [Wix Tips](https://www.wix.com/app-market/wix-tips): `"869a50c8-dd38-4324-b201-e33dc0747a5f"`
     * + [Wix Stores](https://www.wix.com/app-market/wix-stores): `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + [Wix Bookings](https://www.wix.com/app-market/bookings): `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + [Wix Restaurants Orders](https://www.wix.com/app-market/web-solution/wix-restaurants-orders-new): `"13e8d036-5516-6104-b456-c8466db39542"`
     */
    appId?: string | null;
}
interface Transaction {
    /** ID of the transaction that's associated with the tip distribution. */
    _id?: string | null;
    /**
     * Date and time the transaction was created in `YYYY-MM-DDThh:mm:ss.sssZ`
     * format. Isn't identical to the time the customer was actually charged.
     */
    date?: Date | null;
}
interface PreviewTipRequest {
    /**
     * Information about the line items to preview the tip for.
     *
     * Min: 1 line item
     * Max: 50 line items
     */
    lineItemInfo: LineItemInfo[];
    /**
     * Information about how to calculate the total tip amount and the distribution
     * amounts.
     */
    tipChoice: TipChoice;
    /**
     * ID of the tip settings used to preview the tip. If you don't provide a
     * `tipSettingsId`, the `staffDistributionMethod` is based on the site's
     * default tip settings.
     */
    tipSettingsId?: string | null;
}
interface TipChoice {
    /** Value of the tip choice. */
    value?: string | null;
    /**
     * Type of the tip choice.
     *
     * Supported values:
     * + `UNKNOWN_TIP_TYPE`: There is no information about the tip type.
     * + `PERCENTAGE`: The tip is calculated as a percentage of the subtotal of associated line items.
     * + `AMOUNT`: The tip is a fixed value, pre-configured from the relevant settings presets.
     * + `CUSTOM`: The customer, or the business on behalf of the customer, manually set a tip amount, which may not match any preset values.
     */
    tipType?: TipType;
}
declare enum TipType {
    /** There is no information about the tip type. */
    UNKNOWN_TIP_TYPE = "UNKNOWN_TIP_TYPE",
    /** The tip is calculated as a percentage of the subtotal of associated line items. */
    PERCENTAGE = "PERCENTAGE",
    /** The tip is a fixed value, pre-configured from the relevant settings presets. */
    AMOUNT = "AMOUNT",
    /** The customer, or the business on behalf of the customer, manually set a tip amount, which may not match any preset values. */
    CUSTOM = "CUSTOM"
}
interface PreviewTipResponse {
    /** Tip. */
    tip?: Tip;
}
interface GetTipByOrderIdRequest {
    /** ID of the order to retrieve the tip for. */
    orderId: string | null;
}
interface GetTipByOrderIdResponse {
    /** Retrieved tip. */
    tip?: Tip;
}
interface GetTipByDraftOrderIdRequest {
    /** ID of the draft order to retrieve the tip for. */
    draftOrderId: string | null;
}
interface GetTipByDraftOrderIdResponse {
    /** Retrieved tip. */
    tip?: Tip;
}
interface GetTipChoiceRequest {
    /**
     * ID of the [eCommerce purchase flow](https://dev.wix.com/docs/rest/business-solutions/e-commerce/wix-e-commerce-platform-handbook/overview/architecture-data-flow)
     * to retrieve the tip choice for.
     */
    purchaseFlowId: string | null;
}
interface GetTipChoiceResponse {
    /** Tip choice that's currently selected for the given purchase flow. */
    tipChoice?: TipChoice;
}
interface UpdateTipChoiceRequest {
    /**
     * Tip choice to select for the purchase flow. The call fails if you provide a
     * value for `tipChoice.tipType` that doesn't match the relevant tip settings
     * configuration. For example:
     * + `AMOUNT` when `tipSettings.tipType` isn't `AMOUNT`.
     * + `PERCENTAGE` when `tipSettings.tipType` isn't `PERCENTAGE`.
     * + `CUSTOM` when `tipSettings.allowCustomTip` is `false`.
     */
    tipChoice: TipChoice;
    /**
     * ID of the purchase flow that's associated with the
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/order/introduction)
     */
    purchaseFlowId: string | null;
}
interface UpdateTipChoiceResponse {
    /**
     * Tip choice currently selected in the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)
     * for the given purchase flow.
     */
    tipChoice?: TipChoice;
}
interface SetTipOnOrderRequest extends SetTipOnOrderRequestIdentifierOneOf {
    /** ID of the order for which to set the tip. */
    orderId?: string | null;
    /** Tip to set on the order. */
    tip: Tip;
}
/** @oneof */
interface SetTipOnOrderRequestIdentifierOneOf {
    /** ID of the order for which to set the tip. */
    orderId?: string | null;
}
interface SetTipOnOrderResponse {
    /** Set tip. */
    tip?: Tip;
    /** Information about the order on which the tip was set. */
    orderInfo?: OrderInfo;
}
interface OrderInfo extends OrderInfoIdentifierOneOf {
    /** Order ID. */
    orderId?: string | null;
    /** ID of the order's additional fee that's associated with the tip. */
    additionalFeeId?: string | null;
    /** Price of the order's additional fee that's associated with the tip. */
    additionalFeePrice?: Price;
}
/** @oneof */
interface OrderInfoIdentifierOneOf {
    /** Order ID. */
    orderId?: string | null;
}
interface Price {
    /** Amount of the additional fee that's associated with the tip. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     *
     * Max: 100 characters
     * @readonly
     */
    formattedAmount?: string;
}
interface RemoveTipFromOrderRequest extends RemoveTipFromOrderRequestIdentifierOneOf {
    /** ID of the order from which to remove the tip. */
    orderId?: string | null;
}
/** @oneof */
interface RemoveTipFromOrderRequestIdentifierOneOf {
    /** ID of the order from which to remove the tip. */
    orderId?: string | null;
}
interface RemoveTipFromOrderResponse {
    /** Information about the order from which the tip was removed. */
    orderInfo?: OrderInfo;
}
interface AddTipDistributionsToOrderRequest extends AddTipDistributionsToOrderRequestIdentifierOneOf {
    /** ID of the order for which to add tip distributions. */
    orderId?: string | null;
    /** Tip distributions to add to the order. */
    tipDistributions: TipDistribution[];
}
/** @oneof */
interface AddTipDistributionsToOrderRequestIdentifierOneOf {
    /** ID of the order for which to add tip distributions. */
    orderId?: string | null;
}
interface AddTipDistributionsToOrderResponse {
    /** Tip distributions that were added to the order. */
    tipDistributions?: TipDistribution[];
    /** Information about the order to which the tip distributions were added. */
    orderInfo?: OrderInfo;
}
interface QueryTipDistributionsRequest {
    /** WQL expression. */
    query: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryTipDistributionsResponse {
    /** Retrieved tip distributions. */
    tipDistributions?: TipDistribution[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors;
    /**
     * Indicates if there are more results after the current page.
     * If `true`, another page of results can be retrieved.
     * If `false`, this is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
interface SumTipDistributionAmountsRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter: Record<string, any> | null;
}
interface SumTipDistributionAmountsResponse {
    /** Total amount of tip distributions matching the filter. */
    totalAmount?: string | null;
}
interface CommonIdentificationDataNonNullableFields {
    anonymousVisitorId: string;
    memberId: string;
    wixUserId: string;
    appId: string;
    identityType: IdentityType;
}
interface StaffNonNullableFields {
    identificationData?: CommonIdentificationDataNonNullableFields;
}
interface TipDistributionNonNullableFields {
    staff?: StaffNonNullableFields;
}
interface TipNonNullableFields {
    distributions: TipDistributionNonNullableFields[];
}
interface PreviewTipResponseNonNullableFields {
    tip?: TipNonNullableFields;
}
interface GetTipByOrderIdResponseNonNullableFields {
    tip?: TipNonNullableFields;
}
interface GetTipByDraftOrderIdResponseNonNullableFields {
    tip?: TipNonNullableFields;
}
interface TipChoiceNonNullableFields {
    tipType: TipType;
}
interface GetTipChoiceResponseNonNullableFields {
    tipChoice?: TipChoiceNonNullableFields;
}
interface UpdateTipChoiceResponseNonNullableFields {
    tipChoice?: TipChoiceNonNullableFields;
}
interface PriceNonNullableFields {
    amount: string;
    formattedAmount: string;
}
interface OrderInfoNonNullableFields {
    additionalFeePrice?: PriceNonNullableFields;
}
interface SetTipOnOrderResponseNonNullableFields {
    tip?: TipNonNullableFields;
    orderInfo?: OrderInfoNonNullableFields;
}
interface RemoveTipFromOrderResponseNonNullableFields {
    orderInfo?: OrderInfoNonNullableFields;
}
interface AddTipDistributionsToOrderResponseNonNullableFields {
    tipDistributions: TipDistributionNonNullableFields[];
    orderInfo?: OrderInfoNonNullableFields;
}
interface QueryTipDistributionsResponseNonNullableFields {
    tipDistributions: TipDistributionNonNullableFields[];
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function previewTip(): __PublicMethodMetaInfo<'POST', {}, PreviewTipRequest, PreviewTipRequest$1, PreviewTipResponse & PreviewTipResponseNonNullableFields, PreviewTipResponse$1 & PreviewTipResponseNonNullableFields$1>;
declare function getTipByOrderId(): __PublicMethodMetaInfo<'GET', {
    orderId: string;
}, GetTipByOrderIdRequest, GetTipByOrderIdRequest$1, GetTipByOrderIdResponse & GetTipByOrderIdResponseNonNullableFields, GetTipByOrderIdResponse$1 & GetTipByOrderIdResponseNonNullableFields$1>;
declare function getTipByDraftOrderId(): __PublicMethodMetaInfo<'GET', {
    draftOrderId: string;
}, GetTipByDraftOrderIdRequest, GetTipByDraftOrderIdRequest$1, GetTipByDraftOrderIdResponse & GetTipByDraftOrderIdResponseNonNullableFields, GetTipByDraftOrderIdResponse$1 & GetTipByDraftOrderIdResponseNonNullableFields$1>;
declare function getTipChoice(): __PublicMethodMetaInfo<'GET', {
    purchaseFlowId: string;
}, GetTipChoiceRequest, GetTipChoiceRequest$1, GetTipChoiceResponse & GetTipChoiceResponseNonNullableFields, GetTipChoiceResponse$1 & GetTipChoiceResponseNonNullableFields$1>;
declare function updateTipChoice(): __PublicMethodMetaInfo<'PATCH', {}, UpdateTipChoiceRequest, UpdateTipChoiceRequest$1, UpdateTipChoiceResponse & UpdateTipChoiceResponseNonNullableFields, UpdateTipChoiceResponse$1 & UpdateTipChoiceResponseNonNullableFields$1>;
declare function setTipOnOrder(): __PublicMethodMetaInfo<'POST', {}, SetTipOnOrderRequest, SetTipOnOrderRequest$1, SetTipOnOrderResponse & SetTipOnOrderResponseNonNullableFields, SetTipOnOrderResponse$1 & SetTipOnOrderResponseNonNullableFields$1>;
declare function removeTipFromOrder(): __PublicMethodMetaInfo<'POST', {}, RemoveTipFromOrderRequest, RemoveTipFromOrderRequest$1, RemoveTipFromOrderResponse & RemoveTipFromOrderResponseNonNullableFields, RemoveTipFromOrderResponse$1 & RemoveTipFromOrderResponseNonNullableFields$1>;
declare function addTipDistributionsToOrder(): __PublicMethodMetaInfo<'POST', {}, AddTipDistributionsToOrderRequest, AddTipDistributionsToOrderRequest$1, AddTipDistributionsToOrderResponse & AddTipDistributionsToOrderResponseNonNullableFields, AddTipDistributionsToOrderResponse$1 & AddTipDistributionsToOrderResponseNonNullableFields$1>;
declare function queryTipDistributions(): __PublicMethodMetaInfo<'POST', {}, QueryTipDistributionsRequest, QueryTipDistributionsRequest$1, QueryTipDistributionsResponse & QueryTipDistributionsResponseNonNullableFields, QueryTipDistributionsResponse$1 & QueryTipDistributionsResponseNonNullableFields$1>;
declare function sumTipDistributionAmounts(): __PublicMethodMetaInfo<'POST', {}, SumTipDistributionAmountsRequest, SumTipDistributionAmountsRequest$1, SumTipDistributionAmountsResponse, SumTipDistributionAmountsResponse$1>;

type meta___PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = __PublicMethodMetaInfo<K, M, T, S, Q, R>;
declare const meta_addTipDistributionsToOrder: typeof addTipDistributionsToOrder;
declare const meta_getTipByDraftOrderId: typeof getTipByDraftOrderId;
declare const meta_getTipByOrderId: typeof getTipByOrderId;
declare const meta_getTipChoice: typeof getTipChoice;
declare const meta_previewTip: typeof previewTip;
declare const meta_queryTipDistributions: typeof queryTipDistributions;
declare const meta_removeTipFromOrder: typeof removeTipFromOrder;
declare const meta_setTipOnOrder: typeof setTipOnOrder;
declare const meta_sumTipDistributionAmounts: typeof sumTipDistributionAmounts;
declare const meta_updateTipChoice: typeof updateTipChoice;
declare namespace meta {
  export { type meta___PublicMethodMetaInfo as __PublicMethodMetaInfo, meta_addTipDistributionsToOrder as addTipDistributionsToOrder, meta_getTipByDraftOrderId as getTipByDraftOrderId, meta_getTipByOrderId as getTipByOrderId, meta_getTipChoice as getTipChoice, meta_previewTip as previewTip, meta_queryTipDistributions as queryTipDistributions, meta_removeTipFromOrder as removeTipFromOrder, meta_setTipOnOrder as setTipOnOrder, meta_sumTipDistributionAmounts as sumTipDistributionAmounts, meta_updateTipChoice as updateTipChoice };
}

export { meta$p as abandonedCheckouts, meta$o as backInStockNotifications, meta$n as backInStockSettings, meta$m as cart, meta$k as checkout, meta$v as checkoutContent, meta$j as checkoutSettings, meta$i as checkoutTemplates, meta$4 as currencies, meta$l as currentCart, meta$h as deliveryProfile, meta$3 as deliverySolutions, meta$t as discountRules, meta$u as discountsCustomTrigger, meta$g as draftOrders, meta$e as giftVouchers, meta$d as localDeliveryOptions, meta$f as orderFulfillments, meta$s as orderInvoices, meta$b as orderPaymentRequests, meta$a as orderTransactions, meta$c as orders, meta$9 as ordersSettings, meta$8 as pickupLocations, meta$r as recommendations, meta$7 as shippingOptions, meta$6 as shippoConfigurations, meta$q as subscriptionContracts, meta$2 as tipSettings, meta$1 as tippableStaff, meta as tips, meta$5 as totalsCalculator };
