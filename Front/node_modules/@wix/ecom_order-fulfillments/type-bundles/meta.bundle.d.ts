interface OrderWithFulfillments$1 {
    /** Order ID. */
    orderId?: string;
    /** Fulfillments associated with the order. */
    fulfillments?: Fulfillment$1[];
}
/** for now, this is a sub-object of Orders, so can refer to order line items by id. */
interface Fulfillment$1 extends FulfillmentFulfillmentInfoOneOf$1 {
    /** Tracking info. */
    trackingInfo?: FulfillmentTrackingInfo$1;
    /** Custom fulfillment info. */
    customInfo?: CustomFulfillmentInfo$1;
    /**
     * Fulfillment ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Fulfillment creation date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    createdDate?: Date | null;
    /** Line items being fulfilled. */
    lineItems?: FulfillmentLineItem$1[];
    /**
     * Fulfillment status.
     *
     * Supported values:
     * + `"Pending"`
     * + `"Accepted"`
     * + `"Ready"`
     * + `"In_Delivery"`
     * + `"Fulfilled"`
     */
    status?: string | null;
    /** Fulfillment handling complete. */
    completed?: boolean | null;
}
/** @oneof */
interface FulfillmentFulfillmentInfoOneOf$1 {
    /** Tracking info. */
    trackingInfo?: FulfillmentTrackingInfo$1;
    /** Custom fulfillment info. */
    customInfo?: CustomFulfillmentInfo$1;
}
interface FulfillmentLineItem$1 {
    /** Line item ID (mirrors the ID of the order line item). */
    id?: string;
    /**
     * Line item quantity.
     * * If this property isn't passed on creation, it defaults to the number of items not already linked to a fulfillment.
     * * If the order does not have the requested quantity of line items available to add to this fulfillment, the fulfillment will not be created and an error is returned.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number | null;
}
interface FulfillmentTrackingInfo$1 {
    /** Shipping/delivery tracking number. */
    trackingNumber?: string | null;
    /**
     * Shipping provider. Using one of the following shipping providers will allow for auto-filling the tracking link:
     * * `'fedex'`
     * * `'ups'`
     * * `'usps'`
     * * `'dhl'`
     * * `'canadaPost'`
     */
    shippingProvider?: string | null;
    /** Tracking link. Auto-filled if a predefined shipping provider is used, otherwise provided on creation. */
    trackingLink?: string | null;
}
interface CustomFulfillmentInfo$1 {
    /** Custom fulfillment info in key:value form. */
    fieldsData?: Record<string, string>;
}
interface ListFulfillmentsForSingleOrderRequest$1 {
    /** Order ID for which to retrieve fulfillments. */
    orderId: string;
}
interface ListFulfillmentsForSingleOrderResponse$1 {
    /** List of fulfillments associated with the order. */
    orderWithFulfillments?: OrderWithFulfillments$1;
}
interface ListFulfillmentsForMultipleOrdersRequest$1 {
    /** List of order IDs for which to retrieve fulfillments. */
    orderIds: string[];
}
interface ListFulfillmentsForMultipleOrdersResponse$1 {
    /** List of order IDs and their associated fulfillments. */
    ordersWithFulfillments?: OrderWithFulfillments$1[];
}
interface CreateFulfillmentRequest$1 {
    /** Order ID. */
    orderId: string;
    /** Fulfillment info. */
    fulfillment: Fulfillment$1;
}
interface CreateFulfillmentResponse$1 {
    /** Order ID and the orders' fulfillments. */
    orderWithFulfillments?: OrderWithFulfillments$1;
    /** ID of created fulfillment. */
    fulfillmentId?: string;
}
interface UpdateFulfillmentRequest$1 {
    /** Order ID. */
    orderId: string;
    /** Fulfillment info to update. */
    fulfillment?: Fulfillment$1;
}
interface UpdateFulfillmentResponse$1 {
    /** Order ID and the orders' associated fulfillments after update. */
    orderWithFulfillments?: OrderWithFulfillments$1;
}
interface DeleteFulfillmentRequest$1 {
    /** Order ID. */
    orderId: string;
    /** ID of the fulfillment to delete. */
    fulfillmentId: string;
}
interface DeleteFulfillmentResponse$1 {
    /** Order ID and the order's associated fulfillments after deletion. */
    orderWithFulfillments?: OrderWithFulfillments$1;
}
interface BulkCreateFulfillmentRequest$1 {
    /** List of order IDs and their associated fulfillments. */
    ordersWithFulfillments: BulkCreateOrderWithFulfillments$1[];
}
interface BulkCreateOrderWithFulfillments$1 {
    /** Order ID. */
    orderId?: string;
    /** Fulfillments associated with the order. */
    fulfillments?: Fulfillment$1[];
}
interface BulkCreateFulfillmentResponse$1 {
    /** Items updated by bulk action. */
    results?: BulkOrderFulfillmentsResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkOrderFulfillmentsResult$1 {
    /** Item metadata. */
    itemMetadata?: ItemMetadata$1;
    ordersWithFulfillments?: OrderWithFulfillments$1;
}
interface ItemMetadata$1 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$1;
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$1 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface FulfillmentLineItemNonNullableFields$1 {
    id: string;
}
interface FulfillmentNonNullableFields$1 {
    lineItems: FulfillmentLineItemNonNullableFields$1[];
}
interface OrderWithFulfillmentsNonNullableFields$1 {
    orderId: string;
    fulfillments: FulfillmentNonNullableFields$1[];
}
interface ListFulfillmentsForSingleOrderResponseNonNullableFields$1 {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields$1;
}
interface ListFulfillmentsForMultipleOrdersResponseNonNullableFields$1 {
    ordersWithFulfillments: OrderWithFulfillmentsNonNullableFields$1[];
}
interface CreateFulfillmentResponseNonNullableFields$1 {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields$1;
    fulfillmentId: string;
}
interface UpdateFulfillmentResponseNonNullableFields$1 {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields$1;
}
interface DeleteFulfillmentResponseNonNullableFields$1 {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields$1;
}
interface ApplicationErrorNonNullableFields$1 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$1 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$1;
}
interface BulkOrderFulfillmentsResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$1;
    ordersWithFulfillments?: OrderWithFulfillmentsNonNullableFields$1;
}
interface BulkActionMetadataNonNullableFields$1 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateFulfillmentResponseNonNullableFields$1 {
    results: BulkOrderFulfillmentsResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}

interface OrderWithFulfillments {
    /** Order ID. */
    orderId?: string;
    /** Fulfillments associated with the order. */
    fulfillments?: Fulfillment[];
}
/** for now, this is a sub-object of Orders, so can refer to order line items by id. */
interface Fulfillment extends FulfillmentFulfillmentInfoOneOf {
    /** Tracking info. */
    trackingInfo?: FulfillmentTrackingInfo;
    /** Custom fulfillment info. */
    customInfo?: CustomFulfillmentInfo;
    /**
     * Fulfillment ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Fulfillment creation date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Line items being fulfilled. */
    lineItems?: FulfillmentLineItem[];
    /**
     * Fulfillment status.
     *
     * Supported values:
     * + `"Pending"`
     * + `"Accepted"`
     * + `"Ready"`
     * + `"In_Delivery"`
     * + `"Fulfilled"`
     */
    status?: string | null;
    /** Fulfillment handling complete. */
    completed?: boolean | null;
}
/** @oneof */
interface FulfillmentFulfillmentInfoOneOf {
    /** Tracking info. */
    trackingInfo?: FulfillmentTrackingInfo;
    /** Custom fulfillment info. */
    customInfo?: CustomFulfillmentInfo;
}
interface FulfillmentLineItem {
    /** Line item ID (mirrors the ID of the order line item). */
    _id?: string;
    /**
     * Line item quantity.
     * * If this property isn't passed on creation, it defaults to the number of items not already linked to a fulfillment.
     * * If the order does not have the requested quantity of line items available to add to this fulfillment, the fulfillment will not be created and an error is returned.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number | null;
}
interface FulfillmentTrackingInfo {
    /** Shipping/delivery tracking number. */
    trackingNumber?: string | null;
    /**
     * Shipping provider. Using one of the following shipping providers will allow for auto-filling the tracking link:
     * * `'fedex'`
     * * `'ups'`
     * * `'usps'`
     * * `'dhl'`
     * * `'canadaPost'`
     */
    shippingProvider?: string | null;
    /** Tracking link. Auto-filled if a predefined shipping provider is used, otherwise provided on creation. */
    trackingLink?: string | null;
}
interface CustomFulfillmentInfo {
    /** Custom fulfillment info in key:value form. */
    fieldsData?: Record<string, string>;
}
interface ListFulfillmentsForSingleOrderRequest {
    /** Order ID for which to retrieve fulfillments. */
    orderId: string;
}
interface ListFulfillmentsForSingleOrderResponse {
    /** List of fulfillments associated with the order. */
    orderWithFulfillments?: OrderWithFulfillments;
}
interface ListFulfillmentsForMultipleOrdersRequest {
    /** List of order IDs for which to retrieve fulfillments. */
    orderIds: string[];
}
interface ListFulfillmentsForMultipleOrdersResponse {
    /** List of order IDs and their associated fulfillments. */
    ordersWithFulfillments?: OrderWithFulfillments[];
}
interface CreateFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** Fulfillment info. */
    fulfillment: Fulfillment;
}
interface CreateFulfillmentResponse {
    /** Order ID and the orders' fulfillments. */
    orderWithFulfillments?: OrderWithFulfillments;
    /** ID of created fulfillment. */
    fulfillmentId?: string;
}
interface UpdateFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** Fulfillment info to update. */
    fulfillment?: Fulfillment;
}
interface UpdateFulfillmentResponse {
    /** Order ID and the orders' associated fulfillments after update. */
    orderWithFulfillments?: OrderWithFulfillments;
}
interface DeleteFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** ID of the fulfillment to delete. */
    fulfillmentId: string;
}
interface DeleteFulfillmentResponse {
    /** Order ID and the order's associated fulfillments after deletion. */
    orderWithFulfillments?: OrderWithFulfillments;
}
interface BulkCreateFulfillmentRequest {
    /** List of order IDs and their associated fulfillments' info. */
    ordersWithFulfillments: BulkCreateOrderWithFulfillments[];
}
interface BulkCreateOrderWithFulfillments {
    /** Order ID. */
    orderId?: string;
    /** Fulfillments associated with the order. */
    fulfillments?: Fulfillment[];
}
interface BulkCreateFulfillmentResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderFulfillmentsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkOrderFulfillmentsResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata;
    /** List of order IDs and their associated fulfillments. */
    ordersWithFulfillments?: OrderWithFulfillments;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface FulfillmentLineItemNonNullableFields {
    _id: string;
}
interface FulfillmentNonNullableFields {
    lineItems: FulfillmentLineItemNonNullableFields[];
}
interface OrderWithFulfillmentsNonNullableFields {
    orderId: string;
    fulfillments: FulfillmentNonNullableFields[];
}
interface ListFulfillmentsForSingleOrderResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface ListFulfillmentsForMultipleOrdersResponseNonNullableFields {
    ordersWithFulfillments: OrderWithFulfillmentsNonNullableFields[];
}
interface CreateFulfillmentResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
    fulfillmentId: string;
}
interface UpdateFulfillmentResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface DeleteFulfillmentResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface BulkOrderFulfillmentsResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
    ordersWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateFulfillmentResponseNonNullableFields {
    results: BulkOrderFulfillmentsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function listFulfillmentsForSingleOrder(): __PublicMethodMetaInfo<'GET', {
    orderId: string;
}, ListFulfillmentsForSingleOrderRequest, ListFulfillmentsForSingleOrderRequest$1, ListFulfillmentsForSingleOrderResponse & ListFulfillmentsForSingleOrderResponseNonNullableFields, ListFulfillmentsForSingleOrderResponse$1 & ListFulfillmentsForSingleOrderResponseNonNullableFields$1>;
declare function listFulfillmentsForMultipleOrders(): __PublicMethodMetaInfo<'POST', {}, ListFulfillmentsForMultipleOrdersRequest, ListFulfillmentsForMultipleOrdersRequest$1, ListFulfillmentsForMultipleOrdersResponse & ListFulfillmentsForMultipleOrdersResponseNonNullableFields, ListFulfillmentsForMultipleOrdersResponse$1 & ListFulfillmentsForMultipleOrdersResponseNonNullableFields$1>;
declare function createFulfillment(): __PublicMethodMetaInfo<'POST', {
    orderId: string;
}, CreateFulfillmentRequest, CreateFulfillmentRequest$1, CreateFulfillmentResponse & CreateFulfillmentResponseNonNullableFields, CreateFulfillmentResponse$1 & CreateFulfillmentResponseNonNullableFields$1>;
declare function updateFulfillment(): __PublicMethodMetaInfo<'PATCH', {
    fulfillmentId: string;
    orderId: string;
}, UpdateFulfillmentRequest, UpdateFulfillmentRequest$1, UpdateFulfillmentResponse & UpdateFulfillmentResponseNonNullableFields, UpdateFulfillmentResponse$1 & UpdateFulfillmentResponseNonNullableFields$1>;
declare function deleteFulfillment(): __PublicMethodMetaInfo<'DELETE', {
    fulfillmentId: string;
    orderId: string;
}, DeleteFulfillmentRequest, DeleteFulfillmentRequest$1, DeleteFulfillmentResponse & DeleteFulfillmentResponseNonNullableFields, DeleteFulfillmentResponse$1 & DeleteFulfillmentResponseNonNullableFields$1>;
declare function bulkCreateFulfillments(): __PublicMethodMetaInfo<'POST', {}, BulkCreateFulfillmentRequest, BulkCreateFulfillmentRequest$1, BulkCreateFulfillmentResponse & BulkCreateFulfillmentResponseNonNullableFields, BulkCreateFulfillmentResponse$1 & BulkCreateFulfillmentResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, bulkCreateFulfillments, createFulfillment, deleteFulfillment, listFulfillmentsForMultipleOrders, listFulfillmentsForSingleOrder, updateFulfillment };
