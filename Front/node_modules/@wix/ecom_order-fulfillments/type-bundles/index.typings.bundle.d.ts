interface OrderWithFulfillments {
    /** Order ID. */
    orderId?: string;
    /** Fulfillments associated with the order. */
    fulfillments?: Fulfillment[];
}
/** for now, this is a sub-object of Orders, so can refer to order line items by id. */
interface Fulfillment extends FulfillmentFulfillmentInfoOneOf {
    /** Tracking info. */
    trackingInfo?: FulfillmentTrackingInfo;
    /** Custom fulfillment info. */
    customInfo?: CustomFulfillmentInfo;
    /**
     * Fulfillment ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Fulfillment creation date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Line items being fulfilled. */
    lineItems?: FulfillmentLineItem[];
    /**
     * Fulfillment status.
     *
     * Supported values:
     * + `"Pending"`
     * + `"Accepted"`
     * + `"Ready"`
     * + `"In_Delivery"`
     * + `"Fulfilled"`
     */
    status?: string | null;
    /** Fulfillment handling complete. */
    completed?: boolean | null;
}
/** @oneof */
interface FulfillmentFulfillmentInfoOneOf {
    /** Tracking info. */
    trackingInfo?: FulfillmentTrackingInfo;
    /** Custom fulfillment info. */
    customInfo?: CustomFulfillmentInfo;
}
interface FulfillmentLineItem {
    /** Line item ID (mirrors the ID of the order line item). */
    _id?: string;
    /**
     * Line item quantity.
     * * If this property isn't passed on creation, it defaults to the number of items not already linked to a fulfillment.
     * * If the order does not have the requested quantity of line items available to add to this fulfillment, the fulfillment will not be created and an error is returned.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number | null;
}
interface FulfillmentTrackingInfo {
    /** Shipping/delivery tracking number. */
    trackingNumber?: string | null;
    /**
     * Shipping provider. Using one of the following shipping providers will allow for auto-filling the tracking link:
     * * `'fedex'`
     * * `'ups'`
     * * `'usps'`
     * * `'dhl'`
     * * `'canadaPost'`
     */
    shippingProvider?: string | null;
    /** Tracking link. Auto-filled if a predefined shipping provider is used, otherwise provided on creation. */
    trackingLink?: string | null;
}
interface CustomFulfillmentInfo {
    /** Custom fulfillment info in key:value form. */
    fieldsData?: Record<string, string>;
}
interface FulfillmentCreated {
    /** Order ID (auto generated upon order creation). */
    orderId?: string;
    /** ID of the newly created fulfillment. */
    fulfillmentId?: string;
    /** Fulfillment creation date and time. */
    dateCreated?: Date | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /** Order fulfillment status. */
    fulfillmentStatus?: FulfillmentStatus;
    /** Fulfillment tracking information. */
    trackingInfo?: V2FulfillmentTrackingInfo;
}
/** Buyer Info */
interface BuyerInfo {
    /** Wix customer ID */
    _id?: string | null;
    /**
     * Deprecated (use identityType instead)
     * @readonly
     * @deprecated
     */
    type?: IdentityType;
    /** Customer type */
    identityType?: IdentityType;
    /**
     * Customer's first name
     * @readonly
     */
    firstName?: string;
    /**
     * Customer's last name
     * @readonly
     */
    lastName?: string;
    /**
     * Customer's phone number
     * @readonly
     */
    phone?: string | null;
    /**
     * Customer's email address
     * @readonly
     */
    email?: string;
}
declare enum IdentityType {
    UNSPECIFIED_IDENTITY_TYPE = "UNSPECIFIED_IDENTITY_TYPE",
    /** Site member */
    MEMBER = "MEMBER",
    /** Contact */
    CONTACT = "CONTACT"
}
declare enum FulfillmentStatus {
    /** None of the order items are fulfilled */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FULFILLED = "FULFILLED",
    /** Order is canceled */
    CANCELED = "CANCELED",
    /** Some, but not all of the order items are fulfilled */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
interface V2FulfillmentTrackingInfo {
    /** Tracking number. */
    trackingNumber?: string;
    /**
     * Shipping provider. Using the following shipping providers will allow for autofilling the tracking link:
     * * `fedex`
     * * `ups`
     * * `usps`
     * * `dhl`
     * * `canadaPost`
     */
    shippingProvider?: string;
    /** Tracking link - autofilled if using a predefined shipping provider, otherwise provided on creation. */
    trackingLink?: string | null;
}
interface FulfillmentUpdated {
    /** Order ID (auto generated upon order creation). */
    orderId?: string;
    /** ID of the updated fulfillment. */
    fulfillmentId?: string;
    /** Fulfillment tracking information. */
    trackingInfo?: V2FulfillmentTrackingInfo;
}
interface FulfillmentDeleted {
    /** Order ID (auto generated upon order creation). */
    orderId?: string;
    /** ID of the deleted fulfillment. */
    fulfillmentId?: string;
    /** Order fulfillment status. */
    fulfillmentStatus?: FulfillmentStatus;
}
interface ListFulfillmentsForSingleOrderRequest {
    /** Order ID for which to retrieve fulfillments. */
    orderId: string;
}
interface ListFulfillmentsForSingleOrderResponse {
    /** List of fulfillments associated with the order. */
    orderWithFulfillments?: OrderWithFulfillments;
}
interface ListFulfillmentsForMultipleOrdersRequest {
    /** List of order IDs for which to retrieve fulfillments. */
    orderIds: string[];
}
interface ListFulfillmentsForMultipleOrdersResponse {
    /** List of order IDs and their associated fulfillments. */
    ordersWithFulfillments?: OrderWithFulfillments[];
}
interface CreateFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** Fulfillment info. */
    fulfillment: Fulfillment;
}
interface CreateFulfillmentResponse {
    /** Order ID and the orders' fulfillments. */
    orderWithFulfillments?: OrderWithFulfillments;
    /** ID of created fulfillment. */
    fulfillmentId?: string;
}
interface UpdateFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** Fulfillment info to update. */
    fulfillment?: Fulfillment;
}
interface UpdateFulfillmentResponse {
    /** Order ID and the orders' associated fulfillments after update. */
    orderWithFulfillments?: OrderWithFulfillments;
}
interface DeleteFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** ID of the fulfillment to delete. */
    fulfillmentId: string;
}
interface DeleteFulfillmentResponse {
    /** Order ID and the order's associated fulfillments after deletion. */
    orderWithFulfillments?: OrderWithFulfillments;
}
interface BulkCreateFulfillmentRequest {
    /** List of order IDs and their associated fulfillments' info. */
    ordersWithFulfillments: BulkCreateOrderWithFulfillments[];
}
interface BulkCreateOrderWithFulfillments {
    /** Order ID. */
    orderId?: string;
    /** Fulfillments associated with the order. */
    fulfillments?: Fulfillment[];
}
interface BulkCreateFulfillmentResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderFulfillmentsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkOrderFulfillmentsResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata;
    /** List of order IDs and their associated fulfillments. */
    ordersWithFulfillments?: OrderWithFulfillments;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface FulfillmentLineItemNonNullableFields {
    _id: string;
}
interface FulfillmentNonNullableFields {
    lineItems: FulfillmentLineItemNonNullableFields[];
}
interface OrderWithFulfillmentsNonNullableFields {
    orderId: string;
    fulfillments: FulfillmentNonNullableFields[];
}
interface ListFulfillmentsForSingleOrderResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface ListFulfillmentsForMultipleOrdersResponseNonNullableFields {
    ordersWithFulfillments: OrderWithFulfillmentsNonNullableFields[];
}
interface CreateFulfillmentResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
    fulfillmentId: string;
}
interface UpdateFulfillmentResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface DeleteFulfillmentResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface BulkOrderFulfillmentsResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
    ordersWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateFulfillmentResponseNonNullableFields {
    results: BulkOrderFulfillmentsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BaseEventMetadata {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface FulfillmentsUpdatedEnvelope {
    entity: OrderWithFulfillments;
    metadata: EventMetadata;
}
/**
 * Triggered when one or more of an order's fulfillments are created, updated, or deleted.
 *
 * The response contains the order's ID and details about all of its fulfillments following the change.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId ECOM.READ_FULFILLMENTS
 * @webhook
 * @eventType wix.ecom.v1.fulfillments_updated
 */
declare function onFulfillmentsUpdated(handler: (event: FulfillmentsUpdatedEnvelope) => void | Promise<void>): void;
/**
 * Retrieves fulfillments associated with a specified order.
 *
 *
 * The `listFulfillmentsForSingleOrder()` function returns a Promise that resolves when the fulfillments are retrieved.
 * @param orderId - Order ID for which to retrieve fulfillments.
 * @public
 * @requiredField orderId
 * @permissionId ECOM.READ_FULFILLMENTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity MEMBER
 */
declare function listFulfillmentsForSingleOrder(orderId: string): Promise<ListFulfillmentsForSingleOrderResponse & ListFulfillmentsForSingleOrderResponseNonNullableFields>;
/**
 * Retrieves fulfillments associated with multiple specified orders.
 *
 *
 * The `listFulfillmentsForMultipleOrders()` function returns a Promise that resolves when the fulfillments are retrieved.
 * @param orderIds - List of order IDs for which to retrieve fulfillments.
 * @public
 * @requiredField orderIds
 * @permissionId ECOM.READ_FULFILLMENTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity MEMBER
 */
declare function listFulfillmentsForMultipleOrders(orderIds: string[]): Promise<ListFulfillmentsForMultipleOrdersResponse & ListFulfillmentsForMultipleOrdersResponseNonNullableFields>;
/**
 * Creates an order fulfillment.
 *
 *
 * The `createFulfillment()` function returns a Promise that resolves when the fulfillment is created.
 * @param orderId - Order ID.
 * @param fulfillment - Fulfillment info.
 * @public
 * @requiredField fulfillment
 * @requiredField fulfillment.lineItems
 * @requiredField fulfillment.lineItems._id
 * @requiredField orderId
 * @permissionId ECOM.MODIFY_FULFILLMENTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 */
declare function createFulfillment(orderId: string, fulfillment: Fulfillment): Promise<CreateFulfillmentResponse & CreateFulfillmentResponseNonNullableFields>;
/**
 * Updates a fulfillment's properties.
 * To update a field's value, include the new value in the `fulfillment` field in the body params.
 * To remove a field's value, pass `null`.
 *
 *
 * The `updateFulfillment()` function returns a Promise that resolves when the fulfillment is updated.
 *
 * > **Note:** Updating line item IDs or fulfilled quantities is not allowed. To update line item IDs or quantities, delete the fulfillment and create it again.
 * @public
 * @requiredField identifiers
 * @requiredField identifiers.fulfillmentId
 * @requiredField identifiers.orderId
 * @param identifiers - Order and fulfillment IDs to be updated.
 * @param options - Available options to use when updating a fulfillment.
 * @permissionId ECOM.MODIFY_FULFILLMENTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns Order ID and the orders' associated fulfillments after update.
 */
declare function updateFulfillment(identifiers: UpdateFulfillmentIdentifiers, options?: UpdateFulfillmentOptions): Promise<OrderWithFulfillments & OrderWithFulfillmentsNonNullableFields>;
interface UpdateFulfillmentOptions {
    /** Fulfillment info. */
    fulfillment: {
        /** Tracking info. */
        trackingInfo?: FulfillmentTrackingInfo;
        /** Custom fulfillment info. */
        customInfo?: CustomFulfillmentInfo;
        /**
         * Fulfillment ID.
         * @readonly
         */
        _id?: string | null;
        /**
         * Fulfillment creation date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
         * @readonly
         */
        _createdDate?: Date | null;
        /** Line items being fulfilled. */
        lineItems?: FulfillmentLineItem[];
        /**
         * Fulfillment status.
         *
         * Supported values:
         * + `"Pending"`
         * + `"Accepted"`
         * + `"Ready"`
         * + `"In_Delivery"`
         * + `"Fulfilled"`
         */
        status?: string | null;
        /** Fulfillment handling complete. */
        completed?: boolean | null;
    };
}
interface UpdateFulfillmentIdentifiers {
    /**
     * ID of the fulfillment to be updated.
     * @readonly
     */
    fulfillmentId?: string | null;
    /** Order ID. */
    orderId: string;
}
/**
 * Deletes an existing order fulfillment.
 *
 *
 * The `deleteFulfillment()` function returns a Promise that resolves when the fulfillment is deleted.
 * @public
 * @requiredField identifiers
 * @requiredField identifiers.fulfillmentId
 * @requiredField identifiers.orderId
 * @param identifiers - Order and fulfillment IDs.
 * @permissionId ECOM.MODIFY_FULFILLMENTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 */
declare function deleteFulfillment(identifiers: DeleteFulfillmentIdentifiers): Promise<DeleteFulfillmentResponse & DeleteFulfillmentResponseNonNullableFields>;
interface DeleteFulfillmentIdentifiers {
    /** ID of the fulfillment to delete. */
    fulfillmentId: string;
    /** Order ID. */
    orderId: string;
}
/**
 * Creates multiple fulfillments for one or more orders.
 *
 *
 * The `bulkCreateFulfillments()` function returns a Promise that resolves when the fulfillments are created.
 * @param ordersWithFulfillments - List of order IDs and their associated fulfillments' info.
 * @public
 * @requiredField ordersWithFulfillments
 * @requiredField ordersWithFulfillments.fulfillments
 * @requiredField ordersWithFulfillments.fulfillments.lineItems
 * @requiredField ordersWithFulfillments.fulfillments.lineItems._id
 * @requiredField ordersWithFulfillments.orderId
 * @permissionId ECOM.MODIFY_FULFILLMENTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 */
declare function bulkCreateFulfillments(ordersWithFulfillments: BulkCreateOrderWithFulfillments[]): Promise<BulkCreateFulfillmentResponse & BulkCreateFulfillmentResponseNonNullableFields>;

export { type ActionEvent, type ApplicationError, type BaseEventMetadata, type BulkActionMetadata, type BulkCreateFulfillmentRequest, type BulkCreateFulfillmentResponse, type BulkCreateFulfillmentResponseNonNullableFields, type BulkCreateOrderWithFulfillments, type BulkOrderFulfillmentsResult, type BuyerInfo, type CreateFulfillmentRequest, type CreateFulfillmentResponse, type CreateFulfillmentResponseNonNullableFields, type CustomFulfillmentInfo, type DeleteFulfillmentIdentifiers, type DeleteFulfillmentRequest, type DeleteFulfillmentResponse, type DeleteFulfillmentResponseNonNullableFields, type DomainEvent, type DomainEventBodyOneOf, type EntityCreatedEvent, type EntityDeletedEvent, type EntityUpdatedEvent, type EventMetadata, type Fulfillment, type FulfillmentCreated, type FulfillmentDeleted, type FulfillmentFulfillmentInfoOneOf, type FulfillmentLineItem, FulfillmentStatus, type FulfillmentTrackingInfo, type FulfillmentUpdated, type FulfillmentsUpdatedEnvelope, type IdentificationData, type IdentificationDataIdOneOf, IdentityType, type ItemMetadata, type ListFulfillmentsForMultipleOrdersRequest, type ListFulfillmentsForMultipleOrdersResponse, type ListFulfillmentsForMultipleOrdersResponseNonNullableFields, type ListFulfillmentsForSingleOrderRequest, type ListFulfillmentsForSingleOrderResponse, type ListFulfillmentsForSingleOrderResponseNonNullableFields, type MessageEnvelope, type OrderWithFulfillments, type OrderWithFulfillmentsNonNullableFields, type RestoreInfo, type UpdateFulfillmentIdentifiers, type UpdateFulfillmentOptions, type UpdateFulfillmentRequest, type UpdateFulfillmentResponse, type UpdateFulfillmentResponseNonNullableFields, type V2FulfillmentTrackingInfo, WebhookIdentityType, bulkCreateFulfillments, createFulfillment, deleteFulfillment, listFulfillmentsForMultipleOrders, listFulfillmentsForSingleOrder, onFulfillmentsUpdated, updateFulfillment };
