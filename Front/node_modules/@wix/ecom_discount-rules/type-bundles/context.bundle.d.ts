type HostModule<T, H extends Host> = {
    __type: 'host';
    create(host: H): T;
};
type HostModuleAPI<T extends HostModule<any, any>> = T extends HostModule<infer U, any> ? U : never;
type Host<Environment = unknown> = {
    channel: {
        observeState(callback: (props: unknown, environment: Environment) => unknown): {
            disconnect: () => void;
        } | Promise<{
            disconnect: () => void;
        }>;
    };
    environment?: Environment;
    /**
     * Optional name of the environment, use for logging
     */
    name?: string;
    /**
     * Optional bast url to use for API requests, for example `www.wixapis.com`
     */
    apiBaseUrl?: string;
    /**
     * Possible data to be provided by every host, for cross cutting concerns
     * like internationalization, billing, etc.
     */
    essentials?: {
        /**
         * The language of the currently viewed session
         */
        language?: string;
        /**
         * The locale of the currently viewed session
         */
        locale?: string;
        /**
         * Any headers that should be passed through to the API requests
         */
        passThroughHeaders?: Record<string, string>;
    };
};

type RESTFunctionDescriptor<T extends (...args: any[]) => any = (...args: any[]) => any> = (httpClient: HttpClient) => T;
interface HttpClient {
    request<TResponse, TData = any>(req: RequestOptionsFactory<TResponse, TData>): Promise<HttpResponse<TResponse>>;
    fetchWithAuth: typeof fetch;
    wixAPIFetch: (relativeUrl: string, options: RequestInit) => Promise<Response>;
    getActiveToken?: () => string | undefined;
}
type RequestOptionsFactory<TResponse = any, TData = any> = (context: any) => RequestOptions<TResponse, TData>;
type HttpResponse<T = any> = {
    data: T;
    status: number;
    statusText: string;
    headers: any;
    request?: any;
};
type RequestOptions<_TResponse = any, Data = any> = {
    method: 'POST' | 'GET' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS';
    url: string;
    data?: Data;
    params?: URLSearchParams;
} & APIMetadata;
type APIMetadata = {
    methodFqn?: string;
    entityFqdn?: string;
    packageName?: string;
};
type BuildRESTFunction<T extends RESTFunctionDescriptor> = T extends RESTFunctionDescriptor<infer U> ? U : never;
type EventDefinition<Payload = unknown, Type extends string = string> = {
    __type: 'event-definition';
    type: Type;
    isDomainEvent?: boolean;
    transformations?: (envelope: unknown) => Payload;
    __payload: Payload;
};
declare function EventDefinition<Type extends string>(type: Type, isDomainEvent?: boolean, transformations?: (envelope: any) => unknown): <Payload = unknown>() => EventDefinition<Payload, Type>;
type EventHandler<T extends EventDefinition> = (payload: T['__payload']) => void | Promise<void>;
type BuildEventDefinition<T extends EventDefinition<any, string>> = (handler: EventHandler<T>) => void;

type ServicePluginMethodInput = {
    request: any;
    metadata: any;
};
type ServicePluginContract = Record<string, (payload: ServicePluginMethodInput) => unknown | Promise<unknown>>;
type ServicePluginMethodMetadata = {
    name: string;
    primaryHttpMappingPath: string;
    transformations: {
        fromREST: (...args: unknown[]) => ServicePluginMethodInput;
        toREST: (...args: unknown[]) => unknown;
    };
};
type ServicePluginDefinition<Contract extends ServicePluginContract> = {
    __type: 'service-plugin-definition';
    componentType: string;
    methods: ServicePluginMethodMetadata[];
    __contract: Contract;
};
declare function ServicePluginDefinition<Contract extends ServicePluginContract>(componentType: string, methods: ServicePluginMethodMetadata[]): ServicePluginDefinition<Contract>;
type BuildServicePluginDefinition<T extends ServicePluginDefinition<any>> = (implementation: T['__contract']) => void;
declare const SERVICE_PLUGIN_ERROR_TYPE = "wix_spi_error";

type RequestContext = {
    isSSR: boolean;
    host: string;
    protocol?: string;
};
type ResponseTransformer = (data: any, headers?: any) => any;
/**
 * Ambassador request options types are copied mostly from AxiosRequestConfig.
 * They are copied and not imported to reduce the amount of dependencies (to reduce install time).
 * https://github.com/axios/axios/blob/3f53eb6960f05a1f88409c4b731a40de595cb825/index.d.ts#L307-L315
 */
type Method = 'get' | 'GET' | 'delete' | 'DELETE' | 'head' | 'HEAD' | 'options' | 'OPTIONS' | 'post' | 'POST' | 'put' | 'PUT' | 'patch' | 'PATCH' | 'purge' | 'PURGE' | 'link' | 'LINK' | 'unlink' | 'UNLINK';
type AmbassadorRequestOptions<T = any> = {
    _?: T;
    url?: string;
    method?: Method;
    params?: any;
    data?: any;
    transformResponse?: ResponseTransformer | ResponseTransformer[];
};
type AmbassadorFactory<Request, Response> = (payload: Request) => ((context: RequestContext) => AmbassadorRequestOptions<Response>) & {
    __isAmbassador: boolean;
};
type AmbassadorFunctionDescriptor<Request = any, Response = any> = AmbassadorFactory<Request, Response>;
type BuildAmbassadorFunction<T extends AmbassadorFunctionDescriptor> = T extends AmbassadorFunctionDescriptor<infer Request, infer Response> ? (req: Request) => Promise<Response> : never;

declare global {
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- It has to be an `interface` so that it can be merged.
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}

declare const emptyObjectSymbol: unique symbol;

/**
Represents a strictly empty plain object, the `{}` value.

When you annotate something as the type `{}`, it can be anything except `null` and `undefined`. This means that you cannot use `{}` to represent an empty plain object ([read more](https://stackoverflow.com/questions/47339869/typescript-empty-object-and-any-difference/52193484#52193484)).

@example
```
import type {EmptyObject} from 'type-fest';

// The following illustrates the problem with `{}`.
const foo1: {} = {}; // Pass
const foo2: {} = []; // Pass
const foo3: {} = 42; // Pass
const foo4: {} = {a: 1}; // Pass

// With `EmptyObject` only the first case is valid.
const bar1: EmptyObject = {}; // Pass
const bar2: EmptyObject = 42; // Fail
const bar3: EmptyObject = []; // Fail
const bar4: EmptyObject = {a: 1}; // Fail
```

Unfortunately, `Record<string, never>`, `Record<keyof any, never>` and `Record<never, never>` do not work. See {@link https://github.com/sindresorhus/type-fest/issues/395 #395}.

@category Object
*/
type EmptyObject = {[emptyObjectSymbol]?: never};

/**
Returns a boolean for whether the two given types are equal.

@link https://github.com/microsoft/TypeScript/issues/27024#issuecomment-421529650
@link https://stackoverflow.com/questions/68961864/how-does-the-equals-work-in-typescript/68963796#68963796

Use-cases:
- If you want to make a conditional branch based on the result of a comparison of two types.

@example
```
import type {IsEqual} from 'type-fest';

// This type returns a boolean for whether the given array includes the given item.
// `IsEqual` is used to compare the given array at position 0 and the given item and then return true if they are equal.
type Includes<Value extends readonly any[], Item> =
	Value extends readonly [Value[0], ...infer rest]
		? IsEqual<Value[0], Item> extends true
			? true
			: Includes<rest, Item>
		: false;
```

@category Type Guard
@category Utilities
*/
type IsEqual<A, B> =
	(<G>() => G extends A ? 1 : 2) extends
	(<G>() => G extends B ? 1 : 2)
		? true
		: false;

/**
Filter out keys from an object.

Returns `never` if `Exclude` is strictly equal to `Key`.
Returns `never` if `Key` extends `Exclude`.
Returns `Key` otherwise.

@example
```
type Filtered = Filter<'foo', 'foo'>;
//=> never
```

@example
```
type Filtered = Filter<'bar', string>;
//=> never
```

@example
```
type Filtered = Filter<'bar', 'foo'>;
//=> 'bar'
```

@see {Except}
*/
type Filter<KeyType, ExcludeType> = IsEqual<KeyType, ExcludeType> extends true ? never : (KeyType extends ExcludeType ? never : KeyType);

type ExceptOptions = {
	/**
	Disallow assigning non-specified properties.

	Note that any omitted properties in the resulting type will be present in autocomplete as `undefined`.

	@default false
	*/
	requireExactProps?: boolean;
};

/**
Create a type from an object type without certain keys.

We recommend setting the `requireExactProps` option to `true`.

This type is a stricter version of [`Omit`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-5.html#the-omit-helper-type). The `Omit` type does not restrict the omitted keys to be keys present on the given type, while `Except` does. The benefits of a stricter type are avoiding typos and allowing the compiler to pick up on rename refactors automatically.

This type was proposed to the TypeScript team, which declined it, saying they prefer that libraries implement stricter versions of the built-in types ([microsoft/TypeScript#30825](https://github.com/microsoft/TypeScript/issues/30825#issuecomment-523668235)).

@example
```
import type {Except} from 'type-fest';

type Foo = {
	a: number;
	b: string;
};

type FooWithoutA = Except<Foo, 'a'>;
//=> {b: string}

const fooWithoutA: FooWithoutA = {a: 1, b: '2'};
//=> errors: 'a' does not exist in type '{ b: string; }'

type FooWithoutB = Except<Foo, 'b', {requireExactProps: true}>;
//=> {a: number} & Partial<Record<"b", never>>

const fooWithoutB: FooWithoutB = {a: 1, b: '2'};
//=> errors at 'b': Type 'string' is not assignable to type 'undefined'.
```

@category Object
*/
type Except<ObjectType, KeysType extends keyof ObjectType, Options extends ExceptOptions = {requireExactProps: false}> = {
	[KeyType in keyof ObjectType as Filter<KeyType, KeysType>]: ObjectType[KeyType];
} & (Options['requireExactProps'] extends true
	? Partial<Record<KeysType, never>>
	: {});

/**
Returns a boolean for whether the given type is `never`.

@link https://github.com/microsoft/TypeScript/issues/31751#issuecomment-498526919
@link https://stackoverflow.com/a/53984913/10292952
@link https://www.zhenghao.io/posts/ts-never

Useful in type utilities, such as checking if something does not occur.

@example
```
import type {IsNever, And} from 'type-fest';

// https://github.com/andnp/SimplyTyped/blob/master/src/types/strings.ts
type AreStringsEqual<A extends string, B extends string> =
	And<
		IsNever<Exclude<A, B>> extends true ? true : false,
		IsNever<Exclude<B, A>> extends true ? true : false
	>;

type EndIfEqual<I extends string, O extends string> =
	AreStringsEqual<I, O> extends true
		? never
		: void;

function endIfEqual<I extends string, O extends string>(input: I, output: O): EndIfEqual<I, O> {
	if (input === output) {
		process.exit(0);
	}
}

endIfEqual('abc', 'abc');
//=> never

endIfEqual('abc', '123');
//=> void
```

@category Type Guard
@category Utilities
*/
type IsNever<T> = [T] extends [never] ? true : false;

/**
An if-else-like type that resolves depending on whether the given type is `never`.

@see {@link IsNever}

@example
```
import type {IfNever} from 'type-fest';

type ShouldBeTrue = IfNever<never>;
//=> true

type ShouldBeBar = IfNever<'not never', 'foo', 'bar'>;
//=> 'bar'
```

@category Type Guard
@category Utilities
*/
type IfNever<T, TypeIfNever = true, TypeIfNotNever = false> = (
	IsNever<T> extends true ? TypeIfNever : TypeIfNotNever
);

/**
Extract the keys from a type where the value type of the key extends the given `Condition`.

Internally this is used for the `ConditionalPick` and `ConditionalExcept` types.

@example
```
import type {ConditionalKeys} from 'type-fest';

interface Example {
	a: string;
	b: string | number;
	c?: string;
	d: {};
}

type StringKeysOnly = ConditionalKeys<Example, string>;
//=> 'a'
```

To support partial types, make sure your `Condition` is a union of undefined (for example, `string | undefined`) as demonstrated below.

@example
```
import type {ConditionalKeys} from 'type-fest';

type StringKeysAndUndefined = ConditionalKeys<Example, string | undefined>;
//=> 'a' | 'c'
```

@category Object
*/
type ConditionalKeys<Base, Condition> =
{
	// Map through all the keys of the given base type.
	[Key in keyof Base]-?:
	// Pick only keys with types extending the given `Condition` type.
	Base[Key] extends Condition
	// Retain this key
	// If the value for the key extends never, only include it if `Condition` also extends never
		? IfNever<Base[Key], IfNever<Condition, Key, never>, Key>
	// Discard this key since the condition fails.
		: never;
	// Convert the produced object into a union type of the keys which passed the conditional test.
}[keyof Base];

/**
Exclude keys from a shape that matches the given `Condition`.

This is useful when you want to create a new type with a specific set of keys from a shape. For example, you might want to exclude all the primitive properties from a class and form a new shape containing everything but the primitive properties.

@example
```
import type {Primitive, ConditionalExcept} from 'type-fest';

class Awesome {
	name: string;
	successes: number;
	failures: bigint;

	run() {}
}

type ExceptPrimitivesFromAwesome = ConditionalExcept<Awesome, Primitive>;
//=> {run: () => void}
```

@example
```
import type {ConditionalExcept} from 'type-fest';

interface Example {
	a: string;
	b: string | number;
	c: () => void;
	d: {};
}

type NonStringKeysOnly = ConditionalExcept<Example, string>;
//=> {b: string | number; c: () => void; d: {}}
```

@category Object
*/
type ConditionalExcept<Base, Condition> = Except<
Base,
ConditionalKeys<Base, Condition>
>;

/**
 * Descriptors are objects that describe the API of a module, and the module
 * can either be a REST module or a host module.
 * This type is recursive, so it can describe nested modules.
 */
type Descriptors = RESTFunctionDescriptor | AmbassadorFunctionDescriptor | HostModule<any, any> | EventDefinition<any> | ServicePluginDefinition<any> | {
    [key: string]: Descriptors | PublicMetadata | any;
};
/**
 * This type takes in a descriptors object of a certain Host (including an `unknown` host)
 * and returns an object with the same structure, but with all descriptors replaced with their API.
 * Any non-descriptor properties are removed from the returned object, including descriptors that
 * do not match the given host (as they will not work with the given host).
 */
type BuildDescriptors<T extends Descriptors, H extends Host<any> | undefined, Depth extends number = 5> = {
    done: T;
    recurse: T extends {
        __type: typeof SERVICE_PLUGIN_ERROR_TYPE;
    } ? never : T extends AmbassadorFunctionDescriptor ? BuildAmbassadorFunction<T> : T extends RESTFunctionDescriptor ? BuildRESTFunction<T> : T extends EventDefinition<any> ? BuildEventDefinition<T> : T extends ServicePluginDefinition<any> ? BuildServicePluginDefinition<T> : T extends HostModule<any, any> ? HostModuleAPI<T> : ConditionalExcept<{
        [Key in keyof T]: T[Key] extends Descriptors ? BuildDescriptors<T[Key], H, [
            -1,
            0,
            1,
            2,
            3,
            4,
            5
        ][Depth]> : never;
    }, EmptyObject>;
}[Depth extends -1 ? 'done' : 'recurse'];
type PublicMetadata = {
    PACKAGE_NAME?: string;
};

declare global {
    interface ContextualClient {
    }
}
/**
 * A type used to create concerete types from SDK descriptors in
 * case a contextual client is available.
 */
type MaybeContext<T extends Descriptors> = globalThis.ContextualClient extends {
    host: Host;
} ? BuildDescriptors<T, globalThis.ContextualClient['host']> : T;

interface DiscountRule {
    /**
     * Discount rule ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the discount rule is updated.
     * To prevent conflicting changes, the current `revision` must be passed when updating the discount rule.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the discount rule was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the discount rule was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Whether the discount rule is active.
     *
     * Default: `true`
     */
    active?: boolean | null;
    /** Discount rule name. */
    name?: string | null;
    /**
     * Discount rule trigger.
     * A set of conditions that must be met for the `discounts` to be applied.
     * Not passing a trigger will cause the discount to always apply.
     */
    trigger?: DiscountTrigger;
    /** Time frame in which the discount rule is active. */
    activeTimeInfo?: ActiveTimeInfo;
    /**
     * List of discounts that are applied when one or more triggers are met.
     *
     * > **Notes:**
     * >
     * > + Currently, only 1 discount can be defined per discount rule.
     * > + A discount rule can be applied on multiple items per cart.
     * > + A discount rule can only be applied once per item.
     */
    discounts?: Discounts;
    /**
     * Discount rule status.
     * @readonly
     */
    status?: Status;
    /**
     * Number of times the discount rule was used.
     * @readonly
     */
    usageCount?: number;
}
/** DiscountTrigger - description of a set of conditions, that if met, will trigger the associated rule actions */
interface DiscountTrigger extends DiscountTriggerTriggerOneOf {
    /** Chain multiple triggers with the `and` operator. */
    and?: And;
    /** Chain multiple triggers with the `or` operator. */
    or?: Or;
    /** Custom trigger. */
    customTrigger?: Custom;
    /** Subtotal trigger range. */
    subtotalRange?: SubtotalRange;
    /** Item quantity trigger range. */
    itemQuantityRange?: ItemQuantityRange;
    /**
     * Trigger type.
     *
     * + `"AND"`: Operator used for chaining multiple triggers. Currently 1 `"AND"` chain operator is supported.
     * + `"SUBTOTAL_RANGE"`: Subtotal must be within the specified `subtotalRange` values.
     * + `"ITEM_QUANTITY_RANGE"`: Quantity of items in scope must be within specified `itemQuantityRange` values.
     * + `"CUSTOM"`: Custom trigger type defined in `customTrigger` object.
     */
    triggerType?: TriggerType;
}
/** @oneof */
interface DiscountTriggerTriggerOneOf {
    /** Chain multiple triggers with the `and` operator. */
    and?: And;
    /** Chain multiple triggers with the `or` operator. */
    or?: Or;
    /** Custom trigger. */
    customTrigger?: Custom;
    /** Subtotal trigger range. */
    subtotalRange?: SubtotalRange;
    /** Item quantity trigger range. */
    itemQuantityRange?: ItemQuantityRange;
}
/**
 * This object represents a scope of catalog items. Examples:
 * 1. All catalog items of a specific app - type = CATALOG_ITEM, CatalogItemFilter with `catalog_app_id`
 * 2. Specific catalog item - type = CATALOG_ITEM, CatalogItemFilter with `catalog_app_id` + `catalog_item_ids`
 * 3. External catalog filter - type = CUSTOM_FILTER, CustomFilter with 'app_id' + 'params'
 */
interface Scope extends ScopeScopeItemsOneOf {
    /** Catalog item filter. Must be passed with `type."CATALOG_ITEM"`. */
    catalogItemFilter?: CatalogItemFilter;
    /** Custom filter. Must be passed with `type."CATALOG_ITEM"`. */
    customFilter?: CustomFilter;
    /** Scope ID. */
    _id?: string;
    /** Scope type. */
    type?: ScopeType;
}
/** @oneof */
interface ScopeScopeItemsOneOf {
    /** Catalog item filter. Must be passed with `type."CATALOG_ITEM"`. */
    catalogItemFilter?: CatalogItemFilter;
    /** Custom filter. Must be passed with `type."CATALOG_ITEM"`. */
    customFilter?: CustomFilter;
}
declare enum ScopeType {
    UNDEFINED_SCOPE = "UNDEFINED_SCOPE",
    /** Specific catalog items */
    CATALOG_ITEM = "CATALOG_ITEM",
    /** Specific items by custom filters */
    CUSTOM_FILTER = "CUSTOM_FILTER"
}
interface CatalogItemFilter {
    /** Catalog App ID. For example, the Wix Stores, Wix Bookings, or 3rd-party `appId`. */
    catalogAppId?: string;
    /** ID of the item within its Wix or 3rd-party catalog. For example, `productId` for Wix Stores. */
    catalogItemIds?: string[];
}
interface CustomFilter {
    /** Custom filter app ID, when relevant. */
    appId?: string;
    /**
     * Custom filter in `{ "key": "value" }` form.
     * For example, an array of `collectionIDs`:
     * `{ ["collectionId": "12345"], ["collectionId": "67890"] }`.
     */
    params?: Record<string, any> | null;
}
interface And {
    /** List of triggers to have an "AND" operator between their results. */
    triggers?: DiscountTrigger[];
}
interface Or {
    /** List of triggers to have an "OR" operator between their results. */
    triggers?: DiscountTrigger[];
}
interface Custom {
    /** Trigger ID. */
    _id?: string;
    /** ID of the app that created the trigger. */
    appId?: string;
}
interface SubtotalRange {
    /** Relevant scopes for `"SPECIFIC_ITEMS"` target type. */
    scopes?: Scope[];
    /** Minimum subtotal price (inclusive). */
    from?: string | null;
    /** Maximum subtotal price (inclusive). */
    to?: string | null;
}
interface ItemQuantityRange {
    /** Relevant scopes for `"SPECIFIC_ITEMS"` target type. */
    scopes?: Scope[];
    /** Minimum item quantity (inclusive). */
    from?: number | null;
    /** Maximum item quantity (inclusive). */
    to?: number | null;
}
declare enum TriggerType {
    UNDEFINED = "UNDEFINED",
    /** Chain multiple triggers with AND operator */
    AND = "AND",
    /** Subtotal range trigger */
    SUBTOTAL_RANGE = "SUBTOTAL_RANGE",
    /** Item quantity range trigger */
    ITEM_QUANTITY_RANGE = "ITEM_QUANTITY_RANGE",
    /** Custom trigger, see Custom Triggers SPI for more details */
    CUSTOM = "CUSTOM",
    /** Chain multiple triggers with OR operator */
    OR = "OR"
}
interface ActiveTimeInfo {
    /** Date and time the discount rule is active **from**, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    start?: Date | null;
    /** Date and time the discount rule is active **till**, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    end?: Date | null;
}
interface Discounts {
    /** Discounts. */
    values?: Discount[];
}
interface Discount extends DiscountDiscountOneOf {
    /** Percentage to discount from original price. */
    percentage?: number;
    /** Amount to discount from original price. */
    fixedAmount?: string;
    /** Fixed price. Line item will be fixed to this price. */
    fixedPrice?: string;
    /**
     * Discount target.
     *
     * + `"SPECIFIC_ITEMS"`: Discount applies to a specific set of items.
     */
    targetType?: Type;
    /** Data related to `"SPECIFIC_ITEMS"` target type. */
    specificItemsInfo?: SpecificItemsInfo;
    /**
     * Discount type.
     *
     * + `"PERCENTAGE"`: Price is reduced by percentage value.
     * + `"FIXED_AMOUNT"`: Price is reduced by fixed amount.
     * + `"FIXED_PRICE"`: Price will be set to fixed amount.
     */
    discountType?: DiscountType;
}
/** @oneof */
interface DiscountDiscountOneOf {
    /** Percentage to discount from original price. */
    percentage?: number;
    /** Amount to discount from original price. */
    fixedAmount?: string;
    /** Fixed price. Line item will be fixed to this price. */
    fixedPrice?: string;
}
declare enum Type {
    /** Target type is not defined */
    UNDEFINED = "UNDEFINED",
    /** Target type is a set of specific items */
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS"
}
interface SpecificItemsInfo {
    /** All associated scopes for `"SPECIFIC_ITEMS"` target type. */
    scopes?: Scope[];
}
declare enum DiscountType {
    UNDEFINED = "UNDEFINED",
    /** Percentage discount */
    PERCENTAGE = "PERCENTAGE",
    /** Fixed amount discount */
    FIXED_AMOUNT = "FIXED_AMOUNT",
    /** Fixed price discount */
    FIXED_PRICE = "FIXED_PRICE"
}
interface BuyXGetYInfo {
    /** Information about which items must be in the cart (buy X) for the discount to apply (get Y). */
    customerBuys?: CustomerBuy;
    /** Information about which items will be discounted (get Y). */
    customerGets?: CustomerGet;
    /**
     * The maximum number of times the 'buy X get Y' discount can be applied.
     * For example, when the value of `limit` is `2`, with a "2+1" sale on all items, the following logic applies:
     * + Buy 2 get 1, buy 3 get 1.
     * + Buy 4 get 2, buy 6 get 2, buy 9 get 2, and so on.
     */
    limit?: number | null;
}
interface CustomerBuy extends CustomerBuyConditionOneOf {
    /** Minimum number of items the customer must add to the cart to be eligible for a discount. */
    minimumQuantity?: number;
    /** Minimum price the customer must add to the cart to be eligible for a discount. */
    minimumSpend?: string | null;
    /** Scopes of the items that must be added to the cart to enable the discount. */
    scopes?: Scope[];
}
/** @oneof */
interface CustomerBuyConditionOneOf {
    /** Minimum number of items the customer must add to the cart to be eligible for a discount. */
    minimumQuantity?: number;
    /** Minimum price the customer must add to the cart to be eligible for a discount. */
    minimumSpend?: string | null;
}
interface CustomerGet {
    /**
     * Exact number of items in the cart that will be discounted.
     * If the cart contains fewer items than the value of quantity, the discount will not apply.
     */
    quantity?: number;
    /** Scopes of the items that will be discounted. */
    scopes?: Scope[];
}
declare enum Status {
    /** Rule status is not defined. */
    UNDEFINED = "UNDEFINED",
    /** Rule status is live. */
    LIVE = "LIVE",
    /** Rule status is expired, it might have been live in the past. */
    EXPIRED = "EXPIRED",
    /** Rule status is pending, it might be live in the future. */
    PENDING = "PENDING"
}
/** The discount settings */
interface DiscountSettings {
    /** Discount applies to either `ALL_ITEMS`, or to the `LOWEST_PRICED_ITEM`. */
    appliesTo?: AppliedSubjectType;
    /**
     * Whether the discount will apply to subscriptions.
     *
     * Default: `false`
     */
    includeSubscription?: boolean | null;
    /** Maximum total number of uses allowed for the discount rule. */
    usageLimit?: number | null;
    /**
     * The usage limit per user per discount.
     * When not provided, this setting will not apply.
     */
    usageLimitPerUser?: number | null;
}
/** TODO: check if can be removed */
declare enum AppliedSubjectType {
    UNDEFINED = "UNDEFINED",
    /** Discount applies to all items at checkout. */
    ALL_ITEMS = "ALL_ITEMS",
    /** Discount applies to the lowest priced item at checkout. */
    LOWEST_PRICED_ITEM = "LOWEST_PRICED_ITEM"
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateDiscountRuleRequest {
    /** Discount rule info. */
    discountRule: DiscountRule;
}
interface CreateDiscountRuleResponse {
    /** Discount rule. */
    discountRule?: DiscountRule;
}
interface GetDiscountRuleRequest {
    /** ID of the discount rule to retrieve. */
    discountRuleId: string;
}
interface GetDiscountRuleResponse {
    /** The requested discount rule. */
    discountRule?: DiscountRule;
}
interface UpdateDiscountRuleRequest {
    /** Discount rule info. */
    discountRule: DiscountRule;
}
interface UpdateDiscountRuleResponse {
    /** Updated discount rule. */
    discountRule?: DiscountRule;
}
interface DeleteDiscountRuleRequest {
    /** ID of the discount rule to delete. */
    discountRuleId: string;
}
interface DeleteDiscountRuleResponse {
}
interface QueryDiscountRulesRequest {
    /** Query options. */
    query?: PlatformQuery;
}
interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface PlatformPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryDiscountRulesResponse {
    /** List of discount rules. */
    discountRules?: DiscountRule[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: PlatformPagingMetadata;
}
interface PlatformPagingMetadata {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetAppliedDiscountsRequest {
    /** Line items for which to check for discount rules. */
    lineItems?: LineItem[];
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}
interface LineItem {
    /** Line item ID. */
    _id?: string;
    /** Line item quantity. */
    quantity?: number | null;
    /** Catalog and item reference info. Learn more about [integrating Wix Stores products with Wix eCommerce](https://dev.wix.com/api/rest/wix-stores/catalog/ecommerce-integration). */
    catalogReference?: CatalogReference;
    /** Line item price. */
    price?: string;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface GetAppliedDiscountsResponse {
    /** All eligible discounts. */
    appliedDiscounts?: AppliedDiscount[];
}
interface AppliedDiscount {
    /** Discount type. */
    discountType?: Type;
    /** IDs of line items the discount applies to, in GUID format. */
    lineItemIds?: string[];
    /** Applied discount rule. */
    appliedDiscountRule?: AppliedDiscountRule;
}
interface AppliedDiscountRule {
    /** Applied discount rule ID. */
    _id?: string;
    /** Discount rule name. */
    name?: DiscountRuleName;
    /** Total amount reduced from all discounted line items. */
    amount?: MultiCurrencyPrice;
    /** Discount rule type. */
    discountRuleType?: DiscountType;
}
interface DiscountRuleName {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /**
     * Translated discount rule name according to buyer language.
     *
     * Default: `original`
     */
    translated?: string | null;
}
interface MultiCurrencyPrice {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface Empty {
}
interface DiscountRuleUsageLimitReached {
    /** Discount Rule */
    rule?: DiscountRule;
}
interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface AndNonNullableFields {
    triggers: DiscountTriggerNonNullableFields[];
}
interface OrNonNullableFields {
    triggers: DiscountTriggerNonNullableFields[];
}
interface CustomNonNullableFields {
    _id: string;
    appId: string;
}
interface CatalogItemFilterNonNullableFields {
    catalogAppId: string;
    catalogItemIds: string[];
}
interface CustomFilterNonNullableFields {
    appId: string;
}
interface ScopeNonNullableFields {
    catalogItemFilter?: CatalogItemFilterNonNullableFields;
    customFilter?: CustomFilterNonNullableFields;
    _id: string;
    type: ScopeType;
}
interface SubtotalRangeNonNullableFields {
    scopes: ScopeNonNullableFields[];
}
interface ItemQuantityRangeNonNullableFields {
    scopes: ScopeNonNullableFields[];
}
interface DiscountTriggerNonNullableFields {
    and?: AndNonNullableFields;
    or?: OrNonNullableFields;
    customTrigger?: CustomNonNullableFields;
    subtotalRange?: SubtotalRangeNonNullableFields;
    itemQuantityRange?: ItemQuantityRangeNonNullableFields;
    triggerType: TriggerType;
}
interface SpecificItemsInfoNonNullableFields {
    scopes: ScopeNonNullableFields[];
}
interface CustomerBuyNonNullableFields {
    minimumQuantity: number;
    scopes: ScopeNonNullableFields[];
}
interface CustomerGetNonNullableFields {
    quantity: number;
    scopes: ScopeNonNullableFields[];
}
interface BuyXGetYInfoNonNullableFields {
    customerBuys?: CustomerBuyNonNullableFields;
    customerGets?: CustomerGetNonNullableFields;
}
interface DiscountNonNullableFields {
    percentage: number;
    fixedAmount: string;
    fixedPrice: string;
    targetType: Type;
    specificItemsInfo?: SpecificItemsInfoNonNullableFields;
    discountType: DiscountType;
    buyXGetYInfo?: BuyXGetYInfoNonNullableFields;
}
interface DiscountsNonNullableFields {
    values: DiscountNonNullableFields[];
}
interface DiscountSettingsNonNullableFields {
    appliesTo: AppliedSubjectType;
}
interface DiscountRuleNonNullableFields {
    trigger?: DiscountTriggerNonNullableFields;
    discounts?: DiscountsNonNullableFields;
    status: Status;
    usageCount: number;
    settings?: DiscountSettingsNonNullableFields;
}
interface CreateDiscountRuleResponseNonNullableFields {
    discountRule?: DiscountRuleNonNullableFields;
}
interface GetDiscountRuleResponseNonNullableFields {
    discountRule?: DiscountRuleNonNullableFields;
}
interface UpdateDiscountRuleResponseNonNullableFields {
    discountRule?: DiscountRuleNonNullableFields;
}
interface QueryDiscountRulesResponseNonNullableFields {
    discountRules: DiscountRuleNonNullableFields[];
}
interface BaseEventMetadata {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface DiscountRuleCreatedEnvelope {
    entity: DiscountRule;
    metadata: EventMetadata;
}
interface DiscountRuleUpdatedEnvelope {
    entity: DiscountRule;
    metadata: EventMetadata;
}
interface DiscountRuleDeletedEnvelope {
    metadata: EventMetadata;
}
interface UpdateDiscountRule {
    /**
     * Discount rule ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the discount rule is updated.
     * To prevent conflicting changes, the current `revision` must be passed when updating the discount rule.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the discount rule was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the discount rule was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Whether the discount rule is active.
     *
     * Default: `true`
     */
    active?: boolean | null;
    /** Discount rule name. */
    name?: string | null;
    /**
     * Discount rule trigger.
     * A set of conditions that must be met for the `discounts` to be applied.
     * Not passing a trigger will cause the discount to always apply.
     */
    trigger?: DiscountTrigger;
    /** Time frame in which the discount rule is active. */
    activeTimeInfo?: ActiveTimeInfo;
    /**
     * List of discounts that are applied when one or more triggers are met.
     *
     * > **Notes:**
     * >
     * > + Currently, only 1 discount can be defined per discount rule.
     * > + A discount rule can be applied on multiple items per cart.
     * > + A discount rule can only be applied once per item.
     */
    discounts?: Discounts;
    /**
     * Discount rule status.
     * @readonly
     */
    status?: Status;
    /**
     * Number of times the discount rule was used.
     * @readonly
     */
    usageCount?: number;
}
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface DiscountRulesQueryResult extends QueryCursorResult {
    items: DiscountRule[];
    query: DiscountRulesQueryBuilder;
    next: () => Promise<DiscountRulesQueryResult>;
    prev: () => Promise<DiscountRulesQueryResult>;
}
interface DiscountRulesQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    eq: (propertyName: '_id' | 'revision' | '_createdDate' | '_updatedDate' | 'active' | 'name' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: any) => DiscountRulesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ne: (propertyName: '_id' | 'revision' | '_createdDate' | '_updatedDate' | 'active' | 'name' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: any) => DiscountRulesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ge: (propertyName: 'revision' | '_createdDate' | '_updatedDate' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: any) => DiscountRulesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    gt: (propertyName: 'revision' | '_createdDate' | '_updatedDate' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: any) => DiscountRulesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    le: (propertyName: 'revision' | '_createdDate' | '_updatedDate' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: any) => DiscountRulesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    lt: (propertyName: 'revision' | '_createdDate' | '_updatedDate' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: any) => DiscountRulesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     */
    startsWith: (propertyName: '_id' | 'name', value: string) => DiscountRulesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     */
    hasSome: (propertyName: '_id' | 'revision' | '_createdDate' | '_updatedDate' | 'active' | 'name' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: any[]) => DiscountRulesQueryBuilder;
    in: (propertyName: '_id' | 'revision' | '_createdDate' | '_updatedDate' | 'active' | 'name' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: any) => DiscountRulesQueryBuilder;
    exists: (propertyName: '_id' | 'revision' | '_createdDate' | '_updatedDate' | 'active' | 'name' | 'activeTimeInfo.start' | 'activeTimeInfo.end', value: boolean) => DiscountRulesQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    ascending: (...propertyNames: Array<'_id' | 'revision' | '_createdDate' | '_updatedDate' | 'active' | 'name' | 'activeTimeInfo.start' | 'activeTimeInfo.end'>) => DiscountRulesQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    descending: (...propertyNames: Array<'_id' | 'revision' | '_createdDate' | '_updatedDate' | 'active' | 'name' | 'activeTimeInfo.start' | 'activeTimeInfo.end'>) => DiscountRulesQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object. */
    limit: (limit: number) => DiscountRulesQueryBuilder;
    /** @param cursor - A pointer to specific record */
    skipTo: (cursor: string) => DiscountRulesQueryBuilder;
    find: () => Promise<DiscountRulesQueryResult>;
}

declare function createDiscountRule$1(httpClient: HttpClient): CreateDiscountRuleSignature;
interface CreateDiscountRuleSignature {
    /**
     * Creates a new discount rule.
     *
     *
     * The `createDiscountRule()` function returns a Promise that resolves to the new discount rule when it's created.
     * @param - Discount rule info.
     * @returns Discount rule.
     */
    (discountRule: DiscountRule): Promise<DiscountRule & DiscountRuleNonNullableFields>;
}
declare function getDiscountRule$1(httpClient: HttpClient): GetDiscountRuleSignature;
interface GetDiscountRuleSignature {
    /**
     * Retrieves a discount rule.
     *
     *
     * The `getDiscountRule()` function returns a Promise that resolves when the specified discount rule is retrieved.
     * @param - ID of the discount rule to retrieve.
     * @returns The requested discount rule.
     */
    (discountRuleId: string): Promise<DiscountRule & DiscountRuleNonNullableFields>;
}
declare function updateDiscountRule$1(httpClient: HttpClient): UpdateDiscountRuleSignature;
interface UpdateDiscountRuleSignature {
    /**
     * Updates a discount rule's properties.
     *
     *
     * The `updateDiscountRule()` function returns a Promise that resolves when the specified discount rule's properties are updated.
     *
     * Each time the discount rule is updated, `revision` increments by 1. The existing `revision` must be included when updating the discount rule. This ensures you're working with the latest discount rule information, and it prevents unintended overwrites.
     * @param - Discount rule ID.
     * @param - Discount rule info.
     * @param - Discount rule info.
     * @returns Updated discount rule.
     */
    (_id: string | null, discountRule: UpdateDiscountRule): Promise<DiscountRule & DiscountRuleNonNullableFields>;
}
declare function deleteDiscountRule$1(httpClient: HttpClient): DeleteDiscountRuleSignature;
interface DeleteDiscountRuleSignature {
    /**
     * Deletes a discount rule.
     *
     *
     * The `deleteDiscountRule()` function returns a Promise that resolves when the specified discount rule is deleted.
     * @param - ID of the discount rule to delete.
     */
    (discountRuleId: string): Promise<void>;
}
declare function queryDiscountRules$1(httpClient: HttpClient): QueryDiscountRulesSignature;
interface QueryDiscountRulesSignature {
    /**
     * Creates a query to retrieve a list of discount rules.
     *
     *
     * The `queryDiscountRules()` function builds a query to retrieve a list of up to 100 discount rules, and returns a [`DiscountRulesQueryBuilder`](#discountrulesquerybuilder) object.
     *
     * The returned object contains the query definition which is typically used to run the query using the [`find()`](/discount-rules/discount-rules-query-builder/find) function.
     *
     * You can refine the query by chaining `DiscountRulesQueryBuilder` functions onto the query. `DiscountRulesQueryBuilder` functions enable you to sort, filter, and control the results queryDiscountRules() returns.
     *
     * By default, `queryDiscountRules()` sorts results by [`ascending("_id")`](/discount-rules/discount-rules-query-builder/ascending) by default. This can be overridden.
     *
     * To learn how to query posts, refer to the table below.
     *
     * The following `DiscountRulesQueryBuilder` functions are supported for the `queryDiscountRules()` function. For a full description of the discount rule object, see the object returned for the [`items`](/discount-rules/discount-rules-query-result/items) property in the `DiscountRulesQueryResult`.
     */
    (): DiscountRulesQueryBuilder;
}
declare const onDiscountRuleCreated$1: EventDefinition<DiscountRuleCreatedEnvelope, "wix.ecom.discounts.v1.discount_rule_created">;
declare const onDiscountRuleUpdated$1: EventDefinition<DiscountRuleUpdatedEnvelope, "wix.ecom.discounts.v1.discount_rule_updated">;
declare const onDiscountRuleDeleted$1: EventDefinition<DiscountRuleDeletedEnvelope, "wix.ecom.discounts.v1.discount_rule_deleted">;

declare function createEventModule<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createDiscountRule: MaybeContext<BuildRESTFunction<typeof createDiscountRule$1> & typeof createDiscountRule$1>;
declare const getDiscountRule: MaybeContext<BuildRESTFunction<typeof getDiscountRule$1> & typeof getDiscountRule$1>;
declare const updateDiscountRule: MaybeContext<BuildRESTFunction<typeof updateDiscountRule$1> & typeof updateDiscountRule$1>;
declare const deleteDiscountRule: MaybeContext<BuildRESTFunction<typeof deleteDiscountRule$1> & typeof deleteDiscountRule$1>;
declare const queryDiscountRules: MaybeContext<BuildRESTFunction<typeof queryDiscountRules$1> & typeof queryDiscountRules$1>;

type _publicOnDiscountRuleCreatedType = typeof onDiscountRuleCreated$1;
/**
 * Triggered when a discount rule is created.
 */
declare const onDiscountRuleCreated: ReturnType<typeof createEventModule<_publicOnDiscountRuleCreatedType>>;

type _publicOnDiscountRuleUpdatedType = typeof onDiscountRuleUpdated$1;
/**
 * Triggered when a discount rule is updated.
 */
declare const onDiscountRuleUpdated: ReturnType<typeof createEventModule<_publicOnDiscountRuleUpdatedType>>;

type _publicOnDiscountRuleDeletedType = typeof onDiscountRuleDeleted$1;
/**
 * Triggered when a discount rule is deleted.
 */
declare const onDiscountRuleDeleted: ReturnType<typeof createEventModule<_publicOnDiscountRuleDeletedType>>;

export { type ActionEvent, type ActiveTimeInfo, type And, type AppliedDiscount, type AppliedDiscountRule, AppliedSubjectType, type BaseEventMetadata, type BuyXGetYInfo, type CatalogItemFilter, type CatalogReference, type CreateDiscountRuleRequest, type CreateDiscountRuleResponse, type CreateDiscountRuleResponseNonNullableFields, type CursorPaging, type Cursors, type Custom, type CustomFilter, type CustomerBuy, type CustomerBuyConditionOneOf, type CustomerGet, type DeleteDiscountRuleRequest, type DeleteDiscountRuleResponse, type Discount, type DiscountDiscountOneOf, type DiscountRule, type DiscountRuleCreatedEnvelope, type DiscountRuleDeletedEnvelope, type DiscountRuleName, type DiscountRuleNonNullableFields, type DiscountRuleUpdatedEnvelope, type DiscountRuleUsageLimitReached, type DiscountRulesQueryBuilder, type DiscountRulesQueryResult, type DiscountSettings, type DiscountTrigger, type DiscountTriggerTriggerOneOf, DiscountType, type Discounts, type DomainEvent, type DomainEventBodyOneOf, type Empty, type EntityCreatedEvent, type EntityDeletedEvent, type EntityUpdatedEvent, type EventMetadata, type ExtendedFields, type GetAppliedDiscountsRequest, type GetAppliedDiscountsResponse, type GetDiscountRuleRequest, type GetDiscountRuleResponse, type GetDiscountRuleResponseNonNullableFields, type IdentificationData, type IdentificationDataIdOneOf, type ItemQuantityRange, type LineItem, type MessageEnvelope, type MultiCurrencyPrice, type Or, type PlatformPaging, type PlatformPagingMetadata, type PlatformQuery, type PlatformQueryPagingMethodOneOf, type QueryDiscountRulesRequest, type QueryDiscountRulesResponse, type QueryDiscountRulesResponseNonNullableFields, type RestoreInfo, type Scope, type ScopeScopeItemsOneOf, ScopeType, SortOrder, type Sorting, type SpecificItemsInfo, Status, type SubtotalRange, TriggerType, Type, type UpdateDiscountRule, type UpdateDiscountRuleRequest, type UpdateDiscountRuleResponse, type UpdateDiscountRuleResponseNonNullableFields, WebhookIdentityType, type _publicOnDiscountRuleCreatedType, type _publicOnDiscountRuleDeletedType, type _publicOnDiscountRuleUpdatedType, createDiscountRule, deleteDiscountRule, getDiscountRule, onDiscountRuleCreated, onDiscountRuleDeleted, onDiscountRuleUpdated, onDiscountRuleCreated$1 as publicOnDiscountRuleCreated, onDiscountRuleDeleted$1 as publicOnDiscountRuleDeleted, onDiscountRuleUpdated$1 as publicOnDiscountRuleUpdated, queryDiscountRules, updateDiscountRule };
