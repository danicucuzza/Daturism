interface OrdersSettings$1 {
    /**
     * Defines when to update the store inventory:
     *
     * - `ON_ORDER_PAID`: Stock quantities will update only after the payment is approved.
     * - `ON_ORDER_PLACED`: Stock quantities will update while the payment is being processed. If the payment did not go through, items will restock.
     *
     * Default: `ON_ORDER_PLACED`
     */
    inventoryUpdateTrigger?: InventoryUpdateTrigger$1;
    /**
     * Whether to automatically create invoices for every new order paid online.
     * <br>
     * Default: `false`
     * <br>
     * **Note**: The issued invoice for an order is not a tax invoice and doesn't reflect refunds. You are responsible for ensuring that invoices you issue conform to any relevant legal requirements.
     */
    createInvoice?: boolean | null;
    /**
     * Date and time the orders settings were created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the orders settings were updated.
     * @readonly
     */
    updatedDate?: Date | null;
}
declare enum InventoryUpdateTrigger$1 {
    UNKNOWN_INVENTORY_UPDATE_TRIGGER = "UNKNOWN_INVENTORY_UPDATE_TRIGGER",
    ON_ORDER_PAID = "ON_ORDER_PAID",
    ON_ORDER_PLACED = "ON_ORDER_PLACED"
}
interface GetOrdersSettingsRequest$1 {
}
interface GetOrdersSettingsResponse$1 {
    /** Orders settings. */
    ordersSettings?: OrdersSettings$1;
}
interface UpdateOrdersSettingsRequest$1 {
    /** Orders settings to update. */
    ordersSettings: OrdersSettings$1;
}
interface UpdateOrdersSettingsResponse$1 {
    /** The updated orders settings. */
    ordersSettings?: OrdersSettings$1;
}
interface OrdersSettingsNonNullableFields$1 {
    inventoryUpdateTrigger: InventoryUpdateTrigger$1;
}
interface GetOrdersSettingsResponseNonNullableFields$1 {
    ordersSettings?: OrdersSettingsNonNullableFields$1;
}
interface UpdateOrdersSettingsResponseNonNullableFields$1 {
    ordersSettings?: OrdersSettingsNonNullableFields$1;
}

interface OrdersSettings {
    /**
     * Defines when to update the store inventory.
     *
     * - `ON_ORDER_PAID`: Stock quantities will update only after the payment is approved.
     *  - `ON_ORDER_PLACED`: Stock quantities will update while the payment is being processed. If the payment did not go through, items will restock.
     *
     * Default: `ON_ORDER_PLACED`
     */
    inventoryUpdateTrigger?: InventoryUpdateTrigger;
    /**
     * Whether to automatically create invoices for every new order paid online.
     * Default: `false`
     */
    createInvoice?: boolean | null;
    /**
     * Date and time the orders settings were created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the orders settings were updated.
     * @readonly
     */
    _updatedDate?: Date | null;
}
declare enum InventoryUpdateTrigger {
    UNKNOWN_INVENTORY_UPDATE_TRIGGER = "UNKNOWN_INVENTORY_UPDATE_TRIGGER",
    ON_ORDER_PAID = "ON_ORDER_PAID",
    ON_ORDER_PLACED = "ON_ORDER_PLACED"
}
interface GetOrdersSettingsRequest {
}
interface GetOrdersSettingsResponse {
    /** Orders settings. */
    ordersSettings?: OrdersSettings;
}
interface UpdateOrdersSettingsRequest {
    /** Orders settings to update. */
    ordersSettings: OrdersSettings;
}
interface UpdateOrdersSettingsResponse {
    /** The updated orders settings. */
    ordersSettings?: OrdersSettings;
}
interface OrdersSettingsNonNullableFields {
    inventoryUpdateTrigger: InventoryUpdateTrigger;
}
interface GetOrdersSettingsResponseNonNullableFields {
    ordersSettings?: OrdersSettingsNonNullableFields;
}
interface UpdateOrdersSettingsResponseNonNullableFields {
    ordersSettings?: OrdersSettingsNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getOrdersSettings(): __PublicMethodMetaInfo<'GET', {}, GetOrdersSettingsRequest, GetOrdersSettingsRequest$1, GetOrdersSettingsResponse & GetOrdersSettingsResponseNonNullableFields, GetOrdersSettingsResponse$1 & GetOrdersSettingsResponseNonNullableFields$1>;
declare function updateOrdersSettings(): __PublicMethodMetaInfo<'PATCH', {}, UpdateOrdersSettingsRequest, UpdateOrdersSettingsRequest$1, UpdateOrdersSettingsResponse & UpdateOrdersSettingsResponseNonNullableFields, UpdateOrdersSettingsResponse$1 & UpdateOrdersSettingsResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, getOrdersSettings, updateOrdersSettings };
