interface GiftCardProviderEntity {
    /** Dummy id for docs generation. */
    _id?: string | null;
}
interface GetBalanceRequest {
    /** Gift card code. */
    code?: string;
    /**
     * App ID of the Gift Card provider. Deprecated.
     * @deprecated App ID of the Gift Card provider. Deprecated.
     * @targetRemovalDate 2025-07-01
     */
    appInstanceId?: string;
    /** The physical location ID. Can be based on the Locations API or an external provider. */
    locationId?: string | null;
}
interface GetBalanceResponse {
    /** Current balance. */
    balance?: number;
    /** Currency code. */
    currencyCode?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
interface RedeemRequest {
    /** Gift card code. */
    code?: string;
    /**
     * App ID of the Gift Card provider. Deprecated.
     * @deprecated App ID of the Gift Card provider. Deprecated.
     * @targetRemovalDate 2025-07-01
     */
    appInstanceId?: string;
    /** Amount to redeem from the gift card. */
    amount?: number;
    /** Order ID the gift card transaction is applied to. Order details can be collected from eCommerce Search Orders. */
    orderId?: string;
    /** Currency code. */
    currencyCode?: string;
    /** Physical location ID. Can be based on the Locations API or an external provider. */
    locationId?: string | null;
}
interface RedeemResponse {
    /** Remaining balance on the Gift Card after the redemption. */
    remainingBalance?: number;
    /** Currency code. */
    currencyCode?: string;
    /** Transaction ID. */
    transactionId?: string;
}
interface VoidRequest {
    /**
     * App ID of the Gift Card provider. Deprecated.
     * @deprecated App ID of the Gift Card provider. Deprecated.
     * @targetRemovalDate 2025-07-01
     */
    appInstanceId?: string;
    /** Transaction ID to void. */
    transactionId?: string;
    /** Physical location ID. Can be based on the Locations API or an external provider. */
    locationId?: string | null;
}
interface VoidResponse {
    /** Remaining balance on the Gift Card after voiding the transaction. */
    remainingBalance?: number;
    /** Currency code. */
    currencyCode?: string;
}
interface GiftCardProviderConfig {
    /** Base URI where the endpoints are called. Wix eCommerce appends the endpoint path to the base URI. For example, to call the Get Balance endpoint at https://my-gift-cards.com/v1/balance, the base URI you provide here is https://my-gift-cards.com/. */
    deploymentUri?: string;
}
/**
 * this message is not directly used by any service,
 * it exists to describe the expected parameters that SHOULD be provided to invoked Velo methods as part of open-platform.
 * e.g. SPIs, event-handlers, etc..
 * NOTE: this context object MUST be provided as the last argument in each Velo method signature.
 *
 * Example:
 * ```typescript
 * export function wixStores_onOrderCanceled({ event, metadata }: OrderCanceledEvent) {
 * ...
 * }
 * ```
 */
interface Context {
    /** A unique identifier of the request. You may print this ID to your logs to help with future debugging and easier correlation with Wix's logs. */
    requestId?: string | null;
    /** [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) 3-letter currency code. */
    currency?: string | null;
    /** An object that describes the identity that triggered this request. */
    identity?: IdentificationData;
    /** A string representing a language and region in the format of `"xx-XX"`. First 2 letters represent the language code according to ISO 639-1. This is followed by a dash "-", and then a by 2 capital letters representing the region according to ISO 3166-2. For example, `"en-US"`. */
    languages?: string[];
    /** The service provider app's instance ID. */
    instanceId?: string | null;
}
declare enum IdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: IdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}

declare global {
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- It has to be an `interface` so that it can be merged.
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}

declare global {
    interface ContextualClient {
    }
}

interface GetBalanceEnvelope {
    request: GetBalanceRequest;
    metadata: Context;
}
interface RedeemEnvelope {
    request: RedeemRequest;
    metadata: Context;
}
interface _voidEnvelope {
    request: VoidRequest;
    metadata: Context;
}

/**
 * Gift card not found
 */
declare class GiftCardNotFoundWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Gift card is disabled
 */
declare class GiftCardDisabledWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Gift card was expired
 */
declare class GiftCardExpiredWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Insufficient funds for redeem
 */
declare class InsufficientFundsWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Gift card already redeemed for the given order
 */
declare class AlreadyRedeemedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Currency code not supported
 */
declare class CurrencyNotSupportedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Transaction not found.
 */
declare class TransactionNotFoundWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Transaction already voided
 */
declare class AlreadyVoidedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}

/**
 * This method retrieves gift card data from your app.
 * Wix calls this method when a customer applies a gift card as a payment method at checkout.
 * @throws GiftCardNotFoundWixError
 * @throws GiftCardDisabledWixError
 * @throws GiftCardExpiredWixError
 */
declare function getBalance(payload: GetBalanceEnvelope): GetBalanceResponse | Promise<GetBalanceResponse>;
/**
 * This method requests that a transaction be created by your app.
 * Wix calls this method when a customer completes a purchase that includes a gift card as a payment method at checkout.
 * @throws GiftCardNotFoundWixError
 * @throws GiftCardDisabledWixError
 * @throws GiftCardExpiredWixError
 * @throws InsufficientFundsWixError
 * @throws AlreadyRedeemedWixError
 * @throws CurrencyNotSupportedWixError
 */
declare function redeem(payload: RedeemEnvelope): RedeemResponse | Promise<RedeemResponse>;
/**
 * This method requests that a gift card transaction be voided by your app.
 * Wix calls this method when a purchase fails after gift card redemption.
 */
declare function _void(payload: _voidEnvelope): VoidResponse | Promise<VoidResponse>;

export { AlreadyRedeemedWixError, AlreadyVoidedWixError, type Context, CurrencyNotSupportedWixError, type GetBalanceEnvelope, type GetBalanceRequest, type GetBalanceResponse, GiftCardDisabledWixError, GiftCardExpiredWixError, GiftCardNotFoundWixError, type GiftCardProviderConfig, type GiftCardProviderEntity, type IdentificationData, type IdentificationDataIdOneOf, IdentityType, InsufficientFundsWixError, type RedeemEnvelope, type RedeemRequest, type RedeemResponse, TransactionNotFoundWixError, type VoidRequest, type VoidResponse, _void, type _voidEnvelope, getBalance, redeem };
