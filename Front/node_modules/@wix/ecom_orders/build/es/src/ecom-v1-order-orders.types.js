export var DescriptionLineType;
(function (DescriptionLineType) {
    DescriptionLineType["UNRECOGNISED"] = "UNRECOGNISED";
    DescriptionLineType["PLAIN_TEXT"] = "PLAIN_TEXT";
    DescriptionLineType["COLOR"] = "COLOR";
})(DescriptionLineType || (DescriptionLineType = {}));
export var ItemTypeItemType;
(function (ItemTypeItemType) {
    ItemTypeItemType["UNRECOGNISED"] = "UNRECOGNISED";
    ItemTypeItemType["PHYSICAL"] = "PHYSICAL";
    ItemTypeItemType["DIGITAL"] = "DIGITAL";
    ItemTypeItemType["GIFT_CARD"] = "GIFT_CARD";
    ItemTypeItemType["SERVICE"] = "SERVICE";
})(ItemTypeItemType || (ItemTypeItemType = {}));
/** Type of selected payment option for catalog item */
export var PaymentOptionType;
(function (PaymentOptionType) {
    /** The entire payment for this item happens as part of the checkout. */
    PaymentOptionType["FULL_PAYMENT_ONLINE"] = "FULL_PAYMENT_ONLINE";
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    PaymentOptionType["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    PaymentOptionType["MEMBERSHIP"] = "MEMBERSHIP";
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    PaymentOptionType["DEPOSIT_ONLINE"] = "DEPOSIT_ONLINE";
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    PaymentOptionType["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
})(PaymentOptionType || (PaymentOptionType = {}));
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
export var JurisdictionType;
(function (JurisdictionType) {
    JurisdictionType["UNDEFINED"] = "UNDEFINED";
    JurisdictionType["COUNTRY"] = "COUNTRY";
    JurisdictionType["STATE"] = "STATE";
    JurisdictionType["COUNTY"] = "COUNTY";
    JurisdictionType["CITY"] = "CITY";
    JurisdictionType["SPECIAL"] = "SPECIAL";
})(JurisdictionType || (JurisdictionType = {}));
/** Frequency unit of recurring payment */
export var SubscriptionFrequency;
(function (SubscriptionFrequency) {
    SubscriptionFrequency["UNDEFINED"] = "UNDEFINED";
    SubscriptionFrequency["DAY"] = "DAY";
    SubscriptionFrequency["WEEK"] = "WEEK";
    SubscriptionFrequency["MONTH"] = "MONTH";
    SubscriptionFrequency["YEAR"] = "YEAR";
})(SubscriptionFrequency || (SubscriptionFrequency = {}));
export var TaxableAddressType;
(function (TaxableAddressType) {
    TaxableAddressType["UNKNOWN_TAXABLE_ADDRESS"] = "UNKNOWN_TAXABLE_ADDRESS";
    TaxableAddressType["BUSINESS"] = "BUSINESS";
    TaxableAddressType["BILLING"] = "BILLING";
    TaxableAddressType["SHIPPING"] = "SHIPPING";
})(TaxableAddressType || (TaxableAddressType = {}));
export var PaymentStatus;
(function (PaymentStatus) {
    PaymentStatus["UNSPECIFIED"] = "UNSPECIFIED";
    /** Order is not paid */
    PaymentStatus["NOT_PAID"] = "NOT_PAID";
    /** Order is paid */
    PaymentStatus["PAID"] = "PAID";
    /** Order was refunded, refund amount less than order total price */
    PaymentStatus["PARTIALLY_REFUNDED"] = "PARTIALLY_REFUNDED";
    /** Full order total price was refunded */
    PaymentStatus["FULLY_REFUNDED"] = "FULLY_REFUNDED";
    /** Payments received but not yet confirmed by the payment provider */
    PaymentStatus["PENDING"] = "PENDING";
    /** At least one payment was received and approved, covering less than total price amount */
    PaymentStatus["PARTIALLY_PAID"] = "PARTIALLY_PAID";
})(PaymentStatus || (PaymentStatus = {}));
export var FulfillmentStatus;
(function (FulfillmentStatus) {
    /** none of the order items are fulfilled or order was manually marked as unfulfilled */
    FulfillmentStatus["NOT_FULFILLED"] = "NOT_FULFILLED";
    /**
     * All of the order items are fulfilled or order was manually marked as fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FulfillmentStatus["FULFILLED"] = "FULFILLED";
    /** Some, but not all of the order items are fulfilled */
    FulfillmentStatus["PARTIALLY_FULFILLED"] = "PARTIALLY_FULFILLED";
})(FulfillmentStatus || (FulfillmentStatus = {}));
export var WeightUnit;
(function (WeightUnit) {
    /** Weight unit can't be classified, due to an error */
    WeightUnit["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
    /** Kilograms */
    WeightUnit["KG"] = "KG";
    /** Pounds */
    WeightUnit["LB"] = "LB";
})(WeightUnit || (WeightUnit = {}));
/** tax info types */
export var VatType;
(function (VatType) {
    VatType["UNSPECIFIED"] = "UNSPECIFIED";
    /** CPF - for individual tax payers. */
    VatType["CPF"] = "CPF";
    /** CNPJ - for corporations */
    VatType["CNPJ"] = "CNPJ";
})(VatType || (VatType = {}));
export var PickupMethod;
(function (PickupMethod) {
    PickupMethod["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
    PickupMethod["STORE_PICKUP"] = "STORE_PICKUP";
    PickupMethod["PICKUP_POINT"] = "PICKUP_POINT";
})(PickupMethod || (PickupMethod = {}));
export var OrderStatus;
(function (OrderStatus) {
    OrderStatus["INITIALIZED"] = "INITIALIZED";
    OrderStatus["APPROVED"] = "APPROVED";
    OrderStatus["CANCELED"] = "CANCELED";
})(OrderStatus || (OrderStatus = {}));
export var DiscountType;
(function (DiscountType) {
    DiscountType["GLOBAL"] = "GLOBAL";
    DiscountType["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
    DiscountType["SHIPPING"] = "SHIPPING";
})(DiscountType || (DiscountType = {}));
export var DiscountReason;
(function (DiscountReason) {
    DiscountReason["UNSPECIFIED"] = "UNSPECIFIED";
    DiscountReason["EXCHANGED_ITEMS"] = "EXCHANGED_ITEMS";
})(DiscountReason || (DiscountReason = {}));
export var LineItemQuantityChangeType;
(function (LineItemQuantityChangeType) {
    LineItemQuantityChangeType["QUANTITY_INCREASED"] = "QUANTITY_INCREASED";
    LineItemQuantityChangeType["QUANTITY_DECREASED"] = "QUANTITY_DECREASED";
})(LineItemQuantityChangeType || (LineItemQuantityChangeType = {}));
export var ActivityType;
(function (ActivityType) {
    ActivityType["ORDER_REFUNDED"] = "ORDER_REFUNDED";
    ActivityType["ORDER_PLACED"] = "ORDER_PLACED";
    ActivityType["ORDER_PAID"] = "ORDER_PAID";
    ActivityType["ORDER_FULFILLED"] = "ORDER_FULFILLED";
    ActivityType["ORDER_NOT_FULFILLED"] = "ORDER_NOT_FULFILLED";
    ActivityType["ORDER_CANCELED"] = "ORDER_CANCELED";
    ActivityType["DOWNLOAD_LINK_SENT"] = "DOWNLOAD_LINK_SENT";
    ActivityType["TRACKING_NUMBER_ADDED"] = "TRACKING_NUMBER_ADDED";
    ActivityType["TRACKING_NUMBER_EDITED"] = "TRACKING_NUMBER_EDITED";
    ActivityType["TRACKING_LINK_ADDED"] = "TRACKING_LINK_ADDED";
    ActivityType["SHIPPING_CONFIRMATION_EMAIL_SENT"] = "SHIPPING_CONFIRMATION_EMAIL_SENT";
    ActivityType["INVOICE_ADDED"] = "INVOICE_ADDED";
    ActivityType["INVOICE_REMOVED"] = "INVOICE_REMOVED";
    ActivityType["INVOICE_SENT"] = "INVOICE_SENT";
    ActivityType["FULFILLER_EMAIL_SENT"] = "FULFILLER_EMAIL_SENT";
    ActivityType["SHIPPING_ADDRESS_EDITED"] = "SHIPPING_ADDRESS_EDITED";
    ActivityType["EMAIL_EDITED"] = "EMAIL_EDITED";
    ActivityType["PICKUP_READY_EMAIL_SENT"] = "PICKUP_READY_EMAIL_SENT";
    ActivityType["CUSTOM_ACTIVITY"] = "CUSTOM_ACTIVITY";
    ActivityType["MERCHANT_COMMENT"] = "MERCHANT_COMMENT";
    ActivityType["ORDER_CREATED_FROM_EXCHANGE"] = "ORDER_CREATED_FROM_EXCHANGE";
    ActivityType["NEW_EXCHANGE_ORDER_CREATED"] = "NEW_EXCHANGE_ORDER_CREATED";
    ActivityType["ORDER_PARTIALLY_PAID"] = "ORDER_PARTIALLY_PAID";
    ActivityType["DRAFT_ORDER_CHANGES_APPLIED"] = "DRAFT_ORDER_CHANGES_APPLIED";
    ActivityType["SAVED_PAYMENT_METHOD"] = "SAVED_PAYMENT_METHOD";
})(ActivityType || (ActivityType = {}));
export var AttributionSource;
(function (AttributionSource) {
    AttributionSource["UNSPECIFIED"] = "UNSPECIFIED";
    AttributionSource["FACEBOOK_ADS"] = "FACEBOOK_ADS";
})(AttributionSource || (AttributionSource = {}));
export var ChannelType;
(function (ChannelType) {
    ChannelType["UNSPECIFIED"] = "UNSPECIFIED";
    ChannelType["WEB"] = "WEB";
    ChannelType["POS"] = "POS";
    ChannelType["EBAY"] = "EBAY";
    ChannelType["AMAZON"] = "AMAZON";
    ChannelType["OTHER_PLATFORM"] = "OTHER_PLATFORM";
    ChannelType["WIX_APP_STORE"] = "WIX_APP_STORE";
    ChannelType["WIX_INVOICES"] = "WIX_INVOICES";
    ChannelType["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
    ChannelType["WISH"] = "WISH";
    ChannelType["CLASS_PASS"] = "CLASS_PASS";
    ChannelType["GLOBAL_E"] = "GLOBAL_E";
    ChannelType["FACEBOOK"] = "FACEBOOK";
    ChannelType["ETSY"] = "ETSY";
    ChannelType["TIKTOK"] = "TIKTOK";
    ChannelType["FAIRE_COM"] = "FAIRE_COM";
})(ChannelType || (ChannelType = {}));
/**
 * Represents the actual state of the application on site. Do not confuse with the State in the old MetaSiteDTO,
 * which has less values and doesn't have 1-to-1 correspondence with this one (this one is exact and correct!)
 */
export var State;
(function (State) {
    State["UNKNOWN"] = "UNKNOWN";
    /** App is installed on a site. */
    State["ENABLED"] = "ENABLED";
    /** App is removed from a site (but we preserve it just in case). */
    State["DISABLED"] = "DISABLED";
    /** App is in "demo" mode, meaning that it's in read-only mode (it's in a template OR not installed yet). */
    State["TEMPLATE"] = "TEMPLATE";
    /** App is not installed, there is a user intention for it only (user will see the pimpl in the editor). */
    State["PENDING"] = "PENDING";
})(State || (State = {}));
export var Namespace;
(function (Namespace) {
    Namespace["UNKNOWN_NAMESPACE"] = "UNKNOWN_NAMESPACE";
    /** Default namespace for UGC sites. MetaSites with this namespace will be shown in a user's site list by default. */
    Namespace["WIX"] = "WIX";
    /** ShoutOut stand alone product. These are siteless (no actual Wix site, no HtmlWeb). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["SHOUT_OUT"] = "SHOUT_OUT";
    /** MetaSites created by the Albums product, they appear as part of the Albums app. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["ALBUMS"] = "ALBUMS";
    /** Part of the WixStores migration flow, a user tries to migrate and gets this site to view and if the user likes it then stores removes this namespace and deletes the old site with the old stores. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["WIX_STORES_TEST_DRIVE"] = "WIX_STORES_TEST_DRIVE";
    /** Hotels standalone (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["HOTELS"] = "HOTELS";
    /** Clubs siteless MetaSites, a club without a wix website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["CLUBS"] = "CLUBS";
    /** A partially created ADI website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["ONBOARDING_DRAFT"] = "ONBOARDING_DRAFT";
    /** AppBuilder for AppStudio / shmite (c). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["DEV_SITE"] = "DEV_SITE";
    /** LogoMaker websites offered to the user after logo purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["LOGOS"] = "LOGOS";
    /** VideoMaker websites offered to the user after video purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["VIDEO_MAKER"] = "VIDEO_MAKER";
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["PARTNER_DASHBOARD"] = "PARTNER_DASHBOARD";
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["DEV_CENTER_COMPANY"] = "DEV_CENTER_COMPANY";
    /**
     * A draft created by HTML editor on open. Upon "first save" it will be moved to be of WIX domain.
     *
     * Meta site with this namespace will *not* be shown in a user's site list by default.
     */
    Namespace["HTML_DRAFT"] = "HTML_DRAFT";
    /**
     * the user-journey for Fitness users who want to start from managing their business instead of designing their website.
     * Will be accessible from Site List and will not have a website app.
     * Once the user attaches a site, the site will become a regular wixsite.
     */
    Namespace["SITELESS_BUSINESS"] = "SITELESS_BUSINESS";
    /** Belongs to "strategic products" company. Supports new product in the creator's economy space. */
    Namespace["CREATOR_ECONOMY"] = "CREATOR_ECONOMY";
    /** It is to be used in the Business First efforts. */
    Namespace["DASHBOARD_FIRST"] = "DASHBOARD_FIRST";
    /** Bookings business flow with no site. */
    Namespace["ANYWHERE"] = "ANYWHERE";
    /** Namespace for Headless Backoffice with no editor */
    Namespace["HEADLESS"] = "HEADLESS";
    /**
     * Namespace for master site that will exist in parent account that will be referenced by subaccounts
     * The site will be used for account level CSM feature for enterprise
     */
    Namespace["ACCOUNT_MASTER_CMS"] = "ACCOUNT_MASTER_CMS";
    /** Rise.ai Siteless account management for Gift Cards and Store Credit. */
    Namespace["RISE"] = "RISE";
    /**
     * As part of the branded app new funnel, users now can create a meta site that will be branded app first.
     * There's a blank site behind the scene but it's blank).
     * The Mobile company will be the owner of this namespace.
     */
    Namespace["BRANDED_FIRST"] = "BRANDED_FIRST";
    /** Nownia.com Siteless account management for Ai Scheduling Assistant. */
    Namespace["NOWNIA"] = "NOWNIA";
    /**
     * UGC Templates are templates that are created by users for personal use and to sale to other users.
     * The Partners company owns this namespace.
     */
    Namespace["UGC_TEMPLATE"] = "UGC_TEMPLATE";
    /** Codux Headless Sites */
    Namespace["CODUX"] = "CODUX";
})(Namespace || (Namespace = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var TransactionStatus;
(function (TransactionStatus) {
    TransactionStatus["UNDEFINED"] = "UNDEFINED";
    TransactionStatus["APPROVED"] = "APPROVED";
    TransactionStatus["PENDING"] = "PENDING";
    TransactionStatus["PENDING_MERCHANT"] = "PENDING_MERCHANT";
    TransactionStatus["CANCELED"] = "CANCELED";
    TransactionStatus["DECLINED"] = "DECLINED";
    TransactionStatus["REFUNDED"] = "REFUNDED";
    TransactionStatus["PARTIALLY_REFUNDED"] = "PARTIALLY_REFUNDED";
    TransactionStatus["AUTHORIZED"] = "AUTHORIZED";
    TransactionStatus["VOIDED"] = "VOIDED";
})(TransactionStatus || (TransactionStatus = {}));
export var AuthorizationCaptureStatus;
(function (AuthorizationCaptureStatus) {
    AuthorizationCaptureStatus["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    /** Whether capture operation still in progress */
    AuthorizationCaptureStatus["PENDING"] = "PENDING";
    /** The capture operation was succeeded */
    AuthorizationCaptureStatus["SUCCEEDED"] = "SUCCEEDED";
    /** The capture operation was failed */
    AuthorizationCaptureStatus["FAILED"] = "FAILED";
})(AuthorizationCaptureStatus || (AuthorizationCaptureStatus = {}));
export var AuthorizationVoidStatus;
(function (AuthorizationVoidStatus) {
    AuthorizationVoidStatus["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    /** Whether void operation still in progress */
    AuthorizationVoidStatus["PENDING"] = "PENDING";
    /** The void operation was succeeded */
    AuthorizationVoidStatus["SUCCEEDED"] = "SUCCEEDED";
    /** The void operation was failed */
    AuthorizationVoidStatus["FAILED"] = "FAILED";
})(AuthorizationVoidStatus || (AuthorizationVoidStatus = {}));
/**
 * Reason the authorization was voided.
 *
 * + `MANUAL`: Authorization was voided by user.
 * + `SCHEDULED`: Authorization passed execution date.
 */
export var Reason;
(function (Reason) {
    Reason["UNKNOWN_REASON"] = "UNKNOWN_REASON";
    Reason["MANUAL"] = "MANUAL";
    Reason["SCHEDULED"] = "SCHEDULED";
})(Reason || (Reason = {}));
export var ActionType;
(function (ActionType) {
    ActionType["UNKNOWN_ACTION_TYPE"] = "UNKNOWN_ACTION_TYPE";
    ActionType["VOID"] = "VOID";
    ActionType["CAPTURE"] = "CAPTURE";
})(ActionType || (ActionType = {}));
export var MembershipPaymentStatus;
(function (MembershipPaymentStatus) {
    /** CHARGED - Payment was charged */
    MembershipPaymentStatus["CHARGED"] = "CHARGED";
    /** CHARGE_FAILED - The attempt to charge that payment have failed, for example due to lack of credits */
    MembershipPaymentStatus["CHARGE_FAILED"] = "CHARGE_FAILED";
})(MembershipPaymentStatus || (MembershipPaymentStatus = {}));
/**
 * Refund transaction status.
 * + `PENDING`: Refund was initiated on payment provider side. PENDING status was assigned by provider.
 * + `SUCCEEDED`: Refund transaction succeeded.
 * + `FAILED`: Refund transaction failed.
 * + `SCHEDULED`: Refund request acknowledged, and will be executed soon.
 * + `STARTED`: Refund was initiated on payment provider side.
 */
export var RefundStatus;
(function (RefundStatus) {
    RefundStatus["PENDING"] = "PENDING";
    RefundStatus["SUCCEEDED"] = "SUCCEEDED";
    RefundStatus["FAILED"] = "FAILED";
    RefundStatus["SCHEDULED"] = "SCHEDULED";
    RefundStatus["STARTED"] = "STARTED";
})(RefundStatus || (RefundStatus = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
export var VersioningMode;
(function (VersioningMode) {
    /** use default versioning mode agreed with search team */
    VersioningMode["DEFAULT"] = "DEFAULT";
    /** execute only if version is greater than existing */
    VersioningMode["GREATER_THAN"] = "GREATER_THAN";
    /** execute only if version is greater or equal to existing */
    VersioningMode["GREATER_OR_EQUAL"] = "GREATER_OR_EQUAL";
})(VersioningMode || (VersioningMode = {}));
export var PreviewEmailType;
(function (PreviewEmailType) {
    PreviewEmailType["ORDER_PLACED"] = "ORDER_PLACED";
    PreviewEmailType["DOWNLOAD_LINKS"] = "DOWNLOAD_LINKS";
    PreviewEmailType["ORDER_SHIPPED"] = "ORDER_SHIPPED";
    PreviewEmailType["ORDER_READY_FOR_PICKUP"] = "ORDER_READY_FOR_PICKUP";
})(PreviewEmailType || (PreviewEmailType = {}));
export var ScheduledAction;
(function (ScheduledAction) {
    ScheduledAction["UNSPECIFIED"] = "UNSPECIFIED";
    /** Whether payment will be auto-voided when duration passes */
    ScheduledAction["VOID"] = "VOID";
    /** Whether payment will be auto-captured when duration passes */
    ScheduledAction["CAPTURE"] = "CAPTURE";
})(ScheduledAction || (ScheduledAction = {}));
export var DurationUnit;
(function (DurationUnit) {
    DurationUnit["UNKNOWN_DURATION_UNIT"] = "UNKNOWN_DURATION_UNIT";
    DurationUnit["MINUTES"] = "MINUTES";
    DurationUnit["HOURS"] = "HOURS";
    DurationUnit["DAYS"] = "DAYS";
})(DurationUnit || (DurationUnit = {}));
export var PaymentCollectabilityStatus;
(function (PaymentCollectabilityStatus) {
    PaymentCollectabilityStatus["UNKNOWN"] = "UNKNOWN";
    PaymentCollectabilityStatus["COLLECTABLE"] = "COLLECTABLE";
    PaymentCollectabilityStatus["NONCOLLECTABLE_ORDER_IS_CANCELLED"] = "NONCOLLECTABLE_ORDER_IS_CANCELLED";
    PaymentCollectabilityStatus["NONCOLLECTABLE_ORDER_IS_PAID"] = "NONCOLLECTABLE_ORDER_IS_PAID";
    PaymentCollectabilityStatus["NONCOLLECTABLE_MISSING_PAYMENT_METHOD"] = "NONCOLLECTABLE_MISSING_PAYMENT_METHOD";
})(PaymentCollectabilityStatus || (PaymentCollectabilityStatus = {}));
export var RefundableStatus;
(function (RefundableStatus) {
    RefundableStatus["NOT_REFUNDABLE"] = "NOT_REFUNDABLE";
    RefundableStatus["MANUAL"] = "MANUAL";
    RefundableStatus["REFUNDABLE"] = "REFUNDABLE";
})(RefundableStatus || (RefundableStatus = {}));
export var NonRefundableReason;
(function (NonRefundableReason) {
    NonRefundableReason["NONE"] = "NONE";
    NonRefundableReason["ALREADY_REFUNDED"] = "ALREADY_REFUNDED";
    NonRefundableReason["PROVIDER_IS_DOWN"] = "PROVIDER_IS_DOWN";
    NonRefundableReason["INTERNAL_ERROR"] = "INTERNAL_ERROR";
    NonRefundableReason["NOT_PAID"] = "NOT_PAID";
    NonRefundableReason["ACCESS_DENIED"] = "ACCESS_DENIED";
    NonRefundableReason["ZERO_PRICE"] = "ZERO_PRICE";
    NonRefundableReason["DISABLED_BY_PROVIDER"] = "DISABLED_BY_PROVIDER";
    NonRefundableReason["PENDING_REFUND"] = "PENDING_REFUND";
    NonRefundableReason["FORBIDDEN"] = "FORBIDDEN";
    NonRefundableReason["TRANSACTION_NOT_FOUND"] = "TRANSACTION_NOT_FOUND";
})(NonRefundableReason || (NonRefundableReason = {}));
export var ManuallyRefundableReason;
(function (ManuallyRefundableReason) {
    ManuallyRefundableReason["EXPIRED"] = "EXPIRED";
    ManuallyRefundableReason["NOT_SUPPORTED"] = "NOT_SUPPORTED";
    ManuallyRefundableReason["OFFLINE"] = "OFFLINE";
})(ManuallyRefundableReason || (ManuallyRefundableReason = {}));
export var RestockType;
(function (RestockType) {
    RestockType["NO_ITEMS"] = "NO_ITEMS";
    RestockType["ALL_ITEMS"] = "ALL_ITEMS";
    RestockType["SOME_ITEMS"] = "SOME_ITEMS";
})(RestockType || (RestockType = {}));
export var OrderApprovalStrategy;
(function (OrderApprovalStrategy) {
    OrderApprovalStrategy["DEFAULT"] = "DEFAULT";
    OrderApprovalStrategy["PAYMENT_RECEIVED"] = "PAYMENT_RECEIVED";
    OrderApprovalStrategy["PAYMENT_METHOD_SAVED"] = "PAYMENT_METHOD_SAVED";
})(OrderApprovalStrategy || (OrderApprovalStrategy = {}));
/** Type of selected payment option for catalog item */
export var DeltaPaymentOptionType;
(function (DeltaPaymentOptionType) {
    /** irrelevant */
    DeltaPaymentOptionType["UNKNOWN_PAYMENT_OPTION"] = "UNKNOWN_PAYMENT_OPTION";
    /** The entire payment for given item will happen after the checkout. */
    DeltaPaymentOptionType["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
    /**
     * Payment for this item can only be done using a membership and must be manually redeemed in the dashboard by the site owner.
     * Note: when this option is used, price will be 0.
     */
    DeltaPaymentOptionType["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
})(DeltaPaymentOptionType || (DeltaPaymentOptionType = {}));
export var InventoryAction;
(function (InventoryAction) {
    /** Restock inventory */
    InventoryAction["RESTOCK"] = "RESTOCK";
    /** Decrease inventory. Without failing on negative inventory. */
    InventoryAction["DECREASE"] = "DECREASE";
})(InventoryAction || (InventoryAction = {}));
export var Placement;
(function (Placement) {
    Placement["Unknown"] = "Unknown";
    Placement["Replace"] = "Replace";
    Placement["Before"] = "Before";
    Placement["After"] = "After";
})(Placement || (Placement = {}));
export var SubdivisionType;
(function (SubdivisionType) {
    SubdivisionType["UNKNOWN_SUBDIVISION_TYPE"] = "UNKNOWN_SUBDIVISION_TYPE";
    /** State */
    SubdivisionType["ADMINISTRATIVE_AREA_LEVEL_1"] = "ADMINISTRATIVE_AREA_LEVEL_1";
    /** County */
    SubdivisionType["ADMINISTRATIVE_AREA_LEVEL_2"] = "ADMINISTRATIVE_AREA_LEVEL_2";
    /** City/town */
    SubdivisionType["ADMINISTRATIVE_AREA_LEVEL_3"] = "ADMINISTRATIVE_AREA_LEVEL_3";
    /** Neighborhood/quarter */
    SubdivisionType["ADMINISTRATIVE_AREA_LEVEL_4"] = "ADMINISTRATIVE_AREA_LEVEL_4";
    /** Street/block */
    SubdivisionType["ADMINISTRATIVE_AREA_LEVEL_5"] = "ADMINISTRATIVE_AREA_LEVEL_5";
    /** ADMINISTRATIVE_AREA_LEVEL_0. Indicates the national political entity, and is typically the highest order type returned by the Geocoder. */
    SubdivisionType["COUNTRY"] = "COUNTRY";
})(SubdivisionType || (SubdivisionType = {}));
export var SourceType;
(function (SourceType) {
    SourceType["UNKNOWN_SOURCE_TYPE"] = "UNKNOWN_SOURCE_TYPE";
    SourceType["WIX_APP"] = "WIX_APP";
    SourceType["EXTERNAL"] = "EXTERNAL";
    SourceType["ADMIN"] = "ADMIN";
    SourceType["OTHER"] = "OTHER";
})(SourceType || (SourceType = {}));
export var CustomFieldGroup;
(function (CustomFieldGroup) {
    CustomFieldGroup["UNKNOWN_CUSTOM_FIELD_GROUP"] = "UNKNOWN_CUSTOM_FIELD_GROUP";
    CustomFieldGroup["BUSINESS_DETAILS"] = "BUSINESS_DETAILS";
    CustomFieldGroup["CUSTOMER_DETAILS"] = "CUSTOMER_DETAILS";
    CustomFieldGroup["DOCUMENT"] = "DOCUMENT";
    CustomFieldGroup["FOOTER"] = "FOOTER";
    CustomFieldGroup["OTHER"] = "OTHER";
})(CustomFieldGroup || (CustomFieldGroup = {}));
export var ValueType;
(function (ValueType) {
    ValueType["UNKNOWN_VALUE_TYPE"] = "UNKNOWN_VALUE_TYPE";
    ValueType["STRING"] = "STRING";
    ValueType["DATE"] = "DATE";
    ValueType["BOOLEAN"] = "BOOLEAN";
    ValueType["NUMBER"] = "NUMBER";
})(ValueType || (ValueType = {}));
export var DepositType;
(function (DepositType) {
    DepositType["UNKNOWN"] = "UNKNOWN";
    DepositType["FLAT"] = "FLAT";
    DepositType["PERCENTAGE"] = "PERCENTAGE";
})(DepositType || (DepositType = {}));
/**
 * InvoiceStatus allowed transitions based on current status:
 * Draft -> Deleted, Paid, Partially Paid, Sent
 * Sent -> Draft, Deleted, Void, Paid, Partially Paid, Processing, (Overdue)
 * Processing -> PartiallyPaid, Paid, Sent
 * Paid -> Void
 * PartiallyPaid -> Void, (PartialAndOverdue)
 * Void -> Deleted
 * Deleted
 */
export var InvoiceStatus;
(function (InvoiceStatus) {
    InvoiceStatus["Draft"] = "Draft";
    InvoiceStatus["Sent"] = "Sent";
    InvoiceStatus["Processing"] = "Processing";
    InvoiceStatus["Paid"] = "Paid";
    InvoiceStatus["Overdue"] = "Overdue";
    InvoiceStatus["Void"] = "Void";
    InvoiceStatus["Deleted"] = "Deleted";
    InvoiceStatus["PartiallyPaid"] = "PartiallyPaid";
    InvoiceStatus["PartialAndOverdue"] = "PartialAndOverdue";
})(InvoiceStatus || (InvoiceStatus = {}));
//# sourceMappingURL=ecom-v1-order-orders.types.js.map