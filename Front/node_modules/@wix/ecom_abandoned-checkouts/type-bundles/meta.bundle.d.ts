interface AbandonedCheckout$1 {
    /** Abandoned checkout ID. */
    id?: string;
    /** Date and time the abandoned checkout was created. */
    createdDate?: Date | null;
    /** Date and time the abandoned checkout was updated. */
    updatedDate?: Date | null;
    /** The associated checkout ID. */
    checkoutId?: string | null;
    /** The associated cart ID. */
    cartId?: string | null;
    /** Status of the abandoned checkout. */
    status?: Status$1;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Buyer information. */
    buyerInfo?: V1BuyerInfo$1;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails$1;
    /** The store's currency. */
    currency?: string;
    /** Currency the buyer used in checkout. */
    conversionCurrency?: string | null;
    /** Total price after discounts, gift cards, and tax. */
    totalPrice?: MultiCurrencyPrice$1;
    /**
     * List of all automation activities performed by [Wix Automations](https://support.wix.com/en/article/wix-automations-getting-started) regarding the abandoned checkout.
     * Wix Automations updates the `activities` field for each actvity in the automation flow. Only relevant if the site owner set up [automations in the Dashboard](https://support.wix.com/en/article/wix-automations-creating-a-new-automation). Read more about `activities` in the [introduction](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/abandoned-checkout/introduction).
     */
    activities?: Activity$1[];
    /** Date and time the abandoned checkout was recovered. */
    checkoutRecoveredDate?: Date | null;
    /** Checkout URL. */
    checkoutUrl?: string;
    /** Subtotal price of all line items, before discounts and before tax. */
    subtotalPrice?: MultiCurrencyPrice$1;
}
declare enum ActivityType$1 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    SCHEDULED = "SCHEDULED",
    EMAIL_SENT = "EMAIL_SENT",
    EMAIL_NOT_SENT = "EMAIL_NOT_SENT",
    NOTIFICATION_SENT = "NOTIFICATION_SENT",
    TASK_CREATED = "TASK_CREATED"
}
/** Status of the abandoned checkout. */
declare enum Status$1 {
    ABANDONED = "ABANDONED",
    RECOVERED = "RECOVERED"
}
/** Buyer information. */
interface V1BuyerInfo$1 extends V1BuyerInfoIdOneOf$1 {
    /** Visitor ID (if the site visitor is **not** a site member). */
    visitorId?: string;
    /** Member ID (if the site visitor is a site member). */
    memberId?: string;
    /** User ID (if the site visitor is a site owner or collaborator). */
    userId?: string;
    /**
     * Contact ID. For more information, see the [Contacts API](https://dev.wix.com/docs/rest/api-reference/contacts/introduction).
     * @readonly
     */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
interface V1BuyerInfoIdOneOf$1 {
    /** Visitor ID (if the site visitor is **not** a site member). */
    visitorId?: string;
    /** Member ID (if the site visitor is a site member). */
    memberId?: string;
    /** User ID (if the site visitor is a site owner or collaborator). */
    userId?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails$1 {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId$1;
}
interface VatId$1 {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType$1;
}
/** tax info types */
declare enum VatType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface MultiCurrencyPrice$1 {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface Activity$1 {
    /** Date and time the automation activity was created. */
    createdDate?: Date | null;
    /** Automation activity type. */
    type?: ActivityType$1;
}
interface GetAbandonedCheckoutRequest$1 {
    /** Abandoned checkout ID. */
    abandonedCheckoutId: string;
}
interface GetAbandonedCheckoutResponse$1 {
    /** The requested abandoned checkout. */
    abandonedCheckout?: AbandonedCheckout$1;
}
interface DeleteAbandonedCheckoutRequest$1 {
    /** Id of the abandoned checkout to delete */
    abandonedCheckoutId: string;
}
interface DeleteAbandonedCheckoutResponse$1 {
}
interface QueryAbandonedCheckoutsRequest$1 {
    /** Query options. */
    query: QueryV2$1;
}
interface QueryV2$1 extends QueryV2PagingMethodOneOf$1 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$1;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$1[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf$1 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$1;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryAbandonedCheckoutsResponse$1 {
    /**
     * __Deprecated.__ Use `abandonedCheckouts` instead.
     * @deprecated
     */
    results?: AbandonedCheckout$1[];
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout$1[];
    /** Details on the paged set of results returned. */
    metadata?: PagingMetadataV2$1;
}
interface PagingMetadataV2$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors$1;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface SearchAbandonedCheckoutsRequest$1 {
    /** WQL query expression. */
    search?: Search$1;
}
interface Search$1 extends SearchPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: CommonPaging$1;
    /** Cursor pointing to page of results. Can't be used together with 'paging'. 'cursor_paging.cursor' can not be used together with 'filter' or 'sort' */
    cursorPaging?: CommonCursorPaging$1;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: CommonSorting$1[];
    /** free text to match in searchable fields */
    search?: SearchDetails$1;
}
/** @oneof */
interface SearchPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: CommonPaging$1;
    /** Cursor pointing to page of results. Can't be used together with 'paging'. 'cursor_paging.cursor' can not be used together with 'filter' or 'sort' */
    cursorPaging?: CommonCursorPaging$1;
}
interface CommonSorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: CommonSortOrder$1;
}
declare enum CommonSortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface SearchDetails$1 {
    /** boolean search mode */
    mode?: Mode$1;
    /** search term or expression */
    expression?: string | null;
    /** fields to search in. if empty - server will search in own default fields */
    fields?: string[];
    /** flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
declare enum Mode$1 {
    /** any */
    OR = "OR",
    /** all */
    AND = "AND"
}
interface CommonPaging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CommonCursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface SearchAbandonedCheckoutsResponse$1 {
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout$1[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CommonPagingMetadataV2$1;
}
interface CommonPagingMetadataV2$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: CommonCursors$1;
}
interface CommonCursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface RedirectToCheckoutRequest$1 {
    /** abandoned checkout id */
    abandonedCheckoutId: string;
    /** Identifier of the metaSite this checkout uses */
    metasiteId: string;
}
interface RawHttpResponse$1 {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry$1[];
}
interface HeadersEntry$1 {
    key?: string;
    value?: string;
}
interface V1BuyerInfoNonNullableFields$1 {
    visitorId: string;
    memberId: string;
    userId: string;
}
interface VatIdNonNullableFields$1 {
    id: string;
    type: VatType$1;
}
interface FullAddressContactDetailsNonNullableFields$1 {
    vatId?: VatIdNonNullableFields$1;
}
interface MultiCurrencyPriceNonNullableFields$1 {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface ActivityNonNullableFields$1 {
    type: ActivityType$1;
}
interface AbandonedCheckoutNonNullableFields$1 {
    id: string;
    status: Status$1;
    buyerInfo?: V1BuyerInfoNonNullableFields$1;
    contactDetails?: FullAddressContactDetailsNonNullableFields$1;
    currency: string;
    totalPrice?: MultiCurrencyPriceNonNullableFields$1;
    activities: ActivityNonNullableFields$1[];
    checkoutUrl: string;
    subtotalPrice?: MultiCurrencyPriceNonNullableFields$1;
}
interface GetAbandonedCheckoutResponseNonNullableFields$1 {
    abandonedCheckout?: AbandonedCheckoutNonNullableFields$1;
}
interface QueryAbandonedCheckoutsResponseNonNullableFields$1 {
    results: AbandonedCheckoutNonNullableFields$1[];
    abandonedCheckouts: AbandonedCheckoutNonNullableFields$1[];
}
interface SearchAbandonedCheckoutsResponseNonNullableFields$1 {
    abandonedCheckouts: AbandonedCheckoutNonNullableFields$1[];
}
interface HeadersEntryNonNullableFields$1 {
    key: string;
    value: string;
}
interface RawHttpResponseNonNullableFields$1 {
    body: Uint8Array;
    headers: HeadersEntryNonNullableFields$1[];
}

interface AbandonedCheckout {
    /** Abandoned checkout ID. */
    _id?: string;
    /** Date and time the abandoned checkout was created. */
    _createdDate?: Date | null;
    /** Date and time the abandoned checkout was updated. */
    _updatedDate?: Date | null;
    /** The associated checkout ID. */
    checkoutId?: string | null;
    /** The associated cart ID. */
    cartId?: string | null;
    /** Status of the abandoned checkout. */
    status?: Status;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Buyer information. */
    buyerInfo?: V1BuyerInfo;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
    /** The store's currency. */
    currency?: string;
    /** Currency the buyer used in checkout. */
    conversionCurrency?: string | null;
    /** Total price after discounts, gift cards, and tax. */
    totalPrice?: MultiCurrencyPrice;
    /**
     * List of all automation activities performed by [Wix Automations](https://support.wix.com/en/article/wix-automations-getting-started) regarding the abandoned checkout.
     * Wix Automations updates the `activities` field for each actvity in the automation flow. Only relevant if you've set up [automations in the Dashboard](https://support.wix.com/en/article/wix-automations-creating-a-new-automation). Read more about `activities` in the [introduction](https://www.wix.com/velo/reference/wix-ecom-backend/abandonedcheckout/introduction).
     */
    activities?: Activity[];
    /** Date and time the abandoned checkout was recovered. */
    checkoutRecoveredDate?: Date | null;
    /** Checkout URL. */
    checkoutUrl?: string;
    /** Subtotal price of all line items, before discounts and before tax. */
    subtotalPrice?: MultiCurrencyPrice;
}
declare enum ActivityType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    SCHEDULED = "SCHEDULED",
    EMAIL_SENT = "EMAIL_SENT",
    EMAIL_NOT_SENT = "EMAIL_NOT_SENT",
    NOTIFICATION_SENT = "NOTIFICATION_SENT",
    TASK_CREATED = "TASK_CREATED"
}
/** Status of the abandoned checkout. */
declare enum Status {
    ABANDONED = "ABANDONED",
    RECOVERED = "RECOVERED"
}
/** Buyer information. */
interface V1BuyerInfo extends V1BuyerInfoIdOneOf {
    /** Visitor ID (if the site visitor is **not** a site member). */
    visitorId?: string;
    /** Member ID (if the site visitor is a site member). */
    memberId?: string;
    /** User ID (if the site visitor is a site owner or collaborator). */
    userId?: string;
    /**
     * Contact ID. For more information, see the [Contacts API](https://www.wix.com/velo/reference/wix-crm-v2/contacts).
     * @readonly
     */
    contactId?: string | null;
    /**
     * Buyer email address.
     * Max: `50`
     */
    email?: string | null;
}
/** @oneof */
interface V1BuyerInfoIdOneOf {
    /** Visitor ID (if the site visitor is **not** a site member). */
    visitorId?: string;
    /** Member ID (if the site visitor is a site member). */
    memberId?: string;
    /** User ID (if the site visitor is a site owner or collaborator). */
    userId?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails {
    /**
     * First name.
     * Max length: `100`
     */
    firstName?: string | null;
    /**
     * Last name.
     * Max length: `100`
     */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /**
     * Company name.
     * Max length: `50`
     */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId;
}
interface VatId {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType;
}
/** tax info types */
declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface MultiCurrencyPrice {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface Activity {
    /** Date and time the automation activity was created. */
    _createdDate?: Date | null;
    /**
     * Automation activity type.
     *
     * Supported properties: `UNKNOWN_TYPE`, `SCHEDULED`, `EMAIL_SENT`, `EMAIL_NOT_SENT`, `NOTIFICATION_SENT`, `TASK_CREATED`
     */
    type?: ActivityType;
}
interface GetAbandonedCheckoutRequest {
    /** Abandoned checkout ID. */
    abandonedCheckoutId: string;
}
interface GetAbandonedCheckoutResponse {
    /** The requested abandoned checkout. */
    abandonedCheckout?: AbandonedCheckout;
}
interface DeleteAbandonedCheckoutRequest {
    /** Id of the abandoned checkout to delete */
    abandonedCheckoutId: string;
}
interface DeleteAbandonedCheckoutResponse {
}
interface QueryAbandonedCheckoutsRequest {
    /** Query options. */
    query: QueryV2;
}
interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryAbandonedCheckoutsResponse {
    /**
     * __Deprecated.__ Use `abandonedCheckouts` instead.
     * @deprecated
     */
    results?: AbandonedCheckout[];
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout[];
    /** Details on the paged set of results returned. */
    metadata?: PagingMetadataV2;
}
interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface SearchAbandonedCheckoutsRequest {
    /** WQL query expression. */
    search?: Search;
}
interface Search extends SearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: CommonPaging;
    /** Cursor pointing to page of results. Can't be used together with 'paging'. 'cursor_paging.cursor' can not be used together with 'filter' or 'sort' */
    cursorPaging?: CommonCursorPaging;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: CommonSorting[];
    /** free text to match in searchable fields */
    search?: SearchDetails;
}
/** @oneof */
interface SearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: CommonPaging;
    /** Cursor pointing to page of results. Can't be used together with 'paging'. 'cursor_paging.cursor' can not be used together with 'filter' or 'sort' */
    cursorPaging?: CommonCursorPaging;
}
interface CommonSorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: CommonSortOrder;
}
declare enum CommonSortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface SearchDetails {
    /** boolean search mode */
    mode?: Mode;
    /** search term or expression */
    expression?: string | null;
    /** fields to search in. if empty - server will search in own default fields */
    fields?: string[];
    /** flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
declare enum Mode {
    /** any */
    OR = "OR",
    /** all */
    AND = "AND"
}
interface CommonPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CommonCursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface SearchAbandonedCheckoutsResponse {
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CommonPagingMetadataV2;
}
interface CommonPagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: CommonCursors;
}
interface CommonCursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface RedirectToCheckoutRequest {
    /** abandoned checkout id */
    abandonedCheckoutId: string;
    /** Identifier of the metaSite this checkout uses */
    metasiteId: string;
}
interface RawHttpResponse {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry[];
}
interface HeadersEntry {
    key?: string;
    value?: string;
}
interface V1BuyerInfoNonNullableFields {
    visitorId: string;
    memberId: string;
    userId: string;
}
interface VatIdNonNullableFields {
    _id: string;
    type: VatType;
}
interface FullAddressContactDetailsNonNullableFields {
    vatId?: VatIdNonNullableFields;
}
interface MultiCurrencyPriceNonNullableFields {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface ActivityNonNullableFields {
    type: ActivityType;
}
interface AbandonedCheckoutNonNullableFields {
    _id: string;
    status: Status;
    buyerInfo?: V1BuyerInfoNonNullableFields;
    contactDetails?: FullAddressContactDetailsNonNullableFields;
    currency: string;
    totalPrice?: MultiCurrencyPriceNonNullableFields;
    activities: ActivityNonNullableFields[];
    checkoutUrl: string;
    subtotalPrice?: MultiCurrencyPriceNonNullableFields;
}
interface GetAbandonedCheckoutResponseNonNullableFields {
    abandonedCheckout?: AbandonedCheckoutNonNullableFields;
}
interface QueryAbandonedCheckoutsResponseNonNullableFields {
    results: AbandonedCheckoutNonNullableFields[];
    abandonedCheckouts: AbandonedCheckoutNonNullableFields[];
}
interface SearchAbandonedCheckoutsResponseNonNullableFields {
    abandonedCheckouts: AbandonedCheckoutNonNullableFields[];
}
interface HeadersEntryNonNullableFields {
    key: string;
    value: string;
}
interface RawHttpResponseNonNullableFields {
    body: Uint8Array;
    headers: HeadersEntryNonNullableFields[];
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getAbandonedCheckout(): __PublicMethodMetaInfo<'GET', {
    abandonedCheckoutId: string;
}, GetAbandonedCheckoutRequest, GetAbandonedCheckoutRequest$1, GetAbandonedCheckoutResponse & GetAbandonedCheckoutResponseNonNullableFields, GetAbandonedCheckoutResponse$1 & GetAbandonedCheckoutResponseNonNullableFields$1>;
declare function deleteAbandonedCheckout(): __PublicMethodMetaInfo<'DELETE', {
    abandonedCheckoutId: string;
}, DeleteAbandonedCheckoutRequest, DeleteAbandonedCheckoutRequest$1, DeleteAbandonedCheckoutResponse, DeleteAbandonedCheckoutResponse$1>;
declare function queryAbandonedCheckouts(): __PublicMethodMetaInfo<'POST', {}, QueryAbandonedCheckoutsRequest, QueryAbandonedCheckoutsRequest$1, QueryAbandonedCheckoutsResponse & QueryAbandonedCheckoutsResponseNonNullableFields, QueryAbandonedCheckoutsResponse$1 & QueryAbandonedCheckoutsResponseNonNullableFields$1>;
declare function searchAbandonedCheckouts(): __PublicMethodMetaInfo<'POST', {}, SearchAbandonedCheckoutsRequest, SearchAbandonedCheckoutsRequest$1, SearchAbandonedCheckoutsResponse & SearchAbandonedCheckoutsResponseNonNullableFields, SearchAbandonedCheckoutsResponse$1 & SearchAbandonedCheckoutsResponseNonNullableFields$1>;
declare function redirectToCheckout(): __PublicMethodMetaInfo<'GET', {
    abandonedCheckoutId: string;
}, RedirectToCheckoutRequest, RedirectToCheckoutRequest$1, RawHttpResponse & RawHttpResponseNonNullableFields, RawHttpResponse$1 & RawHttpResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, deleteAbandonedCheckout, getAbandonedCheckout, queryAbandonedCheckouts, redirectToCheckout, searchAbandonedCheckouts };
