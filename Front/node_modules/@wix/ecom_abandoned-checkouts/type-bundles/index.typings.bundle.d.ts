interface AbandonedCheckout {
    /** Abandoned checkout ID. */
    _id?: string;
    /** Date and time the abandoned checkout was created. */
    _createdDate?: Date | null;
    /** Date and time the abandoned checkout was updated. */
    _updatedDate?: Date | null;
    /** The associated checkout ID. */
    checkoutId?: string | null;
    /** The associated cart ID. */
    cartId?: string | null;
    /** Status of the abandoned checkout. */
    status?: Status;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Buyer information. */
    buyerInfo?: V1BuyerInfo;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
    /** The store's currency. */
    currency?: string;
    /** Currency the buyer used in checkout. */
    conversionCurrency?: string | null;
    /** Total price after discounts, gift cards, and tax. */
    totalPrice?: MultiCurrencyPrice;
    /**
     * List of all automation activities performed by [Wix Automations](https://support.wix.com/en/article/wix-automations-getting-started) regarding the abandoned checkout.
     * Wix Automations updates the `activities` field for each actvity in the automation flow. Only relevant if you've set up [automations in the Dashboard](https://support.wix.com/en/article/wix-automations-creating-a-new-automation). Read more about `activities` in the [introduction](https://www.wix.com/velo/reference/wix-ecom-backend/abandonedcheckout/introduction).
     */
    activities?: Activity[];
    /** Date and time the abandoned checkout was recovered. */
    checkoutRecoveredDate?: Date | null;
    /** Checkout URL. */
    checkoutUrl?: string;
    /** Subtotal price of all line items, before discounts and before tax. */
    subtotalPrice?: MultiCurrencyPrice;
}
declare enum ActivityType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    SCHEDULED = "SCHEDULED",
    EMAIL_SENT = "EMAIL_SENT",
    EMAIL_NOT_SENT = "EMAIL_NOT_SENT",
    NOTIFICATION_SENT = "NOTIFICATION_SENT",
    TASK_CREATED = "TASK_CREATED"
}
/** Status of the abandoned checkout. */
declare enum Status {
    ABANDONED = "ABANDONED",
    RECOVERED = "RECOVERED"
}
/** Buyer information. */
interface V1BuyerInfo extends V1BuyerInfoIdOneOf {
    /** Visitor ID (if the site visitor is **not** a site member). */
    visitorId?: string;
    /** Member ID (if the site visitor is a site member). */
    memberId?: string;
    /** User ID (if the site visitor is a site owner or collaborator). */
    userId?: string;
    /**
     * Contact ID. For more information, see the [Contacts API](https://www.wix.com/velo/reference/wix-crm-v2/contacts).
     * @readonly
     */
    contactId?: string | null;
    /**
     * Buyer email address.
     * Max: `50`
     */
    email?: string | null;
}
/** @oneof */
interface V1BuyerInfoIdOneOf {
    /** Visitor ID (if the site visitor is **not** a site member). */
    visitorId?: string;
    /** Member ID (if the site visitor is a site member). */
    memberId?: string;
    /** User ID (if the site visitor is a site owner or collaborator). */
    userId?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails {
    /**
     * First name.
     * Max length: `100`
     */
    firstName?: string | null;
    /**
     * Last name.
     * Max length: `100`
     */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /**
     * Company name.
     * Max length: `50`
     */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId;
}
interface VatId {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType;
}
/** tax info types */
declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface MultiCurrencyPrice {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface Activity {
    /** Date and time the automation activity was created. */
    _createdDate?: Date | null;
    /**
     * Automation activity type.
     *
     * Supported properties: `UNKNOWN_TYPE`, `SCHEDULED`, `EMAIL_SENT`, `EMAIL_NOT_SENT`, `NOTIFICATION_SENT`, `TASK_CREATED`
     */
    type?: ActivityType;
}
interface CartAbandonedEvent {
    cartId?: string;
    /**
     * Time the cart was created
     * @readonly
     */
    creationTime?: Date | null;
    /**
     * Time the cart was abandoned
     * @readonly
     */
    abandonTime?: Date | null;
    /** Buyer information */
    buyerInfo?: BuyerInfo;
    /** Amount of items in cart */
    itemsCount?: number;
    /** Coupon ID (if relevant) */
    couponId?: string;
    /** Subtotal of all line items in cart, not before shipping and taxes */
    totals?: Totals;
    /** Checkout URL - checkout with the abandoned cart details */
    checkoutUrl?: string;
}
interface BuyerInfo {
    /** Wix customer ID */
    _id?: string;
    /** Customer information */
    identityType?: Identity;
    /** Customer's email address */
    email?: string | null;
    /** Customer's phone number */
    phone?: string | null;
    /** Customer's first name */
    firstName?: string | null;
    /** Customer's last name */
    lastName?: string | null;
}
declare enum Identity {
    /** Customer is the site owner */
    ADMIN = "ADMIN",
    /** Customer is logged in */
    MEMBER = "MEMBER",
    /** Customer is not logged in */
    VISITOR = "VISITOR",
    /** Contact was created for the customer */
    CONTACT = "CONTACT"
}
interface Totals {
    /** Subtotal of all line items in cart, without shipping and taxes */
    subtotal?: number | null;
    /** Total cart price */
    total?: number | null;
    /** Formatted total cart price includes currency symbol */
    formattedTotal?: string;
}
interface CartRecoveredEvent {
    cartId?: string;
    /**
     * Time the cart was recovered
     * @readonly
     */
    recoveredTime?: Date | null;
    /**
     * Time the cart was created
     * @readonly
     */
    creationTime?: Date | null;
    /**
     * Time the cart was abandoned
     * @readonly
     */
    abandonedTime?: Date | null;
}
interface GetAbandonedCheckoutRequest {
    /** Abandoned checkout ID. */
    abandonedCheckoutId: string;
}
interface GetAbandonedCheckoutResponse {
    /** The requested abandoned checkout. */
    abandonedCheckout?: AbandonedCheckout;
}
interface DeleteAbandonedCheckoutRequest {
    /** Id of the abandoned checkout to delete */
    abandonedCheckoutId: string;
}
interface DeleteAbandonedCheckoutResponse {
}
interface QueryAbandonedCheckoutsRequest {
    /** Query options. */
    query: QueryV2;
}
interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryAbandonedCheckoutsResponse {
    /**
     * __Deprecated.__ Use `abandonedCheckouts` instead.
     * @deprecated
     */
    results?: AbandonedCheckout[];
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout[];
    /** Details on the paged set of results returned. */
    metadata?: PagingMetadataV2;
}
interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface SearchAbandonedCheckoutsRequest {
    /** WQL query expression. */
    search?: Search;
}
interface Search extends SearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: CommonPaging;
    /** Cursor pointing to page of results. Can't be used together with 'paging'. 'cursor_paging.cursor' can not be used together with 'filter' or 'sort' */
    cursorPaging?: CommonCursorPaging;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: CommonSorting[];
    /** free text to match in searchable fields */
    search?: SearchDetails;
}
/** @oneof */
interface SearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: CommonPaging;
    /** Cursor pointing to page of results. Can't be used together with 'paging'. 'cursor_paging.cursor' can not be used together with 'filter' or 'sort' */
    cursorPaging?: CommonCursorPaging;
}
interface CommonSorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: CommonSortOrder;
}
declare enum CommonSortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface SearchDetails {
    /** boolean search mode */
    mode?: Mode;
    /** search term or expression */
    expression?: string | null;
    /** fields to search in. if empty - server will search in own default fields */
    fields?: string[];
    /** flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
declare enum Mode {
    /** any */
    OR = "OR",
    /** all */
    AND = "AND"
}
interface CommonPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CommonCursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface SearchAbandonedCheckoutsResponse {
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CommonPagingMetadataV2;
}
interface CommonPagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: CommonCursors;
}
interface CommonCursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface AddAbandonedCheckoutActivityRequest {
    /** Id of the abandoned checkout to update */
    abandonedCheckoutId?: string | null;
    /** The type of the activity to add */
    activityType?: ActivityType;
}
interface AddAbandonedCheckoutActivityResponse {
    /** The updated abandoned checkout with the added activity */
    abandonedCheckout?: AbandonedCheckout;
}
interface Task {
    key?: TaskKey;
    executeAt?: Date | null;
    payload?: string | null;
}
interface TaskKey {
    appId?: string;
    instanceId?: string;
    subjectId?: string | null;
}
interface TaskAction extends TaskActionActionOneOf {
    complete?: Complete;
    cancel?: Cancel;
    reschedule?: Reschedule;
}
/** @oneof */
interface TaskActionActionOneOf {
    complete?: Complete;
    cancel?: Cancel;
    reschedule?: Reschedule;
}
interface Complete {
}
interface Cancel {
}
interface Reschedule {
    executeAt?: Date | null;
    payload?: string | null;
}
interface RedirectToCheckoutRequest {
    /** abandoned checkout id */
    abandonedCheckoutId: string;
    /** Identifier of the metaSite this checkout uses */
    metasiteId: string;
}
interface RawHttpResponse {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry[];
}
interface HeadersEntry {
    key?: string;
    value?: string;
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface Empty {
}
/** Triggered when an abandoned checkout is recovered (the customer completes the checkout). */
interface AbandonedCheckoutRecovered {
    abandonedCheckout?: AbandonedCheckout;
}
interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface V1BuyerInfoNonNullableFields {
    visitorId: string;
    memberId: string;
    userId: string;
}
interface VatIdNonNullableFields {
    _id: string;
    type: VatType;
}
interface FullAddressContactDetailsNonNullableFields {
    vatId?: VatIdNonNullableFields;
}
interface MultiCurrencyPriceNonNullableFields {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface ActivityNonNullableFields {
    type: ActivityType;
}
interface AbandonedCheckoutNonNullableFields {
    _id: string;
    status: Status;
    buyerInfo?: V1BuyerInfoNonNullableFields;
    contactDetails?: FullAddressContactDetailsNonNullableFields;
    currency: string;
    totalPrice?: MultiCurrencyPriceNonNullableFields;
    activities: ActivityNonNullableFields[];
    checkoutUrl: string;
    subtotalPrice?: MultiCurrencyPriceNonNullableFields;
}
interface GetAbandonedCheckoutResponseNonNullableFields {
    abandonedCheckout?: AbandonedCheckoutNonNullableFields;
}
interface QueryAbandonedCheckoutsResponseNonNullableFields {
    results: AbandonedCheckoutNonNullableFields[];
    abandonedCheckouts: AbandonedCheckoutNonNullableFields[];
}
interface SearchAbandonedCheckoutsResponseNonNullableFields {
    abandonedCheckouts: AbandonedCheckoutNonNullableFields[];
}
interface HeadersEntryNonNullableFields {
    key: string;
    value: string;
}
interface RawHttpResponseNonNullableFields {
    body: Uint8Array;
    headers: HeadersEntryNonNullableFields[];
}
interface BaseEventMetadata {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface AbandonedCheckoutRecoveredEnvelope {
    data: AbandonedCheckoutRecovered;
    metadata: EventMetadata;
}
/**
 * Triggered when an abandoned checkout is recovered (the customer completes the checkout).
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId ECOM.ABANDONED_CHECKOUT_READ
 * @webhook
 * @eventType wix.ecom.v1.abandoned_checkout_recovered
 * @documentationMaturity preview
 */
declare function onAbandonedCheckoutRecovered(handler: (event: AbandonedCheckoutRecoveredEnvelope) => void | Promise<void>): void;
/**
 * Retrieves an abandoned checkout.
 * @param abandonedCheckoutId - Abandoned checkout ID.
 * @public
 * @documentationMaturity preview
 * @requiredField abandonedCheckoutId
 * @permissionId ECOM.ABANDONED_CHECKOUT_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns The requested abandoned checkout.
 */
declare function getAbandonedCheckout(abandonedCheckoutId: string): Promise<AbandonedCheckout & AbandonedCheckoutNonNullableFields>;
/**
 * Delete an AbandonedCheckout
 * @param abandonedCheckoutId - Id of the abandoned checkout to delete
 * @public
 * @documentationMaturity preview
 * @requiredField abandonedCheckoutId
 * @permissionId ECOM.ABANDONED_CHECKOUT_DELETE
 */
declare function deleteAbandonedCheckout(abandonedCheckoutId: string): Promise<void>;
/**
 * Creates a query to retrieve a list of abandoned checkouts.
 *
 * The `queryAbandonedCheckouts()` function builds a query to retrieve a list of abandoned checkouts and returns a `ResultsQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
 *
 * You can refine the query by chaining `ResultsQueryBuilder` functions onto the query. `ResultsQueryBuilder` functions enable you to sort, filter, and control the results `queryAbandonedCheckouts()` returns.
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId ECOM.ABANDONED_CHECKOUT_READ
 * @applicableIdentity APP
 */
declare function queryAbandonedCheckouts(): AbandonedCheckoutsQueryBuilder;
interface QueryCursorResult {
    cursors: CommonCursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface AbandonedCheckoutsQueryResult extends QueryCursorResult {
    items: AbandonedCheckout[];
    query: AbandonedCheckoutsQueryBuilder;
    next: () => Promise<AbandonedCheckoutsQueryResult>;
    prev: () => Promise<AbandonedCheckoutsQueryResult>;
}
interface AbandonedCheckoutsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate' | '_updatedDate', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate' | '_updatedDate', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate' | '_updatedDate', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate' | '_updatedDate', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: string) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: any[]) => AbandonedCheckoutsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: boolean) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email'>) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email'>) => AbandonedCheckoutsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => AbandonedCheckoutsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => AbandonedCheckoutsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<AbandonedCheckoutsQueryResult>;
}
/**
 * Retrieves a list of abandoned checkouts, given the provided paging, filtering, searchDetails and sorting. Up to 100 abandoned checkouts can be returned per request.
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.ABANDONED_CHECKOUT_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 */
declare function searchAbandonedCheckouts(options?: SearchAbandonedCheckoutsOptions): Promise<SearchAbandonedCheckoutsResponse & SearchAbandonedCheckoutsResponseNonNullableFields>;
interface SearchAbandonedCheckoutsOptions {
    /** WQL query expression. */
    search?: Search;
}
/**
 * Redirects the abandoned checkout to the checkout page.
 * @param abandonedCheckoutId - abandoned checkout id
 * @param metasiteId - Identifier of the metaSite this checkout uses
 * @public
 * @documentationMaturity preview
 * @requiredField abandonedCheckoutId
 * @requiredField metasiteId
 */
declare function redirectToCheckout(abandonedCheckoutId: string, metasiteId: string): Promise<RawHttpResponse & RawHttpResponseNonNullableFields>;

export { type AbandonedCheckout, type AbandonedCheckoutNonNullableFields, type AbandonedCheckoutRecovered, type AbandonedCheckoutRecoveredEnvelope, type AbandonedCheckoutsQueryBuilder, type AbandonedCheckoutsQueryResult, type ActionEvent, type Activity, ActivityType, type AddAbandonedCheckoutActivityRequest, type AddAbandonedCheckoutActivityResponse, type BaseEventMetadata, type BuyerInfo, type Cancel, type CartAbandonedEvent, type CartRecoveredEvent, type CommonCursorPaging, type CommonCursors, type CommonPaging, type CommonPagingMetadataV2, CommonSortOrder, type CommonSorting, type Complete, type CursorPaging, type Cursors, type DeleteAbandonedCheckoutRequest, type DeleteAbandonedCheckoutResponse, type DomainEvent, type DomainEventBodyOneOf, type Empty, type EntityCreatedEvent, type EntityDeletedEvent, type EntityUpdatedEvent, type EventMetadata, type FullAddressContactDetails, type GetAbandonedCheckoutRequest, type GetAbandonedCheckoutResponse, type GetAbandonedCheckoutResponseNonNullableFields, type HeadersEntry, type IdentificationData, type IdentificationDataIdOneOf, Identity, type MessageEnvelope, Mode, type MultiCurrencyPrice, type Paging, type PagingMetadataV2, type QueryAbandonedCheckoutsRequest, type QueryAbandonedCheckoutsResponse, type QueryAbandonedCheckoutsResponseNonNullableFields, type QueryV2, type QueryV2PagingMethodOneOf, type RawHttpResponse, type RawHttpResponseNonNullableFields, type RedirectToCheckoutRequest, type Reschedule, type RestoreInfo, type Search, type SearchAbandonedCheckoutsOptions, type SearchAbandonedCheckoutsRequest, type SearchAbandonedCheckoutsResponse, type SearchAbandonedCheckoutsResponseNonNullableFields, type SearchDetails, type SearchPagingMethodOneOf, SortOrder, type Sorting, Status, type Task, type TaskAction, type TaskActionActionOneOf, type TaskKey, type Totals, type V1BuyerInfo, type V1BuyerInfoIdOneOf, type VatId, VatType, WebhookIdentityType, deleteAbandonedCheckout, getAbandonedCheckout, onAbandonedCheckoutRecovered, queryAbandonedCheckouts, redirectToCheckout, searchAbandonedCheckouts };
