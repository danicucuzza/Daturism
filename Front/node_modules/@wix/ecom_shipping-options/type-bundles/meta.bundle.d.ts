interface ShippingOption$1 {
    /**
     * ShippingOption ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the ShippingOption is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the ShippingOption.
     *
     * Ignored when creating a ShippingOption.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the ShippingOption was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the ShippingOption was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Associated delivery region id. */
    deliveryRegionId?: string;
    /** Delivery option configured for the ShippingOption */
    title?: string | null;
    estimateDeliveryTime?: string | null;
    /** at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates$1[];
    /** Data Extensions */
    extendedFields?: ExtendedFields$1;
}
interface ConditionalRates$1 {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition$1[];
    amount?: string;
}
interface Condition$1 {
    type?: ConditionType$1;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator$1;
}
declare enum ConditionType$1 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
declare enum LogicalOperator$1 {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
interface ExtendedFields$1 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateShippingOptionRequest$1 {
    /** ShippingOption to be created. */
    shippingOption: ShippingOption$1;
}
interface CreateShippingOptionResponse$1 {
    /** The created ShippingOption. */
    shippingOption?: ShippingOption$1;
}
interface GetShippingOptionRequest$1 {
    /** ID of the ShippingOption to retrieve. */
    shippingOptionId: string;
}
interface GetShippingOptionResponse$1 {
    /** The requested ShippingOption. */
    shippingOption?: ShippingOption$1;
}
interface UpdateShippingOptionRequest$1 {
    /** ShippingOption to be updated, may be partial. */
    shippingOption: ShippingOption$1;
}
interface UpdateShippingOptionResponse$1 {
    /** Updated ShippingOption. */
    shippingOption?: ShippingOption$1;
}
interface DeleteShippingOptionRequest$1 {
    /** Id of the ShippingOption to delete. */
    shippingOptionId: string;
}
interface DeleteShippingOptionResponse$1 {
}
interface QueryShippingOptionsRequest$1 {
    /** WQL expression. */
    query?: CursorQuery$1;
}
interface CursorQuery$1 extends CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$1[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryShippingOptionsResponse$1 {
    /** List of ShippingOptions. */
    shippingOptions?: ShippingOption$1[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$1;
}
interface CursorPagingMetadata$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$1;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateExtendedFieldsRequest$1 {
    /** ID of the entity to update. */
    id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse$1 {
    /** Updated ShippingOption. */
    shippingOption?: ShippingOption$1;
}
interface ConditionNonNullableFields$1 {
    type: ConditionType$1;
    value: string;
    operator: LogicalOperator$1;
}
interface ConditionalRatesNonNullableFields$1 {
    conditions: ConditionNonNullableFields$1[];
    amount: string;
}
interface ShippingOptionNonNullableFields$1 {
    deliveryRegionId: string;
    rates: ConditionalRatesNonNullableFields$1[];
}
interface CreateShippingOptionResponseNonNullableFields$1 {
    shippingOption?: ShippingOptionNonNullableFields$1;
}
interface GetShippingOptionResponseNonNullableFields$1 {
    shippingOption?: ShippingOptionNonNullableFields$1;
}
interface UpdateShippingOptionResponseNonNullableFields$1 {
    shippingOption?: ShippingOptionNonNullableFields$1;
}
interface QueryShippingOptionsResponseNonNullableFields$1 {
    shippingOptions: ShippingOptionNonNullableFields$1[];
}
interface UpdateExtendedFieldsResponseNonNullableFields$1 {
    shippingOption?: ShippingOptionNonNullableFields$1;
}

interface ShippingOption {
    /**
     * ShippingOption ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the ShippingOption is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the ShippingOption.
     *
     * Ignored when creating a ShippingOption.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the ShippingOption was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the ShippingOption was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Associated delivery region id. */
    deliveryRegionId?: string;
    /** Delivery option configured for the ShippingOption */
    title?: string | null;
    estimateDeliveryTime?: string | null;
    /** at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates[];
    /** Data Extensions */
    extendedFields?: ExtendedFields;
}
interface ConditionalRates {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition[];
    amount?: string;
}
interface Condition {
    type?: ConditionType;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator;
}
declare enum ConditionType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
declare enum LogicalOperator {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateShippingOptionRequest {
    /** ShippingOption to be created. */
    shippingOption: ShippingOption;
}
interface CreateShippingOptionResponse {
    /** The created ShippingOption. */
    shippingOption?: ShippingOption;
}
interface GetShippingOptionRequest {
    /** ID of the ShippingOption to retrieve. */
    shippingOptionId: string;
}
interface GetShippingOptionResponse {
    /** The requested ShippingOption. */
    shippingOption?: ShippingOption;
}
interface UpdateShippingOptionRequest {
    /** ShippingOption to be updated, may be partial. */
    shippingOption: ShippingOption;
}
interface UpdateShippingOptionResponse {
    /** Updated ShippingOption. */
    shippingOption?: ShippingOption;
}
interface DeleteShippingOptionRequest {
    /** Id of the ShippingOption to delete. */
    shippingOptionId: string;
}
interface DeleteShippingOptionResponse {
}
interface QueryShippingOptionsRequest {
    /** WQL expression. */
    query?: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryShippingOptionsResponse {
    /** List of ShippingOptions. */
    shippingOptions?: ShippingOption[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface UpdateExtendedFieldsRequest {
    /** ID of the entity to update. */
    _id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse {
    /** Updated ShippingOption. */
    shippingOption?: ShippingOption;
}
interface ConditionNonNullableFields {
    type: ConditionType;
    value: string;
    operator: LogicalOperator;
}
interface ConditionalRatesNonNullableFields {
    conditions: ConditionNonNullableFields[];
    amount: string;
}
interface ShippingOptionNonNullableFields {
    deliveryRegionId: string;
    rates: ConditionalRatesNonNullableFields[];
}
interface CreateShippingOptionResponseNonNullableFields {
    shippingOption?: ShippingOptionNonNullableFields;
}
interface GetShippingOptionResponseNonNullableFields {
    shippingOption?: ShippingOptionNonNullableFields;
}
interface UpdateShippingOptionResponseNonNullableFields {
    shippingOption?: ShippingOptionNonNullableFields;
}
interface QueryShippingOptionsResponseNonNullableFields {
    shippingOptions: ShippingOptionNonNullableFields[];
}
interface UpdateExtendedFieldsResponseNonNullableFields {
    shippingOption?: ShippingOptionNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createShippingOption(): __PublicMethodMetaInfo<'POST', {}, CreateShippingOptionRequest, CreateShippingOptionRequest$1, CreateShippingOptionResponse & CreateShippingOptionResponseNonNullableFields, CreateShippingOptionResponse$1 & CreateShippingOptionResponseNonNullableFields$1>;
declare function getShippingOption(): __PublicMethodMetaInfo<'GET', {
    shippingOptionId: string;
}, GetShippingOptionRequest, GetShippingOptionRequest$1, GetShippingOptionResponse & GetShippingOptionResponseNonNullableFields, GetShippingOptionResponse$1 & GetShippingOptionResponseNonNullableFields$1>;
declare function updateShippingOption(): __PublicMethodMetaInfo<'PATCH', {
    shippingOptionId: string;
}, UpdateShippingOptionRequest, UpdateShippingOptionRequest$1, UpdateShippingOptionResponse & UpdateShippingOptionResponseNonNullableFields, UpdateShippingOptionResponse$1 & UpdateShippingOptionResponseNonNullableFields$1>;
declare function deleteShippingOption(): __PublicMethodMetaInfo<'DELETE', {
    shippingOptionId: string;
}, DeleteShippingOptionRequest, DeleteShippingOptionRequest$1, DeleteShippingOptionResponse, DeleteShippingOptionResponse$1>;
declare function queryShippingOptions(): __PublicMethodMetaInfo<'GET', {}, QueryShippingOptionsRequest, QueryShippingOptionsRequest$1, QueryShippingOptionsResponse & QueryShippingOptionsResponseNonNullableFields, QueryShippingOptionsResponse$1 & QueryShippingOptionsResponseNonNullableFields$1>;
declare function updateExtendedFields(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, UpdateExtendedFieldsRequest, UpdateExtendedFieldsRequest$1, UpdateExtendedFieldsResponse & UpdateExtendedFieldsResponseNonNullableFields, UpdateExtendedFieldsResponse$1 & UpdateExtendedFieldsResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, createShippingOption, deleteShippingOption, getShippingOption, queryShippingOptions, updateExtendedFields, updateShippingOption };
