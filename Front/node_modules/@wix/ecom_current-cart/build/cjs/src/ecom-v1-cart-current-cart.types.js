"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookIdentityType = exports.ChannelType = exports.SuggestedFix = exports.NameInLineItem = exports.NameInOther = exports.Severity = exports.RuleType = exports.DiscountType = exports.ChargeType = exports.PickupMethod = exports.FallbackReason = exports.ManualCalculationReason = exports.RateType = exports.JurisdictionType = exports.VatType = exports.WeightUnit = exports.TaxableAddressType = exports.PaymentOptionType = exports.FileType = exports.SubscriptionFrequency = exports.ItemTypeItemType = exports.ItemAvailabilityStatus = exports.DescriptionLineType = void 0;
var DescriptionLineType;
(function (DescriptionLineType) {
    DescriptionLineType["UNRECOGNISED"] = "UNRECOGNISED";
    DescriptionLineType["PLAIN_TEXT"] = "PLAIN_TEXT";
    DescriptionLineType["COLOR"] = "COLOR";
})(DescriptionLineType || (exports.DescriptionLineType = DescriptionLineType = {}));
var ItemAvailabilityStatus;
(function (ItemAvailabilityStatus) {
    ItemAvailabilityStatus["AVAILABLE"] = "AVAILABLE";
    ItemAvailabilityStatus["NOT_FOUND"] = "NOT_FOUND";
    /** Not in stock */
    ItemAvailabilityStatus["NOT_AVAILABLE"] = "NOT_AVAILABLE";
    /** Available quantity is less than requested */
    ItemAvailabilityStatus["PARTIALLY_AVAILABLE"] = "PARTIALLY_AVAILABLE";
})(ItemAvailabilityStatus || (exports.ItemAvailabilityStatus = ItemAvailabilityStatus = {}));
var ItemTypeItemType;
(function (ItemTypeItemType) {
    ItemTypeItemType["UNRECOGNISED"] = "UNRECOGNISED";
    ItemTypeItemType["PHYSICAL"] = "PHYSICAL";
    ItemTypeItemType["DIGITAL"] = "DIGITAL";
    ItemTypeItemType["GIFT_CARD"] = "GIFT_CARD";
    ItemTypeItemType["SERVICE"] = "SERVICE";
})(ItemTypeItemType || (exports.ItemTypeItemType = ItemTypeItemType = {}));
/** Frequency unit of recurring payment */
var SubscriptionFrequency;
(function (SubscriptionFrequency) {
    SubscriptionFrequency["UNDEFINED"] = "UNDEFINED";
    SubscriptionFrequency["DAY"] = "DAY";
    SubscriptionFrequency["WEEK"] = "WEEK";
    SubscriptionFrequency["MONTH"] = "MONTH";
    SubscriptionFrequency["YEAR"] = "YEAR";
})(SubscriptionFrequency || (exports.SubscriptionFrequency = SubscriptionFrequency = {}));
var FileType;
(function (FileType) {
    FileType["UNSPECIFIED"] = "UNSPECIFIED";
    FileType["SECURE_PICTURE"] = "SECURE_PICTURE";
    FileType["SECURE_VIDEO"] = "SECURE_VIDEO";
    FileType["SECURE_DOCUMENT"] = "SECURE_DOCUMENT";
    FileType["SECURE_MUSIC"] = "SECURE_MUSIC";
    FileType["SECURE_ARCHIVE"] = "SECURE_ARCHIVE";
})(FileType || (exports.FileType = FileType = {}));
/** Type of selected payment option for catalog item */
var PaymentOptionType;
(function (PaymentOptionType) {
    /** The entire payment for this item happens as part of the checkout. */
    PaymentOptionType["FULL_PAYMENT_ONLINE"] = "FULL_PAYMENT_ONLINE";
    /** The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods. */
    PaymentOptionType["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    PaymentOptionType["MEMBERSHIP"] = "MEMBERSHIP";
    /** Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`. */
    PaymentOptionType["DEPOSIT_ONLINE"] = "DEPOSIT_ONLINE";
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    PaymentOptionType["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
})(PaymentOptionType || (exports.PaymentOptionType = PaymentOptionType = {}));
var TaxableAddressType;
(function (TaxableAddressType) {
    TaxableAddressType["UNKNOWN_TAXABLE_ADDRESS"] = "UNKNOWN_TAXABLE_ADDRESS";
    TaxableAddressType["BUSINESS"] = "BUSINESS";
    TaxableAddressType["BILLING"] = "BILLING";
    TaxableAddressType["SHIPPING"] = "SHIPPING";
})(TaxableAddressType || (exports.TaxableAddressType = TaxableAddressType = {}));
var WeightUnit;
(function (WeightUnit) {
    /** Weight unit can't be classified, due to an error */
    WeightUnit["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
    /** Kilograms */
    WeightUnit["KG"] = "KG";
    /** Pounds */
    WeightUnit["LB"] = "LB";
})(WeightUnit || (exports.WeightUnit = WeightUnit = {}));
/** tax info types */
var VatType;
(function (VatType) {
    VatType["UNSPECIFIED"] = "UNSPECIFIED";
    /** CPF - for individual tax payers. */
    VatType["CPF"] = "CPF";
    /** CNPJ - for corporations */
    VatType["CNPJ"] = "CNPJ";
})(VatType || (exports.VatType = VatType = {}));
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
var JurisdictionType;
(function (JurisdictionType) {
    JurisdictionType["UNDEFINED"] = "UNDEFINED";
    JurisdictionType["COUNTRY"] = "COUNTRY";
    JurisdictionType["STATE"] = "STATE";
    JurisdictionType["COUNTY"] = "COUNTY";
    JurisdictionType["CITY"] = "CITY";
    JurisdictionType["SPECIAL"] = "SPECIAL";
})(JurisdictionType || (exports.JurisdictionType = JurisdictionType = {}));
var RateType;
(function (RateType) {
    /** no tax being collected for this request due to location of purchase */
    RateType["NO_TAX_COLLECTED"] = "NO_TAX_COLLECTED";
    /** manual rate used for calculation */
    RateType["MANUAL_RATE"] = "MANUAL_RATE";
    /** autotax rate used for calculation */
    RateType["AUTO_RATE"] = "AUTO_RATE";
    /** fallback rate used for calculation */
    RateType["FALLBACK_RATE"] = "FALLBACK_RATE";
})(RateType || (exports.RateType = RateType = {}));
var ManualCalculationReason;
(function (ManualCalculationReason) {
    /** user set calculator in Business Manager to be Manual */
    ManualCalculationReason["GLOBAL_SETTING_TO_MANUAL"] = "GLOBAL_SETTING_TO_MANUAL";
    /** specific region is on manual even though Global setting is Auto-tax */
    ManualCalculationReason["REGION_SETTING_TO_MANUAL"] = "REGION_SETTING_TO_MANUAL";
})(ManualCalculationReason || (exports.ManualCalculationReason = ManualCalculationReason = {}));
var FallbackReason;
(function (FallbackReason) {
    /** auto-tax failed to be calculated */
    FallbackReason["AUTO_TAX_FAILED"] = "AUTO_TAX_FAILED";
    /** auto-tax was temporarily deactivated on a system-level */
    FallbackReason["AUTO_TAX_DEACTIVATED"] = "AUTO_TAX_DEACTIVATED";
})(FallbackReason || (exports.FallbackReason = FallbackReason = {}));
var PickupMethod;
(function (PickupMethod) {
    PickupMethod["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
    PickupMethod["STORE_PICKUP"] = "STORE_PICKUP";
    PickupMethod["PICKUP_POINT"] = "PICKUP_POINT";
})(PickupMethod || (exports.PickupMethod = PickupMethod = {}));
var ChargeType;
(function (ChargeType) {
    ChargeType["HANDLING_FEE"] = "HANDLING_FEE";
    ChargeType["INSURANCE"] = "INSURANCE";
})(ChargeType || (exports.ChargeType = ChargeType = {}));
var DiscountType;
(function (DiscountType) {
    DiscountType["GLOBAL"] = "GLOBAL";
    DiscountType["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
    DiscountType["SHIPPING"] = "SHIPPING";
})(DiscountType || (exports.DiscountType = DiscountType = {}));
var RuleType;
(function (RuleType) {
    RuleType["VALIDATION"] = "VALIDATION";
    RuleType["OTHER"] = "OTHER";
    RuleType["MAX"] = "MAX";
    RuleType["MIN"] = "MIN";
    RuleType["MAX_LENGTH"] = "MAX_LENGTH";
    RuleType["MIN_LENGTH"] = "MIN_LENGTH";
    RuleType["MAX_SIZE"] = "MAX_SIZE";
    RuleType["MIN_SIZE"] = "MIN_SIZE";
    RuleType["FORMAT"] = "FORMAT";
    RuleType["DECIMAL_LTE"] = "DECIMAL_LTE";
    RuleType["DECIMAL_GTE"] = "DECIMAL_GTE";
    RuleType["DECIMAL_LT"] = "DECIMAL_LT";
    RuleType["DECIMAL_GT"] = "DECIMAL_GT";
    RuleType["DECIMAL_MAX_SCALE"] = "DECIMAL_MAX_SCALE";
    RuleType["INVALID_ENUM_VALUE"] = "INVALID_ENUM_VALUE";
    RuleType["REQUIRED_FIELD"] = "REQUIRED_FIELD";
    RuleType["FIELD_NOT_ALLOWED"] = "FIELD_NOT_ALLOWED";
    RuleType["ONE_OF_ALIGNMENT"] = "ONE_OF_ALIGNMENT";
})(RuleType || (exports.RuleType = RuleType = {}));
var Severity;
(function (Severity) {
    /** The user is allowed to move forward in the flow. */
    Severity["WARNING"] = "WARNING";
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    Severity["ERROR"] = "ERROR";
})(Severity || (exports.Severity = Severity = {}));
/** Available locations on the webpage */
var NameInOther;
(function (NameInOther) {
    /** default location, in case no specific location is specified */
    NameInOther["OTHER_DEFAULT"] = "OTHER_DEFAULT";
})(NameInOther || (exports.NameInOther = NameInOther = {}));
/** Available locations on the line item */
var NameInLineItem;
(function (NameInLineItem) {
    /** default location, in case no specific location is specified */
    NameInLineItem["LINE_ITEM_DEFAULT"] = "LINE_ITEM_DEFAULT";
})(NameInLineItem || (exports.NameInLineItem = NameInLineItem = {}));
var SuggestedFix;
(function (SuggestedFix) {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    SuggestedFix["UNKNOWN_SUGGESTED_FIX"] = "UNKNOWN_SUGGESTED_FIX";
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    SuggestedFix["REMOVE_LINE_ITEM"] = "REMOVE_LINE_ITEM";
})(SuggestedFix || (exports.SuggestedFix = SuggestedFix = {}));
var ChannelType;
(function (ChannelType) {
    ChannelType["UNSPECIFIED"] = "UNSPECIFIED";
    ChannelType["WEB"] = "WEB";
    ChannelType["POS"] = "POS";
    ChannelType["EBAY"] = "EBAY";
    ChannelType["AMAZON"] = "AMAZON";
    ChannelType["OTHER_PLATFORM"] = "OTHER_PLATFORM";
    ChannelType["WIX_APP_STORE"] = "WIX_APP_STORE";
    ChannelType["WIX_INVOICES"] = "WIX_INVOICES";
    ChannelType["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
    ChannelType["WISH"] = "WISH";
    ChannelType["CLASS_PASS"] = "CLASS_PASS";
    ChannelType["GLOBAL_E"] = "GLOBAL_E";
    ChannelType["FACEBOOK"] = "FACEBOOK";
    ChannelType["ETSY"] = "ETSY";
    ChannelType["TIKTOK"] = "TIKTOK";
    ChannelType["FAIRE_COM"] = "FAIRE_COM";
})(ChannelType || (exports.ChannelType = ChannelType = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
//# sourceMappingURL=ecom-v1-cart-current-cart.types.js.map