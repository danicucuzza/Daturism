/**
 * A tip holds information about how much a customer has tipped, how the tip is
 * distributed among staff, and the associated orderâ€™s line item subtotal.
 */
interface Tip$1 {
    /**
     * ID of the tip. Identical to the `code` of the related `order.additionalFee`.
     * @readonly
     */
    id?: string | null;
    /**
     * Subtotal of all line items from the [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)
     * that's related to the tip. In the response of
     * [Preview Tip](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/preview-tip),
     * there is no related eCommerce order. Then, value of this field corresponds to
     * the sum of all line item prices passed in the request.
     * @readonly
     */
    lineItemSubtotal?: string | null;
    /**
     * Total amount of the tip.
     *
     * Min: `0.00`
     */
    amount?: string | null;
    /**
     * Details about how the tip is shared among staff. Available only if at least
     * one staff member receives part of the tip, and it's not entirely allocated to
     * the business.
     *
     * Max: 50 distributions
     */
    distributions?: TipDistribution$1[];
    /**
     * Undistributed tip amount. Calculated as the difference between `tip.amount`
     * and the sum of all `tip.tipDistributions.amount` values.
     *
     * Min: `0.01`
     * @readonly
     */
    undistributedAmount?: string | null;
}
interface TipDistribution$1 {
    /**
     * ID of the tip distribution.
     * @readonly
     */
    id?: string | null;
    /**
     * ID of the tip associated with the distribution. Matches the corresponding
     * `order.additionalFee.code`.
     * @readonly
     */
    tipId?: string | null;
    /** Information about the business staff receiving the tip distribution. */
    staff?: Staff$1;
    /**
     * Amount of the tip distribution.
     *
     * Min: `0.00`
     */
    amount?: string | null;
    /**
     * Details about the related line items from the
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object).
     *
     * Max: 10 `lineItemInfo` objects
     */
    lineItemInfo?: LineItemInfo$1[];
    /**
     * Details of how the customer is charged for the tip. Available only if the
     * [transcation](https://dev.wix.com/docs/rest/business-management/payments/cashier/payments/transaction/transaction-object)
     * has been created.
     */
    transaction?: Transaction$1;
    /**
     * ID of the [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)
     * associated with the tip distribution. Identical for all distributions that
     * belong to the same tip.
     * @readonly
     */
    orderId?: string | null;
    /**
     * Date and time the distribution was created in
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    createdDate?: Date | null;
}
interface CommonIdentificationData$1 extends CommonIdentificationDataIdOneOf$1 {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /**
     * ID of the [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/introduction)
     * in the site's [CRM by Ascend](https://www.wix.com/ascend/crm) system.
     */
    contactId?: string | null;
}
/** @oneof */
interface CommonIdentificationDataIdOneOf$1 {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum IdentityType$1 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface Staff$1 {
    /**
     * ID of the staff receiving the tip. Matches `staffMemberId` if available, or
     * `identificationData.wixUserId` if not.
     * @readonly
     */
    id?: string | null;
    /**
     * Staff name. Matches `staffMember.name` if the staff is a
     * [Bookings staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/staff-member-object),
     * or the [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/contact-v4/contact-object)'s
     * `info.name` if not.
     *
     * Max: 500 characters
     * @readonly
     */
    name?: string | null;
    /**
     * ID of the [staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/staff-member-object).
     * Available only if the staff is a staff member and not a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    staffMemberId?: string | null;
    /**
     * Identification data. Available only if the staff is a
     * [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/contact-v4/contact-object)
     * on the Wix site. Note that not all site collaborators are also
     * [staff members](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/introduction).
     */
    identificationData?: CommonIdentificationData$1;
}
interface LineItemInfo$1 {
    /**
     * IDs of the line items associated with the tip.
     *
     * Min: 1 character
     * Max: 100 characters
     */
    lineItemId?: string | null;
    /**
     * Information about the line item and the corresponding catalog. Catalogs
     * include Wix Bookings and Wix Stores.
     */
    catalogReference?: CatalogReference$1;
    /**
     * Price of the line item.
     *
     * Min: `0.00`
     */
    price?: string | null;
    /**
     * Name of the line item, which is identical to:
     * + `product.name` for [Stores](https://dev.wix.com/docs/rest/business-solutions/stores/about-wix-stores).
     * + `service.name` for [Bookings](https://dev.wix.com/docs/rest/business-solutions/bookings/about-wix-bookings).
     *
     * Min: 1 character
     * Max: 200 characters
     */
    name?: string | null;
    /**
     * Quantity of the line item.
     *
     * Min: `1`
     * Max: `100000` (one hundred thousand)
     */
    quantity?: number | null;
}
interface CatalogReference$1 {
    /**
     * ID of the line item within its catalog, corresponding to:
     * + `product.id` for [Stores](https://dev.wix.com/docs/rest/business-solutions/stores/about-wix-stores).
     * + `service.id` for [Bookings](https://dev.wix.com/docs/rest/business-solutions/bookings/about-wix-bookings).
     */
    catalogItemId?: string | null;
    /**
     * ID of the [app](https://dev.wix.com/docs/rest/articles/getting-started/wix-business-solutions)
     * to which the catalog belongs.
     *
     * Supported app IDs:
     * + [Wix Tips](https://www.wix.com/app-market/wix-tips): `"869a50c8-dd38-4324-b201-e33dc0747a5f"`
     * + [Wix Stores](https://www.wix.com/app-market/wix-stores): `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + [Wix Bookings](https://www.wix.com/app-market/bookings): `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + [Wix Restaurants Orders](https://www.wix.com/app-market/web-solution/wix-restaurants-orders-new): `"13e8d036-5516-6104-b456-c8466db39542"`
     */
    appId?: string | null;
}
interface Transaction$1 {
    /** ID of the transaction that's associated with the tip distribution. */
    id?: string | null;
    /**
     * Date and time the transaction was created in `YYYY-MM-DDThh:mm:ss.sssZ`
     * format. Isn't identical to the time the customer was actually charged.
     */
    date?: Date | null;
}
interface PreviewTipRequest$1 {
    /**
     * Information about the line items to preview the tip for.
     *
     * Min: 1 line item
     * Max: 50 line items
     */
    lineItemInfo: LineItemInfo$1[];
    /**
     * Information about how to calculate the total tip amount and the distribution
     * amounts.
     */
    tipChoice: TipChoice$1;
    /**
     * ID of the tip settings used to preview the tip. If you don't provide a
     * `tipSettingsId`, the `staffDistributionMethod` is based on the site's
     * default tip settings.
     */
    tipSettingsId?: string | null;
}
interface TipChoice$1 {
    /** Value of the tip choice. */
    value?: string | null;
    /**
     * Type of the tip choice.
     *
     * Supported values:
     * + `UNKNOWN_TIP_TYPE`: There is no information about the tip type.
     * + `PERCENTAGE`: The tip is calculated as a percentage of the subtotal of associated line items.
     * + `AMOUNT`: The tip is a fixed value, pre-configured from the relevant settings presets.
     * + `CUSTOM`: The customer, or the business on behalf of the customer, manually set a tip amount, which may not match any preset values.
     */
    tipType?: TipType$1;
}
declare enum TipType$1 {
    /** There is no information about the tip type. */
    UNKNOWN_TIP_TYPE = "UNKNOWN_TIP_TYPE",
    /** The tip is calculated as a percentage of the subtotal of associated line items. */
    PERCENTAGE = "PERCENTAGE",
    /** The tip is a fixed value, pre-configured from the relevant settings presets. */
    AMOUNT = "AMOUNT",
    /** The customer, or the business on behalf of the customer, manually set a tip amount, which may not match any preset values. */
    CUSTOM = "CUSTOM"
}
interface PreviewTipResponse$1 {
    /** Tip. */
    tip?: Tip$1;
}
interface GetTipByOrderIdRequest$1 {
    /** ID of the order to retrieve the tip for. */
    orderId: string | null;
}
interface GetTipByOrderIdResponse$1 {
    /** Retrieved tip. */
    tip?: Tip$1;
}
interface GetTipByDraftOrderIdRequest$1 {
    /** ID of the draft order to retrieve the tip for. */
    draftOrderId: string | null;
}
interface GetTipByDraftOrderIdResponse$1 {
    /** Retrieved tip. */
    tip?: Tip$1;
}
interface GetTipChoiceRequest$1 {
    /**
     * ID of the [eCommerce purchase flow](https://dev.wix.com/docs/rest/business-solutions/e-commerce/wix-e-commerce-platform-handbook/overview/architecture-data-flow)
     * to retrieve the tip choice for.
     */
    purchaseFlowId: string | null;
}
interface GetTipChoiceResponse$1 {
    /** Tip choice that's currently selected for the given purchase flow. */
    tipChoice?: TipChoice$1;
}
interface UpdateTipChoiceRequest$1 {
    /**
     * Tip choice to select for the purchase flow. The call fails if you provide a
     * value for `tipChoice.tipType` that doesn't match the relevant tip settings
     * configuration. For example:
     * + `AMOUNT` when `tipSettings.tipType` isn't `AMOUNT`.
     * + `PERCENTAGE` when `tipSettings.tipType` isn't `PERCENTAGE`.
     * + `CUSTOM` when `tipSettings.allowCustomTip` is `false`.
     */
    tipChoice: TipChoice$1;
    /**
     * ID of the purchase flow that's associated with the
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/order/introduction)
     */
    purchaseFlowId: string | null;
}
interface UpdateTipChoiceResponse$1 {
    /**
     * Tip choice currently selected in the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)
     * for the given purchase flow.
     */
    tipChoice?: TipChoice$1;
}
interface SetTipOnOrderRequest$1 extends SetTipOnOrderRequestIdentifierOneOf$1 {
    /** ID of the order for which to set the tip. */
    orderId?: string | null;
    /** Tip to set on the order. */
    tip: Tip$1;
}
/** @oneof */
interface SetTipOnOrderRequestIdentifierOneOf$1 {
    /** ID of the order for which to set the tip. */
    orderId?: string | null;
}
interface SetTipOnOrderResponse$1 {
    /** Set tip. */
    tip?: Tip$1;
    /** Information about the order on which the tip was set. */
    orderInfo?: OrderInfo$1;
}
interface OrderInfo$1 extends OrderInfoIdentifierOneOf$1 {
    /** Order ID. */
    orderId?: string | null;
    /** ID of the order's additional fee that's associated with the tip. */
    additionalFeeId?: string | null;
    /** Price of the order's additional fee that's associated with the tip. */
    additionalFeePrice?: Price$1;
}
/** @oneof */
interface OrderInfoIdentifierOneOf$1 {
    /** Order ID. */
    orderId?: string | null;
}
interface Price$1 {
    /** Amount of the additional fee that's associated with the tip. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     *
     * Max: 100 characters
     * @readonly
     */
    formattedAmount?: string;
}
interface RemoveTipFromOrderRequest$1 extends RemoveTipFromOrderRequestIdentifierOneOf$1 {
    /** ID of the order from which to remove the tip. */
    orderId?: string | null;
}
/** @oneof */
interface RemoveTipFromOrderRequestIdentifierOneOf$1 {
    /** ID of the order from which to remove the tip. */
    orderId?: string | null;
}
interface RemoveTipFromOrderResponse$1 {
    /** Information about the order from which the tip was removed. */
    orderInfo?: OrderInfo$1;
}
interface AddTipDistributionsToOrderRequest$1 extends AddTipDistributionsToOrderRequestIdentifierOneOf$1 {
    /** ID of the order for which to add tip distributions. */
    orderId?: string | null;
    /** Tip distributions to add to the order. */
    tipDistributions: TipDistribution$1[];
}
/** @oneof */
interface AddTipDistributionsToOrderRequestIdentifierOneOf$1 {
    /** ID of the order for which to add tip distributions. */
    orderId?: string | null;
}
interface AddTipDistributionsToOrderResponse$1 {
    /** Tip distributions that were added to the order. */
    tipDistributions?: TipDistribution$1[];
    /** Information about the order to which the tip distributions were added. */
    orderInfo?: OrderInfo$1;
}
interface QueryTipDistributionsRequest$1 {
    /** WQL expression. */
    query: CursorQuery$1;
}
interface CursorQuery$1 extends CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$1[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryTipDistributionsResponse$1 {
    /** Retrieved tip distributions. */
    tipDistributions?: TipDistribution$1[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$1;
}
interface CursorPagingMetadata$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors$1;
    /**
     * Indicates if there are more results after the current page.
     * If `true`, another page of results can be retrieved.
     * If `false`, this is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$1 {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
interface SumTipDistributionAmountsRequest$1 {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter: Record<string, any> | null;
}
interface SumTipDistributionAmountsResponse$1 {
    /** Total amount of tip distributions matching the filter. */
    totalAmount?: string | null;
}
interface CommonIdentificationDataNonNullableFields$1 {
    anonymousVisitorId: string;
    memberId: string;
    wixUserId: string;
    appId: string;
    identityType: IdentityType$1;
}
interface StaffNonNullableFields$1 {
    identificationData?: CommonIdentificationDataNonNullableFields$1;
}
interface TipDistributionNonNullableFields$1 {
    staff?: StaffNonNullableFields$1;
}
interface TipNonNullableFields$1 {
    distributions: TipDistributionNonNullableFields$1[];
}
interface PreviewTipResponseNonNullableFields$1 {
    tip?: TipNonNullableFields$1;
}
interface GetTipByOrderIdResponseNonNullableFields$1 {
    tip?: TipNonNullableFields$1;
}
interface GetTipByDraftOrderIdResponseNonNullableFields$1 {
    tip?: TipNonNullableFields$1;
}
interface TipChoiceNonNullableFields$1 {
    tipType: TipType$1;
}
interface GetTipChoiceResponseNonNullableFields$1 {
    tipChoice?: TipChoiceNonNullableFields$1;
}
interface UpdateTipChoiceResponseNonNullableFields$1 {
    tipChoice?: TipChoiceNonNullableFields$1;
}
interface PriceNonNullableFields$1 {
    amount: string;
    formattedAmount: string;
}
interface OrderInfoNonNullableFields$1 {
    additionalFeePrice?: PriceNonNullableFields$1;
}
interface SetTipOnOrderResponseNonNullableFields$1 {
    tip?: TipNonNullableFields$1;
    orderInfo?: OrderInfoNonNullableFields$1;
}
interface RemoveTipFromOrderResponseNonNullableFields$1 {
    orderInfo?: OrderInfoNonNullableFields$1;
}
interface AddTipDistributionsToOrderResponseNonNullableFields$1 {
    tipDistributions: TipDistributionNonNullableFields$1[];
    orderInfo?: OrderInfoNonNullableFields$1;
}
interface QueryTipDistributionsResponseNonNullableFields$1 {
    tipDistributions: TipDistributionNonNullableFields$1[];
}

/**
 * A tip holds information about how much a customer has tipped, how the tip is
 * distributed among staff, and the associated orderâ€™s line item subtotal.
 */
interface Tip {
    /**
     * ID of the tip. Identical to the `code` of the related `order.additionalFee`.
     * @readonly
     */
    _id?: string | null;
    /**
     * Subtotal of all line items from the [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)
     * that's related to the tip. In the response of
     * [Preview Tip](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/preview-tip),
     * there is no related eCommerce order. Then, value of this field corresponds to
     * the sum of all line item prices passed in the request.
     * @readonly
     */
    lineItemSubtotal?: string | null;
    /**
     * Total amount of the tip.
     *
     * Min: `0.00`
     */
    amount?: string | null;
    /**
     * Details about how the tip is shared among staff. Available only if at least
     * one staff member receives part of the tip, and it's not entirely allocated to
     * the business.
     *
     * Max: 50 distributions
     */
    distributions?: TipDistribution[];
    /**
     * Undistributed tip amount. Calculated as the difference between `tip.amount`
     * and the sum of all `tip.tipDistributions.amount` values.
     *
     * Min: `0.01`
     * @readonly
     */
    undistributedAmount?: string | null;
}
interface TipDistribution {
    /**
     * ID of the tip distribution.
     * @readonly
     */
    _id?: string | null;
    /**
     * ID of the tip associated with the distribution. Matches the corresponding
     * `order.additionalFee.code`.
     * @readonly
     */
    tipId?: string | null;
    /** Information about the business staff receiving the tip distribution. */
    staff?: Staff;
    /**
     * Amount of the tip distribution.
     *
     * Min: `0.00`
     */
    amount?: string | null;
    /**
     * Details about the related line items from the
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object).
     *
     * Max: 10 `lineItemInfo` objects
     */
    lineItemInfo?: LineItemInfo[];
    /**
     * Details of how the customer is charged for the tip. Available only if the
     * [transcation](https://dev.wix.com/docs/rest/business-management/payments/cashier/payments/transaction/transaction-object)
     * has been created.
     */
    transaction?: Transaction;
    /**
     * ID of the [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)
     * associated with the tip distribution. Identical for all distributions that
     * belong to the same tip.
     * @readonly
     */
    orderId?: string | null;
    /**
     * Date and time the distribution was created in
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    _createdDate?: Date | null;
}
interface CommonIdentificationData extends CommonIdentificationDataIdOneOf {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /**
     * ID of the [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/introduction)
     * in the site's [CRM by Ascend](https://www.wix.com/ascend/crm) system.
     */
    contactId?: string | null;
}
/** @oneof */
interface CommonIdentificationDataIdOneOf {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum IdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface Staff {
    /**
     * ID of the staff receiving the tip. Matches `staffMemberId` if available, or
     * `identificationData.wixUserId` if not.
     * @readonly
     */
    _id?: string | null;
    /**
     * Staff name. Matches `staffMember.name` if the staff is a
     * [Bookings staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/staff-member-object),
     * or the [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/contact-v4/contact-object)'s
     * `info.name` if not.
     *
     * Max: 500 characters
     * @readonly
     */
    name?: string | null;
    /**
     * ID of the [staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/staff-member-object).
     * Available only if the staff is a staff member and not a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    staffMemberId?: string | null;
    /**
     * Identification data. Available only if the staff is a
     * [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/contact-v4/contact-object)
     * on the Wix site. Note that not all site collaborators are also
     * [staff members](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/staff-member-v1/introduction).
     */
    identificationData?: CommonIdentificationData;
}
interface LineItemInfo {
    /**
     * IDs of the line items associated with the tip.
     *
     * Min: 1 character
     * Max: 100 characters
     */
    lineItemId?: string | null;
    /**
     * Information about the line item and the corresponding catalog. Catalogs
     * include Wix Bookings and Wix Stores.
     */
    catalogReference?: CatalogReference;
    /**
     * Price of the line item.
     *
     * Min: `0.00`
     */
    price?: string | null;
    /**
     * Name of the line item, which is identical to:
     * + `product.name` for [Stores](https://dev.wix.com/docs/rest/business-solutions/stores/about-wix-stores).
     * + `service.name` for [Bookings](https://dev.wix.com/docs/rest/business-solutions/bookings/about-wix-bookings).
     *
     * Min: 1 character
     * Max: 200 characters
     */
    name?: string | null;
    /**
     * Quantity of the line item.
     *
     * Min: `1`
     * Max: `100000` (one hundred thousand)
     */
    quantity?: number | null;
}
interface CatalogReference {
    /**
     * ID of the line item within its catalog, corresponding to:
     * + `product.id` for [Stores](https://dev.wix.com/docs/rest/business-solutions/stores/about-wix-stores).
     * + `service.id` for [Bookings](https://dev.wix.com/docs/rest/business-solutions/bookings/about-wix-bookings).
     */
    catalogItemId?: string | null;
    /**
     * ID of the [app](https://dev.wix.com/docs/rest/articles/getting-started/wix-business-solutions)
     * to which the catalog belongs.
     *
     * Supported app IDs:
     * + [Wix Tips](https://www.wix.com/app-market/wix-tips): `"869a50c8-dd38-4324-b201-e33dc0747a5f"`
     * + [Wix Stores](https://www.wix.com/app-market/wix-stores): `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + [Wix Bookings](https://www.wix.com/app-market/bookings): `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + [Wix Restaurants Orders](https://www.wix.com/app-market/web-solution/wix-restaurants-orders-new): `"13e8d036-5516-6104-b456-c8466db39542"`
     */
    appId?: string | null;
}
interface Transaction {
    /** ID of the transaction that's associated with the tip distribution. */
    _id?: string | null;
    /**
     * Date and time the transaction was created in `YYYY-MM-DDThh:mm:ss.sssZ`
     * format. Isn't identical to the time the customer was actually charged.
     */
    date?: Date | null;
}
interface PreviewTipRequest {
    /**
     * Information about the line items to preview the tip for.
     *
     * Min: 1 line item
     * Max: 50 line items
     */
    lineItemInfo: LineItemInfo[];
    /**
     * Information about how to calculate the total tip amount and the distribution
     * amounts.
     */
    tipChoice: TipChoice;
    /**
     * ID of the tip settings used to preview the tip. If you don't provide a
     * `tipSettingsId`, the `staffDistributionMethod` is based on the site's
     * default tip settings.
     */
    tipSettingsId?: string | null;
}
interface TipChoice {
    /** Value of the tip choice. */
    value?: string | null;
    /**
     * Type of the tip choice.
     *
     * Supported values:
     * + `UNKNOWN_TIP_TYPE`: There is no information about the tip type.
     * + `PERCENTAGE`: The tip is calculated as a percentage of the subtotal of associated line items.
     * + `AMOUNT`: The tip is a fixed value, pre-configured from the relevant settings presets.
     * + `CUSTOM`: The customer, or the business on behalf of the customer, manually set a tip amount, which may not match any preset values.
     */
    tipType?: TipType;
}
declare enum TipType {
    /** There is no information about the tip type. */
    UNKNOWN_TIP_TYPE = "UNKNOWN_TIP_TYPE",
    /** The tip is calculated as a percentage of the subtotal of associated line items. */
    PERCENTAGE = "PERCENTAGE",
    /** The tip is a fixed value, pre-configured from the relevant settings presets. */
    AMOUNT = "AMOUNT",
    /** The customer, or the business on behalf of the customer, manually set a tip amount, which may not match any preset values. */
    CUSTOM = "CUSTOM"
}
interface PreviewTipResponse {
    /** Tip. */
    tip?: Tip;
}
interface GetTipByOrderIdRequest {
    /** ID of the order to retrieve the tip for. */
    orderId: string | null;
}
interface GetTipByOrderIdResponse {
    /** Retrieved tip. */
    tip?: Tip;
}
interface GetTipByDraftOrderIdRequest {
    /** ID of the draft order to retrieve the tip for. */
    draftOrderId: string | null;
}
interface GetTipByDraftOrderIdResponse {
    /** Retrieved tip. */
    tip?: Tip;
}
interface GetTipChoiceRequest {
    /**
     * ID of the [eCommerce purchase flow](https://dev.wix.com/docs/rest/business-solutions/e-commerce/wix-e-commerce-platform-handbook/overview/architecture-data-flow)
     * to retrieve the tip choice for.
     */
    purchaseFlowId: string | null;
}
interface GetTipChoiceResponse {
    /** Tip choice that's currently selected for the given purchase flow. */
    tipChoice?: TipChoice;
}
interface UpdateTipChoiceRequest {
    /**
     * Tip choice to select for the purchase flow. The call fails if you provide a
     * value for `tipChoice.tipType` that doesn't match the relevant tip settings
     * configuration. For example:
     * + `AMOUNT` when `tipSettings.tipType` isn't `AMOUNT`.
     * + `PERCENTAGE` when `tipSettings.tipType` isn't `PERCENTAGE`.
     * + `CUSTOM` when `tipSettings.allowCustomTip` is `false`.
     */
    tipChoice: TipChoice;
    /**
     * ID of the purchase flow that's associated with the
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/order/introduction)
     */
    purchaseFlowId: string | null;
}
interface UpdateTipChoiceResponse {
    /**
     * Tip choice currently selected in the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)
     * for the given purchase flow.
     */
    tipChoice?: TipChoice;
}
interface SetTipOnOrderRequest extends SetTipOnOrderRequestIdentifierOneOf {
    /** ID of the order for which to set the tip. */
    orderId?: string | null;
    /** Tip to set on the order. */
    tip: Tip;
}
/** @oneof */
interface SetTipOnOrderRequestIdentifierOneOf {
    /** ID of the order for which to set the tip. */
    orderId?: string | null;
}
interface SetTipOnOrderResponse {
    /** Set tip. */
    tip?: Tip;
    /** Information about the order on which the tip was set. */
    orderInfo?: OrderInfo;
}
interface OrderInfo extends OrderInfoIdentifierOneOf {
    /** Order ID. */
    orderId?: string | null;
    /** ID of the order's additional fee that's associated with the tip. */
    additionalFeeId?: string | null;
    /** Price of the order's additional fee that's associated with the tip. */
    additionalFeePrice?: Price;
}
/** @oneof */
interface OrderInfoIdentifierOneOf {
    /** Order ID. */
    orderId?: string | null;
}
interface Price {
    /** Amount of the additional fee that's associated with the tip. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     *
     * Max: 100 characters
     * @readonly
     */
    formattedAmount?: string;
}
interface RemoveTipFromOrderRequest extends RemoveTipFromOrderRequestIdentifierOneOf {
    /** ID of the order from which to remove the tip. */
    orderId?: string | null;
}
/** @oneof */
interface RemoveTipFromOrderRequestIdentifierOneOf {
    /** ID of the order from which to remove the tip. */
    orderId?: string | null;
}
interface RemoveTipFromOrderResponse {
    /** Information about the order from which the tip was removed. */
    orderInfo?: OrderInfo;
}
interface AddTipDistributionsToOrderRequest extends AddTipDistributionsToOrderRequestIdentifierOneOf {
    /** ID of the order for which to add tip distributions. */
    orderId?: string | null;
    /** Tip distributions to add to the order. */
    tipDistributions: TipDistribution[];
}
/** @oneof */
interface AddTipDistributionsToOrderRequestIdentifierOneOf {
    /** ID of the order for which to add tip distributions. */
    orderId?: string | null;
}
interface AddTipDistributionsToOrderResponse {
    /** Tip distributions that were added to the order. */
    tipDistributions?: TipDistribution[];
    /** Information about the order to which the tip distributions were added. */
    orderInfo?: OrderInfo;
}
interface QueryTipDistributionsRequest {
    /** WQL expression. */
    query: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryTipDistributionsResponse {
    /** Retrieved tip distributions. */
    tipDistributions?: TipDistribution[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors;
    /**
     * Indicates if there are more results after the current page.
     * If `true`, another page of results can be retrieved.
     * If `false`, this is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
interface SumTipDistributionAmountsRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter: Record<string, any> | null;
}
interface SumTipDistributionAmountsResponse {
    /** Total amount of tip distributions matching the filter. */
    totalAmount?: string | null;
}
interface CommonIdentificationDataNonNullableFields {
    anonymousVisitorId: string;
    memberId: string;
    wixUserId: string;
    appId: string;
    identityType: IdentityType;
}
interface StaffNonNullableFields {
    identificationData?: CommonIdentificationDataNonNullableFields;
}
interface TipDistributionNonNullableFields {
    staff?: StaffNonNullableFields;
}
interface TipNonNullableFields {
    distributions: TipDistributionNonNullableFields[];
}
interface PreviewTipResponseNonNullableFields {
    tip?: TipNonNullableFields;
}
interface GetTipByOrderIdResponseNonNullableFields {
    tip?: TipNonNullableFields;
}
interface GetTipByDraftOrderIdResponseNonNullableFields {
    tip?: TipNonNullableFields;
}
interface TipChoiceNonNullableFields {
    tipType: TipType;
}
interface GetTipChoiceResponseNonNullableFields {
    tipChoice?: TipChoiceNonNullableFields;
}
interface UpdateTipChoiceResponseNonNullableFields {
    tipChoice?: TipChoiceNonNullableFields;
}
interface PriceNonNullableFields {
    amount: string;
    formattedAmount: string;
}
interface OrderInfoNonNullableFields {
    additionalFeePrice?: PriceNonNullableFields;
}
interface SetTipOnOrderResponseNonNullableFields {
    tip?: TipNonNullableFields;
    orderInfo?: OrderInfoNonNullableFields;
}
interface RemoveTipFromOrderResponseNonNullableFields {
    orderInfo?: OrderInfoNonNullableFields;
}
interface AddTipDistributionsToOrderResponseNonNullableFields {
    tipDistributions: TipDistributionNonNullableFields[];
    orderInfo?: OrderInfoNonNullableFields;
}
interface QueryTipDistributionsResponseNonNullableFields {
    tipDistributions: TipDistributionNonNullableFields[];
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function previewTip(): __PublicMethodMetaInfo<'POST', {}, PreviewTipRequest, PreviewTipRequest$1, PreviewTipResponse & PreviewTipResponseNonNullableFields, PreviewTipResponse$1 & PreviewTipResponseNonNullableFields$1>;
declare function getTipByOrderId(): __PublicMethodMetaInfo<'GET', {
    orderId: string;
}, GetTipByOrderIdRequest, GetTipByOrderIdRequest$1, GetTipByOrderIdResponse & GetTipByOrderIdResponseNonNullableFields, GetTipByOrderIdResponse$1 & GetTipByOrderIdResponseNonNullableFields$1>;
declare function getTipByDraftOrderId(): __PublicMethodMetaInfo<'GET', {
    draftOrderId: string;
}, GetTipByDraftOrderIdRequest, GetTipByDraftOrderIdRequest$1, GetTipByDraftOrderIdResponse & GetTipByDraftOrderIdResponseNonNullableFields, GetTipByDraftOrderIdResponse$1 & GetTipByDraftOrderIdResponseNonNullableFields$1>;
declare function getTipChoice(): __PublicMethodMetaInfo<'GET', {
    purchaseFlowId: string;
}, GetTipChoiceRequest, GetTipChoiceRequest$1, GetTipChoiceResponse & GetTipChoiceResponseNonNullableFields, GetTipChoiceResponse$1 & GetTipChoiceResponseNonNullableFields$1>;
declare function updateTipChoice(): __PublicMethodMetaInfo<'PATCH', {}, UpdateTipChoiceRequest, UpdateTipChoiceRequest$1, UpdateTipChoiceResponse & UpdateTipChoiceResponseNonNullableFields, UpdateTipChoiceResponse$1 & UpdateTipChoiceResponseNonNullableFields$1>;
declare function setTipOnOrder(): __PublicMethodMetaInfo<'POST', {}, SetTipOnOrderRequest, SetTipOnOrderRequest$1, SetTipOnOrderResponse & SetTipOnOrderResponseNonNullableFields, SetTipOnOrderResponse$1 & SetTipOnOrderResponseNonNullableFields$1>;
declare function removeTipFromOrder(): __PublicMethodMetaInfo<'POST', {}, RemoveTipFromOrderRequest, RemoveTipFromOrderRequest$1, RemoveTipFromOrderResponse & RemoveTipFromOrderResponseNonNullableFields, RemoveTipFromOrderResponse$1 & RemoveTipFromOrderResponseNonNullableFields$1>;
declare function addTipDistributionsToOrder(): __PublicMethodMetaInfo<'POST', {}, AddTipDistributionsToOrderRequest, AddTipDistributionsToOrderRequest$1, AddTipDistributionsToOrderResponse & AddTipDistributionsToOrderResponseNonNullableFields, AddTipDistributionsToOrderResponse$1 & AddTipDistributionsToOrderResponseNonNullableFields$1>;
declare function queryTipDistributions(): __PublicMethodMetaInfo<'POST', {}, QueryTipDistributionsRequest, QueryTipDistributionsRequest$1, QueryTipDistributionsResponse & QueryTipDistributionsResponseNonNullableFields, QueryTipDistributionsResponse$1 & QueryTipDistributionsResponseNonNullableFields$1>;
declare function sumTipDistributionAmounts(): __PublicMethodMetaInfo<'POST', {}, SumTipDistributionAmountsRequest, SumTipDistributionAmountsRequest$1, SumTipDistributionAmountsResponse, SumTipDistributionAmountsResponse$1>;

export { type __PublicMethodMetaInfo, addTipDistributionsToOrder, getTipByDraftOrderId, getTipByOrderId, getTipChoice, previewTip, queryTipDistributions, removeTipFromOrder, setTipOnOrder, sumTipDistributionAmounts, updateTipChoice };
