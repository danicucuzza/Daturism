"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sumTipDistributionAmounts = exports.queryTipDistributions = exports.addTipDistributionsToOrder = exports.removeTipFromOrder = exports.setTipOnOrder = exports.updateTipChoice = exports.getTipChoice = exports.getTipByDraftOrderId = exports.getTipByOrderId = exports.previewTip = exports.WebhookIdentityType = exports.QueryBy = exports.SortOrder = exports.TipType = exports.IdentityType = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const query_builder_1 = require("@wix/sdk-runtime/query-builder");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixTipsV1Tip = __importStar(require("./tips-v1-tip-tips.http"));
var IdentityType;
(function (IdentityType) {
    IdentityType["UNKNOWN"] = "UNKNOWN";
    IdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    IdentityType["MEMBER"] = "MEMBER";
    IdentityType["WIX_USER"] = "WIX_USER";
    IdentityType["APP"] = "APP";
})(IdentityType || (exports.IdentityType = IdentityType = {}));
var TipType;
(function (TipType) {
    /** There is no information about the tip type. */
    TipType["UNKNOWN_TIP_TYPE"] = "UNKNOWN_TIP_TYPE";
    /** The tip is calculated as a percentage of the subtotal of associated line items. */
    TipType["PERCENTAGE"] = "PERCENTAGE";
    /** The tip is a fixed value, pre-configured from the relevant settings presets. */
    TipType["AMOUNT"] = "AMOUNT";
    /** The customer, or the business on behalf of the customer, manually set a tip amount, which may not match any preset values. */
    TipType["CUSTOM"] = "CUSTOM";
})(TipType || (exports.TipType = TipType = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var QueryBy;
(function (QueryBy) {
    QueryBy["UNKNOWN_QUERY_BY"] = "UNKNOWN_QUERY_BY";
    QueryBy["ORDER"] = "ORDER";
    QueryBy["TIP"] = "TIP";
})(QueryBy || (exports.QueryBy = QueryBy = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Previews a tip for a list of line items.
 *
 *
 * If you provide the [Wix Bookings app ID](https://dev.wix.com/docs/rest/articles/getting-started/wix-business-solutions)
 * as `lineItemInfo.catalogReference.appId`, the response includes tip
 * distributions for each associated
 * [Bookings staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/about-staff-members-and-resources).
 *
 * If you don't provide a `tipSettingsId`, the `staffDistributionMethod` is
 * based on the site's default tip settings.
 * @param lineItemInfo - Information about the line items to preview the tip for.
 *
 * Min: 1 line item
 * Max: 50 line items
 * @public
 * @documentationMaturity preview
 * @requiredField lineItemInfo
 * @requiredField lineItemInfo.catalogReference.appId
 * @requiredField lineItemInfo.catalogReference.catalogItemId
 * @requiredField lineItemInfo.price
 * @requiredField options.tipChoice
 * @requiredField options.tipChoice.tipType
 * @requiredField options.tipChoice.value
 * @permissionId WIX_TIPS.TIP_PREVIEW
 */
async function previewTip(lineItemInfo, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        lineItemInfo: lineItemInfo,
        tipChoice: options?.tipChoice,
        tipSettingsId: options?.tipSettingsId,
    });
    const reqOpts = ambassadorWixTipsV1Tip.previewTip(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                lineItemInfo: '$[0]',
                tipChoice: '$[1].tipChoice',
                tipSettingsId: '$[1].tipSettingsId',
            },
            singleArgumentUnchanged: false,
        }, ['lineItemInfo', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.previewTip = previewTip;
/**
 * Retrieves the tip that's associated with an
 * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction).
 * @param orderId - ID of the order to retrieve the tip for.
 * @public
 * @documentationMaturity preview
 * @requiredField orderId
 * @permissionId WIX_TIPS.TIP_READ
 */
async function getTipByOrderId(orderId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ orderId: orderId });
    const reqOpts = ambassadorWixTipsV1Tip.getTipByOrderId(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['orderId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getTipByOrderId = getTipByOrderId;
/**
 * Retrieves the tip that's associated with an
 * [eCommerce draft order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/draft-orders/introduction).
 * @param draftOrderId - ID of the draft order to retrieve the tip for.
 * @public
 * @documentationMaturity preview
 * @requiredField draftOrderId
 * @permissionId WIX_TIPS.TIP_READ
 */
async function getTipByDraftOrderId(draftOrderId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        draftOrderId: draftOrderId,
    });
    const reqOpts = ambassadorWixTipsV1Tip.getTipByDraftOrderId(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { draftOrderId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['draftOrderId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getTipByDraftOrderId = getTipByDraftOrderId;
/**
 * Retrieves the tip choice that's currently selected by the customer for a specific [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction).
 * If the customer hasn't yet selected a tip choice, the response is empty.
 *
 * Please refer to the [sample flow](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/sample-flows#add-or-update-a-tip-in-a-custom-checkout-flow) for more information.
 * @param purchaseFlowId - ID of the [eCommerce purchase flow](https://dev.wix.com/docs/rest/business-solutions/e-commerce/wix-e-commerce-platform-handbook/overview/architecture-data-flow)
 * to retrieve the tip choice for.
 * @public
 * @documentationMaturity preview
 * @requiredField purchaseFlowId
 * @permissionId WIX_TIPS.TIP_GET_CHOICE
 * @applicableIdentity VISITOR
 */
async function getTipChoice(purchaseFlowId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        purchaseFlowId: purchaseFlowId,
    });
    const reqOpts = ambassadorWixTipsV1Tip.getTipChoice(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { purchaseFlowId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['purchaseFlowId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getTipChoice = getTipChoice;
/**
 * Updates the tip choice that's currently selected by the customer for a specific [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction).
 *
 * Please refer to the [sample flow](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/sample-flows#add-or-update-a-tip-in-a-custom-checkout-flow) for more information.
 * @param tipChoice - Tip choice to select for the purchase flow. The call fails if you provide a
 * value for `tipChoice.tipType` that doesn't match the relevant tip settings
 * configuration. For example:
 * + `AMOUNT` when `tipSettings.tipType` isn't `AMOUNT`.
 * + `PERCENTAGE` when `tipSettings.tipType` isn't `PERCENTAGE`.
 * + `CUSTOM` when `tipSettings.allowCustomTip` is `false`.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.purchaseFlowId
 * @requiredField tipChoice
 * @permissionId WIX_TIPS.TIP_UPDATE_CHOICE
 * @applicableIdentity VISITOR
 */
async function updateTipChoice(tipChoice, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        tipChoice: tipChoice,
        purchaseFlowId: options?.purchaseFlowId,
    });
    const reqOpts = ambassadorWixTipsV1Tip.updateTipChoice(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                tipChoice: '$[0]',
                purchaseFlowId: '$[1].purchaseFlowId',
            },
            singleArgumentUnchanged: false,
        }, ['tipChoice', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateTipChoice = updateTipChoice;
/**
 * Creates or updates a tip on an
 * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction).
 *
 *
 * If no tip exists on the order, an `additionalFee` is added. If a tip is already
 * present, the existing `additionalFee` is replaced.
 *
 * If you specify `tip.distributions.transaction`, that distribution
 * amount can't be changed in the future. Then, you also can't remove any of the
 * other distributions.
 *
 * The call fails if:
 * + The order's `paymentStatus` is either `FULLY_REFUNDED` or `PARTIALLY_REFUNDED`.
 * + The total tip amount is zero or negative.
 * + The sum of all tip distribution amounts and `undistributedAmount` doesn't match the total tip amount.
 * + You omit `tip.distributions` with an existing `transaction`.
 * @public
 * @documentationMaturity preview
 * @requiredField options.tip
 * @requiredField options.tip.distributions.transaction._id
 * @requiredField options.tip.distributions.transaction.date
 * @permissionId WIX_TIPS.TIP_SET
 */
async function setTipOnOrder(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        orderId: options?.orderId,
        tip: options?.tip,
    });
    const reqOpts = ambassadorWixTipsV1Tip.setTipOnOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderId: '$[0].orderId', tip: '$[0].tip' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.setTipOnOrder = setTipOnOrder;
/**
 * Removes a tip from an
 * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction).
 *
 *
 * If no tip exists on the order, the call succeeds and the response contains an
 * empty `OrderInfo` object.
 *
 * The call fails if the customer has already been charged for at least one of
 * the associated tip distributions.
 * @public
 * @documentationMaturity preview
 * @permissionId WIX_TIPS.TIP_REMOVE
 */
async function removeTipFromOrder(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        orderId: options?.orderId,
    });
    const reqOpts = ambassadorWixTipsV1Tip.removeTipFromOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderId: '$[0].orderId' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.removeTipFromOrder = removeTipFromOrder;
/**
 * Adds tip distributions to an
 * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction).
 *
 *
 * If no tip exists on the order, an `additionalFee` is added and the total tip
 * amount is equal to the sum of all distribution amounts. If a tip is already
 * present, the existing `additionalFee` is replaced and the total tip amount is
 * increased by the sum of the new tip distributions.
 *
 * The call fails if:
 * + The order's `paymentStatus` is either `FULLY_REFUNDED` or `PARTIALLY_REFUNDED`.
 * + Any of the tip distribution amounts is zero or negative.
 * @public
 * @documentationMaturity preview
 * @requiredField options.tipDistributions
 * @requiredField options.tipDistributions.transaction._id
 * @requiredField options.tipDistributions.transaction.date
 * @permissionId WIX_TIPS.TIP_DISTRIBUTION_ADD
 */
async function addTipDistributionsToOrder(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        orderId: options?.orderId,
        tipDistributions: options?.tipDistributions,
    });
    const reqOpts = ambassadorWixTipsV1Tip.addTipDistributionsToOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                orderId: '$[0].orderId',
                tipDistributions: '$[0].tipDistributions',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.addTipDistributionsToOrder = addTipDistributionsToOrder;
/**
 * Retrieves a list of up to 100 tip distributions, given the provided paging, filtering, and sorting.
 *
 * Query Tip Distributions runs with these defaults, which you can override:
 * - `cursorPaging.limit` is `50`
 *
 * For field support for filters and sorting, see
 * [Tips: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/supported-filters).
 *
 * When setting a date filter remember to use
 * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language),
 * [Sorting and Paging](https://dev.wix.com/api/rest/getting-started/sorting-and-paging),
 * and [Field Projection](https://dev.wix.com/api/rest/getting-started/field-projection).
 * @public
 * @documentationMaturity preview
 * @permissionId WIX_TIPS.TIP_DISTRIBUTION_READ
 */
function queryTipDistributions() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return (0, query_builder_1.queryBuilder)({
        func: async (payload) => {
            const reqOpts = ambassadorWixTipsV1Tip.queryTipDistributions(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(data);
            return {
                items: transformedData?.tipDistributions,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = (0, transform_error_1.transformError)(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
exports.queryTipDistributions = queryTipDistributions;
/**
 * Sums tip distribution amounts, given the provided filtering.
 *
 * For field support for filters and sorting, see
 * [Tips: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/supported-filters).
 * @param filter - Filter object in the following format:
 * `"filter" : {
 * "fieldName1": "value1",
 * "fieldName2":{"$operator":"value2"}
 * }`
 * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
 * @public
 * @documentationMaturity preview
 * @requiredField filter
 * @permissionId WIX_TIPS.TIP_DISTRIBUTION_READ
 */
async function sumTipDistributionAmounts(filter) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ filter: filter });
    const reqOpts = ambassadorWixTipsV1Tip.sumTipDistributionAmounts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { filter: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['filter']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.sumTipDistributionAmounts = sumTipDistributionAmounts;
//# sourceMappingURL=tips-v1-tip-tips.universal.js.map