"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sumTipDistributionAmounts = exports.queryTipDistributions = exports.addTipDistributionsToOrder = exports.removeTipFromOrder = exports.setTipOnOrder = exports.updateTipChoice = exports.getTipChoice = exports.getTipByDraftOrderId = exports.getTipByOrderId = exports.previewTip = void 0;
const rest_modules_1 = require("@wix/sdk-runtime/rest-modules");
const timestamp_1 = require("@wix/sdk-runtime/transformations/timestamp");
const timestamp_2 = require("@wix/sdk-runtime/transformations/timestamp");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
const rest_modules_2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixTipsTipV1TipsServiceUrl(opts) {
    const domainToMappings = {
        'manage._base_domain_': [
            {
                srcPath: '/_api/tips-service',
                destPath: '',
            },
        ],
        _: [
            {
                srcPath: '/_api/tips-service',
                destPath: '',
            },
        ],
    };
    return (0, rest_modules_2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/ecom_tips';
/**
 * Previews a tip for a list of line items.
 *
 *
 * If you provide the [Wix Bookings app ID](https://dev.wix.com/docs/rest/articles/getting-started/wix-business-solutions)
 * as `lineItemInfo.catalogReference.appId`, the response includes tip
 * distributions for each associated
 * [Bookings staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members-and-resources/about-staff-members-and-resources).
 *
 * If you don't provide a `tipSettingsId`, the `staffDistributionMethod` is
 * based on the site's default tip settings.
 */
function previewTip(payload) {
    function __previewTip({ host }) {
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'POST',
            methodFqn: 'wix.tips.tip.v1.TipsService.PreviewTip',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/preview',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'tip.distributions.createdDate' },
                        { path: 'tip.distributions.transaction.date' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __previewTip;
}
exports.previewTip = previewTip;
/**
 * Retrieves the tip that's associated with an
 * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction).
 */
function getTipByOrderId(payload) {
    function __getTipByOrderId({ host }) {
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'GET',
            methodFqn: 'wix.tips.tip.v1.TipsService.GetTipByOrderId',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/order/{orderId}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'tip.distributions.createdDate' },
                        { path: 'tip.distributions.transaction.date' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getTipByOrderId;
}
exports.getTipByOrderId = getTipByOrderId;
/**
 * Retrieves the tip that's associated with an
 * [eCommerce draft order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/draft-orders/introduction).
 */
function getTipByDraftOrderId(payload) {
    function __getTipByDraftOrderId({ host }) {
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'GET',
            methodFqn: 'wix.tips.tip.v1.TipsService.GetTipByDraftOrderId',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/draft-order/{draftOrderId}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'tip.distributions.createdDate' },
                        { path: 'tip.distributions.transaction.date' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getTipByDraftOrderId;
}
exports.getTipByDraftOrderId = getTipByDraftOrderId;
/**
 * Retrieves the tip choice that's currently selected by the customer for a specific [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction).
 * If the customer hasn't yet selected a tip choice, the response is empty.
 *
 * Please refer to the [sample flow](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/sample-flows#add-or-update-a-tip-in-a-custom-checkout-flow) for more information.
 */
function getTipChoice(payload) {
    function __getTipChoice({ host }) {
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'GET',
            methodFqn: 'wix.tips.tip.v1.TipsService.GetTipChoice',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/choice/{purchaseFlowId}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
        };
        return metadata;
    }
    return __getTipChoice;
}
exports.getTipChoice = getTipChoice;
/**
 * Updates the tip choice that's currently selected by the customer for a specific [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction).
 *
 * Please refer to the [sample flow](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/sample-flows#add-or-update-a-tip-in-a-custom-checkout-flow) for more information.
 */
function updateTipChoice(payload) {
    function __updateTipChoice({ host }) {
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'PATCH',
            methodFqn: 'wix.tips.tip.v1.TipsService.UpdateTipChoice',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/choice',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __updateTipChoice;
}
exports.updateTipChoice = updateTipChoice;
/**
 * Creates or updates a tip on an
 * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction).
 *
 *
 * If no tip exists on the order, an `additionalFee` is added. If a tip is already
 * present, the existing `additionalFee` is replaced.
 *
 * If you specify `tip.distributions.transaction`, that distribution
 * amount can't be changed in the future. Then, you also can't remove any of the
 * other distributions.
 *
 * The call fails if:
 * + The order's `paymentStatus` is either `FULLY_REFUNDED` or `PARTIALLY_REFUNDED`.
 * + The total tip amount is zero or negative.
 * + The sum of all tip distribution amounts and `undistributedAmount` doesn't match the total tip amount.
 * + You omit `tip.distributions` with an existing `transaction`.
 */
function setTipOnOrder(payload) {
    function __setTipOnOrder({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'tip.distributions.createdDate' },
                    { path: 'tip.distributions.transaction.date' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'POST',
            methodFqn: 'wix.tips.tip.v1.TipsService.SetTipOnOrder',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/set',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'tip.distributions.createdDate' },
                        { path: 'tip.distributions.transaction.date' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __setTipOnOrder;
}
exports.setTipOnOrder = setTipOnOrder;
/**
 * Removes a tip from an
 * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction).
 *
 *
 * If no tip exists on the order, the call succeeds and the response contains an
 * empty `OrderInfo` object.
 *
 * The call fails if the customer has already been charged for at least one of
 * the associated tip distributions.
 */
function removeTipFromOrder(payload) {
    function __removeTipFromOrder({ host }) {
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'POST',
            methodFqn: 'wix.tips.tip.v1.TipsService.RemoveTipFromOrder',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/remove',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __removeTipFromOrder;
}
exports.removeTipFromOrder = removeTipFromOrder;
/**
 * Adds tip distributions to an
 * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction).
 *
 *
 * If no tip exists on the order, an `additionalFee` is added and the total tip
 * amount is equal to the sum of all distribution amounts. If a tip is already
 * present, the existing `additionalFee` is replaced and the total tip amount is
 * increased by the sum of the new tip distributions.
 *
 * The call fails if:
 * + The order's `paymentStatus` is either `FULLY_REFUNDED` or `PARTIALLY_REFUNDED`.
 * + Any of the tip distribution amounts is zero or negative.
 */
function addTipDistributionsToOrder(payload) {
    function __addTipDistributionsToOrder({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'tipDistributions.createdDate' },
                    { path: 'tipDistributions.transaction.date' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'POST',
            methodFqn: 'wix.tips.tip.v1.TipsService.AddTipDistributionsToOrder',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/tip-distributions/add',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'tipDistributions.createdDate' },
                        { path: 'tipDistributions.transaction.date' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __addTipDistributionsToOrder;
}
exports.addTipDistributionsToOrder = addTipDistributionsToOrder;
/**
 * Retrieves a list of up to 100 tip distributions, given the provided paging, filtering, and sorting.
 *
 * Query Tip Distributions runs with these defaults, which you can override:
 * - `cursorPaging.limit` is `50`
 *
 * For field support for filters and sorting, see
 * [Tips: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/supported-filters).
 *
 * When setting a date filter remember to use
 * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language),
 * [Sorting and Paging](https://dev.wix.com/api/rest/getting-started/sorting-and-paging),
 * and [Field Projection](https://dev.wix.com/api/rest/getting-started/field-projection).
 */
function queryTipDistributions(payload) {
    function __queryTipDistributions({ host }) {
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'POST',
            methodFqn: 'wix.tips.tip.v1.TipsService.QueryTipDistributions',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/tip-distributions/query',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'tipDistributions.createdDate' },
                        { path: 'tipDistributions.transaction.date' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __queryTipDistributions;
}
exports.queryTipDistributions = queryTipDistributions;
/**
 * Sums tip distribution amounts, given the provided filtering.
 *
 * For field support for filters and sorting, see
 * [Tips: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/supported-filters).
 */
function sumTipDistributionAmounts(payload) {
    function __sumTipDistributionAmounts({ host }) {
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'POST',
            methodFqn: 'wix.tips.tip.v1.TipsService.SumTipDistributionAmounts',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/tip-distributions/sum-amounts',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __sumTipDistributionAmounts;
}
exports.sumTipDistributionAmounts = sumTipDistributionAmounts;
//# sourceMappingURL=tips-v1-tip-tips.http.js.map