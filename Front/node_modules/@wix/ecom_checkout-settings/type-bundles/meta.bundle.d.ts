interface CheckoutSettings$1 {
    /** Checkout policies. */
    checkoutPolicies?: CheckoutPolicies$1;
    /** Settings that apply to checkout fields and the checkout process. */
    checkoutFields?: CheckoutFields$1;
    /** Checkout brand settings. */
    checkoutBrand?: CheckoutBrand$1;
    /**
     * Date and time the checkout settings were created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the checkout settings were updated.
     * @readonly
     */
    updatedDate?: Date | null;
}
interface CheckoutPolicies$1 {
    /** Terms and conditions. */
    termsAndConditions?: TermsAndConditionsPolicy$1;
    /** Privacy policy. */
    privacyPolicy?: PrivacyPolicy$1;
    /** Return policy. */
    returnPolicy?: ReturnPolicy$1;
    /** Digital item policy. */
    digitalItemPolicy?: DigitalItemPolicy$1;
    /** "Contact us" information. */
    contactUs?: ContactUsPolicy$1;
    /** Custom policy. */
    customPolicy?: CustomCheckoutPolicy$1;
}
interface TermsAndConditionsPolicy$1 {
    /**
     * Whether the terms & conditions policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Terms and conditions policy content. */
    content?: string | null;
}
interface PrivacyPolicy$1 {
    /**
     * Whether the privacy policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Privacy policy content. */
    content?: string | null;
}
interface ReturnPolicy$1 {
    /**
     * Whether the return policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Return policy content. */
    content?: string | null;
}
interface DigitalItemPolicy$1 {
    /**
     * Whether the digital item policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Digital item policy content. */
    content?: string | null;
}
interface ContactUsPolicy$1 {
    /**
     * Whether the contact us policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Contact us policy content. */
    content?: string | null;
}
interface CustomCheckoutPolicy$1 {
    /**
     * Whether the policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Policy content. */
    content?: string | null;
    /** Policy title. */
    title?: string | null;
}
interface CheckoutFields$1 {
    /**
     * Subscription checkbox. <br><br>
     *
     * Defaults:
     * + `visible`: `false`
     * + `checkedByDefault`: `false`
     */
    subscriptionCheckbox?: CheckboxField$1;
    /**
     * Policy agreement checkbox. <br><br>
     *
     * Defaults:
     * + `visible`: `true`
     * + `checkedByDefault`: `true`
     */
    policyAgreementCheckbox?: CheckboxField$1;
    /**
     * Whether the ability to redeem a gift card is enabled. <br><br>
     *
     * Default: `false`
     */
    giftCardRedeemEnabled?: boolean | null;
    /**
     * Whether to allow for MIT transactions. <br><br>
     *
     * Default: `false`
     */
    mitEnabled?: boolean | null;
    /**
     * Whether to allow for Auth & Capture transactions. <br><br>
     *
     * Default: `false`
     */
    delayCaptureEnabled?: boolean | null;
    /**
     * Whether to automatically capture the transaction before the authorization expires.
     *
     * Default: `true`
     * >**Note:** this setting is only relevant when `delay_capture_enabled: true`.
     */
    captureBeforeExpiryEnabled?: boolean | null;
}
interface CheckboxField$1 {
    /** Whether the checkbox is visible to the customer. */
    visible?: boolean | null;
    /** Whether the checkbox is checked by default. */
    checkedByDefault?: boolean | null;
}
interface CheckoutBrand$1 {
    /** Checkout header. */
    header?: CheckoutHeader$1;
}
interface CheckoutHeader$1 {
    /**
     * Textual content to be included in the header (e.g. Business Name)
     * TODO: update maxLength validation once limitation is known
     */
    text?: string | null;
    /** Specifications for when a logo is included in the header. */
    logo?: Logo$1;
    /**
     * Alignment within the header.
     *
     * >**Note:** `SIDE` alignment is decided depending on the locale's language. For example, scripts like Hebrew and Arabic will automatically align right-to-left.
     */
    alignment?: Alignment$1;
    /**
     * Whether to display the 'Checkout' label within the header.
     * Depending on the locale, the label may be translated.
     */
    displayCheckoutLabel?: boolean | null;
}
interface Logo$1 {
    /** Size of the logo. */
    size?: LogoSize$1;
}
declare enum LogoSize$1 {
    UNKNOWN_LOGO_SIZE = "UNKNOWN_LOGO_SIZE",
    SMALL = "SMALL",
    MEDIUM = "MEDIUM",
    LARGE = "LARGE"
}
declare enum Alignment$1 {
    UNKNOWN_ALIGNMENT = "UNKNOWN_ALIGNMENT",
    SIDE = "SIDE",
    CENTER = "CENTER"
}
interface GetCheckoutSettingsRequest$1 {
}
interface GetCheckoutSettingsResponse$1 {
    /** Checkout settings. */
    checkoutSettings?: CheckoutSettings$1;
}
interface UpdateCheckoutSettingsRequest$1 {
    /** Checkout settings to update. */
    checkoutSettings: CheckoutSettings$1;
}
interface UpdateCheckoutSettingsResponse$1 {
    /** The updated checkout settings. */
    checkoutSettings?: CheckoutSettings$1;
}
interface ImageNonNullableFields {
    id: string;
    url: string;
    height: number;
    width: number;
}
interface LogoNonNullableFields$1 {
    image?: ImageNonNullableFields;
    size: LogoSize$1;
}
interface CheckoutHeaderNonNullableFields$1 {
    logo?: LogoNonNullableFields$1;
    alignment: Alignment$1;
}
interface CheckoutBrandNonNullableFields$1 {
    header?: CheckoutHeaderNonNullableFields$1;
}
interface CheckoutSettingsNonNullableFields$1 {
    checkoutBrand?: CheckoutBrandNonNullableFields$1;
}
interface GetCheckoutSettingsResponseNonNullableFields$1 {
    checkoutSettings?: CheckoutSettingsNonNullableFields$1;
}
interface UpdateCheckoutSettingsResponseNonNullableFields$1 {
    checkoutSettings?: CheckoutSettingsNonNullableFields$1;
}

interface CheckoutSettings {
    /** Checkout policies. */
    checkoutPolicies?: CheckoutPolicies;
    /** Settings that apply to checkout fields and the checkout process. */
    checkoutFields?: CheckoutFields;
    /** Checkout brand settings. */
    checkoutBrand?: CheckoutBrand;
    /**
     * Date and time the checkout settings were created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the checkout settings were updated.
     * @readonly
     */
    _updatedDate?: Date | null;
}
interface CheckoutPolicies {
    /** Terms and conditions. */
    termsAndConditions?: TermsAndConditionsPolicy;
    /** Privacy policy. */
    privacyPolicy?: PrivacyPolicy;
    /** Return policy. */
    returnPolicy?: ReturnPolicy;
    /** Digital item policy. */
    digitalItemPolicy?: DigitalItemPolicy;
    /** "Contact us" information. */
    contactUs?: ContactUsPolicy;
    /** Custom policy. */
    customPolicy?: CustomCheckoutPolicy;
}
interface TermsAndConditionsPolicy {
    /**
     * Whether the terms & conditions policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Terms and conditions policy content. */
    content?: string | null;
}
interface PrivacyPolicy {
    /**
     * Whether the privacy policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Privacy policy content. */
    content?: string | null;
}
interface ReturnPolicy {
    /**
     * Whether the return policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Return policy content. */
    content?: string | null;
}
interface DigitalItemPolicy {
    /**
     * Whether the digital item policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Digital item policy content. */
    content?: string | null;
}
interface ContactUsPolicy {
    /**
     * Whether the contact us policy is visible to the customer in the checkout page. <br><br>
     *
     * Default: `false`
     */
    visible?: boolean | null;
    /** Contact us policy content. */
    content?: string | null;
}
interface CustomCheckoutPolicy {
    /**
     * Whether the policy is visible to the customer on the checkout page.
     * Default: `false`.
     */
    visible?: boolean | null;
    /** Policy content. */
    content?: string | null;
    /** Policy title. */
    title?: string | null;
}
interface CheckoutFields {
    /**
     * Subscription checkbox.
     * Default:
     * - `visible`: `false`,
     * - `checkedByDefault`: `false`
     */
    subscriptionCheckbox?: CheckboxField;
    /**
     * Policy agreement checkbox.
     * Default:
     * - `visible`: `true`,
     * - `checkedByDefault`: `true`
     */
    policyAgreementCheckbox?: CheckboxField;
    /**
     * Whether the ability to redeem a gift card is enabled.
     * Default: `false`.
     */
    giftCardRedeemEnabled?: boolean | null;
    /**
     * Whether to allow for MIT transactions.
     * Default: `false`.
     */
    mitEnabled?: boolean | null;
    /**
     * Whether to allow for Auth & Capture transactions. <br><br>
     *
     * Default: `false`
     */
    delayCaptureEnabled?: boolean | null;
    /**
     * Whether to automatically capture the transaction before the authorization expires.
     *
     * Default: `true`
     * >**Note:** this setting is only relevant when `delay_capture_enabled: true`.
     */
    captureBeforeExpiryEnabled?: boolean | null;
}
interface CheckboxField {
    /** Whether the checkbox is visible to the customer. */
    visible?: boolean | null;
    /** Whether the checkbox is checked by default. */
    checkedByDefault?: boolean | null;
}
interface CheckoutBrand {
    /** Checkout header. */
    header?: CheckoutHeader;
}
interface CheckoutHeader {
    /**
     * Textual content to be included in the header (e.g. Business Name)
     * TODO: update maxLength validation once limitation is known
     */
    text?: string | null;
    /** Specifications for when a logo is included in the header. */
    logo?: Logo;
    /**
     * Alignment within the header.
     *
     * >**Note:** `SIDE` alignment is decided depending on the locale's language. For example, scripts like Hebrew and Arabic will automatically align right-to-left.
     */
    alignment?: Alignment;
    /**
     * Whether to display the 'Checkout' label within the header.
     * Depending on the locale, the label may be translated.
     */
    displayCheckoutLabel?: boolean | null;
}
interface Logo {
    /** Size of the logo. */
    size?: LogoSize;
}
declare enum LogoSize {
    UNKNOWN_LOGO_SIZE = "UNKNOWN_LOGO_SIZE",
    SMALL = "SMALL",
    MEDIUM = "MEDIUM",
    LARGE = "LARGE"
}
declare enum Alignment {
    UNKNOWN_ALIGNMENT = "UNKNOWN_ALIGNMENT",
    SIDE = "SIDE",
    CENTER = "CENTER"
}
interface GetCheckoutSettingsRequest {
}
interface GetCheckoutSettingsResponse {
    /** Checkout settings. */
    checkoutSettings?: CheckoutSettings;
}
interface UpdateCheckoutSettingsRequest {
    /** Checkout settings to update. */
    checkoutSettings: CheckoutSettings;
}
interface UpdateCheckoutSettingsResponse {
    /** The updated checkout settings. */
    checkoutSettings?: CheckoutSettings;
}
interface LogoNonNullableFields {
    image: string;
    size: LogoSize;
}
interface CheckoutHeaderNonNullableFields {
    logo?: LogoNonNullableFields;
    alignment: Alignment;
}
interface CheckoutBrandNonNullableFields {
    header?: CheckoutHeaderNonNullableFields;
}
interface CheckoutSettingsNonNullableFields {
    checkoutBrand?: CheckoutBrandNonNullableFields;
}
interface GetCheckoutSettingsResponseNonNullableFields {
    checkoutSettings?: CheckoutSettingsNonNullableFields;
}
interface UpdateCheckoutSettingsResponseNonNullableFields {
    checkoutSettings?: CheckoutSettingsNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getCheckoutSettings(): __PublicMethodMetaInfo<'GET', {}, GetCheckoutSettingsRequest, GetCheckoutSettingsRequest$1, GetCheckoutSettingsResponse & GetCheckoutSettingsResponseNonNullableFields, GetCheckoutSettingsResponse$1 & GetCheckoutSettingsResponseNonNullableFields$1>;
declare function updateCheckoutSettings(): __PublicMethodMetaInfo<'PATCH', {}, UpdateCheckoutSettingsRequest, UpdateCheckoutSettingsRequest$1, UpdateCheckoutSettingsResponse & UpdateCheckoutSettingsResponseNonNullableFields, UpdateCheckoutSettingsResponse$1 & UpdateCheckoutSettingsResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, getCheckoutSettings, updateCheckoutSettings };
