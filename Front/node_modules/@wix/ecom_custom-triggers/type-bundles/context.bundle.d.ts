interface CustomTrigger {
    /** Custom trigger ID. */
    _id?: string;
}
interface ListTriggersRequest {
}
interface ListTriggersResponse {
    /** Custom triggers. */
    customTriggers?: ListTriggersResponseCustomTrigger[];
}
interface ListTriggersResponseCustomTrigger {
    /** Custom trigger ID. */
    _id?: string;
    /** Custom trigger name to display in the dashboard. */
    name?: string;
}
interface GetEligibleTriggersRequest {
    /** List of line items in the cart/checkout. */
    lineItems?: LineItem[];
    /** List of triggers to be checked for discount eligibility. */
    triggers?: TriggerToFilterBy[];
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}
interface LineItem {
    /** Line item ID. */
    _id?: string;
    /** Item quantity in this line item. */
    quantity?: number | null;
    /**
     * Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference;
    /** Price of a single item. */
    price?: string;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [Wix Dev Center](https://dev.wix.com/apps).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
interface TriggerToFilterBy {
    /** Custom trigger info. */
    customTrigger?: CustomTrigger;
    /** Unique trigger identifier. The same value must be returned in `eligibleTriggers[i].identifier`. */
    identifier?: string | null;
}
interface GetEligibleTriggersResponse {
    /** List of eligible triggers. These are used by the Discount Rules API and Wix eCommerce to apply the relevant discount. */
    eligibleTriggers?: EligibleTrigger[];
}
interface EligibleTrigger {
    /** Custom trigger ID. Must be passed with relevant `identifier`. */
    customTriggerId?: string;
    /** Unique trigger identifier. The value must be the same as its equivalent in `triggers[i].identifier` in the request payload. */
    identifier?: string | null;
}
interface CustomTriggerConfig {
    /**
     * Required. Base URI where the endpoints are called.
     * Wix appends the endpoint path to the base URI. For example, to call the Get Eligible Triggers endpoint at `https://my-discount-app.com/v1/getEligibleTriggers`, the base URI you provide here is `https://my-discount-app.com/`.
     */
    deploymentUri?: string;
}
/**
 * this message is not directly used by any service,
 * it exists to describe the expected parameters that SHOULD be provided to invoked Velo methods as part of open-platform.
 * e.g. SPIs, event-handlers, etc..
 * NOTE: this context object MUST be provided as the last argument in each Velo method signature.
 *
 * Example:
 * ```typescript
 * export function wixStores_onOrderCanceled({ event, metadata }: OrderCanceledEvent) {
 * ...
 * }
 * ```
 */
interface Context {
    /** A unique identifier of the request. You may print this ID to your logs to help with future debugging and easier correlation with Wix's logs. */
    requestId?: string | null;
    /** [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) 3-letter currency code. */
    currency?: string | null;
    /** An object that describes the identity that triggered this request. */
    identity?: IdentificationData;
    /** A string representing a language and region in the format of `"xx-XX"`. First 2 letters represent the language code according to ISO 639-1. This is followed by a dash "-", and then a by 2 capital letters representing the region according to ISO 3166-2. For example, `"en-US"`. */
    languages?: string[];
    /** The service provider app's instance ID. */
    instanceId?: string | null;
}
declare enum IdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: IdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}

type ServicePluginMethodInput = {
    request: any;
    metadata: any;
};
type ServicePluginContract = Record<string, (payload: ServicePluginMethodInput) => unknown | Promise<unknown>>;
type ServicePluginMethodMetadata = {
    name: string;
    primaryHttpMappingPath: string;
    transformations: {
        fromREST: (...args: unknown[]) => ServicePluginMethodInput;
        toREST: (...args: unknown[]) => unknown;
    };
};
type ServicePluginDefinition<Contract extends ServicePluginContract> = {
    __type: 'service-plugin-definition';
    componentType: string;
    methods: ServicePluginMethodMetadata[];
    __contract: Contract;
};
declare function ServicePluginDefinition<Contract extends ServicePluginContract>(componentType: string, methods: ServicePluginMethodMetadata[]): ServicePluginDefinition<Contract>;
type BuildServicePluginDefinition<T extends ServicePluginDefinition<any>> = (implementation: T['__contract']) => void;

declare global {
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- It has to be an `interface` so that it can be merged.
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}

declare global {
    interface ContextualClient {
    }
}

interface ListTriggersEnvelope {
    request: ListTriggersRequest;
    metadata: Context;
}
interface GetEligibleTriggersEnvelope {
    request: GetEligibleTriggersRequest;
    metadata: Context;
}
declare const provideHandlers$1: ServicePluginDefinition<{
    /**
     *
     * Lists all custom triggers provided by your service plugin integration.
     *
     * This method is automatically called by Wix eCommerce to populate the custom [minimum requirements section of an automatic discount](https://support.wix.com/en/article/wix-stores-creating-automatic-discounts#:~:text=Create%20minimum%20requirements). */
    listTriggers(payload: ListTriggersEnvelope): ListTriggersResponse | Promise<ListTriggersResponse>;
    /**
     *
     * Retrieves eligible custom discount triggers based on the provided items.
     *
     * This method is automatically called by Wix eCommerce to retrieve the custom discount triggers provided by your extension.
     * This happens when actions are performed on the cart and checkout entities/pages. For example, when an item is added to the cart. */
    getEligibleTriggers(payload: GetEligibleTriggersEnvelope): GetEligibleTriggersResponse | Promise<GetEligibleTriggersResponse>;
}>;

declare function createServicePluginModule<T extends ServicePluginDefinition<any>>(servicePluginDefinition: T): BuildServicePluginDefinition<T> & T;

type _publicProvideHandlersType = typeof provideHandlers$1;
declare const provideHandlers: ReturnType<typeof createServicePluginModule<_publicProvideHandlersType>>;

export { type CatalogReference, type Context, type CustomTrigger, type CustomTriggerConfig, type EligibleTrigger, type GetEligibleTriggersRequest, type GetEligibleTriggersResponse, type IdentificationData, type IdentificationDataIdOneOf, IdentityType, type LineItem, type ListTriggersRequest, type ListTriggersResponse, type ListTriggersResponseCustomTrigger, type TriggerToFilterBy, type _publicProvideHandlersType, provideHandlers, provideHandlers$1 as publicProvideHandlers };
