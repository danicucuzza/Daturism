interface ListCurrenciesRequest$1 {
}
interface ListCurrenciesResponse$1 {
    /** Supported currencies */
    currencies?: Currency$1[];
}
interface Currency$1 {
    /** Currency code. */
    code?: string;
    /** Currency symbol. */
    symbol?: string;
}
interface ConvertCurrencyRequest$1 {
    /** Amounts to convert. */
    amounts?: DecimalValue$1[];
    /** Original currency. */
    from: string;
    /** Target currency. */
    to: string;
}
interface DecimalValue$1 {
    /** Value without decimals (e.g., for 10.95 value will be 1095). */
    value?: string;
    /** Decimal places to apply (e.g., for 10.95 decimal_places will be 2). */
    decimalPlaces?: number;
}
interface ConvertCurrencyResponse$1 {
    /** Converted amounts. */
    amounts?: DecimalValue$1[];
    /** Date and time the conversion rate was last updated. */
    rateTimestamp?: Date | null;
}
interface ConversionRateRequest$1 {
    /** Original currency. */
    from: string;
    /** Target currency. */
    to: string;
}
interface ConversionRateResponse$1 {
    /** Conversion rate between 2 currencies. */
    rate?: DecimalValue$1;
    /** Date and time the conversion rate was last updated. */
    rateTimestamp?: Date | null;
}
interface CurrencyNonNullableFields$1 {
    code: string;
    symbol: string;
}
interface ListCurrenciesResponseNonNullableFields$1 {
    currencies: CurrencyNonNullableFields$1[];
}
interface DecimalValueNonNullableFields$1 {
    value: string;
    decimalPlaces: number;
}
interface ConvertCurrencyResponseNonNullableFields$1 {
    amounts: DecimalValueNonNullableFields$1[];
}
interface ConversionRateResponseNonNullableFields$1 {
    rate?: DecimalValueNonNullableFields$1;
}

interface ListCurrenciesRequest {
}
interface ListCurrenciesResponse {
    /** Supported currencies. */
    currencies?: Currency[];
}
interface Currency {
    /** A 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code. */
    code?: string;
    /** Currency symbol. */
    symbol?: string;
}
interface ConvertCurrencyRequest {
    /** Amounts to convert. */
    amounts?: DecimalValue[];
    /** Original currency to convert from as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `from` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function. */
    from: string;
    /** Target currency to convert to as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `to` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function. */
    to: string;
}
interface DecimalValue {
    /** The value without decimal points. For example, the number `10.95` becomes `1095`. */
    value?: string;
    /** Decimal places to apply. For example, the number of decimal places for `10.95`  is `2`. */
    decimalPlaces?: number;
}
interface ConvertCurrencyResponse {
    /** Converted amounts. */
    amounts?: DecimalValue[];
    /** Date and time the conversion rate was last updated. */
    rateTimestamp?: Date | null;
}
interface ConversionRateRequest {
    /** Original currency to get the rate for as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `from` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function. */
    from: string;
    /** Target currency to get the rate for as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `to` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function. */
    to: string;
}
interface ConversionRateResponse {
    /** Conversion rate between 2 currencies. */
    rate?: DecimalValue;
    /** Date and time the conversion rate was last updated. */
    rateTimestamp?: Date | null;
}
interface CurrencyNonNullableFields {
    code: string;
    symbol: string;
}
interface ListCurrenciesResponseNonNullableFields {
    currencies: CurrencyNonNullableFields[];
}
interface DecimalValueNonNullableFields {
    value: string;
    decimalPlaces: number;
}
interface ConvertCurrencyResponseNonNullableFields {
    amounts: DecimalValueNonNullableFields[];
}
interface ConversionRateResponseNonNullableFields {
    rate?: DecimalValueNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function listCurrencies(): __PublicMethodMetaInfo<'GET', {}, ListCurrenciesRequest, ListCurrenciesRequest$1, ListCurrenciesResponse & ListCurrenciesResponseNonNullableFields, ListCurrenciesResponse$1 & ListCurrenciesResponseNonNullableFields$1>;
declare function convertCurrency(): __PublicMethodMetaInfo<'POST', {
    from: string;
    to: string;
}, ConvertCurrencyRequest, ConvertCurrencyRequest$1, ConvertCurrencyResponse & ConvertCurrencyResponseNonNullableFields, ConvertCurrencyResponse$1 & ConvertCurrencyResponseNonNullableFields$1>;
declare function getConversionRate(): __PublicMethodMetaInfo<'GET', {
    from: string;
    to: string;
}, ConversionRateRequest, ConversionRateRequest$1, ConversionRateResponse & ConversionRateResponseNonNullableFields, ConversionRateResponse$1 & ConversionRateResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, convertCurrency, getConversionRate, listCurrencies };
