"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInvite = exports.SubjectContextType = exports.SubjectType = exports.JoinedConditionOperator = exports.SimpleConditionOperator = exports.InviteStatus = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixIdentityInvitesV1AccountInvite = __importStar(require("./identity-invites-v1-account-invite-account-invite.http"));
/** Invite status stating whether the invite was accepted, waiting to be accepted, deleted etc.. */
var InviteStatus;
(function (InviteStatus) {
    InviteStatus["Pending"] = "Pending";
    InviteStatus["Used"] = "Used";
    InviteStatus["Deleted"] = "Deleted";
    InviteStatus["Declined"] = "Declined";
    InviteStatus["Expired"] = "Expired";
})(InviteStatus || (exports.InviteStatus = InviteStatus = {}));
var SimpleConditionOperator;
(function (SimpleConditionOperator) {
    SimpleConditionOperator["UNKNOWN_SIMPLE_OP"] = "UNKNOWN_SIMPLE_OP";
    SimpleConditionOperator["EQUAL"] = "EQUAL";
})(SimpleConditionOperator || (exports.SimpleConditionOperator = SimpleConditionOperator = {}));
var JoinedConditionOperator;
(function (JoinedConditionOperator) {
    JoinedConditionOperator["UNKNOWN_JOIN_OP"] = "UNKNOWN_JOIN_OP";
    JoinedConditionOperator["OR"] = "OR";
    JoinedConditionOperator["AND"] = "AND";
})(JoinedConditionOperator || (exports.JoinedConditionOperator = JoinedConditionOperator = {}));
var SubjectType;
(function (SubjectType) {
    SubjectType["UNKNOWN"] = "UNKNOWN";
    SubjectType["ACCOUNT"] = "ACCOUNT";
    SubjectType["USER"] = "USER";
    SubjectType["USER_GROUP"] = "USER_GROUP";
    SubjectType["MEMBER_GROUP"] = "MEMBER_GROUP";
    SubjectType["VISITOR_GROUP"] = "VISITOR_GROUP";
    SubjectType["EXTERNAL_APP"] = "EXTERNAL_APP";
    SubjectType["ACCOUNT_GROUP"] = "ACCOUNT_GROUP";
    SubjectType["WIX_APP"] = "WIX_APP";
})(SubjectType || (exports.SubjectType = SubjectType = {}));
var SubjectContextType;
(function (SubjectContextType) {
    SubjectContextType["UNKNOWN_CTX"] = "UNKNOWN_CTX";
    SubjectContextType["ORG_CTX"] = "ORG_CTX";
    SubjectContextType["ACCOUNT_CTX"] = "ACCOUNT_CTX";
})(SubjectContextType || (exports.SubjectContextType = SubjectContextType = {}));
/**
 * Creates and sends invite emails to a list of potential team members, inviting them to become team members of the requesting account.
 * The invites may be limited to a specific resource (site or other asset).
 * Maximum 50 invitees can be specified per call.
 *
 * > **Important**: This call requires an account level API key and cannot be authenticated with the standard authorization header. API keys are currently available to selected beta users only.
 * @param subjectsAssignments - Array of potential team members' email addresses and their corresponding assignments (how they will be assigned when they accept the invite).
 * @public
 * @documentationMaturity preview
 * @requiredField subjectsAssignments
 * @permissionId team.send-invite
 */
async function createInvite(subjectsAssignments, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        subjectsAssignments: subjectsAssignments,
        defaultEmailLanguage: options?.defaultEmailLanguage,
    });
    const reqOpts = ambassadorWixIdentityInvitesV1AccountInvite.createInvite(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                subjectsAssignments: '$[0]',
                defaultEmailLanguage: '$[1].defaultEmailLanguage',
            },
            singleArgumentUnchanged: false,
        }, ['subjectsAssignments', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createInvite = createInvite;
//# sourceMappingURL=identity-invites-v1-account-invite-account-invite.universal.js.map