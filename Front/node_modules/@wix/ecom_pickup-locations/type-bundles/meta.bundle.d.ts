/** PickupLocation is the main entity of PickupLocations that can be used for lorem ipsum dolor */
interface PickupLocation$1 {
    /**
     * PickupLocation ID
     * @readonly
     */
    id?: string | null;
    /**
     * Represents the current state of an item. Each time the item is modified, its `revision` changes. for an update operation to succeed, you MUST pass the latest revision
     * @readonly
     */
    revision?: string | null;
    /**
     * Represents the time this PickupLocation was created
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Represents the time this PickupLocation was last updated
     * @readonly
     */
    updatedDate?: Date | null;
    /** Pickup Location Name */
    name?: string | null;
    /** Pickup Location Address */
    address?: Address$1;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /** inactive pickup locations should not be shown in checkout */
    active?: boolean | null;
    /** at runtime for a given pickup input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates$1[];
    /** This pickup location is active for the following delivery regions. */
    deliveryRegionIds?: string[];
}
/** Physical address */
interface Address$1 extends AddressStreetOneOf$1 {
    /** Street name and number. */
    streetAddress?: StreetAddress$1;
    addressLine?: string | null;
    /** Country code. */
    country?: string | null;
    /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    addressLine2?: string | null;
}
/** @oneof */
interface AddressStreetOneOf$1 {
    /** Street name and number. */
    streetAddress?: StreetAddress$1;
    addressLine?: string | null;
}
interface StreetAddress$1 {
    number?: string;
    name?: string;
}
interface ConditionalRates$1 {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition$1[];
    amount?: string;
}
interface Condition$1 {
    type?: ConditionType$1;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator$1;
}
declare enum ConditionType$1 {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
declare enum LogicalOperator$1 {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
interface CreatePickupLocationRequest$1 {
    /** PickupLocation to be created */
    pickupLocation: PickupLocation$1;
}
interface CreatePickupLocationResponse$1 {
    /** The created PickupLocation */
    pickupLocation?: PickupLocation$1;
}
interface GetPickupLocationRequest$1 {
    /** Id of the PickupLocation to retrieve */
    pickupLocationId: string;
}
interface GetPickupLocationResponse$1 {
    /** The retrieved PickupLocation */
    pickupLocation?: PickupLocation$1;
}
interface UpdatePickupLocationRequest$1 {
    /** PickupLocation to be updated, may be partial */
    pickupLocation: PickupLocation$1;
}
interface UpdatePickupLocationResponse$1 {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation$1;
}
interface DeletePickupLocationRequest$1 {
    /** Id of the PickupLocation to delete */
    pickupLocationId: string;
}
interface DeletePickupLocationResponse$1 {
}
interface QueryPickupLocationRequest$1 {
    /** WQL expression */
    query: QueryV2$1;
}
interface QueryV2$1 extends QueryV2PagingMethodOneOf$1 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$1;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$1[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf$1 {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging$1;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryPickupLocationResponse$1 {
    /** The retrieved PickupLocations */
    pickupLocations?: PickupLocation$1[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata$1;
}
interface CursorPagingMetadata$1 {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$1;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface AddDeliveryRegionRequest$1 {
    /** Id of the PickupLocation to add to the delivery region */
    pickupLocationId: string;
    /** Id of the DeliveryRegion to add the PickupLocation to */
    deliveryRegionId: string;
    /** Revision of the PickupLocation */
    revision: string | null;
}
interface AddDeliveryRegionResponse$1 {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation$1;
}
interface RemoveDeliveryRegionRequest$1 {
    /** Id of the PickupLocation to add to the delivery region */
    pickupLocationId: string;
    /** Id of the DeliveryRegion to add the PickupLocation to */
    deliveryRegionId: string;
    /** Revision of the PickupLocation */
    revision: string | null;
}
interface RemoveDeliveryRegionResponse$1 {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation$1;
}
interface BulkCreatePickupLocationRequest$1 {
    pickupLocations: PickupLocation$1[];
}
interface BulkCreatePickupLocationResponse$1 {
    pickupLocations?: PickupLocation$1[];
    errors?: PickupLocationError$1[];
}
interface PickupLocationError$1 {
    id?: string;
    error?: ApplicationError$1;
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkUpdatePickupLocationRequest$1 {
    pickupLocations: PickupLocation$1[];
}
interface BulkUpdatePickupLocationResponse$1 {
    pickupLocations?: PickupLocation$1[];
    errors?: PickupLocationError$1[];
}
interface BulkDeletePickupLocationRequest$1 {
    pickupLocationIds: string[];
}
interface BulkDeletePickupLocationResponse$1 {
    errors?: PickupLocationError$1[];
}
interface StreetAddressNonNullableFields$1 {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields$1 {
    streetAddress?: StreetAddressNonNullableFields$1;
}
interface ConditionNonNullableFields$1 {
    type: ConditionType$1;
    value: string;
    operator: LogicalOperator$1;
}
interface ConditionalRatesNonNullableFields$1 {
    conditions: ConditionNonNullableFields$1[];
    amount: string;
}
interface PickupLocationNonNullableFields$1 {
    address?: AddressNonNullableFields$1;
    rates: ConditionalRatesNonNullableFields$1[];
    deliveryRegionIds: string[];
}
interface CreatePickupLocationResponseNonNullableFields$1 {
    pickupLocation?: PickupLocationNonNullableFields$1;
}
interface GetPickupLocationResponseNonNullableFields$1 {
    pickupLocation?: PickupLocationNonNullableFields$1;
}
interface UpdatePickupLocationResponseNonNullableFields$1 {
    pickupLocation?: PickupLocationNonNullableFields$1;
}
interface QueryPickupLocationResponseNonNullableFields$1 {
    pickupLocations: PickupLocationNonNullableFields$1[];
}
interface AddDeliveryRegionResponseNonNullableFields$1 {
    pickupLocation?: PickupLocationNonNullableFields$1;
}
interface RemoveDeliveryRegionResponseNonNullableFields$1 {
    pickupLocation?: PickupLocationNonNullableFields$1;
}
interface ApplicationErrorNonNullableFields$1 {
    code: string;
    description: string;
}
interface PickupLocationErrorNonNullableFields$1 {
    id: string;
    error?: ApplicationErrorNonNullableFields$1;
}
interface BulkCreatePickupLocationResponseNonNullableFields$1 {
    pickupLocations: PickupLocationNonNullableFields$1[];
    errors: PickupLocationErrorNonNullableFields$1[];
}
interface BulkUpdatePickupLocationResponseNonNullableFields$1 {
    pickupLocations: PickupLocationNonNullableFields$1[];
    errors: PickupLocationErrorNonNullableFields$1[];
}
interface BulkDeletePickupLocationResponseNonNullableFields$1 {
    errors: PickupLocationErrorNonNullableFields$1[];
}

/** PickupLocation is the main entity of PickupLocations that can be used for lorem ipsum dolor */
interface PickupLocation {
    /**
     * PickupLocation ID
     * @readonly
     */
    _id?: string | null;
    /**
     * Represents the current state of an item. Each time the item is modified, its `revision` changes. for an update operation to succeed, you MUST pass the latest revision
     * @readonly
     */
    revision?: string | null;
    /**
     * Represents the time this PickupLocation was created
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Represents the time this PickupLocation was last updated
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Pickup Location Name */
    name?: string | null;
    /** Pickup Location Address */
    address?: Address;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /** inactive pickup locations should not be shown in checkout */
    active?: boolean | null;
    /** at runtime for a given pickup input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates[];
    /** This pickup location is active for the following delivery regions. */
    deliveryRegionIds?: string[];
}
/** Physical address */
interface Address extends AddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress;
    addressLine1?: string | null;
    /** Country code. */
    country?: string | null;
    /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    addressLine2?: string | null;
}
/** @oneof */
interface AddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress;
    addressLine?: string | null;
}
interface StreetAddress {
    number?: string;
    name?: string;
}
interface ConditionalRates {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition[];
    amount?: string;
}
interface Condition {
    type?: ConditionType;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator;
}
declare enum ConditionType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
declare enum LogicalOperator {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
interface CreatePickupLocationRequest {
    /** PickupLocation to be created */
    pickupLocation: PickupLocation;
}
interface CreatePickupLocationResponse {
    /** The created PickupLocation */
    pickupLocation?: PickupLocation;
}
interface GetPickupLocationRequest {
    /** Id of the PickupLocation to retrieve */
    pickupLocationId: string;
}
interface GetPickupLocationResponse {
    /** The retrieved PickupLocation */
    pickupLocation?: PickupLocation;
}
interface UpdatePickupLocationRequest {
    /** PickupLocation to be updated, may be partial */
    pickupLocation: PickupLocation;
}
interface UpdatePickupLocationResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
interface DeletePickupLocationRequest {
    /** Id of the PickupLocation to delete */
    pickupLocationId: string;
}
interface DeletePickupLocationResponse {
}
interface QueryPickupLocationRequest {
    /** WQL expression */
    query: QueryV2;
}
interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryPickupLocationResponse {
    /** The retrieved PickupLocations */
    pickupLocations?: PickupLocation[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface AddDeliveryRegionRequest {
    /** Id of the PickupLocation to add to the delivery region */
    pickupLocationId: string;
    /** Id of the DeliveryRegion to add the PickupLocation to */
    deliveryRegionId: string;
    /** Revision of the PickupLocation */
    revision: string | null;
}
interface AddDeliveryRegionResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
interface RemoveDeliveryRegionRequest {
    /** Id of the PickupLocation to add to the delivery region */
    pickupLocationId: string;
    /** Id of the DeliveryRegion to add the PickupLocation to */
    deliveryRegionId: string;
    /** Revision of the PickupLocation */
    revision: string | null;
}
interface RemoveDeliveryRegionResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
interface BulkCreatePickupLocationRequest {
    pickupLocations: PickupLocation[];
}
interface BulkCreatePickupLocationResponse {
    pickupLocations?: PickupLocation[];
    errors?: PickupLocationError[];
}
interface PickupLocationError {
    _id?: string;
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkUpdatePickupLocationRequest {
    pickupLocations: PickupLocation[];
}
interface BulkUpdatePickupLocationResponse {
    pickupLocations?: PickupLocation[];
    errors?: PickupLocationError[];
}
interface BulkDeletePickupLocationRequest {
    pickupLocationIds: string[];
}
interface BulkDeletePickupLocationResponse {
    errors?: PickupLocationError[];
}
interface StreetAddressNonNullableFields {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields;
}
interface ConditionNonNullableFields {
    type: ConditionType;
    value: string;
    operator: LogicalOperator;
}
interface ConditionalRatesNonNullableFields {
    conditions: ConditionNonNullableFields[];
    amount: string;
}
interface PickupLocationNonNullableFields {
    address?: AddressNonNullableFields;
    rates: ConditionalRatesNonNullableFields[];
    deliveryRegionIds: string[];
}
interface CreatePickupLocationResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
interface GetPickupLocationResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
interface UpdatePickupLocationResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
interface QueryPickupLocationResponseNonNullableFields {
    pickupLocations: PickupLocationNonNullableFields[];
}
interface AddDeliveryRegionResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
interface RemoveDeliveryRegionResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface PickupLocationErrorNonNullableFields {
    _id: string;
    error?: ApplicationErrorNonNullableFields;
}
interface BulkCreatePickupLocationResponseNonNullableFields {
    pickupLocations: PickupLocationNonNullableFields[];
    errors: PickupLocationErrorNonNullableFields[];
}
interface BulkUpdatePickupLocationResponseNonNullableFields {
    pickupLocations: PickupLocationNonNullableFields[];
    errors: PickupLocationErrorNonNullableFields[];
}
interface BulkDeletePickupLocationResponseNonNullableFields {
    errors: PickupLocationErrorNonNullableFields[];
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createPickupLocation(): __PublicMethodMetaInfo<'POST', {}, CreatePickupLocationRequest, CreatePickupLocationRequest$1, CreatePickupLocationResponse & CreatePickupLocationResponseNonNullableFields, CreatePickupLocationResponse$1 & CreatePickupLocationResponseNonNullableFields$1>;
declare function getPickupLocation(): __PublicMethodMetaInfo<'GET', {
    pickupLocationId: string;
}, GetPickupLocationRequest, GetPickupLocationRequest$1, GetPickupLocationResponse & GetPickupLocationResponseNonNullableFields, GetPickupLocationResponse$1 & GetPickupLocationResponseNonNullableFields$1>;
declare function updatePickupLocation(): __PublicMethodMetaInfo<'PATCH', {
    pickupLocationId: string;
}, UpdatePickupLocationRequest, UpdatePickupLocationRequest$1, UpdatePickupLocationResponse & UpdatePickupLocationResponseNonNullableFields, UpdatePickupLocationResponse$1 & UpdatePickupLocationResponseNonNullableFields$1>;
declare function deletePickupLocation(): __PublicMethodMetaInfo<'DELETE', {
    pickupLocationId: string;
}, DeletePickupLocationRequest, DeletePickupLocationRequest$1, DeletePickupLocationResponse, DeletePickupLocationResponse$1>;
declare function queryPickupLocation(): __PublicMethodMetaInfo<'POST', {}, QueryPickupLocationRequest, QueryPickupLocationRequest$1, QueryPickupLocationResponse & QueryPickupLocationResponseNonNullableFields, QueryPickupLocationResponse$1 & QueryPickupLocationResponseNonNullableFields$1>;
declare function addDeliveryRegion(): __PublicMethodMetaInfo<'POST', {
    pickupLocationId: string;
}, AddDeliveryRegionRequest, AddDeliveryRegionRequest$1, AddDeliveryRegionResponse & AddDeliveryRegionResponseNonNullableFields, AddDeliveryRegionResponse$1 & AddDeliveryRegionResponseNonNullableFields$1>;
declare function removeDeliveryRegion(): __PublicMethodMetaInfo<'POST', {
    pickupLocationId: string;
}, RemoveDeliveryRegionRequest, RemoveDeliveryRegionRequest$1, RemoveDeliveryRegionResponse & RemoveDeliveryRegionResponseNonNullableFields, RemoveDeliveryRegionResponse$1 & RemoveDeliveryRegionResponseNonNullableFields$1>;
declare function bulkCreatePickupLocation(): __PublicMethodMetaInfo<'POST', {}, BulkCreatePickupLocationRequest, BulkCreatePickupLocationRequest$1, BulkCreatePickupLocationResponse & BulkCreatePickupLocationResponseNonNullableFields, BulkCreatePickupLocationResponse$1 & BulkCreatePickupLocationResponseNonNullableFields$1>;
declare function bulkUpdatePickupLocation(): __PublicMethodMetaInfo<'PATCH', {}, BulkUpdatePickupLocationRequest, BulkUpdatePickupLocationRequest$1, BulkUpdatePickupLocationResponse & BulkUpdatePickupLocationResponseNonNullableFields, BulkUpdatePickupLocationResponse$1 & BulkUpdatePickupLocationResponseNonNullableFields$1>;
declare function bulkDeletePickupLocation(): __PublicMethodMetaInfo<'DELETE', {}, BulkDeletePickupLocationRequest, BulkDeletePickupLocationRequest$1, BulkDeletePickupLocationResponse & BulkDeletePickupLocationResponseNonNullableFields, BulkDeletePickupLocationResponse$1 & BulkDeletePickupLocationResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, addDeliveryRegion, bulkCreatePickupLocation, bulkDeletePickupLocation, bulkUpdatePickupLocation, createPickupLocation, deletePickupLocation, getPickupLocation, queryPickupLocation, removeDeliveryRegion, updatePickupLocation };
